

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 15 16:53:21 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	intentry,global,class=CODE,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	text83,local,class=CODE,merge=1,delta=2
   114                           	psect	text84,local,class=CODE,merge=1,delta=2
   115                           	psect	text85,local,class=CODE,merge=1,delta=2
   116                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text93,local,class=CODE,merge=1,delta=2
   124                           	psect	text94,local,class=CODE,merge=1,delta=2
   125                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text98,local,class=CODE,merge=1,delta=2
   129                           	dabs	1,0x7E,2
   130  0000                     
   131                           ; Version 2.05
   132                           ; Generated 20/12/2018 GMT
   133                           ; 
   134                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   135                           ; All rights reserved.
   136                           ; 
   137                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   138                           ; 
   139                           ; Redistribution and use in source and binary forms, with or without modification, are
   140                           ; permitted provided that the following conditions are met:
   141                           ; 
   142                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   143                           ;        conditions and the following disclaimer.
   144                           ; 
   145                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   146                           ;        of conditions and the following disclaimer in the documentation and/or other
   147                           ;        materials provided with the distribution.
   148                           ; 
   149                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   150                           ;        software without specific prior written permission.
   151                           ; 
   152                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   153                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   154                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   155                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   156                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   157                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   158                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   159                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   160                           ; 
   161                           ; 
   162                           ; Code-generator required, PIC16F18345 Definitions
   163                           ; 
   164                           ; SFR Addresses
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0013                     	;# 
   184  0014                     	;# 
   185  0015                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  0090                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0097                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  0111                     	;# 
   218  0112                     	;# 
   219  0113                     	;# 
   220  0114                     	;# 
   221  0115                     	;# 
   222  0116                     	;# 
   223  0117                     	;# 
   224  0118                     	;# 
   225  0119                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0197                     	;# 
   230  0199                     	;# 
   231  0199                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019A                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019D                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019E                     	;# 
   249  019E                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  019F                     	;# 
   255  020C                     	;# 
   256  020D                     	;# 
   257  020E                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  0219                     	;# 
   275  021A                     	;# 
   276  021B                     	;# 
   277  021C                     	;# 
   278  021D                     	;# 
   279  021D                     	;# 
   280  021E                     	;# 
   281  021F                     	;# 
   282  028C                     	;# 
   283  028D                     	;# 
   284  028E                     	;# 
   285  0291                     	;# 
   286  0291                     	;# 
   287  0292                     	;# 
   288  0293                     	;# 
   289  0294                     	;# 
   290  0295                     	;# 
   291  0295                     	;# 
   292  0296                     	;# 
   293  0297                     	;# 
   294  0298                     	;# 
   295  029F                     	;# 
   296  030C                     	;# 
   297  030D                     	;# 
   298  030E                     	;# 
   299  0311                     	;# 
   300  0311                     	;# 
   301  0312                     	;# 
   302  0313                     	;# 
   303  0314                     	;# 
   304  0315                     	;# 
   305  0315                     	;# 
   306  0316                     	;# 
   307  0317                     	;# 
   308  0318                     	;# 
   309  038C                     	;# 
   310  038D                     	;# 
   311  038E                     	;# 
   312  0391                     	;# 
   313  0392                     	;# 
   314  0393                     	;# 
   315  0394                     	;# 
   316  0395                     	;# 
   317  0396                     	;# 
   318  0397                     	;# 
   319  0398                     	;# 
   320  0399                     	;# 
   321  039A                     	;# 
   322  039C                     	;# 
   323  039D                     	;# 
   324  039E                     	;# 
   325  039F                     	;# 
   326  0411                     	;# 
   327  0411                     	;# 
   328  0412                     	;# 
   329  0413                     	;# 
   330  0414                     	;# 
   331  0415                     	;# 
   332  0416                     	;# 
   333  0417                     	;# 
   334  0418                     	;# 
   335  0418                     	;# 
   336  0419                     	;# 
   337  041A                     	;# 
   338  041B                     	;# 
   339  041C                     	;# 
   340  041D                     	;# 
   341  041E                     	;# 
   342  041F                     	;# 
   343  0498                     	;# 
   344  0498                     	;# 
   345  0499                     	;# 
   346  049A                     	;# 
   347  049B                     	;# 
   348  049B                     	;# 
   349  049C                     	;# 
   350  049D                     	;# 
   351  049E                     	;# 
   352  049F                     	;# 
   353  0617                     	;# 
   354  0618                     	;# 
   355  0619                     	;# 
   356  0619                     	;# 
   357  061A                     	;# 
   358  061B                     	;# 
   359  061C                     	;# 
   360  061C                     	;# 
   361  061F                     	;# 
   362  0691                     	;# 
   363  0692                     	;# 
   364  0693                     	;# 
   365  0694                     	;# 
   366  0695                     	;# 
   367  0696                     	;# 
   368  0697                     	;# 
   369  0698                     	;# 
   370  0699                     	;# 
   371  0711                     	;# 
   372  0712                     	;# 
   373  0713                     	;# 
   374  0714                     	;# 
   375  0715                     	;# 
   376  0716                     	;# 
   377  0717                     	;# 
   378  0718                     	;# 
   379  0719                     	;# 
   380  0891                     	;# 
   381  0891                     	;# 
   382  0891                     	;# 
   383  0891                     	;# 
   384  0891                     	;# 
   385  0891                     	;# 
   386  0892                     	;# 
   387  0892                     	;# 
   388  0892                     	;# 
   389  0893                     	;# 
   390  0893                     	;# 
   391  0893                     	;# 
   392  0893                     	;# 
   393  0893                     	;# 
   394  0893                     	;# 
   395  0894                     	;# 
   396  0894                     	;# 
   397  0894                     	;# 
   398  0895                     	;# 
   399  0895                     	;# 
   400  0895                     	;# 
   401  0896                     	;# 
   402  0896                     	;# 
   403  0896                     	;# 
   404  089B                     	;# 
   405  0911                     	;# 
   406  0912                     	;# 
   407  0913                     	;# 
   408  0914                     	;# 
   409  0915                     	;# 
   410  0916                     	;# 
   411  0918                     	;# 
   412  0919                     	;# 
   413  091A                     	;# 
   414  091B                     	;# 
   415  091C                     	;# 
   416  091D                     	;# 
   417  091E                     	;# 
   418  091F                     	;# 
   419  0E0F                     	;# 
   420  0E10                     	;# 
   421  0E11                     	;# 
   422  0E12                     	;# 
   423  0E13                     	;# 
   424  0E14                     	;# 
   425  0E15                     	;# 
   426  0E16                     	;# 
   427  0E17                     	;# 
   428  0E18                     	;# 
   429  0E19                     	;# 
   430  0E1A                     	;# 
   431  0E1B                     	;# 
   432  0E1C                     	;# 
   433  0E1D                     	;# 
   434  0E1E                     	;# 
   435  0E1F                     	;# 
   436  0E20                     	;# 
   437  0E21                     	;# 
   438  0E22                     	;# 
   439  0E24                     	;# 
   440  0E25                     	;# 
   441  0E28                     	;# 
   442  0E29                     	;# 
   443  0E2A                     	;# 
   444  0E2B                     	;# 
   445  0E2C                     	;# 
   446  0E2D                     	;# 
   447  0E2E                     	;# 
   448  0E2F                     	;# 
   449  0E90                     	;# 
   450  0E91                     	;# 
   451  0E92                     	;# 
   452  0E94                     	;# 
   453  0E95                     	;# 
   454  0E9C                     	;# 
   455  0E9D                     	;# 
   456  0E9E                     	;# 
   457  0E9F                     	;# 
   458  0EA0                     	;# 
   459  0EA1                     	;# 
   460  0EA2                     	;# 
   461  0EA3                     	;# 
   462  0EA4                     	;# 
   463  0EA5                     	;# 
   464  0EA6                     	;# 
   465  0EA7                     	;# 
   466  0F0F                     	;# 
   467  0F10                     	;# 
   468  0F11                     	;# 
   469  0F12                     	;# 
   470  0F13                     	;# 
   471  0F14                     	;# 
   472  0F15                     	;# 
   473  0F16                     	;# 
   474  0F17                     	;# 
   475  0F18                     	;# 
   476  0F19                     	;# 
   477  0F1A                     	;# 
   478  0F1B                     	;# 
   479  0F1C                     	;# 
   480  0F1D                     	;# 
   481  0F1E                     	;# 
   482  0F1F                     	;# 
   483  0F20                     	;# 
   484  0F21                     	;# 
   485  0F22                     	;# 
   486  0F23                     	;# 
   487  0F24                     	;# 
   488  0F25                     	;# 
   489  0F26                     	;# 
   490  0F27                     	;# 
   491  0F28                     	;# 
   492  0F29                     	;# 
   493  0F2A                     	;# 
   494  0F2B                     	;# 
   495  0F2C                     	;# 
   496  0F2D                     	;# 
   497  0F2E                     	;# 
   498  0F2F                     	;# 
   499  0F30                     	;# 
   500  0F31                     	;# 
   501  0F32                     	;# 
   502  0F33                     	;# 
   503  0F34                     	;# 
   504  0F35                     	;# 
   505  0F36                     	;# 
   506  0F37                     	;# 
   507  0FE4                     	;# 
   508  0FE5                     	;# 
   509  0FE6                     	;# 
   510  0FE7                     	;# 
   511  0FE8                     	;# 
   512  0FE9                     	;# 
   513  0FEA                     	;# 
   514  0FEB                     	;# 
   515  0FED                     	;# 
   516  0FEE                     	;# 
   517  0FEF                     	;# 
   518  0000                     	;# 
   519  0001                     	;# 
   520  0002                     	;# 
   521  0003                     	;# 
   522  0004                     	;# 
   523  0005                     	;# 
   524  0006                     	;# 
   525  0007                     	;# 
   526  0008                     	;# 
   527  0009                     	;# 
   528  000A                     	;# 
   529  000B                     	;# 
   530  000C                     	;# 
   531  000D                     	;# 
   532  000E                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0016                     	;# 
   542  0017                     	;# 
   543  0018                     	;# 
   544  0019                     	;# 
   545  0019                     	;# 
   546  001A                     	;# 
   547  001B                     	;# 
   548  001C                     	;# 
   549  001D                     	;# 
   550  001E                     	;# 
   551  001F                     	;# 
   552  008C                     	;# 
   553  008D                     	;# 
   554  008E                     	;# 
   555  0090                     	;# 
   556  0091                     	;# 
   557  0092                     	;# 
   558  0093                     	;# 
   559  0094                     	;# 
   560  0097                     	;# 
   561  009B                     	;# 
   562  009B                     	;# 
   563  009C                     	;# 
   564  009D                     	;# 
   565  009E                     	;# 
   566  009F                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0111                     	;# 
   571  0112                     	;# 
   572  0113                     	;# 
   573  0114                     	;# 
   574  0115                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  0118                     	;# 
   578  0119                     	;# 
   579  018C                     	;# 
   580  018D                     	;# 
   581  018E                     	;# 
   582  0197                     	;# 
   583  0199                     	;# 
   584  0199                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019A                     	;# 
   588  019A                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019C                     	;# 
   595  019C                     	;# 
   596  019C                     	;# 
   597  019D                     	;# 
   598  019D                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019E                     	;# 
   602  019E                     	;# 
   603  019F                     	;# 
   604  019F                     	;# 
   605  019F                     	;# 
   606  019F                     	;# 
   607  019F                     	;# 
   608  020C                     	;# 
   609  020D                     	;# 
   610  020E                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  0212                     	;# 
   614  0212                     	;# 
   615  0213                     	;# 
   616  0213                     	;# 
   617  0214                     	;# 
   618  0214                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0216                     	;# 
   624  0216                     	;# 
   625  0217                     	;# 
   626  0217                     	;# 
   627  0219                     	;# 
   628  021A                     	;# 
   629  021B                     	;# 
   630  021C                     	;# 
   631  021D                     	;# 
   632  021D                     	;# 
   633  021E                     	;# 
   634  021F                     	;# 
   635  028C                     	;# 
   636  028D                     	;# 
   637  028E                     	;# 
   638  0291                     	;# 
   639  0291                     	;# 
   640  0292                     	;# 
   641  0293                     	;# 
   642  0294                     	;# 
   643  0295                     	;# 
   644  0295                     	;# 
   645  0296                     	;# 
   646  0297                     	;# 
   647  0298                     	;# 
   648  029F                     	;# 
   649  030C                     	;# 
   650  030D                     	;# 
   651  030E                     	;# 
   652  0311                     	;# 
   653  0311                     	;# 
   654  0312                     	;# 
   655  0313                     	;# 
   656  0314                     	;# 
   657  0315                     	;# 
   658  0315                     	;# 
   659  0316                     	;# 
   660  0317                     	;# 
   661  0318                     	;# 
   662  038C                     	;# 
   663  038D                     	;# 
   664  038E                     	;# 
   665  0391                     	;# 
   666  0392                     	;# 
   667  0393                     	;# 
   668  0394                     	;# 
   669  0395                     	;# 
   670  0396                     	;# 
   671  0397                     	;# 
   672  0398                     	;# 
   673  0399                     	;# 
   674  039A                     	;# 
   675  039C                     	;# 
   676  039D                     	;# 
   677  039E                     	;# 
   678  039F                     	;# 
   679  0411                     	;# 
   680  0411                     	;# 
   681  0412                     	;# 
   682  0413                     	;# 
   683  0414                     	;# 
   684  0415                     	;# 
   685  0416                     	;# 
   686  0417                     	;# 
   687  0418                     	;# 
   688  0418                     	;# 
   689  0419                     	;# 
   690  041A                     	;# 
   691  041B                     	;# 
   692  041C                     	;# 
   693  041D                     	;# 
   694  041E                     	;# 
   695  041F                     	;# 
   696  0498                     	;# 
   697  0498                     	;# 
   698  0499                     	;# 
   699  049A                     	;# 
   700  049B                     	;# 
   701  049B                     	;# 
   702  049C                     	;# 
   703  049D                     	;# 
   704  049E                     	;# 
   705  049F                     	;# 
   706  0617                     	;# 
   707  0618                     	;# 
   708  0619                     	;# 
   709  0619                     	;# 
   710  061A                     	;# 
   711  061B                     	;# 
   712  061C                     	;# 
   713  061C                     	;# 
   714  061F                     	;# 
   715  0691                     	;# 
   716  0692                     	;# 
   717  0693                     	;# 
   718  0694                     	;# 
   719  0695                     	;# 
   720  0696                     	;# 
   721  0697                     	;# 
   722  0698                     	;# 
   723  0699                     	;# 
   724  0711                     	;# 
   725  0712                     	;# 
   726  0713                     	;# 
   727  0714                     	;# 
   728  0715                     	;# 
   729  0716                     	;# 
   730  0717                     	;# 
   731  0718                     	;# 
   732  0719                     	;# 
   733  0891                     	;# 
   734  0891                     	;# 
   735  0891                     	;# 
   736  0891                     	;# 
   737  0891                     	;# 
   738  0891                     	;# 
   739  0892                     	;# 
   740  0892                     	;# 
   741  0892                     	;# 
   742  0893                     	;# 
   743  0893                     	;# 
   744  0893                     	;# 
   745  0893                     	;# 
   746  0893                     	;# 
   747  0893                     	;# 
   748  0894                     	;# 
   749  0894                     	;# 
   750  0894                     	;# 
   751  0895                     	;# 
   752  0895                     	;# 
   753  0895                     	;# 
   754  0896                     	;# 
   755  0896                     	;# 
   756  0896                     	;# 
   757  089B                     	;# 
   758  0911                     	;# 
   759  0912                     	;# 
   760  0913                     	;# 
   761  0914                     	;# 
   762  0915                     	;# 
   763  0916                     	;# 
   764  0918                     	;# 
   765  0919                     	;# 
   766  091A                     	;# 
   767  091B                     	;# 
   768  091C                     	;# 
   769  091D                     	;# 
   770  091E                     	;# 
   771  091F                     	;# 
   772  0E0F                     	;# 
   773  0E10                     	;# 
   774  0E11                     	;# 
   775  0E12                     	;# 
   776  0E13                     	;# 
   777  0E14                     	;# 
   778  0E15                     	;# 
   779  0E16                     	;# 
   780  0E17                     	;# 
   781  0E18                     	;# 
   782  0E19                     	;# 
   783  0E1A                     	;# 
   784  0E1B                     	;# 
   785  0E1C                     	;# 
   786  0E1D                     	;# 
   787  0E1E                     	;# 
   788  0E1F                     	;# 
   789  0E20                     	;# 
   790  0E21                     	;# 
   791  0E22                     	;# 
   792  0E24                     	;# 
   793  0E25                     	;# 
   794  0E28                     	;# 
   795  0E29                     	;# 
   796  0E2A                     	;# 
   797  0E2B                     	;# 
   798  0E2C                     	;# 
   799  0E2D                     	;# 
   800  0E2E                     	;# 
   801  0E2F                     	;# 
   802  0E90                     	;# 
   803  0E91                     	;# 
   804  0E92                     	;# 
   805  0E94                     	;# 
   806  0E95                     	;# 
   807  0E9C                     	;# 
   808  0E9D                     	;# 
   809  0E9E                     	;# 
   810  0E9F                     	;# 
   811  0EA0                     	;# 
   812  0EA1                     	;# 
   813  0EA2                     	;# 
   814  0EA3                     	;# 
   815  0EA4                     	;# 
   816  0EA5                     	;# 
   817  0EA6                     	;# 
   818  0EA7                     	;# 
   819  0F0F                     	;# 
   820  0F10                     	;# 
   821  0F11                     	;# 
   822  0F12                     	;# 
   823  0F13                     	;# 
   824  0F14                     	;# 
   825  0F15                     	;# 
   826  0F16                     	;# 
   827  0F17                     	;# 
   828  0F18                     	;# 
   829  0F19                     	;# 
   830  0F1A                     	;# 
   831  0F1B                     	;# 
   832  0F1C                     	;# 
   833  0F1D                     	;# 
   834  0F1E                     	;# 
   835  0F1F                     	;# 
   836  0F20                     	;# 
   837  0F21                     	;# 
   838  0F22                     	;# 
   839  0F23                     	;# 
   840  0F24                     	;# 
   841  0F25                     	;# 
   842  0F26                     	;# 
   843  0F27                     	;# 
   844  0F28                     	;# 
   845  0F29                     	;# 
   846  0F2A                     	;# 
   847  0F2B                     	;# 
   848  0F2C                     	;# 
   849  0F2D                     	;# 
   850  0F2E                     	;# 
   851  0F2F                     	;# 
   852  0F30                     	;# 
   853  0F31                     	;# 
   854  0F32                     	;# 
   855  0F33                     	;# 
   856  0F34                     	;# 
   857  0F35                     	;# 
   858  0F36                     	;# 
   859  0F37                     	;# 
   860  0FE4                     	;# 
   861  0FE5                     	;# 
   862  0FE6                     	;# 
   863  0FE7                     	;# 
   864  0FE8                     	;# 
   865  0FE9                     	;# 
   866  0FEA                     	;# 
   867  0FEB                     	;# 
   868  0FED                     	;# 
   869  0FEE                     	;# 
   870  0FEF                     	;# 
   871  0000                     	;# 
   872  0001                     	;# 
   873  0002                     	;# 
   874  0003                     	;# 
   875  0004                     	;# 
   876  0005                     	;# 
   877  0006                     	;# 
   878  0007                     	;# 
   879  0008                     	;# 
   880  0009                     	;# 
   881  000A                     	;# 
   882  000B                     	;# 
   883  000C                     	;# 
   884  000D                     	;# 
   885  000E                     	;# 
   886  0010                     	;# 
   887  0011                     	;# 
   888  0012                     	;# 
   889  0013                     	;# 
   890  0014                     	;# 
   891  0015                     	;# 
   892  0015                     	;# 
   893  0016                     	;# 
   894  0016                     	;# 
   895  0017                     	;# 
   896  0018                     	;# 
   897  0019                     	;# 
   898  0019                     	;# 
   899  001A                     	;# 
   900  001B                     	;# 
   901  001C                     	;# 
   902  001D                     	;# 
   903  001E                     	;# 
   904  001F                     	;# 
   905  008C                     	;# 
   906  008D                     	;# 
   907  008E                     	;# 
   908  0090                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0094                     	;# 
   913  0097                     	;# 
   914  009B                     	;# 
   915  009B                     	;# 
   916  009C                     	;# 
   917  009D                     	;# 
   918  009E                     	;# 
   919  009F                     	;# 
   920  010C                     	;# 
   921  010D                     	;# 
   922  010E                     	;# 
   923  0111                     	;# 
   924  0112                     	;# 
   925  0113                     	;# 
   926  0114                     	;# 
   927  0115                     	;# 
   928  0116                     	;# 
   929  0117                     	;# 
   930  0118                     	;# 
   931  0119                     	;# 
   932  018C                     	;# 
   933  018D                     	;# 
   934  018E                     	;# 
   935  0197                     	;# 
   936  0199                     	;# 
   937  0199                     	;# 
   938  0199                     	;# 
   939  019A                     	;# 
   940  019A                     	;# 
   941  019A                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019B                     	;# 
   946  019B                     	;# 
   947  019C                     	;# 
   948  019C                     	;# 
   949  019C                     	;# 
   950  019D                     	;# 
   951  019D                     	;# 
   952  019D                     	;# 
   953  019E                     	;# 
   954  019E                     	;# 
   955  019E                     	;# 
   956  019F                     	;# 
   957  019F                     	;# 
   958  019F                     	;# 
   959  019F                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  020E                     	;# 
   964  0211                     	;# 
   965  0211                     	;# 
   966  0212                     	;# 
   967  0212                     	;# 
   968  0213                     	;# 
   969  0213                     	;# 
   970  0214                     	;# 
   971  0214                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0215                     	;# 
   976  0216                     	;# 
   977  0216                     	;# 
   978  0217                     	;# 
   979  0217                     	;# 
   980  0219                     	;# 
   981  021A                     	;# 
   982  021B                     	;# 
   983  021C                     	;# 
   984  021D                     	;# 
   985  021D                     	;# 
   986  021E                     	;# 
   987  021F                     	;# 
   988  028C                     	;# 
   989  028D                     	;# 
   990  028E                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0297                     	;# 
  1000  0298                     	;# 
  1001  029F                     	;# 
  1002  030C                     	;# 
  1003  030D                     	;# 
  1004  030E                     	;# 
  1005  0311                     	;# 
  1006  0311                     	;# 
  1007  0312                     	;# 
  1008  0313                     	;# 
  1009  0314                     	;# 
  1010  0315                     	;# 
  1011  0315                     	;# 
  1012  0316                     	;# 
  1013  0317                     	;# 
  1014  0318                     	;# 
  1015  038C                     	;# 
  1016  038D                     	;# 
  1017  038E                     	;# 
  1018  0391                     	;# 
  1019  0392                     	;# 
  1020  0393                     	;# 
  1021  0394                     	;# 
  1022  0395                     	;# 
  1023  0396                     	;# 
  1024  0397                     	;# 
  1025  0398                     	;# 
  1026  0399                     	;# 
  1027  039A                     	;# 
  1028  039C                     	;# 
  1029  039D                     	;# 
  1030  039E                     	;# 
  1031  039F                     	;# 
  1032  0411                     	;# 
  1033  0411                     	;# 
  1034  0412                     	;# 
  1035  0413                     	;# 
  1036  0414                     	;# 
  1037  0415                     	;# 
  1038  0416                     	;# 
  1039  0417                     	;# 
  1040  0418                     	;# 
  1041  0418                     	;# 
  1042  0419                     	;# 
  1043  041A                     	;# 
  1044  041B                     	;# 
  1045  041C                     	;# 
  1046  041D                     	;# 
  1047  041E                     	;# 
  1048  041F                     	;# 
  1049  0498                     	;# 
  1050  0498                     	;# 
  1051  0499                     	;# 
  1052  049A                     	;# 
  1053  049B                     	;# 
  1054  049B                     	;# 
  1055  049C                     	;# 
  1056  049D                     	;# 
  1057  049E                     	;# 
  1058  049F                     	;# 
  1059  0617                     	;# 
  1060  0618                     	;# 
  1061  0619                     	;# 
  1062  0619                     	;# 
  1063  061A                     	;# 
  1064  061B                     	;# 
  1065  061C                     	;# 
  1066  061C                     	;# 
  1067  061F                     	;# 
  1068  0691                     	;# 
  1069  0692                     	;# 
  1070  0693                     	;# 
  1071  0694                     	;# 
  1072  0695                     	;# 
  1073  0696                     	;# 
  1074  0697                     	;# 
  1075  0698                     	;# 
  1076  0699                     	;# 
  1077  0711                     	;# 
  1078  0712                     	;# 
  1079  0713                     	;# 
  1080  0714                     	;# 
  1081  0715                     	;# 
  1082  0716                     	;# 
  1083  0717                     	;# 
  1084  0718                     	;# 
  1085  0719                     	;# 
  1086  0891                     	;# 
  1087  0891                     	;# 
  1088  0891                     	;# 
  1089  0891                     	;# 
  1090  0891                     	;# 
  1091  0891                     	;# 
  1092  0892                     	;# 
  1093  0892                     	;# 
  1094  0892                     	;# 
  1095  0893                     	;# 
  1096  0893                     	;# 
  1097  0893                     	;# 
  1098  0893                     	;# 
  1099  0893                     	;# 
  1100  0893                     	;# 
  1101  0894                     	;# 
  1102  0894                     	;# 
  1103  0894                     	;# 
  1104  0895                     	;# 
  1105  0895                     	;# 
  1106  0895                     	;# 
  1107  0896                     	;# 
  1108  0896                     	;# 
  1109  0896                     	;# 
  1110  089B                     	;# 
  1111  0911                     	;# 
  1112  0912                     	;# 
  1113  0913                     	;# 
  1114  0914                     	;# 
  1115  0915                     	;# 
  1116  0916                     	;# 
  1117  0918                     	;# 
  1118  0919                     	;# 
  1119  091A                     	;# 
  1120  091B                     	;# 
  1121  091C                     	;# 
  1122  091D                     	;# 
  1123  091E                     	;# 
  1124  091F                     	;# 
  1125  0E0F                     	;# 
  1126  0E10                     	;# 
  1127  0E11                     	;# 
  1128  0E12                     	;# 
  1129  0E13                     	;# 
  1130  0E14                     	;# 
  1131  0E15                     	;# 
  1132  0E16                     	;# 
  1133  0E17                     	;# 
  1134  0E18                     	;# 
  1135  0E19                     	;# 
  1136  0E1A                     	;# 
  1137  0E1B                     	;# 
  1138  0E1C                     	;# 
  1139  0E1D                     	;# 
  1140  0E1E                     	;# 
  1141  0E1F                     	;# 
  1142  0E20                     	;# 
  1143  0E21                     	;# 
  1144  0E22                     	;# 
  1145  0E24                     	;# 
  1146  0E25                     	;# 
  1147  0E28                     	;# 
  1148  0E29                     	;# 
  1149  0E2A                     	;# 
  1150  0E2B                     	;# 
  1151  0E2C                     	;# 
  1152  0E2D                     	;# 
  1153  0E2E                     	;# 
  1154  0E2F                     	;# 
  1155  0E90                     	;# 
  1156  0E91                     	;# 
  1157  0E92                     	;# 
  1158  0E94                     	;# 
  1159  0E95                     	;# 
  1160  0E9C                     	;# 
  1161  0E9D                     	;# 
  1162  0E9E                     	;# 
  1163  0E9F                     	;# 
  1164  0EA0                     	;# 
  1165  0EA1                     	;# 
  1166  0EA2                     	;# 
  1167  0EA3                     	;# 
  1168  0EA4                     	;# 
  1169  0EA5                     	;# 
  1170  0EA6                     	;# 
  1171  0EA7                     	;# 
  1172  0F0F                     	;# 
  1173  0F10                     	;# 
  1174  0F11                     	;# 
  1175  0F12                     	;# 
  1176  0F13                     	;# 
  1177  0F14                     	;# 
  1178  0F15                     	;# 
  1179  0F16                     	;# 
  1180  0F17                     	;# 
  1181  0F18                     	;# 
  1182  0F19                     	;# 
  1183  0F1A                     	;# 
  1184  0F1B                     	;# 
  1185  0F1C                     	;# 
  1186  0F1D                     	;# 
  1187  0F1E                     	;# 
  1188  0F1F                     	;# 
  1189  0F20                     	;# 
  1190  0F21                     	;# 
  1191  0F22                     	;# 
  1192  0F23                     	;# 
  1193  0F24                     	;# 
  1194  0F25                     	;# 
  1195  0F26                     	;# 
  1196  0F27                     	;# 
  1197  0F28                     	;# 
  1198  0F29                     	;# 
  1199  0F2A                     	;# 
  1200  0F2B                     	;# 
  1201  0F2C                     	;# 
  1202  0F2D                     	;# 
  1203  0F2E                     	;# 
  1204  0F2F                     	;# 
  1205  0F30                     	;# 
  1206  0F31                     	;# 
  1207  0F32                     	;# 
  1208  0F33                     	;# 
  1209  0F34                     	;# 
  1210  0F35                     	;# 
  1211  0F36                     	;# 
  1212  0F37                     	;# 
  1213  0FE4                     	;# 
  1214  0FE5                     	;# 
  1215  0FE6                     	;# 
  1216  0FE7                     	;# 
  1217  0FE8                     	;# 
  1218  0FE9                     	;# 
  1219  0FEA                     	;# 
  1220  0FEB                     	;# 
  1221  0FED                     	;# 
  1222  0FEE                     	;# 
  1223  0FEF                     	;# 
  1224  0000                     	;# 
  1225  0001                     	;# 
  1226  0002                     	;# 
  1227  0003                     	;# 
  1228  0004                     	;# 
  1229  0005                     	;# 
  1230  0006                     	;# 
  1231  0007                     	;# 
  1232  0008                     	;# 
  1233  0009                     	;# 
  1234  000A                     	;# 
  1235  000B                     	;# 
  1236  000C                     	;# 
  1237  000D                     	;# 
  1238  000E                     	;# 
  1239  0010                     	;# 
  1240  0011                     	;# 
  1241  0012                     	;# 
  1242  0013                     	;# 
  1243  0014                     	;# 
  1244  0015                     	;# 
  1245  0015                     	;# 
  1246  0016                     	;# 
  1247  0016                     	;# 
  1248  0017                     	;# 
  1249  0018                     	;# 
  1250  0019                     	;# 
  1251  0019                     	;# 
  1252  001A                     	;# 
  1253  001B                     	;# 
  1254  001C                     	;# 
  1255  001D                     	;# 
  1256  001E                     	;# 
  1257  001F                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0097                     	;# 
  1267  009B                     	;# 
  1268  009B                     	;# 
  1269  009C                     	;# 
  1270  009D                     	;# 
  1271  009E                     	;# 
  1272  009F                     	;# 
  1273  010C                     	;# 
  1274  010D                     	;# 
  1275  010E                     	;# 
  1276  0111                     	;# 
  1277  0112                     	;# 
  1278  0113                     	;# 
  1279  0114                     	;# 
  1280  0115                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  0118                     	;# 
  1284  0119                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018E                     	;# 
  1288  0197                     	;# 
  1289  0199                     	;# 
  1290  0199                     	;# 
  1291  0199                     	;# 
  1292  019A                     	;# 
  1293  019A                     	;# 
  1294  019A                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019C                     	;# 
  1301  019C                     	;# 
  1302  019C                     	;# 
  1303  019D                     	;# 
  1304  019D                     	;# 
  1305  019D                     	;# 
  1306  019E                     	;# 
  1307  019E                     	;# 
  1308  019E                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  020C                     	;# 
  1315  020D                     	;# 
  1316  020E                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0219                     	;# 
  1334  021A                     	;# 
  1335  021B                     	;# 
  1336  021C                     	;# 
  1337  021D                     	;# 
  1338  021D                     	;# 
  1339  021E                     	;# 
  1340  021F                     	;# 
  1341  028C                     	;# 
  1342  028D                     	;# 
  1343  028E                     	;# 
  1344  0291                     	;# 
  1345  0291                     	;# 
  1346  0292                     	;# 
  1347  0293                     	;# 
  1348  0294                     	;# 
  1349  0295                     	;# 
  1350  0295                     	;# 
  1351  0296                     	;# 
  1352  0297                     	;# 
  1353  0298                     	;# 
  1354  029F                     	;# 
  1355  030C                     	;# 
  1356  030D                     	;# 
  1357  030E                     	;# 
  1358  0311                     	;# 
  1359  0311                     	;# 
  1360  0312                     	;# 
  1361  0313                     	;# 
  1362  0314                     	;# 
  1363  0315                     	;# 
  1364  0315                     	;# 
  1365  0316                     	;# 
  1366  0317                     	;# 
  1367  0318                     	;# 
  1368  038C                     	;# 
  1369  038D                     	;# 
  1370  038E                     	;# 
  1371  0391                     	;# 
  1372  0392                     	;# 
  1373  0393                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0397                     	;# 
  1378  0398                     	;# 
  1379  0399                     	;# 
  1380  039A                     	;# 
  1381  039C                     	;# 
  1382  039D                     	;# 
  1383  039E                     	;# 
  1384  039F                     	;# 
  1385  0411                     	;# 
  1386  0411                     	;# 
  1387  0412                     	;# 
  1388  0413                     	;# 
  1389  0414                     	;# 
  1390  0415                     	;# 
  1391  0416                     	;# 
  1392  0417                     	;# 
  1393  0418                     	;# 
  1394  0418                     	;# 
  1395  0419                     	;# 
  1396  041A                     	;# 
  1397  041B                     	;# 
  1398  041C                     	;# 
  1399  041D                     	;# 
  1400  041E                     	;# 
  1401  041F                     	;# 
  1402  0498                     	;# 
  1403  0498                     	;# 
  1404  0499                     	;# 
  1405  049A                     	;# 
  1406  049B                     	;# 
  1407  049B                     	;# 
  1408  049C                     	;# 
  1409  049D                     	;# 
  1410  049E                     	;# 
  1411  049F                     	;# 
  1412  0617                     	;# 
  1413  0618                     	;# 
  1414  0619                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061C                     	;# 
  1420  061F                     	;# 
  1421  0691                     	;# 
  1422  0692                     	;# 
  1423  0693                     	;# 
  1424  0694                     	;# 
  1425  0695                     	;# 
  1426  0696                     	;# 
  1427  0697                     	;# 
  1428  0698                     	;# 
  1429  0699                     	;# 
  1430  0711                     	;# 
  1431  0712                     	;# 
  1432  0713                     	;# 
  1433  0714                     	;# 
  1434  0715                     	;# 
  1435  0716                     	;# 
  1436  0717                     	;# 
  1437  0718                     	;# 
  1438  0719                     	;# 
  1439  0891                     	;# 
  1440  0891                     	;# 
  1441  0891                     	;# 
  1442  0891                     	;# 
  1443  0891                     	;# 
  1444  0891                     	;# 
  1445  0892                     	;# 
  1446  0892                     	;# 
  1447  0892                     	;# 
  1448  0893                     	;# 
  1449  0893                     	;# 
  1450  0893                     	;# 
  1451  0893                     	;# 
  1452  0893                     	;# 
  1453  0893                     	;# 
  1454  0894                     	;# 
  1455  0894                     	;# 
  1456  0894                     	;# 
  1457  0895                     	;# 
  1458  0895                     	;# 
  1459  0895                     	;# 
  1460  0896                     	;# 
  1461  0896                     	;# 
  1462  0896                     	;# 
  1463  089B                     	;# 
  1464  0911                     	;# 
  1465  0912                     	;# 
  1466  0913                     	;# 
  1467  0914                     	;# 
  1468  0915                     	;# 
  1469  0916                     	;# 
  1470  0918                     	;# 
  1471  0919                     	;# 
  1472  091A                     	;# 
  1473  091B                     	;# 
  1474  091C                     	;# 
  1475  091D                     	;# 
  1476  091E                     	;# 
  1477  091F                     	;# 
  1478  0E0F                     	;# 
  1479  0E10                     	;# 
  1480  0E11                     	;# 
  1481  0E12                     	;# 
  1482  0E13                     	;# 
  1483  0E14                     	;# 
  1484  0E15                     	;# 
  1485  0E16                     	;# 
  1486  0E17                     	;# 
  1487  0E18                     	;# 
  1488  0E19                     	;# 
  1489  0E1A                     	;# 
  1490  0E1B                     	;# 
  1491  0E1C                     	;# 
  1492  0E1D                     	;# 
  1493  0E1E                     	;# 
  1494  0E1F                     	;# 
  1495  0E20                     	;# 
  1496  0E21                     	;# 
  1497  0E22                     	;# 
  1498  0E24                     	;# 
  1499  0E25                     	;# 
  1500  0E28                     	;# 
  1501  0E29                     	;# 
  1502  0E2A                     	;# 
  1503  0E2B                     	;# 
  1504  0E2C                     	;# 
  1505  0E2D                     	;# 
  1506  0E2E                     	;# 
  1507  0E2F                     	;# 
  1508  0E90                     	;# 
  1509  0E91                     	;# 
  1510  0E92                     	;# 
  1511  0E94                     	;# 
  1512  0E95                     	;# 
  1513  0E9C                     	;# 
  1514  0E9D                     	;# 
  1515  0E9E                     	;# 
  1516  0E9F                     	;# 
  1517  0EA0                     	;# 
  1518  0EA1                     	;# 
  1519  0EA2                     	;# 
  1520  0EA3                     	;# 
  1521  0EA4                     	;# 
  1522  0EA5                     	;# 
  1523  0EA6                     	;# 
  1524  0EA7                     	;# 
  1525  0F0F                     	;# 
  1526  0F10                     	;# 
  1527  0F11                     	;# 
  1528  0F12                     	;# 
  1529  0F13                     	;# 
  1530  0F14                     	;# 
  1531  0F15                     	;# 
  1532  0F16                     	;# 
  1533  0F17                     	;# 
  1534  0F18                     	;# 
  1535  0F19                     	;# 
  1536  0F1A                     	;# 
  1537  0F1B                     	;# 
  1538  0F1C                     	;# 
  1539  0F1D                     	;# 
  1540  0F1E                     	;# 
  1541  0F1F                     	;# 
  1542  0F20                     	;# 
  1543  0F21                     	;# 
  1544  0F22                     	;# 
  1545  0F23                     	;# 
  1546  0F24                     	;# 
  1547  0F25                     	;# 
  1548  0F26                     	;# 
  1549  0F27                     	;# 
  1550  0F28                     	;# 
  1551  0F29                     	;# 
  1552  0F2A                     	;# 
  1553  0F2B                     	;# 
  1554  0F2C                     	;# 
  1555  0F2D                     	;# 
  1556  0F2E                     	;# 
  1557  0F2F                     	;# 
  1558  0F30                     	;# 
  1559  0F31                     	;# 
  1560  0F32                     	;# 
  1561  0F33                     	;# 
  1562  0F34                     	;# 
  1563  0F35                     	;# 
  1564  0F36                     	;# 
  1565  0F37                     	;# 
  1566  0FE4                     	;# 
  1567  0FE5                     	;# 
  1568  0FE6                     	;# 
  1569  0FE7                     	;# 
  1570  0FE8                     	;# 
  1571  0FE9                     	;# 
  1572  0FEA                     	;# 
  1573  0FEB                     	;# 
  1574  0FED                     	;# 
  1575  0FEE                     	;# 
  1576  0FEF                     	;# 
  1577  0000                     	;# 
  1578  0001                     	;# 
  1579  0002                     	;# 
  1580  0003                     	;# 
  1581  0004                     	;# 
  1582  0005                     	;# 
  1583  0006                     	;# 
  1584  0007                     	;# 
  1585  0008                     	;# 
  1586  0009                     	;# 
  1587  000A                     	;# 
  1588  000B                     	;# 
  1589  000C                     	;# 
  1590  000D                     	;# 
  1591  000E                     	;# 
  1592  0010                     	;# 
  1593  0011                     	;# 
  1594  0012                     	;# 
  1595  0013                     	;# 
  1596  0014                     	;# 
  1597  0015                     	;# 
  1598  0015                     	;# 
  1599  0016                     	;# 
  1600  0016                     	;# 
  1601  0017                     	;# 
  1602  0018                     	;# 
  1603  0019                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  001D                     	;# 
  1609  001E                     	;# 
  1610  001F                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0090                     	;# 
  1615  0091                     	;# 
  1616  0092                     	;# 
  1617  0093                     	;# 
  1618  0094                     	;# 
  1619  0097                     	;# 
  1620  009B                     	;# 
  1621  009B                     	;# 
  1622  009C                     	;# 
  1623  009D                     	;# 
  1624  009E                     	;# 
  1625  009F                     	;# 
  1626  010C                     	;# 
  1627  010D                     	;# 
  1628  010E                     	;# 
  1629  0111                     	;# 
  1630  0112                     	;# 
  1631  0113                     	;# 
  1632  0114                     	;# 
  1633  0115                     	;# 
  1634  0116                     	;# 
  1635  0117                     	;# 
  1636  0118                     	;# 
  1637  0119                     	;# 
  1638  018C                     	;# 
  1639  018D                     	;# 
  1640  018E                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  0199                     	;# 
  1644  0199                     	;# 
  1645  019A                     	;# 
  1646  019A                     	;# 
  1647  019A                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019C                     	;# 
  1654  019C                     	;# 
  1655  019C                     	;# 
  1656  019D                     	;# 
  1657  019D                     	;# 
  1658  019D                     	;# 
  1659  019E                     	;# 
  1660  019E                     	;# 
  1661  019E                     	;# 
  1662  019F                     	;# 
  1663  019F                     	;# 
  1664  019F                     	;# 
  1665  019F                     	;# 
  1666  019F                     	;# 
  1667  020C                     	;# 
  1668  020D                     	;# 
  1669  020E                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0219                     	;# 
  1687  021A                     	;# 
  1688  021B                     	;# 
  1689  021C                     	;# 
  1690  021D                     	;# 
  1691  021D                     	;# 
  1692  021E                     	;# 
  1693  021F                     	;# 
  1694  028C                     	;# 
  1695  028D                     	;# 
  1696  028E                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0294                     	;# 
  1702  0295                     	;# 
  1703  0295                     	;# 
  1704  0296                     	;# 
  1705  0297                     	;# 
  1706  0298                     	;# 
  1707  029F                     	;# 
  1708  030C                     	;# 
  1709  030D                     	;# 
  1710  030E                     	;# 
  1711  0311                     	;# 
  1712  0311                     	;# 
  1713  0312                     	;# 
  1714  0313                     	;# 
  1715  0314                     	;# 
  1716  0315                     	;# 
  1717  0315                     	;# 
  1718  0316                     	;# 
  1719  0317                     	;# 
  1720  0318                     	;# 
  1721  038C                     	;# 
  1722  038D                     	;# 
  1723  038E                     	;# 
  1724  0391                     	;# 
  1725  0392                     	;# 
  1726  0393                     	;# 
  1727  0394                     	;# 
  1728  0395                     	;# 
  1729  0396                     	;# 
  1730  0397                     	;# 
  1731  0398                     	;# 
  1732  0399                     	;# 
  1733  039A                     	;# 
  1734  039C                     	;# 
  1735  039D                     	;# 
  1736  039E                     	;# 
  1737  039F                     	;# 
  1738  0411                     	;# 
  1739  0411                     	;# 
  1740  0412                     	;# 
  1741  0413                     	;# 
  1742  0414                     	;# 
  1743  0415                     	;# 
  1744  0416                     	;# 
  1745  0417                     	;# 
  1746  0418                     	;# 
  1747  0418                     	;# 
  1748  0419                     	;# 
  1749  041A                     	;# 
  1750  041B                     	;# 
  1751  041C                     	;# 
  1752  041D                     	;# 
  1753  041E                     	;# 
  1754  041F                     	;# 
  1755  0498                     	;# 
  1756  0498                     	;# 
  1757  0499                     	;# 
  1758  049A                     	;# 
  1759  049B                     	;# 
  1760  049B                     	;# 
  1761  049C                     	;# 
  1762  049D                     	;# 
  1763  049E                     	;# 
  1764  049F                     	;# 
  1765  0617                     	;# 
  1766  0618                     	;# 
  1767  0619                     	;# 
  1768  0619                     	;# 
  1769  061A                     	;# 
  1770  061B                     	;# 
  1771  061C                     	;# 
  1772  061C                     	;# 
  1773  061F                     	;# 
  1774  0691                     	;# 
  1775  0692                     	;# 
  1776  0693                     	;# 
  1777  0694                     	;# 
  1778  0695                     	;# 
  1779  0696                     	;# 
  1780  0697                     	;# 
  1781  0698                     	;# 
  1782  0699                     	;# 
  1783  0711                     	;# 
  1784  0712                     	;# 
  1785  0713                     	;# 
  1786  0714                     	;# 
  1787  0715                     	;# 
  1788  0716                     	;# 
  1789  0717                     	;# 
  1790  0718                     	;# 
  1791  0719                     	;# 
  1792  0891                     	;# 
  1793  0891                     	;# 
  1794  0891                     	;# 
  1795  0891                     	;# 
  1796  0891                     	;# 
  1797  0891                     	;# 
  1798  0892                     	;# 
  1799  0892                     	;# 
  1800  0892                     	;# 
  1801  0893                     	;# 
  1802  0893                     	;# 
  1803  0893                     	;# 
  1804  0893                     	;# 
  1805  0893                     	;# 
  1806  0893                     	;# 
  1807  0894                     	;# 
  1808  0894                     	;# 
  1809  0894                     	;# 
  1810  0895                     	;# 
  1811  0895                     	;# 
  1812  0895                     	;# 
  1813  0896                     	;# 
  1814  0896                     	;# 
  1815  0896                     	;# 
  1816  089B                     	;# 
  1817  0911                     	;# 
  1818  0912                     	;# 
  1819  0913                     	;# 
  1820  0914                     	;# 
  1821  0915                     	;# 
  1822  0916                     	;# 
  1823  0918                     	;# 
  1824  0919                     	;# 
  1825  091A                     	;# 
  1826  091B                     	;# 
  1827  091C                     	;# 
  1828  091D                     	;# 
  1829  091E                     	;# 
  1830  091F                     	;# 
  1831  0E0F                     	;# 
  1832  0E10                     	;# 
  1833  0E11                     	;# 
  1834  0E12                     	;# 
  1835  0E13                     	;# 
  1836  0E14                     	;# 
  1837  0E15                     	;# 
  1838  0E16                     	;# 
  1839  0E17                     	;# 
  1840  0E18                     	;# 
  1841  0E19                     	;# 
  1842  0E1A                     	;# 
  1843  0E1B                     	;# 
  1844  0E1C                     	;# 
  1845  0E1D                     	;# 
  1846  0E1E                     	;# 
  1847  0E1F                     	;# 
  1848  0E20                     	;# 
  1849  0E21                     	;# 
  1850  0E22                     	;# 
  1851  0E24                     	;# 
  1852  0E25                     	;# 
  1853  0E28                     	;# 
  1854  0E29                     	;# 
  1855  0E2A                     	;# 
  1856  0E2B                     	;# 
  1857  0E2C                     	;# 
  1858  0E2D                     	;# 
  1859  0E2E                     	;# 
  1860  0E2F                     	;# 
  1861  0E90                     	;# 
  1862  0E91                     	;# 
  1863  0E92                     	;# 
  1864  0E94                     	;# 
  1865  0E95                     	;# 
  1866  0E9C                     	;# 
  1867  0E9D                     	;# 
  1868  0E9E                     	;# 
  1869  0E9F                     	;# 
  1870  0EA0                     	;# 
  1871  0EA1                     	;# 
  1872  0EA2                     	;# 
  1873  0EA3                     	;# 
  1874  0EA4                     	;# 
  1875  0EA5                     	;# 
  1876  0EA6                     	;# 
  1877  0EA7                     	;# 
  1878  0F0F                     	;# 
  1879  0F10                     	;# 
  1880  0F11                     	;# 
  1881  0F12                     	;# 
  1882  0F13                     	;# 
  1883  0F14                     	;# 
  1884  0F15                     	;# 
  1885  0F16                     	;# 
  1886  0F17                     	;# 
  1887  0F18                     	;# 
  1888  0F19                     	;# 
  1889  0F1A                     	;# 
  1890  0F1B                     	;# 
  1891  0F1C                     	;# 
  1892  0F1D                     	;# 
  1893  0F1E                     	;# 
  1894  0F1F                     	;# 
  1895  0F20                     	;# 
  1896  0F21                     	;# 
  1897  0F22                     	;# 
  1898  0F23                     	;# 
  1899  0F24                     	;# 
  1900  0F25                     	;# 
  1901  0F26                     	;# 
  1902  0F27                     	;# 
  1903  0F28                     	;# 
  1904  0F29                     	;# 
  1905  0F2A                     	;# 
  1906  0F2B                     	;# 
  1907  0F2C                     	;# 
  1908  0F2D                     	;# 
  1909  0F2E                     	;# 
  1910  0F2F                     	;# 
  1911  0F30                     	;# 
  1912  0F31                     	;# 
  1913  0F32                     	;# 
  1914  0F33                     	;# 
  1915  0F34                     	;# 
  1916  0F35                     	;# 
  1917  0F36                     	;# 
  1918  0F37                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0013                     	;# 
  1949  0014                     	;# 
  1950  0015                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  0019                     	;# 
  1958  001A                     	;# 
  1959  001B                     	;# 
  1960  001C                     	;# 
  1961  001D                     	;# 
  1962  001E                     	;# 
  1963  001F                     	;# 
  1964  008C                     	;# 
  1965  008D                     	;# 
  1966  008E                     	;# 
  1967  0090                     	;# 
  1968  0091                     	;# 
  1969  0092                     	;# 
  1970  0093                     	;# 
  1971  0094                     	;# 
  1972  0097                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  009F                     	;# 
  1979  010C                     	;# 
  1980  010D                     	;# 
  1981  010E                     	;# 
  1982  0111                     	;# 
  1983  0112                     	;# 
  1984  0113                     	;# 
  1985  0114                     	;# 
  1986  0115                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  0118                     	;# 
  1990  0119                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0197                     	;# 
  1995  0199                     	;# 
  1996  0199                     	;# 
  1997  0199                     	;# 
  1998  019A                     	;# 
  1999  019A                     	;# 
  2000  019A                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019D                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019E                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  019F                     	;# 
  2017  019F                     	;# 
  2018  019F                     	;# 
  2019  019F                     	;# 
  2020  020C                     	;# 
  2021  020D                     	;# 
  2022  020E                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0216                     	;# 
  2036  0216                     	;# 
  2037  0217                     	;# 
  2038  0217                     	;# 
  2039  0219                     	;# 
  2040  021A                     	;# 
  2041  021B                     	;# 
  2042  021C                     	;# 
  2043  021D                     	;# 
  2044  021D                     	;# 
  2045  021E                     	;# 
  2046  021F                     	;# 
  2047  028C                     	;# 
  2048  028D                     	;# 
  2049  028E                     	;# 
  2050  0291                     	;# 
  2051  0291                     	;# 
  2052  0292                     	;# 
  2053  0293                     	;# 
  2054  0294                     	;# 
  2055  0295                     	;# 
  2056  0295                     	;# 
  2057  0296                     	;# 
  2058  0297                     	;# 
  2059  0298                     	;# 
  2060  029F                     	;# 
  2061  030C                     	;# 
  2062  030D                     	;# 
  2063  030E                     	;# 
  2064  0311                     	;# 
  2065  0311                     	;# 
  2066  0312                     	;# 
  2067  0313                     	;# 
  2068  0314                     	;# 
  2069  0315                     	;# 
  2070  0315                     	;# 
  2071  0316                     	;# 
  2072  0317                     	;# 
  2073  0318                     	;# 
  2074  038C                     	;# 
  2075  038D                     	;# 
  2076  038E                     	;# 
  2077  0391                     	;# 
  2078  0392                     	;# 
  2079  0393                     	;# 
  2080  0394                     	;# 
  2081  0395                     	;# 
  2082  0396                     	;# 
  2083  0397                     	;# 
  2084  0398                     	;# 
  2085  0399                     	;# 
  2086  039A                     	;# 
  2087  039C                     	;# 
  2088  039D                     	;# 
  2089  039E                     	;# 
  2090  039F                     	;# 
  2091  0411                     	;# 
  2092  0411                     	;# 
  2093  0412                     	;# 
  2094  0413                     	;# 
  2095  0414                     	;# 
  2096  0415                     	;# 
  2097  0416                     	;# 
  2098  0417                     	;# 
  2099  0418                     	;# 
  2100  0418                     	;# 
  2101  0419                     	;# 
  2102  041A                     	;# 
  2103  041B                     	;# 
  2104  041C                     	;# 
  2105  041D                     	;# 
  2106  041E                     	;# 
  2107  041F                     	;# 
  2108  0498                     	;# 
  2109  0498                     	;# 
  2110  0499                     	;# 
  2111  049A                     	;# 
  2112  049B                     	;# 
  2113  049B                     	;# 
  2114  049C                     	;# 
  2115  049D                     	;# 
  2116  049E                     	;# 
  2117  049F                     	;# 
  2118  0617                     	;# 
  2119  0618                     	;# 
  2120  0619                     	;# 
  2121  0619                     	;# 
  2122  061A                     	;# 
  2123  061B                     	;# 
  2124  061C                     	;# 
  2125  061C                     	;# 
  2126  061F                     	;# 
  2127  0691                     	;# 
  2128  0692                     	;# 
  2129  0693                     	;# 
  2130  0694                     	;# 
  2131  0695                     	;# 
  2132  0696                     	;# 
  2133  0697                     	;# 
  2134  0698                     	;# 
  2135  0699                     	;# 
  2136  0711                     	;# 
  2137  0712                     	;# 
  2138  0713                     	;# 
  2139  0714                     	;# 
  2140  0715                     	;# 
  2141  0716                     	;# 
  2142  0717                     	;# 
  2143  0718                     	;# 
  2144  0719                     	;# 
  2145  0891                     	;# 
  2146  0891                     	;# 
  2147  0891                     	;# 
  2148  0891                     	;# 
  2149  0891                     	;# 
  2150  0891                     	;# 
  2151  0892                     	;# 
  2152  0892                     	;# 
  2153  0892                     	;# 
  2154  0893                     	;# 
  2155  0893                     	;# 
  2156  0893                     	;# 
  2157  0893                     	;# 
  2158  0893                     	;# 
  2159  0893                     	;# 
  2160  0894                     	;# 
  2161  0894                     	;# 
  2162  0894                     	;# 
  2163  0895                     	;# 
  2164  0895                     	;# 
  2165  0895                     	;# 
  2166  0896                     	;# 
  2167  0896                     	;# 
  2168  0896                     	;# 
  2169  089B                     	;# 
  2170  0911                     	;# 
  2171  0912                     	;# 
  2172  0913                     	;# 
  2173  0914                     	;# 
  2174  0915                     	;# 
  2175  0916                     	;# 
  2176  0918                     	;# 
  2177  0919                     	;# 
  2178  091A                     	;# 
  2179  091B                     	;# 
  2180  091C                     	;# 
  2181  091D                     	;# 
  2182  091E                     	;# 
  2183  091F                     	;# 
  2184  0E0F                     	;# 
  2185  0E10                     	;# 
  2186  0E11                     	;# 
  2187  0E12                     	;# 
  2188  0E13                     	;# 
  2189  0E14                     	;# 
  2190  0E15                     	;# 
  2191  0E16                     	;# 
  2192  0E17                     	;# 
  2193  0E18                     	;# 
  2194  0E19                     	;# 
  2195  0E1A                     	;# 
  2196  0E1B                     	;# 
  2197  0E1C                     	;# 
  2198  0E1D                     	;# 
  2199  0E1E                     	;# 
  2200  0E1F                     	;# 
  2201  0E20                     	;# 
  2202  0E21                     	;# 
  2203  0E22                     	;# 
  2204  0E24                     	;# 
  2205  0E25                     	;# 
  2206  0E28                     	;# 
  2207  0E29                     	;# 
  2208  0E2A                     	;# 
  2209  0E2B                     	;# 
  2210  0E2C                     	;# 
  2211  0E2D                     	;# 
  2212  0E2E                     	;# 
  2213  0E2F                     	;# 
  2214  0E90                     	;# 
  2215  0E91                     	;# 
  2216  0E92                     	;# 
  2217  0E94                     	;# 
  2218  0E95                     	;# 
  2219  0E9C                     	;# 
  2220  0E9D                     	;# 
  2221  0E9E                     	;# 
  2222  0E9F                     	;# 
  2223  0EA0                     	;# 
  2224  0EA1                     	;# 
  2225  0EA2                     	;# 
  2226  0EA3                     	;# 
  2227  0EA4                     	;# 
  2228  0EA5                     	;# 
  2229  0EA6                     	;# 
  2230  0EA7                     	;# 
  2231  0F0F                     	;# 
  2232  0F10                     	;# 
  2233  0F11                     	;# 
  2234  0F12                     	;# 
  2235  0F13                     	;# 
  2236  0F14                     	;# 
  2237  0F15                     	;# 
  2238  0F16                     	;# 
  2239  0F17                     	;# 
  2240  0F18                     	;# 
  2241  0F19                     	;# 
  2242  0F1A                     	;# 
  2243  0F1B                     	;# 
  2244  0F1C                     	;# 
  2245  0F1D                     	;# 
  2246  0F1E                     	;# 
  2247  0F1F                     	;# 
  2248  0F20                     	;# 
  2249  0F21                     	;# 
  2250  0F22                     	;# 
  2251  0F23                     	;# 
  2252  0F24                     	;# 
  2253  0F25                     	;# 
  2254  0F26                     	;# 
  2255  0F27                     	;# 
  2256  0F28                     	;# 
  2257  0F29                     	;# 
  2258  0F2A                     	;# 
  2259  0F2B                     	;# 
  2260  0F2C                     	;# 
  2261  0F2D                     	;# 
  2262  0F2E                     	;# 
  2263  0F2F                     	;# 
  2264  0F30                     	;# 
  2265  0F31                     	;# 
  2266  0F32                     	;# 
  2267  0F33                     	;# 
  2268  0F34                     	;# 
  2269  0F35                     	;# 
  2270  0F36                     	;# 
  2271  0F37                     	;# 
  2272  0FE4                     	;# 
  2273  0FE5                     	;# 
  2274  0FE6                     	;# 
  2275  0FE7                     	;# 
  2276  0FE8                     	;# 
  2277  0FE9                     	;# 
  2278  0FEA                     	;# 
  2279  0FEB                     	;# 
  2280  0FED                     	;# 
  2281  0FEE                     	;# 
  2282  0FEF                     	;# 
  2283  0000                     	;# 
  2284  0001                     	;# 
  2285  0002                     	;# 
  2286  0003                     	;# 
  2287  0004                     	;# 
  2288  0005                     	;# 
  2289  0006                     	;# 
  2290  0007                     	;# 
  2291  0008                     	;# 
  2292  0009                     	;# 
  2293  000A                     	;# 
  2294  000B                     	;# 
  2295  000C                     	;# 
  2296  000D                     	;# 
  2297  000E                     	;# 
  2298  0010                     	;# 
  2299  0011                     	;# 
  2300  0012                     	;# 
  2301  0013                     	;# 
  2302  0014                     	;# 
  2303  0015                     	;# 
  2304  0015                     	;# 
  2305  0016                     	;# 
  2306  0016                     	;# 
  2307  0017                     	;# 
  2308  0018                     	;# 
  2309  0019                     	;# 
  2310  0019                     	;# 
  2311  001A                     	;# 
  2312  001B                     	;# 
  2313  001C                     	;# 
  2314  001D                     	;# 
  2315  001E                     	;# 
  2316  001F                     	;# 
  2317  008C                     	;# 
  2318  008D                     	;# 
  2319  008E                     	;# 
  2320  0090                     	;# 
  2321  0091                     	;# 
  2322  0092                     	;# 
  2323  0093                     	;# 
  2324  0094                     	;# 
  2325  0097                     	;# 
  2326  009B                     	;# 
  2327  009B                     	;# 
  2328  009C                     	;# 
  2329  009D                     	;# 
  2330  009E                     	;# 
  2331  009F                     	;# 
  2332  010C                     	;# 
  2333  010D                     	;# 
  2334  010E                     	;# 
  2335  0111                     	;# 
  2336  0112                     	;# 
  2337  0113                     	;# 
  2338  0114                     	;# 
  2339  0115                     	;# 
  2340  0116                     	;# 
  2341  0117                     	;# 
  2342  0118                     	;# 
  2343  0119                     	;# 
  2344  018C                     	;# 
  2345  018D                     	;# 
  2346  018E                     	;# 
  2347  0197                     	;# 
  2348  0199                     	;# 
  2349  0199                     	;# 
  2350  0199                     	;# 
  2351  019A                     	;# 
  2352  019A                     	;# 
  2353  019A                     	;# 
  2354  019B                     	;# 
  2355  019B                     	;# 
  2356  019B                     	;# 
  2357  019B                     	;# 
  2358  019B                     	;# 
  2359  019C                     	;# 
  2360  019C                     	;# 
  2361  019C                     	;# 
  2362  019D                     	;# 
  2363  019D                     	;# 
  2364  019D                     	;# 
  2365  019E                     	;# 
  2366  019E                     	;# 
  2367  019E                     	;# 
  2368  019F                     	;# 
  2369  019F                     	;# 
  2370  019F                     	;# 
  2371  019F                     	;# 
  2372  019F                     	;# 
  2373  020C                     	;# 
  2374  020D                     	;# 
  2375  020E                     	;# 
  2376  0211                     	;# 
  2377  0211                     	;# 
  2378  0212                     	;# 
  2379  0212                     	;# 
  2380  0213                     	;# 
  2381  0213                     	;# 
  2382  0214                     	;# 
  2383  0214                     	;# 
  2384  0215                     	;# 
  2385  0215                     	;# 
  2386  0215                     	;# 
  2387  0215                     	;# 
  2388  0216                     	;# 
  2389  0216                     	;# 
  2390  0217                     	;# 
  2391  0217                     	;# 
  2392  0219                     	;# 
  2393  021A                     	;# 
  2394  021B                     	;# 
  2395  021C                     	;# 
  2396  021D                     	;# 
  2397  021D                     	;# 
  2398  021E                     	;# 
  2399  021F                     	;# 
  2400  028C                     	;# 
  2401  028D                     	;# 
  2402  028E                     	;# 
  2403  0291                     	;# 
  2404  0291                     	;# 
  2405  0292                     	;# 
  2406  0293                     	;# 
  2407  0294                     	;# 
  2408  0295                     	;# 
  2409  0295                     	;# 
  2410  0296                     	;# 
  2411  0297                     	;# 
  2412  0298                     	;# 
  2413  029F                     	;# 
  2414  030C                     	;# 
  2415  030D                     	;# 
  2416  030E                     	;# 
  2417  0311                     	;# 
  2418  0311                     	;# 
  2419  0312                     	;# 
  2420  0313                     	;# 
  2421  0314                     	;# 
  2422  0315                     	;# 
  2423  0315                     	;# 
  2424  0316                     	;# 
  2425  0317                     	;# 
  2426  0318                     	;# 
  2427  038C                     	;# 
  2428  038D                     	;# 
  2429  038E                     	;# 
  2430  0391                     	;# 
  2431  0392                     	;# 
  2432  0393                     	;# 
  2433  0394                     	;# 
  2434  0395                     	;# 
  2435  0396                     	;# 
  2436  0397                     	;# 
  2437  0398                     	;# 
  2438  0399                     	;# 
  2439  039A                     	;# 
  2440  039C                     	;# 
  2441  039D                     	;# 
  2442  039E                     	;# 
  2443  039F                     	;# 
  2444  0411                     	;# 
  2445  0411                     	;# 
  2446  0412                     	;# 
  2447  0413                     	;# 
  2448  0414                     	;# 
  2449  0415                     	;# 
  2450  0416                     	;# 
  2451  0417                     	;# 
  2452  0418                     	;# 
  2453  0418                     	;# 
  2454  0419                     	;# 
  2455  041A                     	;# 
  2456  041B                     	;# 
  2457  041C                     	;# 
  2458  041D                     	;# 
  2459  041E                     	;# 
  2460  041F                     	;# 
  2461  0498                     	;# 
  2462  0498                     	;# 
  2463  0499                     	;# 
  2464  049A                     	;# 
  2465  049B                     	;# 
  2466  049B                     	;# 
  2467  049C                     	;# 
  2468  049D                     	;# 
  2469  049E                     	;# 
  2470  049F                     	;# 
  2471  0617                     	;# 
  2472  0618                     	;# 
  2473  0619                     	;# 
  2474  0619                     	;# 
  2475  061A                     	;# 
  2476  061B                     	;# 
  2477  061C                     	;# 
  2478  061C                     	;# 
  2479  061F                     	;# 
  2480  0691                     	;# 
  2481  0692                     	;# 
  2482  0693                     	;# 
  2483  0694                     	;# 
  2484  0695                     	;# 
  2485  0696                     	;# 
  2486  0697                     	;# 
  2487  0698                     	;# 
  2488  0699                     	;# 
  2489  0711                     	;# 
  2490  0712                     	;# 
  2491  0713                     	;# 
  2492  0714                     	;# 
  2493  0715                     	;# 
  2494  0716                     	;# 
  2495  0717                     	;# 
  2496  0718                     	;# 
  2497  0719                     	;# 
  2498  0891                     	;# 
  2499  0891                     	;# 
  2500  0891                     	;# 
  2501  0891                     	;# 
  2502  0891                     	;# 
  2503  0891                     	;# 
  2504  0892                     	;# 
  2505  0892                     	;# 
  2506  0892                     	;# 
  2507  0893                     	;# 
  2508  0893                     	;# 
  2509  0893                     	;# 
  2510  0893                     	;# 
  2511  0893                     	;# 
  2512  0893                     	;# 
  2513  0894                     	;# 
  2514  0894                     	;# 
  2515  0894                     	;# 
  2516  0895                     	;# 
  2517  0895                     	;# 
  2518  0895                     	;# 
  2519  0896                     	;# 
  2520  0896                     	;# 
  2521  0896                     	;# 
  2522  089B                     	;# 
  2523  0911                     	;# 
  2524  0912                     	;# 
  2525  0913                     	;# 
  2526  0914                     	;# 
  2527  0915                     	;# 
  2528  0916                     	;# 
  2529  0918                     	;# 
  2530  0919                     	;# 
  2531  091A                     	;# 
  2532  091B                     	;# 
  2533  091C                     	;# 
  2534  091D                     	;# 
  2535  091E                     	;# 
  2536  091F                     	;# 
  2537  0E0F                     	;# 
  2538  0E10                     	;# 
  2539  0E11                     	;# 
  2540  0E12                     	;# 
  2541  0E13                     	;# 
  2542  0E14                     	;# 
  2543  0E15                     	;# 
  2544  0E16                     	;# 
  2545  0E17                     	;# 
  2546  0E18                     	;# 
  2547  0E19                     	;# 
  2548  0E1A                     	;# 
  2549  0E1B                     	;# 
  2550  0E1C                     	;# 
  2551  0E1D                     	;# 
  2552  0E1E                     	;# 
  2553  0E1F                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E2C                     	;# 
  2564  0E2D                     	;# 
  2565  0E2E                     	;# 
  2566  0E2F                     	;# 
  2567  0E90                     	;# 
  2568  0E91                     	;# 
  2569  0E92                     	;# 
  2570  0E94                     	;# 
  2571  0E95                     	;# 
  2572  0E9C                     	;# 
  2573  0E9D                     	;# 
  2574  0E9E                     	;# 
  2575  0E9F                     	;# 
  2576  0EA0                     	;# 
  2577  0EA1                     	;# 
  2578  0EA2                     	;# 
  2579  0EA3                     	;# 
  2580  0EA4                     	;# 
  2581  0EA5                     	;# 
  2582  0EA6                     	;# 
  2583  0EA7                     	;# 
  2584  0F0F                     	;# 
  2585  0F10                     	;# 
  2586  0F11                     	;# 
  2587  0F12                     	;# 
  2588  0F13                     	;# 
  2589  0F14                     	;# 
  2590  0F15                     	;# 
  2591  0F16                     	;# 
  2592  0F17                     	;# 
  2593  0F18                     	;# 
  2594  0F19                     	;# 
  2595  0F1A                     	;# 
  2596  0F1B                     	;# 
  2597  0F1C                     	;# 
  2598  0F1D                     	;# 
  2599  0F1E                     	;# 
  2600  0F1F                     	;# 
  2601  0F20                     	;# 
  2602  0F21                     	;# 
  2603  0F22                     	;# 
  2604  0F23                     	;# 
  2605  0F24                     	;# 
  2606  0F25                     	;# 
  2607  0F26                     	;# 
  2608  0F27                     	;# 
  2609  0F28                     	;# 
  2610  0F29                     	;# 
  2611  0F2A                     	;# 
  2612  0F2B                     	;# 
  2613  0F2C                     	;# 
  2614  0F2D                     	;# 
  2615  0F2E                     	;# 
  2616  0F2F                     	;# 
  2617  0F30                     	;# 
  2618  0F31                     	;# 
  2619  0F32                     	;# 
  2620  0F33                     	;# 
  2621  0F34                     	;# 
  2622  0F35                     	;# 
  2623  0F36                     	;# 
  2624  0F37                     	;# 
  2625  0FE4                     	;# 
  2626  0FE5                     	;# 
  2627  0FE6                     	;# 
  2628  0FE7                     	;# 
  2629  0FE8                     	;# 
  2630  0FE9                     	;# 
  2631  0FEA                     	;# 
  2632  0FEB                     	;# 
  2633  0FED                     	;# 
  2634  0FEE                     	;# 
  2635  0FEF                     	;# 
  2636  0000                     	;# 
  2637  0001                     	;# 
  2638  0002                     	;# 
  2639  0003                     	;# 
  2640  0004                     	;# 
  2641  0005                     	;# 
  2642  0006                     	;# 
  2643  0007                     	;# 
  2644  0008                     	;# 
  2645  0009                     	;# 
  2646  000A                     	;# 
  2647  000B                     	;# 
  2648  000C                     	;# 
  2649  000D                     	;# 
  2650  000E                     	;# 
  2651  0010                     	;# 
  2652  0011                     	;# 
  2653  0012                     	;# 
  2654  0013                     	;# 
  2655  0014                     	;# 
  2656  0015                     	;# 
  2657  0015                     	;# 
  2658  0016                     	;# 
  2659  0016                     	;# 
  2660  0017                     	;# 
  2661  0018                     	;# 
  2662  0019                     	;# 
  2663  0019                     	;# 
  2664  001A                     	;# 
  2665  001B                     	;# 
  2666  001C                     	;# 
  2667  001D                     	;# 
  2668  001E                     	;# 
  2669  001F                     	;# 
  2670  008C                     	;# 
  2671  008D                     	;# 
  2672  008E                     	;# 
  2673  0090                     	;# 
  2674  0091                     	;# 
  2675  0092                     	;# 
  2676  0093                     	;# 
  2677  0094                     	;# 
  2678  0097                     	;# 
  2679  009B                     	;# 
  2680  009B                     	;# 
  2681  009C                     	;# 
  2682  009D                     	;# 
  2683  009E                     	;# 
  2684  009F                     	;# 
  2685  010C                     	;# 
  2686  010D                     	;# 
  2687  010E                     	;# 
  2688  0111                     	;# 
  2689  0112                     	;# 
  2690  0113                     	;# 
  2691  0114                     	;# 
  2692  0115                     	;# 
  2693  0116                     	;# 
  2694  0117                     	;# 
  2695  0118                     	;# 
  2696  0119                     	;# 
  2697  018C                     	;# 
  2698  018D                     	;# 
  2699  018E                     	;# 
  2700  0197                     	;# 
  2701  0199                     	;# 
  2702  0199                     	;# 
  2703  0199                     	;# 
  2704  019A                     	;# 
  2705  019A                     	;# 
  2706  019A                     	;# 
  2707  019B                     	;# 
  2708  019B                     	;# 
  2709  019B                     	;# 
  2710  019B                     	;# 
  2711  019B                     	;# 
  2712  019C                     	;# 
  2713  019C                     	;# 
  2714  019C                     	;# 
  2715  019D                     	;# 
  2716  019D                     	;# 
  2717  019D                     	;# 
  2718  019E                     	;# 
  2719  019E                     	;# 
  2720  019E                     	;# 
  2721  019F                     	;# 
  2722  019F                     	;# 
  2723  019F                     	;# 
  2724  019F                     	;# 
  2725  019F                     	;# 
  2726  020C                     	;# 
  2727  020D                     	;# 
  2728  020E                     	;# 
  2729  0211                     	;# 
  2730  0211                     	;# 
  2731  0212                     	;# 
  2732  0212                     	;# 
  2733  0213                     	;# 
  2734  0213                     	;# 
  2735  0214                     	;# 
  2736  0214                     	;# 
  2737  0215                     	;# 
  2738  0215                     	;# 
  2739  0215                     	;# 
  2740  0215                     	;# 
  2741  0216                     	;# 
  2742  0216                     	;# 
  2743  0217                     	;# 
  2744  0217                     	;# 
  2745  0219                     	;# 
  2746  021A                     	;# 
  2747  021B                     	;# 
  2748  021C                     	;# 
  2749  021D                     	;# 
  2750  021D                     	;# 
  2751  021E                     	;# 
  2752  021F                     	;# 
  2753  028C                     	;# 
  2754  028D                     	;# 
  2755  028E                     	;# 
  2756  0291                     	;# 
  2757  0291                     	;# 
  2758  0292                     	;# 
  2759  0293                     	;# 
  2760  0294                     	;# 
  2761  0295                     	;# 
  2762  0295                     	;# 
  2763  0296                     	;# 
  2764  0297                     	;# 
  2765  0298                     	;# 
  2766  029F                     	;# 
  2767  030C                     	;# 
  2768  030D                     	;# 
  2769  030E                     	;# 
  2770  0311                     	;# 
  2771  0311                     	;# 
  2772  0312                     	;# 
  2773  0313                     	;# 
  2774  0314                     	;# 
  2775  0315                     	;# 
  2776  0315                     	;# 
  2777  0316                     	;# 
  2778  0317                     	;# 
  2779  0318                     	;# 
  2780  038C                     	;# 
  2781  038D                     	;# 
  2782  038E                     	;# 
  2783  0391                     	;# 
  2784  0392                     	;# 
  2785  0393                     	;# 
  2786  0394                     	;# 
  2787  0395                     	;# 
  2788  0396                     	;# 
  2789  0397                     	;# 
  2790  0398                     	;# 
  2791  0399                     	;# 
  2792  039A                     	;# 
  2793  039C                     	;# 
  2794  039D                     	;# 
  2795  039E                     	;# 
  2796  039F                     	;# 
  2797  0411                     	;# 
  2798  0411                     	;# 
  2799  0412                     	;# 
  2800  0413                     	;# 
  2801  0414                     	;# 
  2802  0415                     	;# 
  2803  0416                     	;# 
  2804  0417                     	;# 
  2805  0418                     	;# 
  2806  0418                     	;# 
  2807  0419                     	;# 
  2808  041A                     	;# 
  2809  041B                     	;# 
  2810  041C                     	;# 
  2811  041D                     	;# 
  2812  041E                     	;# 
  2813  041F                     	;# 
  2814  0498                     	;# 
  2815  0498                     	;# 
  2816  0499                     	;# 
  2817  049A                     	;# 
  2818  049B                     	;# 
  2819  049B                     	;# 
  2820  049C                     	;# 
  2821  049D                     	;# 
  2822  049E                     	;# 
  2823  049F                     	;# 
  2824  0617                     	;# 
  2825  0618                     	;# 
  2826  0619                     	;# 
  2827  0619                     	;# 
  2828  061A                     	;# 
  2829  061B                     	;# 
  2830  061C                     	;# 
  2831  061C                     	;# 
  2832  061F                     	;# 
  2833  0691                     	;# 
  2834  0692                     	;# 
  2835  0693                     	;# 
  2836  0694                     	;# 
  2837  0695                     	;# 
  2838  0696                     	;# 
  2839  0697                     	;# 
  2840  0698                     	;# 
  2841  0699                     	;# 
  2842  0711                     	;# 
  2843  0712                     	;# 
  2844  0713                     	;# 
  2845  0714                     	;# 
  2846  0715                     	;# 
  2847  0716                     	;# 
  2848  0717                     	;# 
  2849  0718                     	;# 
  2850  0719                     	;# 
  2851  0891                     	;# 
  2852  0891                     	;# 
  2853  0891                     	;# 
  2854  0891                     	;# 
  2855  0891                     	;# 
  2856  0891                     	;# 
  2857  0892                     	;# 
  2858  0892                     	;# 
  2859  0892                     	;# 
  2860  0893                     	;# 
  2861  0893                     	;# 
  2862  0893                     	;# 
  2863  0893                     	;# 
  2864  0893                     	;# 
  2865  0893                     	;# 
  2866  0894                     	;# 
  2867  0894                     	;# 
  2868  0894                     	;# 
  2869  0895                     	;# 
  2870  0895                     	;# 
  2871  0895                     	;# 
  2872  0896                     	;# 
  2873  0896                     	;# 
  2874  0896                     	;# 
  2875  089B                     	;# 
  2876  0911                     	;# 
  2877  0912                     	;# 
  2878  0913                     	;# 
  2879  0914                     	;# 
  2880  0915                     	;# 
  2881  0916                     	;# 
  2882  0918                     	;# 
  2883  0919                     	;# 
  2884  091A                     	;# 
  2885  091B                     	;# 
  2886  091C                     	;# 
  2887  091D                     	;# 
  2888  091E                     	;# 
  2889  091F                     	;# 
  2890  0E0F                     	;# 
  2891  0E10                     	;# 
  2892  0E11                     	;# 
  2893  0E12                     	;# 
  2894  0E13                     	;# 
  2895  0E14                     	;# 
  2896  0E15                     	;# 
  2897  0E16                     	;# 
  2898  0E17                     	;# 
  2899  0E18                     	;# 
  2900  0E19                     	;# 
  2901  0E1A                     	;# 
  2902  0E1B                     	;# 
  2903  0E1C                     	;# 
  2904  0E1D                     	;# 
  2905  0E1E                     	;# 
  2906  0E1F                     	;# 
  2907  0E20                     	;# 
  2908  0E21                     	;# 
  2909  0E22                     	;# 
  2910  0E24                     	;# 
  2911  0E25                     	;# 
  2912  0E28                     	;# 
  2913  0E29                     	;# 
  2914  0E2A                     	;# 
  2915  0E2B                     	;# 
  2916  0E2C                     	;# 
  2917  0E2D                     	;# 
  2918  0E2E                     	;# 
  2919  0E2F                     	;# 
  2920  0E90                     	;# 
  2921  0E91                     	;# 
  2922  0E92                     	;# 
  2923  0E94                     	;# 
  2924  0E95                     	;# 
  2925  0E9C                     	;# 
  2926  0E9D                     	;# 
  2927  0E9E                     	;# 
  2928  0E9F                     	;# 
  2929  0EA0                     	;# 
  2930  0EA1                     	;# 
  2931  0EA2                     	;# 
  2932  0EA3                     	;# 
  2933  0EA4                     	;# 
  2934  0EA5                     	;# 
  2935  0EA6                     	;# 
  2936  0EA7                     	;# 
  2937  0F0F                     	;# 
  2938  0F10                     	;# 
  2939  0F11                     	;# 
  2940  0F12                     	;# 
  2941  0F13                     	;# 
  2942  0F14                     	;# 
  2943  0F15                     	;# 
  2944  0F16                     	;# 
  2945  0F17                     	;# 
  2946  0F18                     	;# 
  2947  0F19                     	;# 
  2948  0F1A                     	;# 
  2949  0F1B                     	;# 
  2950  0F1C                     	;# 
  2951  0F1D                     	;# 
  2952  0F1E                     	;# 
  2953  0F1F                     	;# 
  2954  0F20                     	;# 
  2955  0F21                     	;# 
  2956  0F22                     	;# 
  2957  0F23                     	;# 
  2958  0F24                     	;# 
  2959  0F25                     	;# 
  2960  0F26                     	;# 
  2961  0F27                     	;# 
  2962  0F28                     	;# 
  2963  0F29                     	;# 
  2964  0F2A                     	;# 
  2965  0F2B                     	;# 
  2966  0F2C                     	;# 
  2967  0F2D                     	;# 
  2968  0F2E                     	;# 
  2969  0F2F                     	;# 
  2970  0F30                     	;# 
  2971  0F31                     	;# 
  2972  0F32                     	;# 
  2973  0F33                     	;# 
  2974  0F34                     	;# 
  2975  0F35                     	;# 
  2976  0F36                     	;# 
  2977  0F37                     	;# 
  2978  0FE4                     	;# 
  2979  0FE5                     	;# 
  2980  0FE6                     	;# 
  2981  0FE7                     	;# 
  2982  0FE8                     	;# 
  2983  0FE9                     	;# 
  2984  0FEA                     	;# 
  2985  0FEB                     	;# 
  2986  0FED                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0000                     	;# 
  2990  0001                     	;# 
  2991  0002                     	;# 
  2992  0003                     	;# 
  2993  0004                     	;# 
  2994  0005                     	;# 
  2995  0006                     	;# 
  2996  0007                     	;# 
  2997  0008                     	;# 
  2998  0009                     	;# 
  2999  000A                     	;# 
  3000  000B                     	;# 
  3001  000C                     	;# 
  3002  000D                     	;# 
  3003  000E                     	;# 
  3004  0010                     	;# 
  3005  0011                     	;# 
  3006  0012                     	;# 
  3007  0013                     	;# 
  3008  0014                     	;# 
  3009  0015                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  0019                     	;# 
  3017  001A                     	;# 
  3018  001B                     	;# 
  3019  001C                     	;# 
  3020  001D                     	;# 
  3021  001E                     	;# 
  3022  001F                     	;# 
  3023  008C                     	;# 
  3024  008D                     	;# 
  3025  008E                     	;# 
  3026  0090                     	;# 
  3027  0091                     	;# 
  3028  0092                     	;# 
  3029  0093                     	;# 
  3030  0094                     	;# 
  3031  0097                     	;# 
  3032  009B                     	;# 
  3033  009B                     	;# 
  3034  009C                     	;# 
  3035  009D                     	;# 
  3036  009E                     	;# 
  3037  009F                     	;# 
  3038  010C                     	;# 
  3039  010D                     	;# 
  3040  010E                     	;# 
  3041  0111                     	;# 
  3042  0112                     	;# 
  3043  0113                     	;# 
  3044  0114                     	;# 
  3045  0115                     	;# 
  3046  0116                     	;# 
  3047  0117                     	;# 
  3048  0118                     	;# 
  3049  0119                     	;# 
  3050  018C                     	;# 
  3051  018D                     	;# 
  3052  018E                     	;# 
  3053  0197                     	;# 
  3054  0199                     	;# 
  3055  0199                     	;# 
  3056  0199                     	;# 
  3057  019A                     	;# 
  3058  019A                     	;# 
  3059  019A                     	;# 
  3060  019B                     	;# 
  3061  019B                     	;# 
  3062  019B                     	;# 
  3063  019B                     	;# 
  3064  019B                     	;# 
  3065  019C                     	;# 
  3066  019C                     	;# 
  3067  019C                     	;# 
  3068  019D                     	;# 
  3069  019D                     	;# 
  3070  019D                     	;# 
  3071  019E                     	;# 
  3072  019E                     	;# 
  3073  019E                     	;# 
  3074  019F                     	;# 
  3075  019F                     	;# 
  3076  019F                     	;# 
  3077  019F                     	;# 
  3078  019F                     	;# 
  3079  020C                     	;# 
  3080  020D                     	;# 
  3081  020E                     	;# 
  3082  0211                     	;# 
  3083  0211                     	;# 
  3084  0212                     	;# 
  3085  0212                     	;# 
  3086  0213                     	;# 
  3087  0213                     	;# 
  3088  0214                     	;# 
  3089  0214                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0215                     	;# 
  3093  0215                     	;# 
  3094  0216                     	;# 
  3095  0216                     	;# 
  3096  0217                     	;# 
  3097  0217                     	;# 
  3098  0219                     	;# 
  3099  021A                     	;# 
  3100  021B                     	;# 
  3101  021C                     	;# 
  3102  021D                     	;# 
  3103  021D                     	;# 
  3104  021E                     	;# 
  3105  021F                     	;# 
  3106  028C                     	;# 
  3107  028D                     	;# 
  3108  028E                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0294                     	;# 
  3114  0295                     	;# 
  3115  0295                     	;# 
  3116  0296                     	;# 
  3117  0297                     	;# 
  3118  0298                     	;# 
  3119  029F                     	;# 
  3120  030C                     	;# 
  3121  030D                     	;# 
  3122  030E                     	;# 
  3123  0311                     	;# 
  3124  0311                     	;# 
  3125  0312                     	;# 
  3126  0313                     	;# 
  3127  0314                     	;# 
  3128  0315                     	;# 
  3129  0315                     	;# 
  3130  0316                     	;# 
  3131  0317                     	;# 
  3132  0318                     	;# 
  3133  038C                     	;# 
  3134  038D                     	;# 
  3135  038E                     	;# 
  3136  0391                     	;# 
  3137  0392                     	;# 
  3138  0393                     	;# 
  3139  0394                     	;# 
  3140  0395                     	;# 
  3141  0396                     	;# 
  3142  0397                     	;# 
  3143  0398                     	;# 
  3144  0399                     	;# 
  3145  039A                     	;# 
  3146  039C                     	;# 
  3147  039D                     	;# 
  3148  039E                     	;# 
  3149  039F                     	;# 
  3150  0411                     	;# 
  3151  0411                     	;# 
  3152  0412                     	;# 
  3153  0413                     	;# 
  3154  0414                     	;# 
  3155  0415                     	;# 
  3156  0416                     	;# 
  3157  0417                     	;# 
  3158  0418                     	;# 
  3159  0418                     	;# 
  3160  0419                     	;# 
  3161  041A                     	;# 
  3162  041B                     	;# 
  3163  041C                     	;# 
  3164  041D                     	;# 
  3165  041E                     	;# 
  3166  041F                     	;# 
  3167  0498                     	;# 
  3168  0498                     	;# 
  3169  0499                     	;# 
  3170  049A                     	;# 
  3171  049B                     	;# 
  3172  049B                     	;# 
  3173  049C                     	;# 
  3174  049D                     	;# 
  3175  049E                     	;# 
  3176  049F                     	;# 
  3177  0617                     	;# 
  3178  0618                     	;# 
  3179  0619                     	;# 
  3180  0619                     	;# 
  3181  061A                     	;# 
  3182  061B                     	;# 
  3183  061C                     	;# 
  3184  061C                     	;# 
  3185  061F                     	;# 
  3186  0691                     	;# 
  3187  0692                     	;# 
  3188  0693                     	;# 
  3189  0694                     	;# 
  3190  0695                     	;# 
  3191  0696                     	;# 
  3192  0697                     	;# 
  3193  0698                     	;# 
  3194  0699                     	;# 
  3195  0711                     	;# 
  3196  0712                     	;# 
  3197  0713                     	;# 
  3198  0714                     	;# 
  3199  0715                     	;# 
  3200  0716                     	;# 
  3201  0717                     	;# 
  3202  0718                     	;# 
  3203  0719                     	;# 
  3204  0891                     	;# 
  3205  0891                     	;# 
  3206  0891                     	;# 
  3207  0891                     	;# 
  3208  0891                     	;# 
  3209  0891                     	;# 
  3210  0892                     	;# 
  3211  0892                     	;# 
  3212  0892                     	;# 
  3213  0893                     	;# 
  3214  0893                     	;# 
  3215  0893                     	;# 
  3216  0893                     	;# 
  3217  0893                     	;# 
  3218  0893                     	;# 
  3219  0894                     	;# 
  3220  0894                     	;# 
  3221  0894                     	;# 
  3222  0895                     	;# 
  3223  0895                     	;# 
  3224  0895                     	;# 
  3225  0896                     	;# 
  3226  0896                     	;# 
  3227  0896                     	;# 
  3228  089B                     	;# 
  3229  0911                     	;# 
  3230  0912                     	;# 
  3231  0913                     	;# 
  3232  0914                     	;# 
  3233  0915                     	;# 
  3234  0916                     	;# 
  3235  0918                     	;# 
  3236  0919                     	;# 
  3237  091A                     	;# 
  3238  091B                     	;# 
  3239  091C                     	;# 
  3240  091D                     	;# 
  3241  091E                     	;# 
  3242  091F                     	;# 
  3243  0E0F                     	;# 
  3244  0E10                     	;# 
  3245  0E11                     	;# 
  3246  0E12                     	;# 
  3247  0E13                     	;# 
  3248  0E14                     	;# 
  3249  0E15                     	;# 
  3250  0E16                     	;# 
  3251  0E17                     	;# 
  3252  0E18                     	;# 
  3253  0E19                     	;# 
  3254  0E1A                     	;# 
  3255  0E1B                     	;# 
  3256  0E1C                     	;# 
  3257  0E1D                     	;# 
  3258  0E1E                     	;# 
  3259  0E1F                     	;# 
  3260  0E20                     	;# 
  3261  0E21                     	;# 
  3262  0E22                     	;# 
  3263  0E24                     	;# 
  3264  0E25                     	;# 
  3265  0E28                     	;# 
  3266  0E29                     	;# 
  3267  0E2A                     	;# 
  3268  0E2B                     	;# 
  3269  0E2C                     	;# 
  3270  0E2D                     	;# 
  3271  0E2E                     	;# 
  3272  0E2F                     	;# 
  3273  0E90                     	;# 
  3274  0E91                     	;# 
  3275  0E92                     	;# 
  3276  0E94                     	;# 
  3277  0E95                     	;# 
  3278  0E9C                     	;# 
  3279  0E9D                     	;# 
  3280  0E9E                     	;# 
  3281  0E9F                     	;# 
  3282  0EA0                     	;# 
  3283  0EA1                     	;# 
  3284  0EA2                     	;# 
  3285  0EA3                     	;# 
  3286  0EA4                     	;# 
  3287  0EA5                     	;# 
  3288  0EA6                     	;# 
  3289  0EA7                     	;# 
  3290  0F0F                     	;# 
  3291  0F10                     	;# 
  3292  0F11                     	;# 
  3293  0F12                     	;# 
  3294  0F13                     	;# 
  3295  0F14                     	;# 
  3296  0F15                     	;# 
  3297  0F16                     	;# 
  3298  0F17                     	;# 
  3299  0F18                     	;# 
  3300  0F19                     	;# 
  3301  0F1A                     	;# 
  3302  0F1B                     	;# 
  3303  0F1C                     	;# 
  3304  0F1D                     	;# 
  3305  0F1E                     	;# 
  3306  0F1F                     	;# 
  3307  0F20                     	;# 
  3308  0F21                     	;# 
  3309  0F22                     	;# 
  3310  0F23                     	;# 
  3311  0F24                     	;# 
  3312  0F25                     	;# 
  3313  0F26                     	;# 
  3314  0F27                     	;# 
  3315  0F28                     	;# 
  3316  0F29                     	;# 
  3317  0F2A                     	;# 
  3318  0F2B                     	;# 
  3319  0F2C                     	;# 
  3320  0F2D                     	;# 
  3321  0F2E                     	;# 
  3322  0F2F                     	;# 
  3323  0F30                     	;# 
  3324  0F31                     	;# 
  3325  0F32                     	;# 
  3326  0F33                     	;# 
  3327  0F34                     	;# 
  3328  0F35                     	;# 
  3329  0F36                     	;# 
  3330  0F37                     	;# 
  3331  0FE4                     	;# 
  3332  0FE5                     	;# 
  3333  0FE6                     	;# 
  3334  0FE7                     	;# 
  3335  0FE8                     	;# 
  3336  0FE9                     	;# 
  3337  0FEA                     	;# 
  3338  0FEB                     	;# 
  3339  0FED                     	;# 
  3340  0FEE                     	;# 
  3341  0FEF                     	;# 
  3342  0000                     	;# 
  3343  0001                     	;# 
  3344  0002                     	;# 
  3345  0003                     	;# 
  3346  0004                     	;# 
  3347  0005                     	;# 
  3348  0006                     	;# 
  3349  0007                     	;# 
  3350  0008                     	;# 
  3351  0009                     	;# 
  3352  000A                     	;# 
  3353  000B                     	;# 
  3354  000C                     	;# 
  3355  000D                     	;# 
  3356  000E                     	;# 
  3357  0010                     	;# 
  3358  0011                     	;# 
  3359  0012                     	;# 
  3360  0013                     	;# 
  3361  0014                     	;# 
  3362  0015                     	;# 
  3363  0015                     	;# 
  3364  0016                     	;# 
  3365  0016                     	;# 
  3366  0017                     	;# 
  3367  0018                     	;# 
  3368  0019                     	;# 
  3369  0019                     	;# 
  3370  001A                     	;# 
  3371  001B                     	;# 
  3372  001C                     	;# 
  3373  001D                     	;# 
  3374  001E                     	;# 
  3375  001F                     	;# 
  3376  008C                     	;# 
  3377  008D                     	;# 
  3378  008E                     	;# 
  3379  0090                     	;# 
  3380  0091                     	;# 
  3381  0092                     	;# 
  3382  0093                     	;# 
  3383  0094                     	;# 
  3384  0097                     	;# 
  3385  009B                     	;# 
  3386  009B                     	;# 
  3387  009C                     	;# 
  3388  009D                     	;# 
  3389  009E                     	;# 
  3390  009F                     	;# 
  3391  010C                     	;# 
  3392  010D                     	;# 
  3393  010E                     	;# 
  3394  0111                     	;# 
  3395  0112                     	;# 
  3396  0113                     	;# 
  3397  0114                     	;# 
  3398  0115                     	;# 
  3399  0116                     	;# 
  3400  0117                     	;# 
  3401  0118                     	;# 
  3402  0119                     	;# 
  3403  018C                     	;# 
  3404  018D                     	;# 
  3405  018E                     	;# 
  3406  0197                     	;# 
  3407  0199                     	;# 
  3408  0199                     	;# 
  3409  0199                     	;# 
  3410  019A                     	;# 
  3411  019A                     	;# 
  3412  019A                     	;# 
  3413  019B                     	;# 
  3414  019B                     	;# 
  3415  019B                     	;# 
  3416  019B                     	;# 
  3417  019B                     	;# 
  3418  019C                     	;# 
  3419  019C                     	;# 
  3420  019C                     	;# 
  3421  019D                     	;# 
  3422  019D                     	;# 
  3423  019D                     	;# 
  3424  019E                     	;# 
  3425  019E                     	;# 
  3426  019E                     	;# 
  3427  019F                     	;# 
  3428  019F                     	;# 
  3429  019F                     	;# 
  3430  019F                     	;# 
  3431  019F                     	;# 
  3432  020C                     	;# 
  3433  020D                     	;# 
  3434  020E                     	;# 
  3435  0211                     	;# 
  3436  0211                     	;# 
  3437  0212                     	;# 
  3438  0212                     	;# 
  3439  0213                     	;# 
  3440  0213                     	;# 
  3441  0214                     	;# 
  3442  0214                     	;# 
  3443  0215                     	;# 
  3444  0215                     	;# 
  3445  0215                     	;# 
  3446  0215                     	;# 
  3447  0216                     	;# 
  3448  0216                     	;# 
  3449  0217                     	;# 
  3450  0217                     	;# 
  3451  0219                     	;# 
  3452  021A                     	;# 
  3453  021B                     	;# 
  3454  021C                     	;# 
  3455  021D                     	;# 
  3456  021D                     	;# 
  3457  021E                     	;# 
  3458  021F                     	;# 
  3459  028C                     	;# 
  3460  028D                     	;# 
  3461  028E                     	;# 
  3462  0291                     	;# 
  3463  0291                     	;# 
  3464  0292                     	;# 
  3465  0293                     	;# 
  3466  0294                     	;# 
  3467  0295                     	;# 
  3468  0295                     	;# 
  3469  0296                     	;# 
  3470  0297                     	;# 
  3471  0298                     	;# 
  3472  029F                     	;# 
  3473  030C                     	;# 
  3474  030D                     	;# 
  3475  030E                     	;# 
  3476  0311                     	;# 
  3477  0311                     	;# 
  3478  0312                     	;# 
  3479  0313                     	;# 
  3480  0314                     	;# 
  3481  0315                     	;# 
  3482  0315                     	;# 
  3483  0316                     	;# 
  3484  0317                     	;# 
  3485  0318                     	;# 
  3486  038C                     	;# 
  3487  038D                     	;# 
  3488  038E                     	;# 
  3489  0391                     	;# 
  3490  0392                     	;# 
  3491  0393                     	;# 
  3492  0394                     	;# 
  3493  0395                     	;# 
  3494  0396                     	;# 
  3495  0397                     	;# 
  3496  0398                     	;# 
  3497  0399                     	;# 
  3498  039A                     	;# 
  3499  039C                     	;# 
  3500  039D                     	;# 
  3501  039E                     	;# 
  3502  039F                     	;# 
  3503  0411                     	;# 
  3504  0411                     	;# 
  3505  0412                     	;# 
  3506  0413                     	;# 
  3507  0414                     	;# 
  3508  0415                     	;# 
  3509  0416                     	;# 
  3510  0417                     	;# 
  3511  0418                     	;# 
  3512  0418                     	;# 
  3513  0419                     	;# 
  3514  041A                     	;# 
  3515  041B                     	;# 
  3516  041C                     	;# 
  3517  041D                     	;# 
  3518  041E                     	;# 
  3519  041F                     	;# 
  3520  0498                     	;# 
  3521  0498                     	;# 
  3522  0499                     	;# 
  3523  049A                     	;# 
  3524  049B                     	;# 
  3525  049B                     	;# 
  3526  049C                     	;# 
  3527  049D                     	;# 
  3528  049E                     	;# 
  3529  049F                     	;# 
  3530  0617                     	;# 
  3531  0618                     	;# 
  3532  0619                     	;# 
  3533  0619                     	;# 
  3534  061A                     	;# 
  3535  061B                     	;# 
  3536  061C                     	;# 
  3537  061C                     	;# 
  3538  061F                     	;# 
  3539  0691                     	;# 
  3540  0692                     	;# 
  3541  0693                     	;# 
  3542  0694                     	;# 
  3543  0695                     	;# 
  3544  0696                     	;# 
  3545  0697                     	;# 
  3546  0698                     	;# 
  3547  0699                     	;# 
  3548  0711                     	;# 
  3549  0712                     	;# 
  3550  0713                     	;# 
  3551  0714                     	;# 
  3552  0715                     	;# 
  3553  0716                     	;# 
  3554  0717                     	;# 
  3555  0718                     	;# 
  3556  0719                     	;# 
  3557  0891                     	;# 
  3558  0891                     	;# 
  3559  0891                     	;# 
  3560  0891                     	;# 
  3561  0891                     	;# 
  3562  0891                     	;# 
  3563  0892                     	;# 
  3564  0892                     	;# 
  3565  0892                     	;# 
  3566  0893                     	;# 
  3567  0893                     	;# 
  3568  0893                     	;# 
  3569  0893                     	;# 
  3570  0893                     	;# 
  3571  0893                     	;# 
  3572  0894                     	;# 
  3573  0894                     	;# 
  3574  0894                     	;# 
  3575  0895                     	;# 
  3576  0895                     	;# 
  3577  0895                     	;# 
  3578  0896                     	;# 
  3579  0896                     	;# 
  3580  0896                     	;# 
  3581  089B                     	;# 
  3582  0911                     	;# 
  3583  0912                     	;# 
  3584  0913                     	;# 
  3585  0914                     	;# 
  3586  0915                     	;# 
  3587  0916                     	;# 
  3588  0918                     	;# 
  3589  0919                     	;# 
  3590  091A                     	;# 
  3591  091B                     	;# 
  3592  091C                     	;# 
  3593  091D                     	;# 
  3594  091E                     	;# 
  3595  091F                     	;# 
  3596  0E0F                     	;# 
  3597  0E10                     	;# 
  3598  0E11                     	;# 
  3599  0E12                     	;# 
  3600  0E13                     	;# 
  3601  0E14                     	;# 
  3602  0E15                     	;# 
  3603  0E16                     	;# 
  3604  0E17                     	;# 
  3605  0E18                     	;# 
  3606  0E19                     	;# 
  3607  0E1A                     	;# 
  3608  0E1B                     	;# 
  3609  0E1C                     	;# 
  3610  0E1D                     	;# 
  3611  0E1E                     	;# 
  3612  0E1F                     	;# 
  3613  0E20                     	;# 
  3614  0E21                     	;# 
  3615  0E22                     	;# 
  3616  0E24                     	;# 
  3617  0E25                     	;# 
  3618  0E28                     	;# 
  3619  0E29                     	;# 
  3620  0E2A                     	;# 
  3621  0E2B                     	;# 
  3622  0E2C                     	;# 
  3623  0E2D                     	;# 
  3624  0E2E                     	;# 
  3625  0E2F                     	;# 
  3626  0E90                     	;# 
  3627  0E91                     	;# 
  3628  0E92                     	;# 
  3629  0E94                     	;# 
  3630  0E95                     	;# 
  3631  0E9C                     	;# 
  3632  0E9D                     	;# 
  3633  0E9E                     	;# 
  3634  0E9F                     	;# 
  3635  0EA0                     	;# 
  3636  0EA1                     	;# 
  3637  0EA2                     	;# 
  3638  0EA3                     	;# 
  3639  0EA4                     	;# 
  3640  0EA5                     	;# 
  3641  0EA6                     	;# 
  3642  0EA7                     	;# 
  3643  0F0F                     	;# 
  3644  0F10                     	;# 
  3645  0F11                     	;# 
  3646  0F12                     	;# 
  3647  0F13                     	;# 
  3648  0F14                     	;# 
  3649  0F15                     	;# 
  3650  0F16                     	;# 
  3651  0F17                     	;# 
  3652  0F18                     	;# 
  3653  0F19                     	;# 
  3654  0F1A                     	;# 
  3655  0F1B                     	;# 
  3656  0F1C                     	;# 
  3657  0F1D                     	;# 
  3658  0F1E                     	;# 
  3659  0F1F                     	;# 
  3660  0F20                     	;# 
  3661  0F21                     	;# 
  3662  0F22                     	;# 
  3663  0F23                     	;# 
  3664  0F24                     	;# 
  3665  0F25                     	;# 
  3666  0F26                     	;# 
  3667  0F27                     	;# 
  3668  0F28                     	;# 
  3669  0F29                     	;# 
  3670  0F2A                     	;# 
  3671  0F2B                     	;# 
  3672  0F2C                     	;# 
  3673  0F2D                     	;# 
  3674  0F2E                     	;# 
  3675  0F2F                     	;# 
  3676  0F30                     	;# 
  3677  0F31                     	;# 
  3678  0F32                     	;# 
  3679  0F33                     	;# 
  3680  0F34                     	;# 
  3681  0F35                     	;# 
  3682  0F36                     	;# 
  3683  0F37                     	;# 
  3684  0FE4                     	;# 
  3685  0FE5                     	;# 
  3686  0FE6                     	;# 
  3687  0FE7                     	;# 
  3688  0FE8                     	;# 
  3689  0FE9                     	;# 
  3690  0FEA                     	;# 
  3691  0FEB                     	;# 
  3692  0FED                     	;# 
  3693  0FEE                     	;# 
  3694  0FEF                     	;# 
  3695  0000                     	;# 
  3696  0001                     	;# 
  3697  0002                     	;# 
  3698  0003                     	;# 
  3699  0004                     	;# 
  3700  0005                     	;# 
  3701  0006                     	;# 
  3702  0007                     	;# 
  3703  0008                     	;# 
  3704  0009                     	;# 
  3705  000A                     	;# 
  3706  000B                     	;# 
  3707  000C                     	;# 
  3708  000D                     	;# 
  3709  000E                     	;# 
  3710  0010                     	;# 
  3711  0011                     	;# 
  3712  0012                     	;# 
  3713  0013                     	;# 
  3714  0014                     	;# 
  3715  0015                     	;# 
  3716  0015                     	;# 
  3717  0016                     	;# 
  3718  0016                     	;# 
  3719  0017                     	;# 
  3720  0018                     	;# 
  3721  0019                     	;# 
  3722  0019                     	;# 
  3723  001A                     	;# 
  3724  001B                     	;# 
  3725  001C                     	;# 
  3726  001D                     	;# 
  3727  001E                     	;# 
  3728  001F                     	;# 
  3729  008C                     	;# 
  3730  008D                     	;# 
  3731  008E                     	;# 
  3732  0090                     	;# 
  3733  0091                     	;# 
  3734  0092                     	;# 
  3735  0093                     	;# 
  3736  0094                     	;# 
  3737  0097                     	;# 
  3738  009B                     	;# 
  3739  009B                     	;# 
  3740  009C                     	;# 
  3741  009D                     	;# 
  3742  009E                     	;# 
  3743  009F                     	;# 
  3744  010C                     	;# 
  3745  010D                     	;# 
  3746  010E                     	;# 
  3747  0111                     	;# 
  3748  0112                     	;# 
  3749  0113                     	;# 
  3750  0114                     	;# 
  3751  0115                     	;# 
  3752  0116                     	;# 
  3753  0117                     	;# 
  3754  0118                     	;# 
  3755  0119                     	;# 
  3756  018C                     	;# 
  3757  018D                     	;# 
  3758  018E                     	;# 
  3759  0197                     	;# 
  3760  0199                     	;# 
  3761  0199                     	;# 
  3762  0199                     	;# 
  3763  019A                     	;# 
  3764  019A                     	;# 
  3765  019A                     	;# 
  3766  019B                     	;# 
  3767  019B                     	;# 
  3768  019B                     	;# 
  3769  019B                     	;# 
  3770  019B                     	;# 
  3771  019C                     	;# 
  3772  019C                     	;# 
  3773  019C                     	;# 
  3774  019D                     	;# 
  3775  019D                     	;# 
  3776  019D                     	;# 
  3777  019E                     	;# 
  3778  019E                     	;# 
  3779  019E                     	;# 
  3780  019F                     	;# 
  3781  019F                     	;# 
  3782  019F                     	;# 
  3783  019F                     	;# 
  3784  019F                     	;# 
  3785  020C                     	;# 
  3786  020D                     	;# 
  3787  020E                     	;# 
  3788  0211                     	;# 
  3789  0211                     	;# 
  3790  0212                     	;# 
  3791  0212                     	;# 
  3792  0213                     	;# 
  3793  0213                     	;# 
  3794  0214                     	;# 
  3795  0214                     	;# 
  3796  0215                     	;# 
  3797  0215                     	;# 
  3798  0215                     	;# 
  3799  0215                     	;# 
  3800  0216                     	;# 
  3801  0216                     	;# 
  3802  0217                     	;# 
  3803  0217                     	;# 
  3804  0219                     	;# 
  3805  021A                     	;# 
  3806  021B                     	;# 
  3807  021C                     	;# 
  3808  021D                     	;# 
  3809  021D                     	;# 
  3810  021E                     	;# 
  3811  021F                     	;# 
  3812  028C                     	;# 
  3813  028D                     	;# 
  3814  028E                     	;# 
  3815  0291                     	;# 
  3816  0291                     	;# 
  3817  0292                     	;# 
  3818  0293                     	;# 
  3819  0294                     	;# 
  3820  0295                     	;# 
  3821  0295                     	;# 
  3822  0296                     	;# 
  3823  0297                     	;# 
  3824  0298                     	;# 
  3825  029F                     	;# 
  3826  030C                     	;# 
  3827  030D                     	;# 
  3828  030E                     	;# 
  3829  0311                     	;# 
  3830  0311                     	;# 
  3831  0312                     	;# 
  3832  0313                     	;# 
  3833  0314                     	;# 
  3834  0315                     	;# 
  3835  0315                     	;# 
  3836  0316                     	;# 
  3837  0317                     	;# 
  3838  0318                     	;# 
  3839  038C                     	;# 
  3840  038D                     	;# 
  3841  038E                     	;# 
  3842  0391                     	;# 
  3843  0392                     	;# 
  3844  0393                     	;# 
  3845  0394                     	;# 
  3846  0395                     	;# 
  3847  0396                     	;# 
  3848  0397                     	;# 
  3849  0398                     	;# 
  3850  0399                     	;# 
  3851  039A                     	;# 
  3852  039C                     	;# 
  3853  039D                     	;# 
  3854  039E                     	;# 
  3855  039F                     	;# 
  3856  0411                     	;# 
  3857  0411                     	;# 
  3858  0412                     	;# 
  3859  0413                     	;# 
  3860  0414                     	;# 
  3861  0415                     	;# 
  3862  0416                     	;# 
  3863  0417                     	;# 
  3864  0418                     	;# 
  3865  0418                     	;# 
  3866  0419                     	;# 
  3867  041A                     	;# 
  3868  041B                     	;# 
  3869  041C                     	;# 
  3870  041D                     	;# 
  3871  041E                     	;# 
  3872  041F                     	;# 
  3873  0498                     	;# 
  3874  0498                     	;# 
  3875  0499                     	;# 
  3876  049A                     	;# 
  3877  049B                     	;# 
  3878  049B                     	;# 
  3879  049C                     	;# 
  3880  049D                     	;# 
  3881  049E                     	;# 
  3882  049F                     	;# 
  3883  0617                     	;# 
  3884  0618                     	;# 
  3885  0619                     	;# 
  3886  0619                     	;# 
  3887  061A                     	;# 
  3888  061B                     	;# 
  3889  061C                     	;# 
  3890  061C                     	;# 
  3891  061F                     	;# 
  3892  0691                     	;# 
  3893  0692                     	;# 
  3894  0693                     	;# 
  3895  0694                     	;# 
  3896  0695                     	;# 
  3897  0696                     	;# 
  3898  0697                     	;# 
  3899  0698                     	;# 
  3900  0699                     	;# 
  3901  0711                     	;# 
  3902  0712                     	;# 
  3903  0713                     	;# 
  3904  0714                     	;# 
  3905  0715                     	;# 
  3906  0716                     	;# 
  3907  0717                     	;# 
  3908  0718                     	;# 
  3909  0719                     	;# 
  3910  0891                     	;# 
  3911  0891                     	;# 
  3912  0891                     	;# 
  3913  0891                     	;# 
  3914  0891                     	;# 
  3915  0891                     	;# 
  3916  0892                     	;# 
  3917  0892                     	;# 
  3918  0892                     	;# 
  3919  0893                     	;# 
  3920  0893                     	;# 
  3921  0893                     	;# 
  3922  0893                     	;# 
  3923  0893                     	;# 
  3924  0893                     	;# 
  3925  0894                     	;# 
  3926  0894                     	;# 
  3927  0894                     	;# 
  3928  0895                     	;# 
  3929  0895                     	;# 
  3930  0895                     	;# 
  3931  0896                     	;# 
  3932  0896                     	;# 
  3933  0896                     	;# 
  3934  089B                     	;# 
  3935  0911                     	;# 
  3936  0912                     	;# 
  3937  0913                     	;# 
  3938  0914                     	;# 
  3939  0915                     	;# 
  3940  0916                     	;# 
  3941  0918                     	;# 
  3942  0919                     	;# 
  3943  091A                     	;# 
  3944  091B                     	;# 
  3945  091C                     	;# 
  3946  091D                     	;# 
  3947  091E                     	;# 
  3948  091F                     	;# 
  3949  0E0F                     	;# 
  3950  0E10                     	;# 
  3951  0E11                     	;# 
  3952  0E12                     	;# 
  3953  0E13                     	;# 
  3954  0E14                     	;# 
  3955  0E15                     	;# 
  3956  0E16                     	;# 
  3957  0E17                     	;# 
  3958  0E18                     	;# 
  3959  0E19                     	;# 
  3960  0E1A                     	;# 
  3961  0E1B                     	;# 
  3962  0E1C                     	;# 
  3963  0E1D                     	;# 
  3964  0E1E                     	;# 
  3965  0E1F                     	;# 
  3966  0E20                     	;# 
  3967  0E21                     	;# 
  3968  0E22                     	;# 
  3969  0E24                     	;# 
  3970  0E25                     	;# 
  3971  0E28                     	;# 
  3972  0E29                     	;# 
  3973  0E2A                     	;# 
  3974  0E2B                     	;# 
  3975  0E2C                     	;# 
  3976  0E2D                     	;# 
  3977  0E2E                     	;# 
  3978  0E2F                     	;# 
  3979  0E90                     	;# 
  3980  0E91                     	;# 
  3981  0E92                     	;# 
  3982  0E94                     	;# 
  3983  0E95                     	;# 
  3984  0E9C                     	;# 
  3985  0E9D                     	;# 
  3986  0E9E                     	;# 
  3987  0E9F                     	;# 
  3988  0EA0                     	;# 
  3989  0EA1                     	;# 
  3990  0EA2                     	;# 
  3991  0EA3                     	;# 
  3992  0EA4                     	;# 
  3993  0EA5                     	;# 
  3994  0EA6                     	;# 
  3995  0EA7                     	;# 
  3996  0F0F                     	;# 
  3997  0F10                     	;# 
  3998  0F11                     	;# 
  3999  0F12                     	;# 
  4000  0F13                     	;# 
  4001  0F14                     	;# 
  4002  0F15                     	;# 
  4003  0F16                     	;# 
  4004  0F17                     	;# 
  4005  0F18                     	;# 
  4006  0F19                     	;# 
  4007  0F1A                     	;# 
  4008  0F1B                     	;# 
  4009  0F1C                     	;# 
  4010  0F1D                     	;# 
  4011  0F1E                     	;# 
  4012  0F1F                     	;# 
  4013  0F20                     	;# 
  4014  0F21                     	;# 
  4015  0F22                     	;# 
  4016  0F23                     	;# 
  4017  0F24                     	;# 
  4018  0F25                     	;# 
  4019  0F26                     	;# 
  4020  0F27                     	;# 
  4021  0F28                     	;# 
  4022  0F29                     	;# 
  4023  0F2A                     	;# 
  4024  0F2B                     	;# 
  4025  0F2C                     	;# 
  4026  0F2D                     	;# 
  4027  0F2E                     	;# 
  4028  0F2F                     	;# 
  4029  0F30                     	;# 
  4030  0F31                     	;# 
  4031  0F32                     	;# 
  4032  0F33                     	;# 
  4033  0F34                     	;# 
  4034  0F35                     	;# 
  4035  0F36                     	;# 
  4036  0F37                     	;# 
  4037  0FE4                     	;# 
  4038  0FE5                     	;# 
  4039  0FE6                     	;# 
  4040  0FE7                     	;# 
  4041  0FE8                     	;# 
  4042  0FE9                     	;# 
  4043  0FEA                     	;# 
  4044  0FEB                     	;# 
  4045  0FED                     	;# 
  4046  0FEE                     	;# 
  4047  0FEF                     	;# 
  4048  0000                     	;# 
  4049  0001                     	;# 
  4050  0002                     	;# 
  4051  0003                     	;# 
  4052  0004                     	;# 
  4053  0005                     	;# 
  4054  0006                     	;# 
  4055  0007                     	;# 
  4056  0008                     	;# 
  4057  0009                     	;# 
  4058  000A                     	;# 
  4059  000B                     	;# 
  4060  000C                     	;# 
  4061  000D                     	;# 
  4062  000E                     	;# 
  4063  0010                     	;# 
  4064  0011                     	;# 
  4065  0012                     	;# 
  4066  0013                     	;# 
  4067  0014                     	;# 
  4068  0015                     	;# 
  4069  0015                     	;# 
  4070  0016                     	;# 
  4071  0016                     	;# 
  4072  0017                     	;# 
  4073  0018                     	;# 
  4074  0019                     	;# 
  4075  0019                     	;# 
  4076  001A                     	;# 
  4077  001B                     	;# 
  4078  001C                     	;# 
  4079  001D                     	;# 
  4080  001E                     	;# 
  4081  001F                     	;# 
  4082  008C                     	;# 
  4083  008D                     	;# 
  4084  008E                     	;# 
  4085  0090                     	;# 
  4086  0091                     	;# 
  4087  0092                     	;# 
  4088  0093                     	;# 
  4089  0094                     	;# 
  4090  0097                     	;# 
  4091  009B                     	;# 
  4092  009B                     	;# 
  4093  009C                     	;# 
  4094  009D                     	;# 
  4095  009E                     	;# 
  4096  009F                     	;# 
  4097  010C                     	;# 
  4098  010D                     	;# 
  4099  010E                     	;# 
  4100  0111                     	;# 
  4101  0112                     	;# 
  4102  0113                     	;# 
  4103  0114                     	;# 
  4104  0115                     	;# 
  4105  0116                     	;# 
  4106  0117                     	;# 
  4107  0118                     	;# 
  4108  0119                     	;# 
  4109  018C                     	;# 
  4110  018D                     	;# 
  4111  018E                     	;# 
  4112  0197                     	;# 
  4113  0199                     	;# 
  4114  0199                     	;# 
  4115  0199                     	;# 
  4116  019A                     	;# 
  4117  019A                     	;# 
  4118  019A                     	;# 
  4119  019B                     	;# 
  4120  019B                     	;# 
  4121  019B                     	;# 
  4122  019B                     	;# 
  4123  019B                     	;# 
  4124  019C                     	;# 
  4125  019C                     	;# 
  4126  019C                     	;# 
  4127  019D                     	;# 
  4128  019D                     	;# 
  4129  019D                     	;# 
  4130  019E                     	;# 
  4131  019E                     	;# 
  4132  019E                     	;# 
  4133  019F                     	;# 
  4134  019F                     	;# 
  4135  019F                     	;# 
  4136  019F                     	;# 
  4137  019F                     	;# 
  4138  020C                     	;# 
  4139  020D                     	;# 
  4140  020E                     	;# 
  4141  0211                     	;# 
  4142  0211                     	;# 
  4143  0212                     	;# 
  4144  0212                     	;# 
  4145  0213                     	;# 
  4146  0213                     	;# 
  4147  0214                     	;# 
  4148  0214                     	;# 
  4149  0215                     	;# 
  4150  0215                     	;# 
  4151  0215                     	;# 
  4152  0215                     	;# 
  4153  0216                     	;# 
  4154  0216                     	;# 
  4155  0217                     	;# 
  4156  0217                     	;# 
  4157  0219                     	;# 
  4158  021A                     	;# 
  4159  021B                     	;# 
  4160  021C                     	;# 
  4161  021D                     	;# 
  4162  021D                     	;# 
  4163  021E                     	;# 
  4164  021F                     	;# 
  4165  028C                     	;# 
  4166  028D                     	;# 
  4167  028E                     	;# 
  4168  0291                     	;# 
  4169  0291                     	;# 
  4170  0292                     	;# 
  4171  0293                     	;# 
  4172  0294                     	;# 
  4173  0295                     	;# 
  4174  0295                     	;# 
  4175  0296                     	;# 
  4176  0297                     	;# 
  4177  0298                     	;# 
  4178  029F                     	;# 
  4179  030C                     	;# 
  4180  030D                     	;# 
  4181  030E                     	;# 
  4182  0311                     	;# 
  4183  0311                     	;# 
  4184  0312                     	;# 
  4185  0313                     	;# 
  4186  0314                     	;# 
  4187  0315                     	;# 
  4188  0315                     	;# 
  4189  0316                     	;# 
  4190  0317                     	;# 
  4191  0318                     	;# 
  4192  038C                     	;# 
  4193  038D                     	;# 
  4194  038E                     	;# 
  4195  0391                     	;# 
  4196  0392                     	;# 
  4197  0393                     	;# 
  4198  0394                     	;# 
  4199  0395                     	;# 
  4200  0396                     	;# 
  4201  0397                     	;# 
  4202  0398                     	;# 
  4203  0399                     	;# 
  4204  039A                     	;# 
  4205  039C                     	;# 
  4206  039D                     	;# 
  4207  039E                     	;# 
  4208  039F                     	;# 
  4209  0411                     	;# 
  4210  0411                     	;# 
  4211  0412                     	;# 
  4212  0413                     	;# 
  4213  0414                     	;# 
  4214  0415                     	;# 
  4215  0416                     	;# 
  4216  0417                     	;# 
  4217  0418                     	;# 
  4218  0418                     	;# 
  4219  0419                     	;# 
  4220  041A                     	;# 
  4221  041B                     	;# 
  4222  041C                     	;# 
  4223  041D                     	;# 
  4224  041E                     	;# 
  4225  041F                     	;# 
  4226  0498                     	;# 
  4227  0498                     	;# 
  4228  0499                     	;# 
  4229  049A                     	;# 
  4230  049B                     	;# 
  4231  049B                     	;# 
  4232  049C                     	;# 
  4233  049D                     	;# 
  4234  049E                     	;# 
  4235  049F                     	;# 
  4236  0617                     	;# 
  4237  0618                     	;# 
  4238  0619                     	;# 
  4239  0619                     	;# 
  4240  061A                     	;# 
  4241  061B                     	;# 
  4242  061C                     	;# 
  4243  061C                     	;# 
  4244  061F                     	;# 
  4245  0691                     	;# 
  4246  0692                     	;# 
  4247  0693                     	;# 
  4248  0694                     	;# 
  4249  0695                     	;# 
  4250  0696                     	;# 
  4251  0697                     	;# 
  4252  0698                     	;# 
  4253  0699                     	;# 
  4254  0711                     	;# 
  4255  0712                     	;# 
  4256  0713                     	;# 
  4257  0714                     	;# 
  4258  0715                     	;# 
  4259  0716                     	;# 
  4260  0717                     	;# 
  4261  0718                     	;# 
  4262  0719                     	;# 
  4263  0891                     	;# 
  4264  0891                     	;# 
  4265  0891                     	;# 
  4266  0891                     	;# 
  4267  0891                     	;# 
  4268  0891                     	;# 
  4269  0892                     	;# 
  4270  0892                     	;# 
  4271  0892                     	;# 
  4272  0893                     	;# 
  4273  0893                     	;# 
  4274  0893                     	;# 
  4275  0893                     	;# 
  4276  0893                     	;# 
  4277  0893                     	;# 
  4278  0894                     	;# 
  4279  0894                     	;# 
  4280  0894                     	;# 
  4281  0895                     	;# 
  4282  0895                     	;# 
  4283  0895                     	;# 
  4284  0896                     	;# 
  4285  0896                     	;# 
  4286  0896                     	;# 
  4287  089B                     	;# 
  4288  0911                     	;# 
  4289  0912                     	;# 
  4290  0913                     	;# 
  4291  0914                     	;# 
  4292  0915                     	;# 
  4293  0916                     	;# 
  4294  0918                     	;# 
  4295  0919                     	;# 
  4296  091A                     	;# 
  4297  091B                     	;# 
  4298  091C                     	;# 
  4299  091D                     	;# 
  4300  091E                     	;# 
  4301  091F                     	;# 
  4302  0E0F                     	;# 
  4303  0E10                     	;# 
  4304  0E11                     	;# 
  4305  0E12                     	;# 
  4306  0E13                     	;# 
  4307  0E14                     	;# 
  4308  0E15                     	;# 
  4309  0E16                     	;# 
  4310  0E17                     	;# 
  4311  0E18                     	;# 
  4312  0E19                     	;# 
  4313  0E1A                     	;# 
  4314  0E1B                     	;# 
  4315  0E1C                     	;# 
  4316  0E1D                     	;# 
  4317  0E1E                     	;# 
  4318  0E1F                     	;# 
  4319  0E20                     	;# 
  4320  0E21                     	;# 
  4321  0E22                     	;# 
  4322  0E24                     	;# 
  4323  0E25                     	;# 
  4324  0E28                     	;# 
  4325  0E29                     	;# 
  4326  0E2A                     	;# 
  4327  0E2B                     	;# 
  4328  0E2C                     	;# 
  4329  0E2D                     	;# 
  4330  0E2E                     	;# 
  4331  0E2F                     	;# 
  4332  0E90                     	;# 
  4333  0E91                     	;# 
  4334  0E92                     	;# 
  4335  0E94                     	;# 
  4336  0E95                     	;# 
  4337  0E9C                     	;# 
  4338  0E9D                     	;# 
  4339  0E9E                     	;# 
  4340  0E9F                     	;# 
  4341  0EA0                     	;# 
  4342  0EA1                     	;# 
  4343  0EA2                     	;# 
  4344  0EA3                     	;# 
  4345  0EA4                     	;# 
  4346  0EA5                     	;# 
  4347  0EA6                     	;# 
  4348  0EA7                     	;# 
  4349  0F0F                     	;# 
  4350  0F10                     	;# 
  4351  0F11                     	;# 
  4352  0F12                     	;# 
  4353  0F13                     	;# 
  4354  0F14                     	;# 
  4355  0F15                     	;# 
  4356  0F16                     	;# 
  4357  0F17                     	;# 
  4358  0F18                     	;# 
  4359  0F19                     	;# 
  4360  0F1A                     	;# 
  4361  0F1B                     	;# 
  4362  0F1C                     	;# 
  4363  0F1D                     	;# 
  4364  0F1E                     	;# 
  4365  0F1F                     	;# 
  4366  0F20                     	;# 
  4367  0F21                     	;# 
  4368  0F22                     	;# 
  4369  0F23                     	;# 
  4370  0F24                     	;# 
  4371  0F25                     	;# 
  4372  0F26                     	;# 
  4373  0F27                     	;# 
  4374  0F28                     	;# 
  4375  0F29                     	;# 
  4376  0F2A                     	;# 
  4377  0F2B                     	;# 
  4378  0F2C                     	;# 
  4379  0F2D                     	;# 
  4380  0F2E                     	;# 
  4381  0F2F                     	;# 
  4382  0F30                     	;# 
  4383  0F31                     	;# 
  4384  0F32                     	;# 
  4385  0F33                     	;# 
  4386  0F34                     	;# 
  4387  0F35                     	;# 
  4388  0F36                     	;# 
  4389  0F37                     	;# 
  4390  0FE4                     	;# 
  4391  0FE5                     	;# 
  4392  0FE6                     	;# 
  4393  0FE7                     	;# 
  4394  0FE8                     	;# 
  4395  0FE9                     	;# 
  4396  0FEA                     	;# 
  4397  0FEB                     	;# 
  4398  0FED                     	;# 
  4399  0FEE                     	;# 
  4400  0FEF                     	;# 
  4401  0000                     	;# 
  4402  0001                     	;# 
  4403  0002                     	;# 
  4404  0003                     	;# 
  4405  0004                     	;# 
  4406  0005                     	;# 
  4407  0006                     	;# 
  4408  0007                     	;# 
  4409  0008                     	;# 
  4410  0009                     	;# 
  4411  000A                     	;# 
  4412  000B                     	;# 
  4413  000C                     	;# 
  4414  000D                     	;# 
  4415  000E                     	;# 
  4416  0010                     	;# 
  4417  0011                     	;# 
  4418  0012                     	;# 
  4419  0013                     	;# 
  4420  0014                     	;# 
  4421  0015                     	;# 
  4422  0015                     	;# 
  4423  0016                     	;# 
  4424  0016                     	;# 
  4425  0017                     	;# 
  4426  0018                     	;# 
  4427  0019                     	;# 
  4428  0019                     	;# 
  4429  001A                     	;# 
  4430  001B                     	;# 
  4431  001C                     	;# 
  4432  001D                     	;# 
  4433  001E                     	;# 
  4434  001F                     	;# 
  4435  008C                     	;# 
  4436  008D                     	;# 
  4437  008E                     	;# 
  4438  0090                     	;# 
  4439  0091                     	;# 
  4440  0092                     	;# 
  4441  0093                     	;# 
  4442  0094                     	;# 
  4443  0097                     	;# 
  4444  009B                     	;# 
  4445  009B                     	;# 
  4446  009C                     	;# 
  4447  009D                     	;# 
  4448  009E                     	;# 
  4449  009F                     	;# 
  4450  010C                     	;# 
  4451  010D                     	;# 
  4452  010E                     	;# 
  4453  0111                     	;# 
  4454  0112                     	;# 
  4455  0113                     	;# 
  4456  0114                     	;# 
  4457  0115                     	;# 
  4458  0116                     	;# 
  4459  0117                     	;# 
  4460  0118                     	;# 
  4461  0119                     	;# 
  4462  018C                     	;# 
  4463  018D                     	;# 
  4464  018E                     	;# 
  4465  0197                     	;# 
  4466  0199                     	;# 
  4467  0199                     	;# 
  4468  0199                     	;# 
  4469  019A                     	;# 
  4470  019A                     	;# 
  4471  019A                     	;# 
  4472  019B                     	;# 
  4473  019B                     	;# 
  4474  019B                     	;# 
  4475  019B                     	;# 
  4476  019B                     	;# 
  4477  019C                     	;# 
  4478  019C                     	;# 
  4479  019C                     	;# 
  4480  019D                     	;# 
  4481  019D                     	;# 
  4482  019D                     	;# 
  4483  019E                     	;# 
  4484  019E                     	;# 
  4485  019E                     	;# 
  4486  019F                     	;# 
  4487  019F                     	;# 
  4488  019F                     	;# 
  4489  019F                     	;# 
  4490  019F                     	;# 
  4491  020C                     	;# 
  4492  020D                     	;# 
  4493  020E                     	;# 
  4494  0211                     	;# 
  4495  0211                     	;# 
  4496  0212                     	;# 
  4497  0212                     	;# 
  4498  0213                     	;# 
  4499  0213                     	;# 
  4500  0214                     	;# 
  4501  0214                     	;# 
  4502  0215                     	;# 
  4503  0215                     	;# 
  4504  0215                     	;# 
  4505  0215                     	;# 
  4506  0216                     	;# 
  4507  0216                     	;# 
  4508  0217                     	;# 
  4509  0217                     	;# 
  4510  0219                     	;# 
  4511  021A                     	;# 
  4512  021B                     	;# 
  4513  021C                     	;# 
  4514  021D                     	;# 
  4515  021D                     	;# 
  4516  021E                     	;# 
  4517  021F                     	;# 
  4518  028C                     	;# 
  4519  028D                     	;# 
  4520  028E                     	;# 
  4521  0291                     	;# 
  4522  0291                     	;# 
  4523  0292                     	;# 
  4524  0293                     	;# 
  4525  0294                     	;# 
  4526  0295                     	;# 
  4527  0295                     	;# 
  4528  0296                     	;# 
  4529  0297                     	;# 
  4530  0298                     	;# 
  4531  029F                     	;# 
  4532  030C                     	;# 
  4533  030D                     	;# 
  4534  030E                     	;# 
  4535  0311                     	;# 
  4536  0311                     	;# 
  4537  0312                     	;# 
  4538  0313                     	;# 
  4539  0314                     	;# 
  4540  0315                     	;# 
  4541  0315                     	;# 
  4542  0316                     	;# 
  4543  0317                     	;# 
  4544  0318                     	;# 
  4545  038C                     	;# 
  4546  038D                     	;# 
  4547  038E                     	;# 
  4548  0391                     	;# 
  4549  0392                     	;# 
  4550  0393                     	;# 
  4551  0394                     	;# 
  4552  0395                     	;# 
  4553  0396                     	;# 
  4554  0397                     	;# 
  4555  0398                     	;# 
  4556  0399                     	;# 
  4557  039A                     	;# 
  4558  039C                     	;# 
  4559  039D                     	;# 
  4560  039E                     	;# 
  4561  039F                     	;# 
  4562  0411                     	;# 
  4563  0411                     	;# 
  4564  0412                     	;# 
  4565  0413                     	;# 
  4566  0414                     	;# 
  4567  0415                     	;# 
  4568  0416                     	;# 
  4569  0417                     	;# 
  4570  0418                     	;# 
  4571  0418                     	;# 
  4572  0419                     	;# 
  4573  041A                     	;# 
  4574  041B                     	;# 
  4575  041C                     	;# 
  4576  041D                     	;# 
  4577  041E                     	;# 
  4578  041F                     	;# 
  4579  0498                     	;# 
  4580  0498                     	;# 
  4581  0499                     	;# 
  4582  049A                     	;# 
  4583  049B                     	;# 
  4584  049B                     	;# 
  4585  049C                     	;# 
  4586  049D                     	;# 
  4587  049E                     	;# 
  4588  049F                     	;# 
  4589  0617                     	;# 
  4590  0618                     	;# 
  4591  0619                     	;# 
  4592  0619                     	;# 
  4593  061A                     	;# 
  4594  061B                     	;# 
  4595  061C                     	;# 
  4596  061C                     	;# 
  4597  061F                     	;# 
  4598  0691                     	;# 
  4599  0692                     	;# 
  4600  0693                     	;# 
  4601  0694                     	;# 
  4602  0695                     	;# 
  4603  0696                     	;# 
  4604  0697                     	;# 
  4605  0698                     	;# 
  4606  0699                     	;# 
  4607  0711                     	;# 
  4608  0712                     	;# 
  4609  0713                     	;# 
  4610  0714                     	;# 
  4611  0715                     	;# 
  4612  0716                     	;# 
  4613  0717                     	;# 
  4614  0718                     	;# 
  4615  0719                     	;# 
  4616  0891                     	;# 
  4617  0891                     	;# 
  4618  0891                     	;# 
  4619  0891                     	;# 
  4620  0891                     	;# 
  4621  0891                     	;# 
  4622  0892                     	;# 
  4623  0892                     	;# 
  4624  0892                     	;# 
  4625  0893                     	;# 
  4626  0893                     	;# 
  4627  0893                     	;# 
  4628  0893                     	;# 
  4629  0893                     	;# 
  4630  0893                     	;# 
  4631  0894                     	;# 
  4632  0894                     	;# 
  4633  0894                     	;# 
  4634  0895                     	;# 
  4635  0895                     	;# 
  4636  0895                     	;# 
  4637  0896                     	;# 
  4638  0896                     	;# 
  4639  0896                     	;# 
  4640  089B                     	;# 
  4641  0911                     	;# 
  4642  0912                     	;# 
  4643  0913                     	;# 
  4644  0914                     	;# 
  4645  0915                     	;# 
  4646  0916                     	;# 
  4647  0918                     	;# 
  4648  0919                     	;# 
  4649  091A                     	;# 
  4650  091B                     	;# 
  4651  091C                     	;# 
  4652  091D                     	;# 
  4653  091E                     	;# 
  4654  091F                     	;# 
  4655  0E0F                     	;# 
  4656  0E10                     	;# 
  4657  0E11                     	;# 
  4658  0E12                     	;# 
  4659  0E13                     	;# 
  4660  0E14                     	;# 
  4661  0E15                     	;# 
  4662  0E16                     	;# 
  4663  0E17                     	;# 
  4664  0E18                     	;# 
  4665  0E19                     	;# 
  4666  0E1A                     	;# 
  4667  0E1B                     	;# 
  4668  0E1C                     	;# 
  4669  0E1D                     	;# 
  4670  0E1E                     	;# 
  4671  0E1F                     	;# 
  4672  0E20                     	;# 
  4673  0E21                     	;# 
  4674  0E22                     	;# 
  4675  0E24                     	;# 
  4676  0E25                     	;# 
  4677  0E28                     	;# 
  4678  0E29                     	;# 
  4679  0E2A                     	;# 
  4680  0E2B                     	;# 
  4681  0E2C                     	;# 
  4682  0E2D                     	;# 
  4683  0E2E                     	;# 
  4684  0E2F                     	;# 
  4685  0E90                     	;# 
  4686  0E91                     	;# 
  4687  0E92                     	;# 
  4688  0E94                     	;# 
  4689  0E95                     	;# 
  4690  0E9C                     	;# 
  4691  0E9D                     	;# 
  4692  0E9E                     	;# 
  4693  0E9F                     	;# 
  4694  0EA0                     	;# 
  4695  0EA1                     	;# 
  4696  0EA2                     	;# 
  4697  0EA3                     	;# 
  4698  0EA4                     	;# 
  4699  0EA5                     	;# 
  4700  0EA6                     	;# 
  4701  0EA7                     	;# 
  4702  0F0F                     	;# 
  4703  0F10                     	;# 
  4704  0F11                     	;# 
  4705  0F12                     	;# 
  4706  0F13                     	;# 
  4707  0F14                     	;# 
  4708  0F15                     	;# 
  4709  0F16                     	;# 
  4710  0F17                     	;# 
  4711  0F18                     	;# 
  4712  0F19                     	;# 
  4713  0F1A                     	;# 
  4714  0F1B                     	;# 
  4715  0F1C                     	;# 
  4716  0F1D                     	;# 
  4717  0F1E                     	;# 
  4718  0F1F                     	;# 
  4719  0F20                     	;# 
  4720  0F21                     	;# 
  4721  0F22                     	;# 
  4722  0F23                     	;# 
  4723  0F24                     	;# 
  4724  0F25                     	;# 
  4725  0F26                     	;# 
  4726  0F27                     	;# 
  4727  0F28                     	;# 
  4728  0F29                     	;# 
  4729  0F2A                     	;# 
  4730  0F2B                     	;# 
  4731  0F2C                     	;# 
  4732  0F2D                     	;# 
  4733  0F2E                     	;# 
  4734  0F2F                     	;# 
  4735  0F30                     	;# 
  4736  0F31                     	;# 
  4737  0F32                     	;# 
  4738  0F33                     	;# 
  4739  0F34                     	;# 
  4740  0F35                     	;# 
  4741  0F36                     	;# 
  4742  0F37                     	;# 
  4743  0FE4                     	;# 
  4744  0FE5                     	;# 
  4745  0FE6                     	;# 
  4746  0FE7                     	;# 
  4747  0FE8                     	;# 
  4748  0FE9                     	;# 
  4749  0FEA                     	;# 
  4750  0FEB                     	;# 
  4751  0FED                     	;# 
  4752  0FEE                     	;# 
  4753  0FEF                     	;# 
  4754                           
  4755                           	psect	idataBANK0
  4756  07FF                     __pidataBANK0:	
  4757                           
  4758                           ;initializer for _start
  4759  07FF  3401               	retlw	1
  4760                           
  4761                           	psect	idataBANK2
  4762  0909                     __pidataBANK2:	
  4763                           
  4764                           ;initializer for _names
  4765  0909  343D               	retlw	low (STR_1| (0+32768))
  4766  090A  3490               	retlw	high (STR_1| (0+32768))
  4767  090B  3430               	retlw	low (STR_2| (0+32768))
  4768  090C  3490               	retlw	high (STR_2| (0+32768))
  4769  090D  3420               	retlw	low (STR_3| (0+32768))
  4770  090E  3490               	retlw	high (STR_3| (0+32768))
  4771  090F  3449               	retlw	low (STR_4| (0+32768))
  4772  0910  3490               	retlw	high (STR_4| (0+32768))
  4773                           
  4774                           	psect	stringtext1
  4775  1000                     __pstringtext1:	
  4776  1000                     _fsmStateTable:	
  4777  1000  3499               	retlw	low _do_I2C_IDLE
  4778  1001  3408               	retlw	high _do_I2C_IDLE
  4779  1002  34E1               	retlw	low _do_I2C_SEND_ADR_READ
  4780  1003  3408               	retlw	high _do_I2C_SEND_ADR_READ
  4781  1004  34BD               	retlw	low _do_I2C_SEND_ADR_WRITE
  4782  1005  3408               	retlw	high _do_I2C_SEND_ADR_WRITE
  4783  1006  3452               	retlw	low _do_I2C_TX
  4784  1007  340E               	retlw	high _do_I2C_TX
  4785  1008  34C2               	retlw	low _do_I2C_RX
  4786  1009  340D               	retlw	high _do_I2C_RX
  4787  100A  349E               	retlw	low _do_I2C_RCEN
  4788  100B  3408               	retlw	high _do_I2C_RCEN
  4789  100C  3442               	retlw	low _do_I2C_TX_EMPTY
  4790  100D  340C               	retlw	high _do_I2C_TX_EMPTY
  4791  100E  3470               	retlw	low _do_I2C_SEND_RESTART_READ
  4792  100F  3408               	retlw	high _do_I2C_SEND_RESTART_READ
  4793  1010  3474               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4794  1011  3408               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4795  1012  3478               	retlw	low _do_I2C_SEND_RESTART
  4796  1013  3408               	retlw	high _do_I2C_SEND_RESTART
  4797  1014  347C               	retlw	low _do_I2C_SEND_STOP
  4798  1015  3408               	retlw	high _do_I2C_SEND_STOP
  4799  1016  3480               	retlw	low _do_I2C_DO_ACK
  4800  1017  3408               	retlw	high _do_I2C_DO_ACK
  4801  1018  3484               	retlw	low _do_I2C_DO_NACK_STOP
  4802  1019  3408               	retlw	high _do_I2C_DO_NACK_STOP
  4803  101A  3488               	retlw	low _do_I2C_DO_NACK_RESTART
  4804  101B  3408               	retlw	high _do_I2C_DO_NACK_RESTART
  4805  101C  34B6               	retlw	low _do_I2C_RESET
  4806  101D  3408               	retlw	high _do_I2C_RESET
  4807  101E  34EC               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4808  101F  340B               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4809  1020                     __end_of_fsmStateTable:	
  4810  000E                     _PORTCbits	set	14
  4811  001F                     _T2CONbits	set	31
  4812  001F                     _T2CON	set	31
  4813  001D                     _TMR2	set	29
  4814  001E                     _PR2	set	30
  4815  0011                     _PIR1bits	set	17
  4816  000B                     _INTCONbits	set	11
  4817  0010                     _PIR0bits	set	16
  4818  009D                     _ADCON0bits	set	157
  4819  009C                     _ADRESH	set	156
  4820  009B                     _ADRESL	set	155
  4821  009F                     _ADACT	set	159
  4822  009E                     _ADCON1	set	158
  4823  009D                     _ADCON0	set	157
  4824  008E                     _TRISC	set	142
  4825  008D                     _TRISB	set	141
  4826  008C                     _TRISA	set	140
  4827  0097                     _WDTCON	set	151
  4828  0091                     _PIE1bits	set	145
  4829  0090                     _PIE0bits	set	144
  4830  010E                     _LATCbits	set	270
  4831  010E                     _LATC	set	270
  4832  010D                     _LATB	set	269
  4833  010C                     _LATA	set	268
  4834  018C                     _ANSELA	set	396
  4835  018D                     _ANSELB	set	397
  4836  018E                     _ANSELC	set	398
  4837  021C                     _SSP2STATbits	set	540
  4838  0219                     _SSP2BUF	set	537
  4839  021D                     _SSP2CON1bits	set	541
  4840  021A                     _SSP2ADD	set	538
  4841  021D                     _SSP2CON1	set	541
  4842  021C                     _SSP2STAT	set	540
  4843  0214                     _SSP1STATbits	set	532
  4844  0213                     _SSP1MSK	set	531
  4845  0211                     _SSP1BUF	set	529
  4846  0216                     _SSP1CON2bits	set	534
  4847  0212                     _SSP1ADD	set	530
  4848  0216                     _SSP1CON2	set	534
  4849  0215                     _SSP1CON1	set	533
  4850  0214                     _SSP1STAT	set	532
  4851  0215                     _SSP1CON1bits	set	533
  4852  020E                     _WPUC	set	526
  4853  020C                     _WPUA	set	524
  4854  020D                     _WPUB	set	525
  4855  0293                     _CCP1CONbits	set	659
  4856  029F                     _CCPTMRSbits	set	671
  4857  0291                     _CCPR1L	set	657
  4858  0292                     _CCPR1H	set	658
  4859  0293                     _CCP1CON	set	659
  4860  028E                     _ODCONC	set	654
  4861  028D                     _ODCONB	set	653
  4862  028C                     _ODCONA	set	652
  4863  030E                     _SLRCONC	set	782
  4864  030D                     _SLRCONB	set	781
  4865  030C                     _SLRCONA	set	780
  4866  0916                     _PMD5	set	2326
  4867  0915                     _PMD4	set	2325
  4868  0914                     _PMD3	set	2324
  4869  0913                     _PMD2	set	2323
  4870  0912                     _PMD1	set	2322
  4871  0911                     _PMD0	set	2321
  4872  091E                     _OSCTUNE	set	2334
  4873  091F                     _OSCFRQ	set	2335
  4874  091D                     _OSCEN	set	2333
  4875  091B                     _OSCCON3	set	2331
  4876  0919                     _OSCCON1	set	2329
  4877  0E1D                     _SSP2CLKPPS	set	3613
  4878  0E21                     _SSP1DATPPS	set	3617
  4879  0E20                     _SSP1CLKPPS	set	3616
  4880  0E1E                     _SSP2DATPPS	set	3614
  4881  0EA6                     _RC6PPS	set	3750
  4882  0EA2                     _RC2PPS	set	3746
  4883  0E9D                     _RB5PPS	set	3741
  4884  0E9F                     _RB7PPS	set	3743
  4885  0E9E                     _RB6PPS	set	3742
  4886  1020                     STR_3:	
  4887  1020  3441               	retlw	65	;'A'
  4888  1021  346C               	retlw	108	;'l'
  4889  1022  3465               	retlw	101	;'e'
  4890  1023  3478               	retlw	120	;'x'
  4891  1024  3461               	retlw	97	;'a'
  4892  1025  346E               	retlw	110	;'n'
  4893  1026  3464               	retlw	100	;'d'
  4894  1027  3472               	retlw	114	;'r'
  4895  1028  3461               	retlw	97	;'a'
  4896  1029  3420               	retlw	32	;' '
  4897  102A  3446               	retlw	70	;'F'
  4898  102B  3479               	retlw	121	;'y'
  4899  102C  3466               	retlw	102	;'f'
  4900  102D  3466               	retlw	102	;'f'
  4901  102E  3465               	retlw	101	;'e'
  4902  102F  3400               	retlw	0
  4903                           
  4904                           	psect	stringtext2
  4905  1030                     __pstringtext2:	
  4906  1030                     STR_2:	
  4907  1030  344E               	retlw	78	;'N'
  4908  1031  346F               	retlw	111	;'o'
  4909  1032  3465               	retlw	101	;'e'
  4910  1033  346C               	retlw	108	;'l'
  4911  1034  346C               	retlw	108	;'l'
  4912  1035  3465               	retlw	101	;'e'
  4913  1036  3420               	retlw	32	;' '
  4914  1037  3443               	retlw	67	;'C'
  4915  1038  3472               	retlw	114	;'r'
  4916  1039  3461               	retlw	97	;'a'
  4917  103A  346E               	retlw	110	;'n'
  4918  103B  3465               	retlw	101	;'e'
  4919  103C  3400               	retlw	0
  4920                           
  4921                           	psect	stringtext3
  4922  103D                     __pstringtext3:	
  4923  103D                     STR_1:	
  4924  103D  344A               	retlw	74	;'J'
  4925  103E  3475               	retlw	117	;'u'
  4926  103F  3473               	retlw	115	;'s'
  4927  1040  3474               	retlw	116	;'t'
  4928  1041  3469               	retlw	105	;'i'
  4929  1042  346E               	retlw	110	;'n'
  4930  1043  3420               	retlw	32	;' '
  4931  1044  3443               	retlw	67	;'C'
  4932  1045  3468               	retlw	104	;'h'
  4933  1046  3461               	retlw	97	;'a'
  4934  1047  346E               	retlw	110	;'n'
  4935  1048  3400               	retlw	0
  4936                           
  4937                           	psect	stringtext4
  4938  1049                     __pstringtext4:	
  4939  1049                     STR_4:	
  4940  1049  344A               	retlw	74	;'J'
  4941  104A  3465               	retlw	101	;'e'
  4942  104B  3466               	retlw	102	;'f'
  4943  104C  3466               	retlw	102	;'f'
  4944  104D  3420               	retlw	32	;' '
  4945  104E  3447               	retlw	71	;'G'
  4946  104F  3465               	retlw	101	;'e'
  4947  1050  3469               	retlw	105	;'i'
  4948  1051  3473               	retlw	115	;'s'
  4949  1052  3473               	retlw	115	;'s'
  4950  1053  3400               	retlw	0
  4951                           
  4952                           	psect	stringtext5
  4953  1054                     __pstringtext5:	
  4954  1054                     STR_6:	
  4955  1054  3474               	retlw	116	;'t'
  4956  1055  346F               	retlw	111	;'o'
  4957  1056  3467               	retlw	103	;'g'
  4958  1057  3467               	retlw	103	;'g'
  4959  1058  346C               	retlw	108	;'l'
  4960  1059  3465               	retlw	101	;'e'
  4961  105A  3400               	retlw	0
  4962                           
  4963                           	psect	stringtext6
  4964  105B                     __pstringtext6:	
  4965  105B                     STR_8:	
  4966  105B  3464               	retlw	100	;'d'
  4967  105C  346F               	retlw	111	;'o'
  4968  105D  3477               	retlw	119	;'w'
  4969  105E  346E               	retlw	110	;'n'
  4970  105F  3400               	retlw	0
  4971                           
  4972                           	psect	stringtext7
  4973  1060                     __pstringtext7:	
  4974  1060                     STR_5:	
  4975  1060  346F               	retlw	111	;'o'
  4976  1061  346E               	retlw	110	;'n'
  4977  1062  3400               	retlw	0
  4978                           
  4979                           	psect	stringtext8
  4980  1063                     __pstringtext8:	
  4981  1063                     STR_7:	
  4982  1063  3475               	retlw	117	;'u'
  4983  1064  3470               	retlw	112	;'p'
  4984  1065  3400               	retlw	0
  4985                           
  4986                           	psect	stringtext9
  4987  0000                     __pstringtext9:	
  4988                           
  4989                           ; #config settings
  4990  0000                     
  4991                           	psect	cinit
  4992  002D                     start_initialization:	
  4993  002D                     __initialization:	
  4994                           
  4995                           ; Initialize objects allocated to BANK0
  4996  002D  3187  27FF  3180   	fcall	__pidataBANK0	;fetch initializer
  4997  0030  00EE               	movwf	__pdataBANK0& (0+127)
  4998                           
  4999                           ; Initialize objects allocated to BANK2
  5000  0031  3009               	movlw	low __pidataBANK2
  5001  0032  0084               	movwf	4
  5002  0033  3089               	movlw	(high __pidataBANK2)| (0+128)
  5003  0034  0085               	movwf	5
  5004  0035  3060               	movlw	low __pdataBANK2
  5005  0036  0086               	movwf	6
  5006  0037  3001               	movlw	high __pdataBANK2
  5007  0038  0087               	movwf	7
  5008  0039  3008               	movlw	8
  5009  003A  3188  20B0  3180   	fcall	init_ram
  5010                           
  5011                           ; Clear objects allocated to COMMON
  5012  003D  01F0               	clrf	__pbssCOMMON& (0+127)
  5013  003E  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5014  003F  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5015  0040  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5016  0041  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5017  0042  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5018                           
  5019                           ; Clear objects allocated to BANK0
  5020  0043  305C               	movlw	low __pbssBANK0
  5021  0044  0084               	movwf	4
  5022  0045  3000               	movlw	high __pbssBANK0
  5023  0046  0085               	movwf	5
  5024  0047  3012               	movlw	18
  5025  0048  3188  20AA  3180   	fcall	clear_ram0
  5026                           
  5027                           ; Clear objects allocated to BANK1
  5028  004B  0021               	movlb	1	; select bank1
  5029  004C  01E0               	clrf	__pbssBANK1& (0+127)
  5030  004D  01E1               	clrf	(__pbssBANK1+1)& (0+127)
  5031  004E  01E2               	clrf	(__pbssBANK1+2)& (0+127)
  5032  004F  01E3               	clrf	(__pbssBANK1+3)& (0+127)
  5033                           
  5034                           ; Clear objects allocated to BANK2
  5035  0050  0022               	movlb	2	; select bank2
  5036  0051  01E8               	clrf	__pbssBANK2& (0+127)
  5037  0052  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5038                           
  5039                           ; Clear objects allocated to BANK3
  5040  0053  30A0               	movlw	low __pbssBANK3
  5041  0054  0084               	movwf	4
  5042  0055  3001               	movlw	high __pbssBANK3
  5043  0056  0085               	movwf	5
  5044  0057  301D               	movlw	29
  5045  0058  3188  20AA  3180   	fcall	clear_ram0
  5046                           
  5047                           ; Clear objects allocated to BANK4
  5048  005B  3020               	movlw	low __pbssBANK4
  5049  005C  0084               	movwf	4
  5050  005D  3002               	movlw	high __pbssBANK4
  5051  005E  0085               	movwf	5
  5052  005F  3044               	movlw	68
  5053  0060  3188  20AA         	fcall	clear_ram0
  5054  0062                     end_of_initialization:	
  5055                           ;End of C runtime variable initialization code
  5056                           
  5057  0062                     __end_of__initialization:	
  5058  0062  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5059  0063  0020               	movlb	0
  5060  0064  318D  2D80         	ljmp	_main	;jump to C main() function
  5061                           
  5062                           	psect	bssCOMMON
  5063  0070                     __pbssCOMMON:	
  5064  0070                     _i2c1_driver_i2cISR:	
  5065  0070                     	ds	2
  5066  0072                     _i2c1_driver_busCollisionISR:	
  5067  0072                     	ds	2
  5068  0074                     _b_i2c_error_flag:	
  5069  0074                     	ds	1
  5070  0075                     _handleGestureFlag:	
  5071  0075                     	ds	1
  5072                           
  5073                           	psect	bssBANK0
  5074  005C                     __pbssBANK0:	
  5075  005C                     _on:	
  5076  005C                     	ds	2
  5077  005E                     _name:	
  5078  005E                     	ds	2
  5079  0060                     _gesture_state_:	
  5080  0060                     	ds	2
  5081  0062                     _gesture_near_count_:	
  5082  0062                     	ds	2
  5083  0064                     _gesture_lr_count_:	
  5084  0064                     	ds	2
  5085  0066                     _gesture_ud_count_:	
  5086  0066                     	ds	2
  5087  0068                     _gesture_lr_delta_:	
  5088  0068                     	ds	2
  5089  006A                     _gesture_ud_delta_:	
  5090  006A                     	ds	2
  5091  006C                     _adcResult:	
  5092  006C                     	ds	1
  5093  006D                     _printed:	
  5094  006D                     	ds	1
  5095                           
  5096                           	psect	dataBANK0
  5097  006E                     __pdataBANK0:	
  5098  006E                     _start:	
  5099  006E                     	ds	1
  5100                           
  5101                           	psect	bssBANK1
  5102  00E0                     __pbssBANK1:	
  5103  00E0                     _adcResult2:	
  5104  00E0                     	ds	2
  5105  00E2                     _gesture_far_count_:	
  5106  00E2                     	ds	2
  5107                           
  5108                           	psect	bssBANK2
  5109  0168                     __pbssBANK2:	
  5110  0168                     _gesture_motion_:	
  5111  0168                     	ds	2
  5112                           
  5113                           	psect	dataBANK2
  5114  0160                     __pdataBANK2:	
  5115  0160                     _names:	
  5116  0160                     	ds	8
  5117                           
  5118                           	psect	bssBANK3
  5119  01A0                     __pbssBANK3:	
  5120  01A0                     _i2c_status:	
  5121  01A0                     	ds	29
  5122                           
  5123                           	psect	bssBANK4
  5124  0220                     __pbssBANK4:	
  5125  0220                     _gesture_data_:	
  5126  0220                     	ds	68
  5127                           
  5128                           	psect	inittext
  5129  08B0                     init_ram:	
  5130  08B0  00FE               	movwf	126
  5131  08B1                     initloop:	
  5132  08B1  0012               	moviw fsr0++
  5133  08B2  001E               	movwi fsr1++
  5134  08B3  0BFE               	decfsz	126,f
  5135  08B4  28B1               	goto	initloop
  5136  08B5  3400               	retlw	0
  5137                           
  5138                           	psect	clrtext
  5139  08AA                     clear_ram0:	
  5140                           ;	Called with FSR0 containing the base address, and
  5141                           ;	WREG with the size to clear
  5142                           
  5143  08AA  0064               	clrwdt	;clear the watchdog before getting into this loop
  5144  08AB                     clrloop0:	
  5145  08AB  0180               	clrf	0	;clear RAM location pointed to by FSR
  5146  08AC  3101               	addfsr 0,1
  5147  08AD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5148  08AE  28AB               	goto	clrloop0	;have we reached the end yet?
  5149  08AF  3400               	retlw	0	;all done for this memory range, return
  5150                           
  5151                           	psect	cstackBANK2
  5152  0120                     __pcstackBANK2:	
  5153  0120                     readGesture@fifo_data:	
  5154                           
  5155                           ; 64 bytes @ 0x0
  5156  0120                     	ds	64
  5157                           
  5158                           	psect	cstackBANK1
  5159  00A0                     __pcstackBANK1:	
  5160  00A0                     readGesture@fifo_data2:	
  5161                           
  5162                           ; 64 bytes @ 0x0
  5163  00A0                     	ds	64
  5164                           
  5165                           	psect	cstackCOMMON
  5166  0076                     __pcstackCOMMON:	
  5167  0076                     ?_i2c1_driver_open:	
  5168  0076                     ?_i2c1_driver_isNACK:	
  5169                           ; 1 bit 
  5170                           
  5171  0076                     ?_i2c1_driver_isBufferFull:	
  5172                           ; 1 bit 
  5173                           
  5174  0076                     ?_returnStop:	
  5175                           ; 1 bit 
  5176                           
  5177  0076                     ?_returnReset:	
  5178                           ; 1 bytes @ 0x0
  5179                           
  5180  0076                     ?_mssp1_clearIRQ:	
  5181                           ; 1 bytes @ 0x0
  5182                           
  5183  0076                     ??_mssp1_clearIRQ:	
  5184                           ; 1 bytes @ 0x0
  5185                           
  5186  0076                     ?_i2c_busCollisionISR:	
  5187                           ; 1 bytes @ 0x0
  5188                           
  5189  0076                     ??_i2c_busCollisionISR:	
  5190                           ; 1 bytes @ 0x0
  5191                           
  5192  0076                     ?_i2c_ISR:	
  5193                           ; 1 bytes @ 0x0
  5194                           
  5195  0076                     ?_i2c1_driver_start:	
  5196                           ; 1 bytes @ 0x0
  5197                           
  5198  0076                     ?_i2c1_driver_resetBus:	
  5199                           ; 1 bytes @ 0x0
  5200                           
  5201  0076                     ??_i2c1_driver_resetBus:	
  5202                           ; 1 bytes @ 0x0
  5203                           
  5204  0076                     ?_i2c1_driver_restart:	
  5205                           ; 1 bytes @ 0x0
  5206                           
  5207  0076                     ?_i2c1_driver_stop:	
  5208                           ; 1 bytes @ 0x0
  5209                           
  5210  0076                     ?_i2c1_driver_TXData:	
  5211                           ; 1 bytes @ 0x0
  5212                           
  5213  0076                     ?_i2c1_driver_startRX:	
  5214                           ; 1 bytes @ 0x0
  5215                           
  5216  0076                     ?_i2c1_driver_sendACK:	
  5217                           ; 1 bytes @ 0x0
  5218                           
  5219  0076                     ??_i2c1_driver_sendACK:	
  5220                           ; 1 bytes @ 0x0
  5221                           
  5222  0076                     ?_i2c1_driver_sendNACK:	
  5223                           ; 1 bytes @ 0x0
  5224                           
  5225  0076                     ??_i2c1_driver_isNACK:	
  5226                           ; 1 bytes @ 0x0
  5227                           
  5228  0076                     ?_i2c1_driver_getRXData:	
  5229                           ; 1 bytes @ 0x0
  5230                           
  5231  0076                     ?_mssp1_setIRQ:	
  5232                           ; 1 bytes @ 0x0
  5233                           
  5234  0076                     ??_mssp1_setIRQ:	
  5235                           ; 1 bytes @ 0x0
  5236                           
  5237  0076                     ?_i2c1_driver_clearBusCollision:	
  5238                           ; 1 bytes @ 0x0
  5239                           
  5240  0076                     ??_i2c1_driver_clearBusCollision:	
  5241                           ; 1 bytes @ 0x0
  5242                           
  5243  0076                     ?_PIN_MANAGER_IOC:	
  5244                           ; 1 bytes @ 0x0
  5245                           
  5246  0076                     ??_PIN_MANAGER_IOC:	
  5247                           ; 1 bytes @ 0x0
  5248                           
  5249  0076                     ?_PMD_Initialize:	
  5250                           ; 1 bytes @ 0x0
  5251                           
  5252  0076                     ?_PIN_MANAGER_Initialize:	
  5253                           ; 1 bytes @ 0x0
  5254                           
  5255  0076                     ?_OSCILLATOR_Initialize:	
  5256                           ; 1 bytes @ 0x0
  5257                           
  5258  0076                     ?_WDT_Initialize:	
  5259                           ; 1 bytes @ 0x0
  5260                           
  5261  0076                     ?_SPI2_Initialize:	
  5262                           ; 1 bytes @ 0x0
  5263                           
  5264  0076                     ?_PWM1_Initialize:	
  5265                           ; 1 bytes @ 0x0
  5266                           
  5267  0076                     ?_ADC_Initialize:	
  5268                           ; 1 bytes @ 0x0
  5269                           
  5270  0076                     ?_TMR2_Initialize:	
  5271                           ; 1 bytes @ 0x0
  5272                           
  5273  0076                     ?_Display_Clear:	
  5274                           ; 1 bytes @ 0x0
  5275                           
  5276  0076                     ?_PIR_Sensor:	
  5277                           ; 1 bytes @ 0x0
  5278                           
  5279  0076                     ?_initialize:	
  5280                           ; 1 bytes @ 0x0
  5281                           
  5282  0076                     ?_enableGestureSensor:	
  5283                           ; 1 bytes @ 0x0
  5284                           
  5285  0076                     ?_On_Off:	
  5286                           ; 1 bytes @ 0x0
  5287                           
  5288  0076                     ?_Get_ADC:	
  5289                           ; 1 bytes @ 0x0
  5290                           
  5291  0076                     ?_isGestureAvailable:	
  5292                           ; 1 bytes @ 0x0
  5293                           
  5294  0076                     ?_handleGesture:	
  5295                           ; 1 bytes @ 0x0
  5296                           
  5297  0076                     ?_wireReadDataByte:	
  5298                           ; 1 bytes @ 0x0
  5299                           
  5300  0076                     ?_setLEDDrive:	
  5301                           ; 1 bytes @ 0x0
  5302                           
  5303  0076                     ?_setProximityGain:	
  5304                           ; 1 bytes @ 0x0
  5305                           
  5306  0076                     ?_setAmbientLightGain:	
  5307                           ; 1 bytes @ 0x0
  5308                           
  5309  0076                     ?_setProxIntLowThresh:	
  5310                           ; 1 bytes @ 0x0
  5311                           
  5312  0076                     ?_setProxIntHighThresh:	
  5313                           ; 1 bytes @ 0x0
  5314                           
  5315  0076                     ?_setGestureEnterThresh:	
  5316                           ; 1 bytes @ 0x0
  5317                           
  5318  0076                     ?_setGestureExitThresh:	
  5319                           ; 1 bytes @ 0x0
  5320                           
  5321  0076                     ?_setGestureGain:	
  5322                           ; 1 bytes @ 0x0
  5323                           
  5324  0076                     ?_setGestureLEDDrive:	
  5325                           ; 1 bytes @ 0x0
  5326                           
  5327  0076                     ?_setGestureWaitTime:	
  5328                           ; 1 bytes @ 0x0
  5329                           
  5330  0076                     ?_setGestureIntEnable:	
  5331                           ; 1 bytes @ 0x0
  5332                           
  5333  0076                     ?_getMode:	
  5334                           ; 1 bytes @ 0x0
  5335                           
  5336  0076                     ?_resetGestureParameters:	
  5337                           ; 1 bytes @ 0x0
  5338                           
  5339  0076                     ?_setLEDBoost:	
  5340                           ; 1 bytes @ 0x0
  5341                           
  5342  0076                     ?_setGestureMode:	
  5343                           ; 1 bytes @ 0x0
  5344                           
  5345  0076                     ?_enablePower:	
  5346                           ; 1 bytes @ 0x0
  5347                           
  5348  0076                     ?_processGestureData:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0076                     ?_decodeGesture:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0076                     ?_I2C_Start:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0076                     ?_I2C_Write_Byte:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0076                     ?_I2C_ReStart:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0076                     ?_I2C_Read_Byte:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0076                     ?_I2C_Send_NACK:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0076                     ?_I2C_Stop:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0076                     ?_do_I2C_RESET:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0076                     ??_do_I2C_RESET:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0076                     ?_do_I2C_IDLE:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0076                     ??_do_I2C_IDLE:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5385                           ; 1 bytes @ 0x0
  5386                           
  5387  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5388                           ; 1 bytes @ 0x0
  5389                           
  5390  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5391                           ; 1 bytes @ 0x0
  5392                           
  5393  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0076                     ?_do_I2C_SEND_RESTART:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0076                     ??_do_I2C_SEND_RESTART:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0076                     ?_do_I2C_SEND_STOP:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0076                     ??_do_I2C_SEND_STOP:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0076                     ?_do_I2C_SEND_ADR_READ:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0076                     ??_do_I2C_SEND_ADR_READ:	
  5412                           ; 1 bytes @ 0x0
  5413                           
  5414  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5415                           ; 1 bytes @ 0x0
  5416                           
  5417  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5418                           ; 1 bytes @ 0x0
  5419                           
  5420  0076                     ?_do_I2C_RCEN:	
  5421                           ; 1 bytes @ 0x0
  5422                           
  5423  0076                     ??_do_I2C_RCEN:	
  5424                           ; 1 bytes @ 0x0
  5425                           
  5426  0076                     ?_do_I2C_DO_ACK:	
  5427                           ; 1 bytes @ 0x0
  5428                           
  5429  0076                     ??_do_I2C_DO_ACK:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0076                     ?_do_I2C_DO_NACK_STOP:	
  5433                           ; 1 bytes @ 0x0
  5434                           
  5435  0076                     ??_do_I2C_DO_NACK_STOP:	
  5436                           ; 1 bytes @ 0x0
  5437                           
  5438  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5439                           ; 1 bytes @ 0x0
  5440                           
  5441  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5442                           ; 1 bytes @ 0x0
  5443                           
  5444  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5445                           ; 1 bytes @ 0x0
  5446                           
  5447  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5448                           ; 1 bytes @ 0x0
  5449                           
  5450  0076                     ?_do_I2C_TX:	
  5451                           ; 1 bytes @ 0x0
  5452                           
  5453  0076                     ??_do_I2C_TX:	
  5454                           ; 1 bytes @ 0x0
  5455                           
  5456  0076                     ?_do_I2C_RX:	
  5457                           ; 1 bytes @ 0x0
  5458                           
  5459  0076                     ??_do_I2C_RX:	
  5460                           ; 1 bytes @ 0x0
  5461                           
  5462  0076                     ?_do_I2C_TX_EMPTY:	
  5463                           ; 1 bytes @ 0x0
  5464                           
  5465  0076                     ??_do_I2C_TX_EMPTY:	
  5466                           ; 1 bytes @ 0x0
  5467                           
  5468  0076                     ?_INTERRUPT_InterruptManager:	
  5469                           ; 1 bytes @ 0x0
  5470                           
  5471  0076                     ?_SYSTEM_Initialize:	
  5472                           ; 1 bytes @ 0x0
  5473                           
  5474  0076                     ?_SPI2_Exchange8bit:	
  5475                           ; 1 bytes @ 0x0
  5476                           
  5477  0076                     ?_main:	
  5478                           ; 1 bytes @ 0x0
  5479                           
  5480  0076                     ?_SPI_Write:	
  5481                           ; 1 bytes @ 0x0
  5482                           
  5483  0076                     ?i1_i2c1_driver_restart:	
  5484                           ; 1 bytes @ 0x0
  5485                           
  5486  0076                     ??i1_i2c1_driver_restart:	
  5487                           ; 1 bytes @ 0x0
  5488                           
  5489  0076                     ?i1_i2c1_driver_stop:	
  5490                           ; 1 bytes @ 0x0
  5491                           
  5492  0076                     ??i1_i2c1_driver_stop:	
  5493                           ; 1 bytes @ 0x0
  5494                           
  5495  0076                     ?i1_i2c1_driver_startRX:	
  5496                           ; 1 bytes @ 0x0
  5497                           
  5498  0076                     ??i1_i2c1_driver_startRX:	
  5499                           ; 1 bytes @ 0x0
  5500                           
  5501  0076                     ?i1_i2c1_driver_getRXData:	
  5502                           ; 1 bytes @ 0x0
  5503                           
  5504  0076                     ??i1_i2c1_driver_getRXData:	
  5505                           ; 1 bytes @ 0x0
  5506                           
  5507  0076                     ?i1_i2c1_driver_TXData:	
  5508                           ; 1 bytes @ 0x0
  5509                           
  5510  0076                     ??i1_i2c1_driver_TXData:	
  5511                           ; 1 bytes @ 0x0
  5512                           
  5513  0076                     ?i1_i2c1_driver_sendNACK:	
  5514                           ; 1 bytes @ 0x0
  5515                           
  5516  0076                     ??i1_i2c1_driver_sendNACK:	
  5517                           ; 1 bytes @ 0x0
  5518                           
  5519  0076                     returnStop@p:	
  5520                           ; 1 bytes @ 0x0
  5521                           
  5522  0076                     returnReset@p:	
  5523                           ; 1 bytes @ 0x0
  5524                           
  5525  0076                     i1i2c1_driver_TXData@d:	
  5526                           ; 1 bytes @ 0x0
  5527                           
  5528                           
  5529                           ; 1 bytes @ 0x0
  5530  0076                     	ds	1
  5531  0077                     ??_returnStop:	
  5532  0077                     ??_returnReset:	
  5533                           ; 1 bytes @ 0x1
  5534                           
  5535                           
  5536                           ; 1 bytes @ 0x1
  5537  0077                     	ds	2
  5538  0079                     ??_i2c_ISR:	
  5539                           
  5540                           ; 1 bytes @ 0x3
  5541  0079                     	ds	3
  5542  007C                     ??_INTERRUPT_InterruptManager:	
  5543                           
  5544                           	psect	cstackBANK0
  5545  0020                     __pcstackBANK0:	
  5546                           ; 1 bytes @ 0x6
  5547                           
  5548  0020                     ??_i2c1_driver_open:	
  5549  0020                     ??_i2c1_driver_start:	
  5550                           ; 1 bytes @ 0x0
  5551                           
  5552  0020                     ??_i2c1_driver_restart:	
  5553                           ; 1 bytes @ 0x0
  5554                           
  5555  0020                     ??_i2c1_driver_stop:	
  5556                           ; 1 bytes @ 0x0
  5557                           
  5558  0020                     ??_i2c1_driver_TXData:	
  5559                           ; 1 bytes @ 0x0
  5560                           
  5561  0020                     ??_i2c1_driver_startRX:	
  5562                           ; 1 bytes @ 0x0
  5563                           
  5564  0020                     ??_i2c1_driver_sendNACK:	
  5565                           ; 1 bytes @ 0x0
  5566                           
  5567  0020                     ??_i2c1_driver_getRXData:	
  5568                           ; 1 bytes @ 0x0
  5569                           
  5570  0020                     ??_PMD_Initialize:	
  5571                           ; 1 bytes @ 0x0
  5572                           
  5573  0020                     ??_PIN_MANAGER_Initialize:	
  5574                           ; 1 bytes @ 0x0
  5575                           
  5576  0020                     ??_OSCILLATOR_Initialize:	
  5577                           ; 1 bytes @ 0x0
  5578                           
  5579  0020                     ??_WDT_Initialize:	
  5580                           ; 1 bytes @ 0x0
  5581                           
  5582  0020                     ??_SPI2_Initialize:	
  5583                           ; 1 bytes @ 0x0
  5584                           
  5585  0020                     ??_PWM1_Initialize:	
  5586                           ; 1 bytes @ 0x0
  5587                           
  5588  0020                     ??_ADC_Initialize:	
  5589                           ; 1 bytes @ 0x0
  5590                           
  5591  0020                     ??_TMR2_Initialize:	
  5592                           ; 1 bytes @ 0x0
  5593                           
  5594  0020                     ??_PIR_Sensor:	
  5595                           ; 1 bytes @ 0x0
  5596                           
  5597  0020                     ??_resetGestureParameters:	
  5598                           ; 1 bytes @ 0x0
  5599                           
  5600  0020                     ??_decodeGesture:	
  5601                           ; 1 bytes @ 0x0
  5602                           
  5603  0020                     ??_I2C_Start:	
  5604                           ; 1 bytes @ 0x0
  5605                           
  5606  0020                     ??_I2C_ReStart:	
  5607                           ; 1 bytes @ 0x0
  5608                           
  5609  0020                     ??_I2C_Send_NACK:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612  0020                     ??_I2C_Stop:	
  5613                           ; 1 bytes @ 0x0
  5614                           
  5615  0020                     ??_SYSTEM_Initialize:	
  5616                           ; 1 bytes @ 0x0
  5617                           
  5618  0020                     ??_i2c1_driver_isBufferFull:	
  5619                           ; 1 bytes @ 0x0
  5620                           
  5621  0020                     ??_SPI2_Exchange8bit:	
  5622                           ; 1 bytes @ 0x0
  5623                           
  5624  0020                     ?_strlen:	
  5625                           ; 1 bytes @ 0x0
  5626                           
  5627  0020                     ?_ADC_GetConversion:	
  5628                           ; 2 bytes @ 0x0
  5629                           
  5630  0020                     ?___wmul:	
  5631                           ; 2 bytes @ 0x0
  5632                           
  5633  0020                     i2c1_driver_TXData@d:	
  5634                           ; 2 bytes @ 0x0
  5635                           
  5636  0020                     SPI2_Exchange8bit@data:	
  5637                           ; 1 bytes @ 0x0
  5638                           
  5639  0020                     ___wmul@multiplier:	
  5640                           ; 1 bytes @ 0x0
  5641                           
  5642  0020                     strlen@s:	
  5643                           ; 2 bytes @ 0x0
  5644                           
  5645                           
  5646                           ; 2 bytes @ 0x0
  5647  0020                     	ds	1
  5648  0021                     ??_I2C_Write_Byte:	
  5649  0021                     ??_I2C_Read_Byte:	
  5650                           ; 1 bytes @ 0x1
  5651                           
  5652  0021                     ??_SPI_Write:	
  5653                           ; 1 bytes @ 0x1
  5654                           
  5655                           
  5656                           ; 1 bytes @ 0x1
  5657  0021                     	ds	1
  5658  0022                     ??_strlen:	
  5659  0022                     ??_ADC_GetConversion:	
  5660                           ; 1 bytes @ 0x2
  5661                           
  5662  0022                     SPI_Write@incoming:	
  5663                           ; 1 bytes @ 0x2
  5664                           
  5665  0022                     _decodeGesture$1533:	
  5666                           ; 1 bytes @ 0x2
  5667                           
  5668  0022                     ___wmul@multiplicand:	
  5669                           ; 2 bytes @ 0x2
  5670                           
  5671                           
  5672                           ; 2 bytes @ 0x2
  5673  0022                     	ds	1
  5674  0023                     ??_Display_Clear:	
  5675  0023                     ADC_GetConversion@channel:	
  5676                           ; 1 bytes @ 0x3
  5677                           
  5678  0023                     I2C_Write_Byte@Byte:	
  5679                           ; 1 bytes @ 0x3
  5680                           
  5681  0023                     strlen@a:	
  5682                           ; 1 bytes @ 0x3
  5683                           
  5684                           
  5685                           ; 2 bytes @ 0x3
  5686  0023                     	ds	1
  5687  0024                     ??_On_Off:	
  5688  0024                     ??___wmul:	
  5689                           ; 1 bytes @ 0x4
  5690                           
  5691  0024                     _decodeGesture$1534:	
  5692                           ; 1 bytes @ 0x4
  5693                           
  5694  0024                     I2C_Write_Byte@count:	
  5695                           ; 2 bytes @ 0x4
  5696                           
  5697  0024                     ___wmul@product:	
  5698                           ; 2 bytes @ 0x4
  5699                           
  5700                           
  5701                           ; 2 bytes @ 0x4
  5702  0024                     	ds	1
  5703  0025                     ?_Display_Name:	
  5704  0025                     Display_Name@string1:	
  5705                           ; 1 bytes @ 0x5
  5706                           
  5707                           
  5708                           ; 2 bytes @ 0x5
  5709  0025                     	ds	1
  5710  0026                     ??_wireReadDataByte:	
  5711  0026                     ?_wireWriteDataByte:	
  5712                           ; 1 bytes @ 0x6
  5713                           
  5714  0026                     ?_wireReadDataBlock:	
  5715                           ; 2 bytes @ 0x6
  5716                           
  5717  0026                     ?___awdiv:	
  5718                           ; 2 bytes @ 0x6
  5719                           
  5720  0026                     wireWriteDataByte@val:	
  5721                           ; 2 bytes @ 0x6
  5722                           
  5723  0026                     _decodeGesture$1535:	
  5724                           ; 1 bytes @ 0x6
  5725                           
  5726  0026                     wireReadDataBlock@val:	
  5727                           ; 2 bytes @ 0x6
  5728                           
  5729  0026                     ___awdiv@divisor:	
  5730                           ; 2 bytes @ 0x6
  5731                           
  5732                           
  5733                           ; 2 bytes @ 0x6
  5734  0026                     	ds	1
  5735  0027                     ??_Display_Name:	
  5736  0027                     wireReadDataByte@reg:	
  5737                           ; 1 bytes @ 0x7
  5738                           
  5739  0027                     On_Off@val:	
  5740                           ; 1 bytes @ 0x7
  5741                           
  5742                           
  5743                           ; 2 bytes @ 0x7
  5744  0027                     	ds	1
  5745  0028                     wireReadDataByte@val:	
  5746  0028                     Display_Name@length:	
  5747                           ; 1 bytes @ 0x8
  5748                           
  5749  0028                     _decodeGesture$1536:	
  5750                           ; 2 bytes @ 0x8
  5751                           
  5752  0028                     wireReadDataBlock@len:	
  5753                           ; 2 bytes @ 0x8
  5754                           
  5755  0028                     ___awdiv@dividend:	
  5756                           ; 2 bytes @ 0x8
  5757                           
  5758                           
  5759                           ; 2 bytes @ 0x8
  5760  0028                     	ds	1
  5761  0029                     ??_isGestureAvailable:	
  5762  0029                     ??_wireWriteDataByte:	
  5763                           ; 1 bytes @ 0x9
  5764                           
  5765  0029                     ??_getMode:	
  5766                           ; 1 bytes @ 0x9
  5767                           
  5768  0029                     wireWriteDataByte@reg:	
  5769                           ; 1 bytes @ 0x9
  5770                           
  5771                           
  5772                           ; 1 bytes @ 0x9
  5773  0029                     	ds	1
  5774  002A                     ??_setLEDDrive:	
  5775  002A                     ??_setProximityGain:	
  5776                           ; 1 bytes @ 0xA
  5777                           
  5778  002A                     ??_setAmbientLightGain:	
  5779                           ; 1 bytes @ 0xA
  5780                           
  5781  002A                     ??_setProxIntLowThresh:	
  5782                           ; 1 bytes @ 0xA
  5783                           
  5784  002A                     ??_setProxIntHighThresh:	
  5785                           ; 1 bytes @ 0xA
  5786                           
  5787  002A                     ?_setLightIntLowThreshold:	
  5788                           ; 1 bytes @ 0xA
  5789                           
  5790  002A                     ?_setLightIntHighThreshold:	
  5791                           ; 1 bytes @ 0xA
  5792                           
  5793  002A                     ??_setGestureEnterThresh:	
  5794                           ; 1 bytes @ 0xA
  5795                           
  5796  002A                     ??_setGestureExitThresh:	
  5797                           ; 1 bytes @ 0xA
  5798                           
  5799  002A                     ??_setGestureGain:	
  5800                           ; 1 bytes @ 0xA
  5801                           
  5802  002A                     ??_setGestureLEDDrive:	
  5803                           ; 1 bytes @ 0xA
  5804                           
  5805  002A                     ??_setGestureWaitTime:	
  5806                           ; 1 bytes @ 0xA
  5807                           
  5808  002A                     ??_setGestureIntEnable:	
  5809                           ; 1 bytes @ 0xA
  5810                           
  5811  002A                     ??_setLEDBoost:	
  5812                           ; 1 bytes @ 0xA
  5813                           
  5814  002A                     ??_setGestureMode:	
  5815                           ; 1 bytes @ 0xA
  5816                           
  5817  002A                     ??_wireReadDataBlock:	
  5818                           ; 1 bytes @ 0xA
  5819                           
  5820  002A                     ??___awdiv:	
  5821                           ; 1 bytes @ 0xA
  5822                           
  5823  002A                     getMode@enable_value:	
  5824                           ; 1 bytes @ 0xA
  5825                           
  5826  002A                     isGestureAvailable@val:	
  5827                           ; 1 bytes @ 0xA
  5828                           
  5829  002A                     Display_Name@i:	
  5830                           ; 1 bytes @ 0xA
  5831                           
  5832  002A                     setLightIntLowThreshold@threshold:	
  5833                           ; 2 bytes @ 0xA
  5834                           
  5835  002A                     setLightIntHighThreshold@threshold:	
  5836                           ; 2 bytes @ 0xA
  5837                           
  5838  002A                     _decodeGesture$1537:	
  5839                           ; 2 bytes @ 0xA
  5840                           
  5841                           
  5842                           ; 2 bytes @ 0xA
  5843  002A                     	ds	1
  5844  002B                     ?_setMode:	
  5845  002B                     setMode@enable:	
  5846                           ; 1 bytes @ 0xB
  5847                           
  5848  002B                     setAmbientLightGain@drive:	
  5849                           ; 1 bytes @ 0xB
  5850                           
  5851  002B                     setProxIntLowThresh@threshold:	
  5852                           ; 1 bytes @ 0xB
  5853                           
  5854  002B                     setProxIntHighThresh@threshold:	
  5855                           ; 1 bytes @ 0xB
  5856                           
  5857  002B                     setGestureEnterThresh@threshold:	
  5858                           ; 1 bytes @ 0xB
  5859                           
  5860  002B                     setGestureExitThresh@threshold:	
  5861                           ; 1 bytes @ 0xB
  5862                           
  5863  002B                     setGestureWaitTime@time:	
  5864                           ; 1 bytes @ 0xB
  5865                           
  5866  002B                     setGestureIntEnable@val:	
  5867                           ; 1 bytes @ 0xB
  5868                           
  5869  002B                     setGestureMode@mode:	
  5870                           ; 1 bytes @ 0xB
  5871                           
  5872  002B                     ___awdiv@counter:	
  5873                           ; 1 bytes @ 0xB
  5874                           
  5875                           
  5876                           ; 1 bytes @ 0xB
  5877  002B                     	ds	1
  5878  002C                     ??_Get_ADC:	
  5879  002C                     ??_setMode:	
  5880                           ; 1 bytes @ 0xC
  5881                           
  5882  002C                     ??_setLightIntLowThreshold:	
  5883                           ; 1 bytes @ 0xC
  5884                           
  5885  002C                     ??_setLightIntHighThreshold:	
  5886                           ; 1 bytes @ 0xC
  5887                           
  5888  002C                     setLEDDrive@val:	
  5889                           ; 1 bytes @ 0xC
  5890                           
  5891  002C                     setProximityGain@val:	
  5892                           ; 1 bytes @ 0xC
  5893                           
  5894  002C                     setAmbientLightGain@val:	
  5895                           ; 1 bytes @ 0xC
  5896                           
  5897  002C                     setGestureGain@val:	
  5898                           ; 1 bytes @ 0xC
  5899                           
  5900  002C                     setGestureLEDDrive@val:	
  5901                           ; 1 bytes @ 0xC
  5902                           
  5903  002C                     setGestureWaitTime@val:	
  5904                           ; 1 bytes @ 0xC
  5905                           
  5906  002C                     setGestureIntEnable@enable:	
  5907                           ; 1 bytes @ 0xC
  5908                           
  5909  002C                     setLEDBoost@val:	
  5910                           ; 1 bytes @ 0xC
  5911                           
  5912  002C                     setGestureMode@val:	
  5913                           ; 1 bytes @ 0xC
  5914                           
  5915  002C                     ___awdiv@sign:	
  5916                           ; 1 bytes @ 0xC
  5917                           
  5918  002C                     _decodeGesture$1538:	
  5919                           ; 1 bytes @ 0xC
  5920                           
  5921                           
  5922                           ; 2 bytes @ 0xC
  5923  002C                     	ds	1
  5924  002D                     setLEDDrive@drive:	
  5925  002D                     setProximityGain@drive:	
  5926                           ; 1 bytes @ 0xD
  5927                           
  5928  002D                     setLightIntLowThreshold@val_low:	
  5929                           ; 1 bytes @ 0xD
  5930                           
  5931  002D                     setLightIntHighThreshold@val_low:	
  5932                           ; 1 bytes @ 0xD
  5933                           
  5934  002D                     setGestureGain@gain:	
  5935                           ; 1 bytes @ 0xD
  5936                           
  5937  002D                     setGestureLEDDrive@drive:	
  5938                           ; 1 bytes @ 0xD
  5939                           
  5940  002D                     setLEDBoost@boost:	
  5941                           ; 1 bytes @ 0xD
  5942                           
  5943  002D                     ___awdiv@quotient:	
  5944                           ; 1 bytes @ 0xD
  5945                           
  5946                           
  5947                           ; 2 bytes @ 0xD
  5948  002D                     	ds	1
  5949  002E                     setMode@reg_val:	
  5950  002E                     setLightIntLowThreshold@val_high:	
  5951                           ; 1 bytes @ 0xE
  5952                           
  5953  002E                     setLightIntHighThreshold@val_high:	
  5954                           ; 1 bytes @ 0xE
  5955                           
  5956  002E                     _decodeGesture$1539:	
  5957                           ; 1 bytes @ 0xE
  5958                           
  5959                           
  5960                           ; 2 bytes @ 0xE
  5961  002E                     	ds	1
  5962  002F                     ??_processGestureData:	
  5963  002F                     setMode@mode:	
  5964                           ; 1 bytes @ 0xF
  5965                           
  5966  002F                     wireReadDataBlock@reg:	
  5967                           ; 1 bytes @ 0xF
  5968                           
  5969  002F                     Get_ADC@val:	
  5970                           ; 1 bytes @ 0xF
  5971                           
  5972                           
  5973                           ; 2 bytes @ 0xF
  5974  002F                     	ds	1
  5975  0030                     ??_initialize:	
  5976  0030                     ??_enableGestureSensor:	
  5977                           ; 1 bytes @ 0x10
  5978                           
  5979  0030                     ??_enablePower:	
  5980                           ; 1 bytes @ 0x10
  5981                           
  5982  0030                     wireReadDataBlock@j:	
  5983                           ; 1 bytes @ 0x10
  5984                           
  5985  0030                     _decodeGesture$1540:	
  5986                           ; 1 bytes @ 0x10
  5987                           
  5988                           
  5989                           ; 2 bytes @ 0x10
  5990  0030                     	ds	1
  5991  0031                     initialize@id:	
  5992  0031                     enableGestureSensor@interrupts:	
  5993                           ; 1 bytes @ 0x11
  5994                           
  5995  0031                     processGestureData@ud_ratio_first:	
  5996                           ; 1 bytes @ 0x11
  5997                           
  5998                           
  5999                           ; 2 bytes @ 0x11
  6000  0031                     	ds	2
  6001  0033                     processGestureData@lr_ratio_first:	
  6002                           
  6003                           ; 2 bytes @ 0x13
  6004  0033                     	ds	2
  6005  0035                     processGestureData@ud_ratio_last:	
  6006                           
  6007                           ; 2 bytes @ 0x15
  6008  0035                     	ds	2
  6009  0037                     processGestureData@lr_ratio_last:	
  6010                           
  6011                           ; 2 bytes @ 0x17
  6012  0037                     	ds	2
  6013  0039                     _processGestureData$1528:	
  6014                           
  6015                           ; 2 bytes @ 0x19
  6016  0039                     	ds	2
  6017  003B                     _processGestureData$1529:	
  6018                           
  6019                           ; 2 bytes @ 0x1B
  6020  003B                     	ds	2
  6021  003D                     _processGestureData$1530:	
  6022                           
  6023                           ; 2 bytes @ 0x1D
  6024  003D                     	ds	2
  6025  003F                     _processGestureData$1531:	
  6026                           
  6027                           ; 2 bytes @ 0x1F
  6028  003F                     	ds	2
  6029  0041                     processGestureData@u_last:	
  6030                           
  6031                           ; 1 bytes @ 0x21
  6032  0041                     	ds	1
  6033  0042                     processGestureData@d_last:	
  6034                           
  6035                           ; 1 bytes @ 0x22
  6036  0042                     	ds	1
  6037  0043                     processGestureData@l_last:	
  6038                           
  6039                           ; 1 bytes @ 0x23
  6040  0043                     	ds	1
  6041  0044                     processGestureData@r_last:	
  6042                           
  6043                           ; 1 bytes @ 0x24
  6044  0044                     	ds	1
  6045  0045                     processGestureData@u_first:	
  6046                           
  6047                           ; 1 bytes @ 0x25
  6048  0045                     	ds	1
  6049  0046                     processGestureData@d_first:	
  6050                           
  6051                           ; 1 bytes @ 0x26
  6052  0046                     	ds	1
  6053  0047                     processGestureData@l_first:	
  6054                           
  6055                           ; 1 bytes @ 0x27
  6056  0047                     	ds	1
  6057  0048                     processGestureData@r_first:	
  6058                           
  6059                           ; 1 bytes @ 0x28
  6060  0048                     	ds	1
  6061  0049                     processGestureData@ud_delta:	
  6062                           
  6063                           ; 2 bytes @ 0x29
  6064  0049                     	ds	2
  6065  004B                     processGestureData@lr_delta:	
  6066                           
  6067                           ; 2 bytes @ 0x2B
  6068  004B                     	ds	2
  6069  004D                     processGestureData@i:	
  6070                           
  6071                           ; 2 bytes @ 0x2D
  6072  004D                     	ds	2
  6073  004F                     ?_readGesture:	
  6074                           
  6075                           ; 2 bytes @ 0x2F
  6076  004F                     	ds	2
  6077  0051                     ??_readGesture:	
  6078                           
  6079                           ; 1 bytes @ 0x31
  6080  0051                     	ds	2
  6081  0053                     readGesture@motion:	
  6082                           
  6083                           ; 2 bytes @ 0x33
  6084  0053                     	ds	2
  6085  0055                     readGesture@gstatus:	
  6086                           
  6087                           ; 1 bytes @ 0x35
  6088  0055                     	ds	1
  6089  0056                     readGesture@bytes_read:	
  6090                           
  6091                           ; 2 bytes @ 0x36
  6092  0056                     	ds	2
  6093  0058                     readGesture@fifo_level:	
  6094                           
  6095                           ; 1 bytes @ 0x38
  6096  0058                     	ds	1
  6097  0059                     readGesture@i:	
  6098                           
  6099                           ; 2 bytes @ 0x39
  6100  0059                     	ds	2
  6101  005B                     ??_handleGesture:	
  6102                           
  6103                           ; 1 bytes @ 0x3B
  6104  005B                     	ds	1
  6105  005C                     ??_main:	
  6106                           
  6107                           	psect	maintext
  6108  0D80                     __pmaintext:	
  6109                           ; 1 bytes @ 0x3C
  6110 ;;
  6111 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6112 ;;
  6113 ;; *************** function _main *****************
  6114 ;; Defined at:
  6115 ;;		line 103 in file "main.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  count           2    0        unsigned int 
  6120 ;;  temp            2    0        int 
  6121 ;;  startSystem     1    0        _Bool 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : B1F/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        2 bytes
  6136 ;; Hardware stack levels required when called:   12
  6137 ;; This function calls:
  6138 ;;		_Display_Clear
  6139 ;;		_Display_Name
  6140 ;;		_Get_ADC
  6141 ;;		_On_Off
  6142 ;;		_PIR_Sensor
  6143 ;;		_SYSTEM_Initialize
  6144 ;;		_enableGestureSensor
  6145 ;;		_handleGesture
  6146 ;;		_initialize
  6147 ;;		_isGestureAvailable
  6148 ;; This function is called by:
  6149 ;;		Startup code after reset
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _main
  6155  0D80                     _main:	
  6156                           
  6157                           ;main.c: 106:     SYSTEM_Initialize();
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6161  0D80  3189  21F5  318D   	fcall	_SYSTEM_Initialize
  6162                           
  6163                           ;main.c: 112:     (INTCONbits.GIE = 1);
  6164  0D83  178B               	bsf	11,7	;volatile
  6165                           
  6166                           ;main.c: 115:     (INTCONbits.PEIE = 1);
  6167  0D84  170B               	bsf	11,6	;volatile
  6168                           
  6169                           ;main.c: 118:     Display_Clear();
  6170  0D85  3189  2158  318D   	fcall	_Display_Clear
  6171                           
  6172                           ;main.c: 120:     if(PIR_Sensor()) {
  6173  0D88  3188  20C4  318D   	fcall	_PIR_Sensor
  6174  0D8B  3A00               	xorlw	0
  6175  0D8C  1903               	skipnz
  6176  0D8D  2D95               	goto	l7099
  6177                           
  6178                           ;main.c: 121:         if(initialize()){
  6179  0D8E  3184  24C5  318D   	fcall	_initialize
  6180                           
  6181                           ;main.c: 124:         if(enableGestureSensor(0)){
  6182  0D91  3000               	movlw	0
  6183  0D92  318F  279C  318D   	fcall	_enableGestureSensor
  6184  0D95                     l7099:	
  6185                           ;main.c: 126:     }
  6186                           
  6187                           
  6188                           ;main.c: 132:     {;main.c: 133:         On_Off();
  6189  0D95  3187  27C2  318D   	fcall	_On_Off
  6190                           
  6191                           ;main.c: 134:         if(on) {
  6192  0D98  0020               	movlb	0	; select bank0
  6193  0D99  085C               	movf	_on,w
  6194  0D9A  045D               	iorwf	_on+1,w
  6195  0D9B  1903               	btfsc	3,2
  6196  0D9C  2D95               	goto	l7099
  6197                           
  6198                           ;main.c: 135:             if(PIR_Sensor()) {
  6199  0D9D  3188  20C4  318D   	fcall	_PIR_Sensor
  6200  0DA0  3A00               	xorlw	0
  6201  0DA1  1903               	skipnz
  6202  0DA2  2D95               	goto	l7099
  6203                           
  6204                           ;main.c: 136:                 if(start == 1) {
  6205  0DA3  0020               	movlb	0	; select bank0
  6206  0DA4  036E               	decf	_start,w
  6207  0DA5  1D03               	btfss	3,2
  6208  0DA6  2DB5               	goto	l7111
  6209                           
  6210                           ;main.c: 137:                     Display_Name(names[name]);
  6211  0DA7  355E               	lslf	_name,w
  6212  0DA8  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6213  0DA9  0086               	movwf	6
  6214  0DAA  3001               	movlw	1	; select bank2/3
  6215  0DAB  0087               	movwf	7
  6216  0DAC  3F40               	moviw [0]fsr1
  6217  0DAD  00A5               	movwf	Display_Name@string1
  6218  0DAE  3F41               	moviw [1]fsr1
  6219  0DAF  00A6               	movwf	Display_Name@string1+1
  6220  0DB0  318D  253F  318D   	fcall	_Display_Name
  6221                           
  6222                           ;main.c: 138:                     start = 0;
  6223  0DB3  0020               	movlb	0	; select bank0
  6224  0DB4  01EE               	clrf	_start
  6225  0DB5                     l7111:	
  6226                           
  6227                           ;main.c: 140:                 Get_ADC();
  6228  0DB5  3185  25DB  318D   	fcall	_Get_ADC
  6229                           
  6230                           ;main.c: 142:                 if( isGestureAvailable()){
  6231  0DB8  3189  2169  318D   	fcall	_isGestureAvailable
  6232  0DBB  3A00               	xorlw	0
  6233  0DBC  1903               	skipnz
  6234  0DBD  2D95               	goto	l7099
  6235                           
  6236                           ;main.c: 143:                     handleGesture();
  6237  0DBE  318F  2742  318D   	fcall	_handleGesture
  6238  0DC1  2D95               	goto	l7099
  6239  0DC2                     __end_of_main:	
  6240                           
  6241                           	psect	text1
  6242  04C5                     __ptext1:	
  6243 ;; *************** function _initialize *****************
  6244 ;; Defined at:
  6245 ;;		line 20 in file "APDS9960.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  id              1   17[BANK0 ] unsigned char 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      _Bool 
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0, pclath, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;Total ram usage:        2 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:   10
  6266 ;; This function calls:
  6267 ;;		_i2c1_driver_open
  6268 ;;		_setAmbientLightGain
  6269 ;;		_setGestureEnterThresh
  6270 ;;		_setGestureExitThresh
  6271 ;;		_setGestureGain
  6272 ;;		_setGestureIntEnable
  6273 ;;		_setGestureLEDDrive
  6274 ;;		_setGestureWaitTime
  6275 ;;		_setLEDDrive
  6276 ;;		_setLightIntHighThreshold
  6277 ;;		_setLightIntLowThreshold
  6278 ;;		_setMode
  6279 ;;		_setProxIntHighThresh
  6280 ;;		_setProxIntLowThresh
  6281 ;;		_setProximityGain
  6282 ;;		_wireReadDataByte
  6283 ;;		_wireWriteDataByte
  6284 ;; This function is called by:
  6285 ;;		_main
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           
  6290                           ;psect for function _initialize
  6291  04C5                     _initialize:	
  6292                           
  6293                           ;APDS9960.c: 25:     i2c1_driver_open();
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6297  04C5  3189  211A  3184   	fcall	_i2c1_driver_open
  6298                           
  6299                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6300  04C8  3092               	movlw	146
  6301  04C9  318A  22B4  3184   	fcall	_wireReadDataByte
  6302  04CC  0020               	movlb	0	; select bank0
  6303  04CD  00B0               	movwf	??_initialize
  6304  04CE  0830               	movf	??_initialize,w
  6305  04CF  00B1               	movwf	initialize@id
  6306                           
  6307                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6308  04D0  30AB               	movlw	171
  6309  04D1  0631               	xorwf	initialize@id,w
  6310  04D2  1903               	btfsc	3,2
  6311  04D3  2CDA               	goto	l6711
  6312  04D4  309C               	movlw	156
  6313  04D5  0631               	xorwf	initialize@id,w
  6314  04D6  1903               	btfsc	3,2
  6315  04D7  2CDA               	goto	l6711
  6316  04D8                     l6707:	
  6317                           
  6318                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6319  04D8  3000               	movlw	0
  6320  04D9  0008               	return
  6321  04DA                     l6711:	
  6322                           
  6323                           ;APDS9960.c: 39:     setMode(7, 0);
  6324  04DA  01AB               	clrf	setMode@enable
  6325  04DB  3007               	movlw	7
  6326  04DC  318E  26A1  3184   	fcall	_setMode
  6327                           
  6328                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6329  04DF  30DB               	movlw	219
  6330  04E0  0020               	movlb	0	; select bank0
  6331  04E1  00B0               	movwf	??_initialize
  6332  04E2  0830               	movf	??_initialize,w
  6333  04E3  00A6               	movwf	wireWriteDataByte@val
  6334  04E4  3081               	movlw	129
  6335  04E5  318A  2225  3184   	fcall	_wireWriteDataByte
  6336                           
  6337                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6338  04E8  30F6               	movlw	246
  6339  04E9  0020               	movlb	0	; select bank0
  6340  04EA  00B0               	movwf	??_initialize
  6341  04EB  0830               	movf	??_initialize,w
  6342  04EC  00A6               	movwf	wireWriteDataByte@val
  6343  04ED  3083               	movlw	131
  6344  04EE  318A  2225  3184   	fcall	_wireWriteDataByte
  6345                           
  6346                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6347  04F1  3087               	movlw	135
  6348  04F2  0020               	movlb	0	; select bank0
  6349  04F3  00B0               	movwf	??_initialize
  6350  04F4  0830               	movf	??_initialize,w
  6351  04F5  00A6               	movwf	wireWriteDataByte@val
  6352  04F6  308E               	movlw	142
  6353  04F7  318A  2225  3184   	fcall	_wireWriteDataByte
  6354                           
  6355                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6356  04FA  0020               	movlb	0	; select bank0
  6357  04FB  01A6               	clrf	wireWriteDataByte@val
  6358  04FC  309D               	movlw	157
  6359  04FD  318A  2225  3184   	fcall	_wireWriteDataByte
  6360                           
  6361                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6362  0500  0020               	movlb	0	; select bank0
  6363  0501  01A6               	clrf	wireWriteDataByte@val
  6364  0502  309E               	movlw	158
  6365  0503  318A  2225  3184   	fcall	_wireWriteDataByte
  6366                           
  6367                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6368  0506  3060               	movlw	96
  6369  0507  0020               	movlb	0	; select bank0
  6370  0508  00B0               	movwf	??_initialize
  6371  0509  0830               	movf	??_initialize,w
  6372  050A  00A6               	movwf	wireWriteDataByte@val
  6373  050B  308D               	movlw	141
  6374  050C  318A  2225  3184   	fcall	_wireWriteDataByte
  6375                           
  6376                           ;APDS9960.c: 47:     setLEDDrive(0);
  6377  050F  3000               	movlw	0
  6378  0510  318B  239A  3184   	fcall	_setLEDDrive
  6379                           
  6380                           ;APDS9960.c: 48:     setProximityGain(2);
  6381  0513  3002               	movlw	2
  6382  0514  318B  23C3  3184   	fcall	_setProximityGain
  6383                           
  6384                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6385  0517  3001               	movlw	1
  6386  0518  318A  2296  3184   	fcall	_setAmbientLightGain
  6387                           
  6388                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6389  051B  3000               	movlw	0
  6390  051C  3189  21B5  3184   	fcall	_setProxIntLowThresh
  6391  051F  3A00               	xorlw	0
  6392  0520  1903               	btfsc	3,2
  6393  0521  2CD8               	goto	l6707
  6394                           
  6395                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6396  0522  3032               	movlw	50
  6397  0523  3189  21A2  3184   	fcall	_setProxIntHighThresh
  6398  0526  3A00               	xorlw	0
  6399  0527  1903               	btfsc	3,2
  6400  0528  2CD8               	goto	l6707
  6401                           
  6402                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6403  0529  30FF               	movlw	255
  6404  052A  0020               	movlb	0	; select bank0
  6405  052B  00AA               	movwf	setLightIntLowThreshold@threshold
  6406  052C  30FF               	movlw	255
  6407  052D  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6408  052E  318B  2373  3184   	fcall	_setLightIntLowThreshold
  6409  0531  3A00               	xorlw	0
  6410  0532  1903               	btfsc	3,2
  6411  0533  2CD8               	goto	l6707
  6412                           
  6413                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6414  0534  3000               	movlw	0
  6415  0535  0020               	movlb	0	; select bank0
  6416  0536  00AA               	movwf	setLightIntHighThreshold@threshold
  6417  0537  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6418  0538  318B  234C  3184   	fcall	_setLightIntHighThreshold
  6419  053B  3A00               	xorlw	0
  6420  053C  1903               	btfsc	3,2
  6421  053D  2CD8               	goto	l6707
  6422                           
  6423                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6424  053E  3011               	movlw	17
  6425  053F  0020               	movlb	0	; select bank0
  6426  0540  00B0               	movwf	??_initialize
  6427  0541  0830               	movf	??_initialize,w
  6428  0542  00A6               	movwf	wireWriteDataByte@val
  6429  0543  308C               	movlw	140
  6430  0544  318A  2225  3184   	fcall	_wireWriteDataByte
  6431  0547  0020               	movlb	0	; select bank0
  6432  0548  0826               	movf	?_wireWriteDataByte,w
  6433  0549  0427               	iorwf	?_wireWriteDataByte+1,w
  6434  054A  1903               	btfsc	3,2
  6435  054B  2CD8               	goto	l6707
  6436                           
  6437                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6438  054C  01A6               	clrf	wireWriteDataByte@val
  6439  054D  0AA6               	incf	wireWriteDataByte@val,f
  6440  054E  3090               	movlw	144
  6441  054F  318A  2225  3184   	fcall	_wireWriteDataByte
  6442  0552  0020               	movlb	0	; select bank0
  6443  0553  0826               	movf	?_wireWriteDataByte,w
  6444  0554  0427               	iorwf	?_wireWriteDataByte+1,w
  6445  0555  1903               	btfsc	3,2
  6446  0556  2CD8               	goto	l6707
  6447                           
  6448                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6449  0557  01A6               	clrf	wireWriteDataByte@val
  6450  0558  309F               	movlw	159
  6451  0559  318A  2225  3184   	fcall	_wireWriteDataByte
  6452  055C  0020               	movlb	0	; select bank0
  6453  055D  0826               	movf	?_wireWriteDataByte,w
  6454  055E  0427               	iorwf	?_wireWriteDataByte+1,w
  6455  055F  1903               	btfsc	3,2
  6456  0560  2CD8               	goto	l6707
  6457                           
  6458                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6459  0561  3028               	movlw	40
  6460  0562  3189  217C  3184   	fcall	_setGestureEnterThresh
  6461  0565  3A00               	xorlw	0
  6462  0566  1903               	btfsc	3,2
  6463  0567  2CD8               	goto	l6707
  6464                           
  6465                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6466  0568  301E               	movlw	30
  6467  0569  3189  218F  3184   	fcall	_setGestureExitThresh
  6468  056C  3A00               	xorlw	0
  6469  056D  1903               	btfsc	3,2
  6470  056E  2CD8               	goto	l6707
  6471                           
  6472                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6473  056F  3040               	movlw	64
  6474  0570  0020               	movlb	0	; select bank0
  6475  0571  00B0               	movwf	??_initialize
  6476  0572  0830               	movf	??_initialize,w
  6477  0573  00A6               	movwf	wireWriteDataByte@val
  6478  0574  30A2               	movlw	162
  6479  0575  318A  2225  3184   	fcall	_wireWriteDataByte
  6480  0578  0020               	movlb	0	; select bank0
  6481  0579  0826               	movf	?_wireWriteDataByte,w
  6482  057A  0427               	iorwf	?_wireWriteDataByte+1,w
  6483  057B  1903               	btfsc	3,2
  6484  057C  2CD8               	goto	l6707
  6485                           
  6486                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6487  057D  3002               	movlw	2
  6488  057E  318C  24A5  3184   	fcall	_setGestureGain
  6489  0581  3A00               	xorlw	0
  6490  0582  1903               	btfsc	3,2
  6491  0583  2CD8               	goto	l6707
  6492                           
  6493                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  6494  0584  3000               	movlw	0
  6495  0585  318C  24D7  3184   	fcall	_setGestureLEDDrive
  6496  0588  3A00               	xorlw	0
  6497  0589  1903               	btfsc	3,2
  6498  058A  2CD8               	goto	l6707
  6499                           
  6500                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  6501  058B  3001               	movlw	1
  6502  058C  318B  2325  3184   	fcall	_setGestureWaitTime
  6503  058F  3A00               	xorlw	0
  6504  0590  1903               	btfsc	3,2
  6505  0591  2CD8               	goto	l6707
  6506                           
  6507                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  6508  0592  0020               	movlb	0	; select bank0
  6509  0593  01A6               	clrf	wireWriteDataByte@val
  6510  0594  30A4               	movlw	164
  6511  0595  318A  2225  3184   	fcall	_wireWriteDataByte
  6512  0598  0020               	movlb	0	; select bank0
  6513  0599  0826               	movf	?_wireWriteDataByte,w
  6514  059A  0427               	iorwf	?_wireWriteDataByte+1,w
  6515  059B  1903               	btfsc	3,2
  6516  059C  2CD8               	goto	l6707
  6517                           
  6518                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  6519  059D  01A6               	clrf	wireWriteDataByte@val
  6520  059E  30A5               	movlw	165
  6521  059F  318A  2225  3184   	fcall	_wireWriteDataByte
  6522  05A2  0020               	movlb	0	; select bank0
  6523  05A3  0826               	movf	?_wireWriteDataByte,w
  6524  05A4  0427               	iorwf	?_wireWriteDataByte+1,w
  6525  05A5  1903               	btfsc	3,2
  6526  05A6  2CD8               	goto	l6707
  6527                           
  6528                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  6529  05A7  01A6               	clrf	wireWriteDataByte@val
  6530  05A8  30A7               	movlw	167
  6531  05A9  318A  2225  3184   	fcall	_wireWriteDataByte
  6532  05AC  0020               	movlb	0	; select bank0
  6533  05AD  0826               	movf	?_wireWriteDataByte,w
  6534  05AE  0427               	iorwf	?_wireWriteDataByte+1,w
  6535  05AF  1903               	btfsc	3,2
  6536  05B0  2CD8               	goto	l6707
  6537                           
  6538                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  6539  05B1  01A6               	clrf	wireWriteDataByte@val
  6540  05B2  30A9               	movlw	169
  6541  05B3  318A  2225  3184   	fcall	_wireWriteDataByte
  6542  05B6  0020               	movlb	0	; select bank0
  6543  05B7  0826               	movf	?_wireWriteDataByte,w
  6544  05B8  0427               	iorwf	?_wireWriteDataByte+1,w
  6545  05B9  1903               	btfsc	3,2
  6546  05BA  2CD8               	goto	l6707
  6547                           
  6548                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  6549  05BB  30C9               	movlw	201
  6550  05BC  00B0               	movwf	??_initialize
  6551  05BD  0830               	movf	??_initialize,w
  6552  05BE  00A6               	movwf	wireWriteDataByte@val
  6553  05BF  30A6               	movlw	166
  6554  05C0  318A  2225  3184   	fcall	_wireWriteDataByte
  6555  05C3  0020               	movlb	0	; select bank0
  6556  05C4  0826               	movf	?_wireWriteDataByte,w
  6557  05C5  0427               	iorwf	?_wireWriteDataByte+1,w
  6558  05C6  1903               	btfsc	3,2
  6559  05C7  2CD8               	goto	l6707
  6560                           
  6561                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  6562  05C8  01A6               	clrf	wireWriteDataByte@val
  6563  05C9  30AA               	movlw	170
  6564  05CA  318A  2225  3184   	fcall	_wireWriteDataByte
  6565  05CD  0020               	movlb	0	; select bank0
  6566  05CE  0826               	movf	?_wireWriteDataByte,w
  6567  05CF  0427               	iorwf	?_wireWriteDataByte+1,w
  6568  05D0  1903               	btfsc	3,2
  6569  05D1  2CD8               	goto	l6707
  6570                           
  6571                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  6572  05D2  3000               	movlw	0
  6573  05D3  318C  2417  3184   	fcall	_setGestureIntEnable
  6574  05D6  3A00               	xorlw	0
  6575  05D7  1903               	btfsc	3,2
  6576  05D8  2CD8               	goto	l6707
  6577                           
  6578                           ;APDS9960.c: 120:     return 1;
  6579  05D9  3001               	movlw	1
  6580  05DA  0008               	return
  6581  05DB                     __end_of_initialize:	
  6582                           
  6583                           	psect	text2
  6584  0BC3                     __ptext2:	
  6585 ;; *************** function _setProximityGain *****************
  6586 ;; Defined at:
  6587 ;;		line 192 in file "APDS9960.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  drive           1    wreg     unsigned char 
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;  drive           1   13[BANK0 ] unsigned char 
  6592 ;;  val             1   12[BANK0 ] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      _Bool 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0, pclath, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;Total ram usage:        4 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    8
  6609 ;; This function calls:
  6610 ;;		_wireReadDataByte
  6611 ;;		_wireWriteDataByte
  6612 ;; This function is called by:
  6613 ;;		_initialize
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _setProximityGain
  6619  0BC3                     _setProximityGain:	
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  6623                           ;setProximityGain@drive stored from wreg
  6624  0BC3  0020               	movlb	0	; select bank0
  6625  0BC4  00AD               	movwf	setProximityGain@drive
  6626                           
  6627                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  6628  0BC5  308F               	movlw	143
  6629  0BC6  318A  22B4  318B   	fcall	_wireReadDataByte
  6630  0BC9  0020               	movlb	0	; select bank0
  6631  0BCA  00AA               	movwf	??_setProximityGain
  6632  0BCB  082A               	movf	??_setProximityGain,w
  6633  0BCC  00AC               	movwf	setProximityGain@val
  6634                           
  6635                           ;APDS9960.c: 199:     drive &= 0b00000011;
  6636  0BCD  3003               	movlw	3
  6637  0BCE  00AA               	movwf	??_setProximityGain
  6638  0BCF  082A               	movf	??_setProximityGain,w
  6639  0BD0  05AD               	andwf	setProximityGain@drive,f
  6640                           
  6641                           ;APDS9960.c: 200:     drive = drive << 2;
  6642  0BD1  082D               	movf	setProximityGain@drive,w
  6643  0BD2  00AA               	movwf	??_setProximityGain
  6644  0BD3  3001               	movlw	1
  6645  0BD4                     u5675:	
  6646  0BD4  35AA               	lslf	??_setProximityGain,f
  6647  0BD5  3EFF               	addlw	-1
  6648  0BD6  1D03               	skipz
  6649  0BD7  2BD4               	goto	u5675
  6650  0BD8  352A               	lslf	??_setProximityGain,w
  6651  0BD9  00AB               	movwf	??_setProximityGain+1
  6652  0BDA  082B               	movf	??_setProximityGain+1,w
  6653  0BDB  00AD               	movwf	setProximityGain@drive
  6654                           
  6655                           ;APDS9960.c: 201:     val &= 0b11110011;
  6656  0BDC  30F3               	movlw	243
  6657  0BDD  00AA               	movwf	??_setProximityGain
  6658  0BDE  082A               	movf	??_setProximityGain,w
  6659  0BDF  05AC               	andwf	setProximityGain@val,f
  6660                           
  6661                           ;APDS9960.c: 202:     val |= drive;
  6662  0BE0  082D               	movf	setProximityGain@drive,w
  6663  0BE1  00AA               	movwf	??_setProximityGain
  6664  0BE2  082A               	movf	??_setProximityGain,w
  6665  0BE3  04AC               	iorwf	setProximityGain@val,f
  6666                           
  6667                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  6668  0BE4  082C               	movf	setProximityGain@val,w
  6669  0BE5  00AA               	movwf	??_setProximityGain
  6670  0BE6  082A               	movf	??_setProximityGain,w
  6671  0BE7  00A6               	movwf	wireWriteDataByte@val
  6672  0BE8  308F               	movlw	143
  6673  0BE9  318A  2225         	fcall	_wireWriteDataByte
  6674  0BEB  0008               	return
  6675  0BEC                     __end_of_setProximityGain:	
  6676                           
  6677                           	psect	text3
  6678  09B5                     __ptext3:	
  6679 ;; *************** function _setProxIntLowThresh *****************
  6680 ;; Defined at:
  6681 ;;		line 234 in file "APDS9960.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  threshold       1    wreg     unsigned char 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  threshold       1   11[BANK0 ] unsigned char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      _Bool 
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, status,0, pclath, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;Total ram usage:        2 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    8
  6702 ;; This function calls:
  6703 ;;		_wireWriteDataByte
  6704 ;; This function is called by:
  6705 ;;		_initialize
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           
  6710                           ;psect for function _setProxIntLowThresh
  6711  09B5                     _setProxIntLowThresh:	
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  6715                           ;setProxIntLowThresh@threshold stored from wreg
  6716  09B5  0020               	movlb	0	; select bank0
  6717  09B6  00AB               	movwf	setProxIntLowThresh@threshold
  6718                           
  6719                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  6720  09B7  082B               	movf	setProxIntLowThresh@threshold,w
  6721  09B8  00AA               	movwf	??_setProxIntLowThresh
  6722  09B9  082A               	movf	??_setProxIntLowThresh,w
  6723  09BA  00A6               	movwf	wireWriteDataByte@val
  6724  09BB  3089               	movlw	137
  6725  09BC  318A  2225  3189   	fcall	_wireWriteDataByte
  6726  09BF  0020               	movlb	0	; select bank0
  6727  09C0  0826               	movf	?_wireWriteDataByte,w
  6728  09C1  0427               	iorwf	?_wireWriteDataByte+1,w
  6729  09C2  1D03               	btfss	3,2
  6730  09C3  29C6               	goto	l6451
  6731                           
  6732                           ;APDS9960.c: 237:         return 0;
  6733  09C4  3000               	movlw	0
  6734  09C5  0008               	return
  6735  09C6                     l6451:	
  6736                           
  6737                           ;APDS9960.c: 240:     return 1;
  6738  09C6  3001               	movlw	1
  6739  09C7  0008               	return
  6740  09C8                     __end_of_setProxIntLowThresh:	
  6741                           
  6742                           	psect	text4
  6743  09A2                     __ptext4:	
  6744 ;; *************** function _setProxIntHighThresh *****************
  6745 ;; Defined at:
  6746 ;;		line 244 in file "APDS9960.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  threshold       1    wreg     unsigned char 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  threshold       1   11[BANK0 ] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      _Bool 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0, pclath, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;Total ram usage:        2 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    8
  6767 ;; This function calls:
  6768 ;;		_wireWriteDataByte
  6769 ;; This function is called by:
  6770 ;;		_initialize
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           
  6775                           ;psect for function _setProxIntHighThresh
  6776  09A2                     _setProxIntHighThresh:	
  6777                           
  6778                           ;incstack = 0
  6779                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  6780                           ;setProxIntHighThresh@threshold stored from wreg
  6781  09A2  0020               	movlb	0	; select bank0
  6782  09A3  00AB               	movwf	setProxIntHighThresh@threshold
  6783                           
  6784                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  6785  09A4  082B               	movf	setProxIntHighThresh@threshold,w
  6786  09A5  00AA               	movwf	??_setProxIntHighThresh
  6787  09A6  082A               	movf	??_setProxIntHighThresh,w
  6788  09A7  00A6               	movwf	wireWriteDataByte@val
  6789  09A8  308B               	movlw	139
  6790  09A9  318A  2225  3189   	fcall	_wireWriteDataByte
  6791  09AC  0020               	movlb	0	; select bank0
  6792  09AD  0826               	movf	?_wireWriteDataByte,w
  6793  09AE  0427               	iorwf	?_wireWriteDataByte+1,w
  6794  09AF  1D03               	btfss	3,2
  6795  09B0  29B3               	goto	l6461
  6796                           
  6797                           ;APDS9960.c: 247:         return 0;
  6798  09B1  3000               	movlw	0
  6799  09B2  0008               	return
  6800  09B3                     l6461:	
  6801                           
  6802                           ;APDS9960.c: 250:     return 1;
  6803  09B3  3001               	movlw	1
  6804  09B4  0008               	return
  6805  09B5                     __end_of_setProxIntHighThresh:	
  6806                           
  6807                           	psect	text5
  6808  0B73                     __ptext5:	
  6809 ;; *************** function _setLightIntLowThreshold *****************
  6810 ;; Defined at:
  6811 ;;		line 254 in file "APDS9960.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  threshold       2   10[BANK0 ] unsigned short 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  val_high        1   14[BANK0 ] unsigned char 
  6816 ;;  val_low         1   13[BANK0 ] unsigned char 
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      _Bool 
  6819 ;; Registers used:
  6820 ;;		wreg, status,2, status,0, pclath, cstack
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6830 ;;Total ram usage:        5 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:    8
  6833 ;; This function calls:
  6834 ;;		_wireWriteDataByte
  6835 ;; This function is called by:
  6836 ;;		_initialize
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           
  6841                           ;psect for function _setLightIntLowThreshold
  6842  0B73                     _setLightIntLowThreshold:	
  6843                           
  6844                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  6848  0B73  0020               	movlb	0	; select bank0
  6849  0B74  082A               	movf	setLightIntLowThreshold@threshold,w
  6850  0B75  00AC               	movwf	??_setLightIntLowThreshold
  6851  0B76  082C               	movf	??_setLightIntLowThreshold,w
  6852  0B77  00AD               	movwf	setLightIntLowThreshold@val_low
  6853                           
  6854                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  6855  0B78  082B               	movf	setLightIntLowThreshold@threshold+1,w
  6856  0B79  00AC               	movwf	??_setLightIntLowThreshold
  6857  0B7A  082C               	movf	??_setLightIntLowThreshold,w
  6858  0B7B  00AE               	movwf	setLightIntLowThreshold@val_high
  6859                           
  6860                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  6861  0B7C  082D               	movf	setLightIntLowThreshold@val_low,w
  6862  0B7D  00AC               	movwf	??_setLightIntLowThreshold
  6863  0B7E  082C               	movf	??_setLightIntLowThreshold,w
  6864  0B7F  00A6               	movwf	wireWriteDataByte@val
  6865  0B80  3084               	movlw	132
  6866  0B81  318A  2225  318B   	fcall	_wireWriteDataByte
  6867  0B84  0020               	movlb	0	; select bank0
  6868  0B85  0826               	movf	?_wireWriteDataByte,w
  6869  0B86  0427               	iorwf	?_wireWriteDataByte+1,w
  6870  0B87  1D03               	btfss	3,2
  6871  0B88  2B8B               	goto	l6475
  6872  0B89                     l6471:	
  6873                           
  6874                           ;APDS9960.c: 265:         return 0;
  6875  0B89  3000               	movlw	0
  6876  0B8A  0008               	return
  6877  0B8B                     l6475:	
  6878                           
  6879                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  6880  0B8B  082E               	movf	setLightIntLowThreshold@val_high,w
  6881  0B8C  00AC               	movwf	??_setLightIntLowThreshold
  6882  0B8D  082C               	movf	??_setLightIntLowThreshold,w
  6883  0B8E  00A6               	movwf	wireWriteDataByte@val
  6884  0B8F  3085               	movlw	133
  6885  0B90  318A  2225  318B   	fcall	_wireWriteDataByte
  6886  0B93  0020               	movlb	0	; select bank0
  6887  0B94  0826               	movf	?_wireWriteDataByte,w
  6888  0B95  0427               	iorwf	?_wireWriteDataByte+1,w
  6889  0B96  1903               	btfsc	3,2
  6890  0B97  2B89               	goto	l6471
  6891                           
  6892                           ;APDS9960.c: 273:     return 1;
  6893  0B98  3001               	movlw	1
  6894  0B99  0008               	return
  6895  0B9A                     __end_of_setLightIntLowThreshold:	
  6896                           
  6897                           	psect	text6
  6898  0B4C                     __ptext6:	
  6899 ;; *************** function _setLightIntHighThreshold *****************
  6900 ;; Defined at:
  6901 ;;		line 277 in file "APDS9960.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;  threshold       2   10[BANK0 ] unsigned short 
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;  val_high        1   14[BANK0 ] unsigned char 
  6906 ;;  val_low         1   13[BANK0 ] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      _Bool 
  6909 ;; Registers used:
  6910 ;;		wreg, status,2, status,0, pclath, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6916 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;Total ram usage:        5 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    8
  6923 ;; This function calls:
  6924 ;;		_wireWriteDataByte
  6925 ;; This function is called by:
  6926 ;;		_initialize
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _setLightIntHighThreshold
  6932  0B4C                     _setLightIntHighThreshold:	
  6933                           
  6934                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  6938  0B4C  0020               	movlb	0	; select bank0
  6939  0B4D  082A               	movf	setLightIntHighThreshold@threshold,w
  6940  0B4E  00AC               	movwf	??_setLightIntHighThreshold
  6941  0B4F  082C               	movf	??_setLightIntHighThreshold,w
  6942  0B50  00AD               	movwf	setLightIntHighThreshold@val_low
  6943                           
  6944                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  6945  0B51  082B               	movf	setLightIntHighThreshold@threshold+1,w
  6946  0B52  00AC               	movwf	??_setLightIntHighThreshold
  6947  0B53  082C               	movf	??_setLightIntHighThreshold,w
  6948  0B54  00AE               	movwf	setLightIntHighThreshold@val_high
  6949                           
  6950                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  6951  0B55  082D               	movf	setLightIntHighThreshold@val_low,w
  6952  0B56  00AC               	movwf	??_setLightIntHighThreshold
  6953  0B57  082C               	movf	??_setLightIntHighThreshold,w
  6954  0B58  00A6               	movwf	wireWriteDataByte@val
  6955  0B59  3086               	movlw	134
  6956  0B5A  318A  2225  318B   	fcall	_wireWriteDataByte
  6957  0B5D  0020               	movlb	0	; select bank0
  6958  0B5E  0826               	movf	?_wireWriteDataByte,w
  6959  0B5F  0427               	iorwf	?_wireWriteDataByte+1,w
  6960  0B60  1D03               	btfss	3,2
  6961  0B61  2B64               	goto	l6495
  6962  0B62                     l6491:	
  6963                           
  6964                           ;APDS9960.c: 288:         return 0;
  6965  0B62  3000               	movlw	0
  6966  0B63  0008               	return
  6967  0B64                     l6495:	
  6968                           
  6969                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  6970  0B64  082E               	movf	setLightIntHighThreshold@val_high,w
  6971  0B65  00AC               	movwf	??_setLightIntHighThreshold
  6972  0B66  082C               	movf	??_setLightIntHighThreshold,w
  6973  0B67  00A6               	movwf	wireWriteDataByte@val
  6974  0B68  3087               	movlw	135
  6975  0B69  318A  2225  318B   	fcall	_wireWriteDataByte
  6976  0B6C  0020               	movlb	0	; select bank0
  6977  0B6D  0826               	movf	?_wireWriteDataByte,w
  6978  0B6E  0427               	iorwf	?_wireWriteDataByte+1,w
  6979  0B6F  1903               	btfsc	3,2
  6980  0B70  2B62               	goto	l6491
  6981                           
  6982                           ;APDS9960.c: 296:     return 1;
  6983  0B71  3001               	movlw	1
  6984  0B72  0008               	return
  6985  0B73                     __end_of_setLightIntHighThreshold:	
  6986                           
  6987                           	psect	text7
  6988  0B9A                     __ptext7:	
  6989 ;; *************** function _setLEDDrive *****************
  6990 ;; Defined at:
  6991 ;;		line 170 in file "APDS9960.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  drive           1    wreg     unsigned char 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  drive           1   13[BANK0 ] unsigned char 
  6996 ;;  val             1   12[BANK0 ] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  1    wreg      _Bool 
  6999 ;; Registers used:
  7000 ;;		wreg, status,2, status,0, pclath, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;Total ram usage:        4 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    8
  7013 ;; This function calls:
  7014 ;;		_wireReadDataByte
  7015 ;;		_wireWriteDataByte
  7016 ;; This function is called by:
  7017 ;;		_initialize
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           
  7022                           ;psect for function _setLEDDrive
  7023  0B9A                     _setLEDDrive:	
  7024                           
  7025                           ;incstack = 0
  7026                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7027                           ;setLEDDrive@drive stored from wreg
  7028  0B9A  0020               	movlb	0	; select bank0
  7029  0B9B  00AD               	movwf	setLEDDrive@drive
  7030                           
  7031                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7032  0B9C  308F               	movlw	143
  7033  0B9D  318A  22B4  318B   	fcall	_wireReadDataByte
  7034  0BA0  0020               	movlb	0	; select bank0
  7035  0BA1  00AA               	movwf	??_setLEDDrive
  7036  0BA2  082A               	movf	??_setLEDDrive,w
  7037  0BA3  00AC               	movwf	setLEDDrive@val
  7038                           
  7039                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7040  0BA4  3003               	movlw	3
  7041  0BA5  00AA               	movwf	??_setLEDDrive
  7042  0BA6  082A               	movf	??_setLEDDrive,w
  7043  0BA7  05AD               	andwf	setLEDDrive@drive,f
  7044                           
  7045                           ;APDS9960.c: 179:     drive = drive << 6;
  7046  0BA8  082D               	movf	setLEDDrive@drive,w
  7047  0BA9  00AA               	movwf	??_setLEDDrive
  7048  0BAA  3005               	movlw	5
  7049  0BAB                     u5665:	
  7050  0BAB  35AA               	lslf	??_setLEDDrive,f
  7051  0BAC  3EFF               	addlw	-1
  7052  0BAD  1D03               	skipz
  7053  0BAE  2BAB               	goto	u5665
  7054  0BAF  352A               	lslf	??_setLEDDrive,w
  7055  0BB0  00AB               	movwf	??_setLEDDrive+1
  7056  0BB1  082B               	movf	??_setLEDDrive+1,w
  7057  0BB2  00AD               	movwf	setLEDDrive@drive
  7058                           
  7059                           ;APDS9960.c: 180:     val &= 0b00111111;
  7060  0BB3  303F               	movlw	63
  7061  0BB4  00AA               	movwf	??_setLEDDrive
  7062  0BB5  082A               	movf	??_setLEDDrive,w
  7063  0BB6  05AC               	andwf	setLEDDrive@val,f
  7064                           
  7065                           ;APDS9960.c: 181:     val |= drive;
  7066  0BB7  082D               	movf	setLEDDrive@drive,w
  7067  0BB8  00AA               	movwf	??_setLEDDrive
  7068  0BB9  082A               	movf	??_setLEDDrive,w
  7069  0BBA  04AC               	iorwf	setLEDDrive@val,f
  7070                           
  7071                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7072  0BBB  082C               	movf	setLEDDrive@val,w
  7073  0BBC  00AA               	movwf	??_setLEDDrive
  7074  0BBD  082A               	movf	??_setLEDDrive,w
  7075  0BBE  00A6               	movwf	wireWriteDataByte@val
  7076  0BBF  308F               	movlw	143
  7077  0BC0  318A  2225         	fcall	_wireWriteDataByte
  7078  0BC2  0008               	return
  7079  0BC3                     __end_of_setLEDDrive:	
  7080                           
  7081                           	psect	text8
  7082  0B25                     __ptext8:	
  7083 ;; *************** function _setGestureWaitTime *****************
  7084 ;; Defined at:
  7085 ;;		line 366 in file "APDS9960.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  time            1    wreg     unsigned char 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  time            1   11[BANK0 ] unsigned char 
  7090 ;;  val             1   12[BANK0 ] unsigned char 
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      _Bool 
  7093 ;; Registers used:
  7094 ;;		wreg, status,2, status,0, pclath, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;Total ram usage:        3 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    8
  7107 ;; This function calls:
  7108 ;;		_wireReadDataByte
  7109 ;;		_wireWriteDataByte
  7110 ;; This function is called by:
  7111 ;;		_initialize
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function _setGestureWaitTime
  7117  0B25                     _setGestureWaitTime:	
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7121                           ;setGestureWaitTime@time stored from wreg
  7122  0B25  0020               	movlb	0	; select bank0
  7123  0B26  00AB               	movwf	setGestureWaitTime@time
  7124                           
  7125                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7126  0B27  30A3               	movlw	163
  7127  0B28  318A  22B4  318B   	fcall	_wireReadDataByte
  7128  0B2B  0020               	movlb	0	; select bank0
  7129  0B2C  00AA               	movwf	??_setGestureWaitTime
  7130  0B2D  082A               	movf	??_setGestureWaitTime,w
  7131  0B2E  00AC               	movwf	setGestureWaitTime@val
  7132                           
  7133                           ;APDS9960.c: 374:     time &= 0b00000111;
  7134  0B2F  3007               	movlw	7
  7135  0B30  00AA               	movwf	??_setGestureWaitTime
  7136  0B31  082A               	movf	??_setGestureWaitTime,w
  7137  0B32  05AB               	andwf	setGestureWaitTime@time,f
  7138                           
  7139                           ;APDS9960.c: 375:     val &= 0b11111000;
  7140  0B33  30F8               	movlw	248
  7141  0B34  00AA               	movwf	??_setGestureWaitTime
  7142  0B35  082A               	movf	??_setGestureWaitTime,w
  7143  0B36  05AC               	andwf	setGestureWaitTime@val,f
  7144                           
  7145                           ;APDS9960.c: 376:     val |= time;
  7146  0B37  082B               	movf	setGestureWaitTime@time,w
  7147  0B38  00AA               	movwf	??_setGestureWaitTime
  7148  0B39  082A               	movf	??_setGestureWaitTime,w
  7149  0B3A  04AC               	iorwf	setGestureWaitTime@val,f
  7150                           
  7151                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7152  0B3B  082C               	movf	setGestureWaitTime@val,w
  7153  0B3C  00AA               	movwf	??_setGestureWaitTime
  7154  0B3D  082A               	movf	??_setGestureWaitTime,w
  7155  0B3E  00A6               	movwf	wireWriteDataByte@val
  7156  0B3F  30A3               	movlw	163
  7157  0B40  318A  2225  318B   	fcall	_wireWriteDataByte
  7158  0B43  0020               	movlb	0	; select bank0
  7159  0B44  0826               	movf	?_wireWriteDataByte,w
  7160  0B45  0427               	iorwf	?_wireWriteDataByte+1,w
  7161  0B46  1D03               	btfss	3,2
  7162  0B47  2B4A               	goto	l6575
  7163                           
  7164                           ;APDS9960.c: 380:         return 0;
  7165  0B48  3000               	movlw	0
  7166  0B49  0008               	return
  7167  0B4A                     l6575:	
  7168                           
  7169                           ;APDS9960.c: 383:     return 1;
  7170  0B4A  3001               	movlw	1
  7171  0B4B  0008               	return
  7172  0B4C                     __end_of_setGestureWaitTime:	
  7173                           
  7174                           	psect	text9
  7175  0CD7                     __ptext9:	
  7176 ;; *************** function _setGestureLEDDrive *****************
  7177 ;; Defined at:
  7178 ;;		line 343 in file "APDS9960.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  drive           1    wreg     unsigned char 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;  drive           1   13[BANK0 ] unsigned char 
  7183 ;;  val             1   12[BANK0 ] unsigned char 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      _Bool 
  7186 ;; Registers used:
  7187 ;;		wreg, status,2, status,0, pclath, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;Total ram usage:        4 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    8
  7200 ;; This function calls:
  7201 ;;		_wireReadDataByte
  7202 ;;		_wireWriteDataByte
  7203 ;; This function is called by:
  7204 ;;		_initialize
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           
  7209                           ;psect for function _setGestureLEDDrive
  7210  0CD7                     _setGestureLEDDrive:	
  7211                           
  7212                           ;incstack = 0
  7213                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7214                           ;setGestureLEDDrive@drive stored from wreg
  7215  0CD7  0020               	movlb	0	; select bank0
  7216  0CD8  00AD               	movwf	setGestureLEDDrive@drive
  7217                           
  7218                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7219  0CD9  30A3               	movlw	163
  7220  0CDA  318A  22B4  318C   	fcall	_wireReadDataByte
  7221  0CDD  0020               	movlb	0	; select bank0
  7222  0CDE  00AA               	movwf	??_setGestureLEDDrive
  7223  0CDF  082A               	movf	??_setGestureLEDDrive,w
  7224  0CE0  00AC               	movwf	setGestureLEDDrive@val
  7225                           
  7226                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7227  0CE1  3003               	movlw	3
  7228  0CE2  00AA               	movwf	??_setGestureLEDDrive
  7229  0CE3  082A               	movf	??_setGestureLEDDrive,w
  7230  0CE4  05AD               	andwf	setGestureLEDDrive@drive,f
  7231                           
  7232                           ;APDS9960.c: 353:     drive = drive << 3;
  7233  0CE5  082D               	movf	setGestureLEDDrive@drive,w
  7234  0CE6  00AA               	movwf	??_setGestureLEDDrive
  7235  0CE7  3002               	movlw	2
  7236  0CE8                     u5785:	
  7237  0CE8  35AA               	lslf	??_setGestureLEDDrive,f
  7238  0CE9  3EFF               	addlw	-1
  7239  0CEA  1D03               	skipz
  7240  0CEB  2CE8               	goto	u5785
  7241  0CEC  352A               	lslf	??_setGestureLEDDrive,w
  7242  0CED  00AB               	movwf	??_setGestureLEDDrive+1
  7243  0CEE  082B               	movf	??_setGestureLEDDrive+1,w
  7244  0CEF  00AD               	movwf	setGestureLEDDrive@drive
  7245                           
  7246                           ;APDS9960.c: 354:     val &= 0b11100111;
  7247  0CF0  30E7               	movlw	231
  7248  0CF1  00AA               	movwf	??_setGestureLEDDrive
  7249  0CF2  082A               	movf	??_setGestureLEDDrive,w
  7250  0CF3  05AC               	andwf	setGestureLEDDrive@val,f
  7251                           
  7252                           ;APDS9960.c: 355:     val |= drive;
  7253  0CF4  082D               	movf	setGestureLEDDrive@drive,w
  7254  0CF5  00AA               	movwf	??_setGestureLEDDrive
  7255  0CF6  082A               	movf	??_setGestureLEDDrive,w
  7256  0CF7  04AC               	iorwf	setGestureLEDDrive@val,f
  7257                           
  7258                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7259  0CF8  082C               	movf	setGestureLEDDrive@val,w
  7260  0CF9  00AA               	movwf	??_setGestureLEDDrive
  7261  0CFA  082A               	movf	??_setGestureLEDDrive,w
  7262  0CFB  00A6               	movwf	wireWriteDataByte@val
  7263  0CFC  30A3               	movlw	163
  7264  0CFD  318A  2225  318C   	fcall	_wireWriteDataByte
  7265  0D00  0020               	movlb	0	; select bank0
  7266  0D01  0826               	movf	?_wireWriteDataByte,w
  7267  0D02  0427               	iorwf	?_wireWriteDataByte+1,w
  7268  0D03  1D03               	btfss	3,2
  7269  0D04  2D07               	goto	l6557
  7270                           
  7271                           ;APDS9960.c: 359:         return 0;
  7272  0D05  3000               	movlw	0
  7273  0D06  0008               	return
  7274  0D07                     l6557:	
  7275                           
  7276                           ;APDS9960.c: 362:     return 1;
  7277  0D07  3001               	movlw	1
  7278  0D08  0008               	return
  7279  0D09                     __end_of_setGestureLEDDrive:	
  7280                           
  7281                           	psect	text10
  7282  0CA5                     __ptext10:	
  7283 ;; *************** function _setGestureGain *****************
  7284 ;; Defined at:
  7285 ;;		line 320 in file "APDS9960.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  gain            1    wreg     unsigned char 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  gain            1   13[BANK0 ] unsigned char 
  7290 ;;  val             1   12[BANK0 ] unsigned char 
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      _Bool 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2, status,0, pclath, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;Total ram usage:        4 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    8
  7307 ;; This function calls:
  7308 ;;		_wireReadDataByte
  7309 ;;		_wireWriteDataByte
  7310 ;; This function is called by:
  7311 ;;		_initialize
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           
  7316                           ;psect for function _setGestureGain
  7317  0CA5                     _setGestureGain:	
  7318                           
  7319                           ;incstack = 0
  7320                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7321                           ;setGestureGain@gain stored from wreg
  7322  0CA5  0020               	movlb	0	; select bank0
  7323  0CA6  00AD               	movwf	setGestureGain@gain
  7324                           
  7325                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7326  0CA7  30A3               	movlw	163
  7327  0CA8  318A  22B4  318C   	fcall	_wireReadDataByte
  7328  0CAB  0020               	movlb	0	; select bank0
  7329  0CAC  00AA               	movwf	??_setGestureGain
  7330  0CAD  082A               	movf	??_setGestureGain,w
  7331  0CAE  00AC               	movwf	setGestureGain@val
  7332                           
  7333                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7334  0CAF  3003               	movlw	3
  7335  0CB0  00AA               	movwf	??_setGestureGain
  7336  0CB1  082A               	movf	??_setGestureGain,w
  7337  0CB2  05AD               	andwf	setGestureGain@gain,f
  7338                           
  7339                           ;APDS9960.c: 330:     gain = gain << 5;
  7340  0CB3  082D               	movf	setGestureGain@gain,w
  7341  0CB4  00AA               	movwf	??_setGestureGain
  7342  0CB5  3004               	movlw	4
  7343  0CB6                     u5765:	
  7344  0CB6  35AA               	lslf	??_setGestureGain,f
  7345  0CB7  3EFF               	addlw	-1
  7346  0CB8  1D03               	skipz
  7347  0CB9  2CB6               	goto	u5765
  7348  0CBA  352A               	lslf	??_setGestureGain,w
  7349  0CBB  00AB               	movwf	??_setGestureGain+1
  7350  0CBC  082B               	movf	??_setGestureGain+1,w
  7351  0CBD  00AD               	movwf	setGestureGain@gain
  7352                           
  7353                           ;APDS9960.c: 331:     val &= 0b10011111;
  7354  0CBE  309F               	movlw	159
  7355  0CBF  00AA               	movwf	??_setGestureGain
  7356  0CC0  082A               	movf	??_setGestureGain,w
  7357  0CC1  05AC               	andwf	setGestureGain@val,f
  7358                           
  7359                           ;APDS9960.c: 332:     val |= gain;
  7360  0CC2  082D               	movf	setGestureGain@gain,w
  7361  0CC3  00AA               	movwf	??_setGestureGain
  7362  0CC4  082A               	movf	??_setGestureGain,w
  7363  0CC5  04AC               	iorwf	setGestureGain@val,f
  7364                           
  7365                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7366  0CC6  082C               	movf	setGestureGain@val,w
  7367  0CC7  00AA               	movwf	??_setGestureGain
  7368  0CC8  082A               	movf	??_setGestureGain,w
  7369  0CC9  00A6               	movwf	wireWriteDataByte@val
  7370  0CCA  30A3               	movlw	163
  7371  0CCB  318A  2225  318C   	fcall	_wireWriteDataByte
  7372  0CCE  0020               	movlb	0	; select bank0
  7373  0CCF  0826               	movf	?_wireWriteDataByte,w
  7374  0CD0  0427               	iorwf	?_wireWriteDataByte+1,w
  7375  0CD1  1D03               	btfss	3,2
  7376  0CD2  2CD5               	goto	l6539
  7377                           
  7378                           ;APDS9960.c: 336:         return 0;
  7379  0CD3  3000               	movlw	0
  7380  0CD4  0008               	return
  7381  0CD5                     l6539:	
  7382                           
  7383                           ;APDS9960.c: 339:     return 1;
  7384  0CD5  3001               	movlw	1
  7385  0CD6  0008               	return
  7386  0CD7                     __end_of_setGestureGain:	
  7387                           
  7388                           	psect	text11
  7389  098F                     __ptext11:	
  7390 ;; *************** function _setGestureExitThresh *****************
  7391 ;; Defined at:
  7392 ;;		line 310 in file "APDS9960.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  threshold       1    wreg     unsigned char 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  threshold       1   11[BANK0 ] unsigned char 
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      _Bool 
  7399 ;; Registers used:
  7400 ;;		wreg, status,2, status,0, pclath, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;Total ram usage:        2 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    8
  7413 ;; This function calls:
  7414 ;;		_wireWriteDataByte
  7415 ;; This function is called by:
  7416 ;;		_initialize
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           
  7421                           ;psect for function _setGestureExitThresh
  7422  098F                     _setGestureExitThresh:	
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7426                           ;setGestureExitThresh@threshold stored from wreg
  7427  098F  0020               	movlb	0	; select bank0
  7428  0990  00AB               	movwf	setGestureExitThresh@threshold
  7429                           
  7430                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7431  0991  082B               	movf	setGestureExitThresh@threshold,w
  7432  0992  00AA               	movwf	??_setGestureExitThresh
  7433  0993  082A               	movf	??_setGestureExitThresh,w
  7434  0994  00A6               	movwf	wireWriteDataByte@val
  7435  0995  30A1               	movlw	161
  7436  0996  318A  2225  3189   	fcall	_wireWriteDataByte
  7437  0999  0020               	movlb	0	; select bank0
  7438  099A  0826               	movf	?_wireWriteDataByte,w
  7439  099B  0427               	iorwf	?_wireWriteDataByte+1,w
  7440  099C  1D03               	btfss	3,2
  7441  099D  29A0               	goto	l6521
  7442                           
  7443                           ;APDS9960.c: 313:         return 0;
  7444  099E  3000               	movlw	0
  7445  099F  0008               	return
  7446  09A0                     l6521:	
  7447                           
  7448                           ;APDS9960.c: 316:     return 1;
  7449  09A0  3001               	movlw	1
  7450  09A1  0008               	return
  7451  09A2                     __end_of_setGestureExitThresh:	
  7452                           
  7453                           	psect	text12
  7454  097C                     __ptext12:	
  7455 ;; *************** function _setGestureEnterThresh *****************
  7456 ;; Defined at:
  7457 ;;		line 300 in file "APDS9960.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  threshold       1    wreg     unsigned char 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  threshold       1   11[BANK0 ] unsigned char 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      _Bool 
  7464 ;; Registers used:
  7465 ;;		wreg, status,2, status,0, pclath, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;Total ram usage:        2 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    8
  7478 ;; This function calls:
  7479 ;;		_wireWriteDataByte
  7480 ;; This function is called by:
  7481 ;;		_initialize
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _setGestureEnterThresh
  7487  097C                     _setGestureEnterThresh:	
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7491                           ;setGestureEnterThresh@threshold stored from wreg
  7492  097C  0020               	movlb	0	; select bank0
  7493  097D  00AB               	movwf	setGestureEnterThresh@threshold
  7494                           
  7495                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  7496  097E  082B               	movf	setGestureEnterThresh@threshold,w
  7497  097F  00AA               	movwf	??_setGestureEnterThresh
  7498  0980  082A               	movf	??_setGestureEnterThresh,w
  7499  0981  00A6               	movwf	wireWriteDataByte@val
  7500  0982  30A0               	movlw	160
  7501  0983  318A  2225  3189   	fcall	_wireWriteDataByte
  7502  0986  0020               	movlb	0	; select bank0
  7503  0987  0826               	movf	?_wireWriteDataByte,w
  7504  0988  0427               	iorwf	?_wireWriteDataByte+1,w
  7505  0989  1D03               	btfss	3,2
  7506  098A  298D               	goto	l6511
  7507                           
  7508                           ;APDS9960.c: 303:         return 0;
  7509  098B  3000               	movlw	0
  7510  098C  0008               	return
  7511  098D                     l6511:	
  7512                           
  7513                           ;APDS9960.c: 306:     return 1;
  7514  098D  3001               	movlw	1
  7515  098E  0008               	return
  7516  098F                     __end_of_setGestureEnterThresh:	
  7517                           
  7518                           	psect	text13
  7519  0A96                     __ptext13:	
  7520 ;; *************** function _setAmbientLightGain *****************
  7521 ;; Defined at:
  7522 ;;		line 213 in file "APDS9960.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;  drive           1    wreg     unsigned char 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  drive           1   11[BANK0 ] unsigned char 
  7527 ;;  val             1   12[BANK0 ] unsigned char 
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      _Bool 
  7530 ;; Registers used:
  7531 ;;		wreg, status,2, status,0, pclath, cstack
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;Total ram usage:        3 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    8
  7544 ;; This function calls:
  7545 ;;		_wireReadDataByte
  7546 ;;		_wireWriteDataByte
  7547 ;; This function is called by:
  7548 ;;		_initialize
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _setAmbientLightGain
  7554  0A96                     _setAmbientLightGain:	
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  7558                           ;setAmbientLightGain@drive stored from wreg
  7559  0A96  0020               	movlb	0	; select bank0
  7560  0A97  00AB               	movwf	setAmbientLightGain@drive
  7561                           
  7562                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  7563  0A98  308F               	movlw	143
  7564  0A99  318A  22B4  318A   	fcall	_wireReadDataByte
  7565  0A9C  0020               	movlb	0	; select bank0
  7566  0A9D  00AA               	movwf	??_setAmbientLightGain
  7567  0A9E  082A               	movf	??_setAmbientLightGain,w
  7568  0A9F  00AC               	movwf	setAmbientLightGain@val
  7569                           
  7570                           ;APDS9960.c: 221:     drive &= 0b00000011;
  7571  0AA0  3003               	movlw	3
  7572  0AA1  00AA               	movwf	??_setAmbientLightGain
  7573  0AA2  082A               	movf	??_setAmbientLightGain,w
  7574  0AA3  05AB               	andwf	setAmbientLightGain@drive,f
  7575                           
  7576                           ;APDS9960.c: 222:     val &= 0b11111100;
  7577  0AA4  30FC               	movlw	252
  7578  0AA5  00AA               	movwf	??_setAmbientLightGain
  7579  0AA6  082A               	movf	??_setAmbientLightGain,w
  7580  0AA7  05AC               	andwf	setAmbientLightGain@val,f
  7581                           
  7582                           ;APDS9960.c: 223:     val |= drive;
  7583  0AA8  082B               	movf	setAmbientLightGain@drive,w
  7584  0AA9  00AA               	movwf	??_setAmbientLightGain
  7585  0AAA  082A               	movf	??_setAmbientLightGain,w
  7586  0AAB  04AC               	iorwf	setAmbientLightGain@val,f
  7587                           
  7588                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  7589  0AAC  082C               	movf	setAmbientLightGain@val,w
  7590  0AAD  00AA               	movwf	??_setAmbientLightGain
  7591  0AAE  082A               	movf	??_setAmbientLightGain,w
  7592  0AAF  00A6               	movwf	wireWriteDataByte@val
  7593  0AB0  308F               	movlw	143
  7594  0AB1  318A  2225         	fcall	_wireWriteDataByte
  7595  0AB3  0008               	return
  7596  0AB4                     __end_of_setAmbientLightGain:	
  7597                           
  7598                           	psect	text14
  7599  091A                     __ptext14:	
  7600 ;; *************** function _i2c1_driver_open *****************
  7601 ;; Defined at:
  7602 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, status,2
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;Total ram usage:        0 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    5
  7623 ;; This function calls:
  7624 ;;		Nothing
  7625 ;; This function is called by:
  7626 ;;		_initialize
  7627 ;;		_i2c_open
  7628 ;;		_InitI2C
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _i2c1_driver_open
  7634  091A                     _i2c1_driver_open:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  7638  091A  0024               	movlb	4	; select bank4
  7639  091B  1A95               	btfsc	21,5	;volatile
  7640  091C  0008               	return
  7641  091D  0194               	clrf	20	;volatile
  7642  091E  3028               	movlw	40
  7643  091F  0095               	movwf	21	;volatile
  7644  0920  0196               	clrf	22	;volatile
  7645  0921  3003               	movlw	3
  7646  0922  0092               	movwf	18	;volatile
  7647  0923  0008               	return
  7648  0924                     __end_of_i2c1_driver_open:	
  7649                           
  7650                           	psect	text15
  7651  0F42                     __ptext15:	
  7652 ;; *************** function _handleGesture *****************
  7653 ;; Defined at:
  7654 ;;		line 151 in file "main.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;		None
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  1    wreg      void 
  7661 ;; Registers used:
  7662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;Total ram usage:        1 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:   10
  7675 ;; This function calls:
  7676 ;;		_Display_Name
  7677 ;;		_readGesture
  7678 ;; This function is called by:
  7679 ;;		_main
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _handleGesture
  7685  0F42                     _handleGesture:	
  7686                           
  7687                           ;main.c: 157:     switch(readGesture()) {
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7691  0F42  2F7C               	goto	l7005
  7692  0F43                     l6983:	
  7693                           
  7694                           ;main.c: 165:             printed = 0;
  7695  0F43  01ED               	clrf	_printed
  7696                           
  7697                           ;main.c: 168:             name++;
  7698  0F44  3001               	movlw	1
  7699  0F45  07DE               	addwf	_name,f
  7700  0F46  3000               	movlw	0
  7701  0F47  3DDF               	addwfc	_name+1,f
  7702                           
  7703                           ;main.c: 169:             if(name > 3) {
  7704  0F48  085F               	movf	_name+1,w
  7705  0F49  3A80               	xorlw	128
  7706  0F4A  00DB               	movwf	??_handleGesture
  7707  0F4B  3080               	movlw	128
  7708  0F4C  025B               	subwf	??_handleGesture,w
  7709  0F4D  1D03               	skipz
  7710  0F4E  2F51               	goto	u6425
  7711  0F4F  3004               	movlw	4
  7712  0F50  025E               	subwf	_name,w
  7713  0F51                     u6425:	
  7714  0F51  1C03               	skipc
  7715  0F52  2F56               	goto	l6991
  7716                           
  7717                           ;main.c: 170:                 name = 0;
  7718  0F53  0020               	movlb	0	; select bank0
  7719  0F54  01DE               	clrf	_name
  7720  0F55  01DF               	clrf	_name+1
  7721  0F56                     l6991:	
  7722                           
  7723                           ;main.c: 172:             Display_Name(names[name]);
  7724  0F56  0020               	movlb	0	; select bank0
  7725  0F57  355E               	lslf	_name,w
  7726  0F58  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7727  0F59  0086               	movwf	6
  7728  0F5A  3001               	movlw	1	; select bank2/3
  7729  0F5B  0087               	movwf	7
  7730  0F5C  3F40               	moviw [0]fsr1
  7731  0F5D  00A5               	movwf	Display_Name@string1
  7732  0F5E  3F41               	moviw [1]fsr1
  7733  0F5F  00A6               	movwf	Display_Name@string1+1
  7734  0F60  318D  253F  318F   	fcall	_Display_Name
  7735                           
  7736                           ;main.c: 173:             break;
  7737  0F63  2F99               	goto	l7007
  7738  0F64                     l6993:	
  7739                           
  7740                           ;main.c: 175:             printed = 0;
  7741  0F64  01ED               	clrf	_printed
  7742                           
  7743                           ;main.c: 176:             --name;
  7744  0F65  30FF               	movlw	255
  7745  0F66  07DE               	addwf	_name,f
  7746  0F67  30FF               	movlw	255
  7747  0F68  3DDF               	addwfc	_name+1,f
  7748                           
  7749                           ;main.c: 177:             if(name < 0) {
  7750  0F69  1FDF               	btfss	_name+1,7
  7751  0F6A  2F6F               	goto	l7001
  7752                           
  7753                           ;main.c: 178:                 name = 3;
  7754  0F6B  3003               	movlw	3
  7755  0F6C  00DE               	movwf	_name
  7756  0F6D  3000               	movlw	0
  7757  0F6E  00DF               	movwf	_name+1
  7758  0F6F                     l7001:	
  7759                           
  7760                           ;main.c: 180:             Display_Name(names[name]);
  7761  0F6F  355E               	lslf	_name,w
  7762  0F70  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7763  0F71  0086               	movwf	6
  7764  0F72  3001               	movlw	1	; select bank2/3
  7765  0F73  0087               	movwf	7
  7766  0F74  3F40               	moviw [0]fsr1
  7767  0F75  00A5               	movwf	Display_Name@string1
  7768  0F76  3F41               	moviw [1]fsr1
  7769  0F77  00A6               	movwf	Display_Name@string1+1
  7770  0F78  318D  253F  318F   	fcall	_Display_Name
  7771                           
  7772                           ;main.c: 181:             break;
  7773  0F7B  2F99               	goto	l7007
  7774  0F7C                     l7005:	
  7775  0F7C  3186  26CF  318F   	fcall	_readGesture
  7776                           
  7777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7778                           ; Switch size 1, requested type "simple"
  7779                           ; Number of cases is 1, Range of values is 0 to 0
  7780                           ; switch strategies available:
  7781                           ; Name         Instructions Cycles
  7782                           ; simple_byte            4     3 (average)
  7783                           ; direct_byte            8     6 (fixed)
  7784                           ; jumptable            260     6 (fixed)
  7785                           ;	Chosen strategy is simple_byte
  7786  0F7F  0020               	movlb	0	; select bank0
  7787  0F80  0850               	movf	?_readGesture+1,w
  7788  0F81  3A00               	xorlw	0	; case 0
  7789  0F82  1903               	skipnz
  7790  0F83  2F85               	goto	l7249
  7791  0F84  2F99               	goto	l7007
  7792  0F85                     l7249:	
  7793                           
  7794                           ; Switch size 1, requested type "simple"
  7795                           ; Number of cases is 6, Range of values is 1 to 6
  7796                           ; switch strategies available:
  7797                           ; Name         Instructions Cycles
  7798                           ; simple_byte           19    10 (average)
  7799                           ; direct_byte           21     9 (fixed)
  7800                           ; jumptable            263     9 (fixed)
  7801                           ;	Chosen strategy is simple_byte
  7802  0F85  084F               	movf	?_readGesture,w
  7803  0F86  3A01               	xorlw	1	; case 1
  7804  0F87  1903               	skipnz
  7805  0F88  2F43               	goto	l6983
  7806  0F89  3A03               	xorlw	3	; case 2
  7807  0F8A  1903               	skipnz
  7808  0F8B  2F64               	goto	l6993
  7809  0F8C  3A01               	xorlw	1	; case 3
  7810  0F8D  1903               	skipnz
  7811  0F8E  2F99               	goto	l7007
  7812  0F8F  3A07               	xorlw	7	; case 4
  7813  0F90  1903               	skipnz
  7814  0F91  2F99               	goto	l7007
  7815  0F92  3A01               	xorlw	1	; case 5
  7816  0F93  1903               	skipnz
  7817  0F94  2F99               	goto	l7007
  7818  0F95  3A03               	xorlw	3	; case 6
  7819  0F96  1903               	skipnz
  7820  0F97  2F99               	goto	l7007
  7821  0F98  2F99               	goto	l7007
  7822  0F99                     l7007:	
  7823                           
  7824                           ;main.c: 193:     printed = 0;
  7825  0F99  0020               	movlb	0	; select bank0
  7826  0F9A  01ED               	clrf	_printed
  7827  0F9B  0008               	return
  7828  0F9C                     __end_of_handleGesture:	
  7829                           
  7830                           	psect	text16
  7831  06CF                     __ptext16:	
  7832 ;; *************** function _readGesture *****************
  7833 ;; Defined at:
  7834 ;;		line 556 in file "APDS9960.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  7839 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  7840 ;;  i               2   57[BANK0 ] int 
  7841 ;;  bytes_read      2   54[BANK0 ] int 
  7842 ;;  motion          2   51[BANK0 ] int 
  7843 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  7844 ;;  gstatus         1   53[BANK0 ] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  2   47[BANK0 ] int 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7854 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;Total ram usage:      140 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    9
  7861 ;; This function calls:
  7862 ;;		_decodeGesture
  7863 ;;		_getMode
  7864 ;;		_isGestureAvailable
  7865 ;;		_processGestureData
  7866 ;;		_resetGestureParameters
  7867 ;;		_wireReadDataBlock
  7868 ;;		_wireReadDataByte
  7869 ;; This function is called by:
  7870 ;;		_handleGesture
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           
  7875                           ;psect for function _readGesture
  7876  06CF                     _readGesture:	
  7877                           
  7878                           ;APDS9960.c: 559:     int bytes_read = 0;
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7882  06CF  0020               	movlb	0	; select bank0
  7883  06D0  01D6               	clrf	readGesture@bytes_read
  7884  06D1  01D7               	clrf	readGesture@bytes_read+1
  7885                           
  7886                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  7887  06D2  3189  2169  3186   	fcall	_isGestureAvailable
  7888  06D5  3A00               	xorlw	0
  7889  06D6  1903               	skipnz
  7890  06D7  2EDE               	goto	l6353
  7891  06D8  3189  2111  3186   	fcall	_getMode
  7892  06DB  3941               	andlw	65
  7893  06DC  1D03               	btfss	3,2
  7894  06DD  2F93               	goto	l6357
  7895  06DE                     l6353:	
  7896                           
  7897                           ;APDS9960.c: 568:         return DIR_NONE;
  7898  06DE  0020               	movlb	0	; select bank0
  7899  06DF  01CF               	clrf	?_readGesture
  7900  06E0  01D0               	clrf	?_readGesture+1
  7901  06E1  0008               	return
  7902  06E2                     l6363:	
  7903                           ;APDS9960.c: 569:     }
  7904                           
  7905                           
  7906                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  7907  06E2  30AE               	movlw	174
  7908  06E3  318A  22B4  3186   	fcall	_wireReadDataByte
  7909  06E6  0020               	movlb	0	; select bank0
  7910  06E7  00D1               	movwf	??_readGesture
  7911  06E8  0851               	movf	??_readGesture,w
  7912  06E9  00D8               	movwf	readGesture@fifo_level
  7913                           
  7914                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  7915  06EA  0858               	movf	readGesture@fifo_level,w
  7916  06EB  1903               	btfsc	3,2
  7917  06EC  2F93               	goto	l6357
  7918                           
  7919                           ;APDS9960.c: 592:               if(fifo_level < 17)
  7920  06ED  3011               	movlw	17
  7921  06EE  0258               	subwf	readGesture@fifo_level,w
  7922  06EF  1803               	skipnc
  7923  06F0  2EF5               	goto	l6371
  7924                           
  7925                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7926  06F1  3020               	movlw	low readGesture@fifo_data
  7927  06F2  00A6               	movwf	wireReadDataBlock@val
  7928  06F3  3001               	movlw	high readGesture@fifo_data
  7929  06F4  2EF8               	goto	L1
  7930  06F5                     l6371:	
  7931                           ;APDS9960.c: 597:               } else
  7932                           
  7933                           
  7934                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7935  06F5  30A0               	movlw	low readGesture@fifo_data2
  7936  06F6  00A6               	movwf	wireReadDataBlock@val
  7937  06F7  3000               	movlw	high readGesture@fifo_data2
  7938  06F8                     L1:	
  7939  06F8  00A7               	movwf	wireReadDataBlock@val+1
  7940  06F9  0858               	movf	readGesture@fifo_level,w
  7941  06FA  00D1               	movwf	??_readGesture
  7942  06FB  01D2               	clrf	??_readGesture+1
  7943  06FC  35D1               	lslf	??_readGesture,f
  7944  06FD  0DD2               	rlf	??_readGesture+1,f
  7945  06FE  35D1               	lslf	??_readGesture,f
  7946  06FF  0DD2               	rlf	??_readGesture+1,f
  7947  0700  0851               	movf	??_readGesture,w
  7948  0701  00A8               	movwf	wireReadDataBlock@len
  7949  0702  0852               	movf	??_readGesture+1,w
  7950  0703  00A9               	movwf	wireReadDataBlock@len+1
  7951  0704  30FC               	movlw	252
  7952  0705  318E  2608  3186   	fcall	_wireReadDataBlock
  7953  0708  0020               	movlb	0	; select bank0
  7954  0709  0827               	movf	?_wireReadDataBlock+1,w
  7955  070A  00D7               	movwf	readGesture@bytes_read+1
  7956  070B  0826               	movf	?_wireReadDataBlock,w
  7957  070C  00D6               	movwf	readGesture@bytes_read
  7958                           
  7959                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  7960  070D  0A56               	incf	readGesture@bytes_read,w
  7961  070E  1D03               	skipz
  7962  070F  2F18               	goto	l6379
  7963  0710  0A57               	incf	readGesture@bytes_read+1,w
  7964  0711  1D03               	btfss	3,2
  7965  0712  2F18               	goto	l6379
  7966                           
  7967                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  7968  0713  30FF               	movlw	255
  7969  0714  00CF               	movwf	?_readGesture
  7970  0715  3000               	movlw	0
  7971  0716  00D0               	movwf	?_readGesture+1
  7972  0717  0008               	return
  7973  0718                     l6379:	
  7974                           
  7975                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  7976  0718  0857               	movf	readGesture@bytes_read+1,w
  7977  0719  3A80               	xorlw	128
  7978  071A  00D1               	movwf	??_readGesture
  7979  071B  3080               	movlw	128
  7980  071C  0251               	subwf	??_readGesture,w
  7981  071D  1D03               	skipz
  7982  071E  2F21               	goto	u5635
  7983  071F  3004               	movlw	4
  7984  0720  0256               	subwf	readGesture@bytes_read,w
  7985  0721                     u5635:	
  7986  0721  1C03               	skipc
  7987  0722  2F93               	goto	l6357
  7988                           
  7989                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  7990  0723  0020               	movlb	0	; select bank0
  7991  0724  01D9               	clrf	readGesture@i
  7992  0725  01DA               	clrf	readGesture@i+1
  7993  0726                     l6391:	
  7994  0726  085A               	movf	readGesture@i+1,w
  7995  0727  3A80               	xorlw	128
  7996  0728  00D1               	movwf	??_readGesture
  7997  0729  0857               	movf	readGesture@bytes_read+1,w
  7998  072A  3A80               	xorlw	128
  7999  072B  0251               	subwf	??_readGesture,w
  8000  072C  1D03               	skipz
  8001  072D  2F30               	goto	u5645
  8002  072E  0856               	movf	readGesture@bytes_read,w
  8003  072F  0259               	subwf	readGesture@i,w
  8004  0730                     u5645:	
  8005  0730  1803               	btfsc	3,0
  8006  0731  2F87               	goto	l6393
  8007                           
  8008                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  8009  0732  0020               	movlb	0	; select bank0
  8010  0733  0859               	movf	readGesture@i,w
  8011  0734  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8012  0735  0086               	movwf	6
  8013  0736  3001               	movlw	1	; select bank2/3
  8014  0737  0087               	movwf	7
  8015  0738  0801               	movf	1,w
  8016  0739  00D1               	movwf	??_readGesture
  8017  073A  0024               	movlb	4	; select bank4
  8018  073B  0860               	movf	(_gesture_data_^(0+512)+64),w
  8019  073C  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8020  073D  0086               	movwf	6
  8021  073E  3002               	movlw	2	; select bank4/5
  8022  073F  0087               	movwf	7
  8023  0740  0020               	movlb	0	; select bank0
  8024  0741  0851               	movf	??_readGesture,w
  8025  0742  0081               	movwf	1
  8026                           
  8027                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8028  0743  0859               	movf	readGesture@i,w
  8029  0744  3E01               	addlw	1
  8030  0745  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8031  0746  0086               	movwf	6
  8032  0747  3001               	movlw	1	; select bank2/3
  8033  0748  0087               	movwf	7
  8034  0749  0801               	movf	1,w
  8035  074A  00D1               	movwf	??_readGesture
  8036  074B  0024               	movlb	4	; select bank4
  8037  074C  0860               	movf	(_gesture_data_^(0+512)+64),w
  8038  074D  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8039  074E  0086               	movwf	6
  8040  074F  3002               	movlw	2	; select bank4/5
  8041  0750  0087               	movwf	7
  8042  0751  0020               	movlb	0	; select bank0
  8043  0752  0851               	movf	??_readGesture,w
  8044  0753  0081               	movwf	1
  8045                           
  8046                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8047  0754  0859               	movf	readGesture@i,w
  8048  0755  3E02               	addlw	2
  8049  0756  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8050  0757  0086               	movwf	6
  8051  0758  3001               	movlw	1	; select bank2/3
  8052  0759  0087               	movwf	7
  8053  075A  0801               	movf	1,w
  8054  075B  00D1               	movwf	??_readGesture
  8055  075C  0024               	movlb	4	; select bank4
  8056  075D  0860               	movf	(_gesture_data_^(0+512)+64),w
  8057  075E  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8058  075F  0086               	movwf	6
  8059  0760  3002               	movlw	2	; select bank4/5
  8060  0761  0087               	movwf	7
  8061  0762  0020               	movlb	0	; select bank0
  8062  0763  0851               	movf	??_readGesture,w
  8063  0764  0081               	movwf	1
  8064                           
  8065                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8066  0765  0859               	movf	readGesture@i,w
  8067  0766  3E03               	addlw	3
  8068  0767  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8069  0768  0086               	movwf	6
  8070  0769  3001               	movlw	1	; select bank2/3
  8071  076A  0087               	movwf	7
  8072  076B  0801               	movf	1,w
  8073  076C  00D1               	movwf	??_readGesture
  8074  076D  0024               	movlb	4	; select bank4
  8075  076E  0860               	movf	(_gesture_data_^(0+512)+64),w
  8076  076F  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8077  0770  0086               	movwf	6
  8078  0771  3002               	movlw	2	; select bank4/5
  8079  0772  0087               	movwf	7
  8080  0773  0020               	movlb	0	; select bank0
  8081  0774  0851               	movf	??_readGesture,w
  8082  0775  0081               	movwf	1
  8083                           
  8084                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8085  0776  3001               	movlw	1
  8086  0777  00D1               	movwf	??_readGesture
  8087  0778  0851               	movf	??_readGesture,w
  8088  0779  0024               	movlb	4	; select bank4
  8089  077A  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8090                           
  8091                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8092  077B  3001               	movlw	1
  8093  077C  0020               	movlb	0	; select bank0
  8094  077D  00D1               	movwf	??_readGesture
  8095  077E  0851               	movf	??_readGesture,w
  8096  077F  0024               	movlb	4	; select bank4
  8097  0780  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8098                           
  8099                           ;APDS9960.c: 626:                     }
  8100  0781  3004               	movlw	4
  8101  0782  0020               	movlb	0	; select bank0
  8102  0783  07D9               	addwf	readGesture@i,f
  8103  0784  3000               	movlw	0
  8104  0785  3DDA               	addwfc	readGesture@i+1,f
  8105  0786  2F26               	goto	l6391
  8106  0787                     l6393:	
  8107                           
  8108                           ;APDS9960.c: 629:                     if( processGestureData() )
  8109  0787  3180  2066  3186   	fcall	_processGestureData
  8110  078A  3A00               	xorlw	0
  8111  078B  1903               	skipnz
  8112  078C  2F90               	goto	l6397
  8113                           
  8114                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8115  078D  3183  2335  3186   	fcall	_decodeGesture
  8116  0790                     l6397:	
  8117                           
  8118                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8119  0790  0024               	movlb	4	; select bank4
  8120  0791  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8121                           
  8122                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8123  0792  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8124  0793                     l6357:	
  8125                           
  8126                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8127  0793  3005               	movlw	5
  8128  0794  0020               	movlb	0	; select bank0
  8129  0795  00D1               	movwf	??_readGesture
  8130  0796  30DD               	movlw	221
  8131  0797                     u6567:	
  8132  0797  0B89               	decfsz	9,f
  8133  0798  2F97               	goto	u6567
  8134  0799  0BD1               	decfsz	??_readGesture,f
  8135  079A  2F97               	goto	u6567
  8136  079B  3200               	nop2
  8137                           
  8138                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8139  079C  30AF               	movlw	175
  8140  079D  318A  22B4  3186   	fcall	_wireReadDataByte
  8141  07A0  0020               	movlb	0	; select bank0
  8142  07A1  00D1               	movwf	??_readGesture
  8143  07A2  0851               	movf	??_readGesture,w
  8144  07A3  00D5               	movwf	readGesture@gstatus
  8145                           
  8146                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8147  07A4  1855               	btfsc	readGesture@gstatus,0
  8148  07A5  2EE2               	goto	l6363
  8149                           
  8150                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8151  07A6  3005               	movlw	5
  8152  07A7  0020               	movlb	0	; select bank0
  8153  07A8  00D1               	movwf	??_readGesture
  8154  07A9  30DD               	movlw	221
  8155  07AA                     u6577:	
  8156  07AA  0B89               	decfsz	9,f
  8157  07AB  2FAA               	goto	u6577
  8158  07AC  0BD1               	decfsz	??_readGesture,f
  8159  07AD  2FAA               	goto	u6577
  8160  07AE  3200               	nop2
  8161                           
  8162                           ;APDS9960.c: 646:             decodeGesture();
  8163  07AF  3183  2335  3186   	fcall	_decodeGesture
  8164                           
  8165                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8166  07B2  0022               	movlb	2	; select bank2
  8167  07B3  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8168  07B4  0020               	movlb	0	; select bank0
  8169  07B5  00D4               	movwf	readGesture@motion+1
  8170  07B6  0022               	movlb	2	; select bank2
  8171  07B7  0868               	movf	_gesture_motion_^(0+256),w
  8172  07B8  0020               	movlb	0	; select bank0
  8173  07B9  00D3               	movwf	readGesture@motion
  8174                           
  8175                           ;APDS9960.c: 649:             resetGestureParameters();
  8176  07BA  318A  220D         	fcall	_resetGestureParameters
  8177                           
  8178                           ;APDS9960.c: 651:             return motion;
  8179  07BC  0020               	movlb	0	; select bank0
  8180  07BD  0854               	movf	readGesture@motion+1,w
  8181  07BE  00D0               	movwf	?_readGesture+1
  8182  07BF  0853               	movf	readGesture@motion,w
  8183  07C0  00CF               	movwf	?_readGesture
  8184  07C1  0008               	return
  8185  07C2                     __end_of_readGesture:	
  8186                           
  8187                           	psect	text17
  8188  0E08                     __ptext17:	
  8189 ;; *************** function _wireReadDataBlock *****************
  8190 ;; Defined at:
  8191 ;;		line 847 in file "APDS9960.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  reg             1    wreg     unsigned char 
  8194 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8195 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8196 ;;  len             2    8[BANK0 ] unsigned int 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  reg             1   15[BANK0 ] unsigned char 
  8199 ;;  j               1   16[BANK0 ] unsigned char 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  2    6[BANK0 ] int 
  8202 ;; Registers used:
  8203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8209 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;Total ram usage:       11 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    7
  8216 ;; This function calls:
  8217 ;;		_I2C_ReStart
  8218 ;;		_I2C_Read_Byte
  8219 ;;		_I2C_Send_NACK
  8220 ;;		_I2C_Start
  8221 ;;		_I2C_Stop
  8222 ;;		_I2C_Write_Byte
  8223 ;; This function is called by:
  8224 ;;		_readGesture
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _wireReadDataBlock
  8230  0E08                     _wireReadDataBlock:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8234                           ;wireReadDataBlock@reg stored from wreg
  8235  0E08  0020               	movlb	0	; select bank0
  8236  0E09  00AF               	movwf	wireReadDataBlock@reg
  8237                           
  8238                           ;APDS9960.c: 851:     I2C_Start();
  8239  0E0A  3188  205F  318E   	fcall	_I2C_Start
  8240                           
  8241                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8242  0E0D  3072               	movlw	114
  8243  0E0E  318A  2240  318E   	fcall	_I2C_Write_Byte
  8244                           
  8245                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8246  0E11  0020               	movlb	0	; select bank0
  8247  0E12  082F               	movf	wireReadDataBlock@reg,w
  8248  0E13  318A  2240  318E   	fcall	_I2C_Write_Byte
  8249                           
  8250                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8251  0E16  0020               	movlb	0	; select bank0
  8252  0E17  01B0               	clrf	wireReadDataBlock@j
  8253  0E18                     l5937:	
  8254  0E18  0830               	movf	wireReadDataBlock@j,w
  8255  0E19  00AA               	movwf	??_wireReadDataBlock
  8256  0E1A  01AB               	clrf	??_wireReadDataBlock+1
  8257  0E1B  0829               	movf	wireReadDataBlock@len+1,w
  8258  0E1C  022B               	subwf	??_wireReadDataBlock+1,w
  8259  0E1D  1D03               	skipz
  8260  0E1E  2E21               	goto	u4795
  8261  0E1F  0828               	movf	wireReadDataBlock@len,w
  8262  0E20  022A               	subwf	??_wireReadDataBlock,w
  8263  0E21                     u4795:	
  8264  0E21  1803               	btfsc	3,0
  8265  0E22  2E47               	goto	l5939
  8266                           
  8267                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8268  0E23  3188  2050  318E   	fcall	_I2C_ReStart
  8269                           
  8270                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8271  0E26  3073               	movlw	115
  8272  0E27  318A  2240  318E   	fcall	_I2C_Write_Byte
  8273                           
  8274                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8275  0E2A  3189  2124  318E   	fcall	_I2C_Read_Byte
  8276  0E2D  0020               	movlb	0	; select bank0
  8277  0E2E  00AA               	movwf	??_wireReadDataBlock
  8278  0E2F  0830               	movf	wireReadDataBlock@j,w
  8279  0E30  00AB               	movwf	??_wireReadDataBlock+1
  8280  0E31  01AC               	clrf	??_wireReadDataBlock+2
  8281  0E32  082B               	movf	??_wireReadDataBlock+1,w
  8282  0E33  0726               	addwf	wireReadDataBlock@val,w
  8283  0E34  00AD               	movwf	??_wireReadDataBlock+3
  8284  0E35  082C               	movf	??_wireReadDataBlock+2,w
  8285  0E36  3D27               	addwfc	wireReadDataBlock@val+1,w
  8286  0E37  00AE               	movwf	??_wireReadDataBlock+4
  8287  0E38  082D               	movf	??_wireReadDataBlock+3,w
  8288  0E39  0086               	movwf	6
  8289  0E3A  082E               	movf	??_wireReadDataBlock+4,w
  8290  0E3B  0087               	movwf	7
  8291  0E3C  082A               	movf	??_wireReadDataBlock,w
  8292  0E3D  0081               	movwf	1
  8293                           
  8294                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8295  0E3E  3188  2059  318E   	fcall	_I2C_Send_NACK
  8296                           
  8297                           ;APDS9960.c: 864:     }
  8298  0E41  3001               	movlw	1
  8299  0E42  0020               	movlb	0	; select bank0
  8300  0E43  00AA               	movwf	??_wireReadDataBlock
  8301  0E44  082A               	movf	??_wireReadDataBlock,w
  8302  0E45  07B0               	addwf	wireReadDataBlock@j,f
  8303  0E46  2E18               	goto	l5937
  8304  0E47                     l5939:	
  8305                           
  8306                           ;APDS9960.c: 866:     I2C_Stop();
  8307  0E47  3188  2065         	fcall	_I2C_Stop
  8308                           
  8309                           ;APDS9960.c: 867:     return (int)j;
  8310  0E49  0020               	movlb	0	; select bank0
  8311  0E4A  0830               	movf	wireReadDataBlock@j,w
  8312  0E4B  00AA               	movwf	??_wireReadDataBlock
  8313  0E4C  01AB               	clrf	??_wireReadDataBlock+1
  8314  0E4D  082A               	movf	??_wireReadDataBlock,w
  8315  0E4E  00A6               	movwf	?_wireReadDataBlock
  8316  0E4F  082B               	movf	??_wireReadDataBlock+1,w
  8317  0E50  00A7               	movwf	?_wireReadDataBlock+1
  8318  0E51  0008               	return
  8319  0E52                     __end_of_wireReadDataBlock:	
  8320                           
  8321                           	psect	text18
  8322  0066                     __ptext18:	
  8323 ;; *************** function _processGestureData *****************
  8324 ;; Defined at:
  8325 ;;		line 657 in file "APDS9960.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;		None
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  i               2   45[BANK0 ] int 
  8330 ;;  lr_delta        2   43[BANK0 ] int 
  8331 ;;  ud_delta        2   41[BANK0 ] int 
  8332 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8333 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8334 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8335 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8336 ;;  r_first         1   40[BANK0 ] unsigned char 
  8337 ;;  l_first         1   39[BANK0 ] unsigned char 
  8338 ;;  d_first         1   38[BANK0 ] unsigned char 
  8339 ;;  u_first         1   37[BANK0 ] unsigned char 
  8340 ;;  r_last          1   36[BANK0 ] unsigned char 
  8341 ;;  l_last          1   35[BANK0 ] unsigned char 
  8342 ;;  d_last          1   34[BANK0 ] unsigned char 
  8343 ;;  u_last          1   33[BANK0 ] unsigned char 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      _Bool 
  8346 ;; Registers used:
  8347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;Total ram usage:       32 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    6
  8360 ;; This function calls:
  8361 ;;		___awdiv
  8362 ;;		___wmul
  8363 ;; This function is called by:
  8364 ;;		_readGesture
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function _processGestureData
  8370  0066                     _processGestureData:	
  8371                           
  8372                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8376  0066  0020               	movlb	0	; select bank0
  8377  0067  01C5               	clrf	processGestureData@u_first
  8378                           
  8379                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8380  0068  01C6               	clrf	processGestureData@d_first
  8381                           
  8382                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8383  0069  01C7               	clrf	processGestureData@l_first
  8384                           
  8385                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8386  006A  01C8               	clrf	processGestureData@r_first
  8387                           
  8388                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8389  006B  01C1               	clrf	processGestureData@u_last
  8390                           
  8391                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8392  006C  01C2               	clrf	processGestureData@d_last
  8393                           
  8394                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8395  006D  01C3               	clrf	processGestureData@l_last
  8396                           
  8397                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8398  006E  01C4               	clrf	processGestureData@r_last
  8399                           
  8400                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8401  006F  3005               	movlw	5
  8402  0070  0024               	movlb	4	; select bank4
  8403  0071  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8404  0072  1803               	skipnc
  8405  0073  2876               	goto	l5953
  8406  0074                     l5949:	
  8407                           
  8408                           ;APDS9960.c: 677:         return 0;
  8409  0074  3000               	movlw	0
  8410  0075  0008               	return
  8411  0076                     l5953:	
  8412                           
  8413                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8414  0076  3021               	movlw	33
  8415  0077  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8416  0078  1803               	skipnc
  8417  0079  2940               	goto	l6003
  8418  007A  0861               	movf	(_gesture_data_^(0+512)+65),w
  8419  007B  1903               	btfsc	3,2
  8420  007C  2940               	goto	l6003
  8421                           
  8422                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8423  007D  0020               	movlb	0	; select bank0
  8424  007E  01CD               	clrf	processGestureData@i
  8425  007F  01CE               	clrf	processGestureData@i+1
  8426  0080  2885               	goto	l1050
  8427  0081                     l5969:	
  8428                           ;APDS9960.c: 695:                 break;
  8429                           
  8430                           
  8431                           ;APDS9960.c: 697:         }
  8432  0081  3001               	movlw	1
  8433  0082  07CD               	addwf	processGestureData@i,f
  8434  0083  3000               	movlw	0
  8435  0084  3DCE               	addwfc	processGestureData@i+1,f
  8436  0085                     l1050:	
  8437  0085  084E               	movf	processGestureData@i+1,w
  8438  0086  3A80               	xorlw	128
  8439  0087  00AF               	movwf	??_processGestureData
  8440  0088  3080               	movlw	128
  8441  0089  022F               	subwf	??_processGestureData,w
  8442  008A  1D03               	skipz
  8443  008B  2890               	goto	u4875
  8444  008C  0024               	movlb	4	; select bank4
  8445  008D  0861               	movf	(_gesture_data_^(0+512)+65),w
  8446  008E  0020               	movlb	0	; select bank0
  8447  008F  024D               	subwf	processGestureData@i,w
  8448  0090                     u4875:	
  8449  0090  1803               	btfsc	3,0
  8450  0091  28DB               	goto	l5971
  8451                           
  8452                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  8453  0092  0020               	movlb	0	; select bank0
  8454  0093  084D               	movf	processGestureData@i,w
  8455  0094  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8456  0095  0086               	movwf	6
  8457  0096  3002               	movlw	2	; select bank4/5
  8458  0097  0087               	movwf	7
  8459  0098  300B               	movlw	11
  8460  0099  0201               	subwf	1,w
  8461  009A  1C03               	skipc
  8462  009B  2881               	goto	l5969
  8463  009C  084D               	movf	processGestureData@i,w
  8464  009D  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8465  009E  0086               	movwf	6
  8466  009F  3002               	movlw	2	; select bank4/5
  8467  00A0  0087               	movwf	7
  8468  00A1  300B               	movlw	11
  8469  00A2  0201               	subwf	1,w
  8470  00A3  1C03               	skipc
  8471  00A4  2881               	goto	l5969
  8472  00A5  084D               	movf	processGestureData@i,w
  8473  00A6  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8474  00A7  0086               	movwf	6
  8475  00A8  3002               	movlw	2	; select bank4/5
  8476  00A9  0087               	movwf	7
  8477  00AA  300B               	movlw	11
  8478  00AB  0201               	subwf	1,w
  8479  00AC  1C03               	skipc
  8480  00AD  2881               	goto	l5969
  8481  00AE  084D               	movf	processGestureData@i,w
  8482  00AF  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8483  00B0  0086               	movwf	6
  8484  00B1  3002               	movlw	2	; select bank4/5
  8485  00B2  0087               	movwf	7
  8486  00B3  300B               	movlw	11
  8487  00B4  0201               	subwf	1,w
  8488  00B5  1C03               	skipc
  8489  00B6  2881               	goto	l5969
  8490                           
  8491                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  8492  00B7  084D               	movf	processGestureData@i,w
  8493  00B8  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8494  00B9  0086               	movwf	6
  8495  00BA  3002               	movlw	2	; select bank4/5
  8496  00BB  0087               	movwf	7
  8497  00BC  0801               	movf	1,w
  8498  00BD  00AF               	movwf	??_processGestureData
  8499  00BE  082F               	movf	??_processGestureData,w
  8500  00BF  00C5               	movwf	processGestureData@u_first
  8501                           
  8502                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  8503  00C0  084D               	movf	processGestureData@i,w
  8504  00C1  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8505  00C2  0086               	movwf	6
  8506  00C3  3002               	movlw	2	; select bank4/5
  8507  00C4  0087               	movwf	7
  8508  00C5  0801               	movf	1,w
  8509  00C6  00AF               	movwf	??_processGestureData
  8510  00C7  082F               	movf	??_processGestureData,w
  8511  00C8  00C6               	movwf	processGestureData@d_first
  8512                           
  8513                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  8514  00C9  084D               	movf	processGestureData@i,w
  8515  00CA  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8516  00CB  0086               	movwf	6
  8517  00CC  3002               	movlw	2	; select bank4/5
  8518  00CD  0087               	movwf	7
  8519  00CE  0801               	movf	1,w
  8520  00CF  00AF               	movwf	??_processGestureData
  8521  00D0  082F               	movf	??_processGestureData,w
  8522  00D1  00C7               	movwf	processGestureData@l_first
  8523                           
  8524                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  8525  00D2  084D               	movf	processGestureData@i,w
  8526  00D3  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8527  00D4  0086               	movwf	6
  8528  00D5  3002               	movlw	2	; select bank4/5
  8529  00D6  0087               	movwf	7
  8530  00D7  0801               	movf	1,w
  8531  00D8  00AF               	movwf	??_processGestureData
  8532  00D9  082F               	movf	??_processGestureData,w
  8533  00DA  00C8               	movwf	processGestureData@r_first
  8534  00DB                     l5971:	
  8535                           
  8536                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  8537  00DB  0020               	movlb	0	; select bank0
  8538  00DC  0845               	movf	processGestureData@u_first,w
  8539  00DD  1903               	btfsc	3,2
  8540  00DE  2874               	goto	l5949
  8541  00DF  0846               	movf	processGestureData@d_first,w
  8542  00E0  1903               	btfsc	3,2
  8543  00E1  2874               	goto	l5949
  8544  00E2  0847               	movf	processGestureData@l_first,w
  8545  00E3  1903               	btfsc	3,2
  8546  00E4  2874               	goto	l5949
  8547  00E5  0848               	movf	processGestureData@r_first,w
  8548  00E6  1903               	btfsc	3,2
  8549  00E7  2874               	goto	l5949
  8550                           
  8551                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  8552  00E8  0024               	movlb	4	; select bank4
  8553  00E9  0861               	movf	(_gesture_data_^(0+512)+65),w
  8554  00EA  3EFF               	addlw	255
  8555  00EB  0020               	movlb	0	; select bank0
  8556  00EC  00CD               	movwf	processGestureData@i
  8557  00ED  30FF               	movlw	255
  8558  00EE  1803               	skipnc
  8559  00EF  3000               	movlw	0
  8560  00F0  00CE               	movwf	processGestureData@i+1
  8561                           
  8562                           ;APDS9960.c: 717:                 break;
  8563  00F1  28F6               	goto	l5985
  8564  00F2                     l5999:	
  8565                           
  8566                           ;APDS9960.c: 719:         }
  8567  00F2  30FF               	movlw	255
  8568  00F3  07CD               	addwf	processGestureData@i,f
  8569  00F4  30FF               	movlw	255
  8570  00F5  3DCE               	addwfc	processGestureData@i+1,f
  8571  00F6                     l5985:	
  8572  00F6  1BCE               	btfsc	processGestureData@i+1,7
  8573  00F7  2940               	goto	l6003
  8574                           
  8575                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  8576  00F8  084D               	movf	processGestureData@i,w
  8577  00F9  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8578  00FA  0086               	movwf	6
  8579  00FB  3002               	movlw	2	; select bank4/5
  8580  00FC  0087               	movwf	7
  8581  00FD  300B               	movlw	11
  8582  00FE  0201               	subwf	1,w
  8583  00FF  1C03               	skipc
  8584  0100  28F2               	goto	l5999
  8585  0101  084D               	movf	processGestureData@i,w
  8586  0102  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8587  0103  0086               	movwf	6
  8588  0104  3002               	movlw	2	; select bank4/5
  8589  0105  0087               	movwf	7
  8590  0106  300B               	movlw	11
  8591  0107  0201               	subwf	1,w
  8592  0108  1C03               	skipc
  8593  0109  28F2               	goto	l5999
  8594  010A  084D               	movf	processGestureData@i,w
  8595  010B  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8596  010C  0086               	movwf	6
  8597  010D  3002               	movlw	2	; select bank4/5
  8598  010E  0087               	movwf	7
  8599  010F  300B               	movlw	11
  8600  0110  0201               	subwf	1,w
  8601  0111  1C03               	skipc
  8602  0112  28F2               	goto	l5999
  8603  0113  084D               	movf	processGestureData@i,w
  8604  0114  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8605  0115  0086               	movwf	6
  8606  0116  3002               	movlw	2	; select bank4/5
  8607  0117  0087               	movwf	7
  8608  0118  300B               	movlw	11
  8609  0119  0201               	subwf	1,w
  8610  011A  1C03               	skipc
  8611  011B  28F2               	goto	l5999
  8612                           
  8613                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  8614  011C  084D               	movf	processGestureData@i,w
  8615  011D  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8616  011E  0086               	movwf	6
  8617  011F  3002               	movlw	2	; select bank4/5
  8618  0120  0087               	movwf	7
  8619  0121  0801               	movf	1,w
  8620  0122  00AF               	movwf	??_processGestureData
  8621  0123  082F               	movf	??_processGestureData,w
  8622  0124  00C1               	movwf	processGestureData@u_last
  8623                           
  8624                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  8625  0125  084D               	movf	processGestureData@i,w
  8626  0126  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8627  0127  0086               	movwf	6
  8628  0128  3002               	movlw	2	; select bank4/5
  8629  0129  0087               	movwf	7
  8630  012A  0801               	movf	1,w
  8631  012B  00AF               	movwf	??_processGestureData
  8632  012C  082F               	movf	??_processGestureData,w
  8633  012D  00C2               	movwf	processGestureData@d_last
  8634                           
  8635                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  8636  012E  084D               	movf	processGestureData@i,w
  8637  012F  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8638  0130  0086               	movwf	6
  8639  0131  3002               	movlw	2	; select bank4/5
  8640  0132  0087               	movwf	7
  8641  0133  0801               	movf	1,w
  8642  0134  00AF               	movwf	??_processGestureData
  8643  0135  082F               	movf	??_processGestureData,w
  8644  0136  00C3               	movwf	processGestureData@l_last
  8645                           
  8646                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  8647  0137  084D               	movf	processGestureData@i,w
  8648  0138  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8649  0139  0086               	movwf	6
  8650  013A  3002               	movlw	2	; select bank4/5
  8651  013B  0087               	movwf	7
  8652  013C  0801               	movf	1,w
  8653  013D  00AF               	movwf	??_processGestureData
  8654  013E  082F               	movf	??_processGestureData,w
  8655  013F  00C4               	movwf	processGestureData@r_last
  8656  0140                     l6003:	
  8657                           
  8658                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  8659  0140  0020               	movlb	0	; select bank0
  8660  0141  0845               	movf	processGestureData@u_first,w
  8661  0142  0746               	addwf	processGestureData@d_first,w
  8662  0143  00A6               	movwf	___awdiv@divisor
  8663  0144  01A7               	clrf	___awdiv@divisor+1
  8664  0145  0DA7               	rlf	___awdiv@divisor+1,f
  8665  0146  0846               	movf	processGestureData@d_first,w
  8666  0147  0245               	subwf	processGestureData@u_first,w
  8667  0148  00A0               	movwf	___wmul@multiplier
  8668  0149  01A1               	clrf	___wmul@multiplier+1
  8669  014A  1C03               	skipc
  8670  014B  03A1               	decf	___wmul@multiplier+1,f
  8671  014C  3064               	movlw	100
  8672  014D  00A2               	movwf	___wmul@multiplicand
  8673  014E  3000               	movlw	0
  8674  014F  00A3               	movwf	___wmul@multiplicand+1
  8675  0150  318A  225C  3180   	fcall	___wmul
  8676  0153  0020               	movlb	0	; select bank0
  8677  0154  0821               	movf	?___wmul+1,w
  8678  0155  00A9               	movwf	___awdiv@dividend+1
  8679  0156  0820               	movf	?___wmul,w
  8680  0157  00A8               	movwf	___awdiv@dividend
  8681  0158  318E  26F0  3180   	fcall	___awdiv
  8682  015B  0020               	movlb	0	; select bank0
  8683  015C  0827               	movf	?___awdiv+1,w
  8684  015D  00B2               	movwf	processGestureData@ud_ratio_first+1
  8685  015E  0826               	movf	?___awdiv,w
  8686  015F  00B1               	movwf	processGestureData@ud_ratio_first
  8687                           
  8688                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  8689  0160  0847               	movf	processGestureData@l_first,w
  8690  0161  0748               	addwf	processGestureData@r_first,w
  8691  0162  00A6               	movwf	___awdiv@divisor
  8692  0163  01A7               	clrf	___awdiv@divisor+1
  8693  0164  0DA7               	rlf	___awdiv@divisor+1,f
  8694  0165  0848               	movf	processGestureData@r_first,w
  8695  0166  0247               	subwf	processGestureData@l_first,w
  8696  0167  00A0               	movwf	___wmul@multiplier
  8697  0168  01A1               	clrf	___wmul@multiplier+1
  8698  0169  1C03               	skipc
  8699  016A  03A1               	decf	___wmul@multiplier+1,f
  8700  016B  3064               	movlw	100
  8701  016C  00A2               	movwf	___wmul@multiplicand
  8702  016D  3000               	movlw	0
  8703  016E  00A3               	movwf	___wmul@multiplicand+1
  8704  016F  318A  225C  3180   	fcall	___wmul
  8705  0172  0020               	movlb	0	; select bank0
  8706  0173  0821               	movf	?___wmul+1,w
  8707  0174  00A9               	movwf	___awdiv@dividend+1
  8708  0175  0820               	movf	?___wmul,w
  8709  0176  00A8               	movwf	___awdiv@dividend
  8710  0177  318E  26F0  3180   	fcall	___awdiv
  8711  017A  0020               	movlb	0	; select bank0
  8712  017B  0827               	movf	?___awdiv+1,w
  8713  017C  00B4               	movwf	processGestureData@lr_ratio_first+1
  8714  017D  0826               	movf	?___awdiv,w
  8715  017E  00B3               	movwf	processGestureData@lr_ratio_first
  8716                           
  8717                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8718  017F  0841               	movf	processGestureData@u_last,w
  8719  0180  0742               	addwf	processGestureData@d_last,w
  8720  0181  00A6               	movwf	___awdiv@divisor
  8721  0182  01A7               	clrf	___awdiv@divisor+1
  8722  0183  0DA7               	rlf	___awdiv@divisor+1,f
  8723  0184  0842               	movf	processGestureData@d_last,w
  8724  0185  0241               	subwf	processGestureData@u_last,w
  8725  0186  00A0               	movwf	___wmul@multiplier
  8726  0187  01A1               	clrf	___wmul@multiplier+1
  8727  0188  1C03               	skipc
  8728  0189  03A1               	decf	___wmul@multiplier+1,f
  8729  018A  3064               	movlw	100
  8730  018B  00A2               	movwf	___wmul@multiplicand
  8731  018C  3000               	movlw	0
  8732  018D  00A3               	movwf	___wmul@multiplicand+1
  8733  018E  318A  225C  3180   	fcall	___wmul
  8734  0191  0020               	movlb	0	; select bank0
  8735  0192  0821               	movf	?___wmul+1,w
  8736  0193  00A9               	movwf	___awdiv@dividend+1
  8737  0194  0820               	movf	?___wmul,w
  8738  0195  00A8               	movwf	___awdiv@dividend
  8739  0196  318E  26F0  3180   	fcall	___awdiv
  8740  0199  0020               	movlb	0	; select bank0
  8741  019A  0827               	movf	?___awdiv+1,w
  8742  019B  00B6               	movwf	processGestureData@ud_ratio_last+1
  8743  019C  0826               	movf	?___awdiv,w
  8744  019D  00B5               	movwf	processGestureData@ud_ratio_last
  8745                           
  8746                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8747  019E  0843               	movf	processGestureData@l_last,w
  8748  019F  0744               	addwf	processGestureData@r_last,w
  8749  01A0  00A6               	movwf	___awdiv@divisor
  8750  01A1  01A7               	clrf	___awdiv@divisor+1
  8751  01A2  0DA7               	rlf	___awdiv@divisor+1,f
  8752  01A3  0844               	movf	processGestureData@r_last,w
  8753  01A4  0243               	subwf	processGestureData@l_last,w
  8754  01A5  00A0               	movwf	___wmul@multiplier
  8755  01A6  01A1               	clrf	___wmul@multiplier+1
  8756  01A7  1C03               	skipc
  8757  01A8  03A1               	decf	___wmul@multiplier+1,f
  8758  01A9  3064               	movlw	100
  8759  01AA  00A2               	movwf	___wmul@multiplicand
  8760  01AB  3000               	movlw	0
  8761  01AC  00A3               	movwf	___wmul@multiplicand+1
  8762  01AD  318A  225C  3180   	fcall	___wmul
  8763  01B0  0020               	movlb	0	; select bank0
  8764  01B1  0821               	movf	?___wmul+1,w
  8765  01B2  00A9               	movwf	___awdiv@dividend+1
  8766  01B3  0820               	movf	?___wmul,w
  8767  01B4  00A8               	movwf	___awdiv@dividend
  8768  01B5  318E  26F0  3180   	fcall	___awdiv
  8769  01B8  0020               	movlb	0	; select bank0
  8770  01B9  0827               	movf	?___awdiv+1,w
  8771  01BA  00B8               	movwf	processGestureData@lr_ratio_last+1
  8772  01BB  0826               	movf	?___awdiv,w
  8773  01BC  00B7               	movwf	processGestureData@lr_ratio_last
  8774                           
  8775                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  8776  01BD  0831               	movf	processGestureData@ud_ratio_first,w
  8777  01BE  0235               	subwf	processGestureData@ud_ratio_last,w
  8778  01BF  00C9               	movwf	processGestureData@ud_delta
  8779  01C0  0832               	movf	processGestureData@ud_ratio_first+1,w
  8780  01C1  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  8781  01C2  00CA               	movwf	processGestureData@ud_delta+1
  8782                           
  8783                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  8784  01C3  0833               	movf	processGestureData@lr_ratio_first,w
  8785  01C4  0237               	subwf	processGestureData@lr_ratio_last,w
  8786  01C5  00CB               	movwf	processGestureData@lr_delta
  8787  01C6  0834               	movf	processGestureData@lr_ratio_first+1,w
  8788  01C7  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  8789  01C8  00CC               	movwf	processGestureData@lr_delta+1
  8790                           
  8791                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  8792  01C9  0849               	movf	processGestureData@ud_delta,w
  8793  01CA  07EA               	addwf	_gesture_ud_delta_,f
  8794  01CB  084A               	movf	processGestureData@ud_delta+1,w
  8795  01CC  3DEB               	addwfc	_gesture_ud_delta_+1,f
  8796                           
  8797                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  8798  01CD  084B               	movf	processGestureData@lr_delta,w
  8799  01CE  07E8               	addwf	_gesture_lr_delta_,f
  8800  01CF  084C               	movf	processGestureData@lr_delta+1,w
  8801  01D0  3DE9               	addwfc	_gesture_lr_delta_+1,f
  8802                           
  8803                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  8804  01D1  086B               	movf	_gesture_ud_delta_+1,w
  8805  01D2  3A80               	xorlw	128
  8806  01D3  00AF               	movwf	??_processGestureData
  8807  01D4  3080               	movlw	128
  8808  01D5  022F               	subwf	??_processGestureData,w
  8809  01D6  1D03               	skipz
  8810  01D7  29DA               	goto	u4975
  8811  01D8  3032               	movlw	50
  8812  01D9  026A               	subwf	_gesture_ud_delta_,w
  8813  01DA                     u4975:	
  8814  01DA  1C03               	skipc
  8815  01DB  29E1               	goto	l6017
  8816                           
  8817                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  8818  01DC  3001               	movlw	1
  8819  01DD  0020               	movlb	0	; select bank0
  8820  01DE  00E6               	movwf	_gesture_ud_count_
  8821  01DF  3000               	movlw	0
  8822  01E0  29F1               	goto	L2
  8823  01E1                     l6017:	
  8824                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  8825                           
  8826  01E1  0020               	movlb	0	; select bank0
  8827  01E2  086B               	movf	_gesture_ud_delta_+1,w
  8828  01E3  3A80               	xorlw	128
  8829  01E4  00AF               	movwf	??_processGestureData
  8830  01E5  307F               	movlw	127
  8831  01E6  022F               	subwf	??_processGestureData,w
  8832  01E7  1D03               	skipz
  8833  01E8  29EB               	goto	u4985
  8834  01E9  30CF               	movlw	207
  8835  01EA  026A               	subwf	_gesture_ud_delta_,w
  8836  01EB                     u4985:	
  8837  01EB  1803               	skipnc
  8838  01EC  29F3               	goto	l6021
  8839                           
  8840                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  8841  01ED  30FF               	movlw	255
  8842  01EE  0020               	movlb	0	; select bank0
  8843  01EF  00E6               	movwf	_gesture_ud_count_
  8844  01F0  30FF               	movlw	255
  8845  01F1                     L2:	
  8846  01F1  00E7               	movwf	_gesture_ud_count_+1
  8847                           
  8848                           ;APDS9960.c: 741:     } else {
  8849  01F2  29F6               	goto	l6023
  8850  01F3                     l6021:	
  8851                           
  8852                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  8853  01F3  0020               	movlb	0	; select bank0
  8854  01F4  01E6               	clrf	_gesture_ud_count_
  8855  01F5  01E7               	clrf	_gesture_ud_count_+1
  8856  01F6                     l6023:	
  8857                           
  8858                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  8859  01F6  0869               	movf	_gesture_lr_delta_+1,w
  8860  01F7  3A80               	xorlw	128
  8861  01F8  00AF               	movwf	??_processGestureData
  8862  01F9  3080               	movlw	128
  8863  01FA  022F               	subwf	??_processGestureData,w
  8864  01FB  1D03               	skipz
  8865  01FC  29FF               	goto	u4995
  8866  01FD  3032               	movlw	50
  8867  01FE  0268               	subwf	_gesture_lr_delta_,w
  8868  01FF                     u4995:	
  8869  01FF  1C03               	skipc
  8870  0200  2A06               	goto	l6027
  8871                           
  8872                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  8873  0201  3001               	movlw	1
  8874  0202  0020               	movlb	0	; select bank0
  8875  0203  00E4               	movwf	_gesture_lr_count_
  8876  0204  3000               	movlw	0
  8877  0205  2A16               	goto	L3
  8878  0206                     l6027:	
  8879                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  8880                           
  8881  0206  0020               	movlb	0	; select bank0
  8882  0207  0869               	movf	_gesture_lr_delta_+1,w
  8883  0208  3A80               	xorlw	128
  8884  0209  00AF               	movwf	??_processGestureData
  8885  020A  307F               	movlw	127
  8886  020B  022F               	subwf	??_processGestureData,w
  8887  020C  1D03               	skipz
  8888  020D  2A10               	goto	u5005
  8889  020E  30CF               	movlw	207
  8890  020F  0268               	subwf	_gesture_lr_delta_,w
  8891  0210                     u5005:	
  8892  0210  1803               	skipnc
  8893  0211  2A18               	goto	l6031
  8894                           
  8895                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  8896  0212  30FF               	movlw	255
  8897  0213  0020               	movlb	0	; select bank0
  8898  0214  00E4               	movwf	_gesture_lr_count_
  8899  0215  30FF               	movlw	255
  8900  0216                     L3:	
  8901  0216  00E5               	movwf	_gesture_lr_count_+1
  8902                           
  8903                           ;APDS9960.c: 750:     } else {
  8904  0217  2A1B               	goto	l6033
  8905  0218                     l6031:	
  8906                           
  8907                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  8908  0218  0020               	movlb	0	; select bank0
  8909  0219  01E4               	clrf	_gesture_lr_count_
  8910  021A  01E5               	clrf	_gesture_lr_count_+1
  8911  021B                     l6033:	
  8912                           
  8913                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  8914  021B  0866               	movf	_gesture_ud_count_,w
  8915  021C  0467               	iorwf	_gesture_ud_count_+1,w
  8916  021D  1D03               	btfss	3,2
  8917  021E  2AC2               	goto	l6077
  8918  021F  0864               	movf	_gesture_lr_count_,w
  8919  0220  0465               	iorwf	_gesture_lr_count_+1,w
  8920  0221  1D03               	btfss	3,2
  8921  0222  2AC2               	goto	l6077
  8922                           
  8923                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8924  0223  084A               	movf	processGestureData@ud_delta+1,w
  8925  0224  3A80               	xorlw	128
  8926  0225  00AF               	movwf	??_processGestureData
  8927  0226  3080               	movlw	128
  8928  0227  022F               	subwf	??_processGestureData,w
  8929  0228  1D03               	skipz
  8930  0229  2A2C               	goto	u5035
  8931  022A  3001               	movlw	1
  8932  022B  0249               	subwf	processGestureData@ud_delta,w
  8933  022C                     u5035:	
  8934  022C  1803               	skipnc
  8935  022D  2A3B               	goto	l6041
  8936  022E  0020               	movlb	0	; select bank0
  8937  022F  0949               	comf	processGestureData@ud_delta,w
  8938  0230  00AF               	movwf	??_processGestureData
  8939  0231  094A               	comf	processGestureData@ud_delta+1,w
  8940  0232  00B0               	movwf	??_processGestureData+1
  8941  0233  0AAF               	incf	??_processGestureData,f
  8942  0234  1903               	skipnz
  8943  0235  0AB0               	incf	??_processGestureData+1,f
  8944  0236  082F               	movf	??_processGestureData,w
  8945  0237  00B9               	movwf	_processGestureData$1528
  8946  0238  0830               	movf	??_processGestureData+1,w
  8947  0239  00BA               	movwf	_processGestureData$1528+1
  8948  023A  2A40               	goto	l1073
  8949  023B                     l6041:	
  8950  023B  0020               	movlb	0	; select bank0
  8951  023C  084A               	movf	processGestureData@ud_delta+1,w
  8952  023D  00BA               	movwf	_processGestureData$1528+1
  8953  023E  0849               	movf	processGestureData@ud_delta,w
  8954  023F  00B9               	movwf	_processGestureData$1528
  8955  0240                     l1073:	
  8956  0240  083A               	movf	_processGestureData$1528+1,w
  8957  0241  3A80               	xorlw	128
  8958  0242  00AF               	movwf	??_processGestureData
  8959  0243  3080               	movlw	128
  8960  0244  022F               	subwf	??_processGestureData,w
  8961  0245  1D03               	skipz
  8962  0246  2A49               	goto	u5045
  8963  0247  3014               	movlw	20
  8964  0248  0239               	subwf	_processGestureData$1528,w
  8965  0249                     u5045:	
  8966  0249  1803               	skipnc
  8967  024A  2874               	goto	l5949
  8968  024B  0020               	movlb	0	; select bank0
  8969  024C  084C               	movf	processGestureData@lr_delta+1,w
  8970  024D  3A80               	xorlw	128
  8971  024E  00AF               	movwf	??_processGestureData
  8972  024F  3080               	movlw	128
  8973  0250  022F               	subwf	??_processGestureData,w
  8974  0251  1D03               	skipz
  8975  0252  2A55               	goto	u5055
  8976  0253  3001               	movlw	1
  8977  0254  024B               	subwf	processGestureData@lr_delta,w
  8978  0255                     u5055:	
  8979  0255  1803               	skipnc
  8980  0256  2A64               	goto	l6047
  8981  0257  0020               	movlb	0	; select bank0
  8982  0258  094B               	comf	processGestureData@lr_delta,w
  8983  0259  00AF               	movwf	??_processGestureData
  8984  025A  094C               	comf	processGestureData@lr_delta+1,w
  8985  025B  00B0               	movwf	??_processGestureData+1
  8986  025C  0AAF               	incf	??_processGestureData,f
  8987  025D  1903               	skipnz
  8988  025E  0AB0               	incf	??_processGestureData+1,f
  8989  025F  082F               	movf	??_processGestureData,w
  8990  0260  00BB               	movwf	_processGestureData$1529
  8991  0261  0830               	movf	??_processGestureData+1,w
  8992  0262  00BC               	movwf	_processGestureData$1529+1
  8993  0263  2A69               	goto	l1077
  8994  0264                     l6047:	
  8995  0264  0020               	movlb	0	; select bank0
  8996  0265  084C               	movf	processGestureData@lr_delta+1,w
  8997  0266  00BC               	movwf	_processGestureData$1529+1
  8998  0267  084B               	movf	processGestureData@lr_delta,w
  8999  0268  00BB               	movwf	_processGestureData$1529
  9000  0269                     l1077:	
  9001  0269  083C               	movf	_processGestureData$1529+1,w
  9002  026A  3A80               	xorlw	128
  9003  026B  00AF               	movwf	??_processGestureData
  9004  026C  3080               	movlw	128
  9005  026D  022F               	subwf	??_processGestureData,w
  9006  026E  1D03               	skipz
  9007  026F  2A72               	goto	u5065
  9008  0270  3014               	movlw	20
  9009  0271  023B               	subwf	_processGestureData$1529,w
  9010  0272                     u5065:	
  9011  0272  1803               	skipnc
  9012  0273  2874               	goto	l5949
  9013                           
  9014                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9015  0274  0020               	movlb	0	; select bank0
  9016  0275  0849               	movf	processGestureData@ud_delta,w
  9017  0276  044A               	iorwf	processGestureData@ud_delta+1,w
  9018  0277  1D03               	btfss	3,2
  9019  0278  2A82               	goto	l6055
  9020  0279  084B               	movf	processGestureData@lr_delta,w
  9021  027A  044C               	iorwf	processGestureData@lr_delta+1,w
  9022  027B  1D03               	btfss	3,2
  9023  027C  2A82               	goto	l6055
  9024                           
  9025                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9026  027D  3001               	movlw	1
  9027  027E  07E2               	addwf	_gesture_near_count_,f
  9028  027F  3000               	movlw	0
  9029  0280  3DE3               	addwfc	_gesture_near_count_+1,f
  9030                           
  9031                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9032  0281  2A8F               	goto	l1079
  9033  0282                     l6055:	
  9034  0282  0849               	movf	processGestureData@ud_delta,w
  9035  0283  044A               	iorwf	processGestureData@ud_delta+1,w
  9036  0284  1D03               	btfss	3,2
  9037  0285  2A8A               	goto	l6059
  9038  0286  084B               	movf	processGestureData@lr_delta,w
  9039  0287  044C               	iorwf	processGestureData@lr_delta+1,w
  9040  0288  1903               	btfsc	3,2
  9041  0289  2A8F               	goto	l1079
  9042  028A                     l6059:	
  9043                           
  9044                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9045  028A  3001               	movlw	1
  9046  028B  0021               	movlb	1	; select bank1
  9047  028C  07E2               	addwf	_gesture_far_count_^(0+128),f
  9048  028D  3000               	movlw	0
  9049  028E  3DE3               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9050  028F                     l1079:	
  9051                           
  9052                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9053  028F  0020               	movlb	0	; select bank0
  9054  0290  0863               	movf	_gesture_near_count_+1,w
  9055  0291  3A80               	xorlw	128
  9056  0292  00AF               	movwf	??_processGestureData
  9057  0293  3080               	movlw	128
  9058  0294  022F               	subwf	??_processGestureData,w
  9059  0295  1D03               	skipz
  9060  0296  2A99               	goto	u5115
  9061  0297  300A               	movlw	10
  9062  0298  0262               	subwf	_gesture_near_count_,w
  9063  0299                     u5115:	
  9064  0299  1C03               	skipc
  9065  029A  2874               	goto	l5949
  9066  029B  0021               	movlb	1	; select bank1
  9067  029C  0863               	movf	(_gesture_far_count_+1)^(0+128),w
  9068  029D  3A80               	xorlw	128
  9069  029E  0020               	movlb	0	; select bank0
  9070  029F  00AF               	movwf	??_processGestureData
  9071  02A0  3080               	movlw	128
  9072  02A1  022F               	subwf	??_processGestureData,w
  9073  02A2  1D03               	skipz
  9074  02A3  2AA7               	goto	u5125
  9075  02A4  3002               	movlw	2
  9076  02A5  0021               	movlb	1	; select bank1
  9077  02A6  0262               	subwf	_gesture_far_count_^(0+128),w
  9078  02A7                     u5125:	
  9079  02A7  1C03               	skipc
  9080  02A8  2874               	goto	l5949
  9081                           
  9082                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9083  02A9  0020               	movlb	0	; select bank0
  9084  02AA  0849               	movf	processGestureData@ud_delta,w
  9085  02AB  044A               	iorwf	processGestureData@ud_delta+1,w
  9086  02AC  1D03               	btfss	3,2
  9087  02AD  2AB4               	goto	l6069
  9088  02AE  084B               	movf	processGestureData@lr_delta,w
  9089  02AF  044C               	iorwf	processGestureData@lr_delta+1,w
  9090  02B0  1D03               	btfss	3,2
  9091  02B1  2AB4               	goto	l6069
  9092                           
  9093                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9094  02B2  3001               	movlw	1
  9095  02B3  2ABD               	goto	L4
  9096  02B4                     l6069:	
  9097                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9098                           
  9099  02B4  0849               	movf	processGestureData@ud_delta,w
  9100  02B5  044A               	iorwf	processGestureData@ud_delta+1,w
  9101  02B6  1903               	btfsc	3,2
  9102  02B7  2AC0               	goto	l1085
  9103  02B8  084B               	movf	processGestureData@lr_delta,w
  9104  02B9  044C               	iorwf	processGestureData@lr_delta+1,w
  9105  02BA  1903               	btfsc	3,2
  9106  02BB  2AC0               	goto	l1085
  9107                           
  9108                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9109  02BC  3002               	movlw	2
  9110  02BD                     L4:	
  9111  02BD  00E0               	movwf	_gesture_state_
  9112  02BE  3000               	movlw	0
  9113  02BF  00E1               	movwf	_gesture_state_+1
  9114  02C0                     l1085:	
  9115                           
  9116                           ;APDS9960.c: 771:                 return 1;
  9117  02C0  3001               	movlw	1
  9118  02C1  0008               	return
  9119  02C2                     l6077:	
  9120                           
  9121                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9122  02C2  084A               	movf	processGestureData@ud_delta+1,w
  9123  02C3  3A80               	xorlw	128
  9124  02C4  00AF               	movwf	??_processGestureData
  9125  02C5  3080               	movlw	128
  9126  02C6  022F               	subwf	??_processGestureData,w
  9127  02C7  1D03               	skipz
  9128  02C8  2ACB               	goto	u5175
  9129  02C9  3001               	movlw	1
  9130  02CA  0249               	subwf	processGestureData@ud_delta,w
  9131  02CB                     u5175:	
  9132  02CB  1803               	skipnc
  9133  02CC  2ADA               	goto	l6081
  9134  02CD  0020               	movlb	0	; select bank0
  9135  02CE  0949               	comf	processGestureData@ud_delta,w
  9136  02CF  00AF               	movwf	??_processGestureData
  9137  02D0  094A               	comf	processGestureData@ud_delta+1,w
  9138  02D1  00B0               	movwf	??_processGestureData+1
  9139  02D2  0AAF               	incf	??_processGestureData,f
  9140  02D3  1903               	skipnz
  9141  02D4  0AB0               	incf	??_processGestureData+1,f
  9142  02D5  082F               	movf	??_processGestureData,w
  9143  02D6  00BD               	movwf	_processGestureData$1530
  9144  02D7  0830               	movf	??_processGestureData+1,w
  9145  02D8  00BE               	movwf	_processGestureData$1530+1
  9146  02D9  2ADF               	goto	l1092
  9147  02DA                     l6081:	
  9148  02DA  0020               	movlb	0	; select bank0
  9149  02DB  084A               	movf	processGestureData@ud_delta+1,w
  9150  02DC  00BE               	movwf	_processGestureData$1530+1
  9151  02DD  0849               	movf	processGestureData@ud_delta,w
  9152  02DE  00BD               	movwf	_processGestureData$1530
  9153  02DF                     l1092:	
  9154  02DF  083E               	movf	_processGestureData$1530+1,w
  9155  02E0  3A80               	xorlw	128
  9156  02E1  00AF               	movwf	??_processGestureData
  9157  02E2  3080               	movlw	128
  9158  02E3  022F               	subwf	??_processGestureData,w
  9159  02E4  1D03               	skipz
  9160  02E5  2AE8               	goto	u5185
  9161  02E6  3014               	movlw	20
  9162  02E7  023D               	subwf	_processGestureData$1530,w
  9163  02E8                     u5185:	
  9164  02E8  1803               	skipnc
  9165  02E9  2874               	goto	l5949
  9166  02EA  0020               	movlb	0	; select bank0
  9167  02EB  084C               	movf	processGestureData@lr_delta+1,w
  9168  02EC  3A80               	xorlw	128
  9169  02ED  00AF               	movwf	??_processGestureData
  9170  02EE  3080               	movlw	128
  9171  02EF  022F               	subwf	??_processGestureData,w
  9172  02F0  1D03               	skipz
  9173  02F1  2AF4               	goto	u5195
  9174  02F2  3001               	movlw	1
  9175  02F3  024B               	subwf	processGestureData@lr_delta,w
  9176  02F4                     u5195:	
  9177  02F4  1803               	skipnc
  9178  02F5  2B03               	goto	l6087
  9179  02F6  0020               	movlb	0	; select bank0
  9180  02F7  094B               	comf	processGestureData@lr_delta,w
  9181  02F8  00AF               	movwf	??_processGestureData
  9182  02F9  094C               	comf	processGestureData@lr_delta+1,w
  9183  02FA  00B0               	movwf	??_processGestureData+1
  9184  02FB  0AAF               	incf	??_processGestureData,f
  9185  02FC  1903               	skipnz
  9186  02FD  0AB0               	incf	??_processGestureData+1,f
  9187  02FE  082F               	movf	??_processGestureData,w
  9188  02FF  00BF               	movwf	_processGestureData$1531
  9189  0300  0830               	movf	??_processGestureData+1,w
  9190  0301  00C0               	movwf	_processGestureData$1531+1
  9191  0302  2B08               	goto	l1096
  9192  0303                     l6087:	
  9193  0303  0020               	movlb	0	; select bank0
  9194  0304  084C               	movf	processGestureData@lr_delta+1,w
  9195  0305  00C0               	movwf	_processGestureData$1531+1
  9196  0306  084B               	movf	processGestureData@lr_delta,w
  9197  0307  00BF               	movwf	_processGestureData$1531
  9198  0308                     l1096:	
  9199  0308  0840               	movf	_processGestureData$1531+1,w
  9200  0309  3A80               	xorlw	128
  9201  030A  00AF               	movwf	??_processGestureData
  9202  030B  3080               	movlw	128
  9203  030C  022F               	subwf	??_processGestureData,w
  9204  030D  1D03               	skipz
  9205  030E  2B11               	goto	u5205
  9206  030F  3014               	movlw	20
  9207  0310  023F               	subwf	_processGestureData$1531,w
  9208  0311                     u5205:	
  9209  0311  1803               	skipnc
  9210  0312  2874               	goto	l5949
  9211                           
  9212                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9213  0313  0020               	movlb	0	; select bank0
  9214  0314  0849               	movf	processGestureData@ud_delta,w
  9215  0315  044A               	iorwf	processGestureData@ud_delta+1,w
  9216  0316  1D03               	btfss	3,2
  9217  0317  2B20               	goto	l1097
  9218  0318  084B               	movf	processGestureData@lr_delta,w
  9219  0319  044C               	iorwf	processGestureData@lr_delta+1,w
  9220  031A  1D03               	btfss	3,2
  9221  031B  2B20               	goto	l1097
  9222                           
  9223                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9224  031C  3001               	movlw	1
  9225  031D  07E2               	addwf	_gesture_near_count_,f
  9226  031E  3000               	movlw	0
  9227  031F  3DE3               	addwfc	_gesture_near_count_+1,f
  9228  0320                     l1097:	
  9229                           ;APDS9960.c: 780:             }
  9230                           
  9231                           
  9232                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9233  0320  0863               	movf	_gesture_near_count_+1,w
  9234  0321  3A80               	xorlw	128
  9235  0322  00AF               	movwf	??_processGestureData
  9236  0323  3080               	movlw	128
  9237  0324  022F               	subwf	??_processGestureData,w
  9238  0325  1D03               	skipz
  9239  0326  2B29               	goto	u5235
  9240  0327  300A               	movlw	10
  9241  0328  0262               	subwf	_gesture_near_count_,w
  9242  0329                     u5235:	
  9243  0329  1C03               	skipc
  9244  032A  2874               	goto	l5949
  9245                           
  9246                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9247  032B  0020               	movlb	0	; select bank0
  9248  032C  01E6               	clrf	_gesture_ud_count_
  9249  032D  01E7               	clrf	_gesture_ud_count_+1
  9250                           
  9251                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9252  032E  01E4               	clrf	_gesture_lr_count_
  9253  032F  01E5               	clrf	_gesture_lr_count_+1
  9254                           
  9255                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9256  0330  01EA               	clrf	_gesture_ud_delta_
  9257  0331  01EB               	clrf	_gesture_ud_delta_+1
  9258                           
  9259                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9260  0332  01E8               	clrf	_gesture_lr_delta_
  9261  0333  01E9               	clrf	_gesture_lr_delta_+1
  9262  0334  2874               	goto	l5949
  9263  0335                     __end_of_processGestureData:	
  9264                           
  9265                           	psect	text19
  9266  0A5C                     __ptext19:	
  9267 ;; *************** function ___wmul *****************
  9268 ;; Defined at:
  9269 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9272 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  product         2    4[BANK0 ] unsigned int 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  2    0[BANK0 ] unsigned int 
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, status,0
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;Total ram usage:        6 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    5
  9291 ;; This function calls:
  9292 ;;		Nothing
  9293 ;; This function is called by:
  9294 ;;		_processGestureData
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           
  9299                           ;psect for function ___wmul
  9300  0A5C                     ___wmul:	
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9304  0A5C  0020               	movlb	0	; select bank0
  9305  0A5D  01A4               	clrf	___wmul@product
  9306  0A5E  01A5               	clrf	___wmul@product+1
  9307  0A5F                     l5791:	
  9308  0A5F  1C20               	btfss	___wmul@multiplier,0
  9309  0A60  2A65               	goto	l1385
  9310  0A61  0822               	movf	___wmul@multiplicand,w
  9311  0A62  07A4               	addwf	___wmul@product,f
  9312  0A63  0823               	movf	___wmul@multiplicand+1,w
  9313  0A64  3DA5               	addwfc	___wmul@product+1,f
  9314  0A65                     l1385:	
  9315  0A65  3001               	movlw	1
  9316  0A66                     u4565:	
  9317  0A66  35A2               	lslf	___wmul@multiplicand,f
  9318  0A67  0DA3               	rlf	___wmul@multiplicand+1,f
  9319  0A68  0B89               	decfsz	9,f
  9320  0A69  2A66               	goto	u4565
  9321  0A6A  3001               	movlw	1
  9322  0A6B                     u4575:	
  9323  0A6B  36A1               	lsrf	___wmul@multiplier+1,f
  9324  0A6C  0CA0               	rrf	___wmul@multiplier,f
  9325  0A6D  0B89               	decfsz	9,f
  9326  0A6E  2A6B               	goto	u4575
  9327  0A6F  0820               	movf	___wmul@multiplier,w
  9328  0A70  0421               	iorwf	___wmul@multiplier+1,w
  9329  0A71  1D03               	btfss	3,2
  9330  0A72  2A5F               	goto	l5791
  9331  0A73  0825               	movf	___wmul@product+1,w
  9332  0A74  00A1               	movwf	?___wmul+1
  9333  0A75  0824               	movf	___wmul@product,w
  9334  0A76  00A0               	movwf	?___wmul
  9335  0A77  0008               	return
  9336  0A78                     __end_of___wmul:	
  9337                           
  9338                           	psect	text20
  9339  0EF0                     __ptext20:	
  9340 ;; *************** function ___awdiv *****************
  9341 ;; Defined at:
  9342 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  divisor         2    6[BANK0 ] int 
  9345 ;;  dividend        2    8[BANK0 ] int 
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;  quotient        2   13[BANK0 ] int 
  9348 ;;  sign            1   12[BANK0 ] unsigned char 
  9349 ;;  counter         1   11[BANK0 ] unsigned char 
  9350 ;; Return value:  Size  Location     Type
  9351 ;;                  2    6[BANK0 ] int 
  9352 ;; Registers used:
  9353 ;;		wreg, status,2, status,0
  9354 ;; Tracked objects:
  9355 ;;		On entry : 0/0
  9356 ;;		On exit  : 0/0
  9357 ;;		Unchanged: 0/0
  9358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;Total ram usage:        9 bytes
  9364 ;; Hardware stack levels used:    1
  9365 ;; Hardware stack levels required when called:    5
  9366 ;; This function calls:
  9367 ;;		Nothing
  9368 ;; This function is called by:
  9369 ;;		_processGestureData
  9370 ;; This function uses a non-reentrant model
  9371 ;;
  9372                           
  9373                           
  9374                           ;psect for function ___awdiv
  9375  0EF0                     ___awdiv:	
  9376                           
  9377                           ;incstack = 0
  9378                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9379  0EF0  0020               	movlb	0	; select bank0
  9380  0EF1  01AC               	clrf	___awdiv@sign
  9381  0EF2  1FA7               	btfss	___awdiv@divisor+1,7
  9382  0EF3  2EFB               	goto	l5811
  9383  0EF4  09A6               	comf	___awdiv@divisor,f
  9384  0EF5  09A7               	comf	___awdiv@divisor+1,f
  9385  0EF6  0AA6               	incf	___awdiv@divisor,f
  9386  0EF7  1903               	skipnz
  9387  0EF8  0AA7               	incf	___awdiv@divisor+1,f
  9388  0EF9  01AC               	clrf	___awdiv@sign
  9389  0EFA  0AAC               	incf	___awdiv@sign,f
  9390  0EFB                     l5811:	
  9391  0EFB  1FA9               	btfss	___awdiv@dividend+1,7
  9392  0EFC  2F06               	goto	l5817
  9393  0EFD  09A8               	comf	___awdiv@dividend,f
  9394  0EFE  09A9               	comf	___awdiv@dividend+1,f
  9395  0EFF  0AA8               	incf	___awdiv@dividend,f
  9396  0F00  1903               	skipnz
  9397  0F01  0AA9               	incf	___awdiv@dividend+1,f
  9398  0F02  3001               	movlw	1
  9399  0F03  00AA               	movwf	??___awdiv
  9400  0F04  082A               	movf	??___awdiv,w
  9401  0F05  06AC               	xorwf	___awdiv@sign,f
  9402  0F06                     l5817:	
  9403  0F06  01AD               	clrf	___awdiv@quotient
  9404  0F07  01AE               	clrf	___awdiv@quotient+1
  9405  0F08  0826               	movf	___awdiv@divisor,w
  9406  0F09  0427               	iorwf	___awdiv@divisor+1,w
  9407  0F0A  1903               	btfsc	3,2
  9408  0F0B  2F35               	goto	l5839
  9409  0F0C  01AB               	clrf	___awdiv@counter
  9410  0F0D  0AAB               	incf	___awdiv@counter,f
  9411  0F0E                     l5827:	
  9412  0F0E  1BA7               	btfsc	___awdiv@divisor+1,7
  9413  0F0F  2F1A               	goto	l5829
  9414  0F10  3001               	movlw	1
  9415  0F11                     u4625:	
  9416  0F11  35A6               	lslf	___awdiv@divisor,f
  9417  0F12  0DA7               	rlf	___awdiv@divisor+1,f
  9418  0F13  0B89               	decfsz	9,f
  9419  0F14  2F11               	goto	u4625
  9420  0F15  3001               	movlw	1
  9421  0F16  00AA               	movwf	??___awdiv
  9422  0F17  082A               	movf	??___awdiv,w
  9423  0F18  07AB               	addwf	___awdiv@counter,f
  9424  0F19  2F0E               	goto	l5827
  9425  0F1A                     l5829:	
  9426  0F1A  3001               	movlw	1
  9427  0F1B                     u4645:	
  9428  0F1B  35AD               	lslf	___awdiv@quotient,f
  9429  0F1C  0DAE               	rlf	___awdiv@quotient+1,f
  9430  0F1D  0B89               	decfsz	9,f
  9431  0F1E  2F1B               	goto	u4645
  9432  0F1F  0827               	movf	___awdiv@divisor+1,w
  9433  0F20  0229               	subwf	___awdiv@dividend+1,w
  9434  0F21  1D03               	skipz
  9435  0F22  2F25               	goto	u4655
  9436  0F23  0826               	movf	___awdiv@divisor,w
  9437  0F24  0228               	subwf	___awdiv@dividend,w
  9438  0F25                     u4655:	
  9439  0F25  1C03               	skipc
  9440  0F26  2F2C               	goto	l5835
  9441  0F27  0826               	movf	___awdiv@divisor,w
  9442  0F28  02A8               	subwf	___awdiv@dividend,f
  9443  0F29  0827               	movf	___awdiv@divisor+1,w
  9444  0F2A  3BA9               	subwfb	___awdiv@dividend+1,f
  9445  0F2B  142D               	bsf	___awdiv@quotient,0
  9446  0F2C                     l5835:	
  9447  0F2C  3001               	movlw	1
  9448  0F2D                     u4665:	
  9449  0F2D  36A7               	lsrf	___awdiv@divisor+1,f
  9450  0F2E  0CA6               	rrf	___awdiv@divisor,f
  9451  0F2F  0B89               	decfsz	9,f
  9452  0F30  2F2D               	goto	u4665
  9453  0F31  3001               	movlw	1
  9454  0F32  02AB               	subwf	___awdiv@counter,f
  9455  0F33  1D03               	btfss	3,2
  9456  0F34  2F1A               	goto	l5829
  9457  0F35                     l5839:	
  9458  0F35  082C               	movf	___awdiv@sign,w
  9459  0F36  1903               	btfsc	3,2
  9460  0F37  2F3D               	goto	l5843
  9461  0F38  09AD               	comf	___awdiv@quotient,f
  9462  0F39  09AE               	comf	___awdiv@quotient+1,f
  9463  0F3A  0AAD               	incf	___awdiv@quotient,f
  9464  0F3B  1903               	skipnz
  9465  0F3C  0AAE               	incf	___awdiv@quotient+1,f
  9466  0F3D                     l5843:	
  9467  0F3D  082E               	movf	___awdiv@quotient+1,w
  9468  0F3E  00A7               	movwf	?___awdiv+1
  9469  0F3F  082D               	movf	___awdiv@quotient,w
  9470  0F40  00A6               	movwf	?___awdiv
  9471  0F41  0008               	return
  9472  0F42                     __end_of___awdiv:	
  9473                           
  9474                           	psect	text21
  9475  0969                     __ptext21:	
  9476 ;; *************** function _isGestureAvailable *****************
  9477 ;; Defined at:
  9478 ;;		line 537 in file "APDS9960.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;  val             1   10[BANK0 ] unsigned char 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      _Bool 
  9485 ;; Registers used:
  9486 ;;		wreg, status,2, status,0, pclath, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;Total ram usage:        2 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    8
  9499 ;; This function calls:
  9500 ;;		_wireReadDataByte
  9501 ;; This function is called by:
  9502 ;;		_main
  9503 ;;		_readGesture
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function _isGestureAvailable
  9509  0969                     _isGestureAvailable:	
  9510                           
  9511                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  9515  0969  30AF               	movlw	175
  9516  096A  318A  22B4  3189   	fcall	_wireReadDataByte
  9517  096D  0020               	movlb	0	; select bank0
  9518  096E  00A9               	movwf	??_isGestureAvailable
  9519  096F  0829               	movf	??_isGestureAvailable,w
  9520  0970  00AA               	movwf	isGestureAvailable@val
  9521                           
  9522                           ;APDS9960.c: 545:     val &= 0b00000001;
  9523  0971  3001               	movlw	1
  9524  0972  00A9               	movwf	??_isGestureAvailable
  9525  0973  0829               	movf	??_isGestureAvailable,w
  9526  0974  05AA               	andwf	isGestureAvailable@val,f
  9527                           
  9528                           ;APDS9960.c: 548:     if( val == 1) {
  9529  0975  032A               	decf	isGestureAvailable@val,w
  9530  0976  1D03               	btfss	3,2
  9531  0977  297A               	goto	l5859
  9532                           
  9533                           ;APDS9960.c: 549:         return 1;
  9534  0978  3001               	movlw	1
  9535  0979  0008               	return
  9536  097A                     l5859:	
  9537                           
  9538                           ;APDS9960.c: 551:         return 0;
  9539  097A  3000               	movlw	0
  9540  097B  0008               	return
  9541  097C                     __end_of_isGestureAvailable:	
  9542                           
  9543                           	psect	text22
  9544  0335                     __ptext22:	
  9545 ;; *************** function _decodeGesture *****************
  9546 ;; Defined at:
  9547 ;;		line 795 in file "APDS9960.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      _Bool 
  9554 ;; Registers used:
  9555 ;;		wreg, status,2, status,0
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;Total ram usage:       18 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    5
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_readGesture
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           
  9576                           ;psect for function _decodeGesture
  9577  0335                     _decodeGesture:	
  9578                           
  9579                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  9580                           
  9581                           ;incstack = 0
  9582                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9583  0335  0020               	movlb	0	; select bank0
  9584  0336  0360               	decf	_gesture_state_,w
  9585  0337  0461               	iorwf	_gesture_state_+1,w
  9586  0338  1D03               	btfss	3,2
  9587  0339  2B41               	goto	l6109
  9588                           
  9589                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  9590  033A  3005               	movlw	5
  9591  033B  0022               	movlb	2	; select bank2
  9592  033C  00E8               	movwf	_gesture_motion_^(0+256)
  9593  033D  3000               	movlw	0
  9594  033E  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9595                           
  9596                           ;APDS9960.c: 800:         return 1;
  9597  033F  3001               	movlw	1
  9598  0340  0008               	return
  9599  0341                     l6109:	
  9600  0341  3002               	movlw	2
  9601  0342  0660               	xorwf	_gesture_state_,w
  9602  0343  0461               	iorwf	_gesture_state_+1,w
  9603  0344  1D03               	btfss	3,2
  9604  0345  2B4D               	goto	l6115
  9605                           
  9606                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  9607  0346  3006               	movlw	6
  9608  0347  0022               	movlb	2	; select bank2
  9609  0348  00E8               	movwf	_gesture_motion_^(0+256)
  9610  0349  3000               	movlw	0
  9611  034A  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9612                           
  9613                           ;APDS9960.c: 803:         return 1;
  9614  034B  3001               	movlw	1
  9615  034C  0008               	return
  9616  034D                     l6115:	
  9617                           
  9618                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  9619  034D  0A66               	incf	_gesture_ud_count_,w
  9620  034E  1D03               	skipz
  9621  034F  2B59               	goto	l6121
  9622  0350  0A67               	incf	_gesture_ud_count_+1,w
  9623  0351  1D03               	btfss	3,2
  9624  0352  2B59               	goto	l6121
  9625  0353  0864               	movf	_gesture_lr_count_,w
  9626  0354  0465               	iorwf	_gesture_lr_count_+1,w
  9627  0355  1D03               	btfss	3,2
  9628  0356  2B59               	goto	l6121
  9629  0357                     l6119:	
  9630                           
  9631                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  9632  0357  3003               	movlw	3
  9633  0358  2B78               	goto	L7
  9634  0359                     l6121:	
  9635                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  9636                           
  9637  0359  0366               	decf	_gesture_ud_count_,w
  9638  035A  0467               	iorwf	_gesture_ud_count_+1,w
  9639  035B  1D03               	btfss	3,2
  9640  035C  2B63               	goto	l6127
  9641  035D  0864               	movf	_gesture_lr_count_,w
  9642  035E  0465               	iorwf	_gesture_lr_count_+1,w
  9643  035F  1D03               	btfss	3,2
  9644  0360  2B63               	goto	l6127
  9645  0361                     l6125:	
  9646                           
  9647                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  9648  0361  3004               	movlw	4
  9649  0362  2B78               	goto	L7
  9650  0363                     l6127:	
  9651                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  9652                           
  9653  0363  0866               	movf	_gesture_ud_count_,w
  9654  0364  0467               	iorwf	_gesture_ud_count_+1,w
  9655  0365  1D03               	btfss	3,2
  9656  0366  2B6D               	goto	l6133
  9657  0367  0364               	decf	_gesture_lr_count_,w
  9658  0368  0465               	iorwf	_gesture_lr_count_+1,w
  9659  0369  1D03               	btfss	3,2
  9660  036A  2B6D               	goto	l6133
  9661  036B                     l6131:	
  9662                           
  9663                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  9664  036B  3002               	movlw	2
  9665  036C  2B78               	goto	L7
  9666  036D                     l6133:	
  9667                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  9668                           
  9669  036D  0866               	movf	_gesture_ud_count_,w
  9670  036E  0467               	iorwf	_gesture_ud_count_+1,w
  9671  036F  1D03               	btfss	3,2
  9672  0370  2B7D               	goto	l6139
  9673  0371  0A64               	incf	_gesture_lr_count_,w
  9674  0372  1D03               	skipz
  9675  0373  2B7D               	goto	l6139
  9676  0374  0A65               	incf	_gesture_lr_count_+1,w
  9677  0375  1D03               	btfss	3,2
  9678  0376  2B7D               	goto	l6139
  9679  0377                     l6137:	
  9680                           
  9681                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  9682  0377  3001               	movlw	1
  9683  0378                     L7:	
  9684  0378  0022               	movlb	2	; select bank2
  9685  0379  00E8               	movwf	_gesture_motion_^(0+256)
  9686  037A  3000               	movlw	0
  9687  037B  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9688                           
  9689                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  9690  037C  2CC3               	goto	l6215
  9691  037D                     l6139:	
  9692  037D  0A66               	incf	_gesture_ud_count_,w
  9693  037E  1D03               	skipz
  9694  037F  2BCE               	goto	l6157
  9695  0380  0A67               	incf	_gesture_ud_count_+1,w
  9696  0381  1D03               	btfss	3,2
  9697  0382  2BCE               	goto	l6157
  9698  0383  0364               	decf	_gesture_lr_count_,w
  9699  0384  0465               	iorwf	_gesture_lr_count_+1,w
  9700  0385  1D03               	btfss	3,2
  9701  0386  2BCE               	goto	l6157
  9702                           
  9703                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9704  0387  086B               	movf	_gesture_ud_delta_+1,w
  9705  0388  3A80               	xorlw	128
  9706  0389  00A0               	movwf	??_decodeGesture
  9707  038A  3080               	movlw	128
  9708  038B  0220               	subwf	??_decodeGesture,w
  9709  038C  1D03               	skipz
  9710  038D  2B90               	goto	u5365
  9711  038E  3001               	movlw	1
  9712  038F  026A               	subwf	_gesture_ud_delta_,w
  9713  0390                     u5365:	
  9714  0390  1803               	skipnc
  9715  0391  2B9F               	goto	l6147
  9716  0392  0020               	movlb	0	; select bank0
  9717  0393  096A               	comf	_gesture_ud_delta_,w
  9718  0394  00A0               	movwf	??_decodeGesture
  9719  0395  096B               	comf	_gesture_ud_delta_+1,w
  9720  0396  00A1               	movwf	??_decodeGesture+1
  9721  0397  0AA0               	incf	??_decodeGesture,f
  9722  0398  1903               	skipnz
  9723  0399  0AA1               	incf	??_decodeGesture+1,f
  9724  039A  0820               	movf	??_decodeGesture,w
  9725  039B  00A2               	movwf	_decodeGesture$1533
  9726  039C  0821               	movf	??_decodeGesture+1,w
  9727  039D  00A3               	movwf	_decodeGesture$1533+1
  9728  039E  2BA4               	goto	l1118
  9729  039F                     l6147:	
  9730  039F  0020               	movlb	0	; select bank0
  9731  03A0  086B               	movf	_gesture_ud_delta_+1,w
  9732  03A1  00A3               	movwf	_decodeGesture$1533+1
  9733  03A2  086A               	movf	_gesture_ud_delta_,w
  9734  03A3  00A2               	movwf	_decodeGesture$1533
  9735  03A4                     l1118:	
  9736  03A4  0869               	movf	_gesture_lr_delta_+1,w
  9737  03A5  3A80               	xorlw	128
  9738  03A6  00A0               	movwf	??_decodeGesture
  9739  03A7  3080               	movlw	128
  9740  03A8  0220               	subwf	??_decodeGesture,w
  9741  03A9  1D03               	skipz
  9742  03AA  2BAD               	goto	u5375
  9743  03AB  3001               	movlw	1
  9744  03AC  0268               	subwf	_gesture_lr_delta_,w
  9745  03AD                     u5375:	
  9746  03AD  1803               	skipnc
  9747  03AE  2BBC               	goto	l6151
  9748  03AF  0020               	movlb	0	; select bank0
  9749  03B0  0968               	comf	_gesture_lr_delta_,w
  9750  03B1  00A0               	movwf	??_decodeGesture
  9751  03B2  0969               	comf	_gesture_lr_delta_+1,w
  9752  03B3  00A1               	movwf	??_decodeGesture+1
  9753  03B4  0AA0               	incf	??_decodeGesture,f
  9754  03B5  1903               	skipnz
  9755  03B6  0AA1               	incf	??_decodeGesture+1,f
  9756  03B7  0820               	movf	??_decodeGesture,w
  9757  03B8  00A4               	movwf	_decodeGesture$1534
  9758  03B9  0821               	movf	??_decodeGesture+1,w
  9759  03BA  00A5               	movwf	_decodeGesture$1534+1
  9760  03BB  2BC1               	goto	l1122
  9761  03BC                     l6151:	
  9762  03BC  0020               	movlb	0	; select bank0
  9763  03BD  0869               	movf	_gesture_lr_delta_+1,w
  9764  03BE  00A5               	movwf	_decodeGesture$1534+1
  9765  03BF  0868               	movf	_gesture_lr_delta_,w
  9766  03C0  00A4               	movwf	_decodeGesture$1534
  9767  03C1                     l1122:	
  9768  03C1  0825               	movf	_decodeGesture$1534+1,w
  9769  03C2  3A80               	xorlw	128
  9770  03C3  00A0               	movwf	??_decodeGesture
  9771  03C4  0823               	movf	_decodeGesture$1533+1,w
  9772  03C5  3A80               	xorlw	128
  9773  03C6  0220               	subwf	??_decodeGesture,w
  9774  03C7  1D03               	skipz
  9775  03C8  2BCB               	goto	u5385
  9776  03C9  0822               	movf	_decodeGesture$1533,w
  9777  03CA  0224               	subwf	_decodeGesture$1534,w
  9778  03CB                     u5385:	
  9779  03CB  1C03               	btfss	3,0
  9780  03CC  2B57               	goto	l6119
  9781  03CD  2B6B               	goto	l6131
  9782  03CE                     l6157:	
  9783  03CE  0366               	decf	_gesture_ud_count_,w
  9784  03CF  0467               	iorwf	_gesture_ud_count_+1,w
  9785  03D0  1D03               	btfss	3,2
  9786  03D1  2C1F               	goto	l6175
  9787  03D2  0A64               	incf	_gesture_lr_count_,w
  9788  03D3  1D03               	skipz
  9789  03D4  2C1F               	goto	l6175
  9790  03D5  0A65               	incf	_gesture_lr_count_+1,w
  9791  03D6  1D03               	btfss	3,2
  9792  03D7  2C1F               	goto	l6175
  9793                           
  9794                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9795  03D8  086B               	movf	_gesture_ud_delta_+1,w
  9796  03D9  3A80               	xorlw	128
  9797  03DA  00A0               	movwf	??_decodeGesture
  9798  03DB  3080               	movlw	128
  9799  03DC  0220               	subwf	??_decodeGesture,w
  9800  03DD  1D03               	skipz
  9801  03DE  2BE1               	goto	u5415
  9802  03DF  3001               	movlw	1
  9803  03E0  026A               	subwf	_gesture_ud_delta_,w
  9804  03E1                     u5415:	
  9805  03E1  1803               	skipnc
  9806  03E2  2BF0               	goto	l6165
  9807  03E3  0020               	movlb	0	; select bank0
  9808  03E4  096A               	comf	_gesture_ud_delta_,w
  9809  03E5  00A0               	movwf	??_decodeGesture
  9810  03E6  096B               	comf	_gesture_ud_delta_+1,w
  9811  03E7  00A1               	movwf	??_decodeGesture+1
  9812  03E8  0AA0               	incf	??_decodeGesture,f
  9813  03E9  1903               	skipnz
  9814  03EA  0AA1               	incf	??_decodeGesture+1,f
  9815  03EB  0820               	movf	??_decodeGesture,w
  9816  03EC  00A6               	movwf	_decodeGesture$1535
  9817  03ED  0821               	movf	??_decodeGesture+1,w
  9818  03EE  00A7               	movwf	_decodeGesture$1535+1
  9819  03EF  2BF5               	goto	l1130
  9820  03F0                     l6165:	
  9821  03F0  0020               	movlb	0	; select bank0
  9822  03F1  086B               	movf	_gesture_ud_delta_+1,w
  9823  03F2  00A7               	movwf	_decodeGesture$1535+1
  9824  03F3  086A               	movf	_gesture_ud_delta_,w
  9825  03F4  00A6               	movwf	_decodeGesture$1535
  9826  03F5                     l1130:	
  9827  03F5  0869               	movf	_gesture_lr_delta_+1,w
  9828  03F6  3A80               	xorlw	128
  9829  03F7  00A0               	movwf	??_decodeGesture
  9830  03F8  3080               	movlw	128
  9831  03F9  0220               	subwf	??_decodeGesture,w
  9832  03FA  1D03               	skipz
  9833  03FB  2BFE               	goto	u5425
  9834  03FC  3001               	movlw	1
  9835  03FD  0268               	subwf	_gesture_lr_delta_,w
  9836  03FE                     u5425:	
  9837  03FE  1803               	skipnc
  9838  03FF  2C0D               	goto	l6169
  9839  0400  0020               	movlb	0	; select bank0
  9840  0401  0968               	comf	_gesture_lr_delta_,w
  9841  0402  00A0               	movwf	??_decodeGesture
  9842  0403  0969               	comf	_gesture_lr_delta_+1,w
  9843  0404  00A1               	movwf	??_decodeGesture+1
  9844  0405  0AA0               	incf	??_decodeGesture,f
  9845  0406  1903               	skipnz
  9846  0407  0AA1               	incf	??_decodeGesture+1,f
  9847  0408  0820               	movf	??_decodeGesture,w
  9848  0409  00A8               	movwf	_decodeGesture$1536
  9849  040A  0821               	movf	??_decodeGesture+1,w
  9850  040B  00A9               	movwf	_decodeGesture$1536+1
  9851  040C  2C12               	goto	l1134
  9852  040D                     l6169:	
  9853  040D  0020               	movlb	0	; select bank0
  9854  040E  0869               	movf	_gesture_lr_delta_+1,w
  9855  040F  00A9               	movwf	_decodeGesture$1536+1
  9856  0410  0868               	movf	_gesture_lr_delta_,w
  9857  0411  00A8               	movwf	_decodeGesture$1536
  9858  0412                     l1134:	
  9859  0412  0829               	movf	_decodeGesture$1536+1,w
  9860  0413  3A80               	xorlw	128
  9861  0414  00A0               	movwf	??_decodeGesture
  9862  0415  0827               	movf	_decodeGesture$1535+1,w
  9863  0416  3A80               	xorlw	128
  9864  0417  0220               	subwf	??_decodeGesture,w
  9865  0418  1D03               	skipz
  9866  0419  2C1C               	goto	u5435
  9867  041A  0826               	movf	_decodeGesture$1535,w
  9868  041B  0228               	subwf	_decodeGesture$1536,w
  9869  041C                     u5435:	
  9870  041C  1C03               	btfss	3,0
  9871  041D  2B61               	goto	l6125
  9872  041E  2B77               	goto	l6137
  9873  041F                     l6175:	
  9874  041F  0A66               	incf	_gesture_ud_count_,w
  9875  0420  1D03               	skipz
  9876  0421  2C72               	goto	l6193
  9877  0422  0A67               	incf	_gesture_ud_count_+1,w
  9878  0423  1D03               	btfss	3,2
  9879  0424  2C72               	goto	l6193
  9880  0425  0A64               	incf	_gesture_lr_count_,w
  9881  0426  1D03               	skipz
  9882  0427  2C72               	goto	l6193
  9883  0428  0A65               	incf	_gesture_lr_count_+1,w
  9884  0429  1D03               	btfss	3,2
  9885  042A  2C72               	goto	l6193
  9886                           
  9887                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9888  042B  086B               	movf	_gesture_ud_delta_+1,w
  9889  042C  3A80               	xorlw	128
  9890  042D  00A0               	movwf	??_decodeGesture
  9891  042E  3080               	movlw	128
  9892  042F  0220               	subwf	??_decodeGesture,w
  9893  0430  1D03               	skipz
  9894  0431  2C34               	goto	u5465
  9895  0432  3001               	movlw	1
  9896  0433  026A               	subwf	_gesture_ud_delta_,w
  9897  0434                     u5465:	
  9898  0434  1803               	skipnc
  9899  0435  2C43               	goto	l6183
  9900  0436  0020               	movlb	0	; select bank0
  9901  0437  096A               	comf	_gesture_ud_delta_,w
  9902  0438  00A0               	movwf	??_decodeGesture
  9903  0439  096B               	comf	_gesture_ud_delta_+1,w
  9904  043A  00A1               	movwf	??_decodeGesture+1
  9905  043B  0AA0               	incf	??_decodeGesture,f
  9906  043C  1903               	skipnz
  9907  043D  0AA1               	incf	??_decodeGesture+1,f
  9908  043E  0820               	movf	??_decodeGesture,w
  9909  043F  00AA               	movwf	_decodeGesture$1537
  9910  0440  0821               	movf	??_decodeGesture+1,w
  9911  0441  00AB               	movwf	_decodeGesture$1537+1
  9912  0442  2C48               	goto	l1142
  9913  0443                     l6183:	
  9914  0443  0020               	movlb	0	; select bank0
  9915  0444  086B               	movf	_gesture_ud_delta_+1,w
  9916  0445  00AB               	movwf	_decodeGesture$1537+1
  9917  0446  086A               	movf	_gesture_ud_delta_,w
  9918  0447  00AA               	movwf	_decodeGesture$1537
  9919  0448                     l1142:	
  9920  0448  0869               	movf	_gesture_lr_delta_+1,w
  9921  0449  3A80               	xorlw	128
  9922  044A  00A0               	movwf	??_decodeGesture
  9923  044B  3080               	movlw	128
  9924  044C  0220               	subwf	??_decodeGesture,w
  9925  044D  1D03               	skipz
  9926  044E  2C51               	goto	u5475
  9927  044F  3001               	movlw	1
  9928  0450  0268               	subwf	_gesture_lr_delta_,w
  9929  0451                     u5475:	
  9930  0451  1803               	skipnc
  9931  0452  2C60               	goto	l6187
  9932  0453  0020               	movlb	0	; select bank0
  9933  0454  0968               	comf	_gesture_lr_delta_,w
  9934  0455  00A0               	movwf	??_decodeGesture
  9935  0456  0969               	comf	_gesture_lr_delta_+1,w
  9936  0457  00A1               	movwf	??_decodeGesture+1
  9937  0458  0AA0               	incf	??_decodeGesture,f
  9938  0459  1903               	skipnz
  9939  045A  0AA1               	incf	??_decodeGesture+1,f
  9940  045B  0820               	movf	??_decodeGesture,w
  9941  045C  00AC               	movwf	_decodeGesture$1538
  9942  045D  0821               	movf	??_decodeGesture+1,w
  9943  045E  00AD               	movwf	_decodeGesture$1538+1
  9944  045F  2C65               	goto	l1146
  9945  0460                     l6187:	
  9946  0460  0020               	movlb	0	; select bank0
  9947  0461  0869               	movf	_gesture_lr_delta_+1,w
  9948  0462  00AD               	movwf	_decodeGesture$1538+1
  9949  0463  0868               	movf	_gesture_lr_delta_,w
  9950  0464  00AC               	movwf	_decodeGesture$1538
  9951  0465                     l1146:	
  9952  0465  082D               	movf	_decodeGesture$1538+1,w
  9953  0466  3A80               	xorlw	128
  9954  0467  00A0               	movwf	??_decodeGesture
  9955  0468  082B               	movf	_decodeGesture$1537+1,w
  9956  0469  3A80               	xorlw	128
  9957  046A  0220               	subwf	??_decodeGesture,w
  9958  046B  1D03               	skipz
  9959  046C  2C6F               	goto	u5485
  9960  046D  082A               	movf	_decodeGesture$1537,w
  9961  046E  022C               	subwf	_decodeGesture$1538,w
  9962  046F                     u5485:	
  9963  046F  1C03               	btfss	3,0
  9964  0470  2B57               	goto	l6119
  9965  0471  2B77               	goto	l6137
  9966  0472                     l6193:	
  9967  0472  0366               	decf	_gesture_ud_count_,w
  9968  0473  0467               	iorwf	_gesture_ud_count_+1,w
  9969  0474  1D03               	btfss	3,2
  9970  0475  2CC1               	goto	l6211
  9971  0476  0364               	decf	_gesture_lr_count_,w
  9972  0477  0465               	iorwf	_gesture_lr_count_+1,w
  9973  0478  1D03               	btfss	3,2
  9974  0479  2CC1               	goto	l6211
  9975                           
  9976                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9977  047A  086B               	movf	_gesture_ud_delta_+1,w
  9978  047B  3A80               	xorlw	128
  9979  047C  00A0               	movwf	??_decodeGesture
  9980  047D  3080               	movlw	128
  9981  047E  0220               	subwf	??_decodeGesture,w
  9982  047F  1D03               	skipz
  9983  0480  2C83               	goto	u5515
  9984  0481  3001               	movlw	1
  9985  0482  026A               	subwf	_gesture_ud_delta_,w
  9986  0483                     u5515:	
  9987  0483  1803               	skipnc
  9988  0484  2C92               	goto	l6201
  9989  0485  0020               	movlb	0	; select bank0
  9990  0486  096A               	comf	_gesture_ud_delta_,w
  9991  0487  00A0               	movwf	??_decodeGesture
  9992  0488  096B               	comf	_gesture_ud_delta_+1,w
  9993  0489  00A1               	movwf	??_decodeGesture+1
  9994  048A  0AA0               	incf	??_decodeGesture,f
  9995  048B  1903               	skipnz
  9996  048C  0AA1               	incf	??_decodeGesture+1,f
  9997  048D  0820               	movf	??_decodeGesture,w
  9998  048E  00AE               	movwf	_decodeGesture$1539
  9999  048F  0821               	movf	??_decodeGesture+1,w
 10000  0490  00AF               	movwf	_decodeGesture$1539+1
 10001  0491  2C97               	goto	l1154
 10002  0492                     l6201:	
 10003  0492  0020               	movlb	0	; select bank0
 10004  0493  086B               	movf	_gesture_ud_delta_+1,w
 10005  0494  00AF               	movwf	_decodeGesture$1539+1
 10006  0495  086A               	movf	_gesture_ud_delta_,w
 10007  0496  00AE               	movwf	_decodeGesture$1539
 10008  0497                     l1154:	
 10009  0497  0869               	movf	_gesture_lr_delta_+1,w
 10010  0498  3A80               	xorlw	128
 10011  0499  00A0               	movwf	??_decodeGesture
 10012  049A  3080               	movlw	128
 10013  049B  0220               	subwf	??_decodeGesture,w
 10014  049C  1D03               	skipz
 10015  049D  2CA0               	goto	u5525
 10016  049E  3001               	movlw	1
 10017  049F  0268               	subwf	_gesture_lr_delta_,w
 10018  04A0                     u5525:	
 10019  04A0  1803               	skipnc
 10020  04A1  2CAF               	goto	l6205
 10021  04A2  0020               	movlb	0	; select bank0
 10022  04A3  0968               	comf	_gesture_lr_delta_,w
 10023  04A4  00A0               	movwf	??_decodeGesture
 10024  04A5  0969               	comf	_gesture_lr_delta_+1,w
 10025  04A6  00A1               	movwf	??_decodeGesture+1
 10026  04A7  0AA0               	incf	??_decodeGesture,f
 10027  04A8  1903               	skipnz
 10028  04A9  0AA1               	incf	??_decodeGesture+1,f
 10029  04AA  0820               	movf	??_decodeGesture,w
 10030  04AB  00B0               	movwf	_decodeGesture$1540
 10031  04AC  0821               	movf	??_decodeGesture+1,w
 10032  04AD  00B1               	movwf	_decodeGesture$1540+1
 10033  04AE  2CB4               	goto	l1158
 10034  04AF                     l6205:	
 10035  04AF  0020               	movlb	0	; select bank0
 10036  04B0  0869               	movf	_gesture_lr_delta_+1,w
 10037  04B1  00B1               	movwf	_decodeGesture$1540+1
 10038  04B2  0868               	movf	_gesture_lr_delta_,w
 10039  04B3  00B0               	movwf	_decodeGesture$1540
 10040  04B4                     l1158:	
 10041  04B4  0831               	movf	_decodeGesture$1540+1,w
 10042  04B5  3A80               	xorlw	128
 10043  04B6  00A0               	movwf	??_decodeGesture
 10044  04B7  082F               	movf	_decodeGesture$1539+1,w
 10045  04B8  3A80               	xorlw	128
 10046  04B9  0220               	subwf	??_decodeGesture,w
 10047  04BA  1D03               	skipz
 10048  04BB  2CBE               	goto	u5535
 10049  04BC  082E               	movf	_decodeGesture$1539,w
 10050  04BD  0230               	subwf	_decodeGesture$1540,w
 10051  04BE                     u5535:	
 10052  04BE  1C03               	btfss	3,0
 10053  04BF  2B61               	goto	l6125
 10054  04C0  2B6B               	goto	l6131
 10055  04C1                     l6211:	
 10056                           
 10057                           ;APDS9960.c: 840:         return 0;
 10058  04C1  3000               	movlw	0
 10059  04C2  0008               	return
 10060  04C3                     l6215:	
 10061                           
 10062                           ;APDS9960.c: 843:     return 1;
 10063  04C3  3001               	movlw	1
 10064  04C4  0008               	return
 10065  04C5                     __end_of_decodeGesture:	
 10066                           
 10067                           	psect	text23
 10068  0F9C                     __ptext23:	
 10069 ;; *************** function _enableGestureSensor *****************
 10070 ;; Defined at:
 10071 ;;		line 409 in file "APDS9960.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;  interrupts      1    wreg     _Bool 
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;  interrupts      1   17[BANK0 ] _Bool 
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      _Bool 
 10078 ;; Registers used:
 10079 ;;		wreg, status,2, status,0, pclath, cstack
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        2 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:   11
 10092 ;; This function calls:
 10093 ;;		_enablePower
 10094 ;;		_resetGestureParameters
 10095 ;;		_setGestureIntEnable
 10096 ;;		_setGestureMode
 10097 ;;		_setLEDBoost
 10098 ;;		_setMode
 10099 ;;		_wireWriteDataByte
 10100 ;; This function is called by:
 10101 ;;		_main
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           
 10106                           ;psect for function _enableGestureSensor
 10107  0F9C                     _enableGestureSensor:	
 10108                           
 10109                           ;incstack = 0
 10110                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10111                           ;enableGestureSensor@interrupts stored from wreg
 10112  0F9C  0020               	movlb	0	; select bank0
 10113  0F9D  00B1               	movwf	enableGestureSensor@interrupts
 10114                           
 10115                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10116  0F9E  318A  220D  318F   	fcall	_resetGestureParameters
 10117                           
 10118                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10119  0FA1  30FF               	movlw	255
 10120  0FA2  0020               	movlb	0	; select bank0
 10121  0FA3  00B0               	movwf	??_enableGestureSensor
 10122  0FA4  0830               	movf	??_enableGestureSensor,w
 10123  0FA5  00A6               	movwf	wireWriteDataByte@val
 10124  0FA6  3083               	movlw	131
 10125  0FA7  318A  2225  318F   	fcall	_wireWriteDataByte
 10126  0FAA  0020               	movlb	0	; select bank0
 10127  0FAB  0826               	movf	?_wireWriteDataByte,w
 10128  0FAC  0427               	iorwf	?_wireWriteDataByte+1,w
 10129  0FAD  1903               	btfsc	3,2
 10130  0FAE  2FB2               	goto	l6839
 10131  0FAF  2FB4               	goto	l6843
 10132  0FB0                     l6857:	
 10133                           
 10134                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10135  0FB0  3001               	movlw	1
 10136  0FB1  2FCD               	goto	L8
 10137  0FB2                     l6839:	
 10138                           
 10139                           ;APDS9960.c: 420:         return 0;
 10140  0FB2  3000               	movlw	0
 10141  0FB3  0008               	return
 10142  0FB4                     l6843:	
 10143                           
 10144                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10145  0FB4  3089               	movlw	137
 10146  0FB5  00B0               	movwf	??_enableGestureSensor
 10147  0FB6  0830               	movf	??_enableGestureSensor,w
 10148  0FB7  00A6               	movwf	wireWriteDataByte@val
 10149  0FB8  308E               	movlw	142
 10150  0FB9  318A  2225  318F   	fcall	_wireWriteDataByte
 10151  0FBC  0020               	movlb	0	; select bank0
 10152  0FBD  0826               	movf	?_wireWriteDataByte,w
 10153  0FBE  0427               	iorwf	?_wireWriteDataByte+1,w
 10154  0FBF  1903               	btfsc	3,2
 10155  0FC0  2FB2               	goto	l6839
 10156                           
 10157                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10158  0FC1  3003               	movlw	3
 10159  0FC2  318C  2473  318F   	fcall	_setLEDBoost
 10160  0FC5  3A00               	xorlw	0
 10161  0FC6  1903               	btfsc	3,2
 10162  0FC7  2FB2               	goto	l6839
 10163                           
 10164                           ;APDS9960.c: 428:     if( interrupts ) {
 10165  0FC8  0020               	movlb	0	; select bank0
 10166  0FC9  0831               	movf	enableGestureSensor@interrupts,w
 10167  0FCA  1D03               	btfss	3,2
 10168  0FCB  2FB0               	goto	l6857
 10169                           
 10170                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10171  0FCC  3000               	movlw	0
 10172  0FCD                     L8:	
 10173  0FCD  318C  2417  318F   	fcall	_setGestureIntEnable
 10174  0FD0  3A00               	xorlw	0
 10175  0FD1  1903               	btfsc	3,2
 10176  0FD2  2FB2               	goto	l6839
 10177                           
 10178                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10179  0FD3  3001               	movlw	1
 10180  0FD4  318A  22FE  318F   	fcall	_setGestureMode
 10181  0FD7  3A00               	xorlw	0
 10182  0FD8  1903               	btfsc	3,2
 10183  0FD9  2FB2               	goto	l6839
 10184                           
 10185                           ;APDS9960.c: 440:     if( !enablePower() ){
 10186  0FDA  3189  213B  318F   	fcall	_enablePower
 10187  0FDD  3A00               	xorlw	0
 10188  0FDE  1903               	btfsc	3,2
 10189  0FDF  2FB2               	goto	l6839
 10190                           
 10191                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10192  0FE0  0020               	movlb	0	; select bank0
 10193  0FE1  01AB               	clrf	setMode@enable
 10194  0FE2  0AAB               	incf	setMode@enable,f
 10195  0FE3  3003               	movlw	3
 10196  0FE4  318E  26A1  318F   	fcall	_setMode
 10197  0FE7  3A00               	xorlw	0
 10198  0FE8  1903               	btfsc	3,2
 10199  0FE9  2FB2               	goto	l6839
 10200                           
 10201                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10202  0FEA  0020               	movlb	0	; select bank0
 10203  0FEB  01AB               	clrf	setMode@enable
 10204  0FEC  0AAB               	incf	setMode@enable,f
 10205  0FED  3002               	movlw	2
 10206  0FEE  318E  26A1  318F   	fcall	_setMode
 10207  0FF1  3A00               	xorlw	0
 10208  0FF2  1903               	btfsc	3,2
 10209  0FF3  2FB2               	goto	l6839
 10210                           
 10211                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10212  0FF4  0020               	movlb	0	; select bank0
 10213  0FF5  01AB               	clrf	setMode@enable
 10214  0FF6  0AAB               	incf	setMode@enable,f
 10215  0FF7  3006               	movlw	6
 10216  0FF8  318E  26A1  318F   	fcall	_setMode
 10217  0FFB  3A00               	xorlw	0
 10218  0FFC  1903               	btfsc	3,2
 10219  0FFD  2FB2               	goto	l6839
 10220                           
 10221                           ;APDS9960.c: 453:     return 1;
 10222  0FFE  3001               	movlw	1
 10223  0FFF  0008               	return
 10224  1000                     __end_of_enableGestureSensor:	
 10225                           
 10226                           	psect	text24
 10227  0C73                     __ptext24:	
 10228 ;; *************** function _setLEDBoost *****************
 10229 ;; Defined at:
 10230 ;;		line 484 in file "APDS9960.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;  boost           1    wreg     unsigned char 
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;  boost           1   13[BANK0 ] unsigned char 
 10235 ;;  val             1   12[BANK0 ] unsigned char 
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  1    wreg      _Bool 
 10238 ;; Registers used:
 10239 ;;		wreg, status,2, status,0, pclath, cstack
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;Total ram usage:        4 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    8
 10252 ;; This function calls:
 10253 ;;		_wireReadDataByte
 10254 ;;		_wireWriteDataByte
 10255 ;; This function is called by:
 10256 ;;		_enableGestureSensor
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           
 10261                           ;psect for function _setLEDBoost
 10262  0C73                     _setLEDBoost:	
 10263                           
 10264                           ;incstack = 0
 10265                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10266                           ;setLEDBoost@boost stored from wreg
 10267  0C73  0020               	movlb	0	; select bank0
 10268  0C74  00AD               	movwf	setLEDBoost@boost
 10269                           
 10270                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10271  0C75  3090               	movlw	144
 10272  0C76  318A  22B4  318C   	fcall	_wireReadDataByte
 10273  0C79  0020               	movlb	0	; select bank0
 10274  0C7A  00AA               	movwf	??_setLEDBoost
 10275  0C7B  082A               	movf	??_setLEDBoost,w
 10276  0C7C  00AC               	movwf	setLEDBoost@val
 10277                           
 10278                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10279  0C7D  3003               	movlw	3
 10280  0C7E  00AA               	movwf	??_setLEDBoost
 10281  0C7F  082A               	movf	??_setLEDBoost,w
 10282  0C80  05AD               	andwf	setLEDBoost@boost,f
 10283                           
 10284                           ;APDS9960.c: 493:     boost = boost << 4;
 10285  0C81  082D               	movf	setLEDBoost@boost,w
 10286  0C82  00AA               	movwf	??_setLEDBoost
 10287  0C83  3003               	movlw	3
 10288  0C84                     u5825:	
 10289  0C84  35AA               	lslf	??_setLEDBoost,f
 10290  0C85  3EFF               	addlw	-1
 10291  0C86  1D03               	skipz
 10292  0C87  2C84               	goto	u5825
 10293  0C88  352A               	lslf	??_setLEDBoost,w
 10294  0C89  00AB               	movwf	??_setLEDBoost+1
 10295  0C8A  082B               	movf	??_setLEDBoost+1,w
 10296  0C8B  00AD               	movwf	setLEDBoost@boost
 10297                           
 10298                           ;APDS9960.c: 494:     val &= 0b11001111;
 10299  0C8C  30CF               	movlw	207
 10300  0C8D  00AA               	movwf	??_setLEDBoost
 10301  0C8E  082A               	movf	??_setLEDBoost,w
 10302  0C8F  05AC               	andwf	setLEDBoost@val,f
 10303                           
 10304                           ;APDS9960.c: 495:     val |= boost;
 10305  0C90  082D               	movf	setLEDBoost@boost,w
 10306  0C91  00AA               	movwf	??_setLEDBoost
 10307  0C92  082A               	movf	??_setLEDBoost,w
 10308  0C93  04AC               	iorwf	setLEDBoost@val,f
 10309                           
 10310                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10311  0C94  082C               	movf	setLEDBoost@val,w
 10312  0C95  00AA               	movwf	??_setLEDBoost
 10313  0C96  082A               	movf	??_setLEDBoost,w
 10314  0C97  00A6               	movwf	wireWriteDataByte@val
 10315  0C98  3090               	movlw	144
 10316  0C99  318A  2225  318C   	fcall	_wireWriteDataByte
 10317  0C9C  0020               	movlb	0	; select bank0
 10318  0C9D  0826               	movf	?_wireWriteDataByte,w
 10319  0C9E  0427               	iorwf	?_wireWriteDataByte+1,w
 10320  0C9F  1D03               	btfss	3,2
 10321  0CA0  2CA3               	goto	l6611
 10322                           
 10323                           ;APDS9960.c: 499:         return 0;
 10324  0CA1  3000               	movlw	0
 10325  0CA2  0008               	return
 10326  0CA3                     l6611:	
 10327                           
 10328                           ;APDS9960.c: 502:     return 1;
 10329  0CA3  3001               	movlw	1
 10330  0CA4  0008               	return
 10331  0CA5                     __end_of_setLEDBoost:	
 10332                           
 10333                           	psect	text25
 10334  0AFE                     __ptext25:	
 10335 ;; *************** function _setGestureMode *****************
 10336 ;; Defined at:
 10337 ;;		line 506 in file "APDS9960.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;  mode            1    wreg     unsigned char 
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;  mode            1   11[BANK0 ] unsigned char 
 10342 ;;  val             1   12[BANK0 ] unsigned char 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      _Bool 
 10345 ;; Registers used:
 10346 ;;		wreg, status,2, status,0, pclath, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;Total ram usage:        3 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    8
 10359 ;; This function calls:
 10360 ;;		_wireReadDataByte
 10361 ;;		_wireWriteDataByte
 10362 ;; This function is called by:
 10363 ;;		_enableGestureSensor
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           
 10368                           ;psect for function _setGestureMode
 10369  0AFE                     _setGestureMode:	
 10370                           
 10371                           ;incstack = 0
 10372                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10373                           ;setGestureMode@mode stored from wreg
 10374  0AFE  0020               	movlb	0	; select bank0
 10375  0AFF  00AB               	movwf	setGestureMode@mode
 10376                           
 10377                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10378  0B00  30AB               	movlw	171
 10379  0B01  318A  22B4  318A   	fcall	_wireReadDataByte
 10380  0B04  0020               	movlb	0	; select bank0
 10381  0B05  00AA               	movwf	??_setGestureMode
 10382  0B06  082A               	movf	??_setGestureMode,w
 10383  0B07  00AC               	movwf	setGestureMode@val
 10384                           
 10385                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10386  0B08  3001               	movlw	1
 10387  0B09  00AA               	movwf	??_setGestureMode
 10388  0B0A  082A               	movf	??_setGestureMode,w
 10389  0B0B  05AB               	andwf	setGestureMode@mode,f
 10390                           
 10391                           ;APDS9960.c: 515:     val &= 0b11111110;
 10392  0B0C  30FE               	movlw	254
 10393  0B0D  00AA               	movwf	??_setGestureMode
 10394  0B0E  082A               	movf	??_setGestureMode,w
 10395  0B0F  05AC               	andwf	setGestureMode@val,f
 10396                           
 10397                           ;APDS9960.c: 516:     val |= mode;
 10398  0B10  082B               	movf	setGestureMode@mode,w
 10399  0B11  00AA               	movwf	??_setGestureMode
 10400  0B12  082A               	movf	??_setGestureMode,w
 10401  0B13  04AC               	iorwf	setGestureMode@val,f
 10402                           
 10403                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 10404  0B14  082C               	movf	setGestureMode@val,w
 10405  0B15  00AA               	movwf	??_setGestureMode
 10406  0B16  082A               	movf	??_setGestureMode,w
 10407  0B17  00A6               	movwf	wireWriteDataByte@val
 10408  0B18  30AB               	movlw	171
 10409  0B19  318A  2225  318A   	fcall	_wireWriteDataByte
 10410  0B1C  0020               	movlb	0	; select bank0
 10411  0B1D  0826               	movf	?_wireWriteDataByte,w
 10412  0B1E  0427               	iorwf	?_wireWriteDataByte+1,w
 10413  0B1F  1D03               	btfss	3,2
 10414  0B20  2B23               	goto	l6629
 10415                           
 10416                           ;APDS9960.c: 520:         return 0;
 10417  0B21  3000               	movlw	0
 10418  0B22  0008               	return
 10419  0B23                     l6629:	
 10420                           
 10421                           ;APDS9960.c: 523:     return 1;
 10422  0B23  3001               	movlw	1
 10423  0B24  0008               	return
 10424  0B25                     __end_of_setGestureMode:	
 10425                           
 10426                           	psect	text26
 10427  0C17                     __ptext26:	
 10428 ;; *************** function _setGestureIntEnable *****************
 10429 ;; Defined at:
 10430 ;;		line 387 in file "APDS9960.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;  enable          1    wreg     unsigned char 
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;  enable          1   12[BANK0 ] unsigned char 
 10435 ;;  val             1   11[BANK0 ] unsigned char 
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  1    wreg      _Bool 
 10438 ;; Registers used:
 10439 ;;		wreg, status,2, status,0, pclath, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;Total ram usage:        3 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:    8
 10452 ;; This function calls:
 10453 ;;		_wireReadDataByte
 10454 ;;		_wireWriteDataByte
 10455 ;; This function is called by:
 10456 ;;		_initialize
 10457 ;;		_enableGestureSensor
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           
 10462                           ;psect for function _setGestureIntEnable
 10463  0C17                     _setGestureIntEnable:	
 10464                           
 10465                           ;incstack = 0
 10466                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 10467                           ;setGestureIntEnable@enable stored from wreg
 10468  0C17  0020               	movlb	0	; select bank0
 10469  0C18  00AC               	movwf	setGestureIntEnable@enable
 10470                           
 10471                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 10472  0C19  30AB               	movlw	171
 10473  0C1A  318A  22B4  318C   	fcall	_wireReadDataByte
 10474  0C1D  0020               	movlb	0	; select bank0
 10475  0C1E  00AA               	movwf	??_setGestureIntEnable
 10476  0C1F  082A               	movf	??_setGestureIntEnable,w
 10477  0C20  00AB               	movwf	setGestureIntEnable@val
 10478                           
 10479                           ;APDS9960.c: 395:     enable &= 0b00000001;
 10480  0C21  3001               	movlw	1
 10481  0C22  00AA               	movwf	??_setGestureIntEnable
 10482  0C23  082A               	movf	??_setGestureIntEnable,w
 10483  0C24  05AC               	andwf	setGestureIntEnable@enable,f
 10484                           
 10485                           ;APDS9960.c: 396:     enable = enable << 1;
 10486  0C25  352C               	lslf	setGestureIntEnable@enable,w
 10487  0C26  00AA               	movwf	??_setGestureIntEnable
 10488  0C27  082A               	movf	??_setGestureIntEnable,w
 10489  0C28  00AC               	movwf	setGestureIntEnable@enable
 10490                           
 10491                           ;APDS9960.c: 397:     val &= 0b11111101;
 10492  0C29  30FD               	movlw	253
 10493  0C2A  00AA               	movwf	??_setGestureIntEnable
 10494  0C2B  082A               	movf	??_setGestureIntEnable,w
 10495  0C2C  05AB               	andwf	setGestureIntEnable@val,f
 10496                           
 10497                           ;APDS9960.c: 398:     val |= enable;
 10498  0C2D  082C               	movf	setGestureIntEnable@enable,w
 10499  0C2E  00AA               	movwf	??_setGestureIntEnable
 10500  0C2F  082A               	movf	??_setGestureIntEnable,w
 10501  0C30  04AB               	iorwf	setGestureIntEnable@val,f
 10502                           
 10503                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 10504  0C31  082B               	movf	setGestureIntEnable@val,w
 10505  0C32  00AA               	movwf	??_setGestureIntEnable
 10506  0C33  082A               	movf	??_setGestureIntEnable,w
 10507  0C34  00A6               	movwf	wireWriteDataByte@val
 10508  0C35  30AB               	movlw	171
 10509  0C36  318A  2225  318C   	fcall	_wireWriteDataByte
 10510  0C39  0020               	movlb	0	; select bank0
 10511  0C3A  0826               	movf	?_wireWriteDataByte,w
 10512  0C3B  0427               	iorwf	?_wireWriteDataByte+1,w
 10513  0C3C  1D03               	btfss	3,2
 10514  0C3D  2C40               	goto	l6593
 10515                           
 10516                           ;APDS9960.c: 402:         return 0;
 10517  0C3E  3000               	movlw	0
 10518  0C3F  0008               	return
 10519  0C40                     l6593:	
 10520                           
 10521                           ;APDS9960.c: 405:     return 1;
 10522  0C40  3001               	movlw	1
 10523  0C41  0008               	return
 10524  0C42                     __end_of_setGestureIntEnable:	
 10525                           
 10526                           	psect	text27
 10527  0A0D                     __ptext27:	
 10528 ;; *************** function _resetGestureParameters *****************
 10529 ;; Defined at:
 10530 ;;		line 457 in file "APDS9960.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      void 
 10537 ;; Registers used:
 10538 ;;		status,2
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;Total ram usage:        0 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    5
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_enableGestureSensor
 10555 ;;		_readGesture
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           
 10560                           ;psect for function _resetGestureParameters
 10561  0A0D                     _resetGestureParameters:	
 10562                           
 10563                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 10564                           
 10565                           ;incstack = 0
 10566                           ; Regs used in _resetGestureParameters: [status,2]
 10567  0A0D  0024               	movlb	4	; select bank4
 10568  0A0E  01E0               	clrf	(_gesture_data_^(0+512)+64)
 10569                           
 10570                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 10571  0A0F  01E1               	clrf	(_gesture_data_^(0+512)+65)
 10572                           
 10573                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 10574  0A10  0020               	movlb	0	; select bank0
 10575  0A11  01EA               	clrf	_gesture_ud_delta_
 10576  0A12  01EB               	clrf	_gesture_ud_delta_+1
 10577                           
 10578                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 10579  0A13  01E8               	clrf	_gesture_lr_delta_
 10580  0A14  01E9               	clrf	_gesture_lr_delta_+1
 10581                           
 10582                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 10583  0A15  01E6               	clrf	_gesture_ud_count_
 10584  0A16  01E7               	clrf	_gesture_ud_count_+1
 10585                           
 10586                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 10587  0A17  01E4               	clrf	_gesture_lr_count_
 10588  0A18  01E5               	clrf	_gesture_lr_count_+1
 10589                           
 10590                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 10591  0A19  01E2               	clrf	_gesture_near_count_
 10592  0A1A  01E3               	clrf	_gesture_near_count_+1
 10593                           
 10594                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 10595  0A1B  0021               	movlb	1	; select bank1
 10596  0A1C  01E2               	clrf	_gesture_far_count_^(0+128)
 10597  0A1D  01E3               	clrf	(_gesture_far_count_+1)^(0+128)
 10598                           
 10599                           ;APDS9960.c: 472:     gesture_state_ = 0;
 10600  0A1E  0020               	movlb	0	; select bank0
 10601  0A1F  01E0               	clrf	_gesture_state_
 10602  0A20  01E1               	clrf	_gesture_state_+1
 10603                           
 10604                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 10605  0A21  0022               	movlb	2	; select bank2
 10606  0A22  01E8               	clrf	_gesture_motion_^(0+256)
 10607  0A23  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 10608  0A24  0008               	return
 10609  0A25                     __end_of_resetGestureParameters:	
 10610                           
 10611                           	psect	text28
 10612  093B                     __ptext28:	
 10613 ;; *************** function _enablePower *****************
 10614 ;; Defined at:
 10615 ;;		line 527 in file "APDS9960.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      _Bool 
 10622 ;; Registers used:
 10623 ;;		wreg, status,2, status,0, pclath, cstack
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:   10
 10636 ;; This function calls:
 10637 ;;		_setMode
 10638 ;; This function is called by:
 10639 ;;		_enableGestureSensor
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           
 10644                           ;psect for function _enablePower
 10645  093B                     _enablePower:	
 10646                           
 10647                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 10648                           
 10649                           ;incstack = 0
 10650                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 10651  093B  0020               	movlb	0	; select bank0
 10652  093C  01AB               	clrf	setMode@enable
 10653  093D  0AAB               	incf	setMode@enable,f
 10654  093E  3000               	movlw	0
 10655  093F  318E  26A1  3189   	fcall	_setMode
 10656  0942  3A00               	xorlw	0
 10657  0943  1D03               	skipz
 10658  0944  2947               	goto	l6639
 10659                           
 10660                           ;APDS9960.c: 530:         return 0;
 10661  0945  3000               	movlw	0
 10662  0946  0008               	return
 10663  0947                     l6639:	
 10664                           
 10665                           ;APDS9960.c: 533:     return 1;
 10666  0947  3001               	movlw	1
 10667  0948  0008               	return
 10668  0949                     __end_of_enablePower:	
 10669                           
 10670                           	psect	text29
 10671  0EA1                     __ptext29:	
 10672 ;; *************** function _setMode *****************
 10673 ;; Defined at:
 10674 ;;		line 124 in file "APDS9960.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  mode            1    wreg     unsigned char 
 10677 ;;  enable          1   11[BANK0 ] unsigned char 
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;  mode            1   15[BANK0 ] unsigned char 
 10680 ;;  reg_val         1   14[BANK0 ] unsigned char 
 10681 ;; Return value:  Size  Location     Type
 10682 ;;                  1    wreg      _Bool 
 10683 ;; Registers used:
 10684 ;;		wreg, status,2, status,0, pclath, cstack
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10690 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;Total ram usage:        5 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    9
 10697 ;; This function calls:
 10698 ;;		_getMode
 10699 ;;		_wireWriteDataByte
 10700 ;; This function is called by:
 10701 ;;		_initialize
 10702 ;;		_enableGestureSensor
 10703 ;;		_enablePower
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           
 10708                           ;psect for function _setMode
 10709  0EA1                     _setMode:	
 10710                           
 10711                           ;incstack = 0
 10712                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 10713                           ;setMode@mode stored from wreg
 10714  0EA1  0020               	movlb	0	; select bank0
 10715  0EA2  00AF               	movwf	setMode@mode
 10716                           
 10717                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 10718  0EA3  3189  2111  318E   	fcall	_getMode
 10719  0EA6  0020               	movlb	0	; select bank0
 10720  0EA7  00AC               	movwf	??_setMode
 10721  0EA8  082C               	movf	??_setMode,w
 10722  0EA9  00AE               	movwf	setMode@reg_val
 10723                           
 10724                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 10725  0EAA  0A2E               	incf	setMode@reg_val,w
 10726  0EAB  1D03               	btfss	3,2
 10727  0EAC  2EAF               	goto	l5887
 10728  0EAD                     l5883:	
 10729                           
 10730                           ;APDS9960.c: 131:         return 0;
 10731  0EAD  3000               	movlw	0
 10732  0EAE  0008               	return
 10733  0EAF                     l5887:	
 10734                           
 10735                           ;APDS9960.c: 135:     enable = enable & 0x01;
 10736  0EAF  082B               	movf	setMode@enable,w
 10737  0EB0  3901               	andlw	1
 10738  0EB1  00AC               	movwf	??_setMode
 10739  0EB2  082C               	movf	??_setMode,w
 10740  0EB3  00AB               	movwf	setMode@enable
 10741                           
 10742                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 10743  0EB4  3007               	movlw	7
 10744  0EB5  022F               	subwf	setMode@mode,w
 10745  0EB6  1803               	skipnc
 10746  0EB7  2ED4               	goto	l5897
 10747                           
 10748                           ;APDS9960.c: 137:         if (enable) {
 10749  0EB8  082B               	movf	setMode@enable,w
 10750  0EB9  1903               	btfsc	3,2
 10751  0EBA  2EC7               	goto	l5895
 10752                           
 10753                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 10754  0EBB  3001               	movlw	1
 10755  0EBC  00AC               	movwf	??_setMode
 10756  0EBD  0A2F               	incf	setMode@mode,w
 10757  0EBE  2EC0               	goto	u4744
 10758  0EBF                     u4745:	
 10759  0EBF  35AC               	lslf	??_setMode,f
 10760  0EC0                     u4744:	
 10761  0EC0  0B89               	decfsz	9,f
 10762  0EC1  2EBF               	goto	u4745
 10763  0EC2  082C               	movf	??_setMode,w
 10764  0EC3  00AD               	movwf	??_setMode+1
 10765  0EC4  082D               	movf	??_setMode+1,w
 10766  0EC5  04AE               	iorwf	setMode@reg_val,f
 10767                           
 10768                           ;APDS9960.c: 139:         } else {
 10769  0EC6  2EE1               	goto	l5905
 10770  0EC7                     l5895:	
 10771                           
 10772                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 10773  0EC7  3001               	movlw	1
 10774  0EC8  00AC               	movwf	??_setMode
 10775  0EC9  0A2F               	incf	setMode@mode,w
 10776  0ECA  2ECC               	goto	u4754
 10777  0ECB                     u4755:	
 10778  0ECB  35AC               	lslf	??_setMode,f
 10779  0ECC                     u4754:	
 10780  0ECC  0B89               	decfsz	9,f
 10781  0ECD  2ECB               	goto	u4755
 10782  0ECE  082C               	movf	??_setMode,w
 10783  0ECF  3AFF               	xorlw	255
 10784  0ED0  00AD               	movwf	??_setMode+1
 10785  0ED1  082D               	movf	??_setMode+1,w
 10786  0ED2  05AE               	andwf	setMode@reg_val,f
 10787  0ED3  2EE1               	goto	l5905
 10788  0ED4                     l5897:	
 10789  0ED4  3007               	movlw	7
 10790  0ED5  062F               	xorwf	setMode@mode,w
 10791  0ED6  1D03               	btfss	3,2
 10792  0ED7  2EE1               	goto	l5905
 10793                           
 10794                           ;APDS9960.c: 143:         if (enable) {
 10795  0ED8  082B               	movf	setMode@enable,w
 10796  0ED9  1903               	btfsc	3,2
 10797  0EDA  2EE0               	goto	l5903
 10798                           
 10799                           ;APDS9960.c: 144:             reg_val = 0x7F;
 10800  0EDB  307F               	movlw	127
 10801  0EDC  00AC               	movwf	??_setMode
 10802  0EDD  082C               	movf	??_setMode,w
 10803  0EDE  00AE               	movwf	setMode@reg_val
 10804                           
 10805                           ;APDS9960.c: 145:         } else {
 10806  0EDF  2EE1               	goto	l5905
 10807  0EE0                     l5903:	
 10808                           
 10809                           ;APDS9960.c: 146:             reg_val = 0x00;
 10810  0EE0  01AE               	clrf	setMode@reg_val
 10811  0EE1                     l5905:	
 10812                           
 10813                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 10814  0EE1  082E               	movf	setMode@reg_val,w
 10815  0EE2  00AC               	movwf	??_setMode
 10816  0EE3  082C               	movf	??_setMode,w
 10817  0EE4  00A6               	movwf	wireWriteDataByte@val
 10818  0EE5  3080               	movlw	128
 10819  0EE6  318A  2225  318E   	fcall	_wireWriteDataByte
 10820  0EE9  0020               	movlb	0	; select bank0
 10821  0EEA  0826               	movf	?_wireWriteDataByte,w
 10822  0EEB  0427               	iorwf	?_wireWriteDataByte+1,w
 10823  0EEC  1903               	btfsc	3,2
 10824  0EED  2EAD               	goto	l5883
 10825                           
 10826                           ;APDS9960.c: 155:     return 1;
 10827  0EEE  3001               	movlw	1
 10828  0EEF  0008               	return
 10829  0EF0                     __end_of_setMode:	
 10830                           
 10831                           	psect	text30
 10832  0A25                     __ptext30:	
 10833 ;; *************** function _wireWriteDataByte *****************
 10834 ;; Defined at:
 10835 ;;		line 871 in file "APDS9960.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;  reg             1    wreg     unsigned char 
 10838 ;;  val             1    6[BANK0 ] unsigned char 
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;  reg             1    9[BANK0 ] unsigned char 
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  2    6[BANK0 ] int 
 10843 ;; Registers used:
 10844 ;;		wreg, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        4 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:    7
 10857 ;; This function calls:
 10858 ;;		_I2C_Start
 10859 ;;		_I2C_Stop
 10860 ;;		_I2C_Write_Byte
 10861 ;; This function is called by:
 10862 ;;		_initialize
 10863 ;;		_setMode
 10864 ;;		_setLEDDrive
 10865 ;;		_setProximityGain
 10866 ;;		_setAmbientLightGain
 10867 ;;		_setProxIntLowThresh
 10868 ;;		_setProxIntHighThresh
 10869 ;;		_setLightIntLowThreshold
 10870 ;;		_setLightIntHighThreshold
 10871 ;;		_setGestureEnterThresh
 10872 ;;		_setGestureExitThresh
 10873 ;;		_setGestureGain
 10874 ;;		_setGestureLEDDrive
 10875 ;;		_setGestureWaitTime
 10876 ;;		_setGestureIntEnable
 10877 ;;		_enableGestureSensor
 10878 ;;		_setLEDBoost
 10879 ;;		_setGestureMode
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           
 10884                           ;psect for function _wireWriteDataByte
 10885  0A25                     _wireWriteDataByte:	
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10889                           ;wireWriteDataByte@reg stored from wreg
 10890  0A25  0020               	movlb	0	; select bank0
 10891  0A26  00A9               	movwf	wireWriteDataByte@reg
 10892                           
 10893                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10894  0A27  3188  205F  318A   	fcall	_I2C_Start
 10895                           
 10896                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10897  0A2A  3072               	movlw	114
 10898  0A2B  318A  2240  318A   	fcall	_I2C_Write_Byte
 10899                           
 10900                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10901  0A2E  0020               	movlb	0	; select bank0
 10902  0A2F  0829               	movf	wireWriteDataByte@reg,w
 10903  0A30  318A  2240  318A   	fcall	_I2C_Write_Byte
 10904                           
 10905                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10906  0A33  0020               	movlb	0	; select bank0
 10907  0A34  0826               	movf	wireWriteDataByte@val,w
 10908  0A35  318A  2240  318A   	fcall	_I2C_Write_Byte
 10909                           
 10910                           ;APDS9960.c: 886:     I2C_Stop();
 10911  0A38  3188  2065         	fcall	_I2C_Stop
 10912                           
 10913                           ;APDS9960.c: 889:     return 1;
 10914  0A3A  3001               	movlw	1
 10915  0A3B  0020               	movlb	0	; select bank0
 10916  0A3C  00A6               	movwf	?_wireWriteDataByte
 10917  0A3D  3000               	movlw	0
 10918  0A3E  00A7               	movwf	?_wireWriteDataByte+1
 10919  0A3F  0008               	return
 10920  0A40                     __end_of_wireWriteDataByte:	
 10921                           
 10922                           	psect	text31
 10923  0911                     __ptext31:	
 10924 ;; *************** function _getMode *****************
 10925 ;; Defined at:
 10926 ;;		line 159 in file "APDS9960.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;		None
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  1    wreg      unsigned char 
 10933 ;; Registers used:
 10934 ;;		wreg, status,2, status,0, pclath, cstack
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;Total ram usage:        2 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:    8
 10947 ;; This function calls:
 10948 ;;		_wireReadDataByte
 10949 ;; This function is called by:
 10950 ;;		_setMode
 10951 ;;		_readGesture
 10952 ;; This function uses a non-reentrant model
 10953 ;;
 10954                           
 10955                           
 10956                           ;psect for function _getMode
 10957  0911                     _getMode:	
 10958                           
 10959                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10960                           
 10961                           ;incstack = 0
 10962                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10963  0911  3080               	movlw	128
 10964  0912  318A  22B4         	fcall	_wireReadDataByte
 10965  0914  0020               	movlb	0	; select bank0
 10966  0915  00A9               	movwf	??_getMode
 10967  0916  0829               	movf	??_getMode,w
 10968  0917  00AA               	movwf	getMode@enable_value
 10969                           
 10970                           ;APDS9960.c: 166:     return enable_value;
 10971  0918  082A               	movf	getMode@enable_value,w
 10972  0919  0008               	return
 10973  091A                     __end_of_getMode:	
 10974                           
 10975                           	psect	text32
 10976  0AB4                     __ptext32:	
 10977 ;; *************** function _wireReadDataByte *****************
 10978 ;; Defined at:
 10979 ;;		line 893 in file "APDS9960.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  reg             1    wreg     unsigned char 
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  reg             1    7[BANK0 ] unsigned char 
 10984 ;;  val             1    8[BANK0 ] unsigned char 
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  1    wreg      unsigned char 
 10987 ;; Registers used:
 10988 ;;		wreg, status,2, status,0, pclath, cstack
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/0
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;Total ram usage:        3 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; Hardware stack levels required when called:    7
 11001 ;; This function calls:
 11002 ;;		_I2C_ReStart
 11003 ;;		_I2C_Read_Byte
 11004 ;;		_I2C_Send_NACK
 11005 ;;		_I2C_Start
 11006 ;;		_I2C_Stop
 11007 ;;		_I2C_Write_Byte
 11008 ;; This function is called by:
 11009 ;;		_initialize
 11010 ;;		_getMode
 11011 ;;		_setLEDDrive
 11012 ;;		_setProximityGain
 11013 ;;		_setAmbientLightGain
 11014 ;;		_setGestureGain
 11015 ;;		_setGestureLEDDrive
 11016 ;;		_setGestureWaitTime
 11017 ;;		_setGestureIntEnable
 11018 ;;		_setLEDBoost
 11019 ;;		_setGestureMode
 11020 ;;		_isGestureAvailable
 11021 ;;		_readGesture
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           
 11026                           ;psect for function _wireReadDataByte
 11027  0AB4                     _wireReadDataByte:	
 11028                           
 11029                           ;incstack = 0
 11030                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11031                           ;wireReadDataByte@reg stored from wreg
 11032  0AB4  0020               	movlb	0	; select bank0
 11033  0AB5  00A7               	movwf	wireReadDataByte@reg
 11034                           
 11035                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11036  0AB6  3188  205F  318A   	fcall	_I2C_Start
 11037                           
 11038                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11039  0AB9  3072               	movlw	114
 11040  0ABA  318A  2240  318A   	fcall	_I2C_Write_Byte
 11041                           
 11042                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11043  0ABD  0020               	movlb	0	; select bank0
 11044  0ABE  0827               	movf	wireReadDataByte@reg,w
 11045  0ABF  318A  2240  318A   	fcall	_I2C_Write_Byte
 11046                           
 11047                           ;APDS9960.c: 912:     I2C_ReStart();
 11048  0AC2  3188  2050  318A   	fcall	_I2C_ReStart
 11049                           
 11050                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11051  0AC5  3073               	movlw	115
 11052  0AC6  318A  2240  318A   	fcall	_I2C_Write_Byte
 11053                           
 11054                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11055  0AC9  3189  2124  318A   	fcall	_I2C_Read_Byte
 11056  0ACC  0020               	movlb	0	; select bank0
 11057  0ACD  00A6               	movwf	??_wireReadDataByte
 11058  0ACE  0826               	movf	??_wireReadDataByte,w
 11059  0ACF  00A8               	movwf	wireReadDataByte@val
 11060                           
 11061                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11062  0AD0  3188  2059  318A   	fcall	_I2C_Send_NACK
 11063                           
 11064                           ;APDS9960.c: 917:     I2C_Stop();
 11065  0AD3  3188  2065         	fcall	_I2C_Stop
 11066                           
 11067                           ;APDS9960.c: 919:     return val;
 11068  0AD5  0020               	movlb	0	; select bank0
 11069  0AD6  0828               	movf	wireReadDataByte@val,w
 11070  0AD7  0008               	return
 11071  0AD8                     __end_of_wireReadDataByte:	
 11072                           
 11073                           	psect	text33
 11074  0A40                     __ptext33:	
 11075 ;; *************** function _I2C_Write_Byte *****************
 11076 ;; Defined at:
 11077 ;;		line 75 in file "i2c.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  Byte            1    wreg     unsigned char 
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;  Byte            1    3[BANK0 ] unsigned char 
 11082 ;;  count           2    4[BANK0 ] unsigned int 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;                  1    wreg      void 
 11085 ;; Registers used:
 11086 ;;		wreg, status,2, status,0, pclath, cstack
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;Total ram usage:        5 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    6
 11099 ;; This function calls:
 11100 ;;		_i2c1_driver_TXData
 11101 ;; This function is called by:
 11102 ;;		_wireReadDataBlock
 11103 ;;		_wireWriteDataByte
 11104 ;;		_wireReadDataByte
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           
 11109                           ;psect for function _I2C_Write_Byte
 11110  0A40                     _I2C_Write_Byte:	
 11111                           
 11112                           ;incstack = 0
 11113                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11114                           ;I2C_Write_Byte@Byte stored from wreg
 11115  0A40  0020               	movlb	0	; select bank0
 11116  0A41  00A3               	movwf	I2C_Write_Byte@Byte
 11117                           
 11118                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11119  0A42  0823               	movf	I2C_Write_Byte@Byte,w
 11120  0A43  3188  20A4  318A   	fcall	_i2c1_driver_TXData
 11121                           
 11122                           ;i2c.c: 83:     unsigned int count = 0;
 11123  0A46  0020               	movlb	0	; select bank0
 11124  0A47  01A4               	clrf	I2C_Write_Byte@count
 11125  0A48  01A5               	clrf	I2C_Write_Byte@count+1
 11126  0A49                     l1221:	
 11127                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11128                           
 11129  0A49  0024               	movlb	4	; select bank4
 11130  0A4A  1B16               	btfsc	22,6	;volatile
 11131  0A4B  2A49               	goto	l1221
 11132  0A4C                     l5731:	
 11133  0A4C  0020               	movlb	0	; select bank0
 11134  0A4D  0825               	movf	I2C_Write_Byte@count+1,w
 11135  0A4E  00A2               	movwf	??_I2C_Write_Byte+1
 11136  0A4F  0824               	movf	I2C_Write_Byte@count,w
 11137  0A50  00A1               	movwf	??_I2C_Write_Byte
 11138  0A51  0AA4               	incf	I2C_Write_Byte@count,f
 11139  0A52  1903               	skipnz
 11140  0A53  0AA5               	incf	I2C_Write_Byte@count+1,f
 11141  0A54  3000               	movlw	0
 11142  0A55  0222               	subwf	??_I2C_Write_Byte+1,w
 11143  0A56  3005               	movlw	5
 11144  0A57  1903               	skipnz
 11145  0A58  0221               	subwf	??_I2C_Write_Byte,w
 11146  0A59  1803               	btfsc	3,0
 11147  0A5A  0008               	return
 11148  0A5B  2A4C               	goto	l5731
 11149  0A5C                     __end_of_I2C_Write_Byte:	
 11150                           
 11151                           	psect	text34
 11152  08A4                     __ptext34:	
 11153 ;; *************** function _i2c1_driver_TXData *****************
 11154 ;; Defined at:
 11155 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;  d               1    wreg     unsigned char 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;  d               1    0[BANK0 ] unsigned char 
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  1    wreg      void 
 11162 ;; Registers used:
 11163 ;;		wreg
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;Total ram usage:        1 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    5
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		_I2C_Write_Byte
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           
 11184                           ;psect for function _i2c1_driver_TXData
 11185  08A4                     _i2c1_driver_TXData:	
 11186                           
 11187                           ;incstack = 0
 11188                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11189                           ;i2c1_driver_TXData@d stored from wreg
 11190  08A4  0020               	movlb	0	; select bank0
 11191  08A5  00A0               	movwf	i2c1_driver_TXData@d
 11192                           
 11193                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11194  08A6  0820               	movf	i2c1_driver_TXData@d,w
 11195  08A7  0024               	movlb	4	; select bank4
 11196  08A8  0091               	movwf	17	;volatile
 11197  08A9  0008               	return
 11198  08AA                     __end_of_i2c1_driver_TXData:	
 11199                           
 11200                           	psect	text35
 11201  0865                     __ptext35:	
 11202 ;; *************** function _I2C_Stop *****************
 11203 ;; Defined at:
 11204 ;;		line 50 in file "i2c.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;		None
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;		None
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  1    wreg      void 
 11211 ;; Registers used:
 11212 ;;		status,2, status,0, pclath, cstack
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;Total ram usage:        0 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    6
 11225 ;; This function calls:
 11226 ;;		_i2c1_driver_stop
 11227 ;; This function is called by:
 11228 ;;		_wireReadDataBlock
 11229 ;;		_wireWriteDataByte
 11230 ;;		_wireReadDataByte
 11231 ;; This function uses a non-reentrant model
 11232 ;;
 11233                           
 11234                           
 11235                           ;psect for function _I2C_Stop
 11236  0865                     _I2C_Stop:	
 11237                           
 11238                           ;i2c.c: 52:  i2c1_driver_stop();
 11239                           
 11240                           ;incstack = 0
 11241                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11242  0865  3188  2062         	fcall	_i2c1_driver_stop
 11243  0867  0008               	return
 11244  0868                     __end_of_I2C_Stop:	
 11245                           
 11246                           	psect	text36
 11247  0862                     __ptext36:	
 11248 ;; *************** function _i2c1_driver_stop *****************
 11249 ;; Defined at:
 11250 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11251 ;; Parameters:    Size  Location     Type
 11252 ;;		None
 11253 ;; Auto vars:     Size  Location     Type
 11254 ;;		None
 11255 ;; Return value:  Size  Location     Type
 11256 ;;                  1    wreg      void 
 11257 ;; Registers used:
 11258 ;;		None
 11259 ;; Tracked objects:
 11260 ;;		On entry : 0/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;Total ram usage:        0 bytes
 11269 ;; Hardware stack levels used:    1
 11270 ;; Hardware stack levels required when called:    5
 11271 ;; This function calls:
 11272 ;;		Nothing
 11273 ;; This function is called by:
 11274 ;;		_I2C_Stop
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           
 11279                           ;psect for function _i2c1_driver_stop
 11280  0862                     _i2c1_driver_stop:	
 11281                           
 11282                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11283                           
 11284                           ;incstack = 0
 11285                           ; Regs used in _i2c1_driver_stop: []
 11286  0862  0024               	movlb	4	; select bank4
 11287  0863  1516               	bsf	22,2	;volatile
 11288  0864  0008               	return
 11289  0865                     __end_of_i2c1_driver_stop:	
 11290                           
 11291                           	psect	text37
 11292  085F                     __ptext37:	
 11293 ;; *************** function _I2C_Start *****************
 11294 ;; Defined at:
 11295 ;;		line 35 in file "i2c.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;		None
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;		None
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		status,2, status,0, pclath, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;Total ram usage:        0 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:    6
 11316 ;; This function calls:
 11317 ;;		_i2c1_driver_start
 11318 ;; This function is called by:
 11319 ;;		_wireReadDataBlock
 11320 ;;		_wireWriteDataByte
 11321 ;;		_wireReadDataByte
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function _I2C_Start
 11327  085F                     _I2C_Start:	
 11328                           
 11329                           ;i2c.c: 37:  i2c1_driver_start();
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11333  085F  3188  205C         	fcall	_i2c1_driver_start
 11334  0861  0008               	return
 11335  0862                     __end_of_I2C_Start:	
 11336                           
 11337                           	psect	text38
 11338  085C                     __ptext38:	
 11339 ;; *************** function _i2c1_driver_start *****************
 11340 ;; Defined at:
 11341 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;		None
 11344 ;; Auto vars:     Size  Location     Type
 11345 ;;		None
 11346 ;; Return value:  Size  Location     Type
 11347 ;;                  1    wreg      void 
 11348 ;; Registers used:
 11349 ;;		None
 11350 ;; Tracked objects:
 11351 ;;		On entry : 0/0
 11352 ;;		On exit  : 0/0
 11353 ;;		Unchanged: 0/0
 11354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;Total ram usage:        0 bytes
 11360 ;; Hardware stack levels used:    1
 11361 ;; Hardware stack levels required when called:    5
 11362 ;; This function calls:
 11363 ;;		Nothing
 11364 ;; This function is called by:
 11365 ;;		_I2C_Start
 11366 ;;		_i2c_masterOperation
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           
 11371                           ;psect for function _i2c1_driver_start
 11372  085C                     _i2c1_driver_start:	
 11373                           
 11374                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11375                           
 11376                           ;incstack = 0
 11377                           ; Regs used in _i2c1_driver_start: []
 11378  085C  0024               	movlb	4	; select bank4
 11379  085D  1416               	bsf	22,0	;volatile
 11380  085E  0008               	return
 11381  085F                     __end_of_i2c1_driver_start:	
 11382                           
 11383                           	psect	text39
 11384  0859                     __ptext39:	
 11385 ;; *************** function _I2C_Send_NACK *****************
 11386 ;; Defined at:
 11387 ;;		line 66 in file "i2c.c"
 11388 ;; Parameters:    Size  Location     Type
 11389 ;;		None
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;		None
 11392 ;; Return value:  Size  Location     Type
 11393 ;;                  1    wreg      void 
 11394 ;; Registers used:
 11395 ;;		status,2, status,0, pclath, cstack
 11396 ;; Tracked objects:
 11397 ;;		On entry : 0/0
 11398 ;;		On exit  : 0/0
 11399 ;;		Unchanged: 0/0
 11400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;Total ram usage:        0 bytes
 11406 ;; Hardware stack levels used:    1
 11407 ;; Hardware stack levels required when called:    6
 11408 ;; This function calls:
 11409 ;;		_i2c1_driver_sendNACK
 11410 ;; This function is called by:
 11411 ;;		_wireReadDataBlock
 11412 ;;		_wireReadDataByte
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           
 11417                           ;psect for function _I2C_Send_NACK
 11418  0859                     _I2C_Send_NACK:	
 11419                           
 11420                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 11421                           
 11422                           ;incstack = 0
 11423                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 11424  0859  3188  2090         	fcall	_i2c1_driver_sendNACK
 11425  085B  0008               	return
 11426  085C                     __end_of_I2C_Send_NACK:	
 11427                           
 11428                           	psect	text40
 11429  0890                     __ptext40:	
 11430 ;; *************** function _i2c1_driver_sendNACK *****************
 11431 ;; Defined at:
 11432 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;		None
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;		None
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      void 
 11439 ;; Registers used:
 11440 ;;		None
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;Total ram usage:        0 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    5
 11453 ;; This function calls:
 11454 ;;		Nothing
 11455 ;; This function is called by:
 11456 ;;		_I2C_Send_NACK
 11457 ;; This function uses a non-reentrant model
 11458 ;;
 11459                           
 11460                           
 11461                           ;psect for function _i2c1_driver_sendNACK
 11462  0890                     _i2c1_driver_sendNACK:	
 11463                           
 11464                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 11465                           
 11466                           ;incstack = 0
 11467                           ; Regs used in _i2c1_driver_sendNACK: []
 11468  0890  0024               	movlb	4	; select bank4
 11469  0891  1696               	bsf	22,5	;volatile
 11470                           
 11471                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 11472  0892  1616               	bsf	22,4	;volatile
 11473  0893  0008               	return
 11474  0894                     __end_of_i2c1_driver_sendNACK:	
 11475                           
 11476                           	psect	text41
 11477  0924                     __ptext41:	
 11478 ;; *************** function _I2C_Read_Byte *****************
 11479 ;; Defined at:
 11480 ;;		line 115 in file "i2c.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      unsigned char 
 11487 ;; Registers used:
 11488 ;;		wreg, status,2, status,0, pclath, cstack
 11489 ;; Tracked objects:
 11490 ;;		On entry : 0/0
 11491 ;;		On exit  : 0/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;Total ram usage:        0 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    6
 11501 ;; This function calls:
 11502 ;;		_i2c1_driver_getRXData
 11503 ;;		_i2c1_driver_isBufferFull
 11504 ;;		_i2c1_driver_startRX
 11505 ;; This function is called by:
 11506 ;;		_wireReadDataBlock
 11507 ;;		_wireReadDataByte
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           
 11512                           ;psect for function _I2C_Read_Byte
 11513  0924                     _I2C_Read_Byte:	
 11514                           
 11515                           ;i2c.c: 117:     i2c1_driver_startRX();
 11516                           
 11517                           ;incstack = 0
 11518                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 11519  0924  3188  2056  3189   	fcall	_i2c1_driver_startRX
 11520  0927                     l5737:	
 11521                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11522                           
 11523                           
 11524                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11525  0927  3188  20D2  3189   	fcall	_i2c1_driver_isBufferFull
 11526  092A  1C03               	btfss	3,0
 11527  092B  2927               	goto	l5737
 11528                           
 11529                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 11530  092C  3188  2053         	fcall	_i2c1_driver_getRXData
 11531  092E  0008               	return
 11532  092F                     __end_of_I2C_Read_Byte:	
 11533                           
 11534                           	psect	text42
 11535  0856                     __ptext42:	
 11536 ;; *************** function _i2c1_driver_startRX *****************
 11537 ;; Defined at:
 11538 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;		None
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;		None
 11543 ;; Return value:  Size  Location     Type
 11544 ;;                  1    wreg      void 
 11545 ;; Registers used:
 11546 ;;		None
 11547 ;; Tracked objects:
 11548 ;;		On entry : 0/0
 11549 ;;		On exit  : 0/0
 11550 ;;		Unchanged: 0/0
 11551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;Total ram usage:        0 bytes
 11557 ;; Hardware stack levels used:    1
 11558 ;; Hardware stack levels required when called:    5
 11559 ;; This function calls:
 11560 ;;		Nothing
 11561 ;; This function is called by:
 11562 ;;		_I2C_Read_Byte
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           
 11567                           ;psect for function _i2c1_driver_startRX
 11568  0856                     _i2c1_driver_startRX:	
 11569                           
 11570                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 11571                           
 11572                           ;incstack = 0
 11573                           ; Regs used in _i2c1_driver_startRX: []
 11574  0856  0024               	movlb	4	; select bank4
 11575  0857  1596               	bsf	22,3	;volatile
 11576  0858  0008               	return
 11577  0859                     __end_of_i2c1_driver_startRX:	
 11578                           
 11579                           	psect	text43
 11580  08D2                     __ptext43:	
 11581 ;; *************** function _i2c1_driver_isBufferFull *****************
 11582 ;; Defined at:
 11583 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;		None
 11588 ;; Return value:  Size  Location     Type
 11589 ;;		None               void
 11590 ;; Registers used:
 11591 ;;		wreg, status,2, status,0
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;Total ram usage:        1 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    5
 11604 ;; This function calls:
 11605 ;;		Nothing
 11606 ;; This function is called by:
 11607 ;;		_I2C_Read_Byte
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           
 11612                           ;psect for function _i2c1_driver_isBufferFull
 11613  08D2                     _i2c1_driver_isBufferFull:	
 11614                           
 11615                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 11616                           
 11617                           ;incstack = 0
 11618                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 11619  08D2  0024               	movlb	4	; select bank4
 11620  08D3  0814               	movf	20,w	;volatile
 11621  08D4  3901               	andlw	1
 11622  08D5  0020               	movlb	0	; select bank0
 11623  08D6  00A0               	movwf	??_i2c1_driver_isBufferFull
 11624  08D7  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 11625  08D8  0008               	return
 11626  08D9                     __end_of_i2c1_driver_isBufferFull:	
 11627                           
 11628                           	psect	text44
 11629  0853                     __ptext44:	
 11630 ;; *************** function _i2c1_driver_getRXData *****************
 11631 ;; Defined at:
 11632 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;		None
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;		None
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      unsigned char 
 11639 ;; Registers used:
 11640 ;;		wreg
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;Total ram usage:        0 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    5
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_I2C_Read_Byte
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _i2c1_driver_getRXData
 11662  0853                     _i2c1_driver_getRXData:	
 11663                           
 11664                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 11668  0853  0024               	movlb	4	; select bank4
 11669  0854  0811               	movf	17,w	;volatile
 11670  0855  0008               	return
 11671  0856                     __end_of_i2c1_driver_getRXData:	
 11672                           
 11673                           	psect	text45
 11674  0850                     __ptext45:	
 11675 ;; *************** function _I2C_ReStart *****************
 11676 ;; Defined at:
 11677 ;;		line 43 in file "i2c.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;		None
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      void 
 11684 ;; Registers used:
 11685 ;;		status,2, status,0, pclath, cstack
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;Total ram usage:        0 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; Hardware stack levels required when called:    6
 11698 ;; This function calls:
 11699 ;;		_i2c1_driver_restart
 11700 ;; This function is called by:
 11701 ;;		_wireReadDataBlock
 11702 ;;		_wireReadDataByte
 11703 ;; This function uses a non-reentrant model
 11704 ;;
 11705                           
 11706                           
 11707                           ;psect for function _I2C_ReStart
 11708  0850                     _I2C_ReStart:	
 11709                           
 11710                           ;i2c.c: 45:  i2c1_driver_restart();
 11711                           
 11712                           ;incstack = 0
 11713                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 11714  0850  3188  204D         	fcall	_i2c1_driver_restart
 11715  0852  0008               	return
 11716  0853                     __end_of_I2C_ReStart:	
 11717                           
 11718                           	psect	text46
 11719  084D                     __ptext46:	
 11720 ;; *************** function _i2c1_driver_restart *****************
 11721 ;; Defined at:
 11722 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;		None
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;		None
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  1    wreg      void 
 11729 ;; Registers used:
 11730 ;;		None
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;Total ram usage:        0 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    5
 11743 ;; This function calls:
 11744 ;;		Nothing
 11745 ;; This function is called by:
 11746 ;;		_I2C_ReStart
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _i2c1_driver_restart
 11752  084D                     _i2c1_driver_restart:	
 11753                           
 11754                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _i2c1_driver_restart: []
 11758  084D  0024               	movlb	4	; select bank4
 11759  084E  1496               	bsf	22,1	;volatile
 11760  084F  0008               	return
 11761  0850                     __end_of_i2c1_driver_restart:	
 11762                           
 11763                           	psect	text47
 11764  09F5                     __ptext47:	
 11765 ;; *************** function _SYSTEM_Initialize *****************
 11766 ;; Defined at:
 11767 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;		None
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;		None
 11772 ;; Return value:  Size  Location     Type
 11773 ;;                  1    wreg      void 
 11774 ;; Registers used:
 11775 ;;		wreg, status,2, status,0, pclath, cstack
 11776 ;; Tracked objects:
 11777 ;;		On entry : 0/0
 11778 ;;		On exit  : 0/0
 11779 ;;		Unchanged: 0/0
 11780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;Total ram usage:        0 bytes
 11786 ;; Hardware stack levels used:    1
 11787 ;; Hardware stack levels required when called:    6
 11788 ;; This function calls:
 11789 ;;		_ADC_Initialize
 11790 ;;		_OSCILLATOR_Initialize
 11791 ;;		_PIN_MANAGER_Initialize
 11792 ;;		_PMD_Initialize
 11793 ;;		_PWM1_Initialize
 11794 ;;		_SPI2_Initialize
 11795 ;;		_TMR2_Initialize
 11796 ;;		_WDT_Initialize
 11797 ;; This function is called by:
 11798 ;;		_main
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function _SYSTEM_Initialize
 11804  09F5                     _SYSTEM_Initialize:	
 11805                           
 11806                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 11807                           
 11808                           ;incstack = 0
 11809                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11810  09F5  3188  20F9  3189   	fcall	_PMD_Initialize
 11811                           
 11812                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 11813  09F8  318D  2509  3189   	fcall	_PIN_MANAGER_Initialize
 11814                           
 11815                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 11816  09FB  3188  20F1  3189   	fcall	_OSCILLATOR_Initialize
 11817                           
 11818                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 11819  09FE  3188  208C  3189   	fcall	_WDT_Initialize
 11820                           
 11821                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 11822  0A01  3188  20CB  3189   	fcall	_SPI2_Initialize
 11823                           
 11824                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 11825  0A04  3189  212F  3189   	fcall	_PWM1_Initialize
 11826                           
 11827                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 11828  0A07  3188  20E9  3189   	fcall	_ADC_Initialize
 11829                           
 11830                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 11831  0A0A  3189  2101         	fcall	_TMR2_Initialize
 11832  0A0C  0008               	return
 11833  0A0D                     __end_of_SYSTEM_Initialize:	
 11834                           
 11835                           	psect	text48
 11836  088C                     __ptext48:	
 11837 ;; *************** function _WDT_Initialize *****************
 11838 ;; Defined at:
 11839 ;;		line 77 in file "mcc_generated_files/mcc.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;		None
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      void 
 11846 ;; Registers used:
 11847 ;;		wreg
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;Total ram usage:        0 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:    5
 11860 ;; This function calls:
 11861 ;;		Nothing
 11862 ;; This function is called by:
 11863 ;;		_SYSTEM_Initialize
 11864 ;; This function uses a non-reentrant model
 11865 ;;
 11866                           
 11867                           
 11868                           ;psect for function _WDT_Initialize
 11869  088C                     _WDT_Initialize:	
 11870                           
 11871                           ;mcc_generated_files/mcc.c: 80:     WDTCON = 0x18;
 11872                           
 11873                           ;incstack = 0
 11874                           ; Regs used in _WDT_Initialize: [wreg]
 11875  088C  3018               	movlw	24
 11876  088D  0021               	movlb	1	; select bank1
 11877  088E  0097               	movwf	23	;volatile
 11878  088F  0008               	return
 11879  0890                     __end_of_WDT_Initialize:	
 11880                           
 11881                           	psect	text49
 11882  0901                     __ptext49:	
 11883 ;; *************** function _TMR2_Initialize *****************
 11884 ;; Defined at:
 11885 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      void 
 11892 ;; Registers used:
 11893 ;;		wreg, status,2
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;Total ram usage:        0 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    5
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_SYSTEM_Initialize
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           
 11914                           ;psect for function _TMR2_Initialize
 11915  0901                     _TMR2_Initialize:	
 11916                           
 11917                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 11918                           
 11919                           ;incstack = 0
 11920                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11921  0901  30FF               	movlw	255
 11922  0902  0020               	movlb	0	; select bank0
 11923  0903  009E               	movwf	30	;volatile
 11924                           
 11925                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 11926  0904  019D               	clrf	29	;volatile
 11927                           
 11928                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 11929  0905  1091               	bcf	17,1	;volatile
 11930                           
 11931                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 11932  0906  3004               	movlw	4
 11933  0907  009F               	movwf	31	;volatile
 11934  0908  0008               	return
 11935  0909                     __end_of_TMR2_Initialize:	
 11936                           
 11937                           	psect	text50
 11938  08CB                     __ptext50:	
 11939 ;; *************** function _SPI2_Initialize *****************
 11940 ;; Defined at:
 11941 ;;		line 65 in file "mcc_generated_files/spi2.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;Total ram usage:        0 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    5
 11962 ;; This function calls:
 11963 ;;		Nothing
 11964 ;; This function is called by:
 11965 ;;		_SYSTEM_Initialize
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           
 11970                           ;psect for function _SPI2_Initialize
 11971  08CB                     _SPI2_Initialize:	
 11972                           
 11973                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11974                           
 11975                           ;incstack = 0
 11976                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11977  08CB  3080               	movlw	128
 11978  08CC  0024               	movlb	4	; select bank4
 11979  08CD  009C               	movwf	28	;volatile
 11980                           
 11981                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 11982  08CE  3031               	movlw	49
 11983  08CF  009D               	movwf	29	;volatile
 11984                           
 11985                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11986  08D0  019A               	clrf	26	;volatile
 11987  08D1  0008               	return
 11988  08D2                     __end_of_SPI2_Initialize:	
 11989                           
 11990                           	psect	text51
 11991  092F                     __ptext51:	
 11992 ;; *************** function _PWM1_Initialize *****************
 11993 ;; Defined at:
 11994 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;		None
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;		None
 11999 ;; Return value:  Size  Location     Type
 12000 ;;                  1    wreg      void 
 12001 ;; Registers used:
 12002 ;;		wreg, status,2, status,0
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;Total ram usage:        0 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:    5
 12015 ;; This function calls:
 12016 ;;		Nothing
 12017 ;; This function is called by:
 12018 ;;		_SYSTEM_Initialize
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _PWM1_Initialize
 12024  092F                     _PWM1_Initialize:	
 12025                           
 12026                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12030  092F  308F               	movlw	143
 12031  0930  0025               	movlb	5	; select bank5
 12032  0931  0093               	movwf	19	;volatile
 12033                           
 12034                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12035  0932  3001               	movlw	1
 12036  0933  0092               	movwf	18	;volatile
 12037                           
 12038                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0x32;
 12039  0934  3032               	movlw	50
 12040  0935  0091               	movwf	17	;volatile
 12041                           
 12042                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12043  0936  081F               	movf	31,w	;volatile
 12044  0937  39FC               	andlw	-4
 12045  0938  3801               	iorlw	1
 12046  0939  009F               	movwf	31	;volatile
 12047  093A  0008               	return
 12048  093B                     __end_of_PWM1_Initialize:	
 12049                           
 12050                           	psect	text52
 12051  08F9                     __ptext52:	
 12052 ;; *************** function _PMD_Initialize *****************
 12053 ;; Defined at:
 12054 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;		None
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;		None
 12059 ;; Return value:  Size  Location     Type
 12060 ;;                  1    wreg      void 
 12061 ;; Registers used:
 12062 ;;		status,2
 12063 ;; Tracked objects:
 12064 ;;		On entry : 0/0
 12065 ;;		On exit  : 0/0
 12066 ;;		Unchanged: 0/0
 12067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;Total ram usage:        0 bytes
 12073 ;; Hardware stack levels used:    1
 12074 ;; Hardware stack levels required when called:    5
 12075 ;; This function calls:
 12076 ;;		Nothing
 12077 ;; This function is called by:
 12078 ;;		_SYSTEM_Initialize
 12079 ;; This function uses a non-reentrant model
 12080 ;;
 12081                           
 12082                           
 12083                           ;psect for function _PMD_Initialize
 12084  08F9                     _PMD_Initialize:	
 12085                           
 12086                           ;mcc_generated_files/mcc.c: 86:     PMD0 = 0x00;
 12087                           
 12088                           ;incstack = 0
 12089                           ; Regs used in _PMD_Initialize: [status,2]
 12090  08F9  0032               	movlb	18	; select bank18
 12091  08FA  0191               	clrf	17	;volatile
 12092                           
 12093                           ;mcc_generated_files/mcc.c: 88:     PMD1 = 0x00;
 12094  08FB  0192               	clrf	18	;volatile
 12095                           
 12096                           ;mcc_generated_files/mcc.c: 90:     PMD2 = 0x00;
 12097  08FC  0193               	clrf	19	;volatile
 12098                           
 12099                           ;mcc_generated_files/mcc.c: 92:     PMD3 = 0x00;
 12100  08FD  0194               	clrf	20	;volatile
 12101                           
 12102                           ;mcc_generated_files/mcc.c: 94:     PMD4 = 0x00;
 12103  08FE  0195               	clrf	21	;volatile
 12104                           
 12105                           ;mcc_generated_files/mcc.c: 96:     PMD5 = 0x00;
 12106  08FF  0196               	clrf	22	;volatile
 12107  0900  0008               	return
 12108  0901                     __end_of_PMD_Initialize:	
 12109                           
 12110                           	psect	text53
 12111  0D09                     __ptext53:	
 12112 ;; *************** function _PIN_MANAGER_Initialize *****************
 12113 ;; Defined at:
 12114 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      void 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        0 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    5
 12135 ;; This function calls:
 12136 ;;		Nothing
 12137 ;; This function is called by:
 12138 ;;		_SYSTEM_Initialize
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           
 12143                           ;psect for function _PIN_MANAGER_Initialize
 12144  0D09                     _PIN_MANAGER_Initialize:	
 12145                           
 12146                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 12147                           
 12148                           ;incstack = 0
 12149                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12150  0D09  0022               	movlb	2	; select bank2
 12151  0D0A  018C               	clrf	12	;volatile
 12152                           
 12153                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 12154  0D0B  018D               	clrf	13	;volatile
 12155                           
 12156                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 12157  0D0C  018E               	clrf	14	;volatile
 12158                           
 12159                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
 12160  0D0D  3033               	movlw	51
 12161  0D0E  0021               	movlb	1	; select bank1
 12162  0D0F  008C               	movwf	12	;volatile
 12163                           
 12164                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 12165  0D10  30B0               	movlw	176
 12166  0D11  008D               	movwf	13	;volatile
 12167                           
 12168                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xBA;
 12169  0D12  30BA               	movlw	186
 12170  0D13  008E               	movwf	14	;volatile
 12171                           
 12172                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xF4;
 12173  0D14  30F4               	movlw	244
 12174  0D15  0023               	movlb	3	; select bank3
 12175  0D16  008E               	movwf	14	;volatile
 12176                           
 12177                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 12178  0D17  018D               	clrf	13	;volatile
 12179                           
 12180                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 12181  0D18  3011               	movlw	17
 12182  0D19  008C               	movwf	12	;volatile
 12183                           
 12184                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 12185  0D1A  0024               	movlb	4	; select bank4
 12186  0D1B  018D               	clrf	13	;volatile
 12187                           
 12188                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 12189  0D1C  018C               	clrf	12	;volatile
 12190                           
 12191                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 12192  0D1D  018E               	clrf	14	;volatile
 12193                           
 12194                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 12195  0D1E  0025               	movlb	5	; select bank5
 12196  0D1F  018C               	clrf	12	;volatile
 12197                           
 12198                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 12199  0D20  018D               	clrf	13	;volatile
 12200                           
 12201                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 12202  0D21  018E               	clrf	14	;volatile
 12203                           
 12204                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 12205  0D22  3037               	movlw	55
 12206  0D23  0026               	movlb	6	; select bank6
 12207  0D24  008C               	movwf	12	;volatile
 12208                           
 12209                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 12210  0D25  30F0               	movlw	240
 12211  0D26  008D               	movwf	13	;volatile
 12212                           
 12213                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 12214  0D27  30FF               	movlw	255
 12215  0D28  008E               	movwf	14	;volatile
 12216                           
 12217                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 12218  0D29  0021               	movlb	1	; select bank1
 12219  0D2A  1610               	bsf	16,4	;volatile
 12220                           
 12221                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 12222  0D2B  300C               	movlw	12
 12223  0D2C  003C               	movlb	28	; select bank28
 12224  0D2D  009E               	movwf	30	;volatile
 12225                           
 12226                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 12227  0D2E  300F               	movlw	15
 12228  0D2F  00A0               	movwf	32	;volatile
 12229                           
 12230                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 12231  0D30  301A               	movlw	26
 12232  0D31  003D               	movlb	29	; select bank29
 12233  0D32  009E               	movwf	30	;volatile
 12234                           
 12235                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 12236  0D33  3018               	movlw	24
 12237  0D34  009F               	movwf	31	;volatile
 12238                           
 12239                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 12240  0D35  3019               	movlw	25
 12241  0D36  009D               	movwf	29	;volatile
 12242                           
 12243                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 12244  0D37  301B               	movlw	27
 12245  0D38  00A2               	movwf	34	;volatile
 12246                           
 12247                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 12248  0D39  300D               	movlw	13
 12249  0D3A  003C               	movlb	28	; select bank28
 12250  0D3B  00A1               	movwf	33	;volatile
 12251                           
 12252                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 12253  0D3C  300E               	movlw	14
 12254  0D3D  009D               	movwf	29	;volatile
 12255  0D3E  0008               	return
 12256  0D3F                     __end_of_PIN_MANAGER_Initialize:	
 12257                           
 12258                           	psect	text54
 12259  08F1                     __ptext54:	
 12260 ;; *************** function _OSCILLATOR_Initialize *****************
 12261 ;; Defined at:
 12262 ;;		line 63 in file "mcc_generated_files/mcc.c"
 12263 ;; Parameters:    Size  Location     Type
 12264 ;;		None
 12265 ;; Auto vars:     Size  Location     Type
 12266 ;;		None
 12267 ;; Return value:  Size  Location     Type
 12268 ;;                  1    wreg      void 
 12269 ;; Registers used:
 12270 ;;		wreg, status,2
 12271 ;; Tracked objects:
 12272 ;;		On entry : 0/0
 12273 ;;		On exit  : 0/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;Total ram usage:        0 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:    5
 12283 ;; This function calls:
 12284 ;;		Nothing
 12285 ;; This function is called by:
 12286 ;;		_SYSTEM_Initialize
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function _OSCILLATOR_Initialize
 12292  08F1                     _OSCILLATOR_Initialize:	
 12293                           
 12294                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x61;
 12295                           
 12296                           ;incstack = 0
 12297                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12298  08F1  3061               	movlw	97
 12299  08F2  0032               	movlb	18	; select bank18
 12300  08F3  0099               	movwf	25	;volatile
 12301                           
 12302                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 12303  08F4  019B               	clrf	27	;volatile
 12304                           
 12305                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 12306  08F5  019D               	clrf	29	;volatile
 12307                           
 12308                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x00;
 12309  08F6  019F               	clrf	31	;volatile
 12310                           
 12311                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 12312  08F7  019E               	clrf	30	;volatile
 12313  08F8  0008               	return
 12314  08F9                     __end_of_OSCILLATOR_Initialize:	
 12315                           
 12316                           	psect	text55
 12317  08E9                     __ptext55:	
 12318 ;; *************** function _ADC_Initialize *****************
 12319 ;; Defined at:
 12320 ;;		line 65 in file "mcc_generated_files/adc.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;		None
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;		None
 12325 ;; Return value:  Size  Location     Type
 12326 ;;                  1    wreg      void 
 12327 ;; Registers used:
 12328 ;;		wreg, status,2
 12329 ;; Tracked objects:
 12330 ;;		On entry : 0/0
 12331 ;;		On exit  : 0/0
 12332 ;;		Unchanged: 0/0
 12333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;Total ram usage:        0 bytes
 12339 ;; Hardware stack levels used:    1
 12340 ;; Hardware stack levels required when called:    5
 12341 ;; This function calls:
 12342 ;;		Nothing
 12343 ;; This function is called by:
 12344 ;;		_SYSTEM_Initialize
 12345 ;; This function uses a non-reentrant model
 12346 ;;
 12347                           
 12348                           
 12349                           ;psect for function _ADC_Initialize
 12350  08E9                     _ADC_Initialize:	
 12351                           
 12352                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12356  08E9  3001               	movlw	1
 12357  08EA  0021               	movlb	1	; select bank1
 12358  08EB  009D               	movwf	29	;volatile
 12359                           
 12360                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 12361  08EC  019E               	clrf	30	;volatile
 12362                           
 12363                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 12364  08ED  019F               	clrf	31	;volatile
 12365                           
 12366                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 12367  08EE  019B               	clrf	27	;volatile
 12368                           
 12369                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 12370  08EF  019C               	clrf	28	;volatile
 12371  08F0  0008               	return
 12372  08F1                     __end_of_ADC_Initialize:	
 12373                           
 12374                           	psect	text56
 12375  08C4                     __ptext56:	
 12376 ;; *************** function _PIR_Sensor *****************
 12377 ;; Defined at:
 12378 ;;		line 316 in file "main.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;		None
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;		None
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      _Bool 
 12385 ;; Registers used:
 12386 ;;		wreg
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;Total ram usage:        0 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    5
 12399 ;; This function calls:
 12400 ;;		Nothing
 12401 ;; This function is called by:
 12402 ;;		_main
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           
 12407                           ;psect for function _PIR_Sensor
 12408  08C4                     _PIR_Sensor:	
 12409                           
 12410                           ;main.c: 318:     if(PORTCbits.RC3 >= 1){
 12411                           
 12412                           ;incstack = 0
 12413                           ; Regs used in _PIR_Sensor: [wreg]
 12414  08C4  0020               	movlb	0	; select bank0
 12415  08C5  1D8E               	btfss	14,3	;volatile
 12416  08C6  28C9               	goto	l6693
 12417                           
 12418                           ;main.c: 323:         return 1;
 12419  08C7  3001               	movlw	1
 12420  08C8  0008               	return
 12421  08C9                     l6693:	
 12422                           
 12423                           ;main.c: 326:         return 0;
 12424  08C9  3000               	movlw	0
 12425  08CA  0008               	return
 12426  08CB                     __end_of_PIR_Sensor:	
 12427                           
 12428                           	psect	text57
 12429  07C2                     __ptext57:	
 12430 ;; *************** function _On_Off *****************
 12431 ;; Defined at:
 12432 ;;		line 299 in file "main.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;		None
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;  val             2    7[BANK0 ] int 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  1    wreg      _Bool 
 12439 ;; Registers used:
 12440 ;;		wreg, status,2, status,0, pclath, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;Total ram usage:        5 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    6
 12453 ;; This function calls:
 12454 ;;		_ADC_GetConversion
 12455 ;; This function is called by:
 12456 ;;		_main
 12457 ;; This function uses a non-reentrant model
 12458 ;;
 12459                           
 12460                           
 12461                           ;psect for function _On_Off
 12462  07C2                     _On_Off:	
 12463                           
 12464                           ;main.c: 300:     adcResult = ADC_GetConversion(BTN) >> 6;
 12465                           
 12466                           ;incstack = 0
 12467                           ; Regs used in _On_Off: [wreg+status,2+status,0+pclath+cstack]
 12468  07C2  3017               	movlw	23
 12469  07C3  318A  2278  3187   	fcall	_ADC_GetConversion
 12470  07C6  0020               	movlb	0	; select bank0
 12471  07C7  0820               	movf	?_ADC_GetConversion,w
 12472  07C8  00A4               	movwf	??_On_Off
 12473  07C9  0821               	movf	?_ADC_GetConversion+1,w
 12474  07CA  00A5               	movwf	??_On_Off+1
 12475  07CB  3006               	movlw	6
 12476  07CC                     u6235:	
 12477  07CC  36A5               	lsrf	??_On_Off+1,f
 12478  07CD  0CA4               	rrf	??_On_Off,f
 12479  07CE  0B89               	decfsz	9,f
 12480  07CF  2FCC               	goto	u6235
 12481  07D0  0824               	movf	??_On_Off,w
 12482  07D1  00A6               	movwf	??_On_Off+2
 12483  07D2  0826               	movf	??_On_Off+2,w
 12484  07D3  00EC               	movwf	_adcResult
 12485                           
 12486                           ;main.c: 301:     int val = adcResult;
 12487  07D4  086C               	movf	_adcResult,w
 12488  07D5  00A4               	movwf	??_On_Off
 12489  07D6  01A5               	clrf	??_On_Off+1
 12490  07D7  0824               	movf	??_On_Off,w
 12491  07D8  00A7               	movwf	On_Off@val
 12492  07D9  0825               	movf	??_On_Off+1,w
 12493  07DA  00A8               	movwf	On_Off@val+1
 12494                           
 12495                           ;main.c: 302:     if(val >= 240 && val <= 254) {
 12496  07DB  0828               	movf	On_Off@val+1,w
 12497  07DC  3A80               	xorlw	128
 12498  07DD  00A4               	movwf	??_On_Off
 12499  07DE  3080               	movlw	128
 12500  07DF  0224               	subwf	??_On_Off,w
 12501  07E0  1D03               	skipz
 12502  07E1  2FE4               	goto	u6245
 12503  07E2  30F0               	movlw	240
 12504  07E3  0227               	subwf	On_Off@val,w
 12505  07E4                     u6245:	
 12506  07E4  1C03               	skipc
 12507  07E5  0008               	return
 12508  07E6  0020               	movlb	0	; select bank0
 12509  07E7  0828               	movf	On_Off@val+1,w
 12510  07E8  3A80               	xorlw	128
 12511  07E9  00A4               	movwf	??_On_Off
 12512  07EA  3080               	movlw	128
 12513  07EB  0224               	subwf	??_On_Off,w
 12514  07EC  1D03               	skipz
 12515  07ED  2FF0               	goto	u6255
 12516  07EE  30FF               	movlw	255
 12517  07EF  0227               	subwf	On_Off@val,w
 12518  07F0                     u6255:	
 12519  07F0  1803               	skipnc
 12520  07F1  0008               	return
 12521                           
 12522                           ;main.c: 303:         if(on == 0) {
 12523  07F2  0020               	movlb	0	; select bank0
 12524  07F3  085C               	movf	_on,w
 12525  07F4  045D               	iorwf	_on+1,w
 12526  07F5  1D03               	btfss	3,2
 12527  07F6  2FFC               	goto	l6919
 12528                           
 12529                           ;main.c: 304:             on = 1;
 12530  07F7  3001               	movlw	1
 12531  07F8  00DC               	movwf	_on
 12532  07F9  3000               	movlw	0
 12533  07FA  00DD               	movwf	_on+1
 12534  07FB  0008               	return
 12535  07FC                     l6919:	
 12536                           
 12537                           ;main.c: 308:             on = 0;
 12538  07FC  01DC               	clrf	_on
 12539  07FD  01DD               	clrf	_on+1
 12540  07FE  0008               	return
 12541  07FF                     __end_of_On_Off:	
 12542                           
 12543                           	psect	text58
 12544  05DB                     __ptext58:	
 12545 ;; *************** function _Get_ADC *****************
 12546 ;; Defined at:
 12547 ;;		line 258 in file "main.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;		None
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;  val             2   15[BANK0 ] int 
 12552 ;; Return value:  Size  Location     Type
 12553 ;;                  1    wreg      void 
 12554 ;; Registers used:
 12555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;Total ram usage:        5 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    8
 12568 ;; This function calls:
 12569 ;;		_ADC_GetConversion
 12570 ;;		_Display_Name
 12571 ;; This function is called by:
 12572 ;;		_main
 12573 ;; This function uses a non-reentrant model
 12574 ;;
 12575                           
 12576                           
 12577                           ;psect for function _Get_ADC
 12578  05DB                     _Get_ADC:	
 12579                           
 12580                           ;main.c: 259:     adcResult = ADC_GetConversion(BTN) >> 6;
 12581                           
 12582                           ;incstack = 0
 12583                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12584  05DB  3017               	movlw	23
 12585  05DC  318A  2278  3185   	fcall	_ADC_GetConversion
 12586  05DF  0020               	movlb	0	; select bank0
 12587  05E0  0820               	movf	?_ADC_GetConversion,w
 12588  05E1  00AC               	movwf	??_Get_ADC
 12589  05E2  0821               	movf	?_ADC_GetConversion+1,w
 12590  05E3  00AD               	movwf	??_Get_ADC+1
 12591  05E4  3006               	movlw	6
 12592  05E5                     u6275:	
 12593  05E5  36AD               	lsrf	??_Get_ADC+1,f
 12594  05E6  0CAC               	rrf	??_Get_ADC,f
 12595  05E7  0B89               	decfsz	9,f
 12596  05E8  2DE5               	goto	u6275
 12597  05E9  082C               	movf	??_Get_ADC,w
 12598  05EA  00AE               	movwf	??_Get_ADC+2
 12599  05EB  082E               	movf	??_Get_ADC+2,w
 12600  05EC  00EC               	movwf	_adcResult
 12601                           
 12602                           ;main.c: 260:     int val = adcResult;
 12603  05ED  086C               	movf	_adcResult,w
 12604  05EE  00AC               	movwf	??_Get_ADC
 12605  05EF  01AD               	clrf	??_Get_ADC+1
 12606  05F0  082C               	movf	??_Get_ADC,w
 12607  05F1  00AF               	movwf	Get_ADC@val
 12608  05F2  082D               	movf	??_Get_ADC+1,w
 12609  05F3  00B0               	movwf	Get_ADC@val+1
 12610                           
 12611                           ;main.c: 267:     if(val >= 240 && val <= 254) {
 12612  05F4  0830               	movf	Get_ADC@val+1,w
 12613  05F5  3A80               	xorlw	128
 12614  05F6  00AC               	movwf	??_Get_ADC
 12615  05F7  3080               	movlw	128
 12616  05F8  022C               	subwf	??_Get_ADC,w
 12617  05F9  1D03               	skipz
 12618  05FA  2DFD               	goto	u6285
 12619  05FB  30F0               	movlw	240
 12620  05FC  022F               	subwf	Get_ADC@val,w
 12621  05FD                     u6285:	
 12622  05FD  1C03               	skipc
 12623  05FE  2E10               	goto	l6933
 12624  05FF  0020               	movlb	0	; select bank0
 12625  0600  0830               	movf	Get_ADC@val+1,w
 12626  0601  3A80               	xorlw	128
 12627  0602  00AC               	movwf	??_Get_ADC
 12628  0603  3080               	movlw	128
 12629  0604  022C               	subwf	??_Get_ADC,w
 12630  0605  1D03               	skipz
 12631  0606  2E09               	goto	u6295
 12632  0607  30FF               	movlw	255
 12633  0608  022F               	subwf	Get_ADC@val,w
 12634  0609                     u6295:	
 12635  0609  1803               	skipnc
 12636  060A  2E10               	goto	l6933
 12637                           
 12638                           ;main.c: 268:         Display_Name("on");
 12639  060B  3060               	movlw	low (STR_5| (0+32768))
 12640  060C  0020               	movlb	0	; select bank0
 12641  060D  00A5               	movwf	Display_Name@string1
 12642  060E  3090               	movlw	high (STR_5| (0+32768))
 12643  060F  2EC9               	goto	L9
 12644  0610                     l6933:	
 12645                           ;main.c: 269:     }
 12646                           
 12647  0610  0020               	movlb	0	; select bank0
 12648  0611  0830               	movf	Get_ADC@val+1,w
 12649  0612  3A80               	xorlw	128
 12650  0613  00AC               	movwf	??_Get_ADC
 12651  0614  3080               	movlw	128
 12652  0615  022C               	subwf	??_Get_ADC,w
 12653  0616  1D03               	skipz
 12654  0617  2E1A               	goto	u6305
 12655  0618  30E6               	movlw	230
 12656  0619  022F               	subwf	Get_ADC@val,w
 12657  061A                     u6305:	
 12658  061A  1C03               	skipc
 12659  061B  2E2D               	goto	l6939
 12660  061C  0020               	movlb	0	; select bank0
 12661  061D  0830               	movf	Get_ADC@val+1,w
 12662  061E  3A80               	xorlw	128
 12663  061F  00AC               	movwf	??_Get_ADC
 12664  0620  3080               	movlw	128
 12665  0621  022C               	subwf	??_Get_ADC,w
 12666  0622  1D03               	skipz
 12667  0623  2E26               	goto	u6315
 12668  0624  30F0               	movlw	240
 12669  0625  022F               	subwf	Get_ADC@val,w
 12670  0626                     u6315:	
 12671  0626  1803               	skipnc
 12672  0627  2E2D               	goto	l6939
 12673                           
 12674                           ;main.c: 271:         Display_Name("toggle");
 12675  0628  3054               	movlw	low (STR_6| (0+32768))
 12676  0629  0020               	movlb	0	; select bank0
 12677  062A  00A5               	movwf	Display_Name@string1
 12678  062B  3090               	movlw	high (STR_6| (0+32768))
 12679  062C  2EC9               	goto	L9
 12680  062D                     l6939:	
 12681                           ;main.c: 272:     }
 12682                           
 12683  062D  0020               	movlb	0	; select bank0
 12684  062E  0830               	movf	Get_ADC@val+1,w
 12685  062F  3A80               	xorlw	128
 12686  0630  00AC               	movwf	??_Get_ADC
 12687  0631  3080               	movlw	128
 12688  0632  022C               	subwf	??_Get_ADC,w
 12689  0633  1D03               	skipz
 12690  0634  2E37               	goto	u6325
 12691  0635  30C8               	movlw	200
 12692  0636  022F               	subwf	Get_ADC@val,w
 12693  0637                     u6325:	
 12694  0637  1C03               	skipc
 12695  0638  2E4A               	goto	l6945
 12696  0639  0020               	movlb	0	; select bank0
 12697  063A  0830               	movf	Get_ADC@val+1,w
 12698  063B  3A80               	xorlw	128
 12699  063C  00AC               	movwf	??_Get_ADC
 12700  063D  3080               	movlw	128
 12701  063E  022C               	subwf	??_Get_ADC,w
 12702  063F  1D03               	skipz
 12703  0640  2E43               	goto	u6335
 12704  0641  30D3               	movlw	211
 12705  0642  022F               	subwf	Get_ADC@val,w
 12706  0643                     u6335:	
 12707  0643  1803               	skipnc
 12708  0644  2E4A               	goto	l6945
 12709                           
 12710                           ;main.c: 274:         Display_Name("up");
 12711  0645  3063               	movlw	low (STR_7| (0+32768))
 12712  0646  0020               	movlb	0	; select bank0
 12713  0647  00A5               	movwf	Display_Name@string1
 12714  0648  3090               	movlw	high (STR_7| (0+32768))
 12715  0649  2EC9               	goto	L9
 12716  064A                     l6945:	
 12717                           ;main.c: 275:     }
 12718                           
 12719  064A  0020               	movlb	0	; select bank0
 12720  064B  0830               	movf	Get_ADC@val+1,w
 12721  064C  3A80               	xorlw	128
 12722  064D  00AC               	movwf	??_Get_ADC
 12723  064E  3080               	movlw	128
 12724  064F  022C               	subwf	??_Get_ADC,w
 12725  0650  1D03               	skipz
 12726  0651  2E54               	goto	u6345
 12727  0652  30B4               	movlw	180
 12728  0653  022F               	subwf	Get_ADC@val,w
 12729  0654                     u6345:	
 12730  0654  1C03               	skipc
 12731  0655  2E77               	goto	l6959
 12732  0656  0020               	movlb	0	; select bank0
 12733  0657  0830               	movf	Get_ADC@val+1,w
 12734  0658  3A80               	xorlw	128
 12735  0659  00AC               	movwf	??_Get_ADC
 12736  065A  3080               	movlw	128
 12737  065B  022C               	subwf	??_Get_ADC,w
 12738  065C  1D03               	skipz
 12739  065D  2E60               	goto	u6355
 12740  065E  30BF               	movlw	191
 12741  065F  022F               	subwf	Get_ADC@val,w
 12742  0660                     u6355:	
 12743  0660  1803               	skipnc
 12744  0661  2E77               	goto	l6959
 12745                           
 12746                           ;main.c: 277:         printed = 0;
 12747  0662  0020               	movlb	0	; select bank0
 12748  0663  01ED               	clrf	_printed
 12749                           
 12750                           ;main.c: 278:         --name;
 12751  0664  30FF               	movlw	255
 12752  0665  07DE               	addwf	_name,f
 12753  0666  30FF               	movlw	255
 12754  0667  3DDF               	addwfc	_name+1,f
 12755                           
 12756                           ;main.c: 279:         if(name < 0) {
 12757  0668  1FDF               	btfss	_name+1,7
 12758  0669  2E6E               	goto	l6957
 12759                           
 12760                           ;main.c: 280:             name = 3;
 12761  066A  3003               	movlw	3
 12762  066B  00DE               	movwf	_name
 12763  066C  3000               	movlw	0
 12764  066D  00DF               	movwf	_name+1
 12765  066E                     l6957:	
 12766                           
 12767                           ;main.c: 282:         Display_Name(names[name]);
 12768  066E  355E               	lslf	_name,w
 12769  066F  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12770  0670  0086               	movwf	6
 12771  0671  3001               	movlw	1	; select bank2/3
 12772  0672  0087               	movwf	7
 12773  0673  3F40               	moviw [0]fsr1
 12774  0674  00A5               	movwf	Display_Name@string1
 12775  0675  3F41               	moviw [1]fsr1
 12776  0676  2EC9               	goto	L9
 12777  0677                     l6959:	
 12778                           ;main.c: 283:     }
 12779                           
 12780  0677  0020               	movlb	0	; select bank0
 12781  0678  0830               	movf	Get_ADC@val+1,w
 12782  0679  3A80               	xorlw	128
 12783  067A  00AC               	movwf	??_Get_ADC
 12784  067B  3080               	movlw	128
 12785  067C  022C               	subwf	??_Get_ADC,w
 12786  067D  1D03               	skipz
 12787  067E  2E81               	goto	u6375
 12788  067F  3096               	movlw	150
 12789  0680  022F               	subwf	Get_ADC@val,w
 12790  0681                     u6375:	
 12791  0681  1C03               	skipc
 12792  0682  2E94               	goto	l6965
 12793  0683  0020               	movlb	0	; select bank0
 12794  0684  0830               	movf	Get_ADC@val+1,w
 12795  0685  3A80               	xorlw	128
 12796  0686  00AC               	movwf	??_Get_ADC
 12797  0687  3080               	movlw	128
 12798  0688  022C               	subwf	??_Get_ADC,w
 12799  0689  1D03               	skipz
 12800  068A  2E8D               	goto	u6385
 12801  068B  30A1               	movlw	161
 12802  068C  022F               	subwf	Get_ADC@val,w
 12803  068D                     u6385:	
 12804  068D  1803               	skipnc
 12805  068E  2E94               	goto	l6965
 12806                           
 12807                           ;main.c: 285:         Display_Name("down");
 12808  068F  305B               	movlw	low (STR_8| (0+32768))
 12809  0690  0020               	movlb	0	; select bank0
 12810  0691  00A5               	movwf	Display_Name@string1
 12811  0692  3090               	movlw	high (STR_8| (0+32768))
 12812  0693  2EC9               	goto	L9
 12813  0694                     l6965:	
 12814                           ;main.c: 286:     }
 12815                           
 12816  0694  0020               	movlb	0	; select bank0
 12817  0695  0830               	movf	Get_ADC@val+1,w
 12818  0696  3A80               	xorlw	128
 12819  0697  00AC               	movwf	??_Get_ADC
 12820  0698  3080               	movlw	128
 12821  0699  022C               	subwf	??_Get_ADC,w
 12822  069A  1D03               	skipz
 12823  069B  2E9E               	goto	u6395
 12824  069C  3014               	movlw	20
 12825  069D  022F               	subwf	Get_ADC@val,w
 12826  069E                     u6395:	
 12827  069E  1C03               	skipc
 12828  069F  2ECC               	goto	l6979
 12829  06A0  0020               	movlb	0	; select bank0
 12830  06A1  0830               	movf	Get_ADC@val+1,w
 12831  06A2  3A80               	xorlw	128
 12832  06A3  00AC               	movwf	??_Get_ADC
 12833  06A4  3080               	movlw	128
 12834  06A5  022C               	subwf	??_Get_ADC,w
 12835  06A6  1D03               	skipz
 12836  06A7  2EAA               	goto	u6405
 12837  06A8  3017               	movlw	23
 12838  06A9  022F               	subwf	Get_ADC@val,w
 12839  06AA                     u6405:	
 12840  06AA  1803               	skipnc
 12841  06AB  2ECC               	goto	l6979
 12842                           
 12843                           ;main.c: 288:         printed = 0;
 12844  06AC  0020               	movlb	0	; select bank0
 12845  06AD  01ED               	clrf	_printed
 12846                           
 12847                           ;main.c: 289:         name++;
 12848  06AE  3001               	movlw	1
 12849  06AF  07DE               	addwf	_name,f
 12850  06B0  3000               	movlw	0
 12851  06B1  3DDF               	addwfc	_name+1,f
 12852                           
 12853                           ;main.c: 290:         if(name > 3) {
 12854  06B2  085F               	movf	_name+1,w
 12855  06B3  3A80               	xorlw	128
 12856  06B4  00AC               	movwf	??_Get_ADC
 12857  06B5  3080               	movlw	128
 12858  06B6  022C               	subwf	??_Get_ADC,w
 12859  06B7  1D03               	skipz
 12860  06B8  2EBB               	goto	u6415
 12861  06B9  3004               	movlw	4
 12862  06BA  025E               	subwf	_name,w
 12863  06BB                     u6415:	
 12864  06BB  1C03               	skipc
 12865  06BC  2EC0               	goto	l6977
 12866                           
 12867                           ;main.c: 291:            name = 0;
 12868  06BD  0020               	movlb	0	; select bank0
 12869  06BE  01DE               	clrf	_name
 12870  06BF  01DF               	clrf	_name+1
 12871  06C0                     l6977:	
 12872                           
 12873                           ;main.c: 293:         Display_Name(names[name]);
 12874  06C0  0020               	movlb	0	; select bank0
 12875  06C1  355E               	lslf	_name,w
 12876  06C2  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12877  06C3  0086               	movwf	6
 12878  06C4  3001               	movlw	1	; select bank2/3
 12879  06C5  0087               	movwf	7
 12880  06C6  3F40               	moviw [0]fsr1
 12881  06C7  00A5               	movwf	Display_Name@string1
 12882  06C8  3F41               	moviw [1]fsr1
 12883  06C9                     L9:	
 12884  06C9  00A6               	movwf	Display_Name@string1+1
 12885  06CA  318D  253F         	fcall	_Display_Name
 12886  06CC                     l6979:	
 12887                           
 12888                           ;main.c: 295:     adcResult = 0;
 12889  06CC  0020               	movlb	0	; select bank0
 12890  06CD  01EC               	clrf	_adcResult
 12891  06CE  0008               	return
 12892  06CF                     __end_of_Get_ADC:	
 12893                           
 12894                           	psect	text59
 12895  0D3F                     __ptext59:	
 12896 ;; *************** function _Display_Name *****************
 12897 ;; Defined at:
 12898 ;;		line 204 in file "main.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 12901 ;;		 -> STR_8(5), STR_7(3), STR_6(7), STR_5(3), 
 12902 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12903 ;; Auto vars:     Size  Location     Type
 12904 ;;  i               2   10[BANK0 ] int 
 12905 ;;  length          2    8[BANK0 ] int 
 12906 ;; Return value:  Size  Location     Type
 12907 ;;                  1    wreg      void 
 12908 ;; Registers used:
 12909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12910 ;; Tracked objects:
 12911 ;;		On entry : 0/0
 12912 ;;		On exit  : 0/0
 12913 ;;		Unchanged: 0/0
 12914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;Total ram usage:        7 bytes
 12920 ;; Hardware stack levels used:    1
 12921 ;; Hardware stack levels required when called:    7
 12922 ;; This function calls:
 12923 ;;		_SPI_Write
 12924 ;;		_strlen
 12925 ;; This function is called by:
 12926 ;;		_main
 12927 ;;		_handleGesture
 12928 ;;		_Get_ADC
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           
 12933                           ;psect for function _Display_Name
 12934  0D3F                     _Display_Name:	
 12935                           
 12936                           ;main.c: 205:     int length;;main.c: 206:     int i;;main.c: 208:         SPI_Write(0xF
      +                          E);
 12937                           
 12938                           ;incstack = 0
 12939                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12940  0D3F  30FE               	movlw	254
 12941  0D40  3189  21C8  318D   	fcall	_SPI_Write
 12942                           
 12943                           ;main.c: 209:         _delay((unsigned long)((100)*(500000/4000.0)));
 12944  0D43  3011               	movlw	17
 12945  0D44  0020               	movlb	0	; select bank0
 12946  0D45  00A7               	movwf	??_Display_Name
 12947  0D46  303A               	movlw	58
 12948  0D47                     u6587:	
 12949  0D47  0B89               	decfsz	9,f
 12950  0D48  2D47               	goto	u6587
 12951  0D49  0BA7               	decfsz	??_Display_Name,f
 12952  0D4A  2D47               	goto	u6587
 12953  0D4B  0000               	nop
 12954                           
 12955                           ;main.c: 210:         SPI_Write(0x51);
 12956  0D4C  3051               	movlw	81
 12957  0D4D  3189  21C8  318D   	fcall	_SPI_Write
 12958                           
 12959                           ;main.c: 211:         length = strlen(string1);
 12960  0D50  0020               	movlb	0	; select bank0
 12961  0D51  0826               	movf	Display_Name@string1+1,w
 12962  0D52  00A1               	movwf	strlen@s+1
 12963  0D53  0825               	movf	Display_Name@string1,w
 12964  0D54  00A0               	movwf	strlen@s
 12965  0D55  3189  21DD  318D   	fcall	_strlen
 12966  0D58  0020               	movlb	0	; select bank0
 12967  0D59  0821               	movf	?_strlen+1,w
 12968  0D5A  00A9               	movwf	Display_Name@length+1
 12969  0D5B  0820               	movf	?_strlen,w
 12970  0D5C  00A8               	movwf	Display_Name@length
 12971                           
 12972                           ;main.c: 212:         for(i = 0; i < length; i++){
 12973  0D5D  01AA               	clrf	Display_Name@i
 12974  0D5E  01AB               	clrf	Display_Name@i+1
 12975  0D5F                     l6345:	
 12976  0D5F  082B               	movf	Display_Name@i+1,w
 12977  0D60  3A80               	xorlw	128
 12978  0D61  00A7               	movwf	??_Display_Name
 12979  0D62  0829               	movf	Display_Name@length+1,w
 12980  0D63  3A80               	xorlw	128
 12981  0D64  0227               	subwf	??_Display_Name,w
 12982  0D65  1D03               	skipz
 12983  0D66  2D69               	goto	u5565
 12984  0D67  0828               	movf	Display_Name@length,w
 12985  0D68  022A               	subwf	Display_Name@i,w
 12986  0D69                     u5565:	
 12987  0D69  1803               	btfsc	3,0
 12988  0D6A  2D7C               	goto	l772
 12989                           
 12990                           ;main.c: 213:             SPI_Write(string1[i]);
 12991  0D6B  0020               	movlb	0	; select bank0
 12992  0D6C  0825               	movf	Display_Name@string1,w
 12993  0D6D  072A               	addwf	Display_Name@i,w
 12994  0D6E  0084               	movwf	4
 12995  0D6F  0826               	movf	Display_Name@string1+1,w
 12996  0D70  3D2B               	addwfc	Display_Name@i+1,w
 12997  0D71  0085               	movwf	5
 12998  0D72  0800               	movf	0,w	;code access
 12999  0D73  3189  21C8  318D   	fcall	_SPI_Write
 13000                           
 13001                           ;main.c: 214:         }
 13002  0D76  3001               	movlw	1
 13003  0D77  0020               	movlb	0	; select bank0
 13004  0D78  07AA               	addwf	Display_Name@i,f
 13005  0D79  3000               	movlw	0
 13006  0D7A  3DAB               	addwfc	Display_Name@i+1,f
 13007  0D7B  2D5F               	goto	l6345
 13008  0D7C                     l772:	
 13009                           
 13010                           ;main.c: 216:     printed = 1;
 13011  0D7C  0020               	movlb	0	; select bank0
 13012  0D7D  01ED               	clrf	_printed
 13013  0D7E  0AED               	incf	_printed,f
 13014  0D7F  0008               	return
 13015  0D80                     __end_of_Display_Name:	
 13016                           
 13017                           	psect	text60
 13018  09DD                     __ptext60:	
 13019 ;; *************** function _strlen *****************
 13020 ;; Defined at:
 13021 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 13022 ;; Parameters:    Size  Location     Type
 13023 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 13024 ;;		 -> STR_8(5), STR_7(3), STR_6(7), STR_5(3), 
 13025 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 13026 ;; Auto vars:     Size  Location     Type
 13027 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 13028 ;;		 -> STR_8(5), STR_7(3), STR_6(7), STR_5(3), 
 13029 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 13030 ;; Return value:  Size  Location     Type
 13031 ;;                  2    0[BANK0 ] unsigned int 
 13032 ;; Registers used:
 13033 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13034 ;; Tracked objects:
 13035 ;;		On entry : 0/0
 13036 ;;		On exit  : 0/0
 13037 ;;		Unchanged: 0/0
 13038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;Total ram usage:        5 bytes
 13044 ;; Hardware stack levels used:    1
 13045 ;; Hardware stack levels required when called:    5
 13046 ;; This function calls:
 13047 ;;		Nothing
 13048 ;; This function is called by:
 13049 ;;		_Display_Name
 13050 ;; This function uses a non-reentrant model
 13051 ;;
 13052                           
 13053                           
 13054                           ;psect for function _strlen
 13055  09DD                     _strlen:	
 13056                           
 13057                           ;incstack = 0
 13058                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 13059  09DD  0020               	movlb	0	; select bank0
 13060  09DE  0821               	movf	strlen@s+1,w
 13061  09DF  00A4               	movwf	strlen@a+1
 13062  09E0  0820               	movf	strlen@s,w
 13063  09E1  00A3               	movwf	strlen@a
 13064  09E2                     l5873:	
 13065  09E2  0820               	movf	strlen@s,w
 13066  09E3  0084               	movwf	4
 13067  09E4  0821               	movf	strlen@s+1,w
 13068  09E5  0085               	movwf	5
 13069  09E6  0012               	moviw fsr0++
 13070  09E7  1903               	btfsc	3,2
 13071  09E8  29EE               	goto	l5875
 13072  09E9  3001               	movlw	1
 13073  09EA  07A0               	addwf	strlen@s,f
 13074  09EB  3000               	movlw	0
 13075  09EC  3DA1               	addwfc	strlen@s+1,f
 13076  09ED  29E2               	goto	l5873
 13077  09EE                     l5875:	
 13078  09EE  0823               	movf	strlen@a,w
 13079  09EF  0220               	subwf	strlen@s,w
 13080  09F0  00A0               	movwf	?_strlen
 13081  09F1  0824               	movf	strlen@a+1,w
 13082  09F2  3B21               	subwfb	strlen@s+1,w
 13083  09F3  00A1               	movwf	?_strlen+1
 13084  09F4  0008               	return
 13085  09F5                     __end_of_strlen:	
 13086                           
 13087                           	psect	text61
 13088  0A78                     __ptext61:	
 13089 ;; *************** function _ADC_GetConversion *****************
 13090 ;; Defined at:
 13091 ;;		line 113 in file "mcc_generated_files/adc.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  channel         1    wreg     enum E6648
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  channel         1    3[BANK0 ] enum E6648
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  2    0[BANK0 ] unsigned short 
 13098 ;; Registers used:
 13099 ;;		wreg, status,2, status,0
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        4 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    5
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_Get_ADC
 13116 ;;		_On_Off
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           
 13121                           ;psect for function _ADC_GetConversion
 13122  0A78                     _ADC_GetConversion:	
 13123                           
 13124                           ;incstack = 0
 13125                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 13126                           ;ADC_GetConversion@channel stored from wreg
 13127  0A78  0020               	movlb	0	; select bank0
 13128  0A79  00A3               	movwf	ADC_GetConversion@channel
 13129                           
 13130                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 13131  0A7A  0823               	movf	ADC_GetConversion@channel,w
 13132  0A7B  00A2               	movwf	??_ADC_GetConversion
 13133  0A7C  0DA2               	rlf	??_ADC_GetConversion,f
 13134  0A7D  0DA2               	rlf	??_ADC_GetConversion,f
 13135  0A7E  0021               	movlb	1	; select bank1
 13136  0A7F  081D               	movf	29,w	;volatile
 13137  0A80  0020               	movlb	0	; select bank0
 13138  0A81  0622               	xorwf	??_ADC_GetConversion,w
 13139  0A82  3903               	andlw	-253
 13140  0A83  0622               	xorwf	??_ADC_GetConversion,w
 13141  0A84  0021               	movlb	1	; select bank1
 13142  0A85  009D               	movwf	29	;volatile
 13143                           
 13144                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 13145  0A86  141D               	bsf	29,0	;volatile
 13146                           
 13147                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 13148                           
 13149                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 13150  0A87  0021               	movlb	1	; select bank1
 13151  0A88  149D               	bsf	29,1	;volatile
 13152  0A89                     l623:	
 13153                           ;mcc_generated_files/adc.c: 131:     }
 13154                           
 13155                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13156                           
 13157                           
 13158                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13159  0A89  0021               	movlb	1	; select bank1
 13160  0A8A  1C9D               	btfss	29,1	;volatile
 13161  0A8B  2A8E               	goto	l6327
 13162  0A8C  0064               	clrwdt	;# 
 13163  0A8D  2A89               	goto	l623
 13164  0A8E                     l6327:	
 13165                           
 13166                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 13167  0A8E  081C               	movf	28,w	;volatile
 13168  0A8F  0020               	movlb	0	; select bank0
 13169  0A90  00A1               	movwf	?_ADC_GetConversion+1
 13170  0A91  0021               	movlb	1	; select bank1
 13171  0A92  081B               	movf	27,w	;volatile
 13172  0A93  0020               	movlb	0	; select bank0
 13173  0A94  00A0               	movwf	?_ADC_GetConversion
 13174  0A95  0008               	return
 13175  0A96                     __end_of_ADC_GetConversion:	
 13176                           
 13177                           	psect	text62
 13178  0958                     __ptext62:	
 13179 ;; *************** function _Display_Clear *****************
 13180 ;; Defined at:
 13181 ;;		line 237 in file "main.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;		None
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;		None
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  1    wreg      void 
 13188 ;; Registers used:
 13189 ;;		wreg, status,2, status,0, pclath, cstack
 13190 ;; Tracked objects:
 13191 ;;		On entry : 0/0
 13192 ;;		On exit  : 0/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;Total ram usage:        1 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; Hardware stack levels required when called:    7
 13202 ;; This function calls:
 13203 ;;		_SPI_Write
 13204 ;; This function is called by:
 13205 ;;		_main
 13206 ;; This function uses a non-reentrant model
 13207 ;;
 13208                           
 13209                           
 13210                           ;psect for function _Display_Clear
 13211  0958                     _Display_Clear:	
 13212                           
 13213                           ;main.c: 238:     SPI_Write(0xFE);
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 13217  0958  30FE               	movlw	254
 13218  0959  3189  21C8  3189   	fcall	_SPI_Write
 13219                           
 13220                           ;main.c: 239:     _delay((unsigned long)((100)*(500000/4000.0)));
 13221  095C  3011               	movlw	17
 13222  095D  0020               	movlb	0	; select bank0
 13223  095E  00A3               	movwf	??_Display_Clear
 13224  095F  303A               	movlw	58
 13225  0960                     u6597:	
 13226  0960  0B89               	decfsz	9,f
 13227  0961  2960               	goto	u6597
 13228  0962  0BA3               	decfsz	??_Display_Clear,f
 13229  0963  2960               	goto	u6597
 13230  0964  0000               	nop
 13231                           
 13232                           ;main.c: 240:     SPI_Write(0x51);
 13233  0965  3051               	movlw	81
 13234  0966  3189  21C8         	fcall	_SPI_Write
 13235  0968  0008               	return
 13236  0969                     __end_of_Display_Clear:	
 13237                           
 13238                           	psect	text63
 13239  09C8                     __ptext63:	
 13240 ;; *************** function _SPI_Write *****************
 13241 ;; Defined at:
 13242 ;;		line 197 in file "main.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  incoming        1    wreg     unsigned char 
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;  incoming        1    2[BANK0 ] unsigned char 
 13247 ;; Return value:  Size  Location     Type
 13248 ;;                  1    wreg      void 
 13249 ;; Registers used:
 13250 ;;		wreg, status,2, status,0, pclath, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;Total ram usage:        2 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    6
 13263 ;; This function calls:
 13264 ;;		_SPI2_Exchange8bit
 13265 ;; This function is called by:
 13266 ;;		_Display_Name
 13267 ;;		_Display_Clear
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           
 13272                           ;psect for function _SPI_Write
 13273  09C8                     _SPI_Write:	
 13274                           
 13275                           ;incstack = 0
 13276                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 13277                           ;SPI_Write@incoming stored from wreg
 13278  09C8  0020               	movlb	0	; select bank0
 13279  09C9  00A2               	movwf	SPI_Write@incoming
 13280                           
 13281                           ;main.c: 198:     do { LATCbits.LATC0 = 0; } while(0);
 13282  09CA  0022               	movlb	2	; select bank2
 13283  09CB  100E               	bcf	14,0	;volatile
 13284                           
 13285                           ;main.c: 199:     SPI2_Exchange8bit(incoming);
 13286  09CC  0020               	movlb	0	; select bank0
 13287  09CD  0822               	movf	SPI_Write@incoming,w
 13288  09CE  3189  2149  3189   	fcall	_SPI2_Exchange8bit
 13289  09D1  0022               	movlb	2	; select bank2
 13290  09D2  140E               	bsf	14,0	;volatile
 13291                           
 13292                           ;main.c: 201:     _delay((unsigned long)((100)*(500000/4000.0)));
 13293  09D3  3011               	movlw	17
 13294  09D4  0020               	movlb	0	; select bank0
 13295  09D5  00A1               	movwf	??_SPI_Write
 13296  09D6  303A               	movlw	58
 13297  09D7                     u6607:	
 13298  09D7  0B89               	decfsz	9,f
 13299  09D8  29D7               	goto	u6607
 13300  09D9  0BA1               	decfsz	??_SPI_Write,f
 13301  09DA  29D7               	goto	u6607
 13302  09DB  0000               	nop
 13303  09DC  0008               	return
 13304  09DD                     __end_of_SPI_Write:	
 13305                           
 13306                           	psect	text64
 13307  0949                     __ptext64:	
 13308 ;; *************** function _SPI2_Exchange8bit *****************
 13309 ;; Defined at:
 13310 ;;		line 79 in file "mcc_generated_files/spi2.c"
 13311 ;; Parameters:    Size  Location     Type
 13312 ;;  data            1    wreg     unsigned char 
 13313 ;; Auto vars:     Size  Location     Type
 13314 ;;  data            1    0[BANK0 ] unsigned char 
 13315 ;; Return value:  Size  Location     Type
 13316 ;;                  1    wreg      unsigned char 
 13317 ;; Registers used:
 13318 ;;		wreg
 13319 ;; Tracked objects:
 13320 ;;		On entry : 0/0
 13321 ;;		On exit  : 0/0
 13322 ;;		Unchanged: 0/0
 13323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;Total ram usage:        1 bytes
 13329 ;; Hardware stack levels used:    1
 13330 ;; Hardware stack levels required when called:    5
 13331 ;; This function calls:
 13332 ;;		Nothing
 13333 ;; This function is called by:
 13334 ;;		_SPI_Write
 13335 ;;		_SPI2_Exchange8bitBuffer
 13336 ;; This function uses a non-reentrant model
 13337 ;;
 13338                           
 13339                           
 13340                           ;psect for function _SPI2_Exchange8bit
 13341  0949                     _SPI2_Exchange8bit:	
 13342                           
 13343                           ;incstack = 0
 13344                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 13345                           ;SPI2_Exchange8bit@data stored from wreg
 13346  0949  0020               	movlb	0	; select bank0
 13347  094A  00A0               	movwf	SPI2_Exchange8bit@data
 13348                           
 13349                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 13350  094B  0024               	movlb	4	; select bank4
 13351  094C  139D               	bcf	29,7	;volatile
 13352                           
 13353                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 13354  094D  0020               	movlb	0	; select bank0
 13355  094E  0820               	movf	SPI2_Exchange8bit@data,w
 13356  094F  0024               	movlb	4	; select bank4
 13357  0950  0099               	movwf	25	;volatile
 13358  0951                     l532:	
 13359                           ;mcc_generated_files/spi2.c: 89:     }
 13360                           
 13361                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13362                           
 13363                           
 13364                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13365  0951  0024               	movlb	4	; select bank4
 13366  0952  181C               	btfsc	28,0	;volatile
 13367  0953  2956               	goto	l5765
 13368  0954  0064               	clrwdt	;# 
 13369  0955  2951               	goto	l532
 13370  0956                     l5765:	
 13371                           
 13372                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 13373  0956  0819               	movf	25,w	;volatile
 13374  0957  0008               	return
 13375  0958                     __end_of_SPI2_Exchange8bit:	
 13376                           
 13377                           	psect	intentry
 13378  0004                     __pintentry:	
 13379 ;; *************** function _INTERRUPT_InterruptManager *****************
 13380 ;; Defined at:
 13381 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;		None
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;		None
 13386 ;; Return value:  Size  Location     Type
 13387 ;;                  1    wreg      void 
 13388 ;; Registers used:
 13389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;Total ram usage:        0 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; Hardware stack levels required when called:    4
 13402 ;; This function calls:
 13403 ;;		Absolute function
 13404 ;;		_PIN_MANAGER_IOC
 13405 ;;		_i2c_ISR
 13406 ;;		_i2c_busCollisionISR
 13407 ;; This function is called by:
 13408 ;;		Interrupt level 1
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412  0004                     _INTERRUPT_InterruptManager:	
 13413                           
 13414                           ;incstack = 0
 13415  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13416                           
 13417                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13418  0005  3180               	pagesel	$
 13419                           
 13420                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 13421  0006  0021               	movlb	1	; select bank1
 13422  0007  1E10               	btfss	16,4	;volatile
 13423  0008  2810               	goto	i1l245
 13424  0009  0020               	movlb	0	; select bank0
 13425  000A  1E10               	btfss	16,4	;volatile
 13426  000B  2810               	goto	i1l245
 13427                           
 13428                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 13429  000C  3188  2031  3180   	fcall	_PIN_MANAGER_IOC
 13430                           
 13431                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13432  000F  2829               	goto	i1l253
 13433  0010                     i1l245:	
 13434                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13435                           
 13436  0010  1F0B               	btfss	11,6	;volatile
 13437  0011  2829               	goto	i1l253
 13438                           
 13439                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 13440  0012  0021               	movlb	1	; select bank1
 13441  0013  1D11               	btfss	17,2	;volatile
 13442  0014  281E               	goto	i1l248
 13443  0015  0020               	movlb	0	; select bank0
 13444  0016  1D11               	btfss	17,2	;volatile
 13445  0017  281E               	goto	i1l248
 13446                           
 13447                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 13448  0018  0873               	movf	_i2c1_driver_busCollisionISR+1,w
 13449  0019  008A               	movwf	10
 13450  001A  0872               	movf	_i2c1_driver_busCollisionISR,w
 13451  001B  000A               	callw
 13452  001C  3180               	pagesel	$
 13453                           
 13454                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13455  001D  2829               	goto	i1l253
 13456  001E                     i1l248:	
 13457                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 13458                           
 13459  001E  0021               	movlb	1	; select bank1
 13460  001F  1D91               	btfss	17,3	;volatile
 13461  0020  2829               	goto	i1l253
 13462  0021  0020               	movlb	0	; select bank0
 13463  0022  1D91               	btfss	17,3	;volatile
 13464  0023  2829               	goto	i1l253
 13465                           
 13466                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 13467  0024  0871               	movf	_i2c1_driver_i2cISR+1,w
 13468  0025  008A               	movwf	10
 13469  0026  0870               	movf	_i2c1_driver_i2cISR,w
 13470  0027  000A               	callw
 13471  0028  3180               	pagesel	$
 13472  0029                     i1l253:	
 13473                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13474                           
 13475                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13476                           
 13477  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13478  002A  0009               	retfie
 13479  002B                     __end_of_INTERRUPT_InterruptManager:	
 13480                           
 13481                           	psect	text66
 13482  084A                     __ptext66:	
 13483 ;; *************** function _i2c_busCollisionISR *****************
 13484 ;; Defined at:
 13485 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 13486 ;; Parameters:    Size  Location     Type
 13487 ;;		None
 13488 ;; Auto vars:     Size  Location     Type
 13489 ;;		None
 13490 ;; Return value:  Size  Location     Type
 13491 ;;                  1    wreg      void 
 13492 ;; Registers used:
 13493 ;;		status,2, status,0, pclath, cstack
 13494 ;; Tracked objects:
 13495 ;;		On entry : 0/0
 13496 ;;		On exit  : 0/0
 13497 ;;		Unchanged: 0/0
 13498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13503 ;;Total ram usage:        0 bytes
 13504 ;; Hardware stack levels used:    1
 13505 ;; Hardware stack levels required when called:    1
 13506 ;; This function calls:
 13507 ;;		_i2c1_driver_clearBusCollision
 13508 ;; This function is called by:
 13509 ;;		_i2c_open
 13510 ;;		_INTERRUPT_InterruptManager
 13511 ;; This function uses a non-reentrant model
 13512 ;;
 13513                           
 13514                           
 13515                           ;psect for function _i2c_busCollisionISR
 13516  084A                     _i2c_busCollisionISR:	
 13517                           
 13518                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 13519                           
 13520                           ;incstack = 0
 13521                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 13522  084A  3188  2047         	fcall	_i2c1_driver_clearBusCollision
 13523  084C  0008               	return
 13524  084D                     __end_of_i2c_busCollisionISR:	
 13525                           
 13526                           	psect	text67
 13527  0847                     __ptext67:	
 13528 ;; *************** function _i2c1_driver_clearBusCollision *****************
 13529 ;; Defined at:
 13530 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 13531 ;; Parameters:    Size  Location     Type
 13532 ;;		None
 13533 ;; Auto vars:     Size  Location     Type
 13534 ;;		None
 13535 ;; Return value:  Size  Location     Type
 13536 ;;                  1    wreg      void 
 13537 ;; Registers used:
 13538 ;;		None
 13539 ;; Tracked objects:
 13540 ;;		On entry : 0/0
 13541 ;;		On exit  : 0/0
 13542 ;;		Unchanged: 0/0
 13543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;Total ram usage:        0 bytes
 13549 ;; Hardware stack levels used:    1
 13550 ;; This function calls:
 13551 ;;		Nothing
 13552 ;; This function is called by:
 13553 ;;		_i2c_busCollisionISR
 13554 ;; This function uses a non-reentrant model
 13555 ;;
 13556                           
 13557                           
 13558                           ;psect for function _i2c1_driver_clearBusCollision
 13559  0847                     _i2c1_driver_clearBusCollision:	
 13560                           
 13561                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 13562                           
 13563                           ;incstack = 0
 13564                           ; Regs used in _i2c1_driver_clearBusCollision: []
 13565  0847  0020               	movlb	0	; select bank0
 13566  0848  1111               	bcf	17,2	;volatile
 13567  0849  0008               	return
 13568  084A                     __end_of_i2c1_driver_clearBusCollision:	
 13569                           
 13570                           	psect	text68
 13571  0AD8                     __ptext68:	
 13572 ;; *************** function _i2c_ISR *****************
 13573 ;; Defined at:
 13574 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 13575 ;; Parameters:    Size  Location     Type
 13576 ;;		None
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;		None
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  1    wreg      void 
 13581 ;; Registers used:
 13582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;Total ram usage:        3 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; Hardware stack levels required when called:    3
 13595 ;; This function calls:
 13596 ;;		_do_I2C_DO_ACK
 13597 ;;		_do_I2C_DO_ADDRESS_NACK
 13598 ;;		_do_I2C_DO_NACK_RESTART
 13599 ;;		_do_I2C_DO_NACK_STOP
 13600 ;;		_do_I2C_IDLE
 13601 ;;		_do_I2C_RCEN
 13602 ;;		_do_I2C_RESET
 13603 ;;		_do_I2C_RX
 13604 ;;		_do_I2C_SEND_ADR_READ
 13605 ;;		_do_I2C_SEND_ADR_WRITE
 13606 ;;		_do_I2C_SEND_RESTART
 13607 ;;		_do_I2C_SEND_RESTART_READ
 13608 ;;		_do_I2C_SEND_RESTART_WRITE
 13609 ;;		_do_I2C_SEND_STOP
 13610 ;;		_do_I2C_TX
 13611 ;;		_do_I2C_TX_EMPTY
 13612 ;;		_i2c1_driver_isNACK
 13613 ;;		_mssp1_clearIRQ
 13614 ;; This function is called by:
 13615 ;;		_i2c_open
 13616 ;;		_i2c_poller
 13617 ;;		_INTERRUPT_InterruptManager
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           
 13622                           ;psect for function _i2c_ISR
 13623  0AD8                     _i2c_ISR:	
 13624                           
 13625                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 13626                           
 13627                           ;incstack = 0
 13628                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13629  0AD8  3188  2044  318A   	fcall	_mssp1_clearIRQ
 13630                           
 13631                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 13632  0ADB  0023               	movlb	3	; select bank3
 13633  0ADC  1DA0               	btfss	_i2c_status^(0+384),3
 13634  0ADD  2AE8               	goto	i1l5031
 13635  0ADE  3188  20D9  318A   	fcall	_i2c1_driver_isNACK
 13636  0AE1  1C03               	btfss	3,0
 13637  0AE2  2AE8               	goto	i1l5031
 13638                           
 13639                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 13640  0AE3  300F               	movlw	15
 13641  0AE4  00F9               	movwf	??_i2c_ISR
 13642  0AE5  0879               	movf	??_i2c_ISR,w
 13643  0AE6  0023               	movlb	3	; select bank3
 13644  0AE7  00A9               	movwf	(_i2c_status^(0+384)+9)
 13645  0AE8                     i1l5031:	
 13646                           
 13647                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 13648  0AE8  0023               	movlb	3	; select bank3
 13649  0AE9  0829               	movf	(_i2c_status^(0+384)+9),w
 13650  0AEA  00F9               	movwf	??_i2c_ISR
 13651  0AEB  01FA               	clrf	??_i2c_ISR+1
 13652  0AEC  35F9               	lslf	??_i2c_ISR,f
 13653  0AED  0DFA               	rlf	??_i2c_ISR+1,f
 13654  0AEE  3000               	movlw	low (_fsmStateTable| (0+32768))
 13655  0AEF  0779               	addwf	??_i2c_ISR,w
 13656  0AF0  0084               	movwf	4
 13657  0AF1  3090               	movlw	high (_fsmStateTable| (0+32768))
 13658  0AF2  3D7A               	addwfc	??_i2c_ISR+1,w
 13659  0AF3  0085               	movwf	5
 13660  0AF4  3F01               	moviw [1]fsr0
 13661  0AF5  008A               	movwf	10
 13662  0AF6  3F00               	moviw [0]fsr0
 13663  0AF7  000A               	callw
 13664  0AF8  318A               	pagesel	$
 13665  0AF9  00FB               	movwf	??_i2c_ISR+2
 13666  0AFA  087B               	movf	??_i2c_ISR+2,w
 13667  0AFB  0023               	movlb	3	; select bank3
 13668  0AFC  00A9               	movwf	(_i2c_status^(0+384)+9)
 13669  0AFD  0008               	return
 13670  0AFE                     __end_of_i2c_ISR:	
 13671                           
 13672                           	psect	text69
 13673  0844                     __ptext69:	
 13674 ;; *************** function _mssp1_clearIRQ *****************
 13675 ;; Defined at:
 13676 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 13677 ;; Parameters:    Size  Location     Type
 13678 ;;		None
 13679 ;; Auto vars:     Size  Location     Type
 13680 ;;		None
 13681 ;; Return value:  Size  Location     Type
 13682 ;;                  1    wreg      void 
 13683 ;; Registers used:
 13684 ;;		None
 13685 ;; Tracked objects:
 13686 ;;		On entry : 0/0
 13687 ;;		On exit  : 0/0
 13688 ;;		Unchanged: 0/0
 13689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13694 ;;Total ram usage:        0 bytes
 13695 ;; Hardware stack levels used:    1
 13696 ;; This function calls:
 13697 ;;		Nothing
 13698 ;; This function is called by:
 13699 ;;		_i2c_ISR
 13700 ;;		_i2c_open
 13701 ;;		_i2c_close
 13702 ;; This function uses a non-reentrant model
 13703 ;;
 13704                           
 13705                           
 13706                           ;psect for function _mssp1_clearIRQ
 13707  0844                     _mssp1_clearIRQ:	
 13708                           
 13709                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 13710                           
 13711                           ;incstack = 0
 13712                           ; Regs used in _mssp1_clearIRQ: []
 13713  0844  0020               	movlb	0	; select bank0
 13714  0845  1191               	bcf	17,3	;volatile
 13715  0846  0008               	return
 13716  0847                     __end_of_mssp1_clearIRQ:	
 13717                           
 13718                           	psect	text70
 13719  0DC2                     __ptext70:	
 13720 ;; *************** function _do_I2C_RX *****************
 13721 ;; Defined at:
 13722 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;		None
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;		None
 13727 ;; Return value:  Size  Location     Type
 13728 ;;                  1    wreg      enum E7120
 13729 ;; Registers used:
 13730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;Total ram usage:        3 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    2
 13743 ;; This function calls:
 13744 ;;		_do_I2C_DO_NACK_RESTART
 13745 ;;		_do_I2C_DO_NACK_STOP
 13746 ;;		_i2c1_driver_sendACK
 13747 ;;		_returnReset
 13748 ;;		_returnStop
 13749 ;;		i1_i2c1_driver_getRXData
 13750 ;; This function is called by:
 13751 ;;		_i2c_ISR
 13752 ;; This function uses a non-reentrant model
 13753 ;;
 13754                           
 13755                           
 13756                           ;psect for function _do_I2C_RX
 13757  0DC2                     _do_I2C_RX:	
 13758                           
 13759                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 13760                           
 13761                           ;incstack = 0
 13762                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13763  0DC2  3188  203E  318D   	fcall	i1_i2c1_driver_getRXData
 13764  0DC5  00F6               	movwf	??_do_I2C_RX
 13765  0DC6  0023               	movlb	3	; select bank3
 13766  0DC7  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 13767  0DC8  0086               	movwf	6
 13768  0DC9  0187               	clrf	7
 13769  0DCA  0876               	movf	??_do_I2C_RX,w
 13770  0DCB  0081               	movwf	1
 13771  0DCC  3001               	movlw	1
 13772  0DCD  00F6               	movwf	??_do_I2C_RX
 13773  0DCE  0876               	movf	??_do_I2C_RX,w
 13774  0DCF  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 13775                           
 13776                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13777  0DD0  3001               	movlw	1
 13778  0DD1  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13779  0DD2  3000               	movlw	0
 13780  0DD3  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13781  0DD4  0823               	movf	(_i2c_status^(0+384)+3),w
 13782  0DD5  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13783  0DD6  1903               	btfsc	3,2
 13784  0DD7  2DDC               	goto	i1l173
 13785                           
 13786                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 13787  0DD8  3188  2068         	fcall	_i2c1_driver_sendACK
 13788                           
 13789                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13790  0DDA  3005               	movlw	5
 13791  0DDB  0008               	return
 13792  0DDC                     i1l173:	
 13793                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13794                           
 13795                           
 13796                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13797  0DDC  1520               	bsf	_i2c_status^(0+384),2
 13798                           
 13799                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13800  0DDD  2DE4               	goto	i1l4557
 13801  0DDE                     i1l4547:	
 13802                           
 13803                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13804  0DDE  3188  2088         	fcall	_do_I2C_DO_NACK_RESTART
 13805  0DE0  0008               	return
 13806  0DE1                     i1l4551:	
 13807                           
 13808                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13809  0DE1  3188  2084         	fcall	_do_I2C_DO_NACK_STOP
 13810  0DE3  0008               	return
 13811  0DE4                     i1l4557:	
 13812  0DE4  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 13813  0DE5  00F6               	movwf	??_do_I2C_RX
 13814  0DE6  0876               	movf	??_do_I2C_RX,w
 13815  0DE7  00F6               	movwf	returnReset@p
 13816  0DE8  300B               	movlw	11
 13817  0DE9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13818  0DEA  0086               	movwf	6
 13819  0DEB  3001               	movlw	1	; select bank3/4
 13820  0DEC  0087               	movwf	7
 13821  0DED  3F41               	moviw [1]fsr1
 13822  0DEE  008A               	movwf	10
 13823  0DEF  3F40               	moviw [0]fsr1
 13824  0DF0  000A               	callw
 13825  0DF1  318D               	pagesel	$
 13826  0DF2  00F7               	movwf	??_do_I2C_RX+1
 13827  0DF3  01F8               	clrf	??_do_I2C_RX+2
 13828                           
 13829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13830                           ; Switch size 1, requested type "simple"
 13831                           ; Number of cases is 1, Range of values is 0 to 0
 13832                           ; switch strategies available:
 13833                           ; Name         Instructions Cycles
 13834                           ; simple_byte            4     3 (average)
 13835                           ; direct_byte            8     6 (fixed)
 13836                           ; jumptable            260     6 (fixed)
 13837                           ;	Chosen strategy is simple_byte
 13838  0DF4  0878               	movf	??_do_I2C_RX+2,w
 13839  0DF5  3A00               	xorlw	0	; case 0
 13840  0DF6  1903               	skipnz
 13841  0DF7  2DF9               	goto	i1l7251
 13842  0DF8  2DE1               	goto	i1l4551
 13843  0DF9                     i1l7251:	
 13844                           
 13845                           ; Switch size 1, requested type "simple"
 13846                           ; Number of cases is 4, Range of values is 1 to 4
 13847                           ; switch strategies available:
 13848                           ; Name         Instructions Cycles
 13849                           ; simple_byte           13     7 (average)
 13850                           ; direct_byte           17     9 (fixed)
 13851                           ; jumptable            263     9 (fixed)
 13852                           ;	Chosen strategy is simple_byte
 13853  0DF9  0877               	movf	??_do_I2C_RX+1,w
 13854  0DFA  3A01               	xorlw	1	; case 1
 13855  0DFB  1903               	skipnz
 13856  0DFC  2DE1               	goto	i1l4551
 13857  0DFD  3A03               	xorlw	3	; case 2
 13858  0DFE  1903               	skipnz
 13859  0DFF  2DDE               	goto	i1l4547
 13860  0E00  3A01               	xorlw	1	; case 3
 13861  0E01  1903               	skipnz
 13862  0E02  2DDE               	goto	i1l4547
 13863  0E03  3A07               	xorlw	7	; case 4
 13864  0E04  1903               	skipnz
 13865  0E05  2DE1               	goto	i1l4551
 13866  0E06  2DE1               	goto	i1l4551
 13867  0E07  0008               	return
 13868  0E08                     __end_of_do_I2C_RX:	
 13869                           
 13870                           	psect	text71
 13871  0E52                     __ptext71:	
 13872 ;; *************** function _do_I2C_TX *****************
 13873 ;; Defined at:
 13874 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13875 ;; Parameters:    Size  Location     Type
 13876 ;;		None
 13877 ;; Auto vars:     Size  Location     Type
 13878 ;;		None
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1    wreg      enum E7120
 13881 ;; Registers used:
 13882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13883 ;; Tracked objects:
 13884 ;;		On entry : 0/0
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;Total ram usage:        3 bytes
 13893 ;; Hardware stack levels used:    1
 13894 ;; Hardware stack levels required when called:    2
 13895 ;; This function calls:
 13896 ;;		_do_I2C_SEND_RESTART_READ
 13897 ;;		_do_I2C_SEND_RESTART_WRITE
 13898 ;;		_do_I2C_SEND_STOP
 13899 ;;		_i2c1_driver_isNACK
 13900 ;;		_returnReset
 13901 ;;		_returnStop
 13902 ;;		i1_i2c1_driver_TXData
 13903 ;; This function is called by:
 13904 ;;		_i2c_ISR
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           
 13909                           ;psect for function _do_I2C_TX
 13910  0E52                     _do_I2C_TX:	
 13911                           
 13912                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 13913                           
 13914                           ;incstack = 0
 13915                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13916  0E52  3188  20D9  318E   	fcall	_i2c1_driver_isNACK
 13917  0E55  1803               	btfsc	3,0
 13918  0E56  2E61               	goto	i1l4517
 13919  0E57  2E85               	goto	i1l157
 13920  0E58                     i1l4503:	
 13921                           
 13922                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 13923  0E58  3188  2070         	fcall	_do_I2C_SEND_RESTART_READ
 13924  0E5A  0008               	return
 13925  0E5B                     i1l4507:	
 13926                           
 13927                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 13928  0E5B  3188  2074         	fcall	_do_I2C_SEND_RESTART_WRITE
 13929  0E5D  0008               	return
 13930  0E5E                     i1l4511:	
 13931                           
 13932                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 13933  0E5E  3188  207C         	fcall	_do_I2C_SEND_STOP
 13934  0E60  0008               	return
 13935  0E61                     i1l4517:	
 13936  0E61  0023               	movlb	3	; select bank3
 13937  0E62  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 13938  0E63  00F6               	movwf	??_do_I2C_TX
 13939  0E64  0876               	movf	??_do_I2C_TX,w
 13940  0E65  00F6               	movwf	returnReset@p
 13941  0E66  3011               	movlw	17
 13942  0E67  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13943  0E68  0086               	movwf	6
 13944  0E69  3001               	movlw	1	; select bank3/4
 13945  0E6A  0087               	movwf	7
 13946  0E6B  3F41               	moviw [1]fsr1
 13947  0E6C  008A               	movwf	10
 13948  0E6D  3F40               	moviw [0]fsr1
 13949  0E6E  000A               	callw
 13950  0E6F  318E               	pagesel	$
 13951  0E70  00F7               	movwf	??_do_I2C_TX+1
 13952  0E71  01F8               	clrf	??_do_I2C_TX+2
 13953                           
 13954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13955                           ; Switch size 1, requested type "simple"
 13956                           ; Number of cases is 1, Range of values is 0 to 0
 13957                           ; switch strategies available:
 13958                           ; Name         Instructions Cycles
 13959                           ; simple_byte            4     3 (average)
 13960                           ; direct_byte            8     6 (fixed)
 13961                           ; jumptable            260     6 (fixed)
 13962                           ;	Chosen strategy is simple_byte
 13963  0E72  0878               	movf	??_do_I2C_TX+2,w
 13964  0E73  3A00               	xorlw	0	; case 0
 13965  0E74  1903               	skipnz
 13966  0E75  2E77               	goto	i1l7253
 13967  0E76  2E5E               	goto	i1l4511
 13968  0E77                     i1l7253:	
 13969                           
 13970                           ; Switch size 1, requested type "simple"
 13971                           ; Number of cases is 4, Range of values is 1 to 4
 13972                           ; switch strategies available:
 13973                           ; Name         Instructions Cycles
 13974                           ; simple_byte           13     7 (average)
 13975                           ; direct_byte           17     9 (fixed)
 13976                           ; jumptable            263     9 (fixed)
 13977                           ;	Chosen strategy is simple_byte
 13978  0E77  0877               	movf	??_do_I2C_TX+1,w
 13979  0E78  3A01               	xorlw	1	; case 1
 13980  0E79  1903               	skipnz
 13981  0E7A  2E5E               	goto	i1l4511
 13982  0E7B  3A03               	xorlw	3	; case 2
 13983  0E7C  1903               	skipnz
 13984  0E7D  2E58               	goto	i1l4503
 13985  0E7E  3A01               	xorlw	1	; case 3
 13986  0E7F  1903               	skipnz
 13987  0E80  2E5B               	goto	i1l4507
 13988  0E81  3A07               	xorlw	7	; case 4
 13989  0E82  1903               	skipnz
 13990  0E83  2E5E               	goto	i1l4511
 13991  0E84  2E5E               	goto	i1l4511
 13992  0E85                     i1l157:	
 13993                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 13994                           
 13995                           
 13996                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 13997  0E85  0023               	movlb	3	; select bank3
 13998  0E86  11A0               	bcf	_i2c_status^(0+384),3
 13999                           
 14000                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 14001  0E87  3002               	movlw	2
 14002  0E88  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14003  0E89  0086               	movwf	6
 14004  0E8A  3001               	movlw	1	; select bank3/4
 14005  0E8B  0087               	movwf	7
 14006  0E8C  3F40               	moviw [0]fsr1
 14007  0E8D  0084               	movwf	4
 14008  0E8E  0185               	clrf	5
 14009  0E8F  0A81               	incf	1,f
 14010  0E90  0800               	movf	0,w
 14011  0E91  3188  2094  318E   	fcall	i1_i2c1_driver_TXData
 14012                           
 14013                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 14014  0E94  3001               	movlw	1
 14015  0E95  0023               	movlb	3	; select bank3
 14016  0E96  02A3               	subwf	(_i2c_status^(0+384)+3),f
 14017  0E97  3000               	movlw	0
 14018  0E98  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 14019  0E99  0823               	movf	(_i2c_status^(0+384)+3),w
 14020  0E9A  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 14021  0E9B  1D03               	btfss	3,2
 14022  0E9C  2E9F               	goto	i1l4525
 14023  0E9D  3006               	movlw	6
 14024  0E9E  0008               	return
 14025  0E9F                     i1l4525:	
 14026  0E9F  3003               	movlw	3
 14027  0EA0  0008               	return
 14028  0EA1                     __end_of_do_I2C_TX:	
 14029                           
 14030                           	psect	text72
 14031  0BEC                     __ptext72:	
 14032 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 14033 ;; Defined at:
 14034 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;		None
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;		None
 14039 ;; Return value:  Size  Location     Type
 14040 ;;                  1    wreg      enum E7120
 14041 ;; Registers used:
 14042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14043 ;; Tracked objects:
 14044 ;;		On entry : 0/0
 14045 ;;		On exit  : 0/0
 14046 ;;		Unchanged: 0/0
 14047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;Total ram usage:        3 bytes
 14053 ;; Hardware stack levels used:    1
 14054 ;; Hardware stack levels required when called:    2
 14055 ;; This function calls:
 14056 ;;		_do_I2C_SEND_RESTART
 14057 ;;		_do_I2C_SEND_STOP
 14058 ;;		_returnReset
 14059 ;;		_returnStop
 14060 ;; This function is called by:
 14061 ;;		_i2c_ISR
 14062 ;; This function uses a non-reentrant model
 14063 ;;
 14064                           
 14065                           
 14066                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 14067  0BEC                     _do_I2C_DO_ADDRESS_NACK:	
 14068                           
 14069                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 14070                           
 14071                           ;incstack = 0
 14072                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14073  0BEC  0023               	movlb	3	; select bank3
 14074  0BED  11A0               	bcf	_i2c_status^(0+384),3
 14075                           
 14076                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14077  0BEE  3002               	movlw	2
 14078  0BEF  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14079  0BF0  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14080  0BF1  00AA               	movwf	(_i2c_status^(0+384)+10)
 14081                           
 14082                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14083  0BF2  2BF9               	goto	i1l4491
 14084  0BF3                     i1l4481:	
 14085                           
 14086                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14087  0BF3  3188  2078         	fcall	_do_I2C_SEND_RESTART
 14088  0BF5  0008               	return
 14089  0BF6                     i1l4485:	
 14090                           
 14091                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14092  0BF6  3188  207C         	fcall	_do_I2C_SEND_STOP
 14093  0BF8  0008               	return
 14094  0BF9                     i1l4491:	
 14095  0BF9  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 14096  0BFA  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14097  0BFB  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14098  0BFC  00F6               	movwf	returnReset@p
 14099  0BFD  300F               	movlw	15
 14100  0BFE  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14101  0BFF  0086               	movwf	6
 14102  0C00  3001               	movlw	1	; select bank3/4
 14103  0C01  0087               	movwf	7
 14104  0C02  3F41               	moviw [1]fsr1
 14105  0C03  008A               	movwf	10
 14106  0C04  3F40               	moviw [0]fsr1
 14107  0C05  000A               	callw
 14108  0C06  318B               	pagesel	$
 14109  0C07  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 14110  0C08  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 14111                           
 14112                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14113                           ; Switch size 1, requested type "simple"
 14114                           ; Number of cases is 1, Range of values is 0 to 0
 14115                           ; switch strategies available:
 14116                           ; Name         Instructions Cycles
 14117                           ; simple_byte            4     3 (average)
 14118                           ; direct_byte            8     6 (fixed)
 14119                           ; jumptable            260     6 (fixed)
 14120                           ;	Chosen strategy is simple_byte
 14121  0C09  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 14122  0C0A  3A00               	xorlw	0	; case 0
 14123  0C0B  1903               	skipnz
 14124  0C0C  2C0E               	goto	i1l7255
 14125  0C0D  2BF6               	goto	i1l4485
 14126  0C0E                     i1l7255:	
 14127                           
 14128                           ; Switch size 1, requested type "simple"
 14129                           ; Number of cases is 2, Range of values is 2 to 3
 14130                           ; switch strategies available:
 14131                           ; Name         Instructions Cycles
 14132                           ; simple_byte            7     4 (average)
 14133                           ; direct_byte           13     9 (fixed)
 14134                           ; jumptable            263     9 (fixed)
 14135                           ;	Chosen strategy is simple_byte
 14136  0C0E  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 14137  0C0F  3A02               	xorlw	2	; case 2
 14138  0C10  1903               	skipnz
 14139  0C11  2BF3               	goto	i1l4481
 14140  0C12  3A01               	xorlw	1	; case 3
 14141  0C13  1903               	skipnz
 14142  0C14  2BF3               	goto	i1l4481
 14143  0C15  2BF6               	goto	i1l4485
 14144  0C16  0008               	return
 14145  0C17                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 14146                           
 14147                           	psect	text73
 14148  0888                     __ptext73:	
 14149 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 14150 ;; Defined at:
 14151 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14152 ;; Parameters:    Size  Location     Type
 14153 ;;		None
 14154 ;; Auto vars:     Size  Location     Type
 14155 ;;		None
 14156 ;; Return value:  Size  Location     Type
 14157 ;;                  1    wreg      enum E7120
 14158 ;; Registers used:
 14159 ;;		wreg, status,2, status,0, pclath, cstack
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;Total ram usage:        0 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    1
 14172 ;; This function calls:
 14173 ;;		i1_i2c1_driver_sendNACK
 14174 ;; This function is called by:
 14175 ;;		_do_I2C_RX
 14176 ;;		_i2c_ISR
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           
 14181                           ;psect for function _do_I2C_DO_NACK_RESTART
 14182  0888                     _do_I2C_DO_NACK_RESTART:	
 14183                           
 14184                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 14185                           
 14186                           ;incstack = 0
 14187                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14188  0888  3188  206C         	fcall	i1_i2c1_driver_sendNACK
 14189                           
 14190                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14191  088A  3009               	movlw	9
 14192  088B  0008               	return
 14193  088C                     __end_of_do_I2C_DO_NACK_RESTART:	
 14194                           
 14195                           	psect	text74
 14196  0884                     __ptext74:	
 14197 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 14198 ;; Defined at:
 14199 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14200 ;; Parameters:    Size  Location     Type
 14201 ;;		None
 14202 ;; Auto vars:     Size  Location     Type
 14203 ;;		None
 14204 ;; Return value:  Size  Location     Type
 14205 ;;                  1    wreg      enum E7120
 14206 ;; Registers used:
 14207 ;;		wreg, status,2, status,0, pclath, cstack
 14208 ;; Tracked objects:
 14209 ;;		On entry : 0/0
 14210 ;;		On exit  : 0/0
 14211 ;;		Unchanged: 0/0
 14212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;Total ram usage:        0 bytes
 14218 ;; Hardware stack levels used:    1
 14219 ;; Hardware stack levels required when called:    1
 14220 ;; This function calls:
 14221 ;;		i1_i2c1_driver_sendNACK
 14222 ;; This function is called by:
 14223 ;;		_do_I2C_RX
 14224 ;;		_i2c_ISR
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           
 14229                           ;psect for function _do_I2C_DO_NACK_STOP
 14230  0884                     _do_I2C_DO_NACK_STOP:	
 14231                           
 14232                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 14233                           
 14234                           ;incstack = 0
 14235                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14236  0884  3188  206C         	fcall	i1_i2c1_driver_sendNACK
 14237                           
 14238                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14239  0886  300A               	movlw	10
 14240  0887  0008               	return
 14241  0888                     __end_of_do_I2C_DO_NACK_STOP:	
 14242                           
 14243                           	psect	text75
 14244  0880                     __ptext75:	
 14245 ;; *************** function _do_I2C_DO_ACK *****************
 14246 ;; Defined at:
 14247 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14248 ;; Parameters:    Size  Location     Type
 14249 ;;		None
 14250 ;; Auto vars:     Size  Location     Type
 14251 ;;		None
 14252 ;; Return value:  Size  Location     Type
 14253 ;;                  1    wreg      enum E7120
 14254 ;; Registers used:
 14255 ;;		wreg, status,2, status,0, pclath, cstack
 14256 ;; Tracked objects:
 14257 ;;		On entry : 0/0
 14258 ;;		On exit  : 0/0
 14259 ;;		Unchanged: 0/0
 14260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;Total ram usage:        0 bytes
 14266 ;; Hardware stack levels used:    1
 14267 ;; Hardware stack levels required when called:    1
 14268 ;; This function calls:
 14269 ;;		_i2c1_driver_sendACK
 14270 ;; This function is called by:
 14271 ;;		_i2c_ISR
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _do_I2C_DO_ACK
 14277  0880                     _do_I2C_DO_ACK:	
 14278                           
 14279                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 14283  0880  3188  2068         	fcall	_i2c1_driver_sendACK
 14284                           
 14285                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 14286  0882  3005               	movlw	5
 14287  0883  0008               	return
 14288  0884                     __end_of_do_I2C_DO_ACK:	
 14289                           
 14290                           	psect	text76
 14291  089E                     __ptext76:	
 14292 ;; *************** function _do_I2C_RCEN *****************
 14293 ;; Defined at:
 14294 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 14295 ;; Parameters:    Size  Location     Type
 14296 ;;		None
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;		None
 14299 ;; Return value:  Size  Location     Type
 14300 ;;                  1    wreg      enum E7120
 14301 ;; Registers used:
 14302 ;;		wreg, status,2, status,0, pclath, cstack
 14303 ;; Tracked objects:
 14304 ;;		On entry : 0/0
 14305 ;;		On exit  : 0/0
 14306 ;;		Unchanged: 0/0
 14307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;Total ram usage:        0 bytes
 14313 ;; Hardware stack levels used:    1
 14314 ;; Hardware stack levels required when called:    1
 14315 ;; This function calls:
 14316 ;;		i1_i2c1_driver_startRX
 14317 ;; This function is called by:
 14318 ;;		_i2c_ISR
 14319 ;; This function uses a non-reentrant model
 14320 ;;
 14321                           
 14322                           
 14323                           ;psect for function _do_I2C_RCEN
 14324  089E                     _do_I2C_RCEN:	
 14325                           
 14326                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 14327                           
 14328                           ;incstack = 0
 14329                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 14330  089E  0023               	movlb	3	; select bank3
 14331  089F  11A0               	bcf	_i2c_status^(0+384),3
 14332                           
 14333                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 14334  08A0  3188  203B         	fcall	i1_i2c1_driver_startRX
 14335                           
 14336                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 14337  08A2  3004               	movlw	4
 14338  08A3  0008               	return
 14339  08A4                     __end_of_do_I2C_RCEN:	
 14340                           
 14341                           	psect	text77
 14342  08BD                     __ptext77:	
 14343 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 14344 ;; Defined at:
 14345 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;		None
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;		None
 14350 ;; Return value:  Size  Location     Type
 14351 ;;                  1    wreg      enum E7120
 14352 ;; Registers used:
 14353 ;;		wreg, status,2, status,0, pclath, cstack
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;Total ram usage:        0 bytes
 14364 ;; Hardware stack levels used:    1
 14365 ;; Hardware stack levels required when called:    1
 14366 ;; This function calls:
 14367 ;;		i1_i2c1_driver_TXData
 14368 ;; This function is called by:
 14369 ;;		_i2c_ISR
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           
 14374                           ;psect for function _do_I2C_SEND_ADR_WRITE
 14375  08BD                     _do_I2C_SEND_ADR_WRITE:	
 14376                           
 14377                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 14378                           
 14379                           ;incstack = 0
 14380                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14381  08BD  0023               	movlb	3	; select bank3
 14382  08BE  15A0               	bsf	_i2c_status^(0+384),3
 14383                           
 14384                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 14385  08BF  3521               	lslf	(_i2c_status^(0+384)+1),w
 14386  08C0  3188  2094         	fcall	i1_i2c1_driver_TXData
 14387                           
 14388                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 14389  08C2  3003               	movlw	3
 14390  08C3  0008               	return
 14391  08C4                     __end_of_do_I2C_SEND_ADR_WRITE:	
 14392                           
 14393                           	psect	text78
 14394  08E1                     __ptext78:	
 14395 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 14396 ;; Defined at:
 14397 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 14398 ;; Parameters:    Size  Location     Type
 14399 ;;		None
 14400 ;; Auto vars:     Size  Location     Type
 14401 ;;		None
 14402 ;; Return value:  Size  Location     Type
 14403 ;;                  1    wreg      enum E7120
 14404 ;; Registers used:
 14405 ;;		wreg, status,2, status,0, pclath, cstack
 14406 ;; Tracked objects:
 14407 ;;		On entry : 0/0
 14408 ;;		On exit  : 0/0
 14409 ;;		Unchanged: 0/0
 14410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;Total ram usage:        0 bytes
 14416 ;; Hardware stack levels used:    1
 14417 ;; Hardware stack levels required when called:    1
 14418 ;; This function calls:
 14419 ;;		i1_i2c1_driver_TXData
 14420 ;; This function is called by:
 14421 ;;		_i2c_ISR
 14422 ;; This function uses a non-reentrant model
 14423 ;;
 14424                           
 14425                           
 14426                           ;psect for function _do_I2C_SEND_ADR_READ
 14427  08E1                     _do_I2C_SEND_ADR_READ:	
 14428                           
 14429                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 14430                           
 14431                           ;incstack = 0
 14432                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 14433  08E1  0023               	movlb	3	; select bank3
 14434  08E2  15A0               	bsf	_i2c_status^(0+384),3
 14435                           
 14436                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 14437  08E3  1403               	setc
 14438  08E4  0D21               	rlf	(_i2c_status^(0+384)+1),w
 14439  08E5  3188  2094         	fcall	i1_i2c1_driver_TXData
 14440                           
 14441                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 14442  08E7  3005               	movlw	5
 14443  08E8  0008               	return
 14444  08E9                     __end_of_do_I2C_SEND_ADR_READ:	
 14445                           
 14446                           	psect	text79
 14447  087C                     __ptext79:	
 14448 ;; *************** function _do_I2C_SEND_STOP *****************
 14449 ;; Defined at:
 14450 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;		None
 14453 ;; Auto vars:     Size  Location     Type
 14454 ;;		None
 14455 ;; Return value:  Size  Location     Type
 14456 ;;                  1    wreg      enum E7120
 14457 ;; Registers used:
 14458 ;;		wreg, status,2, status,0, pclath, cstack
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14468 ;;Total ram usage:        0 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; Hardware stack levels required when called:    1
 14471 ;; This function calls:
 14472 ;;		i1_i2c1_driver_stop
 14473 ;; This function is called by:
 14474 ;;		_do_I2C_DO_ADDRESS_NACK
 14475 ;;		_do_I2C_TX
 14476 ;;		_do_I2C_TX_EMPTY
 14477 ;;		_i2c_ISR
 14478 ;; This function uses a non-reentrant model
 14479 ;;
 14480                           
 14481                           
 14482                           ;psect for function _do_I2C_SEND_STOP
 14483  087C                     _do_I2C_SEND_STOP:	
 14484                           
 14485                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 14486                           
 14487                           ;incstack = 0
 14488                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 14489  087C  3188  2038         	fcall	i1_i2c1_driver_stop
 14490                           
 14491                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 14492  087E  3000               	movlw	0
 14493  087F  0008               	return
 14494  0880                     __end_of_do_I2C_SEND_STOP:	
 14495                           
 14496                           	psect	text80
 14497  0878                     __ptext80:	
 14498 ;; *************** function _do_I2C_SEND_RESTART *****************
 14499 ;; Defined at:
 14500 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;		None
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;		None
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      enum E7120
 14507 ;; Registers used:
 14508 ;;		wreg, status,2, status,0, pclath, cstack
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;Total ram usage:        0 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:    1
 14521 ;; This function calls:
 14522 ;;		i1_i2c1_driver_restart
 14523 ;; This function is called by:
 14524 ;;		_do_I2C_DO_ADDRESS_NACK
 14525 ;;		_do_I2C_TX_EMPTY
 14526 ;;		_i2c_ISR
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _do_I2C_SEND_RESTART
 14532  0878                     _do_I2C_SEND_RESTART:	
 14533                           
 14534                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 14535                           
 14536                           ;incstack = 0
 14537                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14538  0878  3188  2035         	fcall	i1_i2c1_driver_restart
 14539                           
 14540                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 14541  087A  3001               	movlw	1
 14542  087B  0008               	return
 14543  087C                     __end_of_do_I2C_SEND_RESTART:	
 14544                           
 14545                           	psect	text81
 14546  0874                     __ptext81:	
 14547 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 14548 ;; Defined at:
 14549 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 14550 ;; Parameters:    Size  Location     Type
 14551 ;;		None
 14552 ;; Auto vars:     Size  Location     Type
 14553 ;;		None
 14554 ;; Return value:  Size  Location     Type
 14555 ;;                  1    wreg      enum E7120
 14556 ;; Registers used:
 14557 ;;		wreg, status,2, status,0, pclath, cstack
 14558 ;; Tracked objects:
 14559 ;;		On entry : 0/0
 14560 ;;		On exit  : 0/0
 14561 ;;		Unchanged: 0/0
 14562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;Total ram usage:        0 bytes
 14568 ;; Hardware stack levels used:    1
 14569 ;; Hardware stack levels required when called:    1
 14570 ;; This function calls:
 14571 ;;		i1_i2c1_driver_restart
 14572 ;; This function is called by:
 14573 ;;		_do_I2C_TX
 14574 ;;		_i2c_ISR
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           
 14579                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 14580  0874                     _do_I2C_SEND_RESTART_WRITE:	
 14581                           
 14582                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14586  0874  3188  2035         	fcall	i1_i2c1_driver_restart
 14587                           
 14588                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 14589  0876  3002               	movlw	2
 14590  0877  0008               	return
 14591  0878                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 14592                           
 14593                           	psect	text82
 14594  0870                     __ptext82:	
 14595 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 14596 ;; Defined at:
 14597 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 14598 ;; Parameters:    Size  Location     Type
 14599 ;;		None
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;		None
 14602 ;; Return value:  Size  Location     Type
 14603 ;;                  1    wreg      enum E7120
 14604 ;; Registers used:
 14605 ;;		wreg, status,2, status,0, pclath, cstack
 14606 ;; Tracked objects:
 14607 ;;		On entry : 0/0
 14608 ;;		On exit  : 0/0
 14609 ;;		Unchanged: 0/0
 14610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;Total ram usage:        0 bytes
 14616 ;; Hardware stack levels used:    1
 14617 ;; Hardware stack levels required when called:    1
 14618 ;; This function calls:
 14619 ;;		i1_i2c1_driver_restart
 14620 ;; This function is called by:
 14621 ;;		_do_I2C_TX
 14622 ;;		_i2c_ISR
 14623 ;; This function uses a non-reentrant model
 14624 ;;
 14625                           
 14626                           
 14627                           ;psect for function _do_I2C_SEND_RESTART_READ
 14628  0870                     _do_I2C_SEND_RESTART_READ:	
 14629                           
 14630                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 14631                           
 14632                           ;incstack = 0
 14633                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 14634  0870  3188  2035         	fcall	i1_i2c1_driver_restart
 14635                           
 14636                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 14637  0872  3001               	movlw	1
 14638  0873  0008               	return
 14639  0874                     __end_of_do_I2C_SEND_RESTART_READ:	
 14640                           
 14641                           	psect	text83
 14642  0899                     __ptext83:	
 14643 ;; *************** function _do_I2C_IDLE *****************
 14644 ;; Defined at:
 14645 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 14646 ;; Parameters:    Size  Location     Type
 14647 ;;		None
 14648 ;; Auto vars:     Size  Location     Type
 14649 ;;		None
 14650 ;; Return value:  Size  Location     Type
 14651 ;;                  1    wreg      enum E7120
 14652 ;; Registers used:
 14653 ;;		wreg, status,2
 14654 ;; Tracked objects:
 14655 ;;		On entry : 0/0
 14656 ;;		On exit  : 0/0
 14657 ;;		Unchanged: 0/0
 14658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;Total ram usage:        0 bytes
 14664 ;; Hardware stack levels used:    1
 14665 ;; This function calls:
 14666 ;;		Nothing
 14667 ;; This function is called by:
 14668 ;;		_i2c_ISR
 14669 ;; This function uses a non-reentrant model
 14670 ;;
 14671                           
 14672                           
 14673                           ;psect for function _do_I2C_IDLE
 14674  0899                     _do_I2C_IDLE:	
 14675                           
 14676                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14677                           
 14678                           ;incstack = 0
 14679                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 14680  0899  0023               	movlb	3	; select bank3
 14681  089A  1020               	bcf	_i2c_status^(0+384),0
 14682                           
 14683                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14684  089B  01AA               	clrf	(_i2c_status^(0+384)+10)
 14685                           
 14686                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14687  089C  300E               	movlw	14
 14688  089D  0008               	return
 14689  089E                     __end_of_do_I2C_IDLE:	
 14690                           
 14691                           	psect	text84
 14692  08B6                     __ptext84:	
 14693 ;; *************** function _do_I2C_RESET *****************
 14694 ;; Defined at:
 14695 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14696 ;; Parameters:    Size  Location     Type
 14697 ;;		None
 14698 ;; Auto vars:     Size  Location     Type
 14699 ;;		None
 14700 ;; Return value:  Size  Location     Type
 14701 ;;                  1    wreg      enum E7120
 14702 ;; Registers used:
 14703 ;;		wreg, status,2, status,0, pclath, cstack
 14704 ;; Tracked objects:
 14705 ;;		On entry : 0/0
 14706 ;;		On exit  : 0/0
 14707 ;;		Unchanged: 0/0
 14708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14713 ;;Total ram usage:        0 bytes
 14714 ;; Hardware stack levels used:    1
 14715 ;; Hardware stack levels required when called:    1
 14716 ;; This function calls:
 14717 ;;		_i2c1_driver_resetBus
 14718 ;; This function is called by:
 14719 ;;		_i2c_ISR
 14720 ;; This function uses a non-reentrant model
 14721 ;;
 14722                           
 14723                           
 14724                           ;psect for function _do_I2C_RESET
 14725  08B6                     _do_I2C_RESET:	
 14726                           
 14727                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 14728                           
 14729                           ;incstack = 0
 14730                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14731  08B6  3188  2032         	fcall	_i2c1_driver_resetBus
 14732                           
 14733                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14734  08B8  0023               	movlb	3	; select bank3
 14735  08B9  1020               	bcf	_i2c_status^(0+384),0
 14736                           
 14737                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14738  08BA  01AA               	clrf	(_i2c_status^(0+384)+10)
 14739                           
 14740                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14741  08BB  300E               	movlw	14
 14742  08BC  0008               	return
 14743  08BD                     __end_of_do_I2C_RESET:	
 14744                           
 14745                           	psect	text85
 14746  0C42                     __ptext85:	
 14747 ;; *************** function _do_I2C_TX_EMPTY *****************
 14748 ;; Defined at:
 14749 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14750 ;; Parameters:    Size  Location     Type
 14751 ;;		None
 14752 ;; Auto vars:     Size  Location     Type
 14753 ;;		None
 14754 ;; Return value:  Size  Location     Type
 14755 ;;                  1    wreg      enum E7120
 14756 ;; Registers used:
 14757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14758 ;; Tracked objects:
 14759 ;;		On entry : 0/0
 14760 ;;		On exit  : 0/0
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;Total ram usage:        3 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; Hardware stack levels required when called:    2
 14770 ;; This function calls:
 14771 ;;		_do_I2C_SEND_RESTART
 14772 ;;		_do_I2C_SEND_STOP
 14773 ;;		_mssp1_setIRQ
 14774 ;;		_returnReset
 14775 ;;		_returnStop
 14776 ;; This function is called by:
 14777 ;;		_i2c_ISR
 14778 ;; This function uses a non-reentrant model
 14779 ;;
 14780                           
 14781                           
 14782                           ;psect for function _do_I2C_TX_EMPTY
 14783  0C42                     _do_I2C_TX_EMPTY:	
 14784                           
 14785                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 14786                           
 14787                           ;incstack = 0
 14788                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14789  0C42  0023               	movlb	3	; select bank3
 14790  0C43  1520               	bsf	_i2c_status^(0+384),2
 14791                           
 14792                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14793  0C44  2C4F               	goto	i1l4583
 14794  0C45                     i1l4567:	
 14795                           
 14796                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 14797  0C45  3188  2078         	fcall	_do_I2C_SEND_RESTART
 14798  0C47  0008               	return
 14799  0C48                     i1l4571:	
 14800                           
 14801                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 14802  0C48  3188  2041         	fcall	_mssp1_setIRQ
 14803                           
 14804                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 14805  0C4A  3003               	movlw	3
 14806  0C4B  0008               	return
 14807  0C4C                     i1l4577:	
 14808                           
 14809                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 14810  0C4C  3188  207C         	fcall	_do_I2C_SEND_STOP
 14811  0C4E  0008               	return
 14812  0C4F                     i1l4583:	
 14813  0C4F  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14814  0C50  00F6               	movwf	??_do_I2C_TX_EMPTY
 14815  0C51  0876               	movf	??_do_I2C_TX_EMPTY,w
 14816  0C52  00F6               	movwf	returnReset@p
 14817  0C53  300B               	movlw	11
 14818  0C54  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14819  0C55  0086               	movwf	6
 14820  0C56  3001               	movlw	1	; select bank3/4
 14821  0C57  0087               	movwf	7
 14822  0C58  3F41               	moviw [1]fsr1
 14823  0C59  008A               	movwf	10
 14824  0C5A  3F40               	moviw [0]fsr1
 14825  0C5B  000A               	callw
 14826  0C5C  318C               	pagesel	$
 14827  0C5D  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 14828  0C5E  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 14829                           
 14830                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14831                           ; Switch size 1, requested type "simple"
 14832                           ; Number of cases is 1, Range of values is 0 to 0
 14833                           ; switch strategies available:
 14834                           ; Name         Instructions Cycles
 14835                           ; simple_byte            4     3 (average)
 14836                           ; direct_byte            8     6 (fixed)
 14837                           ; jumptable            260     6 (fixed)
 14838                           ;	Chosen strategy is simple_byte
 14839  0C5F  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 14840  0C60  3A00               	xorlw	0	; case 0
 14841  0C61  1903               	skipnz
 14842  0C62  2C64               	goto	i1l7257
 14843  0C63  2C4C               	goto	i1l4577
 14844  0C64                     i1l7257:	
 14845                           
 14846                           ; Switch size 1, requested type "simple"
 14847                           ; Number of cases is 4, Range of values is 1 to 4
 14848                           ; switch strategies available:
 14849                           ; Name         Instructions Cycles
 14850                           ; simple_byte           13     7 (average)
 14851                           ; direct_byte           17     9 (fixed)
 14852                           ; jumptable            263     9 (fixed)
 14853                           ;	Chosen strategy is simple_byte
 14854  0C64  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 14855  0C65  3A01               	xorlw	1	; case 1
 14856  0C66  1903               	skipnz
 14857  0C67  2C4C               	goto	i1l4577
 14858  0C68  3A03               	xorlw	3	; case 2
 14859  0C69  1903               	skipnz
 14860  0C6A  2C45               	goto	i1l4567
 14861  0C6B  3A01               	xorlw	1	; case 3
 14862  0C6C  1903               	skipnz
 14863  0C6D  2C45               	goto	i1l4567
 14864  0C6E  3A07               	xorlw	7	; case 4
 14865  0C6F  1903               	skipnz
 14866  0C70  2C48               	goto	i1l4571
 14867  0C71  2C4C               	goto	i1l4577
 14868  0C72  0008               	return
 14869  0C73                     __end_of_do_I2C_TX_EMPTY:	
 14870                           
 14871                           	psect	text86
 14872  0841                     __ptext86:	
 14873 ;; *************** function _mssp1_setIRQ *****************
 14874 ;; Defined at:
 14875 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;		None
 14878 ;; Auto vars:     Size  Location     Type
 14879 ;;		None
 14880 ;; Return value:  Size  Location     Type
 14881 ;;                  1    wreg      void 
 14882 ;; Registers used:
 14883 ;;		None
 14884 ;; Tracked objects:
 14885 ;;		On entry : 0/0
 14886 ;;		On exit  : 0/0
 14887 ;;		Unchanged: 0/0
 14888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14893 ;;Total ram usage:        0 bytes
 14894 ;; Hardware stack levels used:    1
 14895 ;; This function calls:
 14896 ;;		Nothing
 14897 ;; This function is called by:
 14898 ;;		_do_I2C_TX_EMPTY
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           
 14903                           ;psect for function _mssp1_setIRQ
 14904  0841                     _mssp1_setIRQ:	
 14905                           
 14906                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 14907                           
 14908                           ;incstack = 0
 14909                           ; Regs used in _mssp1_setIRQ: []
 14910  0841  0020               	movlb	0	; select bank0
 14911  0842  1591               	bsf	17,3	;volatile
 14912  0843  0008               	return
 14913  0844                     __end_of_mssp1_setIRQ:	
 14914                           
 14915                           	psect	text87
 14916  08D9                     __ptext87:	
 14917 ;; *************** function _i2c1_driver_isNACK *****************
 14918 ;; Defined at:
 14919 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;		None
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;		None
 14924 ;; Return value:  Size  Location     Type
 14925 ;;		None               void
 14926 ;; Registers used:
 14927 ;;		wreg, status,2, status,0
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;Total ram usage:        1 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; This function calls:
 14940 ;;		Nothing
 14941 ;; This function is called by:
 14942 ;;		_do_I2C_TX
 14943 ;;		_i2c_ISR
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function _i2c1_driver_isNACK
 14949  08D9                     _i2c1_driver_isNACK:	
 14950                           
 14951                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 14952                           
 14953                           ;incstack = 0
 14954                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 14955  08D9  0024               	movlb	4	; select bank4
 14956  08DA  0E16               	swapf	22,w	;volatile
 14957  08DB  0C89               	rrf	9,f
 14958  08DC  0C89               	rrf	9,f
 14959  08DD  3901               	andlw	1
 14960  08DE  00F6               	movwf	??_i2c1_driver_isNACK
 14961  08DF  0C76               	rrf	??_i2c1_driver_isNACK,w
 14962  08E0  0008               	return
 14963  08E1                     __end_of_i2c1_driver_isNACK:	
 14964                           
 14965                           	psect	text88
 14966  0894                     __ptext88:	
 14967 ;; *************** function i1_i2c1_driver_TXData *****************
 14968 ;; Defined at:
 14969 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;  d               1    wreg     unsigned char 
 14972 ;; Auto vars:     Size  Location     Type
 14973 ;;  d               1    0[COMMON] unsigned char 
 14974 ;; Return value:  Size  Location     Type
 14975 ;;                  1    wreg      void 
 14976 ;; Registers used:
 14977 ;;		wreg
 14978 ;; Tracked objects:
 14979 ;;		On entry : 0/0
 14980 ;;		On exit  : 0/0
 14981 ;;		Unchanged: 0/0
 14982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;Total ram usage:        1 bytes
 14988 ;; Hardware stack levels used:    1
 14989 ;; This function calls:
 14990 ;;		Nothing
 14991 ;; This function is called by:
 14992 ;;		_do_I2C_SEND_ADR_READ
 14993 ;;		_do_I2C_SEND_ADR_WRITE
 14994 ;;		_do_I2C_TX
 14995 ;; This function uses a non-reentrant model
 14996 ;;
 14997                           
 14998                           
 14999                           ;psect for function i1_i2c1_driver_TXData
 15000  0894                     i1_i2c1_driver_TXData:	
 15001                           
 15002                           ;incstack = 0
 15003                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 15004                           ;i1i2c1_driver_TXData@d stored from wreg
 15005  0894  00F6               	movwf	i1i2c1_driver_TXData@d
 15006                           
 15007                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 15008  0895  0876               	movf	i1i2c1_driver_TXData@d,w
 15009  0896  0024               	movlb	4	; select bank4
 15010  0897  0091               	movwf	17	;volatile
 15011  0898  0008               	return
 15012  0899                     __end_ofi1_i2c1_driver_TXData:	
 15013                           
 15014                           	psect	text89
 15015  083E                     __ptext89:	
 15016 ;; *************** function i1_i2c1_driver_getRXData *****************
 15017 ;; Defined at:
 15018 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 15019 ;; Parameters:    Size  Location     Type
 15020 ;;		None
 15021 ;; Auto vars:     Size  Location     Type
 15022 ;;		None
 15023 ;; Return value:  Size  Location     Type
 15024 ;;                  1    wreg      unsigned char 
 15025 ;; Registers used:
 15026 ;;		wreg
 15027 ;; Tracked objects:
 15028 ;;		On entry : 0/0
 15029 ;;		On exit  : 0/0
 15030 ;;		Unchanged: 0/0
 15031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;Total ram usage:        0 bytes
 15037 ;; Hardware stack levels used:    1
 15038 ;; This function calls:
 15039 ;;		Nothing
 15040 ;; This function is called by:
 15041 ;;		_do_I2C_RX
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           
 15046                           ;psect for function i1_i2c1_driver_getRXData
 15047  083E                     i1_i2c1_driver_getRXData:	
 15048                           
 15049                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 15050                           
 15051                           ;incstack = 0
 15052                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 15053  083E  0024               	movlb	4	; select bank4
 15054  083F  0811               	movf	17,w	;volatile
 15055  0840  0008               	return
 15056  0841                     __end_ofi1_i2c1_driver_getRXData:	
 15057                           
 15058                           	psect	text90
 15059  086C                     __ptext90:	
 15060 ;; *************** function i1_i2c1_driver_sendNACK *****************
 15061 ;; Defined at:
 15062 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 15063 ;; Parameters:    Size  Location     Type
 15064 ;;		None
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;		None
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  1    wreg      void 
 15069 ;; Registers used:
 15070 ;;		None
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;Total ram usage:        0 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; This function calls:
 15083 ;;		Nothing
 15084 ;; This function is called by:
 15085 ;;		_do_I2C_DO_NACK_STOP
 15086 ;;		_do_I2C_DO_NACK_RESTART
 15087 ;; This function uses a non-reentrant model
 15088 ;;
 15089                           
 15090                           
 15091                           ;psect for function i1_i2c1_driver_sendNACK
 15092  086C                     i1_i2c1_driver_sendNACK:	
 15093                           
 15094                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 15095                           
 15096                           ;incstack = 0
 15097                           ; Regs used in i1_i2c1_driver_sendNACK: []
 15098  086C  0024               	movlb	4	; select bank4
 15099  086D  1696               	bsf	22,5	;volatile
 15100                           
 15101                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 15102  086E  1616               	bsf	22,4	;volatile
 15103  086F  0008               	return
 15104  0870                     __end_ofi1_i2c1_driver_sendNACK:	
 15105                           
 15106                           	psect	text91
 15107  0832                     __ptext91:	
 15108 ;; *************** function _i2c1_driver_resetBus *****************
 15109 ;; Defined at:
 15110 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;		None
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;		None
 15115 ;; Return value:  Size  Location     Type
 15116 ;;                  1    wreg      void 
 15117 ;; Registers used:
 15118 ;;		None
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : 0/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;Total ram usage:        0 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; This function calls:
 15131 ;;		Nothing
 15132 ;; This function is called by:
 15133 ;;		_do_I2C_RESET
 15134 ;; This function uses a non-reentrant model
 15135 ;;
 15136                           
 15137                           
 15138                           ;psect for function _i2c1_driver_resetBus
 15139  0832                     _i2c1_driver_resetBus:	
 15140                           
 15141                           ;incstack = 0
 15142                           ; Regs used in _i2c1_driver_resetBus: []
 15143  0832  0008               	return
 15144  0833                     __end_of_i2c1_driver_resetBus:	
 15145                           
 15146                           	psect	text92
 15147  083B                     __ptext92:	
 15148 ;; *************** function i1_i2c1_driver_startRX *****************
 15149 ;; Defined at:
 15150 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;		None
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;		None
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1    wreg      void 
 15157 ;; Registers used:
 15158 ;;		None
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;Total ram usage:        0 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; This function calls:
 15171 ;;		Nothing
 15172 ;; This function is called by:
 15173 ;;		_do_I2C_RCEN
 15174 ;; This function uses a non-reentrant model
 15175 ;;
 15176                           
 15177                           
 15178                           ;psect for function i1_i2c1_driver_startRX
 15179  083B                     i1_i2c1_driver_startRX:	
 15180                           
 15181                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 15182                           
 15183                           ;incstack = 0
 15184                           ; Regs used in i1_i2c1_driver_startRX: []
 15185  083B  0024               	movlb	4	; select bank4
 15186  083C  1596               	bsf	22,3	;volatile
 15187  083D  0008               	return
 15188  083E                     __end_ofi1_i2c1_driver_startRX:	
 15189                           
 15190                           	psect	text93
 15191  0002                     __ptext93:	
 15192 ;; *************** function _returnReset *****************
 15193 ;; Defined at:
 15194 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;  p               1    0[COMMON] PTR void 
 15197 ;;		 -> NULL(0), 
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;		None
 15200 ;; Return value:  Size  Location     Type
 15201 ;;                  1    wreg      enum E6966
 15202 ;; Registers used:
 15203 ;;		wreg
 15204 ;; Tracked objects:
 15205 ;;		On entry : 0/0
 15206 ;;		On exit  : 0/0
 15207 ;;		Unchanged: 0/0
 15208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15209 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;Total ram usage:        1 bytes
 15214 ;; Hardware stack levels used:    1
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_i2c_open
 15219 ;;		_do_I2C_DO_ADDRESS_NACK
 15220 ;;		_do_I2C_TX
 15221 ;;		_do_I2C_RX
 15222 ;;		_do_I2C_TX_EMPTY
 15223 ;; This function uses a non-reentrant model
 15224 ;;
 15225                           
 15226                           
 15227                           ;psect for function _returnReset
 15228  0002                     _returnReset:	
 15229                           
 15230                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 15231                           
 15232                           ;incstack = 0
 15233                           ; Regs used in _returnReset: [wreg]
 15234  0002  3005               	movlw	5
 15235  0003  0008               	return
 15236  0004                     __end_of_returnReset:	
 15237                           
 15238                           	psect	text94
 15239  0833                     __ptext94:	
 15240 ;; *************** function _returnStop *****************
 15241 ;; Defined at:
 15242 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 15243 ;; Parameters:    Size  Location     Type
 15244 ;;  p               1    0[COMMON] PTR void 
 15245 ;;		 -> NULL(0), 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;		None
 15248 ;; Return value:  Size  Location     Type
 15249 ;;                  1    wreg      enum E6966
 15250 ;; Registers used:
 15251 ;;		wreg
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        1 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; This function calls:
 15264 ;;		Nothing
 15265 ;; This function is called by:
 15266 ;;		_i2c_open
 15267 ;;		_setCallBack
 15268 ;;		_do_I2C_DO_ADDRESS_NACK
 15269 ;;		_do_I2C_TX
 15270 ;;		_do_I2C_RX
 15271 ;;		_do_I2C_TX_EMPTY
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function _returnStop
 15277  0833                     _returnStop:	
 15278                           
 15279                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 15280                           
 15281                           ;incstack = 0
 15282                           ; Regs used in _returnStop: [wreg]
 15283  0833  3001               	movlw	1
 15284  0834  0008               	return
 15285  0835                     __end_of_returnStop:	
 15286                           
 15287                           	psect	text95
 15288  0838                     __ptext95:	
 15289 ;; *************** function i1_i2c1_driver_stop *****************
 15290 ;; Defined at:
 15291 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;		None
 15294 ;; Auto vars:     Size  Location     Type
 15295 ;;		None
 15296 ;; Return value:  Size  Location     Type
 15297 ;;                  1    wreg      void 
 15298 ;; Registers used:
 15299 ;;		None
 15300 ;; Tracked objects:
 15301 ;;		On entry : 0/0
 15302 ;;		On exit  : 0/0
 15303 ;;		Unchanged: 0/0
 15304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;Total ram usage:        0 bytes
 15310 ;; Hardware stack levels used:    1
 15311 ;; This function calls:
 15312 ;;		Nothing
 15313 ;; This function is called by:
 15314 ;;		_do_I2C_SEND_STOP
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           
 15319                           ;psect for function i1_i2c1_driver_stop
 15320  0838                     i1_i2c1_driver_stop:	
 15321                           
 15322                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 15323                           
 15324                           ;incstack = 0
 15325                           ; Regs used in i1_i2c1_driver_stop: []
 15326  0838  0024               	movlb	4	; select bank4
 15327  0839  1516               	bsf	22,2	;volatile
 15328  083A  0008               	return
 15329  083B                     __end_ofi1_i2c1_driver_stop:	
 15330                           
 15331                           	psect	text96
 15332  0835                     __ptext96:	
 15333 ;; *************** function i1_i2c1_driver_restart *****************
 15334 ;; Defined at:
 15335 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 15336 ;; Parameters:    Size  Location     Type
 15337 ;;		None
 15338 ;; Auto vars:     Size  Location     Type
 15339 ;;		None
 15340 ;; Return value:  Size  Location     Type
 15341 ;;                  1    wreg      void 
 15342 ;; Registers used:
 15343 ;;		None
 15344 ;; Tracked objects:
 15345 ;;		On entry : 0/0
 15346 ;;		On exit  : 0/0
 15347 ;;		Unchanged: 0/0
 15348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15353 ;;Total ram usage:        0 bytes
 15354 ;; Hardware stack levels used:    1
 15355 ;; This function calls:
 15356 ;;		Nothing
 15357 ;; This function is called by:
 15358 ;;		_do_I2C_SEND_RESTART_READ
 15359 ;;		_do_I2C_SEND_RESTART_WRITE
 15360 ;;		_do_I2C_SEND_RESTART
 15361 ;; This function uses a non-reentrant model
 15362 ;;
 15363                           
 15364                           
 15365                           ;psect for function i1_i2c1_driver_restart
 15366  0835                     i1_i2c1_driver_restart:	
 15367                           
 15368                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 15369                           
 15370                           ;incstack = 0
 15371                           ; Regs used in i1_i2c1_driver_restart: []
 15372  0835  0024               	movlb	4	; select bank4
 15373  0836  1496               	bsf	22,1	;volatile
 15374  0837  0008               	return
 15375  0838                     __end_ofi1_i2c1_driver_restart:	
 15376                           
 15377                           	psect	text97
 15378  0868                     __ptext97:	
 15379 ;; *************** function _i2c1_driver_sendACK *****************
 15380 ;; Defined at:
 15381 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 15382 ;; Parameters:    Size  Location     Type
 15383 ;;		None
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;		None
 15386 ;; Return value:  Size  Location     Type
 15387 ;;                  1    wreg      void 
 15388 ;; Registers used:
 15389 ;;		None
 15390 ;; Tracked objects:
 15391 ;;		On entry : 0/0
 15392 ;;		On exit  : 0/0
 15393 ;;		Unchanged: 0/0
 15394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;Total ram usage:        0 bytes
 15400 ;; Hardware stack levels used:    1
 15401 ;; This function calls:
 15402 ;;		Nothing
 15403 ;; This function is called by:
 15404 ;;		_do_I2C_DO_ACK
 15405 ;;		_do_I2C_RX
 15406 ;;		_I2C_Send_ACK
 15407 ;; This function uses a non-reentrant model
 15408 ;;
 15409                           
 15410                           
 15411                           ;psect for function _i2c1_driver_sendACK
 15412  0868                     _i2c1_driver_sendACK:	
 15413                           
 15414                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 15415                           
 15416                           ;incstack = 0
 15417                           ; Regs used in _i2c1_driver_sendACK: []
 15418  0868  0024               	movlb	4	; select bank4
 15419  0869  1296               	bcf	22,5	;volatile
 15420                           
 15421                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 15422  086A  1616               	bsf	22,4	;volatile
 15423  086B  0008               	return
 15424  086C                     __end_of_i2c1_driver_sendACK:	
 15425                           
 15426                           	psect	text98
 15427  0831                     __ptext98:	
 15428 ;; *************** function _PIN_MANAGER_IOC *****************
 15429 ;; Defined at:
 15430 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;		None
 15433 ;; Auto vars:     Size  Location     Type
 15434 ;;		None
 15435 ;; Return value:  Size  Location     Type
 15436 ;;                  1    wreg      void 
 15437 ;; Registers used:
 15438 ;;		None
 15439 ;; Tracked objects:
 15440 ;;		On entry : 0/0
 15441 ;;		On exit  : 0/0
 15442 ;;		Unchanged: 0/0
 15443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;Total ram usage:        0 bytes
 15449 ;; Hardware stack levels used:    1
 15450 ;; This function calls:
 15451 ;;		Nothing
 15452 ;; This function is called by:
 15453 ;;		_INTERRUPT_InterruptManager
 15454 ;; This function uses a non-reentrant model
 15455 ;;
 15456                           
 15457                           
 15458                           ;psect for function _PIN_MANAGER_IOC
 15459  0831                     _PIN_MANAGER_IOC:	
 15460                           
 15461                           ;incstack = 0
 15462                           ; Regs used in _PIN_MANAGER_IOC: []
 15463  0831  0008               	return
 15464  0832                     __end_of_PIN_MANAGER_IOC:	
 15465  007E                     btemp	set	126	;btemp
 15466  007E                     int$flags	set	126
 15467  007E                     wtemp0	set	126


Data Sizes:
    Strings     70
    Constant    32
    Data        9
    BSS         127
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      79
    BANK1            80     66      70
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2413	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[5]), STR_7(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[5]), STR_7(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[5]), STR_7(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _On_Off->_ADC_GetConversion
    _Get_ADC->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   90165
                                             64 BANK1      2     2      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                             _On_Off
                         _PIR_Sensor
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    9292
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _On_Off                                               5     5      0      96
                                              4 BANK0      5     5      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1662
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2    1256
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
   _On_Off
     _ADC_GetConversion
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 15 16:53:21 2019

                          returnReset@p 0076                   ?_setGestureExitThresh 0076  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                                    _on 005C                     _do_I2C_SEND_RESTART 0878  
                  __size_of_do_I2C_RCEN 0006                     ___wmul@multiplicand 0022  
                           __CFG_LVP$ON 0000                                     l532 0951  
                                   l623 0A89        processGestureData@ud_ratio_first 0031  
                                   l772 0D7C                                     _PR2 001E  
                          __CFG_CPD$OFF 0000                   __end_of_decodeGesture 04C5  
                  __size_of_I2C_ReStart 0003                 __size_of_PMD_Initialize 0008  
                    I2C_Write_Byte@Byte 0023                         _TMR2_Initialize 0901  
                 __size_of_do_I2C_RESET 0007                                     wreg 0009  
                    i1_i2c1_driver_stop 0838                                    l1130 03F5  
                                  l1122 03C1                                    l1050 0085  
                                  l1221 0A49                                    l1142 0448  
                                  l1134 0412                                    l1118 03A4  
                                  l1073 0240                                    l1154 0497  
                                  l1146 0465                                    l1092 02DF  
                                  l1085 02C0                                    l1077 0269  
                                  l1158 04B4                                    l1079 028F  
                                  l1096 0308                                    l1097 0320  
                                  l1385 0A65                                    l6003 0140  
                                  l6021 01F3                                    l6031 0218  
                                  l6023 01F6                                    l6201 0492  
                                  l6121 0359                                    l6041 023B  
                                  l6033 021B                                    l6017 01E1  
                                  l7001 0F6F                                    l6211 04C1  
                                  l6131 036B                                    l6115 034D  
                                  l6027 0206                                    l6205 04AF  
                                  l6133 036D                                    l6125 0361  
                                  l6109 0341                                    l7005 0F7C  
                                  l6151 03BC                                    l6127 0363  
                                  l6215 04C3                                    l6119 0357  
                                  l6055 0282                                    l6047 0264  
                                  l7007 0F99                                    l7111 0DB5  
                                  l6137 0377                                    l6081 02DA  
                                  l6147 039F                                    l6139 037D  
                                  l6059 028A                                    l6165 03F0  
                                  l6157 03CE                                    l6069 02B4  
                                  l6077 02C2                                    l6327 0A8E  
                                  l6183 0443                                    l6175 041F  
                                  l6087 0303                                    l6511 098D  
                                  l6345 0D5F                                    l6193 0472  
                                  l6169 040D                                    l6353 06DE  
                                  l6521 09A0                                    l5731 0A4C  
                                  l6611 0CA3                                    l6187 0460  
                                  l5811 0EFB                                    l6371 06F5  
                                  l6363 06E2                                    l6451 09C6  
                                  l6357 0793                                    l6461 09B3  
                                  l5903 0EE0                                    l6391 0726  
                                  l6471 0B89                                    l6711 04DA  
                                  l5737 0927                                    l5905 0EE1  
                                  l5817 0F06                                    l6393 0787  
                                  l7249 0F85                                    l5843 0F3D  
                                  l5835 0F2C                                    l5827 0F0E  
                                  l6379 0718                                    l6539 0CD5  
                                  l6491 0B62                                    l6475 0B8B  
                                  l6707 04D8                                    l7099 0D95  
                                  l5765 0956                                    l6629 0B23  
                                  l5829 0F1A                                    l6397 0790  
                                  l6557 0D07                                    l6639 0947  
                                  l5839 0F35                                    l5791 0A5F  
                                  l6575 0B4A                                    l6495 0B64  
                                  l5873 09E2                                    l6593 0C40  
                                  l5953 0076                                    l5937 0E18  
                                  l5875 09EE                                    l5883 0EAD  
                                  l6843 0FB4                                    l5859 097A  
                                  l5971 00DB                                    l5939 0E47  
                                  l6933 0610                                    l6693 08C9  
                                  l5949 0074                                    l6919 07FC  
                                  l5895 0EC7                                    l5887 0EAF  
                                  l6839 0FB2                                    l6945 064A  
                                  l5897 0ED4                                    l6857 0FB0  
                                  l5985 00F6                                    l5969 0081  
                                  l6939 062D                                    l6965 0694  
                                  l6957 066E                                    l6959 0677  
                                  l5999 00F2                                    l6991 0F56  
                                  l6983 0F43                                    l6977 06C0  
                                  l6993 0F64                                    l6979 06CC  
                                  STR_1 103D                                    STR_2 1030  
                                  STR_3 1020                                    STR_4 1049  
                                  STR_5 1060                                    STR_6 1054  
                                  STR_7 1063                                    STR_8 105B  
               __end_of_PWM1_Initialize 093B                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u5005 0210                                    u5115 0299  
                                  u5035 022C                                    u5205 0311  
                                  u5125 02A7                                    u5045 0249  
                                  u5055 0255                                    u5065 0272  
                                  u5235 0329                                    _PMD0 0911  
                                  _PMD1 0912                                    _PMD2 0913  
                                  u5415 03E1                                    u5175 02CB  
                                  _PMD3 0914                                    _PMD4 0915  
                                  u6305 061A                                    u5425 03FE  
                                  u4625 0F11                                    u5185 02E8  
                                  _PMD5 0916                                    u6315 0626  
                                  u6235 07CC                                    u5515 0483  
                                  u5435 041C                                    u5195 02F4  
                                  u6405 06AA                                    u6325 0637  
                                  u6245 07E4                                    u5525 04A0  
                                  u5365 0390                                    u4645 0F1B  
                                  u4565 0A66                                    u6415 06BB  
                                  u6335 0643                                    u6255 07F0  
                                  u5535 04BE                                    u5375 03AD  
                                  u4655 0F25                                    u4575 0A6B  
                                  u4744 0EC0                                    u6345 0654  
                                  u4745 0EBF                                    u5465 0434  
                                  u5385 03CB                                    u4665 0F2D  
                                  u6425 0F51                                    u4754 0ECC  
                                  u6355 0660                                    u6275 05E5  
                                  u4755 0ECB                                    u5475 0451  
                                  u5635 0721                                    u5565 0D69  
                                  u6285 05FD                                    u5485 046F  
                                  u5645 0730                                    u6607 09D7  
                                  u6375 0681                                    u6295 0609  
                                  u6385 068D                                    u5825 0C84  
                                  u5665 0BAB                                    u6395 069E  
                                  u4875 0090                                    u4795 0E21  
                                  u5675 0BD4                                    u5765 0CB6  
                  ?_do_I2C_SEND_RESTART 0076                                    u4975 01DA  
                                  u6567 0797                                    u4985 01EB  
                                  u6577 07AA                                    u5785 0CE8  
                                  u6587 0D47                                    u4995 01FF  
                                  u6597 0960                                    _TMR2 001D  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000       __size_of_do_I2C_SEND_RESTART_READ 0004  
                   ?i1_i2c1_driver_stop 0076               ?_do_I2C_SEND_RESTART_READ 0076  
                                  _main 0D80                                    _name 005E  
             __size_of_do_I2C_SEND_STOP 0004                  __size_of_do_I2C_DO_ACK 0004  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                   ??_setGestureIntEnable 002A  
                      __end_of_I2C_Stop 0868                           __CFG_BOREN$ON 0000  
               i1_i2c1_driver_getRXData 083E                   ?_do_I2C_SEND_ADR_READ 0076  
                         __CFG_BORV$LOW 0000         ??_i2c1_driver_clearBusCollision 0076  
                                  start 002B                         __end_of_Get_ADC 06CF  
                   I2C_Write_Byte@count 0024                           __CFG_CSWEN$ON 0000  
                         __CFG_MCLRE$ON 0000                         __end_of_i2c_ISR 0AFE  
              ??_do_I2C_DO_NACK_RESTART 0076                            ?_readGesture 004F  
                          _do_I2C_RESET 08B6          __size_of_OSCILLATOR_Initialize 0008  
         __end_of_OSCILLATOR_Initialize 08F9                    ??i1_i2c1_driver_stop 0076  
                                 _ADACT 009F                __end_of_i2c1_driver_open 0924  
                                 ?_main 0076                         __end_of___awdiv 0F42  
              __end_of_i2c1_driver_stop 0865                         ___awdiv@divisor 0026  
                                 _T2CON 001F              __end_of_i2c1_driver_TXData 08AA  
                        __CFG_DEBUG$OFF 0000                                   i1l157 0E85  
                                 i1l173 0DDC                                   i1l253 0029  
                                 i1l245 0010                                   i1l248 001E  
                          ?_setLEDBoost 0076                         ___awdiv@counter 002B  
                          ?_setLEDDrive 0076                          _setGestureGain 0CA5  
                                 _OSCEN 091D                      wireReadDataBlock@j 0030  
                        _setGestureMode 0AFE                                   _TRISA 008C  
                                 _TRISB 008D                                   _TRISC 008E  
           __end_of_setProxIntLowThresh 09C8                         __end_of_getMode 091A  
                           ?_PIR_Sensor 0076                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 0832              __end_of_i2c1_driver_isNACK 08E1  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 088C  
                                 _names 0160                        _b_i2c_error_flag 0074  
          __end_of_setProxIntHighThresh 09B5              ?_do_I2C_SEND_RESTART_WRITE 0076  
                                 _start 006E                   ??_do_I2C_SEND_RESTART 0076  
                       __end_of_setMode 0EF0                       __end_of_I2C_Start 0862  
                                 pclath 000A                 __size_of_mssp1_clearIRQ 0003  
                  i1_i2c1_driver_TXData 0894            __size_of_setAmbientLightGain 001E  
                ?_do_I2C_SEND_ADR_WRITE 0076                  __size_of_I2C_Send_NACK 0003  
                                 status 0003                                   wtemp0 007E  
                    __size_of_SPI_Write 0015                ?_setLightIntLowThreshold 002A  
            __end_of_setGestureLEDDrive 0D09                   setGestureWaitTime@val 002C  
                         _fsmStateTable 1000                           _gesture_data_ 0220  
                       __initialization 002D                  ??_setGestureExitThresh 002A  
                     _SPI2_Exchange8bit 0949              processGestureData@lr_delta 004B  
                            _i2c_status 01A0                            __end_of_main 0DC2  
                     _handleGestureFlag 0075              processGestureData@ud_delta 0049  
                    ?_SPI2_Exchange8bit 0076                 __end_of_TMR2_Initialize 0909  
           ?_INTERRUPT_InterruptManager 0076                  __end_of_setGestureGain 0CD7  
             __size_of_setProximityGain 0029                  __end_of_setGestureMode 0B25  
                         _do_I2C_DO_ACK 0880                                  ??_main 005C  
         __size_of_i2c1_driver_sendNACK 0004                __size_of_SPI2_Initialize 0007  
                   ??_SPI2_Exchange8bit 0020       __size_of_setLightIntHighThreshold 0027  
         __size_of_i2c1_driver_resetBus 0001                  __end_of_WDT_Initialize 0890  
               ?_do_I2C_DO_ADDRESS_NACK 0076               ?_setLightIntHighThreshold 002A  
     setLightIntHighThreshold@threshold 002A                    __end_of_Display_Name 0D80  
                  __size_of_enablePower 000E                                  _ADCON0 009D  
                                _ADCON1 009E                                  _ADRESH 009C  
                                _ADRESL 009B                                  _CCPR1H 0292  
                                _CCPR1L 0291                        ___awdiv@dividend 0028  
                    _processGestureData 0066                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                    __CFG_RSTOSC$HFINT1 0000            setProxIntLowThresh@threshold 002B  
                 ?i1_i2c1_driver_TXData 0076                                  _RC2PPS 0EA2  
                                _RB5PPS 0E9D                                  _RB6PPS 0E9E  
                      ?_PWM1_Initialize 0076                                  _RB7PPS 0E9F  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _RC6PPS 0EA6                                  _ODCONC 028E  
                                i1l5031 0AE8                                  i1l4511 0E5E  
                                i1l4503 0E58                                  i1l4507 0E5B  
                                i1l4525 0E9F                                  i1l4517 0E61  
                                i1l4551 0DE1                                  i1l4481 0BF3  
                                i1l4571 0C48                                  i1l4491 0BF9  
                                i1l4547 0DDE                                  i1l4485 0BF6  
                                i1l4557 0DE4                                  i1l4567 0C45  
                                i1l4583 0C4F                                  i1l4577 0C4C  
                                i1l7251 0DF9                                  i1l7253 0E77  
             ??i1_i2c1_driver_getRXData 0076                                  i1l7255 0C0E  
                                i1l7257 0C64                               ??_Get_ADC 002C  
                      _wireReadDataByte 0AB4                                  _OSCFRQ 091F  
               ?_resetGestureParameters 0076                  ??_do_I2C_SEND_ADR_READ 0076  
                                _WDTCON 0097                               ??_i2c_ISR 0079  
                   ?_processGestureData 0076                       _gesture_lr_delta_ 0068  
                        __CFG_PWRTE$OFF 0000           setProxIntHighThresh@threshold 002B  
             __end_of_SPI2_Exchange8bit 0958                                  _On_Off 07C2  
                     _gesture_lr_count_ 0064                     wireReadDataByte@reg 0027  
                 _i2c1_driver_getRXData 0853                     wireReadDataByte@val 0028  
                     _gesture_ud_delta_ 006A             __end_of_do_I2C_DO_NACK_STOP 0888  
                         _I2C_Read_Byte 0924              __end_of_isGestureAvailable 097C  
                     _gesture_ud_count_ 0066                     __size_of_PIR_Sensor 0007  
                                ___wmul 0A5C                               ??___awdiv 002A  
 __end_of_i2c1_driver_clearBusCollision 084A  __size_of_i2c1_driver_clearBusCollision 0003  
         _i2c1_driver_clearBusCollision 0847              __end_of_setGestureWaitTime 0B4C  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0004  
                      ___awdiv@quotient 002D                          ?_do_I2C_DO_ACK 0076  
                       ?_setGestureGain 0076                           _I2C_Send_NACK 0859  
                             ??_getMode 0029                         ?_setGestureMode 0076  
                                _strlen 09DD                 ??_setGestureEnterThresh 002A  
                  ??_processGestureData 002F                       __end_of_SPI_Write 09DD  
           __end_of_i2c1_driver_sendACK 086C                          _PMD_Initialize 08F9  
        __end_of_do_I2C_DO_ADDRESS_NACK 0C17                               ?_I2C_Stop 0076  
                    Display_Name@length 0028                               ??_setMode 002C  
                       ?_WDT_Initialize 0076             __end_of_i2c1_driver_restart 0850  
                          ?_returnReset 0076                ADC_GetConversion@channel 0023  
                     readGesture@motion 0053             __end_of_i2c1_driver_startRX 0859  
                      ?_PIN_MANAGER_IOC 0076          __end_of_resetGestureParameters 0A25  
                     _SYSTEM_Initialize 09F5                 __end_of__initialization 0062  
                      _do_I2C_SEND_STOP 087C                      __size_of_do_I2C_RX 0046  
                    __size_of_do_I2C_TX 004F                      ?_SYSTEM_Initialize 0076  
                setGestureWaitTime@time 002B                __size_of_do_I2C_TX_EMPTY 0031  
                            _adcResult2 00E0                          ?_I2C_Read_Byte 0076  
                        __pcstackCOMMON 0076                            __pidataBANK0 07FF  
                          __pidataBANK2 0909                     ??_SYSTEM_Initialize 0020  
                 i1i2c1_driver_TXData@d 0076                    _setProxIntHighThresh 09A2  
                        _gesture_state_ 0060                          ?_I2C_Send_NACK 0076  
                      ?_TMR2_Initialize 0076                   i1_i2c1_driver_restart 0835  
                __end_of_PMD_Initialize 0901                   i1_i2c1_driver_startRX 083B  
                  __size_of_readGesture 00F3                   __end_of_handleGesture 0F9C  
     __size_of_i2c1_driver_isBufferFull 0007                              ??_I2C_Stop 0020  
             ?_i2c1_driver_isBufferFull 0076                      _gesture_far_count_ 00E2  
                  __size_of_setLEDBoost 0032                    __size_of_setLEDDrive 0029  
                _do_I2C_DO_NACK_RESTART 0888                  ??i1_i2c1_driver_TXData 0076  
             __end_of_SYSTEM_Initialize 0A0D                       ??_SPI2_Initialize 0020  
                        _mssp1_clearIRQ 0844                              __pbssBANK0 005C  
                            __pbssBANK1 00E0                              __pbssBANK2 0168  
                            __pbssBANK3 01A0                              __pbssBANK4 0220  
                  wireWriteDataByte@reg 0029                    wireWriteDataByte@val 0026  
                   getMode@enable_value 002A                ??i1_i2c1_driver_sendNACK 0076  
                ?_i2c1_driver_getRXData 0076              __size_of_SPI2_Exchange8bit 000F  
                               ?_On_Off 0076            __size_of_i2c_busCollisionISR 0003  
                            __pmaintext 0D80                   __end_of_Display_Clear 0969  
                         ??_do_I2C_IDLE 0076                           ??_do_I2C_RCEN 0076  
               setGestureLEDDrive@drive 002D                                 ?___wmul 0020  
                       __CFG_PPS1WAY$ON 0000                         ??_do_I2C_DO_ACK 0076  
          __size_of_enableGestureSensor 0064                              __pintentry 0004  
                 ?_setProxIntHighThresh 0076                                 _CCP1CON 0293  
               __size_of_I2C_Write_Byte 001C                           ??_I2C_ReStart 0020  
                      _setProximityGain 0BC3                             setMode@mode 002F  
                       ?_PMD_Initialize 0076                     _setAmbientLightGain 0A96  
               __size_of_ADC_Initialize 0008                   __size_of_Display_Name 0041  
        ?_i2c1_driver_clearBusCollision 0076                                 ?_strlen 0020  
                     ?_i2c1_driver_open 0076                       __end_of_do_I2C_RX 0E08  
                     __end_of_do_I2C_TX 0EA1                       ?_i2c1_driver_stop 0076  
                     _wireReadDataBlock 0E08                      ??_i2c1_driver_open 0020  
                    ??_i2c1_driver_stop 0020                                 _OSCCON1 0919  
                               _OSCCON3 091B                           ?_mssp1_setIRQ 0076  
                          ??_PIR_Sensor 0020                                 _OSCTUNE 091E  
                  wireReadDataBlock@len 0028                    wireReadDataBlock@reg 002F  
                  wireReadDataBlock@val 0026                                 _SSP1ADD 0212  
                               _SSP2ADD 021A                                 _SLRCONA 030C  
                               _SLRCONB 030D                                 _SLRCONC 030E  
                               _SSP1BUF 0211                  __end_of_mssp1_clearIRQ 0847  
                               _SSP2BUF 0219                      ?_wireReadDataBlock 0026  
                               _SSP1MSK 0213                       SPI_Write@incoming 0022  
           __end_of_setGestureIntEnable 0C42                 ??_do_I2C_SEND_ADR_WRITE 0076  
       processGestureData@lr_ratio_last 0037             ??_do_I2C_SEND_RESTART_WRITE 0076  
                          readGesture@i 0059                                 _Get_ADC 05DB  
                    _i2c1_driver_TXData 08A4                    ?_setAmbientLightGain 0076  
                    _i2c1_driver_i2cISR 0070                     ??_wireReadDataBlock 002A  
                               _i2c_ISR 0AD8                               _I2C_Start 085F  
                       ??_I2C_Read_Byte 0021                           setMode@enable 002B  
                    _i2c1_driver_isNACK 08D9                  __size_of_decodeGesture 0190  
                       __size_of_On_Off 003D                     ?_i2c1_driver_TXData 0076  
                          _Display_Name 0D3F                         ??_I2C_Send_NACK 0020  
                               ___awdiv 0EF0                         __size_of___wmul 001C  
                    __end_of_PIR_Sensor 08CB                  ?i1_i2c1_driver_restart 0076  
                     ??_do_I2C_TX_EMPTY 0076                     ?_i2c1_driver_isNACK 0076  
                ?i1_i2c1_driver_startRX 0076                __end_of_wireReadDataByte 0AD8  
                            _initialize 04C5                                 _getMode 0911  
      __size_of_setLightIntLowThreshold 0027                      _setGestureLEDDrive 0CD7  
                               __ptext1 04C5                                 __ptext2 0BC3  
                               __ptext3 09B5                                 __ptext4 09A2  
                               __ptext5 0B73                                 __ptext6 0B4C  
                               __ptext7 0B9A                                 __ptext8 0B25  
                               __ptext9 0CD7             __size_ofi1_i2c1_driver_stop 0003  
                   __end_of_do_I2C_IDLE 089E               __end_of_wireReadDataBlock 0E52  
                   __end_of_do_I2C_RCEN 08A4                         __size_of_strlen 0018  
                 _OSCILLATOR_Initialize 08F1                               _T2CONbits 001F  
           __end_of_do_I2C_SEND_RESTART 087C                          ??_mssp1_setIRQ 0076  
                  ??_i2c1_driver_TXData 0020                                 _setMode 0EA1  
              ??_PIN_MANAGER_Initialize 0020                     __end_of_I2C_ReStart 0853  
                   ?_setGestureLEDDrive 0076                                 _printed 006D  
                       ?_mssp1_clearIRQ 0076                _do_I2C_SEND_RESTART_READ 0870  
            __size_of_SYSTEM_Initialize 0018                                 clrloop0 08AB  
                  __size_of_returnReset 0002                    end_of_initialization 0062  
                  ??_i2c1_driver_isNACK 0076                   ??_setAmbientLightGain 002A  
          __size_of_setProxIntLowThresh 0013                                 init_ram 08B0  
          __end_of_i2c1_driver_sendNACK 0894                                 initloop 08B1  
       __size_ofi1_i2c1_driver_sendNACK 0004                              ?_I2C_Start 0076  
         enableGestureSensor@interrupts 0031            __end_of_i2c1_driver_resetBus 0833  
         setGestureExitThresh@threshold 002B                    ??_setGestureLEDDrive 002A  
                    readGesture@gstatus 0055                            initialize@id 0031  
                      ??_setGestureGain 002A                  ??_setProxIntHighThresh 002A  
                      ??_setGestureMode 002A               _do_I2C_SEND_RESTART_WRITE 0874  
                   Display_Name@string1 0025           __size_of_setGestureExitThresh 0013  
                               strlen@a 0023                                 strlen@s 0020  
                      ??_WDT_Initialize 0020                       _wireWriteDataByte 0A25  
                            _returnStop 0833                               _PORTCbits 000E  
              __end_of_do_I2C_SEND_STOP 0880                           ??_enablePower 0030  
                    ?_wireWriteDataByte 0026         setLightIntHighThreshold@val_low 002D  
        __size_of_setGestureEnterThresh 0013           __end_of_setGestureEnterThresh 098F  
                         _decodeGesture 0335                      _isGestureAvailable 0969  
                    _setGestureWaitTime 0B25                               _SPI_Write 09C8  
                     __size_of_I2C_Stop 0003                             returnStop@p 0076  
                   ??_wireWriteDataByte 0029                        __CFG_FEXTOSC$OFF 0000  
       processGestureData@ud_ratio_last 0035                     ?_isGestureAvailable 0076  
                   ?_setGestureWaitTime 0076                             _CCP1CONbits 0293  
                             On_Off@val 0027                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
              __size_of_PWM1_Initialize 000C                          __end_of_On_Off 07FF  
      __end_of_i2c1_driver_isBufferFull 08D9                             _do_I2C_IDLE 0899  
                           _do_I2C_RCEN 089E               __end_of_wireWriteDataByte 0A40  
                        _I2C_Write_Byte 0A40                    ??_isGestureAvailable 0029  
                        __end_of___wmul 0A78                    ??_setGestureWaitTime 002A  
                           ?_initialize 0076                             _I2C_ReStart 0850  
                        _ADC_Initialize 08E9                  i1_i2c1_driver_sendNACK 086C  
                ?_OSCILLATOR_Initialize 0076                _setLightIntHighThreshold 0B4C  
            __size_of_wireReadDataBlock 004A                         _gesture_motion_ 0168  
                       _SPI2_Initialize 08CB            __size_of_do_I2C_DO_NACK_STOP 0004  
           __size_of_processGestureData 02CF                          ?_decodeGesture 0076  
                        __end_of_strlen 09F5                 ?_do_I2C_DO_NACK_RESTART 0076  
                   start_initialization 002D                      setGestureGain@gain 002D  
                   _i2c_busCollisionISR 084A         __size_of_PIN_MANAGER_Initialize 0036  
              ?i1_i2c1_driver_getRXData 0076                              ?_SPI_Write 0076  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 0F9C  
                   __end_of_enablePower 0949            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 0BEC  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1530 003D                 _processGestureData$1531 003F  
               _processGestureData$1528 0039                 _processGestureData$1529 003B  
                              ??_On_Off 0024                    ?_i2c_busCollisionISR 0076  
                      __CFG_LPBOREN$OFF 0000                    __end_of_mssp1_setIRQ 0844  
                __end_of_I2C_Write_Byte 0A5C                        ??_PMD_Initialize 0020  
       setLightIntLowThreshold@val_high 002E                                ??___wmul 0024  
                  ?_enableGestureSensor 0076                             _CCPTMRSbits 029F  
                         ??_readGesture 0051                  __end_of_ADC_Initialize 08F1  
                         ?_do_I2C_RESET 0076                             __pdataBANK0 006E  
                           __pdataBANK2 0160                      setGestureMode@mode 002B  
               _setLightIntLowThreshold 0B73               setGestureIntEnable@enable 002C  
              setAmbientLightGain@drive 002B                             ?_returnStop 0076  
                              ??_strlen 0022          __end_of_do_I2C_DO_NACK_RESTART 088C  
                         ??_setLEDBoost 002A                           ??_setLEDDrive 002A  
                  _i2c1_driver_sendNACK 0890                  setGestureIntEnable@val 002B  
                           __pbssCOMMON 0070                               ___latbits 0002  
                             _adcResult 006C                    _i2c1_driver_resetBus 0832  
                         __pcstackBANK0 0020                           __pcstackBANK1 00A0  
                         __pcstackBANK2 0120                __size_of_TMR2_Initialize 0008  
                             _do_I2C_RX 0DC2                               _do_I2C_TX 0E52  
        __size_of_do_I2C_SEND_ADR_WRITE 0007           __size_ofi1_i2c1_driver_TXData 0005  
         __end_of_do_I2C_SEND_ADR_WRITE 08C4                                ?_Get_ADC 0076  
                 readGesture@fifo_data2 00A0               __size_of_i2c1_driver_open 000A  
                 readGesture@fifo_level 0058               __size_of_i2c1_driver_stop 0003  
                              ?_i2c_ISR 0076                     __size_of_initialize 0116  
                       _do_I2C_TX_EMPTY 0C42                  __size_of_handleGesture 005A  
                 ??_i2c_busCollisionISR 0076                   __end_of_fsmStateTable 1020  
                _PIN_MANAGER_Initialize 0D09                 ??i1_i2c1_driver_restart 0076  
               ??i1_i2c1_driver_startRX 0076                         ?_I2C_Write_Byte 0076  
                 ??_enableGestureSensor 0030                 __end_of_SPI2_Initialize 08D2  
                        ??_do_I2C_RESET 0076                                ?___awdiv 0026  
            __size_of_wireWriteDataByte 001B                ??_do_I2C_DO_ADDRESS_NACK 0076  
                       ?_ADC_Initialize 0076             _i2c1_driver_busCollisionISR 0072  
                   _setProxIntLowThresh 09B5                   __end_of_do_I2C_DO_ACK 0884  
                     ??_PWM1_Initialize 0020            ??_INTERRUPT_InterruptManager 007C  
              _i2c1_driver_isBufferFull 08D2                                ?_getMode 0076  
                       ??_decodeGesture 0020                       ?_wireReadDataByte 0076  
            ??_do_I2C_SEND_RESTART_READ 0076                   ?_i2c1_driver_sendNACK 0076  
       __end_ofi1_i2c1_driver_getRXData 0841                        ??_mssp1_clearIRQ 0076  
                           _enablePower 093B                      ??_wireReadDataByte 0026  
                   __end_of_readGesture 07C2                   ?_i2c1_driver_resetBus 0076  
    __size_of_do_I2C_SEND_RESTART_WRITE 0004                                _I2C_Stop 0865  
              ??_resetGestureParameters 0020                                ?_setMode 002B  
                            ?_do_I2C_RX 0076                              ?_do_I2C_TX 0076  
                      __CFG_WDTE$SWDTEN 0000                             ??_SPI_Write 0021  
                     _i2c1_driver_start 085C                  __size_of_Display_Clear 0011  
                   __end_of_setLEDBoost 0CA5                     __end_of_setLEDDrive 0BC3  
                  ?_setProxIntLowThresh 0076                   readGesture@bytes_read 0056  
                    ?_i2c1_driver_start 0076                          ___wmul@product 0024  
                              _LATCbits 010E                     __size_of_returnStop 0002  
                             clear_ram0 08AA                                _PIE0bits 0090  
                              _PIE1bits 0091            __size_of_setGestureIntEnable 002B  
                   _gesture_near_count_ 0062                     ??_i2c1_driver_start 0020  
   __size_of_INTERRUPT_InterruptManager 0027                                _PIR0bits 0010  
                              _PIR1bits 0011                   __end_of_I2C_Read_Byte 092F  
             ??_setLightIntLowThreshold 002C                                _SSP1CON1 0215  
                              _SSP1CON2 0216                                _SSP2CON1 021D  
                        setLEDBoost@val 002C                                _SSP1STAT 0214  
                              _SSP2STAT 021C              __end_ofi1_i2c1_driver_stop 083B  
                     ??_PIN_MANAGER_IOC 0076                   __end_of_I2C_Send_NACK 085C  
                        setLEDDrive@val 002C        processGestureData@lr_ratio_first 0033  
                            _ADCON0bits 009D                       ___wmul@multiplier 0020  
                     ?_do_I2C_SEND_STOP 0076               processGestureData@d_first 0046  
                         _handleGesture 0F42               __end_of_i2c1_driver_start 085F  
                         ??_returnReset 0077                      ??_do_I2C_SEND_STOP 0076  
           __size_of_i2c1_driver_TXData 0006             __end_of_setAmbientLightGain 0AB4  
             processGestureData@l_first 0047       __end_of_do_I2C_SEND_RESTART_WRITE 0878  
               __end_of_do_I2C_TX_EMPTY 0C73            __end_of_setGestureExitThresh 09A2  
             processGestureData@r_first 0048               processGestureData@u_first 0045  
                 ??_setProxIntLowThresh 002A            __size_of_do_I2C_SEND_RESTART 0004  
           __size_of_i2c1_driver_isNACK 0008                       setGestureGain@val 002C  
                 __size_of_mssp1_setIRQ 0003                       ??_TMR2_Initialize 0020  
                      __size_of_Get_ADC 00F4                     _do_I2C_DO_NACK_STOP 0884  
                      __size_of_i2c_ISR 0026              ??_setLightIntHighThreshold 002C  
                     _ADC_GetConversion 0A78             __size_of_setGestureLEDDrive 0032  
                        setMode@reg_val 002E          setLightIntLowThreshold@val_low 002D  
                          ?_do_I2C_IDLE 0076                           _Display_Clear 0958  
                          ?_do_I2C_RCEN 0076                       setGestureMode@val 002C  
                      ?_SPI2_Initialize 0076                 ?i1_i2c1_driver_sendNACK 0076  
               ??_OSCILLATOR_Initialize 0020                      ?_ADC_GetConversion 0020  
                   _i2c1_driver_sendACK 0868                        __size_of___awdiv 0052  
         __size_of_setProxIntHighThresh 0013                             _readGesture 06CF  
       __size_of_do_I2C_DO_ADDRESS_NACK 002B                     i2c1_driver_TXData@d 0020  
                ??_i2c1_driver_sendNACK 0020                            ??_initialize 0030  
                          ?_I2C_ReStart 0076                     _i2c1_driver_restart 084D  
      setLightIntLowThreshold@threshold 002A                    ?_do_I2C_DO_NACK_STOP 0076  
                   _i2c1_driver_startRX 0856                          ?_handleGesture 0076  
          __end_of_do_I2C_SEND_ADR_READ 08E9                        __size_of_getMode 0009  
                ??_i2c1_driver_resetBus 0076                    readGesture@fifo_data 0120  
                           _setLEDBoost 0C73                     ??_ADC_GetConversion 0022  
                           _setLEDDrive 0B9A         __size_of_resetGestureParameters 0018  
                          _mssp1_setIRQ 0841         __end_of_setLightIntLowThreshold 0B9A  
                           ??_do_I2C_RX 0076                             ??_do_I2C_TX 0076  
                 setGestureLEDDrive@val 002C                        __size_of_setMode 004F  
                              __ptext10 0CA5                                __ptext11 098F  
                              __ptext20 0EF0                                __ptext12 097C  
                              __ptext21 0969                                __ptext13 0A96  
                              __ptext30 0A25                                __ptext22 0335  
                              __ptext14 091A                                __ptext31 0911  
                              __ptext23 0F9C                                __ptext15 0F42  
                              __ptext40 0890                                __ptext32 0AB4  
                              __ptext24 0C73                                __ptext16 06CF  
                              __ptext41 0924                                __ptext33 0A40  
                              __ptext25 0AFE                                __ptext17 0E08  
                              __ptext50 08CB                                __ptext42 0856  
                              __ptext34 08A4                                __ptext26 0C17  
                              __ptext18 0066                                __ptext51 092F  
                              __ptext43 08D2                                __ptext35 0865  
                              __ptext27 0A0D                                __ptext19 0A5C  
                              __ptext60 09DD                                __ptext52 08F9  
                              __ptext44 0853                                __ptext36 0862  
                              __ptext28 093B                                __ptext61 0A78  
                              __ptext53 0D09                                __ptext45 0850  
                              __ptext37 085F                                __ptext29 0EA1  
                              __ptext70 0DC2                                __ptext62 0958  
                              __ptext54 08F1                                __ptext46 084D  
                              __ptext38 085C                                __ptext71 0E52  
                              __ptext63 09C8                                __ptext55 08E9  
                              __ptext47 09F5                                __ptext39 0859  
                              __ptext80 0878                                __ptext72 0BEC  
                              __ptext64 0949                                __ptext56 08C4  
                              __ptext48 088C                                __ptext81 0874  
                              __ptext73 0888                                __ptext57 07C2  
                              __ptext49 0901                                __ptext90 086C  
                              __ptext82 0870                                __ptext74 0884  
                              __ptext66 084A                                __ptext58 05DB  
                              __ptext91 0832                                __ptext83 0899  
                              __ptext75 0880                                __ptext67 0847  
                              __ptext59 0D3F                                __ptext92 083B  
                              __ptext84 08B6                                __ptext76 089E  
                              __ptext68 0AD8                                __ptext93 0002  
                              __ptext85 0C42                                __ptext77 08BD  
                              __ptext69 0844                                __ptext94 0833  
                              __ptext86 0841                                __ptext78 08E1  
                              __ptext95 0838                                __ptext87 08D9  
                              __ptext79 087C                                __ptext96 0835  
                              __ptext88 0894                                __ptext97 0868  
                              __ptext89 083E                                __ptext98 0831  
                 _setGestureEnterThresh 097C                            _SSP1CON1bits 0215  
                          _SSP1CON2bits 0216          setGestureEnterThresh@threshold 002B  
                          _SSP2CON1bits 021D                    ?_i2c1_driver_sendACK 0076  
                  __end_of_do_I2C_RESET 08BD                    ?_i2c1_driver_restart 0076  
                   __end_of_returnReset 0004                        _i2c1_driver_open 091A  
                      _i2c1_driver_stop 0862                           __size_of_main 0042  
                  ?_i2c1_driver_startRX 0076                       ?_setProximityGain 0076  
        __size_of_i2c1_driver_getRXData 0003           __end_of_i2c1_driver_getRXData 0856  
                    __end_of_initialize 05DB               __end_of_ADC_GetConversion 0A96  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1540 0030                      _decodeGesture$1533 0022  
                    _decodeGesture$1534 0024                      _decodeGesture$1535 0026  
                    _decodeGesture$1536 0028                      _decodeGesture$1537 002A  
                    _decodeGesture$1538 002C                      _decodeGesture$1539 002E  
                        ?_Display_Clear 0076          __end_ofi1_i2c1_driver_sendNACK 0870  
                              int$flags 007E      __end_of_INTERRUPT_InterruptManager 002B  
            _INTERRUPT_InterruptManager 0004                            _SSP1STATbits 0214  
           __size_of_isGestureAvailable 0013                           Display_Name@i 002A  
                   setProximityGain@val 002C        __end_of_do_I2C_SEND_RESTART_READ 0874  
           __size_of_setGestureWaitTime 0027              __end_of_processGestureData 0335  
                          ??_returnStop 0077                            _SSP2STATbits 021C  
                 ??_do_I2C_DO_NACK_STOP 0076                              Get_ADC@val 002F  
               __size_of_setGestureGain 0032                              _INTCONbits 000B  
               __size_of_setGestureMode 0027              __size_of_i2c1_driver_start 0003  
                setAmbientLightGain@val 002C                   ??_i2c1_driver_sendACK 0076  
                      ?_do_I2C_TX_EMPTY 0076                 __size_of_WDT_Initialize 0004  
                _do_I2C_DO_ADDRESS_NACK 0BEC                                intlevel1 0000  
                 ??_i2c1_driver_restart 0020                   ??_i2c1_driver_startRX 0020  
               ?_PIN_MANAGER_Initialize 0076                        ??_I2C_Write_Byte 0021  
                     __CFG_CLKOUTEN$OFF 0000                      __end_of_returnStop 0835  
                       _PWM1_Initialize 092F                        ??_ADC_Initialize 0020  
                _resetGestureParameters 0A0D              ??_i2c1_driver_isBufferFull 0020  
                         ?_Display_Name 0025          __size_ofi1_i2c1_driver_restart 0003  
         __end_ofi1_i2c1_driver_restart 0838          __size_ofi1_i2c1_driver_startRX 0003  
          __end_ofi1_i2c1_driver_TXData 0899           __end_ofi1_i2c1_driver_startRX 083E  
                  _setGestureExitThresh 098F                         ??_handleGesture 005B  
                         __pstringtext1 1000                           __pstringtext2 1030  
                         __pstringtext3 103D                           __pstringtext4 1049  
                         __pstringtext5 1054                           __pstringtext6 105B  
                         __pstringtext7 1060                           __pstringtext8 1063  
                         __pstringtext9 0000                              _SSP1DATPPS 0E21  
                          ?_enablePower 0076                              _SSP2DATPPS 0E1E  
                            _SSP1CLKPPS 0E20                     _setGestureIntEnable 0C17  
                            _SSP2CLKPPS 0E1D                        setLEDBoost@boost 002D  
                ?_setGestureEnterThresh 0076                             _returnReset 0002  
                            _PIR_Sensor 08C4          __end_of_PIN_MANAGER_Initialize 0D3F  
           __end_of_i2c_busCollisionISR 084D               __size_of_wireReadDataByte 0024  
                      setLEDDrive@drive 002D                     processGestureData@i 004D  
                       _PIN_MANAGER_IOC 0831             __end_of_enableGestureSensor 1000  
                 _do_I2C_SEND_ADR_WRITE 08BD                    ?_setGestureIntEnable 0076  
            __size_of_ADC_GetConversion 001E                    _do_I2C_SEND_ADR_READ 08E1  
                       ??_Display_Clear 0023        __end_of_setLightIntHighThreshold 0B73  
                        ??_Display_Name 0027  
