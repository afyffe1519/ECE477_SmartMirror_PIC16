

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 31 16:43:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	stringtext10,global,class=STRCODE,delta=2
    15                           	psect	stringtext11,global,class=STRCODE,delta=2
    16                           	psect	stringtext12,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	intentry,global,class=CODE,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	dabs	1,0x7E,2
   121  0000                     
   122                           ; Version 2.05
   123                           ; Generated 20/12/2018 GMT
   124                           ; 
   125                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC16F18345 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0097                     	;# 
   199  009B                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  0111                     	;# 
   209  0112                     	;# 
   210  0113                     	;# 
   211  0114                     	;# 
   212  0115                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  0118                     	;# 
   216  0119                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0197                     	;# 
   221  0199                     	;# 
   222  0199                     	;# 
   223  0199                     	;# 
   224  019A                     	;# 
   225  019A                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019D                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019E                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  019F                     	;# 
   243  019F                     	;# 
   244  019F                     	;# 
   245  019F                     	;# 
   246  020C                     	;# 
   247  020D                     	;# 
   248  020E                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0216                     	;# 
   262  0216                     	;# 
   263  0217                     	;# 
   264  0217                     	;# 
   265  0219                     	;# 
   266  021A                     	;# 
   267  021B                     	;# 
   268  021C                     	;# 
   269  021D                     	;# 
   270  021D                     	;# 
   271  021E                     	;# 
   272  021F                     	;# 
   273  028C                     	;# 
   274  028D                     	;# 
   275  028E                     	;# 
   276  0291                     	;# 
   277  0291                     	;# 
   278  0292                     	;# 
   279  0293                     	;# 
   280  0294                     	;# 
   281  0295                     	;# 
   282  0295                     	;# 
   283  0296                     	;# 
   284  0297                     	;# 
   285  0298                     	;# 
   286  029F                     	;# 
   287  030C                     	;# 
   288  030D                     	;# 
   289  030E                     	;# 
   290  0311                     	;# 
   291  0311                     	;# 
   292  0312                     	;# 
   293  0313                     	;# 
   294  0314                     	;# 
   295  0315                     	;# 
   296  0315                     	;# 
   297  0316                     	;# 
   298  0317                     	;# 
   299  0318                     	;# 
   300  038C                     	;# 
   301  038D                     	;# 
   302  038E                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  0393                     	;# 
   306  0394                     	;# 
   307  0395                     	;# 
   308  0396                     	;# 
   309  0397                     	;# 
   310  0398                     	;# 
   311  0399                     	;# 
   312  039A                     	;# 
   313  039C                     	;# 
   314  039D                     	;# 
   315  039E                     	;# 
   316  039F                     	;# 
   317  0411                     	;# 
   318  0411                     	;# 
   319  0412                     	;# 
   320  0413                     	;# 
   321  0414                     	;# 
   322  0415                     	;# 
   323  0416                     	;# 
   324  0417                     	;# 
   325  0418                     	;# 
   326  0418                     	;# 
   327  0419                     	;# 
   328  041A                     	;# 
   329  041B                     	;# 
   330  041C                     	;# 
   331  041D                     	;# 
   332  041E                     	;# 
   333  041F                     	;# 
   334  0498                     	;# 
   335  0498                     	;# 
   336  0499                     	;# 
   337  049A                     	;# 
   338  049B                     	;# 
   339  049B                     	;# 
   340  049C                     	;# 
   341  049D                     	;# 
   342  049E                     	;# 
   343  049F                     	;# 
   344  0617                     	;# 
   345  0618                     	;# 
   346  0619                     	;# 
   347  0619                     	;# 
   348  061A                     	;# 
   349  061B                     	;# 
   350  061C                     	;# 
   351  061C                     	;# 
   352  061F                     	;# 
   353  0691                     	;# 
   354  0692                     	;# 
   355  0693                     	;# 
   356  0694                     	;# 
   357  0695                     	;# 
   358  0696                     	;# 
   359  0697                     	;# 
   360  0698                     	;# 
   361  0699                     	;# 
   362  0711                     	;# 
   363  0712                     	;# 
   364  0713                     	;# 
   365  0714                     	;# 
   366  0715                     	;# 
   367  0716                     	;# 
   368  0717                     	;# 
   369  0718                     	;# 
   370  0719                     	;# 
   371  0891                     	;# 
   372  0891                     	;# 
   373  0891                     	;# 
   374  0891                     	;# 
   375  0891                     	;# 
   376  0891                     	;# 
   377  0892                     	;# 
   378  0892                     	;# 
   379  0892                     	;# 
   380  0893                     	;# 
   381  0893                     	;# 
   382  0893                     	;# 
   383  0893                     	;# 
   384  0893                     	;# 
   385  0893                     	;# 
   386  0894                     	;# 
   387  0894                     	;# 
   388  0894                     	;# 
   389  0895                     	;# 
   390  0895                     	;# 
   391  0895                     	;# 
   392  0896                     	;# 
   393  0896                     	;# 
   394  0896                     	;# 
   395  089B                     	;# 
   396  0911                     	;# 
   397  0912                     	;# 
   398  0913                     	;# 
   399  0914                     	;# 
   400  0915                     	;# 
   401  0916                     	;# 
   402  0918                     	;# 
   403  0919                     	;# 
   404  091A                     	;# 
   405  091B                     	;# 
   406  091C                     	;# 
   407  091D                     	;# 
   408  091E                     	;# 
   409  091F                     	;# 
   410  0E0F                     	;# 
   411  0E10                     	;# 
   412  0E11                     	;# 
   413  0E12                     	;# 
   414  0E13                     	;# 
   415  0E14                     	;# 
   416  0E15                     	;# 
   417  0E16                     	;# 
   418  0E17                     	;# 
   419  0E18                     	;# 
   420  0E19                     	;# 
   421  0E1A                     	;# 
   422  0E1B                     	;# 
   423  0E1C                     	;# 
   424  0E1D                     	;# 
   425  0E1E                     	;# 
   426  0E1F                     	;# 
   427  0E20                     	;# 
   428  0E21                     	;# 
   429  0E22                     	;# 
   430  0E24                     	;# 
   431  0E25                     	;# 
   432  0E28                     	;# 
   433  0E29                     	;# 
   434  0E2A                     	;# 
   435  0E2B                     	;# 
   436  0E2C                     	;# 
   437  0E2D                     	;# 
   438  0E2E                     	;# 
   439  0E2F                     	;# 
   440  0E90                     	;# 
   441  0E91                     	;# 
   442  0E92                     	;# 
   443  0E94                     	;# 
   444  0E95                     	;# 
   445  0E9C                     	;# 
   446  0E9D                     	;# 
   447  0E9E                     	;# 
   448  0E9F                     	;# 
   449  0EA0                     	;# 
   450  0EA1                     	;# 
   451  0EA2                     	;# 
   452  0EA3                     	;# 
   453  0EA4                     	;# 
   454  0EA5                     	;# 
   455  0EA6                     	;# 
   456  0EA7                     	;# 
   457  0F0F                     	;# 
   458  0F10                     	;# 
   459  0F11                     	;# 
   460  0F12                     	;# 
   461  0F13                     	;# 
   462  0F14                     	;# 
   463  0F15                     	;# 
   464  0F16                     	;# 
   465  0F17                     	;# 
   466  0F18                     	;# 
   467  0F19                     	;# 
   468  0F1A                     	;# 
   469  0F1B                     	;# 
   470  0F1C                     	;# 
   471  0F1D                     	;# 
   472  0F1E                     	;# 
   473  0F1F                     	;# 
   474  0F20                     	;# 
   475  0F21                     	;# 
   476  0F22                     	;# 
   477  0F23                     	;# 
   478  0F24                     	;# 
   479  0F25                     	;# 
   480  0F26                     	;# 
   481  0F27                     	;# 
   482  0F28                     	;# 
   483  0F29                     	;# 
   484  0F2A                     	;# 
   485  0F2B                     	;# 
   486  0F2C                     	;# 
   487  0F2D                     	;# 
   488  0F2E                     	;# 
   489  0F2F                     	;# 
   490  0F30                     	;# 
   491  0F31                     	;# 
   492  0F32                     	;# 
   493  0F33                     	;# 
   494  0F34                     	;# 
   495  0F35                     	;# 
   496  0F36                     	;# 
   497  0F37                     	;# 
   498  0FE4                     	;# 
   499  0FE5                     	;# 
   500  0FE6                     	;# 
   501  0FE7                     	;# 
   502  0FE8                     	;# 
   503  0FE9                     	;# 
   504  0FEA                     	;# 
   505  0FEB                     	;# 
   506  0FED                     	;# 
   507  0FEE                     	;# 
   508  0FEF                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  0010                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0014                     	;# 
   529  0015                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0016                     	;# 
   533  0017                     	;# 
   534  0018                     	;# 
   535  0019                     	;# 
   536  0019                     	;# 
   537  001A                     	;# 
   538  001B                     	;# 
   539  001C                     	;# 
   540  001D                     	;# 
   541  001E                     	;# 
   542  001F                     	;# 
   543  008C                     	;# 
   544  008D                     	;# 
   545  008E                     	;# 
   546  0090                     	;# 
   547  0091                     	;# 
   548  0092                     	;# 
   549  0093                     	;# 
   550  0094                     	;# 
   551  0097                     	;# 
   552  009B                     	;# 
   553  009B                     	;# 
   554  009C                     	;# 
   555  009D                     	;# 
   556  009E                     	;# 
   557  009F                     	;# 
   558  010C                     	;# 
   559  010D                     	;# 
   560  010E                     	;# 
   561  0111                     	;# 
   562  0112                     	;# 
   563  0113                     	;# 
   564  0114                     	;# 
   565  0115                     	;# 
   566  0116                     	;# 
   567  0117                     	;# 
   568  0118                     	;# 
   569  0119                     	;# 
   570  018C                     	;# 
   571  018D                     	;# 
   572  018E                     	;# 
   573  0197                     	;# 
   574  0199                     	;# 
   575  0199                     	;# 
   576  0199                     	;# 
   577  019A                     	;# 
   578  019A                     	;# 
   579  019A                     	;# 
   580  019B                     	;# 
   581  019B                     	;# 
   582  019B                     	;# 
   583  019B                     	;# 
   584  019B                     	;# 
   585  019C                     	;# 
   586  019C                     	;# 
   587  019C                     	;# 
   588  019D                     	;# 
   589  019D                     	;# 
   590  019D                     	;# 
   591  019E                     	;# 
   592  019E                     	;# 
   593  019E                     	;# 
   594  019F                     	;# 
   595  019F                     	;# 
   596  019F                     	;# 
   597  019F                     	;# 
   598  019F                     	;# 
   599  020C                     	;# 
   600  020D                     	;# 
   601  020E                     	;# 
   602  0211                     	;# 
   603  0211                     	;# 
   604  0212                     	;# 
   605  0212                     	;# 
   606  0213                     	;# 
   607  0213                     	;# 
   608  0214                     	;# 
   609  0214                     	;# 
   610  0215                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0216                     	;# 
   615  0216                     	;# 
   616  0217                     	;# 
   617  0217                     	;# 
   618  0219                     	;# 
   619  021A                     	;# 
   620  021B                     	;# 
   621  021C                     	;# 
   622  021D                     	;# 
   623  021D                     	;# 
   624  021E                     	;# 
   625  021F                     	;# 
   626  028C                     	;# 
   627  028D                     	;# 
   628  028E                     	;# 
   629  0291                     	;# 
   630  0291                     	;# 
   631  0292                     	;# 
   632  0293                     	;# 
   633  0294                     	;# 
   634  0295                     	;# 
   635  0295                     	;# 
   636  0296                     	;# 
   637  0297                     	;# 
   638  0298                     	;# 
   639  029F                     	;# 
   640  030C                     	;# 
   641  030D                     	;# 
   642  030E                     	;# 
   643  0311                     	;# 
   644  0311                     	;# 
   645  0312                     	;# 
   646  0313                     	;# 
   647  0314                     	;# 
   648  0315                     	;# 
   649  0315                     	;# 
   650  0316                     	;# 
   651  0317                     	;# 
   652  0318                     	;# 
   653  038C                     	;# 
   654  038D                     	;# 
   655  038E                     	;# 
   656  0391                     	;# 
   657  0392                     	;# 
   658  0393                     	;# 
   659  0394                     	;# 
   660  0395                     	;# 
   661  0396                     	;# 
   662  0397                     	;# 
   663  0398                     	;# 
   664  0399                     	;# 
   665  039A                     	;# 
   666  039C                     	;# 
   667  039D                     	;# 
   668  039E                     	;# 
   669  039F                     	;# 
   670  0411                     	;# 
   671  0411                     	;# 
   672  0412                     	;# 
   673  0413                     	;# 
   674  0414                     	;# 
   675  0415                     	;# 
   676  0416                     	;# 
   677  0417                     	;# 
   678  0418                     	;# 
   679  0418                     	;# 
   680  0419                     	;# 
   681  041A                     	;# 
   682  041B                     	;# 
   683  041C                     	;# 
   684  041D                     	;# 
   685  041E                     	;# 
   686  041F                     	;# 
   687  0498                     	;# 
   688  0498                     	;# 
   689  0499                     	;# 
   690  049A                     	;# 
   691  049B                     	;# 
   692  049B                     	;# 
   693  049C                     	;# 
   694  049D                     	;# 
   695  049E                     	;# 
   696  049F                     	;# 
   697  0617                     	;# 
   698  0618                     	;# 
   699  0619                     	;# 
   700  0619                     	;# 
   701  061A                     	;# 
   702  061B                     	;# 
   703  061C                     	;# 
   704  061C                     	;# 
   705  061F                     	;# 
   706  0691                     	;# 
   707  0692                     	;# 
   708  0693                     	;# 
   709  0694                     	;# 
   710  0695                     	;# 
   711  0696                     	;# 
   712  0697                     	;# 
   713  0698                     	;# 
   714  0699                     	;# 
   715  0711                     	;# 
   716  0712                     	;# 
   717  0713                     	;# 
   718  0714                     	;# 
   719  0715                     	;# 
   720  0716                     	;# 
   721  0717                     	;# 
   722  0718                     	;# 
   723  0719                     	;# 
   724  0891                     	;# 
   725  0891                     	;# 
   726  0891                     	;# 
   727  0891                     	;# 
   728  0891                     	;# 
   729  0891                     	;# 
   730  0892                     	;# 
   731  0892                     	;# 
   732  0892                     	;# 
   733  0893                     	;# 
   734  0893                     	;# 
   735  0893                     	;# 
   736  0893                     	;# 
   737  0893                     	;# 
   738  0893                     	;# 
   739  0894                     	;# 
   740  0894                     	;# 
   741  0894                     	;# 
   742  0895                     	;# 
   743  0895                     	;# 
   744  0895                     	;# 
   745  0896                     	;# 
   746  0896                     	;# 
   747  0896                     	;# 
   748  089B                     	;# 
   749  0911                     	;# 
   750  0912                     	;# 
   751  0913                     	;# 
   752  0914                     	;# 
   753  0915                     	;# 
   754  0916                     	;# 
   755  0918                     	;# 
   756  0919                     	;# 
   757  091A                     	;# 
   758  091B                     	;# 
   759  091C                     	;# 
   760  091D                     	;# 
   761  091E                     	;# 
   762  091F                     	;# 
   763  0E0F                     	;# 
   764  0E10                     	;# 
   765  0E11                     	;# 
   766  0E12                     	;# 
   767  0E13                     	;# 
   768  0E14                     	;# 
   769  0E15                     	;# 
   770  0E16                     	;# 
   771  0E17                     	;# 
   772  0E18                     	;# 
   773  0E19                     	;# 
   774  0E1A                     	;# 
   775  0E1B                     	;# 
   776  0E1C                     	;# 
   777  0E1D                     	;# 
   778  0E1E                     	;# 
   779  0E1F                     	;# 
   780  0E20                     	;# 
   781  0E21                     	;# 
   782  0E22                     	;# 
   783  0E24                     	;# 
   784  0E25                     	;# 
   785  0E28                     	;# 
   786  0E29                     	;# 
   787  0E2A                     	;# 
   788  0E2B                     	;# 
   789  0E2C                     	;# 
   790  0E2D                     	;# 
   791  0E2E                     	;# 
   792  0E2F                     	;# 
   793  0E90                     	;# 
   794  0E91                     	;# 
   795  0E92                     	;# 
   796  0E94                     	;# 
   797  0E95                     	;# 
   798  0E9C                     	;# 
   799  0E9D                     	;# 
   800  0E9E                     	;# 
   801  0E9F                     	;# 
   802  0EA0                     	;# 
   803  0EA1                     	;# 
   804  0EA2                     	;# 
   805  0EA3                     	;# 
   806  0EA4                     	;# 
   807  0EA5                     	;# 
   808  0EA6                     	;# 
   809  0EA7                     	;# 
   810  0F0F                     	;# 
   811  0F10                     	;# 
   812  0F11                     	;# 
   813  0F12                     	;# 
   814  0F13                     	;# 
   815  0F14                     	;# 
   816  0F15                     	;# 
   817  0F16                     	;# 
   818  0F17                     	;# 
   819  0F18                     	;# 
   820  0F19                     	;# 
   821  0F1A                     	;# 
   822  0F1B                     	;# 
   823  0F1C                     	;# 
   824  0F1D                     	;# 
   825  0F1E                     	;# 
   826  0F1F                     	;# 
   827  0F20                     	;# 
   828  0F21                     	;# 
   829  0F22                     	;# 
   830  0F23                     	;# 
   831  0F24                     	;# 
   832  0F25                     	;# 
   833  0F26                     	;# 
   834  0F27                     	;# 
   835  0F28                     	;# 
   836  0F29                     	;# 
   837  0F2A                     	;# 
   838  0F2B                     	;# 
   839  0F2C                     	;# 
   840  0F2D                     	;# 
   841  0F2E                     	;# 
   842  0F2F                     	;# 
   843  0F30                     	;# 
   844  0F31                     	;# 
   845  0F32                     	;# 
   846  0F33                     	;# 
   847  0F34                     	;# 
   848  0F35                     	;# 
   849  0F36                     	;# 
   850  0F37                     	;# 
   851  0FE4                     	;# 
   852  0FE5                     	;# 
   853  0FE6                     	;# 
   854  0FE7                     	;# 
   855  0FE8                     	;# 
   856  0FE9                     	;# 
   857  0FEA                     	;# 
   858  0FEB                     	;# 
   859  0FED                     	;# 
   860  0FEE                     	;# 
   861  0FEF                     	;# 
   862  0000                     	;# 
   863  0001                     	;# 
   864  0002                     	;# 
   865  0003                     	;# 
   866  0004                     	;# 
   867  0005                     	;# 
   868  0006                     	;# 
   869  0007                     	;# 
   870  0008                     	;# 
   871  0009                     	;# 
   872  000A                     	;# 
   873  000B                     	;# 
   874  000C                     	;# 
   875  000D                     	;# 
   876  000E                     	;# 
   877  0010                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0013                     	;# 
   881  0014                     	;# 
   882  0015                     	;# 
   883  0015                     	;# 
   884  0016                     	;# 
   885  0016                     	;# 
   886  0017                     	;# 
   887  0018                     	;# 
   888  0019                     	;# 
   889  0019                     	;# 
   890  001A                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001D                     	;# 
   894  001E                     	;# 
   895  001F                     	;# 
   896  008C                     	;# 
   897  008D                     	;# 
   898  008E                     	;# 
   899  0090                     	;# 
   900  0091                     	;# 
   901  0092                     	;# 
   902  0093                     	;# 
   903  0094                     	;# 
   904  0097                     	;# 
   905  009B                     	;# 
   906  009B                     	;# 
   907  009C                     	;# 
   908  009D                     	;# 
   909  009E                     	;# 
   910  009F                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010E                     	;# 
   914  0111                     	;# 
   915  0112                     	;# 
   916  0113                     	;# 
   917  0114                     	;# 
   918  0115                     	;# 
   919  0116                     	;# 
   920  0117                     	;# 
   921  0118                     	;# 
   922  0119                     	;# 
   923  018C                     	;# 
   924  018D                     	;# 
   925  018E                     	;# 
   926  0197                     	;# 
   927  0199                     	;# 
   928  0199                     	;# 
   929  0199                     	;# 
   930  019A                     	;# 
   931  019A                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019C                     	;# 
   939  019C                     	;# 
   940  019C                     	;# 
   941  019D                     	;# 
   942  019D                     	;# 
   943  019D                     	;# 
   944  019E                     	;# 
   945  019E                     	;# 
   946  019E                     	;# 
   947  019F                     	;# 
   948  019F                     	;# 
   949  019F                     	;# 
   950  019F                     	;# 
   951  019F                     	;# 
   952  020C                     	;# 
   953  020D                     	;# 
   954  020E                     	;# 
   955  0211                     	;# 
   956  0211                     	;# 
   957  0212                     	;# 
   958  0212                     	;# 
   959  0213                     	;# 
   960  0213                     	;# 
   961  0214                     	;# 
   962  0214                     	;# 
   963  0215                     	;# 
   964  0215                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0216                     	;# 
   968  0216                     	;# 
   969  0217                     	;# 
   970  0217                     	;# 
   971  0219                     	;# 
   972  021A                     	;# 
   973  021B                     	;# 
   974  021C                     	;# 
   975  021D                     	;# 
   976  021D                     	;# 
   977  021E                     	;# 
   978  021F                     	;# 
   979  028C                     	;# 
   980  028D                     	;# 
   981  028E                     	;# 
   982  0291                     	;# 
   983  0291                     	;# 
   984  0292                     	;# 
   985  0293                     	;# 
   986  0294                     	;# 
   987  0295                     	;# 
   988  0295                     	;# 
   989  0296                     	;# 
   990  0297                     	;# 
   991  0298                     	;# 
   992  029F                     	;# 
   993  030C                     	;# 
   994  030D                     	;# 
   995  030E                     	;# 
   996  0311                     	;# 
   997  0311                     	;# 
   998  0312                     	;# 
   999  0313                     	;# 
  1000  0314                     	;# 
  1001  0315                     	;# 
  1002  0315                     	;# 
  1003  0316                     	;# 
  1004  0317                     	;# 
  1005  0318                     	;# 
  1006  038C                     	;# 
  1007  038D                     	;# 
  1008  038E                     	;# 
  1009  0391                     	;# 
  1010  0392                     	;# 
  1011  0393                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0397                     	;# 
  1016  0398                     	;# 
  1017  0399                     	;# 
  1018  039A                     	;# 
  1019  039C                     	;# 
  1020  039D                     	;# 
  1021  039E                     	;# 
  1022  039F                     	;# 
  1023  0411                     	;# 
  1024  0411                     	;# 
  1025  0412                     	;# 
  1026  0413                     	;# 
  1027  0414                     	;# 
  1028  0415                     	;# 
  1029  0416                     	;# 
  1030  0417                     	;# 
  1031  0418                     	;# 
  1032  0418                     	;# 
  1033  0419                     	;# 
  1034  041A                     	;# 
  1035  041B                     	;# 
  1036  041C                     	;# 
  1037  041D                     	;# 
  1038  041E                     	;# 
  1039  041F                     	;# 
  1040  0498                     	;# 
  1041  0498                     	;# 
  1042  0499                     	;# 
  1043  049A                     	;# 
  1044  049B                     	;# 
  1045  049B                     	;# 
  1046  049C                     	;# 
  1047  049D                     	;# 
  1048  049E                     	;# 
  1049  049F                     	;# 
  1050  0617                     	;# 
  1051  0618                     	;# 
  1052  0619                     	;# 
  1053  0619                     	;# 
  1054  061A                     	;# 
  1055  061B                     	;# 
  1056  061C                     	;# 
  1057  061C                     	;# 
  1058  061F                     	;# 
  1059  0691                     	;# 
  1060  0692                     	;# 
  1061  0693                     	;# 
  1062  0694                     	;# 
  1063  0695                     	;# 
  1064  0696                     	;# 
  1065  0697                     	;# 
  1066  0698                     	;# 
  1067  0699                     	;# 
  1068  0711                     	;# 
  1069  0712                     	;# 
  1070  0713                     	;# 
  1071  0714                     	;# 
  1072  0715                     	;# 
  1073  0716                     	;# 
  1074  0717                     	;# 
  1075  0718                     	;# 
  1076  0719                     	;# 
  1077  0891                     	;# 
  1078  0891                     	;# 
  1079  0891                     	;# 
  1080  0891                     	;# 
  1081  0891                     	;# 
  1082  0891                     	;# 
  1083  0892                     	;# 
  1084  0892                     	;# 
  1085  0892                     	;# 
  1086  0893                     	;# 
  1087  0893                     	;# 
  1088  0893                     	;# 
  1089  0893                     	;# 
  1090  0893                     	;# 
  1091  0893                     	;# 
  1092  0894                     	;# 
  1093  0894                     	;# 
  1094  0894                     	;# 
  1095  0895                     	;# 
  1096  0895                     	;# 
  1097  0895                     	;# 
  1098  0896                     	;# 
  1099  0896                     	;# 
  1100  0896                     	;# 
  1101  089B                     	;# 
  1102  0911                     	;# 
  1103  0912                     	;# 
  1104  0913                     	;# 
  1105  0914                     	;# 
  1106  0915                     	;# 
  1107  0916                     	;# 
  1108  0918                     	;# 
  1109  0919                     	;# 
  1110  091A                     	;# 
  1111  091B                     	;# 
  1112  091C                     	;# 
  1113  091D                     	;# 
  1114  091E                     	;# 
  1115  091F                     	;# 
  1116  0E0F                     	;# 
  1117  0E10                     	;# 
  1118  0E11                     	;# 
  1119  0E12                     	;# 
  1120  0E13                     	;# 
  1121  0E14                     	;# 
  1122  0E15                     	;# 
  1123  0E16                     	;# 
  1124  0E17                     	;# 
  1125  0E18                     	;# 
  1126  0E19                     	;# 
  1127  0E1A                     	;# 
  1128  0E1B                     	;# 
  1129  0E1C                     	;# 
  1130  0E1D                     	;# 
  1131  0E1E                     	;# 
  1132  0E1F                     	;# 
  1133  0E20                     	;# 
  1134  0E21                     	;# 
  1135  0E22                     	;# 
  1136  0E24                     	;# 
  1137  0E25                     	;# 
  1138  0E28                     	;# 
  1139  0E29                     	;# 
  1140  0E2A                     	;# 
  1141  0E2B                     	;# 
  1142  0E2C                     	;# 
  1143  0E2D                     	;# 
  1144  0E2E                     	;# 
  1145  0E2F                     	;# 
  1146  0E90                     	;# 
  1147  0E91                     	;# 
  1148  0E92                     	;# 
  1149  0E94                     	;# 
  1150  0E95                     	;# 
  1151  0E9C                     	;# 
  1152  0E9D                     	;# 
  1153  0E9E                     	;# 
  1154  0E9F                     	;# 
  1155  0EA0                     	;# 
  1156  0EA1                     	;# 
  1157  0EA2                     	;# 
  1158  0EA3                     	;# 
  1159  0EA4                     	;# 
  1160  0EA5                     	;# 
  1161  0EA6                     	;# 
  1162  0EA7                     	;# 
  1163  0F0F                     	;# 
  1164  0F10                     	;# 
  1165  0F11                     	;# 
  1166  0F12                     	;# 
  1167  0F13                     	;# 
  1168  0F14                     	;# 
  1169  0F15                     	;# 
  1170  0F16                     	;# 
  1171  0F17                     	;# 
  1172  0F18                     	;# 
  1173  0F19                     	;# 
  1174  0F1A                     	;# 
  1175  0F1B                     	;# 
  1176  0F1C                     	;# 
  1177  0F1D                     	;# 
  1178  0F1E                     	;# 
  1179  0F1F                     	;# 
  1180  0F20                     	;# 
  1181  0F21                     	;# 
  1182  0F22                     	;# 
  1183  0F23                     	;# 
  1184  0F24                     	;# 
  1185  0F25                     	;# 
  1186  0F26                     	;# 
  1187  0F27                     	;# 
  1188  0F28                     	;# 
  1189  0F29                     	;# 
  1190  0F2A                     	;# 
  1191  0F2B                     	;# 
  1192  0F2C                     	;# 
  1193  0F2D                     	;# 
  1194  0F2E                     	;# 
  1195  0F2F                     	;# 
  1196  0F30                     	;# 
  1197  0F31                     	;# 
  1198  0F32                     	;# 
  1199  0F33                     	;# 
  1200  0F34                     	;# 
  1201  0F35                     	;# 
  1202  0F36                     	;# 
  1203  0F37                     	;# 
  1204  0FE4                     	;# 
  1205  0FE5                     	;# 
  1206  0FE6                     	;# 
  1207  0FE7                     	;# 
  1208  0FE8                     	;# 
  1209  0FE9                     	;# 
  1210  0FEA                     	;# 
  1211  0FEB                     	;# 
  1212  0FED                     	;# 
  1213  0FEE                     	;# 
  1214  0FEF                     	;# 
  1215  0000                     	;# 
  1216  0001                     	;# 
  1217  0002                     	;# 
  1218  0003                     	;# 
  1219  0004                     	;# 
  1220  0005                     	;# 
  1221  0006                     	;# 
  1222  0007                     	;# 
  1223  0008                     	;# 
  1224  0009                     	;# 
  1225  000A                     	;# 
  1226  000B                     	;# 
  1227  000C                     	;# 
  1228  000D                     	;# 
  1229  000E                     	;# 
  1230  0010                     	;# 
  1231  0011                     	;# 
  1232  0012                     	;# 
  1233  0013                     	;# 
  1234  0014                     	;# 
  1235  0015                     	;# 
  1236  0015                     	;# 
  1237  0016                     	;# 
  1238  0016                     	;# 
  1239  0017                     	;# 
  1240  0018                     	;# 
  1241  0019                     	;# 
  1242  0019                     	;# 
  1243  001A                     	;# 
  1244  001B                     	;# 
  1245  001C                     	;# 
  1246  001D                     	;# 
  1247  001E                     	;# 
  1248  001F                     	;# 
  1249  008C                     	;# 
  1250  008D                     	;# 
  1251  008E                     	;# 
  1252  0090                     	;# 
  1253  0091                     	;# 
  1254  0092                     	;# 
  1255  0093                     	;# 
  1256  0094                     	;# 
  1257  0097                     	;# 
  1258  009B                     	;# 
  1259  009B                     	;# 
  1260  009C                     	;# 
  1261  009D                     	;# 
  1262  009E                     	;# 
  1263  009F                     	;# 
  1264  010C                     	;# 
  1265  010D                     	;# 
  1266  010E                     	;# 
  1267  0111                     	;# 
  1268  0112                     	;# 
  1269  0113                     	;# 
  1270  0114                     	;# 
  1271  0115                     	;# 
  1272  0116                     	;# 
  1273  0117                     	;# 
  1274  0118                     	;# 
  1275  0119                     	;# 
  1276  018C                     	;# 
  1277  018D                     	;# 
  1278  018E                     	;# 
  1279  0197                     	;# 
  1280  0199                     	;# 
  1281  0199                     	;# 
  1282  0199                     	;# 
  1283  019A                     	;# 
  1284  019A                     	;# 
  1285  019A                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019B                     	;# 
  1289  019B                     	;# 
  1290  019B                     	;# 
  1291  019C                     	;# 
  1292  019C                     	;# 
  1293  019C                     	;# 
  1294  019D                     	;# 
  1295  019D                     	;# 
  1296  019D                     	;# 
  1297  019E                     	;# 
  1298  019E                     	;# 
  1299  019E                     	;# 
  1300  019F                     	;# 
  1301  019F                     	;# 
  1302  019F                     	;# 
  1303  019F                     	;# 
  1304  019F                     	;# 
  1305  020C                     	;# 
  1306  020D                     	;# 
  1307  020E                     	;# 
  1308  0211                     	;# 
  1309  0211                     	;# 
  1310  0212                     	;# 
  1311  0212                     	;# 
  1312  0213                     	;# 
  1313  0213                     	;# 
  1314  0214                     	;# 
  1315  0214                     	;# 
  1316  0215                     	;# 
  1317  0215                     	;# 
  1318  0215                     	;# 
  1319  0215                     	;# 
  1320  0216                     	;# 
  1321  0216                     	;# 
  1322  0217                     	;# 
  1323  0217                     	;# 
  1324  0219                     	;# 
  1325  021A                     	;# 
  1326  021B                     	;# 
  1327  021C                     	;# 
  1328  021D                     	;# 
  1329  021D                     	;# 
  1330  021E                     	;# 
  1331  021F                     	;# 
  1332  028C                     	;# 
  1333  028D                     	;# 
  1334  028E                     	;# 
  1335  0291                     	;# 
  1336  0291                     	;# 
  1337  0292                     	;# 
  1338  0293                     	;# 
  1339  0294                     	;# 
  1340  0295                     	;# 
  1341  0295                     	;# 
  1342  0296                     	;# 
  1343  0297                     	;# 
  1344  0298                     	;# 
  1345  029F                     	;# 
  1346  030C                     	;# 
  1347  030D                     	;# 
  1348  030E                     	;# 
  1349  0311                     	;# 
  1350  0311                     	;# 
  1351  0312                     	;# 
  1352  0313                     	;# 
  1353  0314                     	;# 
  1354  0315                     	;# 
  1355  0315                     	;# 
  1356  0316                     	;# 
  1357  0317                     	;# 
  1358  0318                     	;# 
  1359  038C                     	;# 
  1360  038D                     	;# 
  1361  038E                     	;# 
  1362  0391                     	;# 
  1363  0392                     	;# 
  1364  0393                     	;# 
  1365  0394                     	;# 
  1366  0395                     	;# 
  1367  0396                     	;# 
  1368  0397                     	;# 
  1369  0398                     	;# 
  1370  0399                     	;# 
  1371  039A                     	;# 
  1372  039C                     	;# 
  1373  039D                     	;# 
  1374  039E                     	;# 
  1375  039F                     	;# 
  1376  0411                     	;# 
  1377  0411                     	;# 
  1378  0412                     	;# 
  1379  0413                     	;# 
  1380  0414                     	;# 
  1381  0415                     	;# 
  1382  0416                     	;# 
  1383  0417                     	;# 
  1384  0418                     	;# 
  1385  0418                     	;# 
  1386  0419                     	;# 
  1387  041A                     	;# 
  1388  041B                     	;# 
  1389  041C                     	;# 
  1390  041D                     	;# 
  1391  041E                     	;# 
  1392  041F                     	;# 
  1393  0498                     	;# 
  1394  0498                     	;# 
  1395  0499                     	;# 
  1396  049A                     	;# 
  1397  049B                     	;# 
  1398  049B                     	;# 
  1399  049C                     	;# 
  1400  049D                     	;# 
  1401  049E                     	;# 
  1402  049F                     	;# 
  1403  0617                     	;# 
  1404  0618                     	;# 
  1405  0619                     	;# 
  1406  0619                     	;# 
  1407  061A                     	;# 
  1408  061B                     	;# 
  1409  061C                     	;# 
  1410  061C                     	;# 
  1411  061F                     	;# 
  1412  0691                     	;# 
  1413  0692                     	;# 
  1414  0693                     	;# 
  1415  0694                     	;# 
  1416  0695                     	;# 
  1417  0696                     	;# 
  1418  0697                     	;# 
  1419  0698                     	;# 
  1420  0699                     	;# 
  1421  0711                     	;# 
  1422  0712                     	;# 
  1423  0713                     	;# 
  1424  0714                     	;# 
  1425  0715                     	;# 
  1426  0716                     	;# 
  1427  0717                     	;# 
  1428  0718                     	;# 
  1429  0719                     	;# 
  1430  0891                     	;# 
  1431  0891                     	;# 
  1432  0891                     	;# 
  1433  0891                     	;# 
  1434  0891                     	;# 
  1435  0891                     	;# 
  1436  0892                     	;# 
  1437  0892                     	;# 
  1438  0892                     	;# 
  1439  0893                     	;# 
  1440  0893                     	;# 
  1441  0893                     	;# 
  1442  0893                     	;# 
  1443  0893                     	;# 
  1444  0893                     	;# 
  1445  0894                     	;# 
  1446  0894                     	;# 
  1447  0894                     	;# 
  1448  0895                     	;# 
  1449  0895                     	;# 
  1450  0895                     	;# 
  1451  0896                     	;# 
  1452  0896                     	;# 
  1453  0896                     	;# 
  1454  089B                     	;# 
  1455  0911                     	;# 
  1456  0912                     	;# 
  1457  0913                     	;# 
  1458  0914                     	;# 
  1459  0915                     	;# 
  1460  0916                     	;# 
  1461  0918                     	;# 
  1462  0919                     	;# 
  1463  091A                     	;# 
  1464  091B                     	;# 
  1465  091C                     	;# 
  1466  091D                     	;# 
  1467  091E                     	;# 
  1468  091F                     	;# 
  1469  0E0F                     	;# 
  1470  0E10                     	;# 
  1471  0E11                     	;# 
  1472  0E12                     	;# 
  1473  0E13                     	;# 
  1474  0E14                     	;# 
  1475  0E15                     	;# 
  1476  0E16                     	;# 
  1477  0E17                     	;# 
  1478  0E18                     	;# 
  1479  0E19                     	;# 
  1480  0E1A                     	;# 
  1481  0E1B                     	;# 
  1482  0E1C                     	;# 
  1483  0E1D                     	;# 
  1484  0E1E                     	;# 
  1485  0E1F                     	;# 
  1486  0E20                     	;# 
  1487  0E21                     	;# 
  1488  0E22                     	;# 
  1489  0E24                     	;# 
  1490  0E25                     	;# 
  1491  0E28                     	;# 
  1492  0E29                     	;# 
  1493  0E2A                     	;# 
  1494  0E2B                     	;# 
  1495  0E2C                     	;# 
  1496  0E2D                     	;# 
  1497  0E2E                     	;# 
  1498  0E2F                     	;# 
  1499  0E90                     	;# 
  1500  0E91                     	;# 
  1501  0E92                     	;# 
  1502  0E94                     	;# 
  1503  0E95                     	;# 
  1504  0E9C                     	;# 
  1505  0E9D                     	;# 
  1506  0E9E                     	;# 
  1507  0E9F                     	;# 
  1508  0EA0                     	;# 
  1509  0EA1                     	;# 
  1510  0EA2                     	;# 
  1511  0EA3                     	;# 
  1512  0EA4                     	;# 
  1513  0EA5                     	;# 
  1514  0EA6                     	;# 
  1515  0EA7                     	;# 
  1516  0F0F                     	;# 
  1517  0F10                     	;# 
  1518  0F11                     	;# 
  1519  0F12                     	;# 
  1520  0F13                     	;# 
  1521  0F14                     	;# 
  1522  0F15                     	;# 
  1523  0F16                     	;# 
  1524  0F17                     	;# 
  1525  0F18                     	;# 
  1526  0F19                     	;# 
  1527  0F1A                     	;# 
  1528  0F1B                     	;# 
  1529  0F1C                     	;# 
  1530  0F1D                     	;# 
  1531  0F1E                     	;# 
  1532  0F1F                     	;# 
  1533  0F20                     	;# 
  1534  0F21                     	;# 
  1535  0F22                     	;# 
  1536  0F23                     	;# 
  1537  0F24                     	;# 
  1538  0F25                     	;# 
  1539  0F26                     	;# 
  1540  0F27                     	;# 
  1541  0F28                     	;# 
  1542  0F29                     	;# 
  1543  0F2A                     	;# 
  1544  0F2B                     	;# 
  1545  0F2C                     	;# 
  1546  0F2D                     	;# 
  1547  0F2E                     	;# 
  1548  0F2F                     	;# 
  1549  0F30                     	;# 
  1550  0F31                     	;# 
  1551  0F32                     	;# 
  1552  0F33                     	;# 
  1553  0F34                     	;# 
  1554  0F35                     	;# 
  1555  0F36                     	;# 
  1556  0F37                     	;# 
  1557  0FE4                     	;# 
  1558  0FE5                     	;# 
  1559  0FE6                     	;# 
  1560  0FE7                     	;# 
  1561  0FE8                     	;# 
  1562  0FE9                     	;# 
  1563  0FEA                     	;# 
  1564  0FEB                     	;# 
  1565  0FED                     	;# 
  1566  0FEE                     	;# 
  1567  0FEF                     	;# 
  1568  0000                     	;# 
  1569  0001                     	;# 
  1570  0002                     	;# 
  1571  0003                     	;# 
  1572  0004                     	;# 
  1573  0005                     	;# 
  1574  0006                     	;# 
  1575  0007                     	;# 
  1576  0008                     	;# 
  1577  0009                     	;# 
  1578  000A                     	;# 
  1579  000B                     	;# 
  1580  000C                     	;# 
  1581  000D                     	;# 
  1582  000E                     	;# 
  1583  0010                     	;# 
  1584  0011                     	;# 
  1585  0012                     	;# 
  1586  0013                     	;# 
  1587  0014                     	;# 
  1588  0015                     	;# 
  1589  0015                     	;# 
  1590  0016                     	;# 
  1591  0016                     	;# 
  1592  0017                     	;# 
  1593  0018                     	;# 
  1594  0019                     	;# 
  1595  0019                     	;# 
  1596  001A                     	;# 
  1597  001B                     	;# 
  1598  001C                     	;# 
  1599  001D                     	;# 
  1600  001E                     	;# 
  1601  001F                     	;# 
  1602  008C                     	;# 
  1603  008D                     	;# 
  1604  008E                     	;# 
  1605  0090                     	;# 
  1606  0091                     	;# 
  1607  0092                     	;# 
  1608  0093                     	;# 
  1609  0094                     	;# 
  1610  0097                     	;# 
  1611  009B                     	;# 
  1612  009B                     	;# 
  1613  009C                     	;# 
  1614  009D                     	;# 
  1615  009E                     	;# 
  1616  009F                     	;# 
  1617  010C                     	;# 
  1618  010D                     	;# 
  1619  010E                     	;# 
  1620  0111                     	;# 
  1621  0112                     	;# 
  1622  0113                     	;# 
  1623  0114                     	;# 
  1624  0115                     	;# 
  1625  0116                     	;# 
  1626  0117                     	;# 
  1627  0118                     	;# 
  1628  0119                     	;# 
  1629  018C                     	;# 
  1630  018D                     	;# 
  1631  018E                     	;# 
  1632  0197                     	;# 
  1633  0199                     	;# 
  1634  0199                     	;# 
  1635  0199                     	;# 
  1636  019A                     	;# 
  1637  019A                     	;# 
  1638  019A                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019C                     	;# 
  1645  019C                     	;# 
  1646  019C                     	;# 
  1647  019D                     	;# 
  1648  019D                     	;# 
  1649  019D                     	;# 
  1650  019E                     	;# 
  1651  019E                     	;# 
  1652  019E                     	;# 
  1653  019F                     	;# 
  1654  019F                     	;# 
  1655  019F                     	;# 
  1656  019F                     	;# 
  1657  019F                     	;# 
  1658  020C                     	;# 
  1659  020D                     	;# 
  1660  020E                     	;# 
  1661  0211                     	;# 
  1662  0211                     	;# 
  1663  0212                     	;# 
  1664  0212                     	;# 
  1665  0213                     	;# 
  1666  0213                     	;# 
  1667  0214                     	;# 
  1668  0214                     	;# 
  1669  0215                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0215                     	;# 
  1673  0216                     	;# 
  1674  0216                     	;# 
  1675  0217                     	;# 
  1676  0217                     	;# 
  1677  0219                     	;# 
  1678  021A                     	;# 
  1679  021B                     	;# 
  1680  021C                     	;# 
  1681  021D                     	;# 
  1682  021D                     	;# 
  1683  021E                     	;# 
  1684  021F                     	;# 
  1685  028C                     	;# 
  1686  028D                     	;# 
  1687  028E                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0294                     	;# 
  1693  0295                     	;# 
  1694  0295                     	;# 
  1695  0296                     	;# 
  1696  0297                     	;# 
  1697  0298                     	;# 
  1698  029F                     	;# 
  1699  030C                     	;# 
  1700  030D                     	;# 
  1701  030E                     	;# 
  1702  0311                     	;# 
  1703  0311                     	;# 
  1704  0312                     	;# 
  1705  0313                     	;# 
  1706  0314                     	;# 
  1707  0315                     	;# 
  1708  0315                     	;# 
  1709  0316                     	;# 
  1710  0317                     	;# 
  1711  0318                     	;# 
  1712  038C                     	;# 
  1713  038D                     	;# 
  1714  038E                     	;# 
  1715  0391                     	;# 
  1716  0392                     	;# 
  1717  0393                     	;# 
  1718  0394                     	;# 
  1719  0395                     	;# 
  1720  0396                     	;# 
  1721  0397                     	;# 
  1722  0398                     	;# 
  1723  0399                     	;# 
  1724  039A                     	;# 
  1725  039C                     	;# 
  1726  039D                     	;# 
  1727  039E                     	;# 
  1728  039F                     	;# 
  1729  0411                     	;# 
  1730  0411                     	;# 
  1731  0412                     	;# 
  1732  0413                     	;# 
  1733  0414                     	;# 
  1734  0415                     	;# 
  1735  0416                     	;# 
  1736  0417                     	;# 
  1737  0418                     	;# 
  1738  0418                     	;# 
  1739  0419                     	;# 
  1740  041A                     	;# 
  1741  041B                     	;# 
  1742  041C                     	;# 
  1743  041D                     	;# 
  1744  041E                     	;# 
  1745  041F                     	;# 
  1746  0498                     	;# 
  1747  0498                     	;# 
  1748  0499                     	;# 
  1749  049A                     	;# 
  1750  049B                     	;# 
  1751  049B                     	;# 
  1752  049C                     	;# 
  1753  049D                     	;# 
  1754  049E                     	;# 
  1755  049F                     	;# 
  1756  0617                     	;# 
  1757  0618                     	;# 
  1758  0619                     	;# 
  1759  0619                     	;# 
  1760  061A                     	;# 
  1761  061B                     	;# 
  1762  061C                     	;# 
  1763  061C                     	;# 
  1764  061F                     	;# 
  1765  0691                     	;# 
  1766  0692                     	;# 
  1767  0693                     	;# 
  1768  0694                     	;# 
  1769  0695                     	;# 
  1770  0696                     	;# 
  1771  0697                     	;# 
  1772  0698                     	;# 
  1773  0699                     	;# 
  1774  0711                     	;# 
  1775  0712                     	;# 
  1776  0713                     	;# 
  1777  0714                     	;# 
  1778  0715                     	;# 
  1779  0716                     	;# 
  1780  0717                     	;# 
  1781  0718                     	;# 
  1782  0719                     	;# 
  1783  0891                     	;# 
  1784  0891                     	;# 
  1785  0891                     	;# 
  1786  0891                     	;# 
  1787  0891                     	;# 
  1788  0891                     	;# 
  1789  0892                     	;# 
  1790  0892                     	;# 
  1791  0892                     	;# 
  1792  0893                     	;# 
  1793  0893                     	;# 
  1794  0893                     	;# 
  1795  0893                     	;# 
  1796  0893                     	;# 
  1797  0893                     	;# 
  1798  0894                     	;# 
  1799  0894                     	;# 
  1800  0894                     	;# 
  1801  0895                     	;# 
  1802  0895                     	;# 
  1803  0895                     	;# 
  1804  0896                     	;# 
  1805  0896                     	;# 
  1806  0896                     	;# 
  1807  089B                     	;# 
  1808  0911                     	;# 
  1809  0912                     	;# 
  1810  0913                     	;# 
  1811  0914                     	;# 
  1812  0915                     	;# 
  1813  0916                     	;# 
  1814  0918                     	;# 
  1815  0919                     	;# 
  1816  091A                     	;# 
  1817  091B                     	;# 
  1818  091C                     	;# 
  1819  091D                     	;# 
  1820  091E                     	;# 
  1821  091F                     	;# 
  1822  0E0F                     	;# 
  1823  0E10                     	;# 
  1824  0E11                     	;# 
  1825  0E12                     	;# 
  1826  0E13                     	;# 
  1827  0E14                     	;# 
  1828  0E15                     	;# 
  1829  0E16                     	;# 
  1830  0E17                     	;# 
  1831  0E18                     	;# 
  1832  0E19                     	;# 
  1833  0E1A                     	;# 
  1834  0E1B                     	;# 
  1835  0E1C                     	;# 
  1836  0E1D                     	;# 
  1837  0E1E                     	;# 
  1838  0E1F                     	;# 
  1839  0E20                     	;# 
  1840  0E21                     	;# 
  1841  0E22                     	;# 
  1842  0E24                     	;# 
  1843  0E25                     	;# 
  1844  0E28                     	;# 
  1845  0E29                     	;# 
  1846  0E2A                     	;# 
  1847  0E2B                     	;# 
  1848  0E2C                     	;# 
  1849  0E2D                     	;# 
  1850  0E2E                     	;# 
  1851  0E2F                     	;# 
  1852  0E90                     	;# 
  1853  0E91                     	;# 
  1854  0E92                     	;# 
  1855  0E94                     	;# 
  1856  0E95                     	;# 
  1857  0E9C                     	;# 
  1858  0E9D                     	;# 
  1859  0E9E                     	;# 
  1860  0E9F                     	;# 
  1861  0EA0                     	;# 
  1862  0EA1                     	;# 
  1863  0EA2                     	;# 
  1864  0EA3                     	;# 
  1865  0EA4                     	;# 
  1866  0EA5                     	;# 
  1867  0EA6                     	;# 
  1868  0EA7                     	;# 
  1869  0F0F                     	;# 
  1870  0F10                     	;# 
  1871  0F11                     	;# 
  1872  0F12                     	;# 
  1873  0F13                     	;# 
  1874  0F14                     	;# 
  1875  0F15                     	;# 
  1876  0F16                     	;# 
  1877  0F17                     	;# 
  1878  0F18                     	;# 
  1879  0F19                     	;# 
  1880  0F1A                     	;# 
  1881  0F1B                     	;# 
  1882  0F1C                     	;# 
  1883  0F1D                     	;# 
  1884  0F1E                     	;# 
  1885  0F1F                     	;# 
  1886  0F20                     	;# 
  1887  0F21                     	;# 
  1888  0F22                     	;# 
  1889  0F23                     	;# 
  1890  0F24                     	;# 
  1891  0F25                     	;# 
  1892  0F26                     	;# 
  1893  0F27                     	;# 
  1894  0F28                     	;# 
  1895  0F29                     	;# 
  1896  0F2A                     	;# 
  1897  0F2B                     	;# 
  1898  0F2C                     	;# 
  1899  0F2D                     	;# 
  1900  0F2E                     	;# 
  1901  0F2F                     	;# 
  1902  0F30                     	;# 
  1903  0F31                     	;# 
  1904  0F32                     	;# 
  1905  0F33                     	;# 
  1906  0F34                     	;# 
  1907  0F35                     	;# 
  1908  0F36                     	;# 
  1909  0F37                     	;# 
  1910  0FE4                     	;# 
  1911  0FE5                     	;# 
  1912  0FE6                     	;# 
  1913  0FE7                     	;# 
  1914  0FE8                     	;# 
  1915  0FE9                     	;# 
  1916  0FEA                     	;# 
  1917  0FEB                     	;# 
  1918  0FED                     	;# 
  1919  0FEE                     	;# 
  1920  0FEF                     	;# 
  1921  0000                     	;# 
  1922  0001                     	;# 
  1923  0002                     	;# 
  1924  0003                     	;# 
  1925  0004                     	;# 
  1926  0005                     	;# 
  1927  0006                     	;# 
  1928  0007                     	;# 
  1929  0008                     	;# 
  1930  0009                     	;# 
  1931  000A                     	;# 
  1932  000B                     	;# 
  1933  000C                     	;# 
  1934  000D                     	;# 
  1935  000E                     	;# 
  1936  0010                     	;# 
  1937  0011                     	;# 
  1938  0012                     	;# 
  1939  0013                     	;# 
  1940  0014                     	;# 
  1941  0015                     	;# 
  1942  0015                     	;# 
  1943  0016                     	;# 
  1944  0016                     	;# 
  1945  0017                     	;# 
  1946  0018                     	;# 
  1947  0019                     	;# 
  1948  0019                     	;# 
  1949  001A                     	;# 
  1950  001B                     	;# 
  1951  001C                     	;# 
  1952  001D                     	;# 
  1953  001E                     	;# 
  1954  001F                     	;# 
  1955  008C                     	;# 
  1956  008D                     	;# 
  1957  008E                     	;# 
  1958  0090                     	;# 
  1959  0091                     	;# 
  1960  0092                     	;# 
  1961  0093                     	;# 
  1962  0094                     	;# 
  1963  0097                     	;# 
  1964  009B                     	;# 
  1965  009B                     	;# 
  1966  009C                     	;# 
  1967  009D                     	;# 
  1968  009E                     	;# 
  1969  009F                     	;# 
  1970  010C                     	;# 
  1971  010D                     	;# 
  1972  010E                     	;# 
  1973  0111                     	;# 
  1974  0112                     	;# 
  1975  0113                     	;# 
  1976  0114                     	;# 
  1977  0115                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  0118                     	;# 
  1981  0119                     	;# 
  1982  018C                     	;# 
  1983  018D                     	;# 
  1984  018E                     	;# 
  1985  0197                     	;# 
  1986  0199                     	;# 
  1987  0199                     	;# 
  1988  0199                     	;# 
  1989  019A                     	;# 
  1990  019A                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019D                     	;# 
  2002  019D                     	;# 
  2003  019E                     	;# 
  2004  019E                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  019F                     	;# 
  2008  019F                     	;# 
  2009  019F                     	;# 
  2010  019F                     	;# 
  2011  020C                     	;# 
  2012  020D                     	;# 
  2013  020E                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0219                     	;# 
  2031  021A                     	;# 
  2032  021B                     	;# 
  2033  021C                     	;# 
  2034  021D                     	;# 
  2035  021D                     	;# 
  2036  021E                     	;# 
  2037  021F                     	;# 
  2038  028C                     	;# 
  2039  028D                     	;# 
  2040  028E                     	;# 
  2041  0291                     	;# 
  2042  0291                     	;# 
  2043  0292                     	;# 
  2044  0293                     	;# 
  2045  0294                     	;# 
  2046  0295                     	;# 
  2047  0295                     	;# 
  2048  0296                     	;# 
  2049  0297                     	;# 
  2050  0298                     	;# 
  2051  029F                     	;# 
  2052  030C                     	;# 
  2053  030D                     	;# 
  2054  030E                     	;# 
  2055  0311                     	;# 
  2056  0311                     	;# 
  2057  0312                     	;# 
  2058  0313                     	;# 
  2059  0314                     	;# 
  2060  0315                     	;# 
  2061  0315                     	;# 
  2062  0316                     	;# 
  2063  0317                     	;# 
  2064  0318                     	;# 
  2065  038C                     	;# 
  2066  038D                     	;# 
  2067  038E                     	;# 
  2068  0391                     	;# 
  2069  0392                     	;# 
  2070  0393                     	;# 
  2071  0394                     	;# 
  2072  0395                     	;# 
  2073  0396                     	;# 
  2074  0397                     	;# 
  2075  0398                     	;# 
  2076  0399                     	;# 
  2077  039A                     	;# 
  2078  039C                     	;# 
  2079  039D                     	;# 
  2080  039E                     	;# 
  2081  039F                     	;# 
  2082  0411                     	;# 
  2083  0411                     	;# 
  2084  0412                     	;# 
  2085  0413                     	;# 
  2086  0414                     	;# 
  2087  0415                     	;# 
  2088  0416                     	;# 
  2089  0417                     	;# 
  2090  0418                     	;# 
  2091  0418                     	;# 
  2092  0419                     	;# 
  2093  041A                     	;# 
  2094  041B                     	;# 
  2095  041C                     	;# 
  2096  041D                     	;# 
  2097  041E                     	;# 
  2098  041F                     	;# 
  2099  0498                     	;# 
  2100  0498                     	;# 
  2101  0499                     	;# 
  2102  049A                     	;# 
  2103  049B                     	;# 
  2104  049B                     	;# 
  2105  049C                     	;# 
  2106  049D                     	;# 
  2107  049E                     	;# 
  2108  049F                     	;# 
  2109  0617                     	;# 
  2110  0618                     	;# 
  2111  0619                     	;# 
  2112  0619                     	;# 
  2113  061A                     	;# 
  2114  061B                     	;# 
  2115  061C                     	;# 
  2116  061C                     	;# 
  2117  061F                     	;# 
  2118  0691                     	;# 
  2119  0692                     	;# 
  2120  0693                     	;# 
  2121  0694                     	;# 
  2122  0695                     	;# 
  2123  0696                     	;# 
  2124  0697                     	;# 
  2125  0698                     	;# 
  2126  0699                     	;# 
  2127  0711                     	;# 
  2128  0712                     	;# 
  2129  0713                     	;# 
  2130  0714                     	;# 
  2131  0715                     	;# 
  2132  0716                     	;# 
  2133  0717                     	;# 
  2134  0718                     	;# 
  2135  0719                     	;# 
  2136  0891                     	;# 
  2137  0891                     	;# 
  2138  0891                     	;# 
  2139  0891                     	;# 
  2140  0891                     	;# 
  2141  0891                     	;# 
  2142  0892                     	;# 
  2143  0892                     	;# 
  2144  0892                     	;# 
  2145  0893                     	;# 
  2146  0893                     	;# 
  2147  0893                     	;# 
  2148  0893                     	;# 
  2149  0893                     	;# 
  2150  0893                     	;# 
  2151  0894                     	;# 
  2152  0894                     	;# 
  2153  0894                     	;# 
  2154  0895                     	;# 
  2155  0895                     	;# 
  2156  0895                     	;# 
  2157  0896                     	;# 
  2158  0896                     	;# 
  2159  0896                     	;# 
  2160  089B                     	;# 
  2161  0911                     	;# 
  2162  0912                     	;# 
  2163  0913                     	;# 
  2164  0914                     	;# 
  2165  0915                     	;# 
  2166  0916                     	;# 
  2167  0918                     	;# 
  2168  0919                     	;# 
  2169  091A                     	;# 
  2170  091B                     	;# 
  2171  091C                     	;# 
  2172  091D                     	;# 
  2173  091E                     	;# 
  2174  091F                     	;# 
  2175  0E0F                     	;# 
  2176  0E10                     	;# 
  2177  0E11                     	;# 
  2178  0E12                     	;# 
  2179  0E13                     	;# 
  2180  0E14                     	;# 
  2181  0E15                     	;# 
  2182  0E16                     	;# 
  2183  0E17                     	;# 
  2184  0E18                     	;# 
  2185  0E19                     	;# 
  2186  0E1A                     	;# 
  2187  0E1B                     	;# 
  2188  0E1C                     	;# 
  2189  0E1D                     	;# 
  2190  0E1E                     	;# 
  2191  0E1F                     	;# 
  2192  0E20                     	;# 
  2193  0E21                     	;# 
  2194  0E22                     	;# 
  2195  0E24                     	;# 
  2196  0E25                     	;# 
  2197  0E28                     	;# 
  2198  0E29                     	;# 
  2199  0E2A                     	;# 
  2200  0E2B                     	;# 
  2201  0E2C                     	;# 
  2202  0E2D                     	;# 
  2203  0E2E                     	;# 
  2204  0E2F                     	;# 
  2205  0E90                     	;# 
  2206  0E91                     	;# 
  2207  0E92                     	;# 
  2208  0E94                     	;# 
  2209  0E95                     	;# 
  2210  0E9C                     	;# 
  2211  0E9D                     	;# 
  2212  0E9E                     	;# 
  2213  0E9F                     	;# 
  2214  0EA0                     	;# 
  2215  0EA1                     	;# 
  2216  0EA2                     	;# 
  2217  0EA3                     	;# 
  2218  0EA4                     	;# 
  2219  0EA5                     	;# 
  2220  0EA6                     	;# 
  2221  0EA7                     	;# 
  2222  0F0F                     	;# 
  2223  0F10                     	;# 
  2224  0F11                     	;# 
  2225  0F12                     	;# 
  2226  0F13                     	;# 
  2227  0F14                     	;# 
  2228  0F15                     	;# 
  2229  0F16                     	;# 
  2230  0F17                     	;# 
  2231  0F18                     	;# 
  2232  0F19                     	;# 
  2233  0F1A                     	;# 
  2234  0F1B                     	;# 
  2235  0F1C                     	;# 
  2236  0F1D                     	;# 
  2237  0F1E                     	;# 
  2238  0F1F                     	;# 
  2239  0F20                     	;# 
  2240  0F21                     	;# 
  2241  0F22                     	;# 
  2242  0F23                     	;# 
  2243  0F24                     	;# 
  2244  0F25                     	;# 
  2245  0F26                     	;# 
  2246  0F27                     	;# 
  2247  0F28                     	;# 
  2248  0F29                     	;# 
  2249  0F2A                     	;# 
  2250  0F2B                     	;# 
  2251  0F2C                     	;# 
  2252  0F2D                     	;# 
  2253  0F2E                     	;# 
  2254  0F2F                     	;# 
  2255  0F30                     	;# 
  2256  0F31                     	;# 
  2257  0F32                     	;# 
  2258  0F33                     	;# 
  2259  0F34                     	;# 
  2260  0F35                     	;# 
  2261  0F36                     	;# 
  2262  0F37                     	;# 
  2263  0FE4                     	;# 
  2264  0FE5                     	;# 
  2265  0FE6                     	;# 
  2266  0FE7                     	;# 
  2267  0FE8                     	;# 
  2268  0FE9                     	;# 
  2269  0FEA                     	;# 
  2270  0FEB                     	;# 
  2271  0FED                     	;# 
  2272  0FEE                     	;# 
  2273  0FEF                     	;# 
  2274  0000                     	;# 
  2275  0001                     	;# 
  2276  0002                     	;# 
  2277  0003                     	;# 
  2278  0004                     	;# 
  2279  0005                     	;# 
  2280  0006                     	;# 
  2281  0007                     	;# 
  2282  0008                     	;# 
  2283  0009                     	;# 
  2284  000A                     	;# 
  2285  000B                     	;# 
  2286  000C                     	;# 
  2287  000D                     	;# 
  2288  000E                     	;# 
  2289  0010                     	;# 
  2290  0011                     	;# 
  2291  0012                     	;# 
  2292  0013                     	;# 
  2293  0014                     	;# 
  2294  0015                     	;# 
  2295  0015                     	;# 
  2296  0016                     	;# 
  2297  0016                     	;# 
  2298  0017                     	;# 
  2299  0018                     	;# 
  2300  0019                     	;# 
  2301  0019                     	;# 
  2302  001A                     	;# 
  2303  001B                     	;# 
  2304  001C                     	;# 
  2305  001D                     	;# 
  2306  001E                     	;# 
  2307  001F                     	;# 
  2308  008C                     	;# 
  2309  008D                     	;# 
  2310  008E                     	;# 
  2311  0090                     	;# 
  2312  0091                     	;# 
  2313  0092                     	;# 
  2314  0093                     	;# 
  2315  0094                     	;# 
  2316  0097                     	;# 
  2317  009B                     	;# 
  2318  009B                     	;# 
  2319  009C                     	;# 
  2320  009D                     	;# 
  2321  009E                     	;# 
  2322  009F                     	;# 
  2323  010C                     	;# 
  2324  010D                     	;# 
  2325  010E                     	;# 
  2326  0111                     	;# 
  2327  0112                     	;# 
  2328  0113                     	;# 
  2329  0114                     	;# 
  2330  0115                     	;# 
  2331  0116                     	;# 
  2332  0117                     	;# 
  2333  0118                     	;# 
  2334  0119                     	;# 
  2335  018C                     	;# 
  2336  018D                     	;# 
  2337  018E                     	;# 
  2338  0197                     	;# 
  2339  0199                     	;# 
  2340  0199                     	;# 
  2341  0199                     	;# 
  2342  019A                     	;# 
  2343  019A                     	;# 
  2344  019A                     	;# 
  2345  019B                     	;# 
  2346  019B                     	;# 
  2347  019B                     	;# 
  2348  019B                     	;# 
  2349  019B                     	;# 
  2350  019C                     	;# 
  2351  019C                     	;# 
  2352  019C                     	;# 
  2353  019D                     	;# 
  2354  019D                     	;# 
  2355  019D                     	;# 
  2356  019E                     	;# 
  2357  019E                     	;# 
  2358  019E                     	;# 
  2359  019F                     	;# 
  2360  019F                     	;# 
  2361  019F                     	;# 
  2362  019F                     	;# 
  2363  019F                     	;# 
  2364  020C                     	;# 
  2365  020D                     	;# 
  2366  020E                     	;# 
  2367  0211                     	;# 
  2368  0211                     	;# 
  2369  0212                     	;# 
  2370  0212                     	;# 
  2371  0213                     	;# 
  2372  0213                     	;# 
  2373  0214                     	;# 
  2374  0214                     	;# 
  2375  0215                     	;# 
  2376  0215                     	;# 
  2377  0215                     	;# 
  2378  0215                     	;# 
  2379  0216                     	;# 
  2380  0216                     	;# 
  2381  0217                     	;# 
  2382  0217                     	;# 
  2383  0219                     	;# 
  2384  021A                     	;# 
  2385  021B                     	;# 
  2386  021C                     	;# 
  2387  021D                     	;# 
  2388  021D                     	;# 
  2389  021E                     	;# 
  2390  021F                     	;# 
  2391  028C                     	;# 
  2392  028D                     	;# 
  2393  028E                     	;# 
  2394  0291                     	;# 
  2395  0291                     	;# 
  2396  0292                     	;# 
  2397  0293                     	;# 
  2398  0294                     	;# 
  2399  0295                     	;# 
  2400  0295                     	;# 
  2401  0296                     	;# 
  2402  0297                     	;# 
  2403  0298                     	;# 
  2404  029F                     	;# 
  2405  030C                     	;# 
  2406  030D                     	;# 
  2407  030E                     	;# 
  2408  0311                     	;# 
  2409  0311                     	;# 
  2410  0312                     	;# 
  2411  0313                     	;# 
  2412  0314                     	;# 
  2413  0315                     	;# 
  2414  0315                     	;# 
  2415  0316                     	;# 
  2416  0317                     	;# 
  2417  0318                     	;# 
  2418  038C                     	;# 
  2419  038D                     	;# 
  2420  038E                     	;# 
  2421  0391                     	;# 
  2422  0392                     	;# 
  2423  0393                     	;# 
  2424  0394                     	;# 
  2425  0395                     	;# 
  2426  0396                     	;# 
  2427  0397                     	;# 
  2428  0398                     	;# 
  2429  0399                     	;# 
  2430  039A                     	;# 
  2431  039C                     	;# 
  2432  039D                     	;# 
  2433  039E                     	;# 
  2434  039F                     	;# 
  2435  0411                     	;# 
  2436  0411                     	;# 
  2437  0412                     	;# 
  2438  0413                     	;# 
  2439  0414                     	;# 
  2440  0415                     	;# 
  2441  0416                     	;# 
  2442  0417                     	;# 
  2443  0418                     	;# 
  2444  0418                     	;# 
  2445  0419                     	;# 
  2446  041A                     	;# 
  2447  041B                     	;# 
  2448  041C                     	;# 
  2449  041D                     	;# 
  2450  041E                     	;# 
  2451  041F                     	;# 
  2452  0498                     	;# 
  2453  0498                     	;# 
  2454  0499                     	;# 
  2455  049A                     	;# 
  2456  049B                     	;# 
  2457  049B                     	;# 
  2458  049C                     	;# 
  2459  049D                     	;# 
  2460  049E                     	;# 
  2461  049F                     	;# 
  2462  0617                     	;# 
  2463  0618                     	;# 
  2464  0619                     	;# 
  2465  0619                     	;# 
  2466  061A                     	;# 
  2467  061B                     	;# 
  2468  061C                     	;# 
  2469  061C                     	;# 
  2470  061F                     	;# 
  2471  0691                     	;# 
  2472  0692                     	;# 
  2473  0693                     	;# 
  2474  0694                     	;# 
  2475  0695                     	;# 
  2476  0696                     	;# 
  2477  0697                     	;# 
  2478  0698                     	;# 
  2479  0699                     	;# 
  2480  0711                     	;# 
  2481  0712                     	;# 
  2482  0713                     	;# 
  2483  0714                     	;# 
  2484  0715                     	;# 
  2485  0716                     	;# 
  2486  0717                     	;# 
  2487  0718                     	;# 
  2488  0719                     	;# 
  2489  0891                     	;# 
  2490  0891                     	;# 
  2491  0891                     	;# 
  2492  0891                     	;# 
  2493  0891                     	;# 
  2494  0891                     	;# 
  2495  0892                     	;# 
  2496  0892                     	;# 
  2497  0892                     	;# 
  2498  0893                     	;# 
  2499  0893                     	;# 
  2500  0893                     	;# 
  2501  0893                     	;# 
  2502  0893                     	;# 
  2503  0893                     	;# 
  2504  0894                     	;# 
  2505  0894                     	;# 
  2506  0894                     	;# 
  2507  0895                     	;# 
  2508  0895                     	;# 
  2509  0895                     	;# 
  2510  0896                     	;# 
  2511  0896                     	;# 
  2512  0896                     	;# 
  2513  089B                     	;# 
  2514  0911                     	;# 
  2515  0912                     	;# 
  2516  0913                     	;# 
  2517  0914                     	;# 
  2518  0915                     	;# 
  2519  0916                     	;# 
  2520  0918                     	;# 
  2521  0919                     	;# 
  2522  091A                     	;# 
  2523  091B                     	;# 
  2524  091C                     	;# 
  2525  091D                     	;# 
  2526  091E                     	;# 
  2527  091F                     	;# 
  2528  0E0F                     	;# 
  2529  0E10                     	;# 
  2530  0E11                     	;# 
  2531  0E12                     	;# 
  2532  0E13                     	;# 
  2533  0E14                     	;# 
  2534  0E15                     	;# 
  2535  0E16                     	;# 
  2536  0E17                     	;# 
  2537  0E18                     	;# 
  2538  0E19                     	;# 
  2539  0E1A                     	;# 
  2540  0E1B                     	;# 
  2541  0E1C                     	;# 
  2542  0E1D                     	;# 
  2543  0E1E                     	;# 
  2544  0E1F                     	;# 
  2545  0E20                     	;# 
  2546  0E21                     	;# 
  2547  0E22                     	;# 
  2548  0E24                     	;# 
  2549  0E25                     	;# 
  2550  0E28                     	;# 
  2551  0E29                     	;# 
  2552  0E2A                     	;# 
  2553  0E2B                     	;# 
  2554  0E2C                     	;# 
  2555  0E2D                     	;# 
  2556  0E2E                     	;# 
  2557  0E2F                     	;# 
  2558  0E90                     	;# 
  2559  0E91                     	;# 
  2560  0E92                     	;# 
  2561  0E94                     	;# 
  2562  0E95                     	;# 
  2563  0E9C                     	;# 
  2564  0E9D                     	;# 
  2565  0E9E                     	;# 
  2566  0E9F                     	;# 
  2567  0EA0                     	;# 
  2568  0EA1                     	;# 
  2569  0EA2                     	;# 
  2570  0EA3                     	;# 
  2571  0EA4                     	;# 
  2572  0EA5                     	;# 
  2573  0EA6                     	;# 
  2574  0EA7                     	;# 
  2575  0F0F                     	;# 
  2576  0F10                     	;# 
  2577  0F11                     	;# 
  2578  0F12                     	;# 
  2579  0F13                     	;# 
  2580  0F14                     	;# 
  2581  0F15                     	;# 
  2582  0F16                     	;# 
  2583  0F17                     	;# 
  2584  0F18                     	;# 
  2585  0F19                     	;# 
  2586  0F1A                     	;# 
  2587  0F1B                     	;# 
  2588  0F1C                     	;# 
  2589  0F1D                     	;# 
  2590  0F1E                     	;# 
  2591  0F1F                     	;# 
  2592  0F20                     	;# 
  2593  0F21                     	;# 
  2594  0F22                     	;# 
  2595  0F23                     	;# 
  2596  0F24                     	;# 
  2597  0F25                     	;# 
  2598  0F26                     	;# 
  2599  0F27                     	;# 
  2600  0F28                     	;# 
  2601  0F29                     	;# 
  2602  0F2A                     	;# 
  2603  0F2B                     	;# 
  2604  0F2C                     	;# 
  2605  0F2D                     	;# 
  2606  0F2E                     	;# 
  2607  0F2F                     	;# 
  2608  0F30                     	;# 
  2609  0F31                     	;# 
  2610  0F32                     	;# 
  2611  0F33                     	;# 
  2612  0F34                     	;# 
  2613  0F35                     	;# 
  2614  0F36                     	;# 
  2615  0F37                     	;# 
  2616  0FE4                     	;# 
  2617  0FE5                     	;# 
  2618  0FE6                     	;# 
  2619  0FE7                     	;# 
  2620  0FE8                     	;# 
  2621  0FE9                     	;# 
  2622  0FEA                     	;# 
  2623  0FEB                     	;# 
  2624  0FED                     	;# 
  2625  0FEE                     	;# 
  2626  0FEF                     	;# 
  2627  0000                     	;# 
  2628  0001                     	;# 
  2629  0002                     	;# 
  2630  0003                     	;# 
  2631  0004                     	;# 
  2632  0005                     	;# 
  2633  0006                     	;# 
  2634  0007                     	;# 
  2635  0008                     	;# 
  2636  0009                     	;# 
  2637  000A                     	;# 
  2638  000B                     	;# 
  2639  000C                     	;# 
  2640  000D                     	;# 
  2641  000E                     	;# 
  2642  0010                     	;# 
  2643  0011                     	;# 
  2644  0012                     	;# 
  2645  0013                     	;# 
  2646  0014                     	;# 
  2647  0015                     	;# 
  2648  0015                     	;# 
  2649  0016                     	;# 
  2650  0016                     	;# 
  2651  0017                     	;# 
  2652  0018                     	;# 
  2653  0019                     	;# 
  2654  0019                     	;# 
  2655  001A                     	;# 
  2656  001B                     	;# 
  2657  001C                     	;# 
  2658  001D                     	;# 
  2659  001E                     	;# 
  2660  001F                     	;# 
  2661  008C                     	;# 
  2662  008D                     	;# 
  2663  008E                     	;# 
  2664  0090                     	;# 
  2665  0091                     	;# 
  2666  0092                     	;# 
  2667  0093                     	;# 
  2668  0094                     	;# 
  2669  0097                     	;# 
  2670  009B                     	;# 
  2671  009B                     	;# 
  2672  009C                     	;# 
  2673  009D                     	;# 
  2674  009E                     	;# 
  2675  009F                     	;# 
  2676  010C                     	;# 
  2677  010D                     	;# 
  2678  010E                     	;# 
  2679  0111                     	;# 
  2680  0112                     	;# 
  2681  0113                     	;# 
  2682  0114                     	;# 
  2683  0115                     	;# 
  2684  0116                     	;# 
  2685  0117                     	;# 
  2686  0118                     	;# 
  2687  0119                     	;# 
  2688  018C                     	;# 
  2689  018D                     	;# 
  2690  018E                     	;# 
  2691  0197                     	;# 
  2692  0199                     	;# 
  2693  0199                     	;# 
  2694  0199                     	;# 
  2695  019A                     	;# 
  2696  019A                     	;# 
  2697  019A                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019B                     	;# 
  2701  019B                     	;# 
  2702  019B                     	;# 
  2703  019C                     	;# 
  2704  019C                     	;# 
  2705  019C                     	;# 
  2706  019D                     	;# 
  2707  019D                     	;# 
  2708  019D                     	;# 
  2709  019E                     	;# 
  2710  019E                     	;# 
  2711  019E                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  019F                     	;# 
  2715  019F                     	;# 
  2716  019F                     	;# 
  2717  020C                     	;# 
  2718  020D                     	;# 
  2719  020E                     	;# 
  2720  0211                     	;# 
  2721  0211                     	;# 
  2722  0212                     	;# 
  2723  0212                     	;# 
  2724  0213                     	;# 
  2725  0213                     	;# 
  2726  0214                     	;# 
  2727  0214                     	;# 
  2728  0215                     	;# 
  2729  0215                     	;# 
  2730  0215                     	;# 
  2731  0215                     	;# 
  2732  0216                     	;# 
  2733  0216                     	;# 
  2734  0217                     	;# 
  2735  0217                     	;# 
  2736  0219                     	;# 
  2737  021A                     	;# 
  2738  021B                     	;# 
  2739  021C                     	;# 
  2740  021D                     	;# 
  2741  021D                     	;# 
  2742  021E                     	;# 
  2743  021F                     	;# 
  2744  028C                     	;# 
  2745  028D                     	;# 
  2746  028E                     	;# 
  2747  0291                     	;# 
  2748  0291                     	;# 
  2749  0292                     	;# 
  2750  0293                     	;# 
  2751  0294                     	;# 
  2752  0295                     	;# 
  2753  0295                     	;# 
  2754  0296                     	;# 
  2755  0297                     	;# 
  2756  0298                     	;# 
  2757  029F                     	;# 
  2758  030C                     	;# 
  2759  030D                     	;# 
  2760  030E                     	;# 
  2761  0311                     	;# 
  2762  0311                     	;# 
  2763  0312                     	;# 
  2764  0313                     	;# 
  2765  0314                     	;# 
  2766  0315                     	;# 
  2767  0315                     	;# 
  2768  0316                     	;# 
  2769  0317                     	;# 
  2770  0318                     	;# 
  2771  038C                     	;# 
  2772  038D                     	;# 
  2773  038E                     	;# 
  2774  0391                     	;# 
  2775  0392                     	;# 
  2776  0393                     	;# 
  2777  0394                     	;# 
  2778  0395                     	;# 
  2779  0396                     	;# 
  2780  0397                     	;# 
  2781  0398                     	;# 
  2782  0399                     	;# 
  2783  039A                     	;# 
  2784  039C                     	;# 
  2785  039D                     	;# 
  2786  039E                     	;# 
  2787  039F                     	;# 
  2788  0411                     	;# 
  2789  0411                     	;# 
  2790  0412                     	;# 
  2791  0413                     	;# 
  2792  0414                     	;# 
  2793  0415                     	;# 
  2794  0416                     	;# 
  2795  0417                     	;# 
  2796  0418                     	;# 
  2797  0418                     	;# 
  2798  0419                     	;# 
  2799  041A                     	;# 
  2800  041B                     	;# 
  2801  041C                     	;# 
  2802  041D                     	;# 
  2803  041E                     	;# 
  2804  041F                     	;# 
  2805  0498                     	;# 
  2806  0498                     	;# 
  2807  0499                     	;# 
  2808  049A                     	;# 
  2809  049B                     	;# 
  2810  049B                     	;# 
  2811  049C                     	;# 
  2812  049D                     	;# 
  2813  049E                     	;# 
  2814  049F                     	;# 
  2815  0617                     	;# 
  2816  0618                     	;# 
  2817  0619                     	;# 
  2818  0619                     	;# 
  2819  061A                     	;# 
  2820  061B                     	;# 
  2821  061C                     	;# 
  2822  061C                     	;# 
  2823  061F                     	;# 
  2824  0691                     	;# 
  2825  0692                     	;# 
  2826  0693                     	;# 
  2827  0694                     	;# 
  2828  0695                     	;# 
  2829  0696                     	;# 
  2830  0697                     	;# 
  2831  0698                     	;# 
  2832  0699                     	;# 
  2833  0711                     	;# 
  2834  0712                     	;# 
  2835  0713                     	;# 
  2836  0714                     	;# 
  2837  0715                     	;# 
  2838  0716                     	;# 
  2839  0717                     	;# 
  2840  0718                     	;# 
  2841  0719                     	;# 
  2842  0891                     	;# 
  2843  0891                     	;# 
  2844  0891                     	;# 
  2845  0891                     	;# 
  2846  0891                     	;# 
  2847  0891                     	;# 
  2848  0892                     	;# 
  2849  0892                     	;# 
  2850  0892                     	;# 
  2851  0893                     	;# 
  2852  0893                     	;# 
  2853  0893                     	;# 
  2854  0893                     	;# 
  2855  0893                     	;# 
  2856  0893                     	;# 
  2857  0894                     	;# 
  2858  0894                     	;# 
  2859  0894                     	;# 
  2860  0895                     	;# 
  2861  0895                     	;# 
  2862  0895                     	;# 
  2863  0896                     	;# 
  2864  0896                     	;# 
  2865  0896                     	;# 
  2866  089B                     	;# 
  2867  0911                     	;# 
  2868  0912                     	;# 
  2869  0913                     	;# 
  2870  0914                     	;# 
  2871  0915                     	;# 
  2872  0916                     	;# 
  2873  0918                     	;# 
  2874  0919                     	;# 
  2875  091A                     	;# 
  2876  091B                     	;# 
  2877  091C                     	;# 
  2878  091D                     	;# 
  2879  091E                     	;# 
  2880  091F                     	;# 
  2881  0E0F                     	;# 
  2882  0E10                     	;# 
  2883  0E11                     	;# 
  2884  0E12                     	;# 
  2885  0E13                     	;# 
  2886  0E14                     	;# 
  2887  0E15                     	;# 
  2888  0E16                     	;# 
  2889  0E17                     	;# 
  2890  0E18                     	;# 
  2891  0E19                     	;# 
  2892  0E1A                     	;# 
  2893  0E1B                     	;# 
  2894  0E1C                     	;# 
  2895  0E1D                     	;# 
  2896  0E1E                     	;# 
  2897  0E1F                     	;# 
  2898  0E20                     	;# 
  2899  0E21                     	;# 
  2900  0E22                     	;# 
  2901  0E24                     	;# 
  2902  0E25                     	;# 
  2903  0E28                     	;# 
  2904  0E29                     	;# 
  2905  0E2A                     	;# 
  2906  0E2B                     	;# 
  2907  0E2C                     	;# 
  2908  0E2D                     	;# 
  2909  0E2E                     	;# 
  2910  0E2F                     	;# 
  2911  0E90                     	;# 
  2912  0E91                     	;# 
  2913  0E92                     	;# 
  2914  0E94                     	;# 
  2915  0E95                     	;# 
  2916  0E9C                     	;# 
  2917  0E9D                     	;# 
  2918  0E9E                     	;# 
  2919  0E9F                     	;# 
  2920  0EA0                     	;# 
  2921  0EA1                     	;# 
  2922  0EA2                     	;# 
  2923  0EA3                     	;# 
  2924  0EA4                     	;# 
  2925  0EA5                     	;# 
  2926  0EA6                     	;# 
  2927  0EA7                     	;# 
  2928  0F0F                     	;# 
  2929  0F10                     	;# 
  2930  0F11                     	;# 
  2931  0F12                     	;# 
  2932  0F13                     	;# 
  2933  0F14                     	;# 
  2934  0F15                     	;# 
  2935  0F16                     	;# 
  2936  0F17                     	;# 
  2937  0F18                     	;# 
  2938  0F19                     	;# 
  2939  0F1A                     	;# 
  2940  0F1B                     	;# 
  2941  0F1C                     	;# 
  2942  0F1D                     	;# 
  2943  0F1E                     	;# 
  2944  0F1F                     	;# 
  2945  0F20                     	;# 
  2946  0F21                     	;# 
  2947  0F22                     	;# 
  2948  0F23                     	;# 
  2949  0F24                     	;# 
  2950  0F25                     	;# 
  2951  0F26                     	;# 
  2952  0F27                     	;# 
  2953  0F28                     	;# 
  2954  0F29                     	;# 
  2955  0F2A                     	;# 
  2956  0F2B                     	;# 
  2957  0F2C                     	;# 
  2958  0F2D                     	;# 
  2959  0F2E                     	;# 
  2960  0F2F                     	;# 
  2961  0F30                     	;# 
  2962  0F31                     	;# 
  2963  0F32                     	;# 
  2964  0F33                     	;# 
  2965  0F34                     	;# 
  2966  0F35                     	;# 
  2967  0F36                     	;# 
  2968  0F37                     	;# 
  2969  0FE4                     	;# 
  2970  0FE5                     	;# 
  2971  0FE6                     	;# 
  2972  0FE7                     	;# 
  2973  0FE8                     	;# 
  2974  0FE9                     	;# 
  2975  0FEA                     	;# 
  2976  0FEB                     	;# 
  2977  0FED                     	;# 
  2978  0FEE                     	;# 
  2979  0FEF                     	;# 
  2980  0000                     	;# 
  2981  0001                     	;# 
  2982  0002                     	;# 
  2983  0003                     	;# 
  2984  0004                     	;# 
  2985  0005                     	;# 
  2986  0006                     	;# 
  2987  0007                     	;# 
  2988  0008                     	;# 
  2989  0009                     	;# 
  2990  000A                     	;# 
  2991  000B                     	;# 
  2992  000C                     	;# 
  2993  000D                     	;# 
  2994  000E                     	;# 
  2995  0010                     	;# 
  2996  0011                     	;# 
  2997  0012                     	;# 
  2998  0013                     	;# 
  2999  0014                     	;# 
  3000  0015                     	;# 
  3001  0015                     	;# 
  3002  0016                     	;# 
  3003  0016                     	;# 
  3004  0017                     	;# 
  3005  0018                     	;# 
  3006  0019                     	;# 
  3007  0019                     	;# 
  3008  001A                     	;# 
  3009  001B                     	;# 
  3010  001C                     	;# 
  3011  001D                     	;# 
  3012  001E                     	;# 
  3013  001F                     	;# 
  3014  008C                     	;# 
  3015  008D                     	;# 
  3016  008E                     	;# 
  3017  0090                     	;# 
  3018  0091                     	;# 
  3019  0092                     	;# 
  3020  0093                     	;# 
  3021  0094                     	;# 
  3022  0097                     	;# 
  3023  009B                     	;# 
  3024  009B                     	;# 
  3025  009C                     	;# 
  3026  009D                     	;# 
  3027  009E                     	;# 
  3028  009F                     	;# 
  3029  010C                     	;# 
  3030  010D                     	;# 
  3031  010E                     	;# 
  3032  0111                     	;# 
  3033  0112                     	;# 
  3034  0113                     	;# 
  3035  0114                     	;# 
  3036  0115                     	;# 
  3037  0116                     	;# 
  3038  0117                     	;# 
  3039  0118                     	;# 
  3040  0119                     	;# 
  3041  018C                     	;# 
  3042  018D                     	;# 
  3043  018E                     	;# 
  3044  0197                     	;# 
  3045  0199                     	;# 
  3046  0199                     	;# 
  3047  0199                     	;# 
  3048  019A                     	;# 
  3049  019A                     	;# 
  3050  019A                     	;# 
  3051  019B                     	;# 
  3052  019B                     	;# 
  3053  019B                     	;# 
  3054  019B                     	;# 
  3055  019B                     	;# 
  3056  019C                     	;# 
  3057  019C                     	;# 
  3058  019C                     	;# 
  3059  019D                     	;# 
  3060  019D                     	;# 
  3061  019D                     	;# 
  3062  019E                     	;# 
  3063  019E                     	;# 
  3064  019E                     	;# 
  3065  019F                     	;# 
  3066  019F                     	;# 
  3067  019F                     	;# 
  3068  019F                     	;# 
  3069  019F                     	;# 
  3070  020C                     	;# 
  3071  020D                     	;# 
  3072  020E                     	;# 
  3073  0211                     	;# 
  3074  0211                     	;# 
  3075  0212                     	;# 
  3076  0212                     	;# 
  3077  0213                     	;# 
  3078  0213                     	;# 
  3079  0214                     	;# 
  3080  0214                     	;# 
  3081  0215                     	;# 
  3082  0215                     	;# 
  3083  0215                     	;# 
  3084  0215                     	;# 
  3085  0216                     	;# 
  3086  0216                     	;# 
  3087  0217                     	;# 
  3088  0217                     	;# 
  3089  0219                     	;# 
  3090  021A                     	;# 
  3091  021B                     	;# 
  3092  021C                     	;# 
  3093  021D                     	;# 
  3094  021D                     	;# 
  3095  021E                     	;# 
  3096  021F                     	;# 
  3097  028C                     	;# 
  3098  028D                     	;# 
  3099  028E                     	;# 
  3100  0291                     	;# 
  3101  0291                     	;# 
  3102  0292                     	;# 
  3103  0293                     	;# 
  3104  0294                     	;# 
  3105  0295                     	;# 
  3106  0295                     	;# 
  3107  0296                     	;# 
  3108  0297                     	;# 
  3109  0298                     	;# 
  3110  029F                     	;# 
  3111  030C                     	;# 
  3112  030D                     	;# 
  3113  030E                     	;# 
  3114  0311                     	;# 
  3115  0311                     	;# 
  3116  0312                     	;# 
  3117  0313                     	;# 
  3118  0314                     	;# 
  3119  0315                     	;# 
  3120  0315                     	;# 
  3121  0316                     	;# 
  3122  0317                     	;# 
  3123  0318                     	;# 
  3124  038C                     	;# 
  3125  038D                     	;# 
  3126  038E                     	;# 
  3127  0391                     	;# 
  3128  0392                     	;# 
  3129  0393                     	;# 
  3130  0394                     	;# 
  3131  0395                     	;# 
  3132  0396                     	;# 
  3133  0397                     	;# 
  3134  0398                     	;# 
  3135  0399                     	;# 
  3136  039A                     	;# 
  3137  039C                     	;# 
  3138  039D                     	;# 
  3139  039E                     	;# 
  3140  039F                     	;# 
  3141  0411                     	;# 
  3142  0411                     	;# 
  3143  0412                     	;# 
  3144  0413                     	;# 
  3145  0414                     	;# 
  3146  0415                     	;# 
  3147  0416                     	;# 
  3148  0417                     	;# 
  3149  0418                     	;# 
  3150  0418                     	;# 
  3151  0419                     	;# 
  3152  041A                     	;# 
  3153  041B                     	;# 
  3154  041C                     	;# 
  3155  041D                     	;# 
  3156  041E                     	;# 
  3157  041F                     	;# 
  3158  0498                     	;# 
  3159  0498                     	;# 
  3160  0499                     	;# 
  3161  049A                     	;# 
  3162  049B                     	;# 
  3163  049B                     	;# 
  3164  049C                     	;# 
  3165  049D                     	;# 
  3166  049E                     	;# 
  3167  049F                     	;# 
  3168  0617                     	;# 
  3169  0618                     	;# 
  3170  0619                     	;# 
  3171  0619                     	;# 
  3172  061A                     	;# 
  3173  061B                     	;# 
  3174  061C                     	;# 
  3175  061C                     	;# 
  3176  061F                     	;# 
  3177  0691                     	;# 
  3178  0692                     	;# 
  3179  0693                     	;# 
  3180  0694                     	;# 
  3181  0695                     	;# 
  3182  0696                     	;# 
  3183  0697                     	;# 
  3184  0698                     	;# 
  3185  0699                     	;# 
  3186  0711                     	;# 
  3187  0712                     	;# 
  3188  0713                     	;# 
  3189  0714                     	;# 
  3190  0715                     	;# 
  3191  0716                     	;# 
  3192  0717                     	;# 
  3193  0718                     	;# 
  3194  0719                     	;# 
  3195  0891                     	;# 
  3196  0891                     	;# 
  3197  0891                     	;# 
  3198  0891                     	;# 
  3199  0891                     	;# 
  3200  0891                     	;# 
  3201  0892                     	;# 
  3202  0892                     	;# 
  3203  0892                     	;# 
  3204  0893                     	;# 
  3205  0893                     	;# 
  3206  0893                     	;# 
  3207  0893                     	;# 
  3208  0893                     	;# 
  3209  0893                     	;# 
  3210  0894                     	;# 
  3211  0894                     	;# 
  3212  0894                     	;# 
  3213  0895                     	;# 
  3214  0895                     	;# 
  3215  0895                     	;# 
  3216  0896                     	;# 
  3217  0896                     	;# 
  3218  0896                     	;# 
  3219  089B                     	;# 
  3220  0911                     	;# 
  3221  0912                     	;# 
  3222  0913                     	;# 
  3223  0914                     	;# 
  3224  0915                     	;# 
  3225  0916                     	;# 
  3226  0918                     	;# 
  3227  0919                     	;# 
  3228  091A                     	;# 
  3229  091B                     	;# 
  3230  091C                     	;# 
  3231  091D                     	;# 
  3232  091E                     	;# 
  3233  091F                     	;# 
  3234  0E0F                     	;# 
  3235  0E10                     	;# 
  3236  0E11                     	;# 
  3237  0E12                     	;# 
  3238  0E13                     	;# 
  3239  0E14                     	;# 
  3240  0E15                     	;# 
  3241  0E16                     	;# 
  3242  0E17                     	;# 
  3243  0E18                     	;# 
  3244  0E19                     	;# 
  3245  0E1A                     	;# 
  3246  0E1B                     	;# 
  3247  0E1C                     	;# 
  3248  0E1D                     	;# 
  3249  0E1E                     	;# 
  3250  0E1F                     	;# 
  3251  0E20                     	;# 
  3252  0E21                     	;# 
  3253  0E22                     	;# 
  3254  0E24                     	;# 
  3255  0E25                     	;# 
  3256  0E28                     	;# 
  3257  0E29                     	;# 
  3258  0E2A                     	;# 
  3259  0E2B                     	;# 
  3260  0E2C                     	;# 
  3261  0E2D                     	;# 
  3262  0E2E                     	;# 
  3263  0E2F                     	;# 
  3264  0E90                     	;# 
  3265  0E91                     	;# 
  3266  0E92                     	;# 
  3267  0E94                     	;# 
  3268  0E95                     	;# 
  3269  0E9C                     	;# 
  3270  0E9D                     	;# 
  3271  0E9E                     	;# 
  3272  0E9F                     	;# 
  3273  0EA0                     	;# 
  3274  0EA1                     	;# 
  3275  0EA2                     	;# 
  3276  0EA3                     	;# 
  3277  0EA4                     	;# 
  3278  0EA5                     	;# 
  3279  0EA6                     	;# 
  3280  0EA7                     	;# 
  3281  0F0F                     	;# 
  3282  0F10                     	;# 
  3283  0F11                     	;# 
  3284  0F12                     	;# 
  3285  0F13                     	;# 
  3286  0F14                     	;# 
  3287  0F15                     	;# 
  3288  0F16                     	;# 
  3289  0F17                     	;# 
  3290  0F18                     	;# 
  3291  0F19                     	;# 
  3292  0F1A                     	;# 
  3293  0F1B                     	;# 
  3294  0F1C                     	;# 
  3295  0F1D                     	;# 
  3296  0F1E                     	;# 
  3297  0F1F                     	;# 
  3298  0F20                     	;# 
  3299  0F21                     	;# 
  3300  0F22                     	;# 
  3301  0F23                     	;# 
  3302  0F24                     	;# 
  3303  0F25                     	;# 
  3304  0F26                     	;# 
  3305  0F27                     	;# 
  3306  0F28                     	;# 
  3307  0F29                     	;# 
  3308  0F2A                     	;# 
  3309  0F2B                     	;# 
  3310  0F2C                     	;# 
  3311  0F2D                     	;# 
  3312  0F2E                     	;# 
  3313  0F2F                     	;# 
  3314  0F30                     	;# 
  3315  0F31                     	;# 
  3316  0F32                     	;# 
  3317  0F33                     	;# 
  3318  0F34                     	;# 
  3319  0F35                     	;# 
  3320  0F36                     	;# 
  3321  0F37                     	;# 
  3322  0FE4                     	;# 
  3323  0FE5                     	;# 
  3324  0FE6                     	;# 
  3325  0FE7                     	;# 
  3326  0FE8                     	;# 
  3327  0FE9                     	;# 
  3328  0FEA                     	;# 
  3329  0FEB                     	;# 
  3330  0FED                     	;# 
  3331  0FEE                     	;# 
  3332  0FEF                     	;# 
  3333  0000                     	;# 
  3334  0001                     	;# 
  3335  0002                     	;# 
  3336  0003                     	;# 
  3337  0004                     	;# 
  3338  0005                     	;# 
  3339  0006                     	;# 
  3340  0007                     	;# 
  3341  0008                     	;# 
  3342  0009                     	;# 
  3343  000A                     	;# 
  3344  000B                     	;# 
  3345  000C                     	;# 
  3346  000D                     	;# 
  3347  000E                     	;# 
  3348  0010                     	;# 
  3349  0011                     	;# 
  3350  0012                     	;# 
  3351  0013                     	;# 
  3352  0014                     	;# 
  3353  0015                     	;# 
  3354  0015                     	;# 
  3355  0016                     	;# 
  3356  0016                     	;# 
  3357  0017                     	;# 
  3358  0018                     	;# 
  3359  0019                     	;# 
  3360  0019                     	;# 
  3361  001A                     	;# 
  3362  001B                     	;# 
  3363  001C                     	;# 
  3364  001D                     	;# 
  3365  001E                     	;# 
  3366  001F                     	;# 
  3367  008C                     	;# 
  3368  008D                     	;# 
  3369  008E                     	;# 
  3370  0090                     	;# 
  3371  0091                     	;# 
  3372  0092                     	;# 
  3373  0093                     	;# 
  3374  0094                     	;# 
  3375  0097                     	;# 
  3376  009B                     	;# 
  3377  009B                     	;# 
  3378  009C                     	;# 
  3379  009D                     	;# 
  3380  009E                     	;# 
  3381  009F                     	;# 
  3382  010C                     	;# 
  3383  010D                     	;# 
  3384  010E                     	;# 
  3385  0111                     	;# 
  3386  0112                     	;# 
  3387  0113                     	;# 
  3388  0114                     	;# 
  3389  0115                     	;# 
  3390  0116                     	;# 
  3391  0117                     	;# 
  3392  0118                     	;# 
  3393  0119                     	;# 
  3394  018C                     	;# 
  3395  018D                     	;# 
  3396  018E                     	;# 
  3397  0197                     	;# 
  3398  0199                     	;# 
  3399  0199                     	;# 
  3400  0199                     	;# 
  3401  019A                     	;# 
  3402  019A                     	;# 
  3403  019A                     	;# 
  3404  019B                     	;# 
  3405  019B                     	;# 
  3406  019B                     	;# 
  3407  019B                     	;# 
  3408  019B                     	;# 
  3409  019C                     	;# 
  3410  019C                     	;# 
  3411  019C                     	;# 
  3412  019D                     	;# 
  3413  019D                     	;# 
  3414  019D                     	;# 
  3415  019E                     	;# 
  3416  019E                     	;# 
  3417  019E                     	;# 
  3418  019F                     	;# 
  3419  019F                     	;# 
  3420  019F                     	;# 
  3421  019F                     	;# 
  3422  019F                     	;# 
  3423  020C                     	;# 
  3424  020D                     	;# 
  3425  020E                     	;# 
  3426  0211                     	;# 
  3427  0211                     	;# 
  3428  0212                     	;# 
  3429  0212                     	;# 
  3430  0213                     	;# 
  3431  0213                     	;# 
  3432  0214                     	;# 
  3433  0214                     	;# 
  3434  0215                     	;# 
  3435  0215                     	;# 
  3436  0215                     	;# 
  3437  0215                     	;# 
  3438  0216                     	;# 
  3439  0216                     	;# 
  3440  0217                     	;# 
  3441  0217                     	;# 
  3442  0219                     	;# 
  3443  021A                     	;# 
  3444  021B                     	;# 
  3445  021C                     	;# 
  3446  021D                     	;# 
  3447  021D                     	;# 
  3448  021E                     	;# 
  3449  021F                     	;# 
  3450  028C                     	;# 
  3451  028D                     	;# 
  3452  028E                     	;# 
  3453  0291                     	;# 
  3454  0291                     	;# 
  3455  0292                     	;# 
  3456  0293                     	;# 
  3457  0294                     	;# 
  3458  0295                     	;# 
  3459  0295                     	;# 
  3460  0296                     	;# 
  3461  0297                     	;# 
  3462  0298                     	;# 
  3463  029F                     	;# 
  3464  030C                     	;# 
  3465  030D                     	;# 
  3466  030E                     	;# 
  3467  0311                     	;# 
  3468  0311                     	;# 
  3469  0312                     	;# 
  3470  0313                     	;# 
  3471  0314                     	;# 
  3472  0315                     	;# 
  3473  0315                     	;# 
  3474  0316                     	;# 
  3475  0317                     	;# 
  3476  0318                     	;# 
  3477  038C                     	;# 
  3478  038D                     	;# 
  3479  038E                     	;# 
  3480  0391                     	;# 
  3481  0392                     	;# 
  3482  0393                     	;# 
  3483  0394                     	;# 
  3484  0395                     	;# 
  3485  0396                     	;# 
  3486  0397                     	;# 
  3487  0398                     	;# 
  3488  0399                     	;# 
  3489  039A                     	;# 
  3490  039C                     	;# 
  3491  039D                     	;# 
  3492  039E                     	;# 
  3493  039F                     	;# 
  3494  0411                     	;# 
  3495  0411                     	;# 
  3496  0412                     	;# 
  3497  0413                     	;# 
  3498  0414                     	;# 
  3499  0415                     	;# 
  3500  0416                     	;# 
  3501  0417                     	;# 
  3502  0418                     	;# 
  3503  0418                     	;# 
  3504  0419                     	;# 
  3505  041A                     	;# 
  3506  041B                     	;# 
  3507  041C                     	;# 
  3508  041D                     	;# 
  3509  041E                     	;# 
  3510  041F                     	;# 
  3511  0498                     	;# 
  3512  0498                     	;# 
  3513  0499                     	;# 
  3514  049A                     	;# 
  3515  049B                     	;# 
  3516  049B                     	;# 
  3517  049C                     	;# 
  3518  049D                     	;# 
  3519  049E                     	;# 
  3520  049F                     	;# 
  3521  0617                     	;# 
  3522  0618                     	;# 
  3523  0619                     	;# 
  3524  0619                     	;# 
  3525  061A                     	;# 
  3526  061B                     	;# 
  3527  061C                     	;# 
  3528  061C                     	;# 
  3529  061F                     	;# 
  3530  0691                     	;# 
  3531  0692                     	;# 
  3532  0693                     	;# 
  3533  0694                     	;# 
  3534  0695                     	;# 
  3535  0696                     	;# 
  3536  0697                     	;# 
  3537  0698                     	;# 
  3538  0699                     	;# 
  3539  0711                     	;# 
  3540  0712                     	;# 
  3541  0713                     	;# 
  3542  0714                     	;# 
  3543  0715                     	;# 
  3544  0716                     	;# 
  3545  0717                     	;# 
  3546  0718                     	;# 
  3547  0719                     	;# 
  3548  0891                     	;# 
  3549  0891                     	;# 
  3550  0891                     	;# 
  3551  0891                     	;# 
  3552  0891                     	;# 
  3553  0891                     	;# 
  3554  0892                     	;# 
  3555  0892                     	;# 
  3556  0892                     	;# 
  3557  0893                     	;# 
  3558  0893                     	;# 
  3559  0893                     	;# 
  3560  0893                     	;# 
  3561  0893                     	;# 
  3562  0893                     	;# 
  3563  0894                     	;# 
  3564  0894                     	;# 
  3565  0894                     	;# 
  3566  0895                     	;# 
  3567  0895                     	;# 
  3568  0895                     	;# 
  3569  0896                     	;# 
  3570  0896                     	;# 
  3571  0896                     	;# 
  3572  089B                     	;# 
  3573  0911                     	;# 
  3574  0912                     	;# 
  3575  0913                     	;# 
  3576  0914                     	;# 
  3577  0915                     	;# 
  3578  0916                     	;# 
  3579  0918                     	;# 
  3580  0919                     	;# 
  3581  091A                     	;# 
  3582  091B                     	;# 
  3583  091C                     	;# 
  3584  091D                     	;# 
  3585  091E                     	;# 
  3586  091F                     	;# 
  3587  0E0F                     	;# 
  3588  0E10                     	;# 
  3589  0E11                     	;# 
  3590  0E12                     	;# 
  3591  0E13                     	;# 
  3592  0E14                     	;# 
  3593  0E15                     	;# 
  3594  0E16                     	;# 
  3595  0E17                     	;# 
  3596  0E18                     	;# 
  3597  0E19                     	;# 
  3598  0E1A                     	;# 
  3599  0E1B                     	;# 
  3600  0E1C                     	;# 
  3601  0E1D                     	;# 
  3602  0E1E                     	;# 
  3603  0E1F                     	;# 
  3604  0E20                     	;# 
  3605  0E21                     	;# 
  3606  0E22                     	;# 
  3607  0E24                     	;# 
  3608  0E25                     	;# 
  3609  0E28                     	;# 
  3610  0E29                     	;# 
  3611  0E2A                     	;# 
  3612  0E2B                     	;# 
  3613  0E2C                     	;# 
  3614  0E2D                     	;# 
  3615  0E2E                     	;# 
  3616  0E2F                     	;# 
  3617  0E90                     	;# 
  3618  0E91                     	;# 
  3619  0E92                     	;# 
  3620  0E94                     	;# 
  3621  0E95                     	;# 
  3622  0E9C                     	;# 
  3623  0E9D                     	;# 
  3624  0E9E                     	;# 
  3625  0E9F                     	;# 
  3626  0EA0                     	;# 
  3627  0EA1                     	;# 
  3628  0EA2                     	;# 
  3629  0EA3                     	;# 
  3630  0EA4                     	;# 
  3631  0EA5                     	;# 
  3632  0EA6                     	;# 
  3633  0EA7                     	;# 
  3634  0F0F                     	;# 
  3635  0F10                     	;# 
  3636  0F11                     	;# 
  3637  0F12                     	;# 
  3638  0F13                     	;# 
  3639  0F14                     	;# 
  3640  0F15                     	;# 
  3641  0F16                     	;# 
  3642  0F17                     	;# 
  3643  0F18                     	;# 
  3644  0F19                     	;# 
  3645  0F1A                     	;# 
  3646  0F1B                     	;# 
  3647  0F1C                     	;# 
  3648  0F1D                     	;# 
  3649  0F1E                     	;# 
  3650  0F1F                     	;# 
  3651  0F20                     	;# 
  3652  0F21                     	;# 
  3653  0F22                     	;# 
  3654  0F23                     	;# 
  3655  0F24                     	;# 
  3656  0F25                     	;# 
  3657  0F26                     	;# 
  3658  0F27                     	;# 
  3659  0F28                     	;# 
  3660  0F29                     	;# 
  3661  0F2A                     	;# 
  3662  0F2B                     	;# 
  3663  0F2C                     	;# 
  3664  0F2D                     	;# 
  3665  0F2E                     	;# 
  3666  0F2F                     	;# 
  3667  0F30                     	;# 
  3668  0F31                     	;# 
  3669  0F32                     	;# 
  3670  0F33                     	;# 
  3671  0F34                     	;# 
  3672  0F35                     	;# 
  3673  0F36                     	;# 
  3674  0F37                     	;# 
  3675  0FE4                     	;# 
  3676  0FE5                     	;# 
  3677  0FE6                     	;# 
  3678  0FE7                     	;# 
  3679  0FE8                     	;# 
  3680  0FE9                     	;# 
  3681  0FEA                     	;# 
  3682  0FEB                     	;# 
  3683  0FED                     	;# 
  3684  0FEE                     	;# 
  3685  0FEF                     	;# 
  3686                           
  3687                           	psect	idataBANK0
  3688  09FA                     __pidataBANK0:	
  3689                           
  3690                           ;initializer for _name
  3691  09FA  3401               	retlw	1
  3692                           
  3693                           	psect	stringtext1
  3694  1000                     __pstringtext1:	
  3695  1000                     _fsmStateTable:	
  3696  1000  345D               	retlw	low _do_I2C_IDLE
  3697  1001  340A               	retlw	high _do_I2C_IDLE
  3698  1002  3498               	retlw	low _do_I2C_SEND_ADR_READ
  3699  1003  340A               	retlw	high _do_I2C_SEND_ADR_READ
  3700  1004  347B               	retlw	low _do_I2C_SEND_ADR_WRITE
  3701  1005  340A               	retlw	high _do_I2C_SEND_ADR_WRITE
  3702  1006  3462               	retlw	low _do_I2C_TX
  3703  1007  340F               	retlw	high _do_I2C_TX
  3704  1008  34D2               	retlw	low _do_I2C_RX
  3705  1009  340E               	retlw	high _do_I2C_RX
  3706  100A  3462               	retlw	low _do_I2C_RCEN
  3707  100B  340A               	retlw	high _do_I2C_RCEN
  3708  100C  34A1               	retlw	low _do_I2C_TX_EMPTY
  3709  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  3710  100E  3438               	retlw	low _do_I2C_SEND_RESTART_READ
  3711  100F  340A               	retlw	high _do_I2C_SEND_RESTART_READ
  3712  1010  343C               	retlw	low _do_I2C_SEND_RESTART_WRITE
  3713  1011  340A               	retlw	high _do_I2C_SEND_RESTART_WRITE
  3714  1012  3440               	retlw	low _do_I2C_SEND_RESTART
  3715  1013  340A               	retlw	high _do_I2C_SEND_RESTART
  3716  1014  3444               	retlw	low _do_I2C_SEND_STOP
  3717  1015  340A               	retlw	high _do_I2C_SEND_STOP
  3718  1016  3448               	retlw	low _do_I2C_DO_ACK
  3719  1017  340A               	retlw	high _do_I2C_DO_ACK
  3720  1018  344C               	retlw	low _do_I2C_DO_NACK_STOP
  3721  1019  340A               	retlw	high _do_I2C_DO_NACK_STOP
  3722  101A  3450               	retlw	low _do_I2C_DO_NACK_RESTART
  3723  101B  340A               	retlw	high _do_I2C_DO_NACK_RESTART
  3724  101C  3474               	retlw	low _do_I2C_RESET
  3725  101D  340A               	retlw	high _do_I2C_RESET
  3726  101E  3476               	retlw	low _do_I2C_DO_ADDRESS_NACK
  3727  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  3728  1020                     __end_of_fsmStateTable:	
  3729  0011                     _PIR1bits	set	17
  3730  000B                     _INTCONbits	set	11
  3731  0010                     _PIR0bits	set	16
  3732  008E                     _TRISC	set	142
  3733  008D                     _TRISB	set	141
  3734  008C                     _TRISA	set	140
  3735  0097                     _WDTCON	set	151
  3736  0091                     _PIE1bits	set	145
  3737  0090                     _PIE0bits	set	144
  3738  010E                     _LATCbits	set	270
  3739  010E                     _LATC	set	270
  3740  010D                     _LATB	set	269
  3741  010C                     _LATA	set	268
  3742  018C                     _ANSELA	set	396
  3743  018D                     _ANSELB	set	397
  3744  018E                     _ANSELC	set	398
  3745  021C                     _SSP2STATbits	set	540
  3746  0219                     _SSP2BUF	set	537
  3747  021D                     _SSP2CON1bits	set	541
  3748  021A                     _SSP2ADD	set	538
  3749  021D                     _SSP2CON1	set	541
  3750  021C                     _SSP2STAT	set	540
  3751  0214                     _SSP1STATbits	set	532
  3752  0213                     _SSP1MSK	set	531
  3753  0211                     _SSP1BUF	set	529
  3754  0216                     _SSP1CON2bits	set	534
  3755  0212                     _SSP1ADD	set	530
  3756  0216                     _SSP1CON2	set	534
  3757  0215                     _SSP1CON1	set	533
  3758  0214                     _SSP1STAT	set	532
  3759  0215                     _SSP1CON1bits	set	533
  3760  020E                     _WPUC	set	526
  3761  020C                     _WPUA	set	524
  3762  020D                     _WPUB	set	525
  3763  028E                     _ODCONC	set	654
  3764  028D                     _ODCONB	set	653
  3765  028C                     _ODCONA	set	652
  3766  030E                     _SLRCONC	set	782
  3767  030D                     _SLRCONB	set	781
  3768  030C                     _SLRCONA	set	780
  3769  0916                     _PMD5	set	2326
  3770  0915                     _PMD4	set	2325
  3771  0914                     _PMD3	set	2324
  3772  0913                     _PMD2	set	2323
  3773  0912                     _PMD1	set	2322
  3774  0911                     _PMD0	set	2321
  3775  091E                     _OSCTUNE	set	2334
  3776  091F                     _OSCFRQ	set	2335
  3777  091D                     _OSCEN	set	2333
  3778  091B                     _OSCCON3	set	2331
  3779  0919                     _OSCCON1	set	2329
  3780  0E1D                     _SSP2CLKPPS	set	3613
  3781  0E21                     _SSP1DATPPS	set	3617
  3782  0E20                     _SSP1CLKPPS	set	3616
  3783  0E1E                     _SSP2DATPPS	set	3614
  3784  0EA2                     _RC2PPS	set	3746
  3785  0E9D                     _RB5PPS	set	3741
  3786  0E9F                     _RB7PPS	set	3743
  3787  0E9E                     _RB6PPS	set	3742
  3788  1020                     STR_10:	
  3789  1020  3441               	retlw	65	;'A'
  3790  1021  346C               	retlw	108	;'l'
  3791  1022  3465               	retlw	101	;'e'
  3792  1023  3478               	retlw	120	;'x'
  3793  1024  3461               	retlw	97	;'a'
  3794  1025  346E               	retlw	110	;'n'
  3795  1026  3464               	retlw	100	;'d'
  3796  1027  3472               	retlw	114	;'r'
  3797  1028  3461               	retlw	97	;'a'
  3798  1029  3420               	retlw	32	;' '
  3799  102A  3446               	retlw	70	;'F'
  3800  102B  3479               	retlw	121	;'y'
  3801  102C  3466               	retlw	102	;'f'
  3802  102D  3466               	retlw	102	;'f'
  3803  102E  3465               	retlw	101	;'e'
  3804  102F  3400               	retlw	0
  3805                           
  3806                           	psect	stringtext2
  3807  1030                     __pstringtext2:	
  3808  1030                     STR_9:	
  3809  1030  344E               	retlw	78	;'N'
  3810  1031  346F               	retlw	111	;'o'
  3811  1032  3465               	retlw	101	;'e'
  3812  1033  346C               	retlw	108	;'l'
  3813  1034  346C               	retlw	108	;'l'
  3814  1035  3465               	retlw	101	;'e'
  3815  1036  3420               	retlw	32	;' '
  3816  1037  3443               	retlw	67	;'C'
  3817  1038  3472               	retlw	114	;'r'
  3818  1039  3461               	retlw	97	;'a'
  3819  103A  346E               	retlw	110	;'n'
  3820  103B  3465               	retlw	101	;'e'
  3821  103C  3400               	retlw	0
  3822                           
  3823                           	psect	stringtext3
  3824  103D                     __pstringtext3:	
  3825  103D                     STR_8:	
  3826  103D  344A               	retlw	74	;'J'
  3827  103E  3475               	retlw	117	;'u'
  3828  103F  3473               	retlw	115	;'s'
  3829  1040  3474               	retlw	116	;'t'
  3830  1041  3469               	retlw	105	;'i'
  3831  1042  346E               	retlw	110	;'n'
  3832  1043  3420               	retlw	32	;' '
  3833  1044  3443               	retlw	67	;'C'
  3834  1045  3468               	retlw	104	;'h'
  3835  1046  3461               	retlw	97	;'a'
  3836  1047  346E               	retlw	110	;'n'
  3837  1048  3400               	retlw	0
  3838                           
  3839                           	psect	stringtext4
  3840  1049                     __pstringtext4:	
  3841  1049                     STR_11:	
  3842  1049  344A               	retlw	74	;'J'
  3843  104A  3465               	retlw	101	;'e'
  3844  104B  3466               	retlw	102	;'f'
  3845  104C  3466               	retlw	102	;'f'
  3846  104D  3420               	retlw	32	;' '
  3847  104E  3447               	retlw	71	;'G'
  3848  104F  3465               	retlw	101	;'e'
  3849  1050  3469               	retlw	105	;'i'
  3850  1051  3473               	retlw	115	;'s'
  3851  1052  3473               	retlw	115	;'s'
  3852  1053  3400               	retlw	0
  3853                           
  3854                           	psect	stringtext5
  3855  1054                     __pstringtext5:	
  3856  1054                     STR_1:	
  3857  1054  3472               	retlw	114	;'r'
  3858  1055  3465               	retlw	101	;'e'
  3859  1056  3473               	retlw	115	;'s'
  3860  1057  3465               	retlw	101	;'e'
  3861  1058  3474               	retlw	116	;'t'
  3862  1059  3400               	retlw	0
  3863                           
  3864                           	psect	stringtext6
  3865  105A                     __pstringtext6:	
  3866  105A                     STR_5:	
  3867  105A  3472               	retlw	114	;'r'
  3868  105B  3469               	retlw	105	;'i'
  3869  105C  3467               	retlw	103	;'g'
  3870  105D  3468               	retlw	104	;'h'
  3871  105E  3474               	retlw	116	;'t'
  3872  105F  3400               	retlw	0
  3873                           
  3874                           	psect	stringtext7
  3875  1060                     __pstringtext7:	
  3876  1060                     STR_3:	
  3877  1060  3464               	retlw	100	;'d'
  3878  1061  346F               	retlw	111	;'o'
  3879  1062  3477               	retlw	119	;'w'
  3880  1063  346E               	retlw	110	;'n'
  3881  1064  3400               	retlw	0
  3882                           
  3883                           	psect	stringtext8
  3884  1065                     __pstringtext8:	
  3885  1065                     STR_6:	
  3886  1065  346E               	retlw	110	;'n'
  3887  1066  3465               	retlw	101	;'e'
  3888  1067  3461               	retlw	97	;'a'
  3889  1068  3472               	retlw	114	;'r'
  3890  1069  3400               	retlw	0
  3891                           
  3892                           	psect	stringtext9
  3893  106A                     __pstringtext9:	
  3894  106A                     STR_4:	
  3895  106A  346C               	retlw	108	;'l'
  3896  106B  3465               	retlw	101	;'e'
  3897  106C  3466               	retlw	102	;'f'
  3898  106D  3474               	retlw	116	;'t'
  3899  106E  3400               	retlw	0
  3900                           
  3901                           	psect	stringtext10
  3902  106F                     __pstringtext10:	
  3903  106F                     STR_7:	
  3904  106F  3466               	retlw	102	;'f'
  3905  1070  3461               	retlw	97	;'a'
  3906  1071  3472               	retlw	114	;'r'
  3907  1072  3400               	retlw	0
  3908                           
  3909                           	psect	stringtext11
  3910  1073                     __pstringtext11:	
  3911  1073                     STR_2:	
  3912  1073  3475               	retlw	117	;'u'
  3913  1074  3470               	retlw	112	;'p'
  3914  1075  3400               	retlw	0
  3915                           
  3916                           	psect	stringtext12
  3917  0000                     __pstringtext12:	
  3918                           
  3919                           ; #config settings
  3920  0000                     
  3921                           	psect	cinit
  3922  002D                     start_initialization:	
  3923  002D                     __initialization:	
  3924                           
  3925                           ; Initialize objects allocated to BANK0
  3926  002D  3189  21FA  3180   	fcall	__pidataBANK0	;fetch initializer
  3927  0030  00EF               	movwf	__pdataBANK0& (0+127)
  3928                           
  3929                           ; Clear objects allocated to COMMON
  3930  0031  01F0               	clrf	__pbssCOMMON& (0+127)
  3931  0032  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3932  0033  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3933  0034  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3934  0035  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3935  0036  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3936                           
  3937                           ; Clear objects allocated to BANK0
  3938  0037  305C               	movlw	low __pbssBANK0
  3939  0038  0084               	movwf	4
  3940  0039  3000               	movlw	high __pbssBANK0
  3941  003A  0085               	movwf	5
  3942  003B  3013               	movlw	19
  3943  003C  318A  226E  3180   	fcall	clear_ram0
  3944                           
  3945                           ; Clear objects allocated to BANK3
  3946  003F  30A0               	movlw	low __pbssBANK3
  3947  0040  0084               	movwf	4
  3948  0041  3001               	movlw	high __pbssBANK3
  3949  0042  0085               	movwf	5
  3950  0043  301D               	movlw	29
  3951  0044  318A  226E  3180   	fcall	clear_ram0
  3952                           
  3953                           ; Clear objects allocated to BANK4
  3954  0047  3020               	movlw	low __pbssBANK4
  3955  0048  0084               	movwf	4
  3956  0049  3002               	movlw	high __pbssBANK4
  3957  004A  0085               	movwf	5
  3958  004B  3044               	movlw	68
  3959  004C  318A  226E         	fcall	clear_ram0
  3960  004E                     end_of_initialization:	
  3961                           ;End of C runtime variable initialization code
  3962                           
  3963  004E                     __end_of__initialization:	
  3964  004E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3965  004F  0020               	movlb	0
  3966  0050  318C  2C1D         	ljmp	_main	;jump to C main() function
  3967                           
  3968                           	psect	bssCOMMON
  3969  0070                     __pbssCOMMON:	
  3970  0070                     _i2c1_driver_busCollisionISR:	
  3971  0070                     	ds	2
  3972  0072                     _b_i2c_error_flag:	
  3973  0072                     	ds	1
  3974  0073                     _handleGestureFlag:	
  3975  0073                     	ds	1
  3976  0074                     _adcResult:	
  3977  0074                     	ds	1
  3978  0075                     _button:	
  3979  0075                     	ds	1
  3980                           
  3981                           	psect	bssBANK0
  3982  005C                     __pbssBANK0:	
  3983  005C                     _gesture_motion_:	
  3984  005C                     	ds	2
  3985  005E                     _gesture_state_:	
  3986  005E                     	ds	2
  3987  0060                     _gesture_far_count_:	
  3988  0060                     	ds	2
  3989  0062                     _gesture_near_count_:	
  3990  0062                     	ds	2
  3991  0064                     _gesture_lr_count_:	
  3992  0064                     	ds	2
  3993  0066                     _gesture_ud_count_:	
  3994  0066                     	ds	2
  3995  0068                     _gesture_lr_delta_:	
  3996  0068                     	ds	2
  3997  006A                     _gesture_ud_delta_:	
  3998  006A                     	ds	2
  3999  006C                     _i2c1_driver_i2cISR:	
  4000  006C                     	ds	2
  4001  006E                     _printed:	
  4002  006E                     	ds	1
  4003                           
  4004                           	psect	dataBANK0
  4005  006F                     __pdataBANK0:	
  4006  006F                     _name:	
  4007  006F                     	ds	1
  4008                           
  4009                           	psect	bssBANK3
  4010  01A0                     __pbssBANK3:	
  4011  01A0                     _i2c_status:	
  4012  01A0                     	ds	29
  4013                           
  4014                           	psect	bssBANK4
  4015  0220                     __pbssBANK4:	
  4016  0220                     _gesture_data_:	
  4017  0220                     	ds	68
  4018                           
  4019                           	psect	clrtext
  4020  0A6E                     clear_ram0:	
  4021                           ;	Called with FSR0 containing the base address, and
  4022                           ;	WREG with the size to clear
  4023                           
  4024  0A6E  0064               	clrwdt	;clear the watchdog before getting into this loop
  4025  0A6F                     clrloop0:	
  4026  0A6F  0180               	clrf	0	;clear RAM location pointed to by FSR
  4027  0A70  3101               	addfsr 0,1
  4028  0A71  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4029  0A72  2A6F               	goto	clrloop0	;have we reached the end yet?
  4030  0A73  3400               	retlw	0	;all done for this memory range, return
  4031                           
  4032                           	psect	cstackBANK2
  4033  0120                     __pcstackBANK2:	
  4034  0120                     readGesture@fifo_data:	
  4035                           
  4036                           ; 64 bytes @ 0x0
  4037  0120                     	ds	64
  4038                           
  4039                           	psect	cstackBANK1
  4040  00A0                     __pcstackBANK1:	
  4041  00A0                     readGesture@fifo_data2:	
  4042                           
  4043                           ; 64 bytes @ 0x0
  4044  00A0                     	ds	64
  4045                           
  4046                           	psect	cstackCOMMON
  4047  0076                     __pcstackCOMMON:	
  4048  0076                     ?_i2c1_driver_open:	
  4049  0076                     ?_i2c1_driver_isNACK:	
  4050                           ; 1 bit 
  4051                           
  4052  0076                     ?_i2c1_driver_isBufferFull:	
  4053                           ; 1 bit 
  4054                           
  4055  0076                     ?_returnStop:	
  4056                           ; 1 bit 
  4057                           
  4058  0076                     ?_returnReset:	
  4059                           ; 1 bytes @ 0x0
  4060                           
  4061  0076                     ?_mssp1_clearIRQ:	
  4062                           ; 1 bytes @ 0x0
  4063                           
  4064  0076                     ??_mssp1_clearIRQ:	
  4065                           ; 1 bytes @ 0x0
  4066                           
  4067  0076                     ?_i2c_busCollisionISR:	
  4068                           ; 1 bytes @ 0x0
  4069                           
  4070  0076                     ??_i2c_busCollisionISR:	
  4071                           ; 1 bytes @ 0x0
  4072                           
  4073  0076                     ?_i2c_ISR:	
  4074                           ; 1 bytes @ 0x0
  4075                           
  4076  0076                     ?_i2c1_driver_start:	
  4077                           ; 1 bytes @ 0x0
  4078                           
  4079  0076                     ?_i2c1_driver_resetBus:	
  4080                           ; 1 bytes @ 0x0
  4081                           
  4082  0076                     ??_i2c1_driver_resetBus:	
  4083                           ; 1 bytes @ 0x0
  4084                           
  4085  0076                     ?_i2c1_driver_restart:	
  4086                           ; 1 bytes @ 0x0
  4087                           
  4088  0076                     ?_i2c1_driver_stop:	
  4089                           ; 1 bytes @ 0x0
  4090                           
  4091  0076                     ?_i2c1_driver_TXData:	
  4092                           ; 1 bytes @ 0x0
  4093                           
  4094  0076                     ?_i2c1_driver_startRX:	
  4095                           ; 1 bytes @ 0x0
  4096                           
  4097  0076                     ?_i2c1_driver_sendACK:	
  4098                           ; 1 bytes @ 0x0
  4099                           
  4100  0076                     ??_i2c1_driver_sendACK:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103  0076                     ?_i2c1_driver_sendNACK:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0076                     ??_i2c1_driver_isNACK:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0076                     ?_i2c1_driver_getRXData:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0076                     ?_mssp1_setIRQ:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0076                     ??_mssp1_setIRQ:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0076                     ?_i2c1_driver_clearBusCollision:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0076                     ??_i2c1_driver_clearBusCollision:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0076                     ?_PIN_MANAGER_IOC:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0076                     ??_PIN_MANAGER_IOC:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0076                     ?_PMD_Initialize:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0076                     ?_PIN_MANAGER_Initialize:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0076                     ?_OSCILLATOR_Initialize:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0076                     ?_WDT_Initialize:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0076                     ?_SPI2_Initialize:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0076                     ?_initialize:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148  0076                     ?_enableGestureSensor:	
  4149                           ; 1 bytes @ 0x0
  4150                           
  4151  0076                     ?_isGestureAvailable:	
  4152                           ; 1 bytes @ 0x0
  4153                           
  4154  0076                     ?_Display_Clear:	
  4155                           ; 1 bytes @ 0x0
  4156                           
  4157  0076                     ?_handleGesture:	
  4158                           ; 1 bytes @ 0x0
  4159                           
  4160  0076                     ?_SPI2_Exchange8bit:	
  4161                           ; 1 bytes @ 0x0
  4162                           
  4163  0076                     ?_wireReadDataByte:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  0076                     ?_setLEDDrive:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  0076                     ?_setProximityGain:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  0076                     ?_setAmbientLightGain:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  0076                     ?_setProxIntLowThresh:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  0076                     ?_setProxIntHighThresh:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  0076                     ?_setGestureEnterThresh:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  0076                     ?_setGestureExitThresh:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  0076                     ?_setGestureGain:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  0076                     ?_setGestureLEDDrive:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  0076                     ?_setGestureWaitTime:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  0076                     ?_setGestureIntEnable:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0076                     ?_getMode:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0076                     ?_resetGestureParameters:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0076                     ?_setLEDBoost:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0076                     ?_setGestureMode:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0076                     ?_enablePower:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0076                     ?_processGestureData:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0076                     ?_decodeGesture:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0076                     ?_I2C_Start:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0076                     ?_I2C_Write_Byte:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0076                     ?_I2C_ReStart:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0076                     ?_I2C_Read_Byte:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0076                     ?_I2C_Send_NACK:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0076                     ?_I2C_Stop:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0076                     ?_do_I2C_RESET:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0076                     ??_do_I2C_RESET:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0076                     ?_do_I2C_IDLE:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0076                     ??_do_I2C_IDLE:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0076                     ?_do_I2C_SEND_RESTART_READ:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0076                     ??_do_I2C_SEND_RESTART_READ:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0076                     ?_do_I2C_SEND_RESTART:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0076                     ??_do_I2C_SEND_RESTART:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268  0076                     ?_do_I2C_SEND_STOP:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0076                     ??_do_I2C_SEND_STOP:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0076                     ?_do_I2C_SEND_ADR_READ:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0076                     ??_do_I2C_SEND_ADR_READ:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0076                     ?_do_I2C_RCEN:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0076                     ??_do_I2C_RCEN:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0076                     ?_do_I2C_DO_ACK:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0076                     ??_do_I2C_DO_ACK:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0076                     ?_do_I2C_DO_NACK_STOP:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0076                     ??_do_I2C_DO_NACK_STOP:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0076                     ?_do_I2C_DO_NACK_RESTART:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0076                     ??_do_I2C_DO_NACK_RESTART:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0076                     ?_do_I2C_TX:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0076                     ??_do_I2C_TX:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0076                     ?_do_I2C_RX:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0076                     ??_do_I2C_RX:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0076                     ?_do_I2C_TX_EMPTY:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0076                     ??_do_I2C_TX_EMPTY:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0076                     ?_INTERRUPT_InterruptManager:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0076                     ?_SYSTEM_Initialize:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340  0076                     ?_main:	
  4341                           ; 1 bytes @ 0x0
  4342                           
  4343  0076                     ?_SPI_Write:	
  4344                           ; 1 bytes @ 0x0
  4345                           
  4346  0076                     ?i1_i2c1_driver_restart:	
  4347                           ; 1 bytes @ 0x0
  4348                           
  4349  0076                     ??i1_i2c1_driver_restart:	
  4350                           ; 1 bytes @ 0x0
  4351                           
  4352  0076                     ?i1_i2c1_driver_stop:	
  4353                           ; 1 bytes @ 0x0
  4354                           
  4355  0076                     ??i1_i2c1_driver_stop:	
  4356                           ; 1 bytes @ 0x0
  4357                           
  4358  0076                     ?i1_i2c1_driver_startRX:	
  4359                           ; 1 bytes @ 0x0
  4360                           
  4361  0076                     ??i1_i2c1_driver_startRX:	
  4362                           ; 1 bytes @ 0x0
  4363                           
  4364  0076                     ?i1_i2c1_driver_getRXData:	
  4365                           ; 1 bytes @ 0x0
  4366                           
  4367  0076                     ??i1_i2c1_driver_getRXData:	
  4368                           ; 1 bytes @ 0x0
  4369                           
  4370  0076                     ?i1_i2c1_driver_TXData:	
  4371                           ; 1 bytes @ 0x0
  4372                           
  4373  0076                     ??i1_i2c1_driver_TXData:	
  4374                           ; 1 bytes @ 0x0
  4375                           
  4376  0076                     ?i1_i2c1_driver_sendNACK:	
  4377                           ; 1 bytes @ 0x0
  4378                           
  4379  0076                     ??i1_i2c1_driver_sendNACK:	
  4380                           ; 1 bytes @ 0x0
  4381                           
  4382  0076                     returnStop@p:	
  4383                           ; 1 bytes @ 0x0
  4384                           
  4385  0076                     returnReset@p:	
  4386                           ; 1 bytes @ 0x0
  4387                           
  4388  0076                     i1i2c1_driver_TXData@d:	
  4389                           ; 1 bytes @ 0x0
  4390                           
  4391                           
  4392                           ; 1 bytes @ 0x0
  4393  0076                     	ds	1
  4394  0077                     ??_returnStop:	
  4395  0077                     ??_returnReset:	
  4396                           ; 1 bytes @ 0x1
  4397                           
  4398                           
  4399                           ; 1 bytes @ 0x1
  4400  0077                     	ds	2
  4401  0079                     ??_i2c_ISR:	
  4402                           
  4403                           ; 1 bytes @ 0x3
  4404  0079                     	ds	3
  4405  007C                     ??_INTERRUPT_InterruptManager:	
  4406                           
  4407                           	psect	cstackBANK0
  4408  0020                     __pcstackBANK0:	
  4409                           ; 1 bytes @ 0x6
  4410                           
  4411  0020                     ??_i2c1_driver_open:	
  4412  0020                     ??_i2c1_driver_start:	
  4413                           ; 1 bytes @ 0x0
  4414                           
  4415  0020                     ??_i2c1_driver_restart:	
  4416                           ; 1 bytes @ 0x0
  4417                           
  4418  0020                     ??_i2c1_driver_stop:	
  4419                           ; 1 bytes @ 0x0
  4420                           
  4421  0020                     ??_i2c1_driver_TXData:	
  4422                           ; 1 bytes @ 0x0
  4423                           
  4424  0020                     ??_i2c1_driver_startRX:	
  4425                           ; 1 bytes @ 0x0
  4426                           
  4427  0020                     ??_i2c1_driver_sendNACK:	
  4428                           ; 1 bytes @ 0x0
  4429                           
  4430  0020                     ??_i2c1_driver_getRXData:	
  4431                           ; 1 bytes @ 0x0
  4432                           
  4433  0020                     ??_PMD_Initialize:	
  4434                           ; 1 bytes @ 0x0
  4435                           
  4436  0020                     ??_PIN_MANAGER_Initialize:	
  4437                           ; 1 bytes @ 0x0
  4438                           
  4439  0020                     ??_OSCILLATOR_Initialize:	
  4440                           ; 1 bytes @ 0x0
  4441                           
  4442  0020                     ??_WDT_Initialize:	
  4443                           ; 1 bytes @ 0x0
  4444                           
  4445  0020                     ??_SPI2_Initialize:	
  4446                           ; 1 bytes @ 0x0
  4447                           
  4448  0020                     ??_SPI2_Exchange8bit:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0020                     ??_resetGestureParameters:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0020                     ??_decodeGesture:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0020                     ??_I2C_Start:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0020                     ??_I2C_ReStart:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0020                     ??_I2C_Send_NACK:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0020                     ??_I2C_Stop:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0020                     ??_SYSTEM_Initialize:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0020                     ??_i2c1_driver_isBufferFull:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0020                     ?_strlen:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0020                     ?___wmul:	
  4479                           ; 2 bytes @ 0x0
  4480                           
  4481  0020                     i2c1_driver_TXData@d:	
  4482                           ; 2 bytes @ 0x0
  4483                           
  4484  0020                     SPI2_Exchange8bit@data:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0020                     ___wmul@multiplier:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0020                     strlen@s:	
  4491                           ; 2 bytes @ 0x0
  4492                           
  4493                           
  4494                           ; 2 bytes @ 0x0
  4495  0020                     	ds	1
  4496  0021                     ??_I2C_Write_Byte:	
  4497  0021                     ??_I2C_Read_Byte:	
  4498                           ; 1 bytes @ 0x1
  4499                           
  4500  0021                     ??_SPI_Write:	
  4501                           ; 1 bytes @ 0x1
  4502                           
  4503                           
  4504                           ; 1 bytes @ 0x1
  4505  0021                     	ds	1
  4506  0022                     ??_strlen:	
  4507  0022                     SPI_Write@incoming:	
  4508                           ; 1 bytes @ 0x2
  4509                           
  4510  0022                     _decodeGesture$1189:	
  4511                           ; 1 bytes @ 0x2
  4512                           
  4513  0022                     ___wmul@multiplicand:	
  4514                           ; 2 bytes @ 0x2
  4515                           
  4516                           
  4517                           ; 2 bytes @ 0x2
  4518  0022                     	ds	1
  4519  0023                     ??_Display_Clear:	
  4520  0023                     I2C_Write_Byte@Byte:	
  4521                           ; 1 bytes @ 0x3
  4522                           
  4523  0023                     strlen@a:	
  4524                           ; 1 bytes @ 0x3
  4525                           
  4526                           
  4527                           ; 2 bytes @ 0x3
  4528  0023                     	ds	1
  4529  0024                     ??___wmul:	
  4530  0024                     _decodeGesture$1190:	
  4531                           ; 1 bytes @ 0x4
  4532                           
  4533  0024                     I2C_Write_Byte@count:	
  4534                           ; 2 bytes @ 0x4
  4535                           
  4536  0024                     ___wmul@product:	
  4537                           ; 2 bytes @ 0x4
  4538                           
  4539                           
  4540                           ; 2 bytes @ 0x4
  4541  0024                     	ds	1
  4542  0025                     ?_Display_Name:	
  4543  0025                     Display_Name@string1:	
  4544                           ; 1 bytes @ 0x5
  4545                           
  4546                           
  4547                           ; 2 bytes @ 0x5
  4548  0025                     	ds	1
  4549  0026                     ??_wireReadDataByte:	
  4550  0026                     ?_wireWriteDataByte:	
  4551                           ; 1 bytes @ 0x6
  4552                           
  4553  0026                     ?_wireReadDataBlock:	
  4554                           ; 2 bytes @ 0x6
  4555                           
  4556  0026                     ?___awdiv:	
  4557                           ; 2 bytes @ 0x6
  4558                           
  4559  0026                     wireWriteDataByte@val:	
  4560                           ; 2 bytes @ 0x6
  4561                           
  4562  0026                     _decodeGesture$1191:	
  4563                           ; 1 bytes @ 0x6
  4564                           
  4565  0026                     wireReadDataBlock@val:	
  4566                           ; 2 bytes @ 0x6
  4567                           
  4568  0026                     ___awdiv@divisor:	
  4569                           ; 2 bytes @ 0x6
  4570                           
  4571                           
  4572                           ; 2 bytes @ 0x6
  4573  0026                     	ds	1
  4574  0027                     ??_Display_Name:	
  4575  0027                     wireReadDataByte@reg:	
  4576                           ; 1 bytes @ 0x7
  4577                           
  4578                           
  4579                           ; 1 bytes @ 0x7
  4580  0027                     	ds	1
  4581  0028                     wireReadDataByte@val:	
  4582  0028                     Display_Name@length:	
  4583                           ; 1 bytes @ 0x8
  4584                           
  4585  0028                     _decodeGesture$1192:	
  4586                           ; 2 bytes @ 0x8
  4587                           
  4588  0028                     wireReadDataBlock@len:	
  4589                           ; 2 bytes @ 0x8
  4590                           
  4591  0028                     ___awdiv@dividend:	
  4592                           ; 2 bytes @ 0x8
  4593                           
  4594                           
  4595                           ; 2 bytes @ 0x8
  4596  0028                     	ds	1
  4597  0029                     ??_isGestureAvailable:	
  4598  0029                     ??_wireWriteDataByte:	
  4599                           ; 1 bytes @ 0x9
  4600                           
  4601  0029                     ??_getMode:	
  4602                           ; 1 bytes @ 0x9
  4603                           
  4604  0029                     wireWriteDataByte@reg:	
  4605                           ; 1 bytes @ 0x9
  4606                           
  4607                           
  4608                           ; 1 bytes @ 0x9
  4609  0029                     	ds	1
  4610  002A                     ??_setLEDDrive:	
  4611  002A                     ??_setProximityGain:	
  4612                           ; 1 bytes @ 0xA
  4613                           
  4614  002A                     ??_setAmbientLightGain:	
  4615                           ; 1 bytes @ 0xA
  4616                           
  4617  002A                     ??_setProxIntLowThresh:	
  4618                           ; 1 bytes @ 0xA
  4619                           
  4620  002A                     ??_setProxIntHighThresh:	
  4621                           ; 1 bytes @ 0xA
  4622                           
  4623  002A                     ?_setLightIntLowThreshold:	
  4624                           ; 1 bytes @ 0xA
  4625                           
  4626  002A                     ?_setLightIntHighThreshold:	
  4627                           ; 1 bytes @ 0xA
  4628                           
  4629  002A                     ??_setGestureEnterThresh:	
  4630                           ; 1 bytes @ 0xA
  4631                           
  4632  002A                     ??_setGestureExitThresh:	
  4633                           ; 1 bytes @ 0xA
  4634                           
  4635  002A                     ??_setGestureGain:	
  4636                           ; 1 bytes @ 0xA
  4637                           
  4638  002A                     ??_setGestureLEDDrive:	
  4639                           ; 1 bytes @ 0xA
  4640                           
  4641  002A                     ??_setGestureWaitTime:	
  4642                           ; 1 bytes @ 0xA
  4643                           
  4644  002A                     ??_setGestureIntEnable:	
  4645                           ; 1 bytes @ 0xA
  4646                           
  4647  002A                     ??_setLEDBoost:	
  4648                           ; 1 bytes @ 0xA
  4649                           
  4650  002A                     ??_setGestureMode:	
  4651                           ; 1 bytes @ 0xA
  4652                           
  4653  002A                     ??_wireReadDataBlock:	
  4654                           ; 1 bytes @ 0xA
  4655                           
  4656  002A                     ??___awdiv:	
  4657                           ; 1 bytes @ 0xA
  4658                           
  4659  002A                     getMode@enable_value:	
  4660                           ; 1 bytes @ 0xA
  4661                           
  4662  002A                     isGestureAvailable@val:	
  4663                           ; 1 bytes @ 0xA
  4664                           
  4665  002A                     Display_Name@i:	
  4666                           ; 1 bytes @ 0xA
  4667                           
  4668  002A                     setLightIntLowThreshold@threshold:	
  4669                           ; 2 bytes @ 0xA
  4670                           
  4671  002A                     setLightIntHighThreshold@threshold:	
  4672                           ; 2 bytes @ 0xA
  4673                           
  4674  002A                     _decodeGesture$1193:	
  4675                           ; 2 bytes @ 0xA
  4676                           
  4677                           
  4678                           ; 2 bytes @ 0xA
  4679  002A                     	ds	1
  4680  002B                     ?_setMode:	
  4681  002B                     setMode@enable:	
  4682                           ; 1 bytes @ 0xB
  4683                           
  4684  002B                     setAmbientLightGain@drive:	
  4685                           ; 1 bytes @ 0xB
  4686                           
  4687  002B                     setProxIntLowThresh@threshold:	
  4688                           ; 1 bytes @ 0xB
  4689                           
  4690  002B                     setProxIntHighThresh@threshold:	
  4691                           ; 1 bytes @ 0xB
  4692                           
  4693  002B                     setGestureEnterThresh@threshold:	
  4694                           ; 1 bytes @ 0xB
  4695                           
  4696  002B                     setGestureExitThresh@threshold:	
  4697                           ; 1 bytes @ 0xB
  4698                           
  4699  002B                     setGestureWaitTime@time:	
  4700                           ; 1 bytes @ 0xB
  4701                           
  4702  002B                     setGestureIntEnable@val:	
  4703                           ; 1 bytes @ 0xB
  4704                           
  4705  002B                     setGestureMode@mode:	
  4706                           ; 1 bytes @ 0xB
  4707                           
  4708  002B                     ___awdiv@counter:	
  4709                           ; 1 bytes @ 0xB
  4710                           
  4711                           
  4712                           ; 1 bytes @ 0xB
  4713  002B                     	ds	1
  4714  002C                     ??_setMode:	
  4715  002C                     ??_setLightIntLowThreshold:	
  4716                           ; 1 bytes @ 0xC
  4717                           
  4718  002C                     ??_setLightIntHighThreshold:	
  4719                           ; 1 bytes @ 0xC
  4720                           
  4721  002C                     setLEDDrive@val:	
  4722                           ; 1 bytes @ 0xC
  4723                           
  4724  002C                     setProximityGain@val:	
  4725                           ; 1 bytes @ 0xC
  4726                           
  4727  002C                     setAmbientLightGain@val:	
  4728                           ; 1 bytes @ 0xC
  4729                           
  4730  002C                     setGestureGain@val:	
  4731                           ; 1 bytes @ 0xC
  4732                           
  4733  002C                     setGestureLEDDrive@val:	
  4734                           ; 1 bytes @ 0xC
  4735                           
  4736  002C                     setGestureWaitTime@val:	
  4737                           ; 1 bytes @ 0xC
  4738                           
  4739  002C                     setGestureIntEnable@enable:	
  4740                           ; 1 bytes @ 0xC
  4741                           
  4742  002C                     setLEDBoost@val:	
  4743                           ; 1 bytes @ 0xC
  4744                           
  4745  002C                     setGestureMode@val:	
  4746                           ; 1 bytes @ 0xC
  4747                           
  4748  002C                     ___awdiv@sign:	
  4749                           ; 1 bytes @ 0xC
  4750                           
  4751  002C                     _decodeGesture$1194:	
  4752                           ; 1 bytes @ 0xC
  4753                           
  4754                           
  4755                           ; 2 bytes @ 0xC
  4756  002C                     	ds	1
  4757  002D                     setLEDDrive@drive:	
  4758  002D                     setProximityGain@drive:	
  4759                           ; 1 bytes @ 0xD
  4760                           
  4761  002D                     setLightIntLowThreshold@val_low:	
  4762                           ; 1 bytes @ 0xD
  4763                           
  4764  002D                     setLightIntHighThreshold@val_low:	
  4765                           ; 1 bytes @ 0xD
  4766                           
  4767  002D                     setGestureGain@gain:	
  4768                           ; 1 bytes @ 0xD
  4769                           
  4770  002D                     setGestureLEDDrive@drive:	
  4771                           ; 1 bytes @ 0xD
  4772                           
  4773  002D                     setLEDBoost@boost:	
  4774                           ; 1 bytes @ 0xD
  4775                           
  4776  002D                     ___awdiv@quotient:	
  4777                           ; 1 bytes @ 0xD
  4778                           
  4779                           
  4780                           ; 2 bytes @ 0xD
  4781  002D                     	ds	1
  4782  002E                     setMode@reg_val:	
  4783  002E                     setLightIntLowThreshold@val_high:	
  4784                           ; 1 bytes @ 0xE
  4785                           
  4786  002E                     setLightIntHighThreshold@val_high:	
  4787                           ; 1 bytes @ 0xE
  4788                           
  4789  002E                     _decodeGesture$1195:	
  4790                           ; 1 bytes @ 0xE
  4791                           
  4792                           
  4793                           ; 2 bytes @ 0xE
  4794  002E                     	ds	1
  4795  002F                     ??_processGestureData:	
  4796  002F                     setMode@mode:	
  4797                           ; 1 bytes @ 0xF
  4798                           
  4799  002F                     wireReadDataBlock@reg:	
  4800                           ; 1 bytes @ 0xF
  4801                           
  4802                           
  4803                           ; 1 bytes @ 0xF
  4804  002F                     	ds	1
  4805  0030                     ??_initialize:	
  4806  0030                     ??_enableGestureSensor:	
  4807                           ; 1 bytes @ 0x10
  4808                           
  4809  0030                     ??_enablePower:	
  4810                           ; 1 bytes @ 0x10
  4811                           
  4812  0030                     wireReadDataBlock@j:	
  4813                           ; 1 bytes @ 0x10
  4814                           
  4815  0030                     _decodeGesture$1196:	
  4816                           ; 1 bytes @ 0x10
  4817                           
  4818                           
  4819                           ; 2 bytes @ 0x10
  4820  0030                     	ds	1
  4821  0031                     initialize@id:	
  4822  0031                     enableGestureSensor@interrupts:	
  4823                           ; 1 bytes @ 0x11
  4824                           
  4825  0031                     processGestureData@ud_ratio_first:	
  4826                           ; 1 bytes @ 0x11
  4827                           
  4828                           
  4829                           ; 2 bytes @ 0x11
  4830  0031                     	ds	2
  4831  0033                     processGestureData@lr_ratio_first:	
  4832                           
  4833                           ; 2 bytes @ 0x13
  4834  0033                     	ds	2
  4835  0035                     processGestureData@ud_ratio_last:	
  4836                           
  4837                           ; 2 bytes @ 0x15
  4838  0035                     	ds	2
  4839  0037                     processGestureData@lr_ratio_last:	
  4840                           
  4841                           ; 2 bytes @ 0x17
  4842  0037                     	ds	2
  4843  0039                     _processGestureData$1184:	
  4844                           
  4845                           ; 2 bytes @ 0x19
  4846  0039                     	ds	2
  4847  003B                     _processGestureData$1185:	
  4848                           
  4849                           ; 2 bytes @ 0x1B
  4850  003B                     	ds	2
  4851  003D                     _processGestureData$1186:	
  4852                           
  4853                           ; 2 bytes @ 0x1D
  4854  003D                     	ds	2
  4855  003F                     _processGestureData$1187:	
  4856                           
  4857                           ; 2 bytes @ 0x1F
  4858  003F                     	ds	2
  4859  0041                     processGestureData@u_last:	
  4860                           
  4861                           ; 1 bytes @ 0x21
  4862  0041                     	ds	1
  4863  0042                     processGestureData@d_last:	
  4864                           
  4865                           ; 1 bytes @ 0x22
  4866  0042                     	ds	1
  4867  0043                     processGestureData@l_last:	
  4868                           
  4869                           ; 1 bytes @ 0x23
  4870  0043                     	ds	1
  4871  0044                     processGestureData@r_last:	
  4872                           
  4873                           ; 1 bytes @ 0x24
  4874  0044                     	ds	1
  4875  0045                     processGestureData@u_first:	
  4876                           
  4877                           ; 1 bytes @ 0x25
  4878  0045                     	ds	1
  4879  0046                     processGestureData@d_first:	
  4880                           
  4881                           ; 1 bytes @ 0x26
  4882  0046                     	ds	1
  4883  0047                     processGestureData@l_first:	
  4884                           
  4885                           ; 1 bytes @ 0x27
  4886  0047                     	ds	1
  4887  0048                     processGestureData@r_first:	
  4888                           
  4889                           ; 1 bytes @ 0x28
  4890  0048                     	ds	1
  4891  0049                     processGestureData@ud_delta:	
  4892                           
  4893                           ; 2 bytes @ 0x29
  4894  0049                     	ds	2
  4895  004B                     processGestureData@lr_delta:	
  4896                           
  4897                           ; 2 bytes @ 0x2B
  4898  004B                     	ds	2
  4899  004D                     processGestureData@i:	
  4900                           
  4901                           ; 2 bytes @ 0x2D
  4902  004D                     	ds	2
  4903  004F                     ?_readGesture:	
  4904                           
  4905                           ; 2 bytes @ 0x2F
  4906  004F                     	ds	2
  4907  0051                     ??_readGesture:	
  4908                           
  4909                           ; 1 bytes @ 0x31
  4910  0051                     	ds	2
  4911  0053                     readGesture@motion:	
  4912                           
  4913                           ; 2 bytes @ 0x33
  4914  0053                     	ds	2
  4915  0055                     readGesture@gstatus:	
  4916                           
  4917                           ; 1 bytes @ 0x35
  4918  0055                     	ds	1
  4919  0056                     readGesture@bytes_read:	
  4920                           
  4921                           ; 2 bytes @ 0x36
  4922  0056                     	ds	2
  4923  0058                     readGesture@fifo_level:	
  4924                           
  4925                           ; 1 bytes @ 0x38
  4926  0058                     	ds	1
  4927  0059                     readGesture@i:	
  4928                           
  4929                           ; 2 bytes @ 0x39
  4930  0059                     	ds	2
  4931  005B                     ??_handleGesture:	
  4932                           
  4933                           ; 1 bytes @ 0x3B
  4934  005B                     	ds	1
  4935  005C                     ??_main:	
  4936                           
  4937                           	psect	maintext
  4938  0C1D                     __pmaintext:	
  4939                           ; 1 bytes @ 0x3C
  4940 ;;
  4941 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4942 ;;
  4943 ;; *************** function _main *****************
  4944 ;; Defined at:
  4945 ;;		line 88 in file "main.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  count           2    0        unsigned int 
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      void 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : B1F/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;Total ram usage:        2 bytes
  4964 ;; Hardware stack levels required when called:   12
  4965 ;; This function calls:
  4966 ;;		_Display_Clear
  4967 ;;		_Display_Name
  4968 ;;		_SYSTEM_Initialize
  4969 ;;		_enableGestureSensor
  4970 ;;		_handleGesture
  4971 ;;		_initialize
  4972 ;;		_isGestureAvailable
  4973 ;; This function is called by:
  4974 ;;		Startup code after reset
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           
  4979                           ;psect for function _main
  4980  0C1D                     _main:	
  4981                           
  4982                           ;main.c: 91:     SYSTEM_Initialize();
  4983                           
  4984                           ;incstack = 0
  4985                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4986  0C1D  318A  22DC  318C   	fcall	_SYSTEM_Initialize
  4987                           
  4988                           ;main.c: 97:     (INTCONbits.GIE = 1);
  4989  0C20  178B               	bsf	11,7	;volatile
  4990                           
  4991                           ;main.c: 100:     (INTCONbits.PEIE = 1);
  4992  0C21  170B               	bsf	11,6	;volatile
  4993                           
  4994                           ;main.c: 106:     if(initialize()){
  4995  0C22  3184  24AB  318C   	fcall	_initialize
  4996                           
  4997                           ;main.c: 109:     if(enableGestureSensor(0)){
  4998  0C25  3000               	movlw	0
  4999  0C26  3187  271B  318C   	fcall	_enableGestureSensor
  5000                           
  5001                           ;main.c: 111:     Display_Name("reset");
  5002  0C29  3054               	movlw	low (STR_1| (0+32768))
  5003  0C2A  0020               	movlb	0	; select bank0
  5004  0C2B  00A5               	movwf	Display_Name@string1
  5005  0C2C  3090               	movlw	high (STR_1| (0+32768))
  5006  0C2D  00A6               	movwf	Display_Name@string1+1
  5007  0C2E  318E  2668  318C   	fcall	_Display_Name
  5008  0C31                     l6481:	
  5009                           
  5010                           ;main.c: 113:     {;main.c: 114:         if(isGestureAvailable()){
  5011  0C31  318B  230B  318C   	fcall	_isGestureAvailable
  5012  0C34  3A00               	xorlw	0
  5013  0C35  1903               	skipnz
  5014  0C36  2C31               	goto	l6481
  5015                           
  5016                           ;main.c: 115:             Display_Clear();
  5017  0C37  318A  22FA  318C   	fcall	_Display_Clear
  5018                           
  5019                           ;main.c: 118:             handleGesture();
  5020  0C3A  3186  26AF  318C   	fcall	_handleGesture
  5021  0C3D  2C31               	goto	l6481
  5022  0C3E                     __end_of_main:	
  5023                           
  5024                           	psect	text1
  5025  04AB                     __ptext1:	
  5026 ;; *************** function _initialize *****************
  5027 ;; Defined at:
  5028 ;;		line 20 in file "APDS9960.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  id              1   17[BANK0 ] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      _Bool 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;Total ram usage:        2 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:   10
  5049 ;; This function calls:
  5050 ;;		_i2c1_driver_open
  5051 ;;		_setAmbientLightGain
  5052 ;;		_setGestureEnterThresh
  5053 ;;		_setGestureExitThresh
  5054 ;;		_setGestureGain
  5055 ;;		_setGestureIntEnable
  5056 ;;		_setGestureLEDDrive
  5057 ;;		_setGestureWaitTime
  5058 ;;		_setLEDDrive
  5059 ;;		_setLightIntHighThreshold
  5060 ;;		_setLightIntLowThreshold
  5061 ;;		_setMode
  5062 ;;		_setProxIntHighThresh
  5063 ;;		_setProxIntLowThresh
  5064 ;;		_setProximityGain
  5065 ;;		_wireReadDataByte
  5066 ;;		_wireWriteDataByte
  5067 ;; This function is called by:
  5068 ;;		_main
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           
  5073                           ;psect for function _initialize
  5074  04AB                     _initialize:	
  5075                           
  5076                           ;APDS9960.c: 25:     i2c1_driver_open();
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  5080  04AB  318A  22B9  3184   	fcall	_i2c1_driver_open
  5081                           
  5082                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  5083  04AE  3092               	movlw	146
  5084  04AF  318C  243E  3184   	fcall	_wireReadDataByte
  5085  04B2  0020               	movlb	0	; select bank0
  5086  04B3  00B0               	movwf	??_initialize
  5087  04B4  0830               	movf	??_initialize,w
  5088  04B5  00B1               	movwf	initialize@id
  5089                           
  5090                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  5091  04B6  30AB               	movlw	171
  5092  04B7  0631               	xorwf	initialize@id,w
  5093  04B8  1903               	btfsc	3,2
  5094  04B9  2CC0               	goto	l6193
  5095  04BA  309C               	movlw	156
  5096  04BB  0631               	xorwf	initialize@id,w
  5097  04BC  1903               	btfsc	3,2
  5098  04BD  2CC0               	goto	l6193
  5099  04BE                     l6189:	
  5100                           
  5101                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  5102  04BE  3000               	movlw	0
  5103  04BF  0008               	return
  5104  04C0                     l6193:	
  5105                           
  5106                           ;APDS9960.c: 39:     setMode(7, 0);
  5107  04C0  01AB               	clrf	setMode@enable
  5108  04C1  3007               	movlw	7
  5109  04C2  318F  27B1  3184   	fcall	_setMode
  5110                           
  5111                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  5112  04C5  30DB               	movlw	219
  5113  04C6  0020               	movlb	0	; select bank0
  5114  04C7  00B0               	movwf	??_initialize
  5115  04C8  0830               	movf	??_initialize,w
  5116  04C9  00A6               	movwf	wireWriteDataByte@val
  5117  04CA  3081               	movlw	129
  5118  04CB  318B  23AC  3184   	fcall	_wireWriteDataByte
  5119                           
  5120                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  5121  04CE  30F6               	movlw	246
  5122  04CF  0020               	movlb	0	; select bank0
  5123  04D0  00B0               	movwf	??_initialize
  5124  04D1  0830               	movf	??_initialize,w
  5125  04D2  00A6               	movwf	wireWriteDataByte@val
  5126  04D3  3083               	movlw	131
  5127  04D4  318B  23AC  3184   	fcall	_wireWriteDataByte
  5128                           
  5129                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  5130  04D7  3087               	movlw	135
  5131  04D8  0020               	movlb	0	; select bank0
  5132  04D9  00B0               	movwf	??_initialize
  5133  04DA  0830               	movf	??_initialize,w
  5134  04DB  00A6               	movwf	wireWriteDataByte@val
  5135  04DC  308E               	movlw	142
  5136  04DD  318B  23AC  3184   	fcall	_wireWriteDataByte
  5137                           
  5138                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  5139  04E0  0020               	movlb	0	; select bank0
  5140  04E1  01A6               	clrf	wireWriteDataByte@val
  5141  04E2  309D               	movlw	157
  5142  04E3  318B  23AC  3184   	fcall	_wireWriteDataByte
  5143                           
  5144                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  5145  04E6  0020               	movlb	0	; select bank0
  5146  04E7  01A6               	clrf	wireWriteDataByte@val
  5147  04E8  309E               	movlw	158
  5148  04E9  318B  23AC  3184   	fcall	_wireWriteDataByte
  5149                           
  5150                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  5151  04EC  3060               	movlw	96
  5152  04ED  0020               	movlb	0	; select bank0
  5153  04EE  00B0               	movwf	??_initialize
  5154  04EF  0830               	movf	??_initialize,w
  5155  04F0  00A6               	movwf	wireWriteDataByte@val
  5156  04F1  308D               	movlw	141
  5157  04F2  318B  23AC  3184   	fcall	_wireWriteDataByte
  5158                           
  5159                           ;APDS9960.c: 47:     setLEDDrive(0);
  5160  04F5  3000               	movlw	0
  5161  04F6  318D  2524  3184   	fcall	_setLEDDrive
  5162                           
  5163                           ;APDS9960.c: 48:     setProximityGain(2);
  5164  04F9  3002               	movlw	2
  5165  04FA  318D  254D  3184   	fcall	_setProximityGain
  5166                           
  5167                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  5168  04FD  3001               	movlw	1
  5169  04FE  318B  23FF  3184   	fcall	_setAmbientLightGain
  5170                           
  5171                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  5172  0501  3000               	movlw	0
  5173  0502  318B  2357  3184   	fcall	_setProxIntLowThresh
  5174  0505  3A00               	xorlw	0
  5175  0506  1903               	btfsc	3,2
  5176  0507  2CBE               	goto	l6189
  5177                           
  5178                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  5179  0508  3032               	movlw	50
  5180  0509  318B  2344  3184   	fcall	_setProxIntHighThresh
  5181  050C  3A00               	xorlw	0
  5182  050D  1903               	btfsc	3,2
  5183  050E  2CBE               	goto	l6189
  5184                           
  5185                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  5186  050F  30FF               	movlw	255
  5187  0510  0020               	movlb	0	; select bank0
  5188  0511  00AA               	movwf	setLightIntLowThreshold@threshold
  5189  0512  30FF               	movlw	255
  5190  0513  00AB               	movwf	setLightIntLowThreshold@threshold+1
  5191  0514  318C  24FD  3184   	fcall	_setLightIntLowThreshold
  5192  0517  3A00               	xorlw	0
  5193  0518  1903               	btfsc	3,2
  5194  0519  2CBE               	goto	l6189
  5195                           
  5196                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  5197  051A  3000               	movlw	0
  5198  051B  0020               	movlb	0	; select bank0
  5199  051C  00AA               	movwf	setLightIntHighThreshold@threshold
  5200  051D  00AB               	movwf	setLightIntHighThreshold@threshold+1
  5201  051E  318C  24D6  3184   	fcall	_setLightIntHighThreshold
  5202  0521  3A00               	xorlw	0
  5203  0522  1903               	btfsc	3,2
  5204  0523  2CBE               	goto	l6189
  5205                           
  5206                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  5207  0524  3011               	movlw	17
  5208  0525  0020               	movlb	0	; select bank0
  5209  0526  00B0               	movwf	??_initialize
  5210  0527  0830               	movf	??_initialize,w
  5211  0528  00A6               	movwf	wireWriteDataByte@val
  5212  0529  308C               	movlw	140
  5213  052A  318B  23AC  3184   	fcall	_wireWriteDataByte
  5214  052D  0020               	movlb	0	; select bank0
  5215  052E  0826               	movf	?_wireWriteDataByte,w
  5216  052F  0427               	iorwf	?_wireWriteDataByte+1,w
  5217  0530  1903               	btfsc	3,2
  5218  0531  2CBE               	goto	l6189
  5219                           
  5220                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  5221  0532  01A6               	clrf	wireWriteDataByte@val
  5222  0533  0AA6               	incf	wireWriteDataByte@val,f
  5223  0534  3090               	movlw	144
  5224  0535  318B  23AC  3184   	fcall	_wireWriteDataByte
  5225  0538  0020               	movlb	0	; select bank0
  5226  0539  0826               	movf	?_wireWriteDataByte,w
  5227  053A  0427               	iorwf	?_wireWriteDataByte+1,w
  5228  053B  1903               	btfsc	3,2
  5229  053C  2CBE               	goto	l6189
  5230                           
  5231                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  5232  053D  01A6               	clrf	wireWriteDataByte@val
  5233  053E  309F               	movlw	159
  5234  053F  318B  23AC  3184   	fcall	_wireWriteDataByte
  5235  0542  0020               	movlb	0	; select bank0
  5236  0543  0826               	movf	?_wireWriteDataByte,w
  5237  0544  0427               	iorwf	?_wireWriteDataByte+1,w
  5238  0545  1903               	btfsc	3,2
  5239  0546  2CBE               	goto	l6189
  5240                           
  5241                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  5242  0547  3028               	movlw	40
  5243  0548  318B  231E  3184   	fcall	_setGestureEnterThresh
  5244  054B  3A00               	xorlw	0
  5245  054C  1903               	btfsc	3,2
  5246  054D  2CBE               	goto	l6189
  5247                           
  5248                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  5249  054E  301E               	movlw	30
  5250  054F  318B  2331  3184   	fcall	_setGestureExitThresh
  5251  0552  3A00               	xorlw	0
  5252  0553  1903               	btfsc	3,2
  5253  0554  2CBE               	goto	l6189
  5254                           
  5255                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  5256  0555  3040               	movlw	64
  5257  0556  0020               	movlb	0	; select bank0
  5258  0557  00B0               	movwf	??_initialize
  5259  0558  0830               	movf	??_initialize,w
  5260  0559  00A6               	movwf	wireWriteDataByte@val
  5261  055A  30A2               	movlw	162
  5262  055B  318B  23AC  3184   	fcall	_wireWriteDataByte
  5263  055E  0020               	movlb	0	; select bank0
  5264  055F  0826               	movf	?_wireWriteDataByte,w
  5265  0560  0427               	iorwf	?_wireWriteDataByte+1,w
  5266  0561  1903               	btfsc	3,2
  5267  0562  2CBE               	goto	l6189
  5268                           
  5269                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  5270  0563  3002               	movlw	2
  5271  0564  318E  2604  3184   	fcall	_setGestureGain
  5272  0567  3A00               	xorlw	0
  5273  0568  1903               	btfsc	3,2
  5274  0569  2CBE               	goto	l6189
  5275                           
  5276                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  5277  056A  3000               	movlw	0
  5278  056B  318E  2636  3184   	fcall	_setGestureLEDDrive
  5279  056E  3A00               	xorlw	0
  5280  056F  1903               	btfsc	3,2
  5281  0570  2CBE               	goto	l6189
  5282                           
  5283                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  5284  0571  3001               	movlw	1
  5285  0572  318C  24AF  3184   	fcall	_setGestureWaitTime
  5286  0575  3A00               	xorlw	0
  5287  0576  1903               	btfsc	3,2
  5288  0577  2CBE               	goto	l6189
  5289                           
  5290                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  5291  0578  0020               	movlb	0	; select bank0
  5292  0579  01A6               	clrf	wireWriteDataByte@val
  5293  057A  30A4               	movlw	164
  5294  057B  318B  23AC  3184   	fcall	_wireWriteDataByte
  5295  057E  0020               	movlb	0	; select bank0
  5296  057F  0826               	movf	?_wireWriteDataByte,w
  5297  0580  0427               	iorwf	?_wireWriteDataByte+1,w
  5298  0581  1903               	btfsc	3,2
  5299  0582  2CBE               	goto	l6189
  5300                           
  5301                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  5302  0583  01A6               	clrf	wireWriteDataByte@val
  5303  0584  30A5               	movlw	165
  5304  0585  318B  23AC  3184   	fcall	_wireWriteDataByte
  5305  0588  0020               	movlb	0	; select bank0
  5306  0589  0826               	movf	?_wireWriteDataByte,w
  5307  058A  0427               	iorwf	?_wireWriteDataByte+1,w
  5308  058B  1903               	btfsc	3,2
  5309  058C  2CBE               	goto	l6189
  5310                           
  5311                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  5312  058D  01A6               	clrf	wireWriteDataByte@val
  5313  058E  30A7               	movlw	167
  5314  058F  318B  23AC  3184   	fcall	_wireWriteDataByte
  5315  0592  0020               	movlb	0	; select bank0
  5316  0593  0826               	movf	?_wireWriteDataByte,w
  5317  0594  0427               	iorwf	?_wireWriteDataByte+1,w
  5318  0595  1903               	btfsc	3,2
  5319  0596  2CBE               	goto	l6189
  5320                           
  5321                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  5322  0597  01A6               	clrf	wireWriteDataByte@val
  5323  0598  30A9               	movlw	169
  5324  0599  318B  23AC  3184   	fcall	_wireWriteDataByte
  5325  059C  0020               	movlb	0	; select bank0
  5326  059D  0826               	movf	?_wireWriteDataByte,w
  5327  059E  0427               	iorwf	?_wireWriteDataByte+1,w
  5328  059F  1903               	btfsc	3,2
  5329  05A0  2CBE               	goto	l6189
  5330                           
  5331                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  5332  05A1  30C9               	movlw	201
  5333  05A2  00B0               	movwf	??_initialize
  5334  05A3  0830               	movf	??_initialize,w
  5335  05A4  00A6               	movwf	wireWriteDataByte@val
  5336  05A5  30A6               	movlw	166
  5337  05A6  318B  23AC  3184   	fcall	_wireWriteDataByte
  5338  05A9  0020               	movlb	0	; select bank0
  5339  05AA  0826               	movf	?_wireWriteDataByte,w
  5340  05AB  0427               	iorwf	?_wireWriteDataByte+1,w
  5341  05AC  1903               	btfsc	3,2
  5342  05AD  2CBE               	goto	l6189
  5343                           
  5344                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  5345  05AE  01A6               	clrf	wireWriteDataByte@val
  5346  05AF  30AA               	movlw	170
  5347  05B0  318B  23AC  3184   	fcall	_wireWriteDataByte
  5348  05B3  0020               	movlb	0	; select bank0
  5349  05B4  0826               	movf	?_wireWriteDataByte,w
  5350  05B5  0427               	iorwf	?_wireWriteDataByte+1,w
  5351  05B6  1903               	btfsc	3,2
  5352  05B7  2CBE               	goto	l6189
  5353                           
  5354                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  5355  05B8  3000               	movlw	0
  5356  05B9  3187  27D1  3184   	fcall	_setGestureIntEnable
  5357  05BC  3A00               	xorlw	0
  5358  05BD  1903               	btfsc	3,2
  5359  05BE  2CBE               	goto	l6189
  5360                           
  5361                           ;APDS9960.c: 120:     return 1;
  5362  05BF  3001               	movlw	1
  5363  05C0  0008               	return
  5364  05C1                     __end_of_initialize:	
  5365                           
  5366                           	psect	text2
  5367  0D4D                     __ptext2:	
  5368 ;; *************** function _setProximityGain *****************
  5369 ;; Defined at:
  5370 ;;		line 192 in file "APDS9960.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;  drive           1    wreg     unsigned char 
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;  drive           1   13[BANK0 ] unsigned char 
  5375 ;;  val             1   12[BANK0 ] unsigned char 
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      _Bool 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0, pclath, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5388 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;Total ram usage:        4 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    8
  5392 ;; This function calls:
  5393 ;;		_wireReadDataByte
  5394 ;;		_wireWriteDataByte
  5395 ;; This function is called by:
  5396 ;;		_initialize
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           
  5401                           ;psect for function _setProximityGain
  5402  0D4D                     _setProximityGain:	
  5403                           
  5404                           ;incstack = 0
  5405                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  5406                           ;setProximityGain@drive stored from wreg
  5407  0D4D  0020               	movlb	0	; select bank0
  5408  0D4E  00AD               	movwf	setProximityGain@drive
  5409                           
  5410                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  5411  0D4F  308F               	movlw	143
  5412  0D50  318C  243E  318D   	fcall	_wireReadDataByte
  5413  0D53  0020               	movlb	0	; select bank0
  5414  0D54  00AA               	movwf	??_setProximityGain
  5415  0D55  082A               	movf	??_setProximityGain,w
  5416  0D56  00AC               	movwf	setProximityGain@val
  5417                           
  5418                           ;APDS9960.c: 199:     drive &= 0b00000011;
  5419  0D57  3003               	movlw	3
  5420  0D58  00AA               	movwf	??_setProximityGain
  5421  0D59  082A               	movf	??_setProximityGain,w
  5422  0D5A  05AD               	andwf	setProximityGain@drive,f
  5423                           
  5424                           ;APDS9960.c: 200:     drive = drive << 2;
  5425  0D5B  082D               	movf	setProximityGain@drive,w
  5426  0D5C  00AA               	movwf	??_setProximityGain
  5427  0D5D  3001               	movlw	1
  5428  0D5E                     u5165:	
  5429  0D5E  35AA               	lslf	??_setProximityGain,f
  5430  0D5F  3EFF               	addlw	-1
  5431  0D60  1D03               	skipz
  5432  0D61  2D5E               	goto	u5165
  5433  0D62  352A               	lslf	??_setProximityGain,w
  5434  0D63  00AB               	movwf	??_setProximityGain+1
  5435  0D64  082B               	movf	??_setProximityGain+1,w
  5436  0D65  00AD               	movwf	setProximityGain@drive
  5437                           
  5438                           ;APDS9960.c: 201:     val &= 0b11110011;
  5439  0D66  30F3               	movlw	243
  5440  0D67  00AA               	movwf	??_setProximityGain
  5441  0D68  082A               	movf	??_setProximityGain,w
  5442  0D69  05AC               	andwf	setProximityGain@val,f
  5443                           
  5444                           ;APDS9960.c: 202:     val |= drive;
  5445  0D6A  082D               	movf	setProximityGain@drive,w
  5446  0D6B  00AA               	movwf	??_setProximityGain
  5447  0D6C  082A               	movf	??_setProximityGain,w
  5448  0D6D  04AC               	iorwf	setProximityGain@val,f
  5449                           
  5450                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  5451  0D6E  082C               	movf	setProximityGain@val,w
  5452  0D6F  00AA               	movwf	??_setProximityGain
  5453  0D70  082A               	movf	??_setProximityGain,w
  5454  0D71  00A6               	movwf	wireWriteDataByte@val
  5455  0D72  308F               	movlw	143
  5456  0D73  318B  23AC         	fcall	_wireWriteDataByte
  5457  0D75  0008               	return
  5458  0D76                     __end_of_setProximityGain:	
  5459                           
  5460                           	psect	text3
  5461  0B57                     __ptext3:	
  5462 ;; *************** function _setProxIntLowThresh *****************
  5463 ;; Defined at:
  5464 ;;		line 234 in file "APDS9960.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  threshold       1    wreg     unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  threshold       1   11[BANK0 ] unsigned char 
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      _Bool 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0, pclath, cstack
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;Total ram usage:        2 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    8
  5485 ;; This function calls:
  5486 ;;		_wireWriteDataByte
  5487 ;; This function is called by:
  5488 ;;		_initialize
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           
  5493                           ;psect for function _setProxIntLowThresh
  5494  0B57                     _setProxIntLowThresh:	
  5495                           
  5496                           ;incstack = 0
  5497                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  5498                           ;setProxIntLowThresh@threshold stored from wreg
  5499  0B57  0020               	movlb	0	; select bank0
  5500  0B58  00AB               	movwf	setProxIntLowThresh@threshold
  5501                           
  5502                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  5503  0B59  082B               	movf	setProxIntLowThresh@threshold,w
  5504  0B5A  00AA               	movwf	??_setProxIntLowThresh
  5505  0B5B  082A               	movf	??_setProxIntLowThresh,w
  5506  0B5C  00A6               	movwf	wireWriteDataByte@val
  5507  0B5D  3089               	movlw	137
  5508  0B5E  318B  23AC  318B   	fcall	_wireWriteDataByte
  5509  0B61  0020               	movlb	0	; select bank0
  5510  0B62  0826               	movf	?_wireWriteDataByte,w
  5511  0B63  0427               	iorwf	?_wireWriteDataByte+1,w
  5512  0B64  1D03               	btfss	3,2
  5513  0B65  2B68               	goto	l5957
  5514                           
  5515                           ;APDS9960.c: 237:         return 0;
  5516  0B66  3000               	movlw	0
  5517  0B67  0008               	return
  5518  0B68                     l5957:	
  5519                           
  5520                           ;APDS9960.c: 240:     return 1;
  5521  0B68  3001               	movlw	1
  5522  0B69  0008               	return
  5523  0B6A                     __end_of_setProxIntLowThresh:	
  5524                           
  5525                           	psect	text4
  5526  0B44                     __ptext4:	
  5527 ;; *************** function _setProxIntHighThresh *****************
  5528 ;; Defined at:
  5529 ;;		line 244 in file "APDS9960.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  threshold       1    wreg     unsigned char 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  threshold       1   11[BANK0 ] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      _Bool 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    8
  5550 ;; This function calls:
  5551 ;;		_wireWriteDataByte
  5552 ;; This function is called by:
  5553 ;;		_initialize
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _setProxIntHighThresh
  5559  0B44                     _setProxIntHighThresh:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  5563                           ;setProxIntHighThresh@threshold stored from wreg
  5564  0B44  0020               	movlb	0	; select bank0
  5565  0B45  00AB               	movwf	setProxIntHighThresh@threshold
  5566                           
  5567                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  5568  0B46  082B               	movf	setProxIntHighThresh@threshold,w
  5569  0B47  00AA               	movwf	??_setProxIntHighThresh
  5570  0B48  082A               	movf	??_setProxIntHighThresh,w
  5571  0B49  00A6               	movwf	wireWriteDataByte@val
  5572  0B4A  308B               	movlw	139
  5573  0B4B  318B  23AC  318B   	fcall	_wireWriteDataByte
  5574  0B4E  0020               	movlb	0	; select bank0
  5575  0B4F  0826               	movf	?_wireWriteDataByte,w
  5576  0B50  0427               	iorwf	?_wireWriteDataByte+1,w
  5577  0B51  1D03               	btfss	3,2
  5578  0B52  2B55               	goto	l5967
  5579                           
  5580                           ;APDS9960.c: 247:         return 0;
  5581  0B53  3000               	movlw	0
  5582  0B54  0008               	return
  5583  0B55                     l5967:	
  5584                           
  5585                           ;APDS9960.c: 250:     return 1;
  5586  0B55  3001               	movlw	1
  5587  0B56  0008               	return
  5588  0B57                     __end_of_setProxIntHighThresh:	
  5589                           
  5590                           	psect	text5
  5591  0CFD                     __ptext5:	
  5592 ;; *************** function _setLightIntLowThreshold *****************
  5593 ;; Defined at:
  5594 ;;		line 254 in file "APDS9960.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  threshold       2   10[BANK0 ] unsigned short 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;  val_high        1   14[BANK0 ] unsigned char 
  5599 ;;  val_low         1   13[BANK0 ] unsigned char 
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      _Bool 
  5602 ;; Registers used:
  5603 ;;		wreg, status,2, status,0, pclath, cstack
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5609 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;Total ram usage:        5 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    8
  5616 ;; This function calls:
  5617 ;;		_wireWriteDataByte
  5618 ;; This function is called by:
  5619 ;;		_initialize
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           
  5624                           ;psect for function _setLightIntLowThreshold
  5625  0CFD                     _setLightIntLowThreshold:	
  5626                           
  5627                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  5628                           
  5629                           ;incstack = 0
  5630                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  5631  0CFD  0020               	movlb	0	; select bank0
  5632  0CFE  082A               	movf	setLightIntLowThreshold@threshold,w
  5633  0CFF  00AC               	movwf	??_setLightIntLowThreshold
  5634  0D00  082C               	movf	??_setLightIntLowThreshold,w
  5635  0D01  00AD               	movwf	setLightIntLowThreshold@val_low
  5636                           
  5637                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  5638  0D02  082B               	movf	setLightIntLowThreshold@threshold+1,w
  5639  0D03  00AC               	movwf	??_setLightIntLowThreshold
  5640  0D04  082C               	movf	??_setLightIntLowThreshold,w
  5641  0D05  00AE               	movwf	setLightIntLowThreshold@val_high
  5642                           
  5643                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  5644  0D06  082D               	movf	setLightIntLowThreshold@val_low,w
  5645  0D07  00AC               	movwf	??_setLightIntLowThreshold
  5646  0D08  082C               	movf	??_setLightIntLowThreshold,w
  5647  0D09  00A6               	movwf	wireWriteDataByte@val
  5648  0D0A  3084               	movlw	132
  5649  0D0B  318B  23AC  318C   	fcall	_wireWriteDataByte
  5650  0D0E  0020               	movlb	0	; select bank0
  5651  0D0F  0826               	movf	?_wireWriteDataByte,w
  5652  0D10  0427               	iorwf	?_wireWriteDataByte+1,w
  5653  0D11  1D03               	btfss	3,2
  5654  0D12  2D15               	goto	l5981
  5655  0D13                     l5977:	
  5656                           
  5657                           ;APDS9960.c: 265:         return 0;
  5658  0D13  3000               	movlw	0
  5659  0D14  0008               	return
  5660  0D15                     l5981:	
  5661                           
  5662                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  5663  0D15  082E               	movf	setLightIntLowThreshold@val_high,w
  5664  0D16  00AC               	movwf	??_setLightIntLowThreshold
  5665  0D17  082C               	movf	??_setLightIntLowThreshold,w
  5666  0D18  00A6               	movwf	wireWriteDataByte@val
  5667  0D19  3085               	movlw	133
  5668  0D1A  318B  23AC  318C   	fcall	_wireWriteDataByte
  5669  0D1D  0020               	movlb	0	; select bank0
  5670  0D1E  0826               	movf	?_wireWriteDataByte,w
  5671  0D1F  0427               	iorwf	?_wireWriteDataByte+1,w
  5672  0D20  1903               	btfsc	3,2
  5673  0D21  2D13               	goto	l5977
  5674                           
  5675                           ;APDS9960.c: 273:     return 1;
  5676  0D22  3001               	movlw	1
  5677  0D23  0008               	return
  5678  0D24                     __end_of_setLightIntLowThreshold:	
  5679                           
  5680                           	psect	text6
  5681  0CD6                     __ptext6:	
  5682 ;; *************** function _setLightIntHighThreshold *****************
  5683 ;; Defined at:
  5684 ;;		line 277 in file "APDS9960.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  threshold       2   10[BANK0 ] unsigned short 
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  val_high        1   14[BANK0 ] unsigned char 
  5689 ;;  val_low         1   13[BANK0 ] unsigned char 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      _Bool 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, pclath, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5699 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;Total ram usage:        5 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    8
  5706 ;; This function calls:
  5707 ;;		_wireWriteDataByte
  5708 ;; This function is called by:
  5709 ;;		_initialize
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           
  5714                           ;psect for function _setLightIntHighThreshold
  5715  0CD6                     _setLightIntHighThreshold:	
  5716                           
  5717                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  5721  0CD6  0020               	movlb	0	; select bank0
  5722  0CD7  082A               	movf	setLightIntHighThreshold@threshold,w
  5723  0CD8  00AC               	movwf	??_setLightIntHighThreshold
  5724  0CD9  082C               	movf	??_setLightIntHighThreshold,w
  5725  0CDA  00AD               	movwf	setLightIntHighThreshold@val_low
  5726                           
  5727                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  5728  0CDB  082B               	movf	setLightIntHighThreshold@threshold+1,w
  5729  0CDC  00AC               	movwf	??_setLightIntHighThreshold
  5730  0CDD  082C               	movf	??_setLightIntHighThreshold,w
  5731  0CDE  00AE               	movwf	setLightIntHighThreshold@val_high
  5732                           
  5733                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  5734  0CDF  082D               	movf	setLightIntHighThreshold@val_low,w
  5735  0CE0  00AC               	movwf	??_setLightIntHighThreshold
  5736  0CE1  082C               	movf	??_setLightIntHighThreshold,w
  5737  0CE2  00A6               	movwf	wireWriteDataByte@val
  5738  0CE3  3086               	movlw	134
  5739  0CE4  318B  23AC  318C   	fcall	_wireWriteDataByte
  5740  0CE7  0020               	movlb	0	; select bank0
  5741  0CE8  0826               	movf	?_wireWriteDataByte,w
  5742  0CE9  0427               	iorwf	?_wireWriteDataByte+1,w
  5743  0CEA  1D03               	btfss	3,2
  5744  0CEB  2CEE               	goto	l6001
  5745  0CEC                     l5997:	
  5746                           
  5747                           ;APDS9960.c: 288:         return 0;
  5748  0CEC  3000               	movlw	0
  5749  0CED  0008               	return
  5750  0CEE                     l6001:	
  5751                           
  5752                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  5753  0CEE  082E               	movf	setLightIntHighThreshold@val_high,w
  5754  0CEF  00AC               	movwf	??_setLightIntHighThreshold
  5755  0CF0  082C               	movf	??_setLightIntHighThreshold,w
  5756  0CF1  00A6               	movwf	wireWriteDataByte@val
  5757  0CF2  3087               	movlw	135
  5758  0CF3  318B  23AC  318C   	fcall	_wireWriteDataByte
  5759  0CF6  0020               	movlb	0	; select bank0
  5760  0CF7  0826               	movf	?_wireWriteDataByte,w
  5761  0CF8  0427               	iorwf	?_wireWriteDataByte+1,w
  5762  0CF9  1903               	btfsc	3,2
  5763  0CFA  2CEC               	goto	l5997
  5764                           
  5765                           ;APDS9960.c: 296:     return 1;
  5766  0CFB  3001               	movlw	1
  5767  0CFC  0008               	return
  5768  0CFD                     __end_of_setLightIntHighThreshold:	
  5769                           
  5770                           	psect	text7
  5771  0D24                     __ptext7:	
  5772 ;; *************** function _setLEDDrive *****************
  5773 ;; Defined at:
  5774 ;;		line 170 in file "APDS9960.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  drive           1    wreg     unsigned char 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  drive           1   13[BANK0 ] unsigned char 
  5779 ;;  val             1   12[BANK0 ] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      _Bool 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, pclath, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;Total ram usage:        4 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    8
  5796 ;; This function calls:
  5797 ;;		_wireReadDataByte
  5798 ;;		_wireWriteDataByte
  5799 ;; This function is called by:
  5800 ;;		_initialize
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           
  5805                           ;psect for function _setLEDDrive
  5806  0D24                     _setLEDDrive:	
  5807                           
  5808                           ;incstack = 0
  5809                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5810                           ;setLEDDrive@drive stored from wreg
  5811  0D24  0020               	movlb	0	; select bank0
  5812  0D25  00AD               	movwf	setLEDDrive@drive
  5813                           
  5814                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  5815  0D26  308F               	movlw	143
  5816  0D27  318C  243E  318D   	fcall	_wireReadDataByte
  5817  0D2A  0020               	movlb	0	; select bank0
  5818  0D2B  00AA               	movwf	??_setLEDDrive
  5819  0D2C  082A               	movf	??_setLEDDrive,w
  5820  0D2D  00AC               	movwf	setLEDDrive@val
  5821                           
  5822                           ;APDS9960.c: 178:     drive &= 0b00000011;
  5823  0D2E  3003               	movlw	3
  5824  0D2F  00AA               	movwf	??_setLEDDrive
  5825  0D30  082A               	movf	??_setLEDDrive,w
  5826  0D31  05AD               	andwf	setLEDDrive@drive,f
  5827                           
  5828                           ;APDS9960.c: 179:     drive = drive << 6;
  5829  0D32  082D               	movf	setLEDDrive@drive,w
  5830  0D33  00AA               	movwf	??_setLEDDrive
  5831  0D34  3005               	movlw	5
  5832  0D35                     u5155:	
  5833  0D35  35AA               	lslf	??_setLEDDrive,f
  5834  0D36  3EFF               	addlw	-1
  5835  0D37  1D03               	skipz
  5836  0D38  2D35               	goto	u5155
  5837  0D39  352A               	lslf	??_setLEDDrive,w
  5838  0D3A  00AB               	movwf	??_setLEDDrive+1
  5839  0D3B  082B               	movf	??_setLEDDrive+1,w
  5840  0D3C  00AD               	movwf	setLEDDrive@drive
  5841                           
  5842                           ;APDS9960.c: 180:     val &= 0b00111111;
  5843  0D3D  303F               	movlw	63
  5844  0D3E  00AA               	movwf	??_setLEDDrive
  5845  0D3F  082A               	movf	??_setLEDDrive,w
  5846  0D40  05AC               	andwf	setLEDDrive@val,f
  5847                           
  5848                           ;APDS9960.c: 181:     val |= drive;
  5849  0D41  082D               	movf	setLEDDrive@drive,w
  5850  0D42  00AA               	movwf	??_setLEDDrive
  5851  0D43  082A               	movf	??_setLEDDrive,w
  5852  0D44  04AC               	iorwf	setLEDDrive@val,f
  5853                           
  5854                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  5855  0D45  082C               	movf	setLEDDrive@val,w
  5856  0D46  00AA               	movwf	??_setLEDDrive
  5857  0D47  082A               	movf	??_setLEDDrive,w
  5858  0D48  00A6               	movwf	wireWriteDataByte@val
  5859  0D49  308F               	movlw	143
  5860  0D4A  318B  23AC         	fcall	_wireWriteDataByte
  5861  0D4C  0008               	return
  5862  0D4D                     __end_of_setLEDDrive:	
  5863                           
  5864                           	psect	text8
  5865  0CAF                     __ptext8:	
  5866 ;; *************** function _setGestureWaitTime *****************
  5867 ;; Defined at:
  5868 ;;		line 366 in file "APDS9960.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  time            1    wreg     unsigned char 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  time            1   11[BANK0 ] unsigned char 
  5873 ;;  val             1   12[BANK0 ] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      _Bool 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, pclath, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;Total ram usage:        3 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    8
  5890 ;; This function calls:
  5891 ;;		_wireReadDataByte
  5892 ;;		_wireWriteDataByte
  5893 ;; This function is called by:
  5894 ;;		_initialize
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           
  5899                           ;psect for function _setGestureWaitTime
  5900  0CAF                     _setGestureWaitTime:	
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  5904                           ;setGestureWaitTime@time stored from wreg
  5905  0CAF  0020               	movlb	0	; select bank0
  5906  0CB0  00AB               	movwf	setGestureWaitTime@time
  5907                           
  5908                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  5909  0CB1  30A3               	movlw	163
  5910  0CB2  318C  243E  318C   	fcall	_wireReadDataByte
  5911  0CB5  0020               	movlb	0	; select bank0
  5912  0CB6  00AA               	movwf	??_setGestureWaitTime
  5913  0CB7  082A               	movf	??_setGestureWaitTime,w
  5914  0CB8  00AC               	movwf	setGestureWaitTime@val
  5915                           
  5916                           ;APDS9960.c: 374:     time &= 0b00000111;
  5917  0CB9  3007               	movlw	7
  5918  0CBA  00AA               	movwf	??_setGestureWaitTime
  5919  0CBB  082A               	movf	??_setGestureWaitTime,w
  5920  0CBC  05AB               	andwf	setGestureWaitTime@time,f
  5921                           
  5922                           ;APDS9960.c: 375:     val &= 0b11111000;
  5923  0CBD  30F8               	movlw	248
  5924  0CBE  00AA               	movwf	??_setGestureWaitTime
  5925  0CBF  082A               	movf	??_setGestureWaitTime,w
  5926  0CC0  05AC               	andwf	setGestureWaitTime@val,f
  5927                           
  5928                           ;APDS9960.c: 376:     val |= time;
  5929  0CC1  082B               	movf	setGestureWaitTime@time,w
  5930  0CC2  00AA               	movwf	??_setGestureWaitTime
  5931  0CC3  082A               	movf	??_setGestureWaitTime,w
  5932  0CC4  04AC               	iorwf	setGestureWaitTime@val,f
  5933                           
  5934                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  5935  0CC5  082C               	movf	setGestureWaitTime@val,w
  5936  0CC6  00AA               	movwf	??_setGestureWaitTime
  5937  0CC7  082A               	movf	??_setGestureWaitTime,w
  5938  0CC8  00A6               	movwf	wireWriteDataByte@val
  5939  0CC9  30A3               	movlw	163
  5940  0CCA  318B  23AC  318C   	fcall	_wireWriteDataByte
  5941  0CCD  0020               	movlb	0	; select bank0
  5942  0CCE  0826               	movf	?_wireWriteDataByte,w
  5943  0CCF  0427               	iorwf	?_wireWriteDataByte+1,w
  5944  0CD0  1D03               	btfss	3,2
  5945  0CD1  2CD4               	goto	l6081
  5946                           
  5947                           ;APDS9960.c: 380:         return 0;
  5948  0CD2  3000               	movlw	0
  5949  0CD3  0008               	return
  5950  0CD4                     l6081:	
  5951                           
  5952                           ;APDS9960.c: 383:     return 1;
  5953  0CD4  3001               	movlw	1
  5954  0CD5  0008               	return
  5955  0CD6                     __end_of_setGestureWaitTime:	
  5956                           
  5957                           	psect	text9
  5958  0E36                     __ptext9:	
  5959 ;; *************** function _setGestureLEDDrive *****************
  5960 ;; Defined at:
  5961 ;;		line 343 in file "APDS9960.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  drive           1    wreg     unsigned char 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  drive           1   13[BANK0 ] unsigned char 
  5966 ;;  val             1   12[BANK0 ] unsigned char 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      _Bool 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, pclath, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;Total ram usage:        4 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    8
  5983 ;; This function calls:
  5984 ;;		_wireReadDataByte
  5985 ;;		_wireWriteDataByte
  5986 ;; This function is called by:
  5987 ;;		_initialize
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           
  5992                           ;psect for function _setGestureLEDDrive
  5993  0E36                     _setGestureLEDDrive:	
  5994                           
  5995                           ;incstack = 0
  5996                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5997                           ;setGestureLEDDrive@drive stored from wreg
  5998  0E36  0020               	movlb	0	; select bank0
  5999  0E37  00AD               	movwf	setGestureLEDDrive@drive
  6000                           
  6001                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  6002  0E38  30A3               	movlw	163
  6003  0E39  318C  243E  318E   	fcall	_wireReadDataByte
  6004  0E3C  0020               	movlb	0	; select bank0
  6005  0E3D  00AA               	movwf	??_setGestureLEDDrive
  6006  0E3E  082A               	movf	??_setGestureLEDDrive,w
  6007  0E3F  00AC               	movwf	setGestureLEDDrive@val
  6008                           
  6009                           ;APDS9960.c: 352:     drive &= 0b00000011;
  6010  0E40  3003               	movlw	3
  6011  0E41  00AA               	movwf	??_setGestureLEDDrive
  6012  0E42  082A               	movf	??_setGestureLEDDrive,w
  6013  0E43  05AD               	andwf	setGestureLEDDrive@drive,f
  6014                           
  6015                           ;APDS9960.c: 353:     drive = drive << 3;
  6016  0E44  082D               	movf	setGestureLEDDrive@drive,w
  6017  0E45  00AA               	movwf	??_setGestureLEDDrive
  6018  0E46  3002               	movlw	2
  6019  0E47                     u5275:	
  6020  0E47  35AA               	lslf	??_setGestureLEDDrive,f
  6021  0E48  3EFF               	addlw	-1
  6022  0E49  1D03               	skipz
  6023  0E4A  2E47               	goto	u5275
  6024  0E4B  352A               	lslf	??_setGestureLEDDrive,w
  6025  0E4C  00AB               	movwf	??_setGestureLEDDrive+1
  6026  0E4D  082B               	movf	??_setGestureLEDDrive+1,w
  6027  0E4E  00AD               	movwf	setGestureLEDDrive@drive
  6028                           
  6029                           ;APDS9960.c: 354:     val &= 0b11100111;
  6030  0E4F  30E7               	movlw	231
  6031  0E50  00AA               	movwf	??_setGestureLEDDrive
  6032  0E51  082A               	movf	??_setGestureLEDDrive,w
  6033  0E52  05AC               	andwf	setGestureLEDDrive@val,f
  6034                           
  6035                           ;APDS9960.c: 355:     val |= drive;
  6036  0E53  082D               	movf	setGestureLEDDrive@drive,w
  6037  0E54  00AA               	movwf	??_setGestureLEDDrive
  6038  0E55  082A               	movf	??_setGestureLEDDrive,w
  6039  0E56  04AC               	iorwf	setGestureLEDDrive@val,f
  6040                           
  6041                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  6042  0E57  082C               	movf	setGestureLEDDrive@val,w
  6043  0E58  00AA               	movwf	??_setGestureLEDDrive
  6044  0E59  082A               	movf	??_setGestureLEDDrive,w
  6045  0E5A  00A6               	movwf	wireWriteDataByte@val
  6046  0E5B  30A3               	movlw	163
  6047  0E5C  318B  23AC  318E   	fcall	_wireWriteDataByte
  6048  0E5F  0020               	movlb	0	; select bank0
  6049  0E60  0826               	movf	?_wireWriteDataByte,w
  6050  0E61  0427               	iorwf	?_wireWriteDataByte+1,w
  6051  0E62  1D03               	btfss	3,2
  6052  0E63  2E66               	goto	l6063
  6053                           
  6054                           ;APDS9960.c: 359:         return 0;
  6055  0E64  3000               	movlw	0
  6056  0E65  0008               	return
  6057  0E66                     l6063:	
  6058                           
  6059                           ;APDS9960.c: 362:     return 1;
  6060  0E66  3001               	movlw	1
  6061  0E67  0008               	return
  6062  0E68                     __end_of_setGestureLEDDrive:	
  6063                           
  6064                           	psect	text10
  6065  0E04                     __ptext10:	
  6066 ;; *************** function _setGestureGain *****************
  6067 ;; Defined at:
  6068 ;;		line 320 in file "APDS9960.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  gain            1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  gain            1   13[BANK0 ] unsigned char 
  6073 ;;  val             1   12[BANK0 ] unsigned char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      _Bool 
  6076 ;; Registers used:
  6077 ;;		wreg, status,2, status,0, pclath, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        4 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    8
  6090 ;; This function calls:
  6091 ;;		_wireReadDataByte
  6092 ;;		_wireWriteDataByte
  6093 ;; This function is called by:
  6094 ;;		_initialize
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           
  6099                           ;psect for function _setGestureGain
  6100  0E04                     _setGestureGain:	
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  6104                           ;setGestureGain@gain stored from wreg
  6105  0E04  0020               	movlb	0	; select bank0
  6106  0E05  00AD               	movwf	setGestureGain@gain
  6107                           
  6108                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  6109  0E06  30A3               	movlw	163
  6110  0E07  318C  243E  318E   	fcall	_wireReadDataByte
  6111  0E0A  0020               	movlb	0	; select bank0
  6112  0E0B  00AA               	movwf	??_setGestureGain
  6113  0E0C  082A               	movf	??_setGestureGain,w
  6114  0E0D  00AC               	movwf	setGestureGain@val
  6115                           
  6116                           ;APDS9960.c: 329:     gain &= 0b00000011;
  6117  0E0E  3003               	movlw	3
  6118  0E0F  00AA               	movwf	??_setGestureGain
  6119  0E10  082A               	movf	??_setGestureGain,w
  6120  0E11  05AD               	andwf	setGestureGain@gain,f
  6121                           
  6122                           ;APDS9960.c: 330:     gain = gain << 5;
  6123  0E12  082D               	movf	setGestureGain@gain,w
  6124  0E13  00AA               	movwf	??_setGestureGain
  6125  0E14  3004               	movlw	4
  6126  0E15                     u5255:	
  6127  0E15  35AA               	lslf	??_setGestureGain,f
  6128  0E16  3EFF               	addlw	-1
  6129  0E17  1D03               	skipz
  6130  0E18  2E15               	goto	u5255
  6131  0E19  352A               	lslf	??_setGestureGain,w
  6132  0E1A  00AB               	movwf	??_setGestureGain+1
  6133  0E1B  082B               	movf	??_setGestureGain+1,w
  6134  0E1C  00AD               	movwf	setGestureGain@gain
  6135                           
  6136                           ;APDS9960.c: 331:     val &= 0b10011111;
  6137  0E1D  309F               	movlw	159
  6138  0E1E  00AA               	movwf	??_setGestureGain
  6139  0E1F  082A               	movf	??_setGestureGain,w
  6140  0E20  05AC               	andwf	setGestureGain@val,f
  6141                           
  6142                           ;APDS9960.c: 332:     val |= gain;
  6143  0E21  082D               	movf	setGestureGain@gain,w
  6144  0E22  00AA               	movwf	??_setGestureGain
  6145  0E23  082A               	movf	??_setGestureGain,w
  6146  0E24  04AC               	iorwf	setGestureGain@val,f
  6147                           
  6148                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  6149  0E25  082C               	movf	setGestureGain@val,w
  6150  0E26  00AA               	movwf	??_setGestureGain
  6151  0E27  082A               	movf	??_setGestureGain,w
  6152  0E28  00A6               	movwf	wireWriteDataByte@val
  6153  0E29  30A3               	movlw	163
  6154  0E2A  318B  23AC  318E   	fcall	_wireWriteDataByte
  6155  0E2D  0020               	movlb	0	; select bank0
  6156  0E2E  0826               	movf	?_wireWriteDataByte,w
  6157  0E2F  0427               	iorwf	?_wireWriteDataByte+1,w
  6158  0E30  1D03               	btfss	3,2
  6159  0E31  2E34               	goto	l6045
  6160                           
  6161                           ;APDS9960.c: 336:         return 0;
  6162  0E32  3000               	movlw	0
  6163  0E33  0008               	return
  6164  0E34                     l6045:	
  6165                           
  6166                           ;APDS9960.c: 339:     return 1;
  6167  0E34  3001               	movlw	1
  6168  0E35  0008               	return
  6169  0E36                     __end_of_setGestureGain:	
  6170                           
  6171                           	psect	text11
  6172  0B31                     __ptext11:	
  6173 ;; *************** function _setGestureExitThresh *****************
  6174 ;; Defined at:
  6175 ;;		line 310 in file "APDS9960.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  threshold       1    wreg     unsigned char 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;  threshold       1   11[BANK0 ] unsigned char 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      _Bool 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0, pclath, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;Total ram usage:        2 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    8
  6196 ;; This function calls:
  6197 ;;		_wireWriteDataByte
  6198 ;; This function is called by:
  6199 ;;		_initialize
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _setGestureExitThresh
  6205  0B31                     _setGestureExitThresh:	
  6206                           
  6207                           ;incstack = 0
  6208                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  6209                           ;setGestureExitThresh@threshold stored from wreg
  6210  0B31  0020               	movlb	0	; select bank0
  6211  0B32  00AB               	movwf	setGestureExitThresh@threshold
  6212                           
  6213                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  6214  0B33  082B               	movf	setGestureExitThresh@threshold,w
  6215  0B34  00AA               	movwf	??_setGestureExitThresh
  6216  0B35  082A               	movf	??_setGestureExitThresh,w
  6217  0B36  00A6               	movwf	wireWriteDataByte@val
  6218  0B37  30A1               	movlw	161
  6219  0B38  318B  23AC  318B   	fcall	_wireWriteDataByte
  6220  0B3B  0020               	movlb	0	; select bank0
  6221  0B3C  0826               	movf	?_wireWriteDataByte,w
  6222  0B3D  0427               	iorwf	?_wireWriteDataByte+1,w
  6223  0B3E  1D03               	btfss	3,2
  6224  0B3F  2B42               	goto	l6027
  6225                           
  6226                           ;APDS9960.c: 313:         return 0;
  6227  0B40  3000               	movlw	0
  6228  0B41  0008               	return
  6229  0B42                     l6027:	
  6230                           
  6231                           ;APDS9960.c: 316:     return 1;
  6232  0B42  3001               	movlw	1
  6233  0B43  0008               	return
  6234  0B44                     __end_of_setGestureExitThresh:	
  6235                           
  6236                           	psect	text12
  6237  0B1E                     __ptext12:	
  6238 ;; *************** function _setGestureEnterThresh *****************
  6239 ;; Defined at:
  6240 ;;		line 300 in file "APDS9960.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  threshold       1    wreg     unsigned char 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  threshold       1   11[BANK0 ] unsigned char 
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  1    wreg      _Bool 
  6247 ;; Registers used:
  6248 ;;		wreg, status,2, status,0, pclath, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;Total ram usage:        2 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    8
  6261 ;; This function calls:
  6262 ;;		_wireWriteDataByte
  6263 ;; This function is called by:
  6264 ;;		_initialize
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _setGestureEnterThresh
  6270  0B1E                     _setGestureEnterThresh:	
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  6274                           ;setGestureEnterThresh@threshold stored from wreg
  6275  0B1E  0020               	movlb	0	; select bank0
  6276  0B1F  00AB               	movwf	setGestureEnterThresh@threshold
  6277                           
  6278                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  6279  0B20  082B               	movf	setGestureEnterThresh@threshold,w
  6280  0B21  00AA               	movwf	??_setGestureEnterThresh
  6281  0B22  082A               	movf	??_setGestureEnterThresh,w
  6282  0B23  00A6               	movwf	wireWriteDataByte@val
  6283  0B24  30A0               	movlw	160
  6284  0B25  318B  23AC  318B   	fcall	_wireWriteDataByte
  6285  0B28  0020               	movlb	0	; select bank0
  6286  0B29  0826               	movf	?_wireWriteDataByte,w
  6287  0B2A  0427               	iorwf	?_wireWriteDataByte+1,w
  6288  0B2B  1D03               	btfss	3,2
  6289  0B2C  2B2F               	goto	l6017
  6290                           
  6291                           ;APDS9960.c: 303:         return 0;
  6292  0B2D  3000               	movlw	0
  6293  0B2E  0008               	return
  6294  0B2F                     l6017:	
  6295                           
  6296                           ;APDS9960.c: 306:     return 1;
  6297  0B2F  3001               	movlw	1
  6298  0B30  0008               	return
  6299  0B31                     __end_of_setGestureEnterThresh:	
  6300                           
  6301                           	psect	text13
  6302  0BFF                     __ptext13:	
  6303 ;; *************** function _setAmbientLightGain *****************
  6304 ;; Defined at:
  6305 ;;		line 213 in file "APDS9960.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  drive           1    wreg     unsigned char 
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;  drive           1   11[BANK0 ] unsigned char 
  6310 ;;  val             1   12[BANK0 ] unsigned char 
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      _Bool 
  6313 ;; Registers used:
  6314 ;;		wreg, status,2, status,0, pclath, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;Total ram usage:        3 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    8
  6327 ;; This function calls:
  6328 ;;		_wireReadDataByte
  6329 ;;		_wireWriteDataByte
  6330 ;; This function is called by:
  6331 ;;		_initialize
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _setAmbientLightGain
  6337  0BFF                     _setAmbientLightGain:	
  6338                           
  6339                           ;incstack = 0
  6340                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  6341                           ;setAmbientLightGain@drive stored from wreg
  6342  0BFF  0020               	movlb	0	; select bank0
  6343  0C00  00AB               	movwf	setAmbientLightGain@drive
  6344                           
  6345                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  6346  0C01  308F               	movlw	143
  6347  0C02  318C  243E  318B   	fcall	_wireReadDataByte
  6348  0C05  0020               	movlb	0	; select bank0
  6349  0C06  00AA               	movwf	??_setAmbientLightGain
  6350  0C07  082A               	movf	??_setAmbientLightGain,w
  6351  0C08  00AC               	movwf	setAmbientLightGain@val
  6352                           
  6353                           ;APDS9960.c: 221:     drive &= 0b00000011;
  6354  0C09  3003               	movlw	3
  6355  0C0A  00AA               	movwf	??_setAmbientLightGain
  6356  0C0B  082A               	movf	??_setAmbientLightGain,w
  6357  0C0C  05AB               	andwf	setAmbientLightGain@drive,f
  6358                           
  6359                           ;APDS9960.c: 222:     val &= 0b11111100;
  6360  0C0D  30FC               	movlw	252
  6361  0C0E  00AA               	movwf	??_setAmbientLightGain
  6362  0C0F  082A               	movf	??_setAmbientLightGain,w
  6363  0C10  05AC               	andwf	setAmbientLightGain@val,f
  6364                           
  6365                           ;APDS9960.c: 223:     val |= drive;
  6366  0C11  082B               	movf	setAmbientLightGain@drive,w
  6367  0C12  00AA               	movwf	??_setAmbientLightGain
  6368  0C13  082A               	movf	??_setAmbientLightGain,w
  6369  0C14  04AC               	iorwf	setAmbientLightGain@val,f
  6370                           
  6371                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  6372  0C15  082C               	movf	setAmbientLightGain@val,w
  6373  0C16  00AA               	movwf	??_setAmbientLightGain
  6374  0C17  082A               	movf	??_setAmbientLightGain,w
  6375  0C18  00A6               	movwf	wireWriteDataByte@val
  6376  0C19  308F               	movlw	143
  6377  0C1A  318B  23AC         	fcall	_wireWriteDataByte
  6378  0C1C  0008               	return
  6379  0C1D                     __end_of_setAmbientLightGain:	
  6380                           
  6381                           	psect	text14
  6382  0AB9                     __ptext14:	
  6383 ;; *************** function _i2c1_driver_open *****************
  6384 ;; Defined at:
  6385 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;		None               void
  6392 ;; Registers used:
  6393 ;;		wreg, status,2
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;Total ram usage:        0 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    5
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_initialize
  6410 ;;		_i2c_open
  6411 ;;		_InitI2C
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           
  6416                           ;psect for function _i2c1_driver_open
  6417  0AB9                     _i2c1_driver_open:	
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  6421  0AB9  0024               	movlb	4	; select bank4
  6422  0ABA  1A95               	btfsc	21,5	;volatile
  6423  0ABB  0008               	return
  6424  0ABC  0194               	clrf	20	;volatile
  6425  0ABD  3028               	movlw	40
  6426  0ABE  0095               	movwf	21	;volatile
  6427  0ABF  0196               	clrf	22	;volatile
  6428  0AC0  3003               	movlw	3
  6429  0AC1  0092               	movwf	18	;volatile
  6430  0AC2  0008               	return
  6431  0AC3                     __end_of_i2c1_driver_open:	
  6432                           
  6433                           	psect	text15
  6434  06AF                     __ptext15:	
  6435 ;; *************** function _handleGesture *****************
  6436 ;; Defined at:
  6437 ;;		line 123 in file "main.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      void 
  6444 ;; Registers used:
  6445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        1 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:   10
  6458 ;; This function calls:
  6459 ;;		_Display_Clear
  6460 ;;		_Display_Name
  6461 ;;		_readGesture
  6462 ;; This function is called by:
  6463 ;;		_main
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           
  6468                           ;psect for function _handleGesture
  6469  06AF                     _handleGesture:	
  6470                           
  6471                           ;main.c: 124:     switch(readGesture()){
  6472                           
  6473                           ;incstack = 0
  6474                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6475  06AF  2EFB               	goto	l6415
  6476  06B0                     l6387:	
  6477                           
  6478                           ;main.c: 126:              Display_Name("up");
  6479  06B0  3073               	movlw	low (STR_2| (0+32768))
  6480  06B1  00A5               	movwf	Display_Name@string1
  6481  06B2  3090               	movlw	high (STR_2| (0+32768))
  6482  06B3  00A6               	movwf	Display_Name@string1+1
  6483  06B4  318E  2668  3186   	fcall	_Display_Name
  6484                           
  6485                           ;main.c: 127:             break;
  6486  06B7  2F18               	goto	l6417
  6487  06B8                     l6389:	
  6488                           
  6489                           ;main.c: 129:             Display_Name("down");
  6490  06B8  3060               	movlw	low (STR_3| (0+32768))
  6491  06B9  00A5               	movwf	Display_Name@string1
  6492  06BA  3090               	movlw	high (STR_3| (0+32768))
  6493  06BB  00A6               	movwf	Display_Name@string1+1
  6494  06BC  318E  2668  3186   	fcall	_Display_Name
  6495                           
  6496                           ;main.c: 130:             break;
  6497  06BF  2F18               	goto	l6417
  6498  06C0                     l6391:	
  6499                           
  6500                           ;main.c: 132:             name++;
  6501  06C0  3001               	movlw	1
  6502  06C1  00DB               	movwf	??_handleGesture
  6503  06C2  085B               	movf	??_handleGesture,w
  6504  06C3  07EF               	addwf	_name,f
  6505                           
  6506                           ;main.c: 133:             if(name > 4) {
  6507  06C4  3005               	movlw	5
  6508  06C5  026F               	subwf	_name,w
  6509  06C6  1C03               	skipc
  6510  06C7  2ECA               	goto	l6397
  6511                           
  6512                           ;main.c: 134:                 name = 1;
  6513  06C8  01EF               	clrf	_name
  6514  06C9  0AEF               	incf	_name,f
  6515  06CA                     l6397:	
  6516                           
  6517                           ;main.c: 136:             Display_Clear();
  6518  06CA  318A  22FA  3186   	fcall	_Display_Clear
  6519                           
  6520                           ;main.c: 137:             Display_Name("left");
  6521  06CD  306A               	movlw	low (STR_4| (0+32768))
  6522  06CE  0020               	movlb	0	; select bank0
  6523  06CF  00A5               	movwf	Display_Name@string1
  6524  06D0  3090               	movlw	high (STR_4| (0+32768))
  6525  06D1  00A6               	movwf	Display_Name@string1+1
  6526  06D2  318E  2668  3186   	fcall	_Display_Name
  6527                           
  6528                           ;main.c: 140:             break;
  6529  06D5  2F18               	goto	l6417
  6530  06D6                     l6401:	
  6531                           
  6532                           ;main.c: 142:             name--;
  6533  06D6  3001               	movlw	1
  6534  06D7  02EF               	subwf	_name,f
  6535                           
  6536                           ;main.c: 143:             if(name < 1) {
  6537  06D8  086F               	movf	_name,w
  6538  06D9  1D03               	btfss	3,2
  6539  06DA  2EDF               	goto	l6405
  6540                           
  6541                           ;main.c: 144:                 name = 4;
  6542  06DB  3004               	movlw	4
  6543  06DC  00DB               	movwf	??_handleGesture
  6544  06DD  085B               	movf	??_handleGesture,w
  6545  06DE  00EF               	movwf	_name
  6546  06DF                     l6405:	
  6547                           
  6548                           ;main.c: 146:             Display_Clear();
  6549  06DF  318A  22FA  3186   	fcall	_Display_Clear
  6550                           
  6551                           ;main.c: 147:             Display_Name("right");
  6552  06E2  305A               	movlw	low (STR_5| (0+32768))
  6553  06E3  0020               	movlb	0	; select bank0
  6554  06E4  00A5               	movwf	Display_Name@string1
  6555  06E5  3090               	movlw	high (STR_5| (0+32768))
  6556  06E6  00A6               	movwf	Display_Name@string1+1
  6557  06E7  318E  2668  3186   	fcall	_Display_Name
  6558                           
  6559                           ;main.c: 150:             break;
  6560  06EA  2F18               	goto	l6417
  6561  06EB                     l6409:	
  6562                           
  6563                           ;main.c: 152:             Display_Name("near");
  6564  06EB  3065               	movlw	low (STR_6| (0+32768))
  6565  06EC  00A5               	movwf	Display_Name@string1
  6566  06ED  3090               	movlw	high (STR_6| (0+32768))
  6567  06EE  00A6               	movwf	Display_Name@string1+1
  6568  06EF  318E  2668  3186   	fcall	_Display_Name
  6569                           
  6570                           ;main.c: 153:             break;
  6571  06F2  2F18               	goto	l6417
  6572  06F3                     l6411:	
  6573                           
  6574                           ;main.c: 155:             Display_Name("far");
  6575  06F3  306F               	movlw	low (STR_7| (0+32768))
  6576  06F4  00A5               	movwf	Display_Name@string1
  6577  06F5  3090               	movlw	high (STR_7| (0+32768))
  6578  06F6  00A6               	movwf	Display_Name@string1+1
  6579  06F7  318E  2668  3186   	fcall	_Display_Name
  6580                           
  6581                           ;main.c: 156:             break;
  6582  06FA  2F18               	goto	l6417
  6583  06FB                     l6415:	
  6584  06FB  3185  25C1  3186   	fcall	_readGesture
  6585                           
  6586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6587                           ; Switch size 1, requested type "simple"
  6588                           ; Number of cases is 1, Range of values is 0 to 0
  6589                           ; switch strategies available:
  6590                           ; Name         Instructions Cycles
  6591                           ; simple_byte            4     3 (average)
  6592                           ; direct_byte            8     6 (fixed)
  6593                           ; jumptable            260     6 (fixed)
  6594                           ;	Chosen strategy is simple_byte
  6595  06FE  0020               	movlb	0	; select bank0
  6596  06FF  0850               	movf	?_readGesture+1,w
  6597  0700  3A00               	xorlw	0	; case 0
  6598  0701  1903               	skipnz
  6599  0702  2F04               	goto	l6665
  6600  0703  2F18               	goto	l6417
  6601  0704                     l6665:	
  6602                           
  6603                           ; Switch size 1, requested type "simple"
  6604                           ; Number of cases is 6, Range of values is 1 to 6
  6605                           ; switch strategies available:
  6606                           ; Name         Instructions Cycles
  6607                           ; simple_byte           19    10 (average)
  6608                           ; direct_byte           21     9 (fixed)
  6609                           ; jumptable            263     9 (fixed)
  6610                           ;	Chosen strategy is simple_byte
  6611  0704  084F               	movf	?_readGesture,w
  6612  0705  3A01               	xorlw	1	; case 1
  6613  0706  1903               	skipnz
  6614  0707  2EC0               	goto	l6391
  6615  0708  3A03               	xorlw	3	; case 2
  6616  0709  1903               	skipnz
  6617  070A  2ED6               	goto	l6401
  6618  070B  3A01               	xorlw	1	; case 3
  6619  070C  1903               	skipnz
  6620  070D  2EB0               	goto	l6387
  6621  070E  3A07               	xorlw	7	; case 4
  6622  070F  1903               	skipnz
  6623  0710  2EB8               	goto	l6389
  6624  0711  3A01               	xorlw	1	; case 5
  6625  0712  1903               	skipnz
  6626  0713  2EEB               	goto	l6409
  6627  0714  3A03               	xorlw	3	; case 6
  6628  0715  1903               	skipnz
  6629  0716  2EF3               	goto	l6411
  6630  0717  2F18               	goto	l6417
  6631  0718                     l6417:	
  6632                           
  6633                           ;main.c: 161:     printed = 0;
  6634  0718  0020               	movlb	0	; select bank0
  6635  0719  01EE               	clrf	_printed
  6636  071A  0008               	return
  6637  071B                     __end_of_handleGesture:	
  6638                           
  6639                           	psect	text16
  6640  05C1                     __ptext16:	
  6641 ;; *************** function _readGesture *****************
  6642 ;; Defined at:
  6643 ;;		line 556 in file "APDS9960.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  6648 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  6649 ;;  i               2   57[BANK0 ] int 
  6650 ;;  bytes_read      2   54[BANK0 ] int 
  6651 ;;  motion          2   51[BANK0 ] int 
  6652 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  6653 ;;  gstatus         1   53[BANK0 ] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  2   47[BANK0 ] int 
  6656 ;; Registers used:
  6657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;Total ram usage:      140 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    9
  6670 ;; This function calls:
  6671 ;;		_decodeGesture
  6672 ;;		_getMode
  6673 ;;		_isGestureAvailable
  6674 ;;		_processGestureData
  6675 ;;		_resetGestureParameters
  6676 ;;		_wireReadDataBlock
  6677 ;;		_wireReadDataByte
  6678 ;; This function is called by:
  6679 ;;		_handleGesture
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _readGesture
  6685  05C1                     _readGesture:	
  6686                           
  6687                           ;APDS9960.c: 559:     int bytes_read = 0;
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6691  05C1  0020               	movlb	0	; select bank0
  6692  05C2  01D6               	clrf	readGesture@bytes_read
  6693  05C3  01D7               	clrf	readGesture@bytes_read+1
  6694                           
  6695                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  6696  05C4  318B  230B  3185   	fcall	_isGestureAvailable
  6697  05C7  3A00               	xorlw	0
  6698  05C8  1903               	skipnz
  6699  05C9  2DD0               	goto	l5859
  6700  05CA  318A  22B0  3185   	fcall	_getMode
  6701  05CD  3941               	andlw	65
  6702  05CE  1D03               	btfss	3,2
  6703  05CF  2E85               	goto	l5863
  6704  05D0                     l5859:	
  6705                           
  6706                           ;APDS9960.c: 568:         return DIR_NONE;
  6707  05D0  0020               	movlb	0	; select bank0
  6708  05D1  01CF               	clrf	?_readGesture
  6709  05D2  01D0               	clrf	?_readGesture+1
  6710  05D3  0008               	return
  6711  05D4                     l5869:	
  6712                           ;APDS9960.c: 569:     }
  6713                           
  6714                           
  6715                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  6716  05D4  30AE               	movlw	174
  6717  05D5  318C  243E  3185   	fcall	_wireReadDataByte
  6718  05D8  0020               	movlb	0	; select bank0
  6719  05D9  00D1               	movwf	??_readGesture
  6720  05DA  0851               	movf	??_readGesture,w
  6721  05DB  00D8               	movwf	readGesture@fifo_level
  6722                           
  6723                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  6724  05DC  0858               	movf	readGesture@fifo_level,w
  6725  05DD  1903               	btfsc	3,2
  6726  05DE  2E85               	goto	l5863
  6727                           
  6728                           ;APDS9960.c: 592:               if(fifo_level < 17)
  6729  05DF  3011               	movlw	17
  6730  05E0  0258               	subwf	readGesture@fifo_level,w
  6731  05E1  1803               	skipnc
  6732  05E2  2DE7               	goto	l5877
  6733                           
  6734                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6735  05E3  3020               	movlw	low readGesture@fifo_data
  6736  05E4  00A6               	movwf	wireReadDataBlock@val
  6737  05E5  3001               	movlw	high readGesture@fifo_data
  6738  05E6  2DEA               	goto	L1
  6739  05E7                     l5877:	
  6740                           ;APDS9960.c: 597:               } else
  6741                           
  6742                           
  6743                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6744  05E7  30A0               	movlw	low readGesture@fifo_data2
  6745  05E8  00A6               	movwf	wireReadDataBlock@val
  6746  05E9  3000               	movlw	high readGesture@fifo_data2
  6747  05EA                     L1:	
  6748  05EA  00A7               	movwf	wireReadDataBlock@val+1
  6749  05EB  0858               	movf	readGesture@fifo_level,w
  6750  05EC  00D1               	movwf	??_readGesture
  6751  05ED  01D2               	clrf	??_readGesture+1
  6752  05EE  35D1               	lslf	??_readGesture,f
  6753  05EF  0DD2               	rlf	??_readGesture+1,f
  6754  05F0  35D1               	lslf	??_readGesture,f
  6755  05F1  0DD2               	rlf	??_readGesture+1,f
  6756  05F2  0851               	movf	??_readGesture,w
  6757  05F3  00A8               	movwf	wireReadDataBlock@len
  6758  05F4  0852               	movf	??_readGesture+1,w
  6759  05F5  00A9               	movwf	wireReadDataBlock@len+1
  6760  05F6  30FC               	movlw	252
  6761  05F7  318F  2718  3185   	fcall	_wireReadDataBlock
  6762  05FA  0020               	movlb	0	; select bank0
  6763  05FB  0827               	movf	?_wireReadDataBlock+1,w
  6764  05FC  00D7               	movwf	readGesture@bytes_read+1
  6765  05FD  0826               	movf	?_wireReadDataBlock,w
  6766  05FE  00D6               	movwf	readGesture@bytes_read
  6767                           
  6768                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  6769  05FF  0A56               	incf	readGesture@bytes_read,w
  6770  0600  1D03               	skipz
  6771  0601  2E0A               	goto	l5885
  6772  0602  0A57               	incf	readGesture@bytes_read+1,w
  6773  0603  1D03               	btfss	3,2
  6774  0604  2E0A               	goto	l5885
  6775                           
  6776                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  6777  0605  30FF               	movlw	255
  6778  0606  00CF               	movwf	?_readGesture
  6779  0607  3000               	movlw	0
  6780  0608  00D0               	movwf	?_readGesture+1
  6781  0609  0008               	return
  6782  060A                     l5885:	
  6783                           
  6784                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  6785  060A  0857               	movf	readGesture@bytes_read+1,w
  6786  060B  3A80               	xorlw	128
  6787  060C  00D1               	movwf	??_readGesture
  6788  060D  3080               	movlw	128
  6789  060E  0251               	subwf	??_readGesture,w
  6790  060F  1D03               	skipz
  6791  0610  2E13               	goto	u5125
  6792  0611  3004               	movlw	4
  6793  0612  0256               	subwf	readGesture@bytes_read,w
  6794  0613                     u5125:	
  6795  0613  1C03               	skipc
  6796  0614  2E85               	goto	l5863
  6797                           
  6798                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  6799  0615  0020               	movlb	0	; select bank0
  6800  0616  01D9               	clrf	readGesture@i
  6801  0617  01DA               	clrf	readGesture@i+1
  6802  0618                     l5897:	
  6803  0618  085A               	movf	readGesture@i+1,w
  6804  0619  3A80               	xorlw	128
  6805  061A  00D1               	movwf	??_readGesture
  6806  061B  0857               	movf	readGesture@bytes_read+1,w
  6807  061C  3A80               	xorlw	128
  6808  061D  0251               	subwf	??_readGesture,w
  6809  061E  1D03               	skipz
  6810  061F  2E22               	goto	u5135
  6811  0620  0856               	movf	readGesture@bytes_read,w
  6812  0621  0259               	subwf	readGesture@i,w
  6813  0622                     u5135:	
  6814  0622  1803               	btfsc	3,0
  6815  0623  2E79               	goto	l5899
  6816                           
  6817                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  6818  0624  0020               	movlb	0	; select bank0
  6819  0625  0859               	movf	readGesture@i,w
  6820  0626  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6821  0627  0086               	movwf	6
  6822  0628  3001               	movlw	1	; select bank2/3
  6823  0629  0087               	movwf	7
  6824  062A  0801               	movf	1,w
  6825  062B  00D1               	movwf	??_readGesture
  6826  062C  0024               	movlb	4	; select bank4
  6827  062D  0860               	movf	(_gesture_data_^(0+512)+64),w
  6828  062E  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6829  062F  0086               	movwf	6
  6830  0630  3002               	movlw	2	; select bank4/5
  6831  0631  0087               	movwf	7
  6832  0632  0020               	movlb	0	; select bank0
  6833  0633  0851               	movf	??_readGesture,w
  6834  0634  0081               	movwf	1
  6835                           
  6836                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  6837  0635  0859               	movf	readGesture@i,w
  6838  0636  3E01               	addlw	1
  6839  0637  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6840  0638  0086               	movwf	6
  6841  0639  3001               	movlw	1	; select bank2/3
  6842  063A  0087               	movwf	7
  6843  063B  0801               	movf	1,w
  6844  063C  00D1               	movwf	??_readGesture
  6845  063D  0024               	movlb	4	; select bank4
  6846  063E  0860               	movf	(_gesture_data_^(0+512)+64),w
  6847  063F  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6848  0640  0086               	movwf	6
  6849  0641  3002               	movlw	2	; select bank4/5
  6850  0642  0087               	movwf	7
  6851  0643  0020               	movlb	0	; select bank0
  6852  0644  0851               	movf	??_readGesture,w
  6853  0645  0081               	movwf	1
  6854                           
  6855                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  6856  0646  0859               	movf	readGesture@i,w
  6857  0647  3E02               	addlw	2
  6858  0648  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6859  0649  0086               	movwf	6
  6860  064A  3001               	movlw	1	; select bank2/3
  6861  064B  0087               	movwf	7
  6862  064C  0801               	movf	1,w
  6863  064D  00D1               	movwf	??_readGesture
  6864  064E  0024               	movlb	4	; select bank4
  6865  064F  0860               	movf	(_gesture_data_^(0+512)+64),w
  6866  0650  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6867  0651  0086               	movwf	6
  6868  0652  3002               	movlw	2	; select bank4/5
  6869  0653  0087               	movwf	7
  6870  0654  0020               	movlb	0	; select bank0
  6871  0655  0851               	movf	??_readGesture,w
  6872  0656  0081               	movwf	1
  6873                           
  6874                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  6875  0657  0859               	movf	readGesture@i,w
  6876  0658  3E03               	addlw	3
  6877  0659  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6878  065A  0086               	movwf	6
  6879  065B  3001               	movlw	1	; select bank2/3
  6880  065C  0087               	movwf	7
  6881  065D  0801               	movf	1,w
  6882  065E  00D1               	movwf	??_readGesture
  6883  065F  0024               	movlb	4	; select bank4
  6884  0660  0860               	movf	(_gesture_data_^(0+512)+64),w
  6885  0661  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6886  0662  0086               	movwf	6
  6887  0663  3002               	movlw	2	; select bank4/5
  6888  0664  0087               	movwf	7
  6889  0665  0020               	movlb	0	; select bank0
  6890  0666  0851               	movf	??_readGesture,w
  6891  0667  0081               	movwf	1
  6892                           
  6893                           ;APDS9960.c: 624:                         gesture_data_.index++;
  6894  0668  3001               	movlw	1
  6895  0669  00D1               	movwf	??_readGesture
  6896  066A  0851               	movf	??_readGesture,w
  6897  066B  0024               	movlb	4	; select bank4
  6898  066C  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  6899                           
  6900                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  6901  066D  3001               	movlw	1
  6902  066E  0020               	movlb	0	; select bank0
  6903  066F  00D1               	movwf	??_readGesture
  6904  0670  0851               	movf	??_readGesture,w
  6905  0671  0024               	movlb	4	; select bank4
  6906  0672  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  6907                           
  6908                           ;APDS9960.c: 626:                     }
  6909  0673  3004               	movlw	4
  6910  0674  0020               	movlb	0	; select bank0
  6911  0675  07D9               	addwf	readGesture@i,f
  6912  0676  3000               	movlw	0
  6913  0677  3DDA               	addwfc	readGesture@i+1,f
  6914  0678  2E18               	goto	l5897
  6915  0679                     l5899:	
  6916                           
  6917                           ;APDS9960.c: 629:                     if( processGestureData() )
  6918  0679  3180  2052  3185   	fcall	_processGestureData
  6919  067C  3A00               	xorlw	0
  6920  067D  1903               	skipnz
  6921  067E  2E82               	goto	l5903
  6922                           
  6923                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  6924  067F  3183  231D  3185   	fcall	_decodeGesture
  6925  0682                     l5903:	
  6926                           
  6927                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  6928  0682  0024               	movlb	4	; select bank4
  6929  0683  01E0               	clrf	(_gesture_data_^(0+512)+64)
  6930                           
  6931                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  6932  0684  01E1               	clrf	(_gesture_data_^(0+512)+65)
  6933  0685                     l5863:	
  6934                           
  6935                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(250000/4000.0)));
  6936  0685  3003               	movlw	3
  6937  0686  0020               	movlb	0	; select bank0
  6938  0687  00D1               	movwf	??_readGesture
  6939  0688  306E               	movlw	110
  6940  0689                     u5817:	
  6941  0689  0B89               	decfsz	9,f
  6942  068A  2E89               	goto	u5817
  6943  068B  0BD1               	decfsz	??_readGesture,f
  6944  068C  2E89               	goto	u5817
  6945                           
  6946                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  6947  068D  30AF               	movlw	175
  6948  068E  318C  243E  3185   	fcall	_wireReadDataByte
  6949  0691  0020               	movlb	0	; select bank0
  6950  0692  00D1               	movwf	??_readGesture
  6951  0693  0851               	movf	??_readGesture,w
  6952  0694  00D5               	movwf	readGesture@gstatus
  6953                           
  6954                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  6955  0695  1855               	btfsc	readGesture@gstatus,0
  6956  0696  2DD4               	goto	l5869
  6957                           
  6958                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(250000/4000.0)));
  6959  0697  3003               	movlw	3
  6960  0698  0020               	movlb	0	; select bank0
  6961  0699  00D1               	movwf	??_readGesture
  6962  069A  306E               	movlw	110
  6963  069B                     u5827:	
  6964  069B  0B89               	decfsz	9,f
  6965  069C  2E9B               	goto	u5827
  6966  069D  0BD1               	decfsz	??_readGesture,f
  6967  069E  2E9B               	goto	u5827
  6968                           
  6969                           ;APDS9960.c: 646:             decodeGesture();
  6970  069F  3183  231D  3185   	fcall	_decodeGesture
  6971                           
  6972                           ;APDS9960.c: 647:             motion = gesture_motion_;
  6973  06A2  0020               	movlb	0	; select bank0
  6974  06A3  085D               	movf	_gesture_motion_+1,w
  6975  06A4  00D4               	movwf	readGesture@motion+1
  6976  06A5  085C               	movf	_gesture_motion_,w
  6977  06A6  00D3               	movwf	readGesture@motion
  6978                           
  6979                           ;APDS9960.c: 649:             resetGestureParameters();
  6980  06A7  318B  236A         	fcall	_resetGestureParameters
  6981                           
  6982                           ;APDS9960.c: 651:             return motion;
  6983  06A9  0020               	movlb	0	; select bank0
  6984  06AA  0854               	movf	readGesture@motion+1,w
  6985  06AB  00D0               	movwf	?_readGesture+1
  6986  06AC  0853               	movf	readGesture@motion,w
  6987  06AD  00CF               	movwf	?_readGesture
  6988  06AE  0008               	return
  6989  06AF                     __end_of_readGesture:	
  6990                           
  6991                           	psect	text17
  6992  0F18                     __ptext17:	
  6993 ;; *************** function _wireReadDataBlock *****************
  6994 ;; Defined at:
  6995 ;;		line 847 in file "APDS9960.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  reg             1    wreg     unsigned char 
  6998 ;;  val             2    6[BANK0 ] PTR unsigned char 
  6999 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  7000 ;;  len             2    8[BANK0 ] unsigned int 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  reg             1   15[BANK0 ] unsigned char 
  7003 ;;  j               1   16[BANK0 ] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  2    6[BANK0 ] int 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:       11 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    7
  7020 ;; This function calls:
  7021 ;;		_I2C_ReStart
  7022 ;;		_I2C_Read_Byte
  7023 ;;		_I2C_Send_NACK
  7024 ;;		_I2C_Start
  7025 ;;		_I2C_Stop
  7026 ;;		_I2C_Write_Byte
  7027 ;; This function is called by:
  7028 ;;		_readGesture
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           
  7033                           ;psect for function _wireReadDataBlock
  7034  0F18                     _wireReadDataBlock:	
  7035                           
  7036                           ;incstack = 0
  7037                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7038                           ;wireReadDataBlock@reg stored from wreg
  7039  0F18  0020               	movlb	0	; select bank0
  7040  0F19  00AF               	movwf	wireReadDataBlock@reg
  7041                           
  7042                           ;APDS9960.c: 851:     I2C_Start();
  7043  0F1A  318A  2227  318F   	fcall	_I2C_Start
  7044                           
  7045                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  7046  0F1D  3072               	movlw	114
  7047  0F1E  318B  23C7  318F   	fcall	_I2C_Write_Byte
  7048                           
  7049                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  7050  0F21  0020               	movlb	0	; select bank0
  7051  0F22  082F               	movf	wireReadDataBlock@reg,w
  7052  0F23  318B  23C7  318F   	fcall	_I2C_Write_Byte
  7053                           
  7054                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  7055  0F26  0020               	movlb	0	; select bank0
  7056  0F27  01B0               	clrf	wireReadDataBlock@j
  7057  0F28                     l5481:	
  7058  0F28  0830               	movf	wireReadDataBlock@j,w
  7059  0F29  00AA               	movwf	??_wireReadDataBlock
  7060  0F2A  01AB               	clrf	??_wireReadDataBlock+1
  7061  0F2B  0829               	movf	wireReadDataBlock@len+1,w
  7062  0F2C  022B               	subwf	??_wireReadDataBlock+1,w
  7063  0F2D  1D03               	skipz
  7064  0F2E  2F31               	goto	u4285
  7065  0F2F  0828               	movf	wireReadDataBlock@len,w
  7066  0F30  022A               	subwf	??_wireReadDataBlock,w
  7067  0F31                     u4285:	
  7068  0F31  1803               	btfsc	3,0
  7069  0F32  2F57               	goto	l5483
  7070                           
  7071                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  7072  0F33  318A  2218  318F   	fcall	_I2C_ReStart
  7073                           
  7074                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  7075  0F36  3073               	movlw	115
  7076  0F37  318B  23C7  318F   	fcall	_I2C_Write_Byte
  7077                           
  7078                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  7079  0F3A  318A  22C3  318F   	fcall	_I2C_Read_Byte
  7080  0F3D  0020               	movlb	0	; select bank0
  7081  0F3E  00AA               	movwf	??_wireReadDataBlock
  7082  0F3F  0830               	movf	wireReadDataBlock@j,w
  7083  0F40  00AB               	movwf	??_wireReadDataBlock+1
  7084  0F41  01AC               	clrf	??_wireReadDataBlock+2
  7085  0F42  082B               	movf	??_wireReadDataBlock+1,w
  7086  0F43  0726               	addwf	wireReadDataBlock@val,w
  7087  0F44  00AD               	movwf	??_wireReadDataBlock+3
  7088  0F45  082C               	movf	??_wireReadDataBlock+2,w
  7089  0F46  3D27               	addwfc	wireReadDataBlock@val+1,w
  7090  0F47  00AE               	movwf	??_wireReadDataBlock+4
  7091  0F48  082D               	movf	??_wireReadDataBlock+3,w
  7092  0F49  0086               	movwf	6
  7093  0F4A  082E               	movf	??_wireReadDataBlock+4,w
  7094  0F4B  0087               	movwf	7
  7095  0F4C  082A               	movf	??_wireReadDataBlock,w
  7096  0F4D  0081               	movwf	1
  7097                           
  7098                           ;APDS9960.c: 862:       I2C_Send_NACK();
  7099  0F4E  318A  2221  318F   	fcall	_I2C_Send_NACK
  7100                           
  7101                           ;APDS9960.c: 864:     }
  7102  0F51  3001               	movlw	1
  7103  0F52  0020               	movlb	0	; select bank0
  7104  0F53  00AA               	movwf	??_wireReadDataBlock
  7105  0F54  082A               	movf	??_wireReadDataBlock,w
  7106  0F55  07B0               	addwf	wireReadDataBlock@j,f
  7107  0F56  2F28               	goto	l5481
  7108  0F57                     l5483:	
  7109                           
  7110                           ;APDS9960.c: 866:     I2C_Stop();
  7111  0F57  318A  222D         	fcall	_I2C_Stop
  7112                           
  7113                           ;APDS9960.c: 867:     return (int)j;
  7114  0F59  0020               	movlb	0	; select bank0
  7115  0F5A  0830               	movf	wireReadDataBlock@j,w
  7116  0F5B  00AA               	movwf	??_wireReadDataBlock
  7117  0F5C  01AB               	clrf	??_wireReadDataBlock+1
  7118  0F5D  082A               	movf	??_wireReadDataBlock,w
  7119  0F5E  00A6               	movwf	?_wireReadDataBlock
  7120  0F5F  082B               	movf	??_wireReadDataBlock+1,w
  7121  0F60  00A7               	movwf	?_wireReadDataBlock+1
  7122  0F61  0008               	return
  7123  0F62                     __end_of_wireReadDataBlock:	
  7124                           
  7125                           	psect	text18
  7126  0052                     __ptext18:	
  7127 ;; *************** function _processGestureData *****************
  7128 ;; Defined at:
  7129 ;;		line 657 in file "APDS9960.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;		None
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  i               2   45[BANK0 ] int 
  7134 ;;  lr_delta        2   43[BANK0 ] int 
  7135 ;;  ud_delta        2   41[BANK0 ] int 
  7136 ;;  lr_ratio_las    2   23[BANK0 ] int 
  7137 ;;  ud_ratio_las    2   21[BANK0 ] int 
  7138 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  7139 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  7140 ;;  r_first         1   40[BANK0 ] unsigned char 
  7141 ;;  l_first         1   39[BANK0 ] unsigned char 
  7142 ;;  d_first         1   38[BANK0 ] unsigned char 
  7143 ;;  u_first         1   37[BANK0 ] unsigned char 
  7144 ;;  r_last          1   36[BANK0 ] unsigned char 
  7145 ;;  l_last          1   35[BANK0 ] unsigned char 
  7146 ;;  d_last          1   34[BANK0 ] unsigned char 
  7147 ;;  u_last          1   33[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      _Bool 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;Total ram usage:       32 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    6
  7164 ;; This function calls:
  7165 ;;		___awdiv
  7166 ;;		___wmul
  7167 ;; This function is called by:
  7168 ;;		_readGesture
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           
  7173                           ;psect for function _processGestureData
  7174  0052                     _processGestureData:	
  7175                           
  7176                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  7177                           
  7178                           ;incstack = 0
  7179                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7180  0052  0020               	movlb	0	; select bank0
  7181  0053  01C5               	clrf	processGestureData@u_first
  7182                           
  7183                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  7184  0054  01C6               	clrf	processGestureData@d_first
  7185                           
  7186                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  7187  0055  01C7               	clrf	processGestureData@l_first
  7188                           
  7189                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  7190  0056  01C8               	clrf	processGestureData@r_first
  7191                           
  7192                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  7193  0057  01C1               	clrf	processGestureData@u_last
  7194                           
  7195                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  7196  0058  01C2               	clrf	processGestureData@d_last
  7197                           
  7198                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  7199  0059  01C3               	clrf	processGestureData@l_last
  7200                           
  7201                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  7202  005A  01C4               	clrf	processGestureData@r_last
  7203                           
  7204                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  7205  005B  3005               	movlw	5
  7206  005C  0024               	movlb	4	; select bank4
  7207  005D  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7208  005E  1803               	skipnc
  7209  005F  2862               	goto	l5497
  7210  0060                     l5493:	
  7211                           
  7212                           ;APDS9960.c: 677:         return 0;
  7213  0060  3000               	movlw	0
  7214  0061  0008               	return
  7215  0062                     l5497:	
  7216                           
  7217                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  7218  0062  3021               	movlw	33
  7219  0063  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7220  0064  1803               	skipnc
  7221  0065  292C               	goto	l5547
  7222  0066  0861               	movf	(_gesture_data_^(0+512)+65),w
  7223  0067  1903               	btfsc	3,2
  7224  0068  292C               	goto	l5547
  7225                           
  7226                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  7227  0069  0020               	movlb	0	; select bank0
  7228  006A  01CD               	clrf	processGestureData@i
  7229  006B  01CE               	clrf	processGestureData@i+1
  7230  006C  2871               	goto	l861
  7231  006D                     l5513:	
  7232                           ;APDS9960.c: 695:                 break;
  7233                           
  7234                           
  7235                           ;APDS9960.c: 697:         }
  7236  006D  3001               	movlw	1
  7237  006E  07CD               	addwf	processGestureData@i,f
  7238  006F  3000               	movlw	0
  7239  0070  3DCE               	addwfc	processGestureData@i+1,f
  7240  0071                     l861:	
  7241  0071  084E               	movf	processGestureData@i+1,w
  7242  0072  3A80               	xorlw	128
  7243  0073  00AF               	movwf	??_processGestureData
  7244  0074  3080               	movlw	128
  7245  0075  022F               	subwf	??_processGestureData,w
  7246  0076  1D03               	skipz
  7247  0077  287C               	goto	u4365
  7248  0078  0024               	movlb	4	; select bank4
  7249  0079  0861               	movf	(_gesture_data_^(0+512)+65),w
  7250  007A  0020               	movlb	0	; select bank0
  7251  007B  024D               	subwf	processGestureData@i,w
  7252  007C                     u4365:	
  7253  007C  1803               	btfsc	3,0
  7254  007D  28C7               	goto	l5515
  7255                           
  7256                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  7257  007E  0020               	movlb	0	; select bank0
  7258  007F  084D               	movf	processGestureData@i,w
  7259  0080  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7260  0081  0086               	movwf	6
  7261  0082  3002               	movlw	2	; select bank4/5
  7262  0083  0087               	movwf	7
  7263  0084  300B               	movlw	11
  7264  0085  0201               	subwf	1,w
  7265  0086  1C03               	skipc
  7266  0087  286D               	goto	l5513
  7267  0088  084D               	movf	processGestureData@i,w
  7268  0089  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7269  008A  0086               	movwf	6
  7270  008B  3002               	movlw	2	; select bank4/5
  7271  008C  0087               	movwf	7
  7272  008D  300B               	movlw	11
  7273  008E  0201               	subwf	1,w
  7274  008F  1C03               	skipc
  7275  0090  286D               	goto	l5513
  7276  0091  084D               	movf	processGestureData@i,w
  7277  0092  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7278  0093  0086               	movwf	6
  7279  0094  3002               	movlw	2	; select bank4/5
  7280  0095  0087               	movwf	7
  7281  0096  300B               	movlw	11
  7282  0097  0201               	subwf	1,w
  7283  0098  1C03               	skipc
  7284  0099  286D               	goto	l5513
  7285  009A  084D               	movf	processGestureData@i,w
  7286  009B  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7287  009C  0086               	movwf	6
  7288  009D  3002               	movlw	2	; select bank4/5
  7289  009E  0087               	movwf	7
  7290  009F  300B               	movlw	11
  7291  00A0  0201               	subwf	1,w
  7292  00A1  1C03               	skipc
  7293  00A2  286D               	goto	l5513
  7294                           
  7295                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  7296  00A3  084D               	movf	processGestureData@i,w
  7297  00A4  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7298  00A5  0086               	movwf	6
  7299  00A6  3002               	movlw	2	; select bank4/5
  7300  00A7  0087               	movwf	7
  7301  00A8  0801               	movf	1,w
  7302  00A9  00AF               	movwf	??_processGestureData
  7303  00AA  082F               	movf	??_processGestureData,w
  7304  00AB  00C5               	movwf	processGestureData@u_first
  7305                           
  7306                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  7307  00AC  084D               	movf	processGestureData@i,w
  7308  00AD  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7309  00AE  0086               	movwf	6
  7310  00AF  3002               	movlw	2	; select bank4/5
  7311  00B0  0087               	movwf	7
  7312  00B1  0801               	movf	1,w
  7313  00B2  00AF               	movwf	??_processGestureData
  7314  00B3  082F               	movf	??_processGestureData,w
  7315  00B4  00C6               	movwf	processGestureData@d_first
  7316                           
  7317                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  7318  00B5  084D               	movf	processGestureData@i,w
  7319  00B6  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7320  00B7  0086               	movwf	6
  7321  00B8  3002               	movlw	2	; select bank4/5
  7322  00B9  0087               	movwf	7
  7323  00BA  0801               	movf	1,w
  7324  00BB  00AF               	movwf	??_processGestureData
  7325  00BC  082F               	movf	??_processGestureData,w
  7326  00BD  00C7               	movwf	processGestureData@l_first
  7327                           
  7328                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  7329  00BE  084D               	movf	processGestureData@i,w
  7330  00BF  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7331  00C0  0086               	movwf	6
  7332  00C1  3002               	movlw	2	; select bank4/5
  7333  00C2  0087               	movwf	7
  7334  00C3  0801               	movf	1,w
  7335  00C4  00AF               	movwf	??_processGestureData
  7336  00C5  082F               	movf	??_processGestureData,w
  7337  00C6  00C8               	movwf	processGestureData@r_first
  7338  00C7                     l5515:	
  7339                           
  7340                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  7341  00C7  0020               	movlb	0	; select bank0
  7342  00C8  0845               	movf	processGestureData@u_first,w
  7343  00C9  1903               	btfsc	3,2
  7344  00CA  2860               	goto	l5493
  7345  00CB  0846               	movf	processGestureData@d_first,w
  7346  00CC  1903               	btfsc	3,2
  7347  00CD  2860               	goto	l5493
  7348  00CE  0847               	movf	processGestureData@l_first,w
  7349  00CF  1903               	btfsc	3,2
  7350  00D0  2860               	goto	l5493
  7351  00D1  0848               	movf	processGestureData@r_first,w
  7352  00D2  1903               	btfsc	3,2
  7353  00D3  2860               	goto	l5493
  7354                           
  7355                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  7356  00D4  0024               	movlb	4	; select bank4
  7357  00D5  0861               	movf	(_gesture_data_^(0+512)+65),w
  7358  00D6  3EFF               	addlw	255
  7359  00D7  0020               	movlb	0	; select bank0
  7360  00D8  00CD               	movwf	processGestureData@i
  7361  00D9  30FF               	movlw	255
  7362  00DA  1803               	skipnc
  7363  00DB  3000               	movlw	0
  7364  00DC  00CE               	movwf	processGestureData@i+1
  7365                           
  7366                           ;APDS9960.c: 717:                 break;
  7367  00DD  28E2               	goto	l5529
  7368  00DE                     l5543:	
  7369                           
  7370                           ;APDS9960.c: 719:         }
  7371  00DE  30FF               	movlw	255
  7372  00DF  07CD               	addwf	processGestureData@i,f
  7373  00E0  30FF               	movlw	255
  7374  00E1  3DCE               	addwfc	processGestureData@i+1,f
  7375  00E2                     l5529:	
  7376  00E2  1BCE               	btfsc	processGestureData@i+1,7
  7377  00E3  292C               	goto	l5547
  7378                           
  7379                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  7380  00E4  084D               	movf	processGestureData@i,w
  7381  00E5  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7382  00E6  0086               	movwf	6
  7383  00E7  3002               	movlw	2	; select bank4/5
  7384  00E8  0087               	movwf	7
  7385  00E9  300B               	movlw	11
  7386  00EA  0201               	subwf	1,w
  7387  00EB  1C03               	skipc
  7388  00EC  28DE               	goto	l5543
  7389  00ED  084D               	movf	processGestureData@i,w
  7390  00EE  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7391  00EF  0086               	movwf	6
  7392  00F0  3002               	movlw	2	; select bank4/5
  7393  00F1  0087               	movwf	7
  7394  00F2  300B               	movlw	11
  7395  00F3  0201               	subwf	1,w
  7396  00F4  1C03               	skipc
  7397  00F5  28DE               	goto	l5543
  7398  00F6  084D               	movf	processGestureData@i,w
  7399  00F7  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7400  00F8  0086               	movwf	6
  7401  00F9  3002               	movlw	2	; select bank4/5
  7402  00FA  0087               	movwf	7
  7403  00FB  300B               	movlw	11
  7404  00FC  0201               	subwf	1,w
  7405  00FD  1C03               	skipc
  7406  00FE  28DE               	goto	l5543
  7407  00FF  084D               	movf	processGestureData@i,w
  7408  0100  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7409  0101  0086               	movwf	6
  7410  0102  3002               	movlw	2	; select bank4/5
  7411  0103  0087               	movwf	7
  7412  0104  300B               	movlw	11
  7413  0105  0201               	subwf	1,w
  7414  0106  1C03               	skipc
  7415  0107  28DE               	goto	l5543
  7416                           
  7417                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  7418  0108  084D               	movf	processGestureData@i,w
  7419  0109  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7420  010A  0086               	movwf	6
  7421  010B  3002               	movlw	2	; select bank4/5
  7422  010C  0087               	movwf	7
  7423  010D  0801               	movf	1,w
  7424  010E  00AF               	movwf	??_processGestureData
  7425  010F  082F               	movf	??_processGestureData,w
  7426  0110  00C1               	movwf	processGestureData@u_last
  7427                           
  7428                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  7429  0111  084D               	movf	processGestureData@i,w
  7430  0112  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7431  0113  0086               	movwf	6
  7432  0114  3002               	movlw	2	; select bank4/5
  7433  0115  0087               	movwf	7
  7434  0116  0801               	movf	1,w
  7435  0117  00AF               	movwf	??_processGestureData
  7436  0118  082F               	movf	??_processGestureData,w
  7437  0119  00C2               	movwf	processGestureData@d_last
  7438                           
  7439                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  7440  011A  084D               	movf	processGestureData@i,w
  7441  011B  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7442  011C  0086               	movwf	6
  7443  011D  3002               	movlw	2	; select bank4/5
  7444  011E  0087               	movwf	7
  7445  011F  0801               	movf	1,w
  7446  0120  00AF               	movwf	??_processGestureData
  7447  0121  082F               	movf	??_processGestureData,w
  7448  0122  00C3               	movwf	processGestureData@l_last
  7449                           
  7450                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  7451  0123  084D               	movf	processGestureData@i,w
  7452  0124  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7453  0125  0086               	movwf	6
  7454  0126  3002               	movlw	2	; select bank4/5
  7455  0127  0087               	movwf	7
  7456  0128  0801               	movf	1,w
  7457  0129  00AF               	movwf	??_processGestureData
  7458  012A  082F               	movf	??_processGestureData,w
  7459  012B  00C4               	movwf	processGestureData@r_last
  7460  012C                     l5547:	
  7461                           
  7462                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  7463  012C  0020               	movlb	0	; select bank0
  7464  012D  0845               	movf	processGestureData@u_first,w
  7465  012E  0746               	addwf	processGestureData@d_first,w
  7466  012F  00A6               	movwf	___awdiv@divisor
  7467  0130  01A7               	clrf	___awdiv@divisor+1
  7468  0131  0DA7               	rlf	___awdiv@divisor+1,f
  7469  0132  0846               	movf	processGestureData@d_first,w
  7470  0133  0245               	subwf	processGestureData@u_first,w
  7471  0134  00A0               	movwf	___wmul@multiplier
  7472  0135  01A1               	clrf	___wmul@multiplier+1
  7473  0136  1C03               	skipc
  7474  0137  03A1               	decf	___wmul@multiplier+1,f
  7475  0138  3064               	movlw	100
  7476  0139  00A2               	movwf	___wmul@multiplicand
  7477  013A  3000               	movlw	0
  7478  013B  00A3               	movwf	___wmul@multiplicand+1
  7479  013C  318B  23E3  3180   	fcall	___wmul
  7480  013F  0020               	movlb	0	; select bank0
  7481  0140  0821               	movf	?___wmul+1,w
  7482  0141  00A9               	movwf	___awdiv@dividend+1
  7483  0142  0820               	movf	?___wmul,w
  7484  0143  00A8               	movwf	___awdiv@dividend
  7485  0144  3187  277F  3180   	fcall	___awdiv
  7486  0147  0020               	movlb	0	; select bank0
  7487  0148  0827               	movf	?___awdiv+1,w
  7488  0149  00B2               	movwf	processGestureData@ud_ratio_first+1
  7489  014A  0826               	movf	?___awdiv,w
  7490  014B  00B1               	movwf	processGestureData@ud_ratio_first
  7491                           
  7492                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  7493  014C  0847               	movf	processGestureData@l_first,w
  7494  014D  0748               	addwf	processGestureData@r_first,w
  7495  014E  00A6               	movwf	___awdiv@divisor
  7496  014F  01A7               	clrf	___awdiv@divisor+1
  7497  0150  0DA7               	rlf	___awdiv@divisor+1,f
  7498  0151  0848               	movf	processGestureData@r_first,w
  7499  0152  0247               	subwf	processGestureData@l_first,w
  7500  0153  00A0               	movwf	___wmul@multiplier
  7501  0154  01A1               	clrf	___wmul@multiplier+1
  7502  0155  1C03               	skipc
  7503  0156  03A1               	decf	___wmul@multiplier+1,f
  7504  0157  3064               	movlw	100
  7505  0158  00A2               	movwf	___wmul@multiplicand
  7506  0159  3000               	movlw	0
  7507  015A  00A3               	movwf	___wmul@multiplicand+1
  7508  015B  318B  23E3  3180   	fcall	___wmul
  7509  015E  0020               	movlb	0	; select bank0
  7510  015F  0821               	movf	?___wmul+1,w
  7511  0160  00A9               	movwf	___awdiv@dividend+1
  7512  0161  0820               	movf	?___wmul,w
  7513  0162  00A8               	movwf	___awdiv@dividend
  7514  0163  3187  277F  3180   	fcall	___awdiv
  7515  0166  0020               	movlb	0	; select bank0
  7516  0167  0827               	movf	?___awdiv+1,w
  7517  0168  00B4               	movwf	processGestureData@lr_ratio_first+1
  7518  0169  0826               	movf	?___awdiv,w
  7519  016A  00B3               	movwf	processGestureData@lr_ratio_first
  7520                           
  7521                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  7522  016B  0841               	movf	processGestureData@u_last,w
  7523  016C  0742               	addwf	processGestureData@d_last,w
  7524  016D  00A6               	movwf	___awdiv@divisor
  7525  016E  01A7               	clrf	___awdiv@divisor+1
  7526  016F  0DA7               	rlf	___awdiv@divisor+1,f
  7527  0170  0842               	movf	processGestureData@d_last,w
  7528  0171  0241               	subwf	processGestureData@u_last,w
  7529  0172  00A0               	movwf	___wmul@multiplier
  7530  0173  01A1               	clrf	___wmul@multiplier+1
  7531  0174  1C03               	skipc
  7532  0175  03A1               	decf	___wmul@multiplier+1,f
  7533  0176  3064               	movlw	100
  7534  0177  00A2               	movwf	___wmul@multiplicand
  7535  0178  3000               	movlw	0
  7536  0179  00A3               	movwf	___wmul@multiplicand+1
  7537  017A  318B  23E3  3180   	fcall	___wmul
  7538  017D  0020               	movlb	0	; select bank0
  7539  017E  0821               	movf	?___wmul+1,w
  7540  017F  00A9               	movwf	___awdiv@dividend+1
  7541  0180  0820               	movf	?___wmul,w
  7542  0181  00A8               	movwf	___awdiv@dividend
  7543  0182  3187  277F  3180   	fcall	___awdiv
  7544  0185  0020               	movlb	0	; select bank0
  7545  0186  0827               	movf	?___awdiv+1,w
  7546  0187  00B6               	movwf	processGestureData@ud_ratio_last+1
  7547  0188  0826               	movf	?___awdiv,w
  7548  0189  00B5               	movwf	processGestureData@ud_ratio_last
  7549                           
  7550                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  7551  018A  0843               	movf	processGestureData@l_last,w
  7552  018B  0744               	addwf	processGestureData@r_last,w
  7553  018C  00A6               	movwf	___awdiv@divisor
  7554  018D  01A7               	clrf	___awdiv@divisor+1
  7555  018E  0DA7               	rlf	___awdiv@divisor+1,f
  7556  018F  0844               	movf	processGestureData@r_last,w
  7557  0190  0243               	subwf	processGestureData@l_last,w
  7558  0191  00A0               	movwf	___wmul@multiplier
  7559  0192  01A1               	clrf	___wmul@multiplier+1
  7560  0193  1C03               	skipc
  7561  0194  03A1               	decf	___wmul@multiplier+1,f
  7562  0195  3064               	movlw	100
  7563  0196  00A2               	movwf	___wmul@multiplicand
  7564  0197  3000               	movlw	0
  7565  0198  00A3               	movwf	___wmul@multiplicand+1
  7566  0199  318B  23E3  3180   	fcall	___wmul
  7567  019C  0020               	movlb	0	; select bank0
  7568  019D  0821               	movf	?___wmul+1,w
  7569  019E  00A9               	movwf	___awdiv@dividend+1
  7570  019F  0820               	movf	?___wmul,w
  7571  01A0  00A8               	movwf	___awdiv@dividend
  7572  01A1  3187  277F  3180   	fcall	___awdiv
  7573  01A4  0020               	movlb	0	; select bank0
  7574  01A5  0827               	movf	?___awdiv+1,w
  7575  01A6  00B8               	movwf	processGestureData@lr_ratio_last+1
  7576  01A7  0826               	movf	?___awdiv,w
  7577  01A8  00B7               	movwf	processGestureData@lr_ratio_last
  7578                           
  7579                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  7580  01A9  0831               	movf	processGestureData@ud_ratio_first,w
  7581  01AA  0235               	subwf	processGestureData@ud_ratio_last,w
  7582  01AB  00C9               	movwf	processGestureData@ud_delta
  7583  01AC  0832               	movf	processGestureData@ud_ratio_first+1,w
  7584  01AD  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  7585  01AE  00CA               	movwf	processGestureData@ud_delta+1
  7586                           
  7587                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  7588  01AF  0833               	movf	processGestureData@lr_ratio_first,w
  7589  01B0  0237               	subwf	processGestureData@lr_ratio_last,w
  7590  01B1  00CB               	movwf	processGestureData@lr_delta
  7591  01B2  0834               	movf	processGestureData@lr_ratio_first+1,w
  7592  01B3  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  7593  01B4  00CC               	movwf	processGestureData@lr_delta+1
  7594                           
  7595                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  7596  01B5  0849               	movf	processGestureData@ud_delta,w
  7597  01B6  07EA               	addwf	_gesture_ud_delta_,f
  7598  01B7  084A               	movf	processGestureData@ud_delta+1,w
  7599  01B8  3DEB               	addwfc	_gesture_ud_delta_+1,f
  7600                           
  7601                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  7602  01B9  084B               	movf	processGestureData@lr_delta,w
  7603  01BA  07E8               	addwf	_gesture_lr_delta_,f
  7604  01BB  084C               	movf	processGestureData@lr_delta+1,w
  7605  01BC  3DE9               	addwfc	_gesture_lr_delta_+1,f
  7606                           
  7607                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  7608  01BD  086B               	movf	_gesture_ud_delta_+1,w
  7609  01BE  3A80               	xorlw	128
  7610  01BF  00AF               	movwf	??_processGestureData
  7611  01C0  3080               	movlw	128
  7612  01C1  022F               	subwf	??_processGestureData,w
  7613  01C2  1D03               	skipz
  7614  01C3  29C6               	goto	u4465
  7615  01C4  3032               	movlw	50
  7616  01C5  026A               	subwf	_gesture_ud_delta_,w
  7617  01C6                     u4465:	
  7618  01C6  1C03               	skipc
  7619  01C7  29CD               	goto	l5561
  7620                           
  7621                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  7622  01C8  3001               	movlw	1
  7623  01C9  0020               	movlb	0	; select bank0
  7624  01CA  00E6               	movwf	_gesture_ud_count_
  7625  01CB  3000               	movlw	0
  7626  01CC  29DD               	goto	L2
  7627  01CD                     l5561:	
  7628                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  7629                           
  7630  01CD  0020               	movlb	0	; select bank0
  7631  01CE  086B               	movf	_gesture_ud_delta_+1,w
  7632  01CF  3A80               	xorlw	128
  7633  01D0  00AF               	movwf	??_processGestureData
  7634  01D1  307F               	movlw	127
  7635  01D2  022F               	subwf	??_processGestureData,w
  7636  01D3  1D03               	skipz
  7637  01D4  29D7               	goto	u4475
  7638  01D5  30CF               	movlw	207
  7639  01D6  026A               	subwf	_gesture_ud_delta_,w
  7640  01D7                     u4475:	
  7641  01D7  1803               	skipnc
  7642  01D8  29DF               	goto	l5565
  7643                           
  7644                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  7645  01D9  30FF               	movlw	255
  7646  01DA  0020               	movlb	0	; select bank0
  7647  01DB  00E6               	movwf	_gesture_ud_count_
  7648  01DC  30FF               	movlw	255
  7649  01DD                     L2:	
  7650  01DD  00E7               	movwf	_gesture_ud_count_+1
  7651                           
  7652                           ;APDS9960.c: 741:     } else {
  7653  01DE  29E2               	goto	l5567
  7654  01DF                     l5565:	
  7655                           
  7656                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  7657  01DF  0020               	movlb	0	; select bank0
  7658  01E0  01E6               	clrf	_gesture_ud_count_
  7659  01E1  01E7               	clrf	_gesture_ud_count_+1
  7660  01E2                     l5567:	
  7661                           
  7662                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  7663  01E2  0869               	movf	_gesture_lr_delta_+1,w
  7664  01E3  3A80               	xorlw	128
  7665  01E4  00AF               	movwf	??_processGestureData
  7666  01E5  3080               	movlw	128
  7667  01E6  022F               	subwf	??_processGestureData,w
  7668  01E7  1D03               	skipz
  7669  01E8  29EB               	goto	u4485
  7670  01E9  3032               	movlw	50
  7671  01EA  0268               	subwf	_gesture_lr_delta_,w
  7672  01EB                     u4485:	
  7673  01EB  1C03               	skipc
  7674  01EC  29F2               	goto	l5571
  7675                           
  7676                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  7677  01ED  3001               	movlw	1
  7678  01EE  0020               	movlb	0	; select bank0
  7679  01EF  00E4               	movwf	_gesture_lr_count_
  7680  01F0  3000               	movlw	0
  7681  01F1  2A02               	goto	L3
  7682  01F2                     l5571:	
  7683                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  7684                           
  7685  01F2  0020               	movlb	0	; select bank0
  7686  01F3  0869               	movf	_gesture_lr_delta_+1,w
  7687  01F4  3A80               	xorlw	128
  7688  01F5  00AF               	movwf	??_processGestureData
  7689  01F6  307F               	movlw	127
  7690  01F7  022F               	subwf	??_processGestureData,w
  7691  01F8  1D03               	skipz
  7692  01F9  29FC               	goto	u4495
  7693  01FA  30CF               	movlw	207
  7694  01FB  0268               	subwf	_gesture_lr_delta_,w
  7695  01FC                     u4495:	
  7696  01FC  1803               	skipnc
  7697  01FD  2A04               	goto	l5575
  7698                           
  7699                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  7700  01FE  30FF               	movlw	255
  7701  01FF  0020               	movlb	0	; select bank0
  7702  0200  00E4               	movwf	_gesture_lr_count_
  7703  0201  30FF               	movlw	255
  7704  0202                     L3:	
  7705  0202  00E5               	movwf	_gesture_lr_count_+1
  7706                           
  7707                           ;APDS9960.c: 750:     } else {
  7708  0203  2A07               	goto	l5577
  7709  0204                     l5575:	
  7710                           
  7711                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  7712  0204  0020               	movlb	0	; select bank0
  7713  0205  01E4               	clrf	_gesture_lr_count_
  7714  0206  01E5               	clrf	_gesture_lr_count_+1
  7715  0207                     l5577:	
  7716                           
  7717                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  7718  0207  0866               	movf	_gesture_ud_count_,w
  7719  0208  0467               	iorwf	_gesture_ud_count_+1,w
  7720  0209  1D03               	btfss	3,2
  7721  020A  2AAA               	goto	l5621
  7722  020B  0864               	movf	_gesture_lr_count_,w
  7723  020C  0465               	iorwf	_gesture_lr_count_+1,w
  7724  020D  1D03               	btfss	3,2
  7725  020E  2AAA               	goto	l5621
  7726                           
  7727                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7728  020F  084A               	movf	processGestureData@ud_delta+1,w
  7729  0210  3A80               	xorlw	128
  7730  0211  00AF               	movwf	??_processGestureData
  7731  0212  3080               	movlw	128
  7732  0213  022F               	subwf	??_processGestureData,w
  7733  0214  1D03               	skipz
  7734  0215  2A18               	goto	u4525
  7735  0216  3001               	movlw	1
  7736  0217  0249               	subwf	processGestureData@ud_delta,w
  7737  0218                     u4525:	
  7738  0218  1803               	skipnc
  7739  0219  2A27               	goto	l5585
  7740  021A  0020               	movlb	0	; select bank0
  7741  021B  0949               	comf	processGestureData@ud_delta,w
  7742  021C  00AF               	movwf	??_processGestureData
  7743  021D  094A               	comf	processGestureData@ud_delta+1,w
  7744  021E  00B0               	movwf	??_processGestureData+1
  7745  021F  0AAF               	incf	??_processGestureData,f
  7746  0220  1903               	skipnz
  7747  0221  0AB0               	incf	??_processGestureData+1,f
  7748  0222  082F               	movf	??_processGestureData,w
  7749  0223  00B9               	movwf	_processGestureData$1184
  7750  0224  0830               	movf	??_processGestureData+1,w
  7751  0225  00BA               	movwf	_processGestureData$1184+1
  7752  0226  2A2C               	goto	l884
  7753  0227                     l5585:	
  7754  0227  0020               	movlb	0	; select bank0
  7755  0228  084A               	movf	processGestureData@ud_delta+1,w
  7756  0229  00BA               	movwf	_processGestureData$1184+1
  7757  022A  0849               	movf	processGestureData@ud_delta,w
  7758  022B  00B9               	movwf	_processGestureData$1184
  7759  022C                     l884:	
  7760  022C  083A               	movf	_processGestureData$1184+1,w
  7761  022D  3A80               	xorlw	128
  7762  022E  00AF               	movwf	??_processGestureData
  7763  022F  3080               	movlw	128
  7764  0230  022F               	subwf	??_processGestureData,w
  7765  0231  1D03               	skipz
  7766  0232  2A35               	goto	u4535
  7767  0233  3014               	movlw	20
  7768  0234  0239               	subwf	_processGestureData$1184,w
  7769  0235                     u4535:	
  7770  0235  1803               	skipnc
  7771  0236  2860               	goto	l5493
  7772  0237  0020               	movlb	0	; select bank0
  7773  0238  084C               	movf	processGestureData@lr_delta+1,w
  7774  0239  3A80               	xorlw	128
  7775  023A  00AF               	movwf	??_processGestureData
  7776  023B  3080               	movlw	128
  7777  023C  022F               	subwf	??_processGestureData,w
  7778  023D  1D03               	skipz
  7779  023E  2A41               	goto	u4545
  7780  023F  3001               	movlw	1
  7781  0240  024B               	subwf	processGestureData@lr_delta,w
  7782  0241                     u4545:	
  7783  0241  1803               	skipnc
  7784  0242  2A50               	goto	l5591
  7785  0243  0020               	movlb	0	; select bank0
  7786  0244  094B               	comf	processGestureData@lr_delta,w
  7787  0245  00AF               	movwf	??_processGestureData
  7788  0246  094C               	comf	processGestureData@lr_delta+1,w
  7789  0247  00B0               	movwf	??_processGestureData+1
  7790  0248  0AAF               	incf	??_processGestureData,f
  7791  0249  1903               	skipnz
  7792  024A  0AB0               	incf	??_processGestureData+1,f
  7793  024B  082F               	movf	??_processGestureData,w
  7794  024C  00BB               	movwf	_processGestureData$1185
  7795  024D  0830               	movf	??_processGestureData+1,w
  7796  024E  00BC               	movwf	_processGestureData$1185+1
  7797  024F  2A55               	goto	l888
  7798  0250                     l5591:	
  7799  0250  0020               	movlb	0	; select bank0
  7800  0251  084C               	movf	processGestureData@lr_delta+1,w
  7801  0252  00BC               	movwf	_processGestureData$1185+1
  7802  0253  084B               	movf	processGestureData@lr_delta,w
  7803  0254  00BB               	movwf	_processGestureData$1185
  7804  0255                     l888:	
  7805  0255  083C               	movf	_processGestureData$1185+1,w
  7806  0256  3A80               	xorlw	128
  7807  0257  00AF               	movwf	??_processGestureData
  7808  0258  3080               	movlw	128
  7809  0259  022F               	subwf	??_processGestureData,w
  7810  025A  1D03               	skipz
  7811  025B  2A5E               	goto	u4555
  7812  025C  3014               	movlw	20
  7813  025D  023B               	subwf	_processGestureData$1185,w
  7814  025E                     u4555:	
  7815  025E  1803               	skipnc
  7816  025F  2860               	goto	l5493
  7817                           
  7818                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7819  0260  0020               	movlb	0	; select bank0
  7820  0261  0849               	movf	processGestureData@ud_delta,w
  7821  0262  044A               	iorwf	processGestureData@ud_delta+1,w
  7822  0263  1D03               	btfss	3,2
  7823  0264  2A6E               	goto	l5599
  7824  0265  084B               	movf	processGestureData@lr_delta,w
  7825  0266  044C               	iorwf	processGestureData@lr_delta+1,w
  7826  0267  1D03               	btfss	3,2
  7827  0268  2A6E               	goto	l5599
  7828                           
  7829                           ;APDS9960.c: 760:                 gesture_near_count_++;
  7830  0269  3001               	movlw	1
  7831  026A  07E2               	addwf	_gesture_near_count_,f
  7832  026B  3000               	movlw	0
  7833  026C  3DE3               	addwfc	_gesture_near_count_+1,f
  7834                           
  7835                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  7836  026D  2A7A               	goto	l890
  7837  026E                     l5599:	
  7838  026E  0849               	movf	processGestureData@ud_delta,w
  7839  026F  044A               	iorwf	processGestureData@ud_delta+1,w
  7840  0270  1D03               	btfss	3,2
  7841  0271  2A76               	goto	l5603
  7842  0272  084B               	movf	processGestureData@lr_delta,w
  7843  0273  044C               	iorwf	processGestureData@lr_delta+1,w
  7844  0274  1903               	btfsc	3,2
  7845  0275  2A7A               	goto	l890
  7846  0276                     l5603:	
  7847                           
  7848                           ;APDS9960.c: 762:                 gesture_far_count_++;
  7849  0276  3001               	movlw	1
  7850  0277  07E0               	addwf	_gesture_far_count_,f
  7851  0278  3000               	movlw	0
  7852  0279  3DE1               	addwfc	_gesture_far_count_+1,f
  7853  027A                     l890:	
  7854                           
  7855                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  7856  027A  0863               	movf	_gesture_near_count_+1,w
  7857  027B  3A80               	xorlw	128
  7858  027C  00AF               	movwf	??_processGestureData
  7859  027D  3080               	movlw	128
  7860  027E  022F               	subwf	??_processGestureData,w
  7861  027F  1D03               	skipz
  7862  0280  2A83               	goto	u4605
  7863  0281  300A               	movlw	10
  7864  0282  0262               	subwf	_gesture_near_count_,w
  7865  0283                     u4605:	
  7866  0283  1C03               	skipc
  7867  0284  2860               	goto	l5493
  7868  0285  0020               	movlb	0	; select bank0
  7869  0286  0861               	movf	_gesture_far_count_+1,w
  7870  0287  3A80               	xorlw	128
  7871  0288  00AF               	movwf	??_processGestureData
  7872  0289  3080               	movlw	128
  7873  028A  022F               	subwf	??_processGestureData,w
  7874  028B  1D03               	skipz
  7875  028C  2A8F               	goto	u4615
  7876  028D  3002               	movlw	2
  7877  028E  0260               	subwf	_gesture_far_count_,w
  7878  028F                     u4615:	
  7879  028F  1C03               	skipc
  7880  0290  2860               	goto	l5493
  7881                           
  7882                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  7883  0291  0020               	movlb	0	; select bank0
  7884  0292  0849               	movf	processGestureData@ud_delta,w
  7885  0293  044A               	iorwf	processGestureData@ud_delta+1,w
  7886  0294  1D03               	btfss	3,2
  7887  0295  2A9C               	goto	l5613
  7888  0296  084B               	movf	processGestureData@lr_delta,w
  7889  0297  044C               	iorwf	processGestureData@lr_delta+1,w
  7890  0298  1D03               	btfss	3,2
  7891  0299  2A9C               	goto	l5613
  7892                           
  7893                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  7894  029A  3001               	movlw	1
  7895  029B  2AA5               	goto	L4
  7896  029C                     l5613:	
  7897                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  7898                           
  7899  029C  0849               	movf	processGestureData@ud_delta,w
  7900  029D  044A               	iorwf	processGestureData@ud_delta+1,w
  7901  029E  1903               	btfsc	3,2
  7902  029F  2AA8               	goto	l896
  7903  02A0  084B               	movf	processGestureData@lr_delta,w
  7904  02A1  044C               	iorwf	processGestureData@lr_delta+1,w
  7905  02A2  1903               	btfsc	3,2
  7906  02A3  2AA8               	goto	l896
  7907                           
  7908                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  7909  02A4  3002               	movlw	2
  7910  02A5                     L4:	
  7911  02A5  00DE               	movwf	_gesture_state_
  7912  02A6  3000               	movlw	0
  7913  02A7  00DF               	movwf	_gesture_state_+1
  7914  02A8                     l896:	
  7915                           
  7916                           ;APDS9960.c: 771:                 return 1;
  7917  02A8  3001               	movlw	1
  7918  02A9  0008               	return
  7919  02AA                     l5621:	
  7920                           
  7921                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7922  02AA  084A               	movf	processGestureData@ud_delta+1,w
  7923  02AB  3A80               	xorlw	128
  7924  02AC  00AF               	movwf	??_processGestureData
  7925  02AD  3080               	movlw	128
  7926  02AE  022F               	subwf	??_processGestureData,w
  7927  02AF  1D03               	skipz
  7928  02B0  2AB3               	goto	u4665
  7929  02B1  3001               	movlw	1
  7930  02B2  0249               	subwf	processGestureData@ud_delta,w
  7931  02B3                     u4665:	
  7932  02B3  1803               	skipnc
  7933  02B4  2AC2               	goto	l5625
  7934  02B5  0020               	movlb	0	; select bank0
  7935  02B6  0949               	comf	processGestureData@ud_delta,w
  7936  02B7  00AF               	movwf	??_processGestureData
  7937  02B8  094A               	comf	processGestureData@ud_delta+1,w
  7938  02B9  00B0               	movwf	??_processGestureData+1
  7939  02BA  0AAF               	incf	??_processGestureData,f
  7940  02BB  1903               	skipnz
  7941  02BC  0AB0               	incf	??_processGestureData+1,f
  7942  02BD  082F               	movf	??_processGestureData,w
  7943  02BE  00BD               	movwf	_processGestureData$1186
  7944  02BF  0830               	movf	??_processGestureData+1,w
  7945  02C0  00BE               	movwf	_processGestureData$1186+1
  7946  02C1  2AC7               	goto	l903
  7947  02C2                     l5625:	
  7948  02C2  0020               	movlb	0	; select bank0
  7949  02C3  084A               	movf	processGestureData@ud_delta+1,w
  7950  02C4  00BE               	movwf	_processGestureData$1186+1
  7951  02C5  0849               	movf	processGestureData@ud_delta,w
  7952  02C6  00BD               	movwf	_processGestureData$1186
  7953  02C7                     l903:	
  7954  02C7  083E               	movf	_processGestureData$1186+1,w
  7955  02C8  3A80               	xorlw	128
  7956  02C9  00AF               	movwf	??_processGestureData
  7957  02CA  3080               	movlw	128
  7958  02CB  022F               	subwf	??_processGestureData,w
  7959  02CC  1D03               	skipz
  7960  02CD  2AD0               	goto	u4675
  7961  02CE  3014               	movlw	20
  7962  02CF  023D               	subwf	_processGestureData$1186,w
  7963  02D0                     u4675:	
  7964  02D0  1803               	skipnc
  7965  02D1  2860               	goto	l5493
  7966  02D2  0020               	movlb	0	; select bank0
  7967  02D3  084C               	movf	processGestureData@lr_delta+1,w
  7968  02D4  3A80               	xorlw	128
  7969  02D5  00AF               	movwf	??_processGestureData
  7970  02D6  3080               	movlw	128
  7971  02D7  022F               	subwf	??_processGestureData,w
  7972  02D8  1D03               	skipz
  7973  02D9  2ADC               	goto	u4685
  7974  02DA  3001               	movlw	1
  7975  02DB  024B               	subwf	processGestureData@lr_delta,w
  7976  02DC                     u4685:	
  7977  02DC  1803               	skipnc
  7978  02DD  2AEB               	goto	l5631
  7979  02DE  0020               	movlb	0	; select bank0
  7980  02DF  094B               	comf	processGestureData@lr_delta,w
  7981  02E0  00AF               	movwf	??_processGestureData
  7982  02E1  094C               	comf	processGestureData@lr_delta+1,w
  7983  02E2  00B0               	movwf	??_processGestureData+1
  7984  02E3  0AAF               	incf	??_processGestureData,f
  7985  02E4  1903               	skipnz
  7986  02E5  0AB0               	incf	??_processGestureData+1,f
  7987  02E6  082F               	movf	??_processGestureData,w
  7988  02E7  00BF               	movwf	_processGestureData$1187
  7989  02E8  0830               	movf	??_processGestureData+1,w
  7990  02E9  00C0               	movwf	_processGestureData$1187+1
  7991  02EA  2AF0               	goto	l907
  7992  02EB                     l5631:	
  7993  02EB  0020               	movlb	0	; select bank0
  7994  02EC  084C               	movf	processGestureData@lr_delta+1,w
  7995  02ED  00C0               	movwf	_processGestureData$1187+1
  7996  02EE  084B               	movf	processGestureData@lr_delta,w
  7997  02EF  00BF               	movwf	_processGestureData$1187
  7998  02F0                     l907:	
  7999  02F0  0840               	movf	_processGestureData$1187+1,w
  8000  02F1  3A80               	xorlw	128
  8001  02F2  00AF               	movwf	??_processGestureData
  8002  02F3  3080               	movlw	128
  8003  02F4  022F               	subwf	??_processGestureData,w
  8004  02F5  1D03               	skipz
  8005  02F6  2AF9               	goto	u4695
  8006  02F7  3014               	movlw	20
  8007  02F8  023F               	subwf	_processGestureData$1187,w
  8008  02F9                     u4695:	
  8009  02F9  1803               	skipnc
  8010  02FA  2860               	goto	l5493
  8011                           
  8012                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  8013  02FB  0020               	movlb	0	; select bank0
  8014  02FC  0849               	movf	processGestureData@ud_delta,w
  8015  02FD  044A               	iorwf	processGestureData@ud_delta+1,w
  8016  02FE  1D03               	btfss	3,2
  8017  02FF  2B08               	goto	l908
  8018  0300  084B               	movf	processGestureData@lr_delta,w
  8019  0301  044C               	iorwf	processGestureData@lr_delta+1,w
  8020  0302  1D03               	btfss	3,2
  8021  0303  2B08               	goto	l908
  8022                           
  8023                           ;APDS9960.c: 779:                 gesture_near_count_++;
  8024  0304  3001               	movlw	1
  8025  0305  07E2               	addwf	_gesture_near_count_,f
  8026  0306  3000               	movlw	0
  8027  0307  3DE3               	addwfc	_gesture_near_count_+1,f
  8028  0308                     l908:	
  8029                           ;APDS9960.c: 780:             }
  8030                           
  8031                           
  8032                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  8033  0308  0863               	movf	_gesture_near_count_+1,w
  8034  0309  3A80               	xorlw	128
  8035  030A  00AF               	movwf	??_processGestureData
  8036  030B  3080               	movlw	128
  8037  030C  022F               	subwf	??_processGestureData,w
  8038  030D  1D03               	skipz
  8039  030E  2B11               	goto	u4725
  8040  030F  300A               	movlw	10
  8041  0310  0262               	subwf	_gesture_near_count_,w
  8042  0311                     u4725:	
  8043  0311  1C03               	skipc
  8044  0312  2860               	goto	l5493
  8045                           
  8046                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  8047  0313  0020               	movlb	0	; select bank0
  8048  0314  01E6               	clrf	_gesture_ud_count_
  8049  0315  01E7               	clrf	_gesture_ud_count_+1
  8050                           
  8051                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  8052  0316  01E4               	clrf	_gesture_lr_count_
  8053  0317  01E5               	clrf	_gesture_lr_count_+1
  8054                           
  8055                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  8056  0318  01EA               	clrf	_gesture_ud_delta_
  8057  0319  01EB               	clrf	_gesture_ud_delta_+1
  8058                           
  8059                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  8060  031A  01E8               	clrf	_gesture_lr_delta_
  8061  031B  01E9               	clrf	_gesture_lr_delta_+1
  8062  031C  2860               	goto	l5493
  8063  031D                     __end_of_processGestureData:	
  8064                           
  8065                           	psect	text19
  8066  0BE3                     __ptext19:	
  8067 ;; *************** function ___wmul *****************
  8068 ;; Defined at:
  8069 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8072 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  product         2    4[BANK0 ] unsigned int 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  2    0[BANK0 ] unsigned int 
  8077 ;; Registers used:
  8078 ;;		wreg, status,2, status,0
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;Total ram usage:        6 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    5
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_processGestureData
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function ___wmul
  8100  0BE3                     ___wmul:	
  8101                           
  8102                           ;incstack = 0
  8103                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8104  0BE3  0020               	movlb	0	; select bank0
  8105  0BE4  01A4               	clrf	___wmul@product
  8106  0BE5  01A5               	clrf	___wmul@product+1
  8107  0BE6                     l5335:	
  8108  0BE6  1C20               	btfss	___wmul@multiplier,0
  8109  0BE7  2BEC               	goto	l1241
  8110  0BE8  0822               	movf	___wmul@multiplicand,w
  8111  0BE9  07A4               	addwf	___wmul@product,f
  8112  0BEA  0823               	movf	___wmul@multiplicand+1,w
  8113  0BEB  3DA5               	addwfc	___wmul@product+1,f
  8114  0BEC                     l1241:	
  8115  0BEC  3001               	movlw	1
  8116  0BED                     u4055:	
  8117  0BED  35A2               	lslf	___wmul@multiplicand,f
  8118  0BEE  0DA3               	rlf	___wmul@multiplicand+1,f
  8119  0BEF  0B89               	decfsz	9,f
  8120  0BF0  2BED               	goto	u4055
  8121  0BF1  3001               	movlw	1
  8122  0BF2                     u4065:	
  8123  0BF2  36A1               	lsrf	___wmul@multiplier+1,f
  8124  0BF3  0CA0               	rrf	___wmul@multiplier,f
  8125  0BF4  0B89               	decfsz	9,f
  8126  0BF5  2BF2               	goto	u4065
  8127  0BF6  0820               	movf	___wmul@multiplier,w
  8128  0BF7  0421               	iorwf	___wmul@multiplier+1,w
  8129  0BF8  1D03               	btfss	3,2
  8130  0BF9  2BE6               	goto	l5335
  8131  0BFA  0825               	movf	___wmul@product+1,w
  8132  0BFB  00A1               	movwf	?___wmul+1
  8133  0BFC  0824               	movf	___wmul@product,w
  8134  0BFD  00A0               	movwf	?___wmul
  8135  0BFE  0008               	return
  8136  0BFF                     __end_of___wmul:	
  8137                           
  8138                           	psect	text20
  8139  077F                     __ptext20:	
  8140 ;; *************** function ___awdiv *****************
  8141 ;; Defined at:
  8142 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  divisor         2    6[BANK0 ] int 
  8145 ;;  dividend        2    8[BANK0 ] int 
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;  quotient        2   13[BANK0 ] int 
  8148 ;;  sign            1   12[BANK0 ] unsigned char 
  8149 ;;  counter         1   11[BANK0 ] unsigned char 
  8150 ;; Return value:  Size  Location     Type
  8151 ;;                  2    6[BANK0 ] int 
  8152 ;; Registers used:
  8153 ;;		wreg, status,2, status,0
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;Total ram usage:        9 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    5
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		_processGestureData
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           
  8174                           ;psect for function ___awdiv
  8175  077F                     ___awdiv:	
  8176                           
  8177                           ;incstack = 0
  8178                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8179  077F  0020               	movlb	0	; select bank0
  8180  0780  01AC               	clrf	___awdiv@sign
  8181  0781  1FA7               	btfss	___awdiv@divisor+1,7
  8182  0782  2F8A               	goto	l5355
  8183  0783  09A6               	comf	___awdiv@divisor,f
  8184  0784  09A7               	comf	___awdiv@divisor+1,f
  8185  0785  0AA6               	incf	___awdiv@divisor,f
  8186  0786  1903               	skipnz
  8187  0787  0AA7               	incf	___awdiv@divisor+1,f
  8188  0788  01AC               	clrf	___awdiv@sign
  8189  0789  0AAC               	incf	___awdiv@sign,f
  8190  078A                     l5355:	
  8191  078A  1FA9               	btfss	___awdiv@dividend+1,7
  8192  078B  2F95               	goto	l5361
  8193  078C  09A8               	comf	___awdiv@dividend,f
  8194  078D  09A9               	comf	___awdiv@dividend+1,f
  8195  078E  0AA8               	incf	___awdiv@dividend,f
  8196  078F  1903               	skipnz
  8197  0790  0AA9               	incf	___awdiv@dividend+1,f
  8198  0791  3001               	movlw	1
  8199  0792  00AA               	movwf	??___awdiv
  8200  0793  082A               	movf	??___awdiv,w
  8201  0794  06AC               	xorwf	___awdiv@sign,f
  8202  0795                     l5361:	
  8203  0795  01AD               	clrf	___awdiv@quotient
  8204  0796  01AE               	clrf	___awdiv@quotient+1
  8205  0797  0826               	movf	___awdiv@divisor,w
  8206  0798  0427               	iorwf	___awdiv@divisor+1,w
  8207  0799  1903               	btfsc	3,2
  8208  079A  2FC4               	goto	l5383
  8209  079B  01AB               	clrf	___awdiv@counter
  8210  079C  0AAB               	incf	___awdiv@counter,f
  8211  079D                     l5371:	
  8212  079D  1BA7               	btfsc	___awdiv@divisor+1,7
  8213  079E  2FA9               	goto	l5373
  8214  079F  3001               	movlw	1
  8215  07A0                     u4115:	
  8216  07A0  35A6               	lslf	___awdiv@divisor,f
  8217  07A1  0DA7               	rlf	___awdiv@divisor+1,f
  8218  07A2  0B89               	decfsz	9,f
  8219  07A3  2FA0               	goto	u4115
  8220  07A4  3001               	movlw	1
  8221  07A5  00AA               	movwf	??___awdiv
  8222  07A6  082A               	movf	??___awdiv,w
  8223  07A7  07AB               	addwf	___awdiv@counter,f
  8224  07A8  2F9D               	goto	l5371
  8225  07A9                     l5373:	
  8226  07A9  3001               	movlw	1
  8227  07AA                     u4135:	
  8228  07AA  35AD               	lslf	___awdiv@quotient,f
  8229  07AB  0DAE               	rlf	___awdiv@quotient+1,f
  8230  07AC  0B89               	decfsz	9,f
  8231  07AD  2FAA               	goto	u4135
  8232  07AE  0827               	movf	___awdiv@divisor+1,w
  8233  07AF  0229               	subwf	___awdiv@dividend+1,w
  8234  07B0  1D03               	skipz
  8235  07B1  2FB4               	goto	u4145
  8236  07B2  0826               	movf	___awdiv@divisor,w
  8237  07B3  0228               	subwf	___awdiv@dividend,w
  8238  07B4                     u4145:	
  8239  07B4  1C03               	skipc
  8240  07B5  2FBB               	goto	l5379
  8241  07B6  0826               	movf	___awdiv@divisor,w
  8242  07B7  02A8               	subwf	___awdiv@dividend,f
  8243  07B8  0827               	movf	___awdiv@divisor+1,w
  8244  07B9  3BA9               	subwfb	___awdiv@dividend+1,f
  8245  07BA  142D               	bsf	___awdiv@quotient,0
  8246  07BB                     l5379:	
  8247  07BB  3001               	movlw	1
  8248  07BC                     u4155:	
  8249  07BC  36A7               	lsrf	___awdiv@divisor+1,f
  8250  07BD  0CA6               	rrf	___awdiv@divisor,f
  8251  07BE  0B89               	decfsz	9,f
  8252  07BF  2FBC               	goto	u4155
  8253  07C0  3001               	movlw	1
  8254  07C1  02AB               	subwf	___awdiv@counter,f
  8255  07C2  1D03               	btfss	3,2
  8256  07C3  2FA9               	goto	l5373
  8257  07C4                     l5383:	
  8258  07C4  082C               	movf	___awdiv@sign,w
  8259  07C5  1903               	btfsc	3,2
  8260  07C6  2FCC               	goto	l5387
  8261  07C7  09AD               	comf	___awdiv@quotient,f
  8262  07C8  09AE               	comf	___awdiv@quotient+1,f
  8263  07C9  0AAD               	incf	___awdiv@quotient,f
  8264  07CA  1903               	skipnz
  8265  07CB  0AAE               	incf	___awdiv@quotient+1,f
  8266  07CC                     l5387:	
  8267  07CC  082E               	movf	___awdiv@quotient+1,w
  8268  07CD  00A7               	movwf	?___awdiv+1
  8269  07CE  082D               	movf	___awdiv@quotient,w
  8270  07CF  00A6               	movwf	?___awdiv
  8271  07D0  0008               	return
  8272  07D1                     __end_of___awdiv:	
  8273                           
  8274                           	psect	text21
  8275  0B0B                     __ptext21:	
  8276 ;; *************** function _isGestureAvailable *****************
  8277 ;; Defined at:
  8278 ;;		line 537 in file "APDS9960.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  val             1   10[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      _Bool 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0, pclath, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;Total ram usage:        2 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    8
  8299 ;; This function calls:
  8300 ;;		_wireReadDataByte
  8301 ;; This function is called by:
  8302 ;;		_main
  8303 ;;		_readGesture
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           
  8308                           ;psect for function _isGestureAvailable
  8309  0B0B                     _isGestureAvailable:	
  8310                           
  8311                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  8312                           
  8313                           ;incstack = 0
  8314                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  8315  0B0B  30AF               	movlw	175
  8316  0B0C  318C  243E  318B   	fcall	_wireReadDataByte
  8317  0B0F  0020               	movlb	0	; select bank0
  8318  0B10  00A9               	movwf	??_isGestureAvailable
  8319  0B11  0829               	movf	??_isGestureAvailable,w
  8320  0B12  00AA               	movwf	isGestureAvailable@val
  8321                           
  8322                           ;APDS9960.c: 545:     val &= 0b00000001;
  8323  0B13  3001               	movlw	1
  8324  0B14  00A9               	movwf	??_isGestureAvailable
  8325  0B15  0829               	movf	??_isGestureAvailable,w
  8326  0B16  05AA               	andwf	isGestureAvailable@val,f
  8327                           
  8328                           ;APDS9960.c: 548:     if( val == 1) {
  8329  0B17  032A               	decf	isGestureAvailable@val,w
  8330  0B18  1D03               	btfss	3,2
  8331  0B19  2B1C               	goto	l5403
  8332                           
  8333                           ;APDS9960.c: 549:         return 1;
  8334  0B1A  3001               	movlw	1
  8335  0B1B  0008               	return
  8336  0B1C                     l5403:	
  8337                           
  8338                           ;APDS9960.c: 551:         return 0;
  8339  0B1C  3000               	movlw	0
  8340  0B1D  0008               	return
  8341  0B1E                     __end_of_isGestureAvailable:	
  8342                           
  8343                           	psect	text22
  8344  031D                     __ptext22:	
  8345 ;; *************** function _decodeGesture *****************
  8346 ;; Defined at:
  8347 ;;		line 795 in file "APDS9960.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      _Bool 
  8354 ;; Registers used:
  8355 ;;		wreg, status,2, status,0
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;Total ram usage:       18 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    5
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_readGesture
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           
  8376                           ;psect for function _decodeGesture
  8377  031D                     _decodeGesture:	
  8378                           
  8379                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  8380                           
  8381                           ;incstack = 0
  8382                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  8383  031D  0020               	movlb	0	; select bank0
  8384  031E  035E               	decf	_gesture_state_,w
  8385  031F  045F               	iorwf	_gesture_state_+1,w
  8386  0320  1D03               	btfss	3,2
  8387  0321  2B28               	goto	l5653
  8388                           
  8389                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  8390  0322  3005               	movlw	5
  8391  0323  00DC               	movwf	_gesture_motion_
  8392  0324  3000               	movlw	0
  8393  0325  00DD               	movwf	_gesture_motion_+1
  8394                           
  8395                           ;APDS9960.c: 800:         return 1;
  8396  0326  3001               	movlw	1
  8397  0327  0008               	return
  8398  0328                     l5653:	
  8399  0328  3002               	movlw	2
  8400  0329  065E               	xorwf	_gesture_state_,w
  8401  032A  045F               	iorwf	_gesture_state_+1,w
  8402  032B  1D03               	btfss	3,2
  8403  032C  2B33               	goto	l5659
  8404                           
  8405                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  8406  032D  3006               	movlw	6
  8407  032E  00DC               	movwf	_gesture_motion_
  8408  032F  3000               	movlw	0
  8409  0330  00DD               	movwf	_gesture_motion_+1
  8410                           
  8411                           ;APDS9960.c: 803:         return 1;
  8412  0331  3001               	movlw	1
  8413  0332  0008               	return
  8414  0333                     l5659:	
  8415                           
  8416                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  8417  0333  0A66               	incf	_gesture_ud_count_,w
  8418  0334  1D03               	skipz
  8419  0335  2B3F               	goto	l5665
  8420  0336  0A67               	incf	_gesture_ud_count_+1,w
  8421  0337  1D03               	btfss	3,2
  8422  0338  2B3F               	goto	l5665
  8423  0339  0864               	movf	_gesture_lr_count_,w
  8424  033A  0465               	iorwf	_gesture_lr_count_+1,w
  8425  033B  1D03               	btfss	3,2
  8426  033C  2B3F               	goto	l5665
  8427  033D                     l5663:	
  8428                           
  8429                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  8430  033D  3003               	movlw	3
  8431  033E  2B5E               	goto	L7
  8432  033F                     l5665:	
  8433                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  8434                           
  8435  033F  0366               	decf	_gesture_ud_count_,w
  8436  0340  0467               	iorwf	_gesture_ud_count_+1,w
  8437  0341  1D03               	btfss	3,2
  8438  0342  2B49               	goto	l5671
  8439  0343  0864               	movf	_gesture_lr_count_,w
  8440  0344  0465               	iorwf	_gesture_lr_count_+1,w
  8441  0345  1D03               	btfss	3,2
  8442  0346  2B49               	goto	l5671
  8443  0347                     l5669:	
  8444                           
  8445                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  8446  0347  3004               	movlw	4
  8447  0348  2B5E               	goto	L7
  8448  0349                     l5671:	
  8449                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  8450                           
  8451  0349  0866               	movf	_gesture_ud_count_,w
  8452  034A  0467               	iorwf	_gesture_ud_count_+1,w
  8453  034B  1D03               	btfss	3,2
  8454  034C  2B53               	goto	l5677
  8455  034D  0364               	decf	_gesture_lr_count_,w
  8456  034E  0465               	iorwf	_gesture_lr_count_+1,w
  8457  034F  1D03               	btfss	3,2
  8458  0350  2B53               	goto	l5677
  8459  0351                     l5675:	
  8460                           
  8461                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  8462  0351  3002               	movlw	2
  8463  0352  2B5E               	goto	L7
  8464  0353                     l5677:	
  8465                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  8466                           
  8467  0353  0866               	movf	_gesture_ud_count_,w
  8468  0354  0467               	iorwf	_gesture_ud_count_+1,w
  8469  0355  1D03               	btfss	3,2
  8470  0356  2B63               	goto	l5683
  8471  0357  0A64               	incf	_gesture_lr_count_,w
  8472  0358  1D03               	skipz
  8473  0359  2B63               	goto	l5683
  8474  035A  0A65               	incf	_gesture_lr_count_+1,w
  8475  035B  1D03               	btfss	3,2
  8476  035C  2B63               	goto	l5683
  8477  035D                     l5681:	
  8478                           
  8479                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  8480  035D  3001               	movlw	1
  8481  035E                     L7:	
  8482  035E  0020               	movlb	0	; select bank0
  8483  035F  00DC               	movwf	_gesture_motion_
  8484  0360  3000               	movlw	0
  8485  0361  00DD               	movwf	_gesture_motion_+1
  8486                           
  8487                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  8488  0362  2CA9               	goto	l5759
  8489  0363                     l5683:	
  8490  0363  0A66               	incf	_gesture_ud_count_,w
  8491  0364  1D03               	skipz
  8492  0365  2BB4               	goto	l5701
  8493  0366  0A67               	incf	_gesture_ud_count_+1,w
  8494  0367  1D03               	btfss	3,2
  8495  0368  2BB4               	goto	l5701
  8496  0369  0364               	decf	_gesture_lr_count_,w
  8497  036A  0465               	iorwf	_gesture_lr_count_+1,w
  8498  036B  1D03               	btfss	3,2
  8499  036C  2BB4               	goto	l5701
  8500                           
  8501                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8502  036D  086B               	movf	_gesture_ud_delta_+1,w
  8503  036E  3A80               	xorlw	128
  8504  036F  00A0               	movwf	??_decodeGesture
  8505  0370  3080               	movlw	128
  8506  0371  0220               	subwf	??_decodeGesture,w
  8507  0372  1D03               	skipz
  8508  0373  2B76               	goto	u4855
  8509  0374  3001               	movlw	1
  8510  0375  026A               	subwf	_gesture_ud_delta_,w
  8511  0376                     u4855:	
  8512  0376  1803               	skipnc
  8513  0377  2B85               	goto	l5691
  8514  0378  0020               	movlb	0	; select bank0
  8515  0379  096A               	comf	_gesture_ud_delta_,w
  8516  037A  00A0               	movwf	??_decodeGesture
  8517  037B  096B               	comf	_gesture_ud_delta_+1,w
  8518  037C  00A1               	movwf	??_decodeGesture+1
  8519  037D  0AA0               	incf	??_decodeGesture,f
  8520  037E  1903               	skipnz
  8521  037F  0AA1               	incf	??_decodeGesture+1,f
  8522  0380  0820               	movf	??_decodeGesture,w
  8523  0381  00A2               	movwf	_decodeGesture$1189
  8524  0382  0821               	movf	??_decodeGesture+1,w
  8525  0383  00A3               	movwf	_decodeGesture$1189+1
  8526  0384  2B8A               	goto	l929
  8527  0385                     l5691:	
  8528  0385  0020               	movlb	0	; select bank0
  8529  0386  086B               	movf	_gesture_ud_delta_+1,w
  8530  0387  00A3               	movwf	_decodeGesture$1189+1
  8531  0388  086A               	movf	_gesture_ud_delta_,w
  8532  0389  00A2               	movwf	_decodeGesture$1189
  8533  038A                     l929:	
  8534  038A  0869               	movf	_gesture_lr_delta_+1,w
  8535  038B  3A80               	xorlw	128
  8536  038C  00A0               	movwf	??_decodeGesture
  8537  038D  3080               	movlw	128
  8538  038E  0220               	subwf	??_decodeGesture,w
  8539  038F  1D03               	skipz
  8540  0390  2B93               	goto	u4865
  8541  0391  3001               	movlw	1
  8542  0392  0268               	subwf	_gesture_lr_delta_,w
  8543  0393                     u4865:	
  8544  0393  1803               	skipnc
  8545  0394  2BA2               	goto	l5695
  8546  0395  0020               	movlb	0	; select bank0
  8547  0396  0968               	comf	_gesture_lr_delta_,w
  8548  0397  00A0               	movwf	??_decodeGesture
  8549  0398  0969               	comf	_gesture_lr_delta_+1,w
  8550  0399  00A1               	movwf	??_decodeGesture+1
  8551  039A  0AA0               	incf	??_decodeGesture,f
  8552  039B  1903               	skipnz
  8553  039C  0AA1               	incf	??_decodeGesture+1,f
  8554  039D  0820               	movf	??_decodeGesture,w
  8555  039E  00A4               	movwf	_decodeGesture$1190
  8556  039F  0821               	movf	??_decodeGesture+1,w
  8557  03A0  00A5               	movwf	_decodeGesture$1190+1
  8558  03A1  2BA7               	goto	l933
  8559  03A2                     l5695:	
  8560  03A2  0020               	movlb	0	; select bank0
  8561  03A3  0869               	movf	_gesture_lr_delta_+1,w
  8562  03A4  00A5               	movwf	_decodeGesture$1190+1
  8563  03A5  0868               	movf	_gesture_lr_delta_,w
  8564  03A6  00A4               	movwf	_decodeGesture$1190
  8565  03A7                     l933:	
  8566  03A7  0825               	movf	_decodeGesture$1190+1,w
  8567  03A8  3A80               	xorlw	128
  8568  03A9  00A0               	movwf	??_decodeGesture
  8569  03AA  0823               	movf	_decodeGesture$1189+1,w
  8570  03AB  3A80               	xorlw	128
  8571  03AC  0220               	subwf	??_decodeGesture,w
  8572  03AD  1D03               	skipz
  8573  03AE  2BB1               	goto	u4875
  8574  03AF  0822               	movf	_decodeGesture$1189,w
  8575  03B0  0224               	subwf	_decodeGesture$1190,w
  8576  03B1                     u4875:	
  8577  03B1  1C03               	btfss	3,0
  8578  03B2  2B3D               	goto	l5663
  8579  03B3  2B51               	goto	l5675
  8580  03B4                     l5701:	
  8581  03B4  0366               	decf	_gesture_ud_count_,w
  8582  03B5  0467               	iorwf	_gesture_ud_count_+1,w
  8583  03B6  1D03               	btfss	3,2
  8584  03B7  2C05               	goto	l5719
  8585  03B8  0A64               	incf	_gesture_lr_count_,w
  8586  03B9  1D03               	skipz
  8587  03BA  2C05               	goto	l5719
  8588  03BB  0A65               	incf	_gesture_lr_count_+1,w
  8589  03BC  1D03               	btfss	3,2
  8590  03BD  2C05               	goto	l5719
  8591                           
  8592                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8593  03BE  086B               	movf	_gesture_ud_delta_+1,w
  8594  03BF  3A80               	xorlw	128
  8595  03C0  00A0               	movwf	??_decodeGesture
  8596  03C1  3080               	movlw	128
  8597  03C2  0220               	subwf	??_decodeGesture,w
  8598  03C3  1D03               	skipz
  8599  03C4  2BC7               	goto	u4905
  8600  03C5  3001               	movlw	1
  8601  03C6  026A               	subwf	_gesture_ud_delta_,w
  8602  03C7                     u4905:	
  8603  03C7  1803               	skipnc
  8604  03C8  2BD6               	goto	l5709
  8605  03C9  0020               	movlb	0	; select bank0
  8606  03CA  096A               	comf	_gesture_ud_delta_,w
  8607  03CB  00A0               	movwf	??_decodeGesture
  8608  03CC  096B               	comf	_gesture_ud_delta_+1,w
  8609  03CD  00A1               	movwf	??_decodeGesture+1
  8610  03CE  0AA0               	incf	??_decodeGesture,f
  8611  03CF  1903               	skipnz
  8612  03D0  0AA1               	incf	??_decodeGesture+1,f
  8613  03D1  0820               	movf	??_decodeGesture,w
  8614  03D2  00A6               	movwf	_decodeGesture$1191
  8615  03D3  0821               	movf	??_decodeGesture+1,w
  8616  03D4  00A7               	movwf	_decodeGesture$1191+1
  8617  03D5  2BDB               	goto	l941
  8618  03D6                     l5709:	
  8619  03D6  0020               	movlb	0	; select bank0
  8620  03D7  086B               	movf	_gesture_ud_delta_+1,w
  8621  03D8  00A7               	movwf	_decodeGesture$1191+1
  8622  03D9  086A               	movf	_gesture_ud_delta_,w
  8623  03DA  00A6               	movwf	_decodeGesture$1191
  8624  03DB                     l941:	
  8625  03DB  0869               	movf	_gesture_lr_delta_+1,w
  8626  03DC  3A80               	xorlw	128
  8627  03DD  00A0               	movwf	??_decodeGesture
  8628  03DE  3080               	movlw	128
  8629  03DF  0220               	subwf	??_decodeGesture,w
  8630  03E0  1D03               	skipz
  8631  03E1  2BE4               	goto	u4915
  8632  03E2  3001               	movlw	1
  8633  03E3  0268               	subwf	_gesture_lr_delta_,w
  8634  03E4                     u4915:	
  8635  03E4  1803               	skipnc
  8636  03E5  2BF3               	goto	l5713
  8637  03E6  0020               	movlb	0	; select bank0
  8638  03E7  0968               	comf	_gesture_lr_delta_,w
  8639  03E8  00A0               	movwf	??_decodeGesture
  8640  03E9  0969               	comf	_gesture_lr_delta_+1,w
  8641  03EA  00A1               	movwf	??_decodeGesture+1
  8642  03EB  0AA0               	incf	??_decodeGesture,f
  8643  03EC  1903               	skipnz
  8644  03ED  0AA1               	incf	??_decodeGesture+1,f
  8645  03EE  0820               	movf	??_decodeGesture,w
  8646  03EF  00A8               	movwf	_decodeGesture$1192
  8647  03F0  0821               	movf	??_decodeGesture+1,w
  8648  03F1  00A9               	movwf	_decodeGesture$1192+1
  8649  03F2  2BF8               	goto	l945
  8650  03F3                     l5713:	
  8651  03F3  0020               	movlb	0	; select bank0
  8652  03F4  0869               	movf	_gesture_lr_delta_+1,w
  8653  03F5  00A9               	movwf	_decodeGesture$1192+1
  8654  03F6  0868               	movf	_gesture_lr_delta_,w
  8655  03F7  00A8               	movwf	_decodeGesture$1192
  8656  03F8                     l945:	
  8657  03F8  0829               	movf	_decodeGesture$1192+1,w
  8658  03F9  3A80               	xorlw	128
  8659  03FA  00A0               	movwf	??_decodeGesture
  8660  03FB  0827               	movf	_decodeGesture$1191+1,w
  8661  03FC  3A80               	xorlw	128
  8662  03FD  0220               	subwf	??_decodeGesture,w
  8663  03FE  1D03               	skipz
  8664  03FF  2C02               	goto	u4925
  8665  0400  0826               	movf	_decodeGesture$1191,w
  8666  0401  0228               	subwf	_decodeGesture$1192,w
  8667  0402                     u4925:	
  8668  0402  1C03               	btfss	3,0
  8669  0403  2B47               	goto	l5669
  8670  0404  2B5D               	goto	l5681
  8671  0405                     l5719:	
  8672  0405  0A66               	incf	_gesture_ud_count_,w
  8673  0406  1D03               	skipz
  8674  0407  2C58               	goto	l5737
  8675  0408  0A67               	incf	_gesture_ud_count_+1,w
  8676  0409  1D03               	btfss	3,2
  8677  040A  2C58               	goto	l5737
  8678  040B  0A64               	incf	_gesture_lr_count_,w
  8679  040C  1D03               	skipz
  8680  040D  2C58               	goto	l5737
  8681  040E  0A65               	incf	_gesture_lr_count_+1,w
  8682  040F  1D03               	btfss	3,2
  8683  0410  2C58               	goto	l5737
  8684                           
  8685                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8686  0411  086B               	movf	_gesture_ud_delta_+1,w
  8687  0412  3A80               	xorlw	128
  8688  0413  00A0               	movwf	??_decodeGesture
  8689  0414  3080               	movlw	128
  8690  0415  0220               	subwf	??_decodeGesture,w
  8691  0416  1D03               	skipz
  8692  0417  2C1A               	goto	u4955
  8693  0418  3001               	movlw	1
  8694  0419  026A               	subwf	_gesture_ud_delta_,w
  8695  041A                     u4955:	
  8696  041A  1803               	skipnc
  8697  041B  2C29               	goto	l5727
  8698  041C  0020               	movlb	0	; select bank0
  8699  041D  096A               	comf	_gesture_ud_delta_,w
  8700  041E  00A0               	movwf	??_decodeGesture
  8701  041F  096B               	comf	_gesture_ud_delta_+1,w
  8702  0420  00A1               	movwf	??_decodeGesture+1
  8703  0421  0AA0               	incf	??_decodeGesture,f
  8704  0422  1903               	skipnz
  8705  0423  0AA1               	incf	??_decodeGesture+1,f
  8706  0424  0820               	movf	??_decodeGesture,w
  8707  0425  00AA               	movwf	_decodeGesture$1193
  8708  0426  0821               	movf	??_decodeGesture+1,w
  8709  0427  00AB               	movwf	_decodeGesture$1193+1
  8710  0428  2C2E               	goto	l953
  8711  0429                     l5727:	
  8712  0429  0020               	movlb	0	; select bank0
  8713  042A  086B               	movf	_gesture_ud_delta_+1,w
  8714  042B  00AB               	movwf	_decodeGesture$1193+1
  8715  042C  086A               	movf	_gesture_ud_delta_,w
  8716  042D  00AA               	movwf	_decodeGesture$1193
  8717  042E                     l953:	
  8718  042E  0869               	movf	_gesture_lr_delta_+1,w
  8719  042F  3A80               	xorlw	128
  8720  0430  00A0               	movwf	??_decodeGesture
  8721  0431  3080               	movlw	128
  8722  0432  0220               	subwf	??_decodeGesture,w
  8723  0433  1D03               	skipz
  8724  0434  2C37               	goto	u4965
  8725  0435  3001               	movlw	1
  8726  0436  0268               	subwf	_gesture_lr_delta_,w
  8727  0437                     u4965:	
  8728  0437  1803               	skipnc
  8729  0438  2C46               	goto	l5731
  8730  0439  0020               	movlb	0	; select bank0
  8731  043A  0968               	comf	_gesture_lr_delta_,w
  8732  043B  00A0               	movwf	??_decodeGesture
  8733  043C  0969               	comf	_gesture_lr_delta_+1,w
  8734  043D  00A1               	movwf	??_decodeGesture+1
  8735  043E  0AA0               	incf	??_decodeGesture,f
  8736  043F  1903               	skipnz
  8737  0440  0AA1               	incf	??_decodeGesture+1,f
  8738  0441  0820               	movf	??_decodeGesture,w
  8739  0442  00AC               	movwf	_decodeGesture$1194
  8740  0443  0821               	movf	??_decodeGesture+1,w
  8741  0444  00AD               	movwf	_decodeGesture$1194+1
  8742  0445  2C4B               	goto	l957
  8743  0446                     l5731:	
  8744  0446  0020               	movlb	0	; select bank0
  8745  0447  0869               	movf	_gesture_lr_delta_+1,w
  8746  0448  00AD               	movwf	_decodeGesture$1194+1
  8747  0449  0868               	movf	_gesture_lr_delta_,w
  8748  044A  00AC               	movwf	_decodeGesture$1194
  8749  044B                     l957:	
  8750  044B  082D               	movf	_decodeGesture$1194+1,w
  8751  044C  3A80               	xorlw	128
  8752  044D  00A0               	movwf	??_decodeGesture
  8753  044E  082B               	movf	_decodeGesture$1193+1,w
  8754  044F  3A80               	xorlw	128
  8755  0450  0220               	subwf	??_decodeGesture,w
  8756  0451  1D03               	skipz
  8757  0452  2C55               	goto	u4975
  8758  0453  082A               	movf	_decodeGesture$1193,w
  8759  0454  022C               	subwf	_decodeGesture$1194,w
  8760  0455                     u4975:	
  8761  0455  1C03               	btfss	3,0
  8762  0456  2B3D               	goto	l5663
  8763  0457  2B5D               	goto	l5681
  8764  0458                     l5737:	
  8765  0458  0366               	decf	_gesture_ud_count_,w
  8766  0459  0467               	iorwf	_gesture_ud_count_+1,w
  8767  045A  1D03               	btfss	3,2
  8768  045B  2CA7               	goto	l5755
  8769  045C  0364               	decf	_gesture_lr_count_,w
  8770  045D  0465               	iorwf	_gesture_lr_count_+1,w
  8771  045E  1D03               	btfss	3,2
  8772  045F  2CA7               	goto	l5755
  8773                           
  8774                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8775  0460  086B               	movf	_gesture_ud_delta_+1,w
  8776  0461  3A80               	xorlw	128
  8777  0462  00A0               	movwf	??_decodeGesture
  8778  0463  3080               	movlw	128
  8779  0464  0220               	subwf	??_decodeGesture,w
  8780  0465  1D03               	skipz
  8781  0466  2C69               	goto	u5005
  8782  0467  3001               	movlw	1
  8783  0468  026A               	subwf	_gesture_ud_delta_,w
  8784  0469                     u5005:	
  8785  0469  1803               	skipnc
  8786  046A  2C78               	goto	l5745
  8787  046B  0020               	movlb	0	; select bank0
  8788  046C  096A               	comf	_gesture_ud_delta_,w
  8789  046D  00A0               	movwf	??_decodeGesture
  8790  046E  096B               	comf	_gesture_ud_delta_+1,w
  8791  046F  00A1               	movwf	??_decodeGesture+1
  8792  0470  0AA0               	incf	??_decodeGesture,f
  8793  0471  1903               	skipnz
  8794  0472  0AA1               	incf	??_decodeGesture+1,f
  8795  0473  0820               	movf	??_decodeGesture,w
  8796  0474  00AE               	movwf	_decodeGesture$1195
  8797  0475  0821               	movf	??_decodeGesture+1,w
  8798  0476  00AF               	movwf	_decodeGesture$1195+1
  8799  0477  2C7D               	goto	l965
  8800  0478                     l5745:	
  8801  0478  0020               	movlb	0	; select bank0
  8802  0479  086B               	movf	_gesture_ud_delta_+1,w
  8803  047A  00AF               	movwf	_decodeGesture$1195+1
  8804  047B  086A               	movf	_gesture_ud_delta_,w
  8805  047C  00AE               	movwf	_decodeGesture$1195
  8806  047D                     l965:	
  8807  047D  0869               	movf	_gesture_lr_delta_+1,w
  8808  047E  3A80               	xorlw	128
  8809  047F  00A0               	movwf	??_decodeGesture
  8810  0480  3080               	movlw	128
  8811  0481  0220               	subwf	??_decodeGesture,w
  8812  0482  1D03               	skipz
  8813  0483  2C86               	goto	u5015
  8814  0484  3001               	movlw	1
  8815  0485  0268               	subwf	_gesture_lr_delta_,w
  8816  0486                     u5015:	
  8817  0486  1803               	skipnc
  8818  0487  2C95               	goto	l5749
  8819  0488  0020               	movlb	0	; select bank0
  8820  0489  0968               	comf	_gesture_lr_delta_,w
  8821  048A  00A0               	movwf	??_decodeGesture
  8822  048B  0969               	comf	_gesture_lr_delta_+1,w
  8823  048C  00A1               	movwf	??_decodeGesture+1
  8824  048D  0AA0               	incf	??_decodeGesture,f
  8825  048E  1903               	skipnz
  8826  048F  0AA1               	incf	??_decodeGesture+1,f
  8827  0490  0820               	movf	??_decodeGesture,w
  8828  0491  00B0               	movwf	_decodeGesture$1196
  8829  0492  0821               	movf	??_decodeGesture+1,w
  8830  0493  00B1               	movwf	_decodeGesture$1196+1
  8831  0494  2C9A               	goto	l969
  8832  0495                     l5749:	
  8833  0495  0020               	movlb	0	; select bank0
  8834  0496  0869               	movf	_gesture_lr_delta_+1,w
  8835  0497  00B1               	movwf	_decodeGesture$1196+1
  8836  0498  0868               	movf	_gesture_lr_delta_,w
  8837  0499  00B0               	movwf	_decodeGesture$1196
  8838  049A                     l969:	
  8839  049A  0831               	movf	_decodeGesture$1196+1,w
  8840  049B  3A80               	xorlw	128
  8841  049C  00A0               	movwf	??_decodeGesture
  8842  049D  082F               	movf	_decodeGesture$1195+1,w
  8843  049E  3A80               	xorlw	128
  8844  049F  0220               	subwf	??_decodeGesture,w
  8845  04A0  1D03               	skipz
  8846  04A1  2CA4               	goto	u5025
  8847  04A2  082E               	movf	_decodeGesture$1195,w
  8848  04A3  0230               	subwf	_decodeGesture$1196,w
  8849  04A4                     u5025:	
  8850  04A4  1C03               	btfss	3,0
  8851  04A5  2B47               	goto	l5669
  8852  04A6  2B51               	goto	l5675
  8853  04A7                     l5755:	
  8854                           
  8855                           ;APDS9960.c: 840:         return 0;
  8856  04A7  3000               	movlw	0
  8857  04A8  0008               	return
  8858  04A9                     l5759:	
  8859                           
  8860                           ;APDS9960.c: 843:     return 1;
  8861  04A9  3001               	movlw	1
  8862  04AA  0008               	return
  8863  04AB                     __end_of_decodeGesture:	
  8864                           
  8865                           	psect	text23
  8866  0E68                     __ptext23:	
  8867 ;; *************** function _Display_Name *****************
  8868 ;; Defined at:
  8869 ;;		line 173 in file "main.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  string1         2    5[BANK0 ] PTR unsigned char 
  8872 ;;		 -> STR_11(11), STR_10(16), STR_9(13), STR_8(12), 
  8873 ;;		 -> STR_7(4), STR_6(5), STR_5(6), STR_4(5), 
  8874 ;;		 -> STR_3(5), STR_2(3), STR_1(6), 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  i               2   10[BANK0 ] int 
  8877 ;;  length          2    8[BANK0 ] int 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        7 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    7
  8894 ;; This function calls:
  8895 ;;		_SPI_Write
  8896 ;;		_strlen
  8897 ;; This function is called by:
  8898 ;;		_main
  8899 ;;		_handleGesture
  8900 ;;		_Send_Names
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _Display_Name
  8906  0E68                     _Display_Name:	
  8907                           
  8908                           ;main.c: 174:     int length;;main.c: 175:     int i;;main.c: 176:     if(printed == 0) 
      +                          {
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8912  0E68  0020               	movlb	0	; select bank0
  8913  0E69  086E               	movf	_printed,w
  8914  0E6A  1D03               	btfss	3,2
  8915  0E6B  2E97               	goto	l604
  8916                           
  8917                           ;main.c: 177:         length = strlen(string1);
  8918  0E6C  0826               	movf	Display_Name@string1+1,w
  8919  0E6D  00A1               	movwf	strlen@s+1
  8920  0E6E  0825               	movf	Display_Name@string1,w
  8921  0E6F  00A0               	movwf	strlen@s
  8922  0E70  318B  2394  318E   	fcall	_strlen
  8923  0E73  0020               	movlb	0	; select bank0
  8924  0E74  0821               	movf	?_strlen+1,w
  8925  0E75  00A9               	movwf	Display_Name@length+1
  8926  0E76  0820               	movf	?_strlen,w
  8927  0E77  00A8               	movwf	Display_Name@length
  8928                           
  8929                           ;main.c: 178:         for(i = 0; i < length; i++){
  8930  0E78  01AA               	clrf	Display_Name@i
  8931  0E79  01AB               	clrf	Display_Name@i+1
  8932  0E7A                     l5845:	
  8933  0E7A  082B               	movf	Display_Name@i+1,w
  8934  0E7B  3A80               	xorlw	128
  8935  0E7C  00A7               	movwf	??_Display_Name
  8936  0E7D  0829               	movf	Display_Name@length+1,w
  8937  0E7E  3A80               	xorlw	128
  8938  0E7F  0227               	subwf	??_Display_Name,w
  8939  0E80  1D03               	skipz
  8940  0E81  2E84               	goto	u5055
  8941  0E82  0828               	movf	Display_Name@length,w
  8942  0E83  022A               	subwf	Display_Name@i,w
  8943  0E84                     u5055:	
  8944  0E84  1803               	btfsc	3,0
  8945  0E85  2E97               	goto	l604
  8946                           
  8947                           ;main.c: 179:             SPI_Write(string1[i]);
  8948  0E86  0020               	movlb	0	; select bank0
  8949  0E87  0825               	movf	Display_Name@string1,w
  8950  0E88  072A               	addwf	Display_Name@i,w
  8951  0E89  0084               	movwf	4
  8952  0E8A  0826               	movf	Display_Name@string1+1,w
  8953  0E8B  3D2B               	addwfc	Display_Name@i+1,w
  8954  0E8C  0085               	movwf	5
  8955  0E8D  0800               	movf	0,w	;code access
  8956  0E8E  318B  237F  318E   	fcall	_SPI_Write
  8957                           
  8958                           ;main.c: 180:         }
  8959  0E91  3001               	movlw	1
  8960  0E92  0020               	movlb	0	; select bank0
  8961  0E93  07AA               	addwf	Display_Name@i,f
  8962  0E94  3000               	movlw	0
  8963  0E95  3DAB               	addwfc	Display_Name@i+1,f
  8964  0E96  2E7A               	goto	l5845
  8965  0E97                     l604:	
  8966                           ;main.c: 181:     }
  8967                           
  8968                           
  8969                           ;main.c: 182:     printed = 1;
  8970  0E97  0020               	movlb	0	; select bank0
  8971  0E98  01EE               	clrf	_printed
  8972  0E99  0AEE               	incf	_printed,f
  8973  0E9A  0008               	return
  8974  0E9B                     __end_of_Display_Name:	
  8975                           
  8976                           	psect	text24
  8977  0B94                     __ptext24:	
  8978 ;; *************** function _strlen *****************
  8979 ;; Defined at:
  8980 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  8983 ;;		 -> STR_11(11), STR_10(16), STR_9(13), STR_8(12), 
  8984 ;;		 -> STR_7(4), STR_6(5), STR_5(6), STR_4(5), 
  8985 ;;		 -> STR_3(5), STR_2(3), STR_1(6), 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  a               2    3[BANK0 ] PTR const unsigned char 
  8988 ;;		 -> STR_11(11), STR_10(16), STR_9(13), STR_8(12), 
  8989 ;;		 -> STR_7(4), STR_6(5), STR_5(6), STR_4(5), 
  8990 ;;		 -> STR_3(5), STR_2(3), STR_1(6), 
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  2    0[BANK0 ] unsigned int 
  8993 ;; Registers used:
  8994 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        5 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    5
  9007 ;; This function calls:
  9008 ;;		Nothing
  9009 ;; This function is called by:
  9010 ;;		_Display_Name
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _strlen
  9016  0B94                     _strlen:	
  9017                           
  9018                           ;incstack = 0
  9019                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  9020  0B94  0020               	movlb	0	; select bank0
  9021  0B95  0821               	movf	strlen@s+1,w
  9022  0B96  00A4               	movwf	strlen@a+1
  9023  0B97  0820               	movf	strlen@s,w
  9024  0B98  00A3               	movwf	strlen@a
  9025  0B99                     l5417:	
  9026  0B99  0820               	movf	strlen@s,w
  9027  0B9A  0084               	movwf	4
  9028  0B9B  0821               	movf	strlen@s+1,w
  9029  0B9C  0085               	movwf	5
  9030  0B9D  0012               	moviw fsr0++
  9031  0B9E  1903               	btfsc	3,2
  9032  0B9F  2BA5               	goto	l5419
  9033  0BA0  3001               	movlw	1
  9034  0BA1  07A0               	addwf	strlen@s,f
  9035  0BA2  3000               	movlw	0
  9036  0BA3  3DA1               	addwfc	strlen@s+1,f
  9037  0BA4  2B99               	goto	l5417
  9038  0BA5                     l5419:	
  9039  0BA5  0823               	movf	strlen@a,w
  9040  0BA6  0220               	subwf	strlen@s,w
  9041  0BA7  00A0               	movwf	?_strlen
  9042  0BA8  0824               	movf	strlen@a+1,w
  9043  0BA9  3B21               	subwfb	strlen@s+1,w
  9044  0BAA  00A1               	movwf	?_strlen+1
  9045  0BAB  0008               	return
  9046  0BAC                     __end_of_strlen:	
  9047                           
  9048                           	psect	text25
  9049  0AFA                     __ptext25:	
  9050 ;; *************** function _Display_Clear *****************
  9051 ;; Defined at:
  9052 ;;		line 194 in file "main.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;		None
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;		None
  9057 ;; Return value:  Size  Location     Type
  9058 ;;                  1    wreg      void 
  9059 ;; Registers used:
  9060 ;;		wreg, status,2, status,0, pclath, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;Total ram usage:        1 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    7
  9073 ;; This function calls:
  9074 ;;		_SPI_Write
  9075 ;; This function is called by:
  9076 ;;		_main
  9077 ;;		_handleGesture
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _Display_Clear
  9083  0AFA                     _Display_Clear:	
  9084                           
  9085                           ;main.c: 195:     SPI_Write(0xFE);
  9086                           
  9087                           ;incstack = 0
  9088                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
  9089  0AFA  30FE               	movlw	254
  9090  0AFB  318B  237F  318A   	fcall	_SPI_Write
  9091                           
  9092                           ;main.c: 196:     _delay((unsigned long)((100)*(250000/4000.0)));
  9093  0AFE  3009               	movlw	9
  9094  0AFF  0020               	movlb	0	; select bank0
  9095  0B00  00A3               	movwf	??_Display_Clear
  9096  0B01  301C               	movlw	28
  9097  0B02                     u5837:	
  9098  0B02  0B89               	decfsz	9,f
  9099  0B03  2B02               	goto	u5837
  9100  0B04  0BA3               	decfsz	??_Display_Clear,f
  9101  0B05  2B02               	goto	u5837
  9102  0B06  0000               	nop
  9103                           
  9104                           ;main.c: 197:     SPI_Write(0x51);
  9105  0B07  3051               	movlw	81
  9106  0B08  318B  237F         	fcall	_SPI_Write
  9107  0B0A  0008               	return
  9108  0B0B                     __end_of_Display_Clear:	
  9109                           
  9110                           	psect	text26
  9111  0B7F                     __ptext26:	
  9112 ;; *************** function _SPI_Write *****************
  9113 ;; Defined at:
  9114 ;;		line 164 in file "main.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;  incoming        1    wreg     unsigned char 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  incoming        1    2[BANK0 ] unsigned char 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      void 
  9121 ;; Registers used:
  9122 ;;		wreg, status,2, status,0, pclath, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;Total ram usage:        2 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    6
  9135 ;; This function calls:
  9136 ;;		_SPI2_Exchange8bit
  9137 ;; This function is called by:
  9138 ;;		_Display_Name
  9139 ;;		_Display_Clear
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           
  9144                           ;psect for function _SPI_Write
  9145  0B7F                     _SPI_Write:	
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
  9149                           ;SPI_Write@incoming stored from wreg
  9150  0B7F  0020               	movlb	0	; select bank0
  9151  0B80  00A2               	movwf	SPI_Write@incoming
  9152                           
  9153                           ;main.c: 164: void SPI_Write(char incoming);main.c: 165: {;main.c: 166:     do { LATCbit
      +                          s.LATC0 = 0; } while(0);
  9154  0B81  0022               	movlb	2	; select bank2
  9155  0B82  100E               	bcf	14,0	;volatile
  9156                           
  9157                           ;main.c: 167:     SPI2_Exchange8bit(incoming);
  9158  0B83  0020               	movlb	0	; select bank0
  9159  0B84  0822               	movf	SPI_Write@incoming,w
  9160  0B85  318A  22EB  318B   	fcall	_SPI2_Exchange8bit
  9161  0B88  0022               	movlb	2	; select bank2
  9162  0B89  140E               	bsf	14,0	;volatile
  9163                           
  9164                           ;main.c: 169:     _delay((unsigned long)((100)*(250000/4000.0)));
  9165  0B8A  3009               	movlw	9
  9166  0B8B  0020               	movlb	0	; select bank0
  9167  0B8C  00A1               	movwf	??_SPI_Write
  9168  0B8D  301C               	movlw	28
  9169  0B8E                     u5847:	
  9170  0B8E  0B89               	decfsz	9,f
  9171  0B8F  2B8E               	goto	u5847
  9172  0B90  0BA1               	decfsz	??_SPI_Write,f
  9173  0B91  2B8E               	goto	u5847
  9174  0B92  0000               	nop
  9175  0B93  0008               	return
  9176  0B94                     __end_of_SPI_Write:	
  9177                           
  9178                           	psect	text27
  9179  0AEB                     __ptext27:	
  9180 ;; *************** function _SPI2_Exchange8bit *****************
  9181 ;; Defined at:
  9182 ;;		line 79 in file "mcc_generated_files/spi2.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  data            1    wreg     unsigned char 
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;  data            1    0[BANK0 ] unsigned char 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      unsigned char 
  9189 ;; Registers used:
  9190 ;;		wreg
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        1 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    5
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_SPI_Write
  9207 ;;		_SPI2_Exchange8bitBuffer
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           
  9212                           ;psect for function _SPI2_Exchange8bit
  9213  0AEB                     _SPI2_Exchange8bit:	
  9214                           
  9215                           ;incstack = 0
  9216                           ; Regs used in _SPI2_Exchange8bit: [wreg]
  9217                           ;SPI2_Exchange8bit@data stored from wreg
  9218  0AEB  0020               	movlb	0	; select bank0
  9219  0AEC  00A0               	movwf	SPI2_Exchange8bit@data
  9220                           
  9221                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
  9222  0AED  0024               	movlb	4	; select bank4
  9223  0AEE  139D               	bcf	29,7	;volatile
  9224                           
  9225                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
  9226  0AEF  0020               	movlb	0	; select bank0
  9227  0AF0  0820               	movf	SPI2_Exchange8bit@data,w
  9228  0AF1  0024               	movlb	4	; select bank4
  9229  0AF2  0099               	movwf	25	;volatile
  9230  0AF3                     l1062:	
  9231                           ;mcc_generated_files/spi2.c: 89:     }
  9232                           
  9233                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
  9234                           
  9235                           
  9236                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
  9237  0AF3  0024               	movlb	4	; select bank4
  9238  0AF4  181C               	btfsc	28,0	;volatile
  9239  0AF5  2AF8               	goto	l5309
  9240  0AF6  0064               	clrwdt	;# 
  9241  0AF7  2AF3               	goto	l1062
  9242  0AF8                     l5309:	
  9243                           
  9244                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
  9245  0AF8  0819               	movf	25,w	;volatile
  9246  0AF9  0008               	return
  9247  0AFA                     __end_of_SPI2_Exchange8bit:	
  9248                           
  9249                           	psect	text28
  9250  071B                     __ptext28:	
  9251 ;; *************** function _enableGestureSensor *****************
  9252 ;; Defined at:
  9253 ;;		line 409 in file "APDS9960.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;  interrupts      1    wreg     _Bool 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  interrupts      1   17[BANK0 ] _Bool 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  1    wreg      _Bool 
  9260 ;; Registers used:
  9261 ;;		wreg, status,2, status,0, pclath, cstack
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;Total ram usage:        2 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:   11
  9274 ;; This function calls:
  9275 ;;		_enablePower
  9276 ;;		_resetGestureParameters
  9277 ;;		_setGestureIntEnable
  9278 ;;		_setGestureMode
  9279 ;;		_setLEDBoost
  9280 ;;		_setMode
  9281 ;;		_wireWriteDataByte
  9282 ;; This function is called by:
  9283 ;;		_main
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           
  9288                           ;psect for function _enableGestureSensor
  9289  071B                     _enableGestureSensor:	
  9290                           
  9291                           ;incstack = 0
  9292                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  9293                           ;enableGestureSensor@interrupts stored from wreg
  9294  071B  0020               	movlb	0	; select bank0
  9295  071C  00B1               	movwf	enableGestureSensor@interrupts
  9296                           
  9297                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
  9298  071D  318B  236A  3187   	fcall	_resetGestureParameters
  9299                           
  9300                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
  9301  0720  30FF               	movlw	255
  9302  0721  0020               	movlb	0	; select bank0
  9303  0722  00B0               	movwf	??_enableGestureSensor
  9304  0723  0830               	movf	??_enableGestureSensor,w
  9305  0724  00A6               	movwf	wireWriteDataByte@val
  9306  0725  3083               	movlw	131
  9307  0726  318B  23AC  3187   	fcall	_wireWriteDataByte
  9308  0729  0020               	movlb	0	; select bank0
  9309  072A  0826               	movf	?_wireWriteDataByte,w
  9310  072B  0427               	iorwf	?_wireWriteDataByte+1,w
  9311  072C  1903               	btfsc	3,2
  9312  072D  2F31               	goto	l6321
  9313  072E  2F33               	goto	l6325
  9314  072F                     l6339:	
  9315                           
  9316                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
  9317  072F  3001               	movlw	1
  9318  0730  2F4C               	goto	L8
  9319  0731                     l6321:	
  9320                           
  9321                           ;APDS9960.c: 420:         return 0;
  9322  0731  3000               	movlw	0
  9323  0732  0008               	return
  9324  0733                     l6325:	
  9325                           
  9326                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
  9327  0733  3089               	movlw	137
  9328  0734  00B0               	movwf	??_enableGestureSensor
  9329  0735  0830               	movf	??_enableGestureSensor,w
  9330  0736  00A6               	movwf	wireWriteDataByte@val
  9331  0737  308E               	movlw	142
  9332  0738  318B  23AC  3187   	fcall	_wireWriteDataByte
  9333  073B  0020               	movlb	0	; select bank0
  9334  073C  0826               	movf	?_wireWriteDataByte,w
  9335  073D  0427               	iorwf	?_wireWriteDataByte+1,w
  9336  073E  1903               	btfsc	3,2
  9337  073F  2F31               	goto	l6321
  9338                           
  9339                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
  9340  0740  3003               	movlw	3
  9341  0741  318D  25D2  3187   	fcall	_setLEDBoost
  9342  0744  3A00               	xorlw	0
  9343  0745  1903               	btfsc	3,2
  9344  0746  2F31               	goto	l6321
  9345                           
  9346                           ;APDS9960.c: 428:     if( interrupts ) {
  9347  0747  0020               	movlb	0	; select bank0
  9348  0748  0831               	movf	enableGestureSensor@interrupts,w
  9349  0749  1D03               	btfss	3,2
  9350  074A  2F2F               	goto	l6339
  9351                           
  9352                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
  9353  074B  3000               	movlw	0
  9354  074C                     L8:	
  9355  074C  3187  27D1  3187   	fcall	_setGestureIntEnable
  9356  074F  3A00               	xorlw	0
  9357  0750  1903               	btfsc	3,2
  9358  0751  2F31               	goto	l6321
  9359                           
  9360                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
  9361  0752  3001               	movlw	1
  9362  0753  318C  2488  3187   	fcall	_setGestureMode
  9363  0756  3A00               	xorlw	0
  9364  0757  1903               	btfsc	3,2
  9365  0758  2F31               	goto	l6321
  9366                           
  9367                           ;APDS9960.c: 440:     if( !enablePower() ){
  9368  0759  318A  22CE  3187   	fcall	_enablePower
  9369  075C  3A00               	xorlw	0
  9370  075D  1903               	btfsc	3,2
  9371  075E  2F31               	goto	l6321
  9372                           
  9373                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
  9374  075F  0020               	movlb	0	; select bank0
  9375  0760  01AB               	clrf	setMode@enable
  9376  0761  0AAB               	incf	setMode@enable,f
  9377  0762  3003               	movlw	3
  9378  0763  318F  27B1  3187   	fcall	_setMode
  9379  0766  3A00               	xorlw	0
  9380  0767  1903               	btfsc	3,2
  9381  0768  2F31               	goto	l6321
  9382                           
  9383                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
  9384  0769  0020               	movlb	0	; select bank0
  9385  076A  01AB               	clrf	setMode@enable
  9386  076B  0AAB               	incf	setMode@enable,f
  9387  076C  3002               	movlw	2
  9388  076D  318F  27B1  3187   	fcall	_setMode
  9389  0770  3A00               	xorlw	0
  9390  0771  1903               	btfsc	3,2
  9391  0772  2F31               	goto	l6321
  9392                           
  9393                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
  9394  0773  0020               	movlb	0	; select bank0
  9395  0774  01AB               	clrf	setMode@enable
  9396  0775  0AAB               	incf	setMode@enable,f
  9397  0776  3006               	movlw	6
  9398  0777  318F  27B1  3187   	fcall	_setMode
  9399  077A  3A00               	xorlw	0
  9400  077B  1903               	btfsc	3,2
  9401  077C  2F31               	goto	l6321
  9402                           
  9403                           ;APDS9960.c: 453:     return 1;
  9404  077D  3001               	movlw	1
  9405  077E  0008               	return
  9406  077F                     __end_of_enableGestureSensor:	
  9407                           
  9408                           	psect	text29
  9409  0DD2                     __ptext29:	
  9410 ;; *************** function _setLEDBoost *****************
  9411 ;; Defined at:
  9412 ;;		line 484 in file "APDS9960.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  boost           1    wreg     unsigned char 
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;  boost           1   13[BANK0 ] unsigned char 
  9417 ;;  val             1   12[BANK0 ] unsigned char 
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  1    wreg      _Bool 
  9420 ;; Registers used:
  9421 ;;		wreg, status,2, status,0, pclath, cstack
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;Total ram usage:        4 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    8
  9434 ;; This function calls:
  9435 ;;		_wireReadDataByte
  9436 ;;		_wireWriteDataByte
  9437 ;; This function is called by:
  9438 ;;		_enableGestureSensor
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           
  9443                           ;psect for function _setLEDBoost
  9444  0DD2                     _setLEDBoost:	
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  9448                           ;setLEDBoost@boost stored from wreg
  9449  0DD2  0020               	movlb	0	; select bank0
  9450  0DD3  00AD               	movwf	setLEDBoost@boost
  9451                           
  9452                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
  9453  0DD4  3090               	movlw	144
  9454  0DD5  318C  243E  318D   	fcall	_wireReadDataByte
  9455  0DD8  0020               	movlb	0	; select bank0
  9456  0DD9  00AA               	movwf	??_setLEDBoost
  9457  0DDA  082A               	movf	??_setLEDBoost,w
  9458  0DDB  00AC               	movwf	setLEDBoost@val
  9459                           
  9460                           ;APDS9960.c: 492:     boost &= 0b00000011;
  9461  0DDC  3003               	movlw	3
  9462  0DDD  00AA               	movwf	??_setLEDBoost
  9463  0DDE  082A               	movf	??_setLEDBoost,w
  9464  0DDF  05AD               	andwf	setLEDBoost@boost,f
  9465                           
  9466                           ;APDS9960.c: 493:     boost = boost << 4;
  9467  0DE0  082D               	movf	setLEDBoost@boost,w
  9468  0DE1  00AA               	movwf	??_setLEDBoost
  9469  0DE2  3003               	movlw	3
  9470  0DE3                     u5315:	
  9471  0DE3  35AA               	lslf	??_setLEDBoost,f
  9472  0DE4  3EFF               	addlw	-1
  9473  0DE5  1D03               	skipz
  9474  0DE6  2DE3               	goto	u5315
  9475  0DE7  352A               	lslf	??_setLEDBoost,w
  9476  0DE8  00AB               	movwf	??_setLEDBoost+1
  9477  0DE9  082B               	movf	??_setLEDBoost+1,w
  9478  0DEA  00AD               	movwf	setLEDBoost@boost
  9479                           
  9480                           ;APDS9960.c: 494:     val &= 0b11001111;
  9481  0DEB  30CF               	movlw	207
  9482  0DEC  00AA               	movwf	??_setLEDBoost
  9483  0DED  082A               	movf	??_setLEDBoost,w
  9484  0DEE  05AC               	andwf	setLEDBoost@val,f
  9485                           
  9486                           ;APDS9960.c: 495:     val |= boost;
  9487  0DEF  082D               	movf	setLEDBoost@boost,w
  9488  0DF0  00AA               	movwf	??_setLEDBoost
  9489  0DF1  082A               	movf	??_setLEDBoost,w
  9490  0DF2  04AC               	iorwf	setLEDBoost@val,f
  9491                           
  9492                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
  9493  0DF3  082C               	movf	setLEDBoost@val,w
  9494  0DF4  00AA               	movwf	??_setLEDBoost
  9495  0DF5  082A               	movf	??_setLEDBoost,w
  9496  0DF6  00A6               	movwf	wireWriteDataByte@val
  9497  0DF7  3090               	movlw	144
  9498  0DF8  318B  23AC  318D   	fcall	_wireWriteDataByte
  9499  0DFB  0020               	movlb	0	; select bank0
  9500  0DFC  0826               	movf	?_wireWriteDataByte,w
  9501  0DFD  0427               	iorwf	?_wireWriteDataByte+1,w
  9502  0DFE  1D03               	btfss	3,2
  9503  0DFF  2E02               	goto	l6117
  9504                           
  9505                           ;APDS9960.c: 499:         return 0;
  9506  0E00  3000               	movlw	0
  9507  0E01  0008               	return
  9508  0E02                     l6117:	
  9509                           
  9510                           ;APDS9960.c: 502:     return 1;
  9511  0E02  3001               	movlw	1
  9512  0E03  0008               	return
  9513  0E04                     __end_of_setLEDBoost:	
  9514                           
  9515                           	psect	text30
  9516  0C88                     __ptext30:	
  9517 ;; *************** function _setGestureMode *****************
  9518 ;; Defined at:
  9519 ;;		line 506 in file "APDS9960.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;  mode            1    wreg     unsigned char 
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;  mode            1   11[BANK0 ] unsigned char 
  9524 ;;  val             1   12[BANK0 ] unsigned char 
  9525 ;; Return value:  Size  Location     Type
  9526 ;;                  1    wreg      _Bool 
  9527 ;; Registers used:
  9528 ;;		wreg, status,2, status,0, pclath, cstack
  9529 ;; Tracked objects:
  9530 ;;		On entry : 0/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;Total ram usage:        3 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; Hardware stack levels required when called:    8
  9541 ;; This function calls:
  9542 ;;		_wireReadDataByte
  9543 ;;		_wireWriteDataByte
  9544 ;; This function is called by:
  9545 ;;		_enableGestureSensor
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           
  9550                           ;psect for function _setGestureMode
  9551  0C88                     _setGestureMode:	
  9552                           
  9553                           ;incstack = 0
  9554                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  9555                           ;setGestureMode@mode stored from wreg
  9556  0C88  0020               	movlb	0	; select bank0
  9557  0C89  00AB               	movwf	setGestureMode@mode
  9558                           
  9559                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
  9560  0C8A  30AB               	movlw	171
  9561  0C8B  318C  243E  318C   	fcall	_wireReadDataByte
  9562  0C8E  0020               	movlb	0	; select bank0
  9563  0C8F  00AA               	movwf	??_setGestureMode
  9564  0C90  082A               	movf	??_setGestureMode,w
  9565  0C91  00AC               	movwf	setGestureMode@val
  9566                           
  9567                           ;APDS9960.c: 514:     mode &= 0b00000001;
  9568  0C92  3001               	movlw	1
  9569  0C93  00AA               	movwf	??_setGestureMode
  9570  0C94  082A               	movf	??_setGestureMode,w
  9571  0C95  05AB               	andwf	setGestureMode@mode,f
  9572                           
  9573                           ;APDS9960.c: 515:     val &= 0b11111110;
  9574  0C96  30FE               	movlw	254
  9575  0C97  00AA               	movwf	??_setGestureMode
  9576  0C98  082A               	movf	??_setGestureMode,w
  9577  0C99  05AC               	andwf	setGestureMode@val,f
  9578                           
  9579                           ;APDS9960.c: 516:     val |= mode;
  9580  0C9A  082B               	movf	setGestureMode@mode,w
  9581  0C9B  00AA               	movwf	??_setGestureMode
  9582  0C9C  082A               	movf	??_setGestureMode,w
  9583  0C9D  04AC               	iorwf	setGestureMode@val,f
  9584                           
  9585                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
  9586  0C9E  082C               	movf	setGestureMode@val,w
  9587  0C9F  00AA               	movwf	??_setGestureMode
  9588  0CA0  082A               	movf	??_setGestureMode,w
  9589  0CA1  00A6               	movwf	wireWriteDataByte@val
  9590  0CA2  30AB               	movlw	171
  9591  0CA3  318B  23AC  318C   	fcall	_wireWriteDataByte
  9592  0CA6  0020               	movlb	0	; select bank0
  9593  0CA7  0826               	movf	?_wireWriteDataByte,w
  9594  0CA8  0427               	iorwf	?_wireWriteDataByte+1,w
  9595  0CA9  1D03               	btfss	3,2
  9596  0CAA  2CAD               	goto	l6135
  9597                           
  9598                           ;APDS9960.c: 520:         return 0;
  9599  0CAB  3000               	movlw	0
  9600  0CAC  0008               	return
  9601  0CAD                     l6135:	
  9602                           
  9603                           ;APDS9960.c: 523:     return 1;
  9604  0CAD  3001               	movlw	1
  9605  0CAE  0008               	return
  9606  0CAF                     __end_of_setGestureMode:	
  9607                           
  9608                           	psect	text31
  9609  07D1                     __ptext31:	
  9610 ;; *************** function _setGestureIntEnable *****************
  9611 ;; Defined at:
  9612 ;;		line 387 in file "APDS9960.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  enable          1    wreg     unsigned char 
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;  enable          1   12[BANK0 ] unsigned char 
  9617 ;;  val             1   11[BANK0 ] unsigned char 
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  1    wreg      _Bool 
  9620 ;; Registers used:
  9621 ;;		wreg, status,2, status,0, pclath, cstack
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;Total ram usage:        3 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    8
  9634 ;; This function calls:
  9635 ;;		_wireReadDataByte
  9636 ;;		_wireWriteDataByte
  9637 ;; This function is called by:
  9638 ;;		_initialize
  9639 ;;		_enableGestureSensor
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function _setGestureIntEnable
  9645  07D1                     _setGestureIntEnable:	
  9646                           
  9647                           ;incstack = 0
  9648                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  9649                           ;setGestureIntEnable@enable stored from wreg
  9650  07D1  0020               	movlb	0	; select bank0
  9651  07D2  00AC               	movwf	setGestureIntEnable@enable
  9652                           
  9653                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
  9654  07D3  30AB               	movlw	171
  9655  07D4  318C  243E  3187   	fcall	_wireReadDataByte
  9656  07D7  0020               	movlb	0	; select bank0
  9657  07D8  00AA               	movwf	??_setGestureIntEnable
  9658  07D9  082A               	movf	??_setGestureIntEnable,w
  9659  07DA  00AB               	movwf	setGestureIntEnable@val
  9660                           
  9661                           ;APDS9960.c: 395:     enable &= 0b00000001;
  9662  07DB  3001               	movlw	1
  9663  07DC  00AA               	movwf	??_setGestureIntEnable
  9664  07DD  082A               	movf	??_setGestureIntEnable,w
  9665  07DE  05AC               	andwf	setGestureIntEnable@enable,f
  9666                           
  9667                           ;APDS9960.c: 396:     enable = enable << 1;
  9668  07DF  352C               	lslf	setGestureIntEnable@enable,w
  9669  07E0  00AA               	movwf	??_setGestureIntEnable
  9670  07E1  082A               	movf	??_setGestureIntEnable,w
  9671  07E2  00AC               	movwf	setGestureIntEnable@enable
  9672                           
  9673                           ;APDS9960.c: 397:     val &= 0b11111101;
  9674  07E3  30FD               	movlw	253
  9675  07E4  00AA               	movwf	??_setGestureIntEnable
  9676  07E5  082A               	movf	??_setGestureIntEnable,w
  9677  07E6  05AB               	andwf	setGestureIntEnable@val,f
  9678                           
  9679                           ;APDS9960.c: 398:     val |= enable;
  9680  07E7  082C               	movf	setGestureIntEnable@enable,w
  9681  07E8  00AA               	movwf	??_setGestureIntEnable
  9682  07E9  082A               	movf	??_setGestureIntEnable,w
  9683  07EA  04AB               	iorwf	setGestureIntEnable@val,f
  9684                           
  9685                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
  9686  07EB  082B               	movf	setGestureIntEnable@val,w
  9687  07EC  00AA               	movwf	??_setGestureIntEnable
  9688  07ED  082A               	movf	??_setGestureIntEnable,w
  9689  07EE  00A6               	movwf	wireWriteDataByte@val
  9690  07EF  30AB               	movlw	171
  9691  07F0  318B  23AC  3187   	fcall	_wireWriteDataByte
  9692  07F3  0020               	movlb	0	; select bank0
  9693  07F4  0826               	movf	?_wireWriteDataByte,w
  9694  07F5  0427               	iorwf	?_wireWriteDataByte+1,w
  9695  07F6  1D03               	btfss	3,2
  9696  07F7  2FFA               	goto	l6099
  9697                           
  9698                           ;APDS9960.c: 402:         return 0;
  9699  07F8  3000               	movlw	0
  9700  07F9  0008               	return
  9701  07FA                     l6099:	
  9702                           
  9703                           ;APDS9960.c: 405:     return 1;
  9704  07FA  3001               	movlw	1
  9705  07FB  0008               	return
  9706  07FC                     __end_of_setGestureIntEnable:	
  9707                           
  9708                           	psect	text32
  9709  0B6A                     __ptext32:	
  9710 ;; *************** function _resetGestureParameters *****************
  9711 ;; Defined at:
  9712 ;;		line 457 in file "APDS9960.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;		None
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  1    wreg      void 
  9719 ;; Registers used:
  9720 ;;		status,2
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;Total ram usage:        0 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    5
  9733 ;; This function calls:
  9734 ;;		Nothing
  9735 ;; This function is called by:
  9736 ;;		_enableGestureSensor
  9737 ;;		_readGesture
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _resetGestureParameters
  9743  0B6A                     _resetGestureParameters:	
  9744                           
  9745                           ;APDS9960.c: 460:     gesture_data_.index = 0;
  9746                           
  9747                           ;incstack = 0
  9748                           ; Regs used in _resetGestureParameters: [status,2]
  9749  0B6A  0024               	movlb	4	; select bank4
  9750  0B6B  01E0               	clrf	(_gesture_data_^(0+512)+64)
  9751                           
  9752                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
  9753  0B6C  01E1               	clrf	(_gesture_data_^(0+512)+65)
  9754                           
  9755                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
  9756  0B6D  0020               	movlb	0	; select bank0
  9757  0B6E  01EA               	clrf	_gesture_ud_delta_
  9758  0B6F  01EB               	clrf	_gesture_ud_delta_+1
  9759                           
  9760                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
  9761  0B70  01E8               	clrf	_gesture_lr_delta_
  9762  0B71  01E9               	clrf	_gesture_lr_delta_+1
  9763                           
  9764                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
  9765  0B72  01E6               	clrf	_gesture_ud_count_
  9766  0B73  01E7               	clrf	_gesture_ud_count_+1
  9767                           
  9768                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
  9769  0B74  01E4               	clrf	_gesture_lr_count_
  9770  0B75  01E5               	clrf	_gesture_lr_count_+1
  9771                           
  9772                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
  9773  0B76  01E2               	clrf	_gesture_near_count_
  9774  0B77  01E3               	clrf	_gesture_near_count_+1
  9775                           
  9776                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
  9777  0B78  01E0               	clrf	_gesture_far_count_
  9778  0B79  01E1               	clrf	_gesture_far_count_+1
  9779                           
  9780                           ;APDS9960.c: 472:     gesture_state_ = 0;
  9781  0B7A  01DE               	clrf	_gesture_state_
  9782  0B7B  01DF               	clrf	_gesture_state_+1
  9783                           
  9784                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
  9785  0B7C  01DC               	clrf	_gesture_motion_
  9786  0B7D  01DD               	clrf	_gesture_motion_+1
  9787  0B7E  0008               	return
  9788  0B7F                     __end_of_resetGestureParameters:	
  9789                           
  9790                           	psect	text33
  9791  0ACE                     __ptext33:	
  9792 ;; *************** function _enablePower *****************
  9793 ;; Defined at:
  9794 ;;		line 527 in file "APDS9960.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;		None
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;		None
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      _Bool 
  9801 ;; Registers used:
  9802 ;;		wreg, status,2, status,0, pclath, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;Total ram usage:        0 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:   10
  9815 ;; This function calls:
  9816 ;;		_setMode
  9817 ;; This function is called by:
  9818 ;;		_enableGestureSensor
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           
  9823                           ;psect for function _enablePower
  9824  0ACE                     _enablePower:	
  9825                           
  9826                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
  9827                           
  9828                           ;incstack = 0
  9829                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  9830  0ACE  0020               	movlb	0	; select bank0
  9831  0ACF  01AB               	clrf	setMode@enable
  9832  0AD0  0AAB               	incf	setMode@enable,f
  9833  0AD1  3000               	movlw	0
  9834  0AD2  318F  27B1  318A   	fcall	_setMode
  9835  0AD5  3A00               	xorlw	0
  9836  0AD6  1D03               	skipz
  9837  0AD7  2ADA               	goto	l6145
  9838                           
  9839                           ;APDS9960.c: 530:         return 0;
  9840  0AD8  3000               	movlw	0
  9841  0AD9  0008               	return
  9842  0ADA                     l6145:	
  9843                           
  9844                           ;APDS9960.c: 533:     return 1;
  9845  0ADA  3001               	movlw	1
  9846  0ADB  0008               	return
  9847  0ADC                     __end_of_enablePower:	
  9848                           
  9849                           	psect	text34
  9850  0FB1                     __ptext34:	
  9851 ;; *************** function _setMode *****************
  9852 ;; Defined at:
  9853 ;;		line 124 in file "APDS9960.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;  mode            1    wreg     unsigned char 
  9856 ;;  enable          1   11[BANK0 ] unsigned char 
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;  mode            1   15[BANK0 ] unsigned char 
  9859 ;;  reg_val         1   14[BANK0 ] unsigned char 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  1    wreg      _Bool 
  9862 ;; Registers used:
  9863 ;;		wreg, status,2, status,0, pclath, cstack
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9869 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;Total ram usage:        5 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:    9
  9876 ;; This function calls:
  9877 ;;		_getMode
  9878 ;;		_wireWriteDataByte
  9879 ;; This function is called by:
  9880 ;;		_initialize
  9881 ;;		_enableGestureSensor
  9882 ;;		_enablePower
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           
  9887                           ;psect for function _setMode
  9888  0FB1                     _setMode:	
  9889                           
  9890                           ;incstack = 0
  9891                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  9892                           ;setMode@mode stored from wreg
  9893  0FB1  0020               	movlb	0	; select bank0
  9894  0FB2  00AF               	movwf	setMode@mode
  9895                           
  9896                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
  9897  0FB3  318A  22B0  318F   	fcall	_getMode
  9898  0FB6  0020               	movlb	0	; select bank0
  9899  0FB7  00AC               	movwf	??_setMode
  9900  0FB8  082C               	movf	??_setMode,w
  9901  0FB9  00AE               	movwf	setMode@reg_val
  9902                           
  9903                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
  9904  0FBA  0A2E               	incf	setMode@reg_val,w
  9905  0FBB  1D03               	btfss	3,2
  9906  0FBC  2FBF               	goto	l5431
  9907  0FBD                     l5427:	
  9908                           
  9909                           ;APDS9960.c: 131:         return 0;
  9910  0FBD  3000               	movlw	0
  9911  0FBE  0008               	return
  9912  0FBF                     l5431:	
  9913                           
  9914                           ;APDS9960.c: 135:     enable = enable & 0x01;
  9915  0FBF  082B               	movf	setMode@enable,w
  9916  0FC0  3901               	andlw	1
  9917  0FC1  00AC               	movwf	??_setMode
  9918  0FC2  082C               	movf	??_setMode,w
  9919  0FC3  00AB               	movwf	setMode@enable
  9920                           
  9921                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
  9922  0FC4  3007               	movlw	7
  9923  0FC5  022F               	subwf	setMode@mode,w
  9924  0FC6  1803               	skipnc
  9925  0FC7  2FE4               	goto	l5441
  9926                           
  9927                           ;APDS9960.c: 137:         if (enable) {
  9928  0FC8  082B               	movf	setMode@enable,w
  9929  0FC9  1903               	btfsc	3,2
  9930  0FCA  2FD7               	goto	l5439
  9931                           
  9932                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
  9933  0FCB  3001               	movlw	1
  9934  0FCC  00AC               	movwf	??_setMode
  9935  0FCD  0A2F               	incf	setMode@mode,w
  9936  0FCE  2FD0               	goto	u4234
  9937  0FCF                     u4235:	
  9938  0FCF  35AC               	lslf	??_setMode,f
  9939  0FD0                     u4234:	
  9940  0FD0  0B89               	decfsz	9,f
  9941  0FD1  2FCF               	goto	u4235
  9942  0FD2  082C               	movf	??_setMode,w
  9943  0FD3  00AD               	movwf	??_setMode+1
  9944  0FD4  082D               	movf	??_setMode+1,w
  9945  0FD5  04AE               	iorwf	setMode@reg_val,f
  9946                           
  9947                           ;APDS9960.c: 139:         } else {
  9948  0FD6  2FF1               	goto	l5449
  9949  0FD7                     l5439:	
  9950                           
  9951                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
  9952  0FD7  3001               	movlw	1
  9953  0FD8  00AC               	movwf	??_setMode
  9954  0FD9  0A2F               	incf	setMode@mode,w
  9955  0FDA  2FDC               	goto	u4244
  9956  0FDB                     u4245:	
  9957  0FDB  35AC               	lslf	??_setMode,f
  9958  0FDC                     u4244:	
  9959  0FDC  0B89               	decfsz	9,f
  9960  0FDD  2FDB               	goto	u4245
  9961  0FDE  082C               	movf	??_setMode,w
  9962  0FDF  3AFF               	xorlw	255
  9963  0FE0  00AD               	movwf	??_setMode+1
  9964  0FE1  082D               	movf	??_setMode+1,w
  9965  0FE2  05AE               	andwf	setMode@reg_val,f
  9966  0FE3  2FF1               	goto	l5449
  9967  0FE4                     l5441:	
  9968  0FE4  3007               	movlw	7
  9969  0FE5  062F               	xorwf	setMode@mode,w
  9970  0FE6  1D03               	btfss	3,2
  9971  0FE7  2FF1               	goto	l5449
  9972                           
  9973                           ;APDS9960.c: 143:         if (enable) {
  9974  0FE8  082B               	movf	setMode@enable,w
  9975  0FE9  1903               	btfsc	3,2
  9976  0FEA  2FF0               	goto	l5447
  9977                           
  9978                           ;APDS9960.c: 144:             reg_val = 0x7F;
  9979  0FEB  307F               	movlw	127
  9980  0FEC  00AC               	movwf	??_setMode
  9981  0FED  082C               	movf	??_setMode,w
  9982  0FEE  00AE               	movwf	setMode@reg_val
  9983                           
  9984                           ;APDS9960.c: 145:         } else {
  9985  0FEF  2FF1               	goto	l5449
  9986  0FF0                     l5447:	
  9987                           
  9988                           ;APDS9960.c: 146:             reg_val = 0x00;
  9989  0FF0  01AE               	clrf	setMode@reg_val
  9990  0FF1                     l5449:	
  9991                           
  9992                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
  9993  0FF1  082E               	movf	setMode@reg_val,w
  9994  0FF2  00AC               	movwf	??_setMode
  9995  0FF3  082C               	movf	??_setMode,w
  9996  0FF4  00A6               	movwf	wireWriteDataByte@val
  9997  0FF5  3080               	movlw	128
  9998  0FF6  318B  23AC  318F   	fcall	_wireWriteDataByte
  9999  0FF9  0020               	movlb	0	; select bank0
 10000  0FFA  0826               	movf	?_wireWriteDataByte,w
 10001  0FFB  0427               	iorwf	?_wireWriteDataByte+1,w
 10002  0FFC  1903               	btfsc	3,2
 10003  0FFD  2FBD               	goto	l5427
 10004                           
 10005                           ;APDS9960.c: 155:     return 1;
 10006  0FFE  3001               	movlw	1
 10007  0FFF  0008               	return
 10008  1000                     __end_of_setMode:	
 10009                           
 10010                           	psect	text35
 10011  0BAC                     __ptext35:	
 10012 ;; *************** function _wireWriteDataByte *****************
 10013 ;; Defined at:
 10014 ;;		line 871 in file "APDS9960.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;  reg             1    wreg     unsigned char 
 10017 ;;  val             1    6[BANK0 ] unsigned char 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  reg             1    9[BANK0 ] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  2    6[BANK0 ] int 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0, pclath, cstack
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;Total ram usage:        4 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    7
 10036 ;; This function calls:
 10037 ;;		_I2C_Start
 10038 ;;		_I2C_Stop
 10039 ;;		_I2C_Write_Byte
 10040 ;; This function is called by:
 10041 ;;		_initialize
 10042 ;;		_setMode
 10043 ;;		_setLEDDrive
 10044 ;;		_setProximityGain
 10045 ;;		_setAmbientLightGain
 10046 ;;		_setProxIntLowThresh
 10047 ;;		_setProxIntHighThresh
 10048 ;;		_setLightIntLowThreshold
 10049 ;;		_setLightIntHighThreshold
 10050 ;;		_setGestureEnterThresh
 10051 ;;		_setGestureExitThresh
 10052 ;;		_setGestureGain
 10053 ;;		_setGestureLEDDrive
 10054 ;;		_setGestureWaitTime
 10055 ;;		_setGestureIntEnable
 10056 ;;		_enableGestureSensor
 10057 ;;		_setLEDBoost
 10058 ;;		_setGestureMode
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062                           
 10063                           ;psect for function _wireWriteDataByte
 10064  0BAC                     _wireWriteDataByte:	
 10065                           
 10066                           ;incstack = 0
 10067                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10068                           ;wireWriteDataByte@reg stored from wreg
 10069  0BAC  0020               	movlb	0	; select bank0
 10070  0BAD  00A9               	movwf	wireWriteDataByte@reg
 10071                           
 10072                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10073  0BAE  318A  2227  318B   	fcall	_I2C_Start
 10074                           
 10075                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10076  0BB1  3072               	movlw	114
 10077  0BB2  318B  23C7  318B   	fcall	_I2C_Write_Byte
 10078                           
 10079                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10080  0BB5  0020               	movlb	0	; select bank0
 10081  0BB6  0829               	movf	wireWriteDataByte@reg,w
 10082  0BB7  318B  23C7  318B   	fcall	_I2C_Write_Byte
 10083                           
 10084                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10085  0BBA  0020               	movlb	0	; select bank0
 10086  0BBB  0826               	movf	wireWriteDataByte@val,w
 10087  0BBC  318B  23C7  318B   	fcall	_I2C_Write_Byte
 10088                           
 10089                           ;APDS9960.c: 886:     I2C_Stop();
 10090  0BBF  318A  222D         	fcall	_I2C_Stop
 10091                           
 10092                           ;APDS9960.c: 889:     return 1;
 10093  0BC1  3001               	movlw	1
 10094  0BC2  0020               	movlb	0	; select bank0
 10095  0BC3  00A6               	movwf	?_wireWriteDataByte
 10096  0BC4  3000               	movlw	0
 10097  0BC5  00A7               	movwf	?_wireWriteDataByte+1
 10098  0BC6  0008               	return
 10099  0BC7                     __end_of_wireWriteDataByte:	
 10100                           
 10101                           	psect	text36
 10102  0AB0                     __ptext36:	
 10103 ;; *************** function _getMode *****************
 10104 ;; Defined at:
 10105 ;;		line 159 in file "APDS9960.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;		None
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      unsigned char 
 10112 ;; Registers used:
 10113 ;;		wreg, status,2, status,0, pclath, cstack
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;Total ram usage:        2 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    8
 10126 ;; This function calls:
 10127 ;;		_wireReadDataByte
 10128 ;; This function is called by:
 10129 ;;		_setMode
 10130 ;;		_readGesture
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           
 10135                           ;psect for function _getMode
 10136  0AB0                     _getMode:	
 10137                           
 10138                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10139                           
 10140                           ;incstack = 0
 10141                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10142  0AB0  3080               	movlw	128
 10143  0AB1  318C  243E         	fcall	_wireReadDataByte
 10144  0AB3  0020               	movlb	0	; select bank0
 10145  0AB4  00A9               	movwf	??_getMode
 10146  0AB5  0829               	movf	??_getMode,w
 10147  0AB6  00AA               	movwf	getMode@enable_value
 10148                           
 10149                           ;APDS9960.c: 166:     return enable_value;
 10150  0AB7  082A               	movf	getMode@enable_value,w
 10151  0AB8  0008               	return
 10152  0AB9                     __end_of_getMode:	
 10153                           
 10154                           	psect	text37
 10155  0C3E                     __ptext37:	
 10156 ;; *************** function _wireReadDataByte *****************
 10157 ;; Defined at:
 10158 ;;		line 893 in file "APDS9960.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;  reg             1    wreg     unsigned char 
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;  reg             1    7[BANK0 ] unsigned char 
 10163 ;;  val             1    8[BANK0 ] unsigned char 
 10164 ;; Return value:  Size  Location     Type
 10165 ;;                  1    wreg      unsigned char 
 10166 ;; Registers used:
 10167 ;;		wreg, status,2, status,0, pclath, cstack
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;Total ram usage:        3 bytes
 10178 ;; Hardware stack levels used:    1
 10179 ;; Hardware stack levels required when called:    7
 10180 ;; This function calls:
 10181 ;;		_I2C_ReStart
 10182 ;;		_I2C_Read_Byte
 10183 ;;		_I2C_Send_NACK
 10184 ;;		_I2C_Start
 10185 ;;		_I2C_Stop
 10186 ;;		_I2C_Write_Byte
 10187 ;; This function is called by:
 10188 ;;		_initialize
 10189 ;;		_getMode
 10190 ;;		_setLEDDrive
 10191 ;;		_setProximityGain
 10192 ;;		_setAmbientLightGain
 10193 ;;		_setGestureGain
 10194 ;;		_setGestureLEDDrive
 10195 ;;		_setGestureWaitTime
 10196 ;;		_setGestureIntEnable
 10197 ;;		_setLEDBoost
 10198 ;;		_setGestureMode
 10199 ;;		_isGestureAvailable
 10200 ;;		_readGesture
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           
 10205                           ;psect for function _wireReadDataByte
 10206  0C3E                     _wireReadDataByte:	
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 10210                           ;wireReadDataByte@reg stored from wreg
 10211  0C3E  0020               	movlb	0	; select bank0
 10212  0C3F  00A7               	movwf	wireReadDataByte@reg
 10213                           
 10214                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 10215  0C40  318A  2227  318C   	fcall	_I2C_Start
 10216                           
 10217                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10218  0C43  3072               	movlw	114
 10219  0C44  318B  23C7  318C   	fcall	_I2C_Write_Byte
 10220                           
 10221                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 10222  0C47  0020               	movlb	0	; select bank0
 10223  0C48  0827               	movf	wireReadDataByte@reg,w
 10224  0C49  318B  23C7  318C   	fcall	_I2C_Write_Byte
 10225                           
 10226                           ;APDS9960.c: 912:     I2C_ReStart();
 10227  0C4C  318A  2218  318C   	fcall	_I2C_ReStart
 10228                           
 10229                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 10230  0C4F  3073               	movlw	115
 10231  0C50  318B  23C7  318C   	fcall	_I2C_Write_Byte
 10232                           
 10233                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 10234  0C53  318A  22C3  318C   	fcall	_I2C_Read_Byte
 10235  0C56  0020               	movlb	0	; select bank0
 10236  0C57  00A6               	movwf	??_wireReadDataByte
 10237  0C58  0826               	movf	??_wireReadDataByte,w
 10238  0C59  00A8               	movwf	wireReadDataByte@val
 10239                           
 10240                           ;APDS9960.c: 916:     I2C_Send_NACK();
 10241  0C5A  318A  2221  318C   	fcall	_I2C_Send_NACK
 10242                           
 10243                           ;APDS9960.c: 917:     I2C_Stop();
 10244  0C5D  318A  222D         	fcall	_I2C_Stop
 10245                           
 10246                           ;APDS9960.c: 919:     return val;
 10247  0C5F  0020               	movlb	0	; select bank0
 10248  0C60  0828               	movf	wireReadDataByte@val,w
 10249  0C61  0008               	return
 10250  0C62                     __end_of_wireReadDataByte:	
 10251                           
 10252                           	psect	text38
 10253  0BC7                     __ptext38:	
 10254 ;; *************** function _I2C_Write_Byte *****************
 10255 ;; Defined at:
 10256 ;;		line 75 in file "i2c.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;  Byte            1    wreg     unsigned char 
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;  Byte            1    3[BANK0 ] unsigned char 
 10261 ;;  count           2    4[BANK0 ] unsigned int 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      void 
 10264 ;; Registers used:
 10265 ;;		wreg, status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        5 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    6
 10278 ;; This function calls:
 10279 ;;		_i2c1_driver_TXData
 10280 ;; This function is called by:
 10281 ;;		_wireReadDataBlock
 10282 ;;		_wireWriteDataByte
 10283 ;;		_wireReadDataByte
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           
 10288                           ;psect for function _I2C_Write_Byte
 10289  0BC7                     _I2C_Write_Byte:	
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 10293                           ;I2C_Write_Byte@Byte stored from wreg
 10294  0BC7  0020               	movlb	0	; select bank0
 10295  0BC8  00A3               	movwf	I2C_Write_Byte@Byte
 10296                           
 10297                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 10298  0BC9  0823               	movf	I2C_Write_Byte@Byte,w
 10299  0BCA  318A  2268  318B   	fcall	_i2c1_driver_TXData
 10300                           
 10301                           ;i2c.c: 83:     unsigned int count = 0;
 10302  0BCD  0020               	movlb	0	; select bank0
 10303  0BCE  01A4               	clrf	I2C_Write_Byte@count
 10304  0BCF  01A5               	clrf	I2C_Write_Byte@count+1
 10305  0BD0                     l1032:	
 10306                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 10307                           
 10308  0BD0  0024               	movlb	4	; select bank4
 10309  0BD1  1B16               	btfsc	22,6	;volatile
 10310  0BD2  2BD0               	goto	l1032
 10311  0BD3                     l5275:	
 10312  0BD3  0020               	movlb	0	; select bank0
 10313  0BD4  0825               	movf	I2C_Write_Byte@count+1,w
 10314  0BD5  00A2               	movwf	??_I2C_Write_Byte+1
 10315  0BD6  0824               	movf	I2C_Write_Byte@count,w
 10316  0BD7  00A1               	movwf	??_I2C_Write_Byte
 10317  0BD8  0AA4               	incf	I2C_Write_Byte@count,f
 10318  0BD9  1903               	skipnz
 10319  0BDA  0AA5               	incf	I2C_Write_Byte@count+1,f
 10320  0BDB  3000               	movlw	0
 10321  0BDC  0222               	subwf	??_I2C_Write_Byte+1,w
 10322  0BDD  3005               	movlw	5
 10323  0BDE  1903               	skipnz
 10324  0BDF  0221               	subwf	??_I2C_Write_Byte,w
 10325  0BE0  1803               	btfsc	3,0
 10326  0BE1  0008               	return
 10327  0BE2  2BD3               	goto	l5275
 10328  0BE3                     __end_of_I2C_Write_Byte:	
 10329                           
 10330                           	psect	text39
 10331  0A68                     __ptext39:	
 10332 ;; *************** function _i2c1_driver_TXData *****************
 10333 ;; Defined at:
 10334 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;  d               1    wreg     unsigned char 
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;  d               1    0[BANK0 ] unsigned char 
 10339 ;; Return value:  Size  Location     Type
 10340 ;;                  1    wreg      void 
 10341 ;; Registers used:
 10342 ;;		wreg
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;Total ram usage:        1 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    5
 10355 ;; This function calls:
 10356 ;;		Nothing
 10357 ;; This function is called by:
 10358 ;;		_I2C_Write_Byte
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _i2c1_driver_TXData
 10364  0A68                     _i2c1_driver_TXData:	
 10365                           
 10366                           ;incstack = 0
 10367                           ; Regs used in _i2c1_driver_TXData: [wreg]
 10368                           ;i2c1_driver_TXData@d stored from wreg
 10369  0A68  0020               	movlb	0	; select bank0
 10370  0A69  00A0               	movwf	i2c1_driver_TXData@d
 10371                           
 10372                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 10373  0A6A  0820               	movf	i2c1_driver_TXData@d,w
 10374  0A6B  0024               	movlb	4	; select bank4
 10375  0A6C  0091               	movwf	17	;volatile
 10376  0A6D  0008               	return
 10377  0A6E                     __end_of_i2c1_driver_TXData:	
 10378                           
 10379                           	psect	text40
 10380  0A2D                     __ptext40:	
 10381 ;; *************** function _I2C_Stop *****************
 10382 ;; Defined at:
 10383 ;;		line 50 in file "i2c.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;		None
 10388 ;; Return value:  Size  Location     Type
 10389 ;;                  1    wreg      void 
 10390 ;; Registers used:
 10391 ;;		status,2, status,0, pclath, cstack
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;Total ram usage:        0 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    6
 10404 ;; This function calls:
 10405 ;;		_i2c1_driver_stop
 10406 ;; This function is called by:
 10407 ;;		_wireReadDataBlock
 10408 ;;		_wireWriteDataByte
 10409 ;;		_wireReadDataByte
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           
 10414                           ;psect for function _I2C_Stop
 10415  0A2D                     _I2C_Stop:	
 10416                           
 10417                           ;i2c.c: 52:  i2c1_driver_stop();
 10418                           
 10419                           ;incstack = 0
 10420                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 10421  0A2D  318A  222A         	fcall	_i2c1_driver_stop
 10422  0A2F  0008               	return
 10423  0A30                     __end_of_I2C_Stop:	
 10424                           
 10425                           	psect	text41
 10426  0A2A                     __ptext41:	
 10427 ;; *************** function _i2c1_driver_stop *****************
 10428 ;; Defined at:
 10429 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;		None
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;		None
 10434 ;; Return value:  Size  Location     Type
 10435 ;;                  1    wreg      void 
 10436 ;; Registers used:
 10437 ;;		None
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;Total ram usage:        0 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:    5
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_I2C_Stop
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           
 10458                           ;psect for function _i2c1_driver_stop
 10459  0A2A                     _i2c1_driver_stop:	
 10460                           
 10461                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 10462                           
 10463                           ;incstack = 0
 10464                           ; Regs used in _i2c1_driver_stop: []
 10465  0A2A  0024               	movlb	4	; select bank4
 10466  0A2B  1516               	bsf	22,2	;volatile
 10467  0A2C  0008               	return
 10468  0A2D                     __end_of_i2c1_driver_stop:	
 10469                           
 10470                           	psect	text42
 10471  0A27                     __ptext42:	
 10472 ;; *************** function _I2C_Start *****************
 10473 ;; Defined at:
 10474 ;;		line 35 in file "i2c.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;		None
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;		None
 10479 ;; Return value:  Size  Location     Type
 10480 ;;                  1    wreg      void 
 10481 ;; Registers used:
 10482 ;;		status,2, status,0, pclath, cstack
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;Total ram usage:        0 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:    6
 10495 ;; This function calls:
 10496 ;;		_i2c1_driver_start
 10497 ;; This function is called by:
 10498 ;;		_wireReadDataBlock
 10499 ;;		_wireWriteDataByte
 10500 ;;		_wireReadDataByte
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           
 10505                           ;psect for function _I2C_Start
 10506  0A27                     _I2C_Start:	
 10507                           
 10508                           ;i2c.c: 37:  i2c1_driver_start();
 10509                           
 10510                           ;incstack = 0
 10511                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 10512  0A27  318A  2224         	fcall	_i2c1_driver_start
 10513  0A29  0008               	return
 10514  0A2A                     __end_of_I2C_Start:	
 10515                           
 10516                           	psect	text43
 10517  0A24                     __ptext43:	
 10518 ;; *************** function _i2c1_driver_start *****************
 10519 ;; Defined at:
 10520 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;		None
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;		None
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  1    wreg      void 
 10527 ;; Registers used:
 10528 ;;		None
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;Total ram usage:        0 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    5
 10541 ;; This function calls:
 10542 ;;		Nothing
 10543 ;; This function is called by:
 10544 ;;		_I2C_Start
 10545 ;;		_i2c_masterOperation
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549                           
 10550                           ;psect for function _i2c1_driver_start
 10551  0A24                     _i2c1_driver_start:	
 10552                           
 10553                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 10554                           
 10555                           ;incstack = 0
 10556                           ; Regs used in _i2c1_driver_start: []
 10557  0A24  0024               	movlb	4	; select bank4
 10558  0A25  1416               	bsf	22,0	;volatile
 10559  0A26  0008               	return
 10560  0A27                     __end_of_i2c1_driver_start:	
 10561                           
 10562                           	psect	text44
 10563  0A21                     __ptext44:	
 10564 ;; *************** function _I2C_Send_NACK *****************
 10565 ;; Defined at:
 10566 ;;		line 66 in file "i2c.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;		None
 10569 ;; Auto vars:     Size  Location     Type
 10570 ;;		None
 10571 ;; Return value:  Size  Location     Type
 10572 ;;                  1    wreg      void 
 10573 ;; Registers used:
 10574 ;;		status,2, status,0, pclath, cstack
 10575 ;; Tracked objects:
 10576 ;;		On entry : 0/0
 10577 ;;		On exit  : 0/0
 10578 ;;		Unchanged: 0/0
 10579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;Total ram usage:        0 bytes
 10585 ;; Hardware stack levels used:    1
 10586 ;; Hardware stack levels required when called:    6
 10587 ;; This function calls:
 10588 ;;		_i2c1_driver_sendNACK
 10589 ;; This function is called by:
 10590 ;;		_wireReadDataBlock
 10591 ;;		_wireReadDataByte
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           
 10596                           ;psect for function _I2C_Send_NACK
 10597  0A21                     _I2C_Send_NACK:	
 10598                           
 10599                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 10603  0A21  3187  27FC         	fcall	_i2c1_driver_sendNACK
 10604  0A23  0008               	return
 10605  0A24                     __end_of_I2C_Send_NACK:	
 10606                           
 10607                           	psect	text45
 10608  07FC                     __ptext45:	
 10609 ;; *************** function _i2c1_driver_sendNACK *****************
 10610 ;; Defined at:
 10611 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;		None
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;		None
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      void 
 10618 ;; Registers used:
 10619 ;;		None
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;Total ram usage:        0 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:    5
 10632 ;; This function calls:
 10633 ;;		Nothing
 10634 ;; This function is called by:
 10635 ;;		_I2C_Send_NACK
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           
 10640                           ;psect for function _i2c1_driver_sendNACK
 10641  07FC                     _i2c1_driver_sendNACK:	
 10642                           
 10643                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 10644                           
 10645                           ;incstack = 0
 10646                           ; Regs used in _i2c1_driver_sendNACK: []
 10647  07FC  0024               	movlb	4	; select bank4
 10648  07FD  1696               	bsf	22,5	;volatile
 10649                           
 10650                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 10651  07FE  1616               	bsf	22,4	;volatile
 10652  07FF  0008               	return
 10653  0800                     __end_of_i2c1_driver_sendNACK:	
 10654                           
 10655                           	psect	text46
 10656  0AC3                     __ptext46:	
 10657 ;; *************** function _I2C_Read_Byte *****************
 10658 ;; Defined at:
 10659 ;;		line 115 in file "i2c.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;		None
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;		None
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  1    wreg      unsigned char 
 10666 ;; Registers used:
 10667 ;;		wreg, status,2, status,0, pclath, cstack
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        0 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    6
 10680 ;; This function calls:
 10681 ;;		_i2c1_driver_getRXData
 10682 ;;		_i2c1_driver_isBufferFull
 10683 ;;		_i2c1_driver_startRX
 10684 ;; This function is called by:
 10685 ;;		_wireReadDataBlock
 10686 ;;		_wireReadDataByte
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           
 10691                           ;psect for function _I2C_Read_Byte
 10692  0AC3                     _I2C_Read_Byte:	
 10693                           
 10694                           ;i2c.c: 117:     i2c1_driver_startRX();
 10695                           
 10696                           ;incstack = 0
 10697                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 10698  0AC3  318A  221E  318A   	fcall	_i2c1_driver_startRX
 10699  0AC6                     l5281:	
 10700                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 10701                           
 10702                           
 10703                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 10704  0AC6  318A  2289  318A   	fcall	_i2c1_driver_isBufferFull
 10705  0AC9  1C03               	btfss	3,0
 10706  0ACA  2AC6               	goto	l5281
 10707                           
 10708                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 10709  0ACB  318A  221B         	fcall	_i2c1_driver_getRXData
 10710  0ACD  0008               	return
 10711  0ACE                     __end_of_I2C_Read_Byte:	
 10712                           
 10713                           	psect	text47
 10714  0A1E                     __ptext47:	
 10715 ;; *************** function _i2c1_driver_startRX *****************
 10716 ;; Defined at:
 10717 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;		None
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;		None
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  1    wreg      void 
 10724 ;; Registers used:
 10725 ;;		None
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;Total ram usage:        0 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:    5
 10738 ;; This function calls:
 10739 ;;		Nothing
 10740 ;; This function is called by:
 10741 ;;		_I2C_Read_Byte
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           
 10746                           ;psect for function _i2c1_driver_startRX
 10747  0A1E                     _i2c1_driver_startRX:	
 10748                           
 10749                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 10750                           
 10751                           ;incstack = 0
 10752                           ; Regs used in _i2c1_driver_startRX: []
 10753  0A1E  0024               	movlb	4	; select bank4
 10754  0A1F  1596               	bsf	22,3	;volatile
 10755  0A20  0008               	return
 10756  0A21                     __end_of_i2c1_driver_startRX:	
 10757                           
 10758                           	psect	text48
 10759  0A89                     __ptext48:	
 10760 ;; *************** function _i2c1_driver_isBufferFull *****************
 10761 ;; Defined at:
 10762 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;		None               void
 10769 ;; Registers used:
 10770 ;;		wreg, status,2, status,0
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;Total ram usage:        1 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    5
 10783 ;; This function calls:
 10784 ;;		Nothing
 10785 ;; This function is called by:
 10786 ;;		_I2C_Read_Byte
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           
 10791                           ;psect for function _i2c1_driver_isBufferFull
 10792  0A89                     _i2c1_driver_isBufferFull:	
 10793                           
 10794                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 10795                           
 10796                           ;incstack = 0
 10797                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 10798  0A89  0024               	movlb	4	; select bank4
 10799  0A8A  0814               	movf	20,w	;volatile
 10800  0A8B  3901               	andlw	1
 10801  0A8C  0020               	movlb	0	; select bank0
 10802  0A8D  00A0               	movwf	??_i2c1_driver_isBufferFull
 10803  0A8E  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 10804  0A8F  0008               	return
 10805  0A90                     __end_of_i2c1_driver_isBufferFull:	
 10806                           
 10807                           	psect	text49
 10808  0A1B                     __ptext49:	
 10809 ;; *************** function _i2c1_driver_getRXData *****************
 10810 ;; Defined at:
 10811 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;		None
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;		None
 10816 ;; Return value:  Size  Location     Type
 10817 ;;                  1    wreg      unsigned char 
 10818 ;; Registers used:
 10819 ;;		wreg
 10820 ;; Tracked objects:
 10821 ;;		On entry : 0/0
 10822 ;;		On exit  : 0/0
 10823 ;;		Unchanged: 0/0
 10824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;Total ram usage:        0 bytes
 10830 ;; Hardware stack levels used:    1
 10831 ;; Hardware stack levels required when called:    5
 10832 ;; This function calls:
 10833 ;;		Nothing
 10834 ;; This function is called by:
 10835 ;;		_I2C_Read_Byte
 10836 ;; This function uses a non-reentrant model
 10837 ;;
 10838                           
 10839                           
 10840                           ;psect for function _i2c1_driver_getRXData
 10841  0A1B                     _i2c1_driver_getRXData:	
 10842                           
 10843                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 10844                           
 10845                           ;incstack = 0
 10846                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 10847  0A1B  0024               	movlb	4	; select bank4
 10848  0A1C  0811               	movf	17,w	;volatile
 10849  0A1D  0008               	return
 10850  0A1E                     __end_of_i2c1_driver_getRXData:	
 10851                           
 10852                           	psect	text50
 10853  0A18                     __ptext50:	
 10854 ;; *************** function _I2C_ReStart *****************
 10855 ;; Defined at:
 10856 ;;		line 43 in file "i2c.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;		None
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  1    wreg      void 
 10863 ;; Registers used:
 10864 ;;		status,2, status,0, pclath, cstack
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;Total ram usage:        0 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; Hardware stack levels required when called:    6
 10877 ;; This function calls:
 10878 ;;		_i2c1_driver_restart
 10879 ;; This function is called by:
 10880 ;;		_wireReadDataBlock
 10881 ;;		_wireReadDataByte
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           
 10886                           ;psect for function _I2C_ReStart
 10887  0A18                     _I2C_ReStart:	
 10888                           
 10889                           ;i2c.c: 45:  i2c1_driver_restart();
 10890                           
 10891                           ;incstack = 0
 10892                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 10893  0A18  318A  2215         	fcall	_i2c1_driver_restart
 10894  0A1A  0008               	return
 10895  0A1B                     __end_of_I2C_ReStart:	
 10896                           
 10897                           	psect	text51
 10898  0A15                     __ptext51:	
 10899 ;; *************** function _i2c1_driver_restart *****************
 10900 ;; Defined at:
 10901 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 10902 ;; Parameters:    Size  Location     Type
 10903 ;;		None
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;		None
 10906 ;; Return value:  Size  Location     Type
 10907 ;;                  1    wreg      void 
 10908 ;; Registers used:
 10909 ;;		None
 10910 ;; Tracked objects:
 10911 ;;		On entry : 0/0
 10912 ;;		On exit  : 0/0
 10913 ;;		Unchanged: 0/0
 10914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;Total ram usage:        0 bytes
 10920 ;; Hardware stack levels used:    1
 10921 ;; Hardware stack levels required when called:    5
 10922 ;; This function calls:
 10923 ;;		Nothing
 10924 ;; This function is called by:
 10925 ;;		_I2C_ReStart
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           
 10930                           ;psect for function _i2c1_driver_restart
 10931  0A15                     _i2c1_driver_restart:	
 10932                           
 10933                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 10934                           
 10935                           ;incstack = 0
 10936                           ; Regs used in _i2c1_driver_restart: []
 10937  0A15  0024               	movlb	4	; select bank4
 10938  0A16  1496               	bsf	22,1	;volatile
 10939  0A17  0008               	return
 10940  0A18                     __end_of_i2c1_driver_restart:	
 10941                           
 10942                           	psect	text52
 10943  0ADC                     __ptext52:	
 10944 ;; *************** function _SYSTEM_Initialize *****************
 10945 ;; Defined at:
 10946 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;		None
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;		None
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  1    wreg      void 
 10953 ;; Registers used:
 10954 ;;		wreg, status,2, status,0, pclath, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;Total ram usage:        0 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    6
 10967 ;; This function calls:
 10968 ;;		_OSCILLATOR_Initialize
 10969 ;;		_PIN_MANAGER_Initialize
 10970 ;;		_PMD_Initialize
 10971 ;;		_SPI2_Initialize
 10972 ;;		_WDT_Initialize
 10973 ;; This function is called by:
 10974 ;;		_main
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           
 10979                           ;psect for function _SYSTEM_Initialize
 10980  0ADC                     _SYSTEM_Initialize:	
 10981                           
 10982                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10986  0ADC  318A  22A8  318A   	fcall	_PMD_Initialize
 10987                           
 10988                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 10989  0ADF  318E  269B  318A   	fcall	_PIN_MANAGER_Initialize
 10990                           
 10991                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 10992  0AE2  318A  22A0  318A   	fcall	_OSCILLATOR_Initialize
 10993                           
 10994                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 10995  0AE5  318A  2254  318A   	fcall	_WDT_Initialize
 10996                           
 10997                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 10998  0AE8  318A  2282         	fcall	_SPI2_Initialize
 10999  0AEA  0008               	return
 11000  0AEB                     __end_of_SYSTEM_Initialize:	
 11001                           
 11002                           	psect	text53
 11003  0A54                     __ptext53:	
 11004 ;; *************** function _WDT_Initialize *****************
 11005 ;; Defined at:
 11006 ;;		line 74 in file "mcc_generated_files/mcc.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;		None
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;		None
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  1    wreg      void 
 11013 ;; Registers used:
 11014 ;;		wreg
 11015 ;; Tracked objects:
 11016 ;;		On entry : 0/0
 11017 ;;		On exit  : 0/0
 11018 ;;		Unchanged: 0/0
 11019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;Total ram usage:        0 bytes
 11025 ;; Hardware stack levels used:    1
 11026 ;; Hardware stack levels required when called:    5
 11027 ;; This function calls:
 11028 ;;		Nothing
 11029 ;; This function is called by:
 11030 ;;		_SYSTEM_Initialize
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           
 11035                           ;psect for function _WDT_Initialize
 11036  0A54                     _WDT_Initialize:	
 11037                           
 11038                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x18;
 11039                           
 11040                           ;incstack = 0
 11041                           ; Regs used in _WDT_Initialize: [wreg]
 11042  0A54  3018               	movlw	24
 11043  0A55  0021               	movlb	1	; select bank1
 11044  0A56  0097               	movwf	23	;volatile
 11045  0A57  0008               	return
 11046  0A58                     __end_of_WDT_Initialize:	
 11047                           
 11048                           	psect	text54
 11049  0A82                     __ptext54:	
 11050 ;; *************** function _SPI2_Initialize *****************
 11051 ;; Defined at:
 11052 ;;		line 65 in file "mcc_generated_files/spi2.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;		None
 11055 ;; Auto vars:     Size  Location     Type
 11056 ;;		None
 11057 ;; Return value:  Size  Location     Type
 11058 ;;                  1    wreg      void 
 11059 ;; Registers used:
 11060 ;;		wreg, status,2
 11061 ;; Tracked objects:
 11062 ;;		On entry : 0/0
 11063 ;;		On exit  : 0/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;Total ram usage:        0 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    5
 11073 ;; This function calls:
 11074 ;;		Nothing
 11075 ;; This function is called by:
 11076 ;;		_SYSTEM_Initialize
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           
 11081                           ;psect for function _SPI2_Initialize
 11082  0A82                     _SPI2_Initialize:	
 11083                           
 11084                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11085                           
 11086                           ;incstack = 0
 11087                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11088  0A82  3080               	movlw	128
 11089  0A83  0024               	movlb	4	; select bank4
 11090  0A84  009C               	movwf	28	;volatile
 11091                           
 11092                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x30;
 11093  0A85  3030               	movlw	48
 11094  0A86  009D               	movwf	29	;volatile
 11095                           
 11096                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11097  0A87  019A               	clrf	26	;volatile
 11098  0A88  0008               	return
 11099  0A89                     __end_of_SPI2_Initialize:	
 11100                           
 11101                           	psect	text55
 11102  0AA8                     __ptext55:	
 11103 ;; *************** function _PMD_Initialize *****************
 11104 ;; Defined at:
 11105 ;;		line 80 in file "mcc_generated_files/mcc.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;		None
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      void 
 11112 ;; Registers used:
 11113 ;;		status,2
 11114 ;; Tracked objects:
 11115 ;;		On entry : 0/0
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;Total ram usage:        0 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    5
 11126 ;; This function calls:
 11127 ;;		Nothing
 11128 ;; This function is called by:
 11129 ;;		_SYSTEM_Initialize
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           
 11134                           ;psect for function _PMD_Initialize
 11135  0AA8                     _PMD_Initialize:	
 11136                           
 11137                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
 11138                           
 11139                           ;incstack = 0
 11140                           ; Regs used in _PMD_Initialize: [status,2]
 11141  0AA8  0032               	movlb	18	; select bank18
 11142  0AA9  0191               	clrf	17	;volatile
 11143                           
 11144                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
 11145  0AAA  0192               	clrf	18	;volatile
 11146                           
 11147                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
 11148  0AAB  0193               	clrf	19	;volatile
 11149                           
 11150                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
 11151  0AAC  0194               	clrf	20	;volatile
 11152                           
 11153                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
 11154  0AAD  0195               	clrf	21	;volatile
 11155                           
 11156                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
 11157  0AAE  0196               	clrf	22	;volatile
 11158  0AAF  0008               	return
 11159  0AB0                     __end_of_PMD_Initialize:	
 11160                           
 11161                           	psect	text56
 11162  0E9B                     __ptext56:	
 11163 ;; *************** function _PIN_MANAGER_Initialize *****************
 11164 ;; Defined at:
 11165 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;		None
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;		None
 11170 ;; Return value:  Size  Location     Type
 11171 ;;                  1    wreg      void 
 11172 ;; Registers used:
 11173 ;;		wreg, status,2
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;Total ram usage:        0 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; Hardware stack levels required when called:    5
 11186 ;; This function calls:
 11187 ;;		Nothing
 11188 ;; This function is called by:
 11189 ;;		_SYSTEM_Initialize
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           
 11194                           ;psect for function _PIN_MANAGER_Initialize
 11195  0E9B                     _PIN_MANAGER_Initialize:	
 11196                           
 11197                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11201  0E9B  0022               	movlb	2	; select bank2
 11202  0E9C  018C               	clrf	12	;volatile
 11203                           
 11204                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 11205  0E9D  018D               	clrf	13	;volatile
 11206                           
 11207                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11208  0E9E  018E               	clrf	14	;volatile
 11209                           
 11210                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 11211  0E9F  3037               	movlw	55
 11212  0EA0  0021               	movlb	1	; select bank1
 11213  0EA1  008C               	movwf	12	;volatile
 11214                           
 11215                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 11216  0EA2  30B0               	movlw	176
 11217  0EA3  008D               	movwf	13	;volatile
 11218                           
 11219                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFA;
 11220  0EA4  30FA               	movlw	250
 11221  0EA5  008E               	movwf	14	;volatile
 11222                           
 11223                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xD7;
 11224  0EA6  30D7               	movlw	215
 11225  0EA7  0023               	movlb	3	; select bank3
 11226  0EA8  008E               	movwf	14	;volatile
 11227                           
 11228                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 11229  0EA9  018D               	clrf	13	;volatile
 11230                           
 11231                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 11232  0EAA  3011               	movlw	17
 11233  0EAB  008C               	movwf	12	;volatile
 11234                           
 11235                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 11236  0EAC  0024               	movlb	4	; select bank4
 11237  0EAD  018D               	clrf	13	;volatile
 11238                           
 11239                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 11240  0EAE  018C               	clrf	12	;volatile
 11241                           
 11242                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x02;
 11243  0EAF  3002               	movlw	2
 11244  0EB0  008E               	movwf	14	;volatile
 11245                           
 11246                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 11247  0EB1  0025               	movlb	5	; select bank5
 11248  0EB2  018C               	clrf	12	;volatile
 11249                           
 11250                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 11251  0EB3  018D               	clrf	13	;volatile
 11252                           
 11253                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 11254  0EB4  018E               	clrf	14	;volatile
 11255                           
 11256                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 11257  0EB5  3037               	movlw	55
 11258  0EB6  0026               	movlb	6	; select bank6
 11259  0EB7  008C               	movwf	12	;volatile
 11260                           
 11261                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 11262  0EB8  30F0               	movlw	240
 11263  0EB9  008D               	movwf	13	;volatile
 11264                           
 11265                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 11266  0EBA  30FF               	movlw	255
 11267  0EBB  008E               	movwf	14	;volatile
 11268                           
 11269                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 11270  0EBC  0021               	movlb	1	; select bank1
 11271  0EBD  1610               	bsf	16,4	;volatile
 11272                           
 11273                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 11274  0EBE  300C               	movlw	12
 11275  0EBF  003C               	movlb	28	; select bank28
 11276  0EC0  009E               	movwf	30	;volatile
 11277                           
 11278                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 11279  0EC1  300F               	movlw	15
 11280  0EC2  00A0               	movwf	32	;volatile
 11281                           
 11282                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 11283  0EC3  301A               	movlw	26
 11284  0EC4  003D               	movlb	29	; select bank29
 11285  0EC5  009E               	movwf	30	;volatile
 11286                           
 11287                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 11288  0EC6  3018               	movlw	24
 11289  0EC7  009F               	movwf	31	;volatile
 11290                           
 11291                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 11292  0EC8  3019               	movlw	25
 11293  0EC9  009D               	movwf	29	;volatile
 11294                           
 11295                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 11296  0ECA  301B               	movlw	27
 11297  0ECB  00A2               	movwf	34	;volatile
 11298                           
 11299                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 11300  0ECC  300D               	movlw	13
 11301  0ECD  003C               	movlb	28	; select bank28
 11302  0ECE  00A1               	movwf	33	;volatile
 11303                           
 11304                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 11305  0ECF  300E               	movlw	14
 11306  0ED0  009D               	movwf	29	;volatile
 11307  0ED1  0008               	return
 11308  0ED2                     __end_of_PIN_MANAGER_Initialize:	
 11309                           
 11310                           	psect	text57
 11311  0AA0                     __ptext57:	
 11312 ;; *************** function _OSCILLATOR_Initialize *****************
 11313 ;; Defined at:
 11314 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;		None
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;		None
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      void 
 11321 ;; Registers used:
 11322 ;;		wreg, status,2
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;Total ram usage:        0 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    5
 11335 ;; This function calls:
 11336 ;;		Nothing
 11337 ;; This function is called by:
 11338 ;;		_SYSTEM_Initialize
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           
 11343                           ;psect for function _OSCILLATOR_Initialize
 11344  0AA0                     _OSCILLATOR_Initialize:	
 11345                           
 11346                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11350  0AA0  3062               	movlw	98
 11351  0AA1  0032               	movlb	18	; select bank18
 11352  0AA2  0099               	movwf	25	;volatile
 11353                           
 11354                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
 11355  0AA3  019B               	clrf	27	;volatile
 11356                           
 11357                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
 11358  0AA4  019D               	clrf	29	;volatile
 11359                           
 11360                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x00;
 11361  0AA5  019F               	clrf	31	;volatile
 11362                           
 11363                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
 11364  0AA6  019E               	clrf	30	;volatile
 11365  0AA7  0008               	return
 11366  0AA8                     __end_of_OSCILLATOR_Initialize:	
 11367                           
 11368                           	psect	intentry
 11369  0004                     __pintentry:	
 11370 ;; *************** function _INTERRUPT_InterruptManager *****************
 11371 ;; Defined at:
 11372 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;		None
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        0 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    4
 11393 ;; This function calls:
 11394 ;;		Absolute function
 11395 ;;		_PIN_MANAGER_IOC
 11396 ;;		_i2c_ISR
 11397 ;;		_i2c_busCollisionISR
 11398 ;; This function is called by:
 11399 ;;		Interrupt level 1
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403  0004                     _INTERRUPT_InterruptManager:	
 11404                           
 11405                           ;incstack = 0
 11406  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11407                           
 11408                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11409  0005  3180               	pagesel	$
 11410                           
 11411                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 11412  0006  0021               	movlb	1	; select bank1
 11413  0007  1E10               	btfss	16,4	;volatile
 11414  0008  2810               	goto	i1l245
 11415  0009  0020               	movlb	0	; select bank0
 11416  000A  1E10               	btfss	16,4	;volatile
 11417  000B  2810               	goto	i1l245
 11418                           
 11419                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 11420  000C  3189  21F8  3180   	fcall	_PIN_MANAGER_IOC
 11421                           
 11422                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11423  000F  2829               	goto	i1l253
 11424  0010                     i1l245:	
 11425                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 11426                           
 11427  0010  1F0B               	btfss	11,6	;volatile
 11428  0011  2829               	goto	i1l253
 11429                           
 11430                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 11431  0012  0021               	movlb	1	; select bank1
 11432  0013  1D11               	btfss	17,2	;volatile
 11433  0014  281E               	goto	i1l248
 11434  0015  0020               	movlb	0	; select bank0
 11435  0016  1D11               	btfss	17,2	;volatile
 11436  0017  281E               	goto	i1l248
 11437                           
 11438                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 11439  0018  0871               	movf	_i2c1_driver_busCollisionISR+1,w
 11440  0019  008A               	movwf	10
 11441  001A  0870               	movf	_i2c1_driver_busCollisionISR,w
 11442  001B  000A               	callw
 11443  001C  3180               	pagesel	$
 11444                           
 11445                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 11446  001D  2829               	goto	i1l253
 11447  001E                     i1l248:	
 11448                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 11449                           
 11450  001E  0021               	movlb	1	; select bank1
 11451  001F  1D91               	btfss	17,3	;volatile
 11452  0020  2829               	goto	i1l253
 11453  0021  0020               	movlb	0	; select bank0
 11454  0022  1D91               	btfss	17,3	;volatile
 11455  0023  2829               	goto	i1l253
 11456                           
 11457                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 11458  0024  086D               	movf	_i2c1_driver_i2cISR+1,w
 11459  0025  008A               	movwf	10
 11460  0026  086C               	movf	_i2c1_driver_i2cISR,w
 11461  0027  000A               	callw
 11462  0028  3180               	pagesel	$
 11463  0029                     i1l253:	
 11464                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 11465                           
 11466                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 11467                           
 11468  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11469  002A  0009               	retfie
 11470  002B                     __end_of_INTERRUPT_InterruptManager:	
 11471                           
 11472                           	psect	text59
 11473  0A12                     __ptext59:	
 11474 ;; *************** function _i2c_busCollisionISR *****************
 11475 ;; Defined at:
 11476 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;		None
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;		None
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  1    wreg      void 
 11483 ;; Registers used:
 11484 ;;		status,2, status,0, pclath, cstack
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;Total ram usage:        0 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; Hardware stack levels required when called:    1
 11497 ;; This function calls:
 11498 ;;		_i2c1_driver_clearBusCollision
 11499 ;; This function is called by:
 11500 ;;		_i2c_open
 11501 ;;		_INTERRUPT_InterruptManager
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function _i2c_busCollisionISR
 11507  0A12                     _i2c_busCollisionISR:	
 11508                           
 11509                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 11510                           
 11511                           ;incstack = 0
 11512                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 11513  0A12  318A  220F         	fcall	_i2c1_driver_clearBusCollision
 11514  0A14  0008               	return
 11515  0A15                     __end_of_i2c_busCollisionISR:	
 11516                           
 11517                           	psect	text60
 11518  0A0F                     __ptext60:	
 11519 ;; *************** function _i2c1_driver_clearBusCollision *****************
 11520 ;; Defined at:
 11521 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 11522 ;; Parameters:    Size  Location     Type
 11523 ;;		None
 11524 ;; Auto vars:     Size  Location     Type
 11525 ;;		None
 11526 ;; Return value:  Size  Location     Type
 11527 ;;                  1    wreg      void 
 11528 ;; Registers used:
 11529 ;;		None
 11530 ;; Tracked objects:
 11531 ;;		On entry : 0/0
 11532 ;;		On exit  : 0/0
 11533 ;;		Unchanged: 0/0
 11534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;Total ram usage:        0 bytes
 11540 ;; Hardware stack levels used:    1
 11541 ;; This function calls:
 11542 ;;		Nothing
 11543 ;; This function is called by:
 11544 ;;		_i2c_busCollisionISR
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           
 11549                           ;psect for function _i2c1_driver_clearBusCollision
 11550  0A0F                     _i2c1_driver_clearBusCollision:	
 11551                           
 11552                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 11553                           
 11554                           ;incstack = 0
 11555                           ; Regs used in _i2c1_driver_clearBusCollision: []
 11556  0A0F  0020               	movlb	0	; select bank0
 11557  0A10  1111               	bcf	17,2	;volatile
 11558  0A11  0008               	return
 11559  0A12                     __end_of_i2c1_driver_clearBusCollision:	
 11560                           
 11561                           	psect	text61
 11562  0C62                     __ptext61:	
 11563 ;; *************** function _i2c_ISR *****************
 11564 ;; Defined at:
 11565 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;		None
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;		None
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  1    wreg      void 
 11572 ;; Registers used:
 11573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;Total ram usage:        3 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    3
 11586 ;; This function calls:
 11587 ;;		_do_I2C_DO_ACK
 11588 ;;		_do_I2C_DO_ADDRESS_NACK
 11589 ;;		_do_I2C_DO_NACK_RESTART
 11590 ;;		_do_I2C_DO_NACK_STOP
 11591 ;;		_do_I2C_IDLE
 11592 ;;		_do_I2C_RCEN
 11593 ;;		_do_I2C_RESET
 11594 ;;		_do_I2C_RX
 11595 ;;		_do_I2C_SEND_ADR_READ
 11596 ;;		_do_I2C_SEND_ADR_WRITE
 11597 ;;		_do_I2C_SEND_RESTART
 11598 ;;		_do_I2C_SEND_RESTART_READ
 11599 ;;		_do_I2C_SEND_RESTART_WRITE
 11600 ;;		_do_I2C_SEND_STOP
 11601 ;;		_do_I2C_TX
 11602 ;;		_do_I2C_TX_EMPTY
 11603 ;;		_i2c1_driver_isNACK
 11604 ;;		_mssp1_clearIRQ
 11605 ;; This function is called by:
 11606 ;;		_i2c_open
 11607 ;;		_i2c_poller
 11608 ;;		_INTERRUPT_InterruptManager
 11609 ;; This function uses a non-reentrant model
 11610 ;;
 11611                           
 11612                           
 11613                           ;psect for function _i2c_ISR
 11614  0C62                     _i2c_ISR:	
 11615                           
 11616                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 11617                           
 11618                           ;incstack = 0
 11619                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11620  0C62  318A  220C  318C   	fcall	_mssp1_clearIRQ
 11621                           
 11622                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 11623  0C65  0023               	movlb	3	; select bank3
 11624  0C66  1DA0               	btfss	_i2c_status^(0+384),3
 11625  0C67  2C72               	goto	i1l4665
 11626  0C68  318A  2290  318C   	fcall	_i2c1_driver_isNACK
 11627  0C6B  1C03               	btfss	3,0
 11628  0C6C  2C72               	goto	i1l4665
 11629                           
 11630                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 11631  0C6D  300F               	movlw	15
 11632  0C6E  00F9               	movwf	??_i2c_ISR
 11633  0C6F  0879               	movf	??_i2c_ISR,w
 11634  0C70  0023               	movlb	3	; select bank3
 11635  0C71  00A9               	movwf	(_i2c_status^(0+384)+9)
 11636  0C72                     i1l4665:	
 11637                           
 11638                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 11639  0C72  0023               	movlb	3	; select bank3
 11640  0C73  0829               	movf	(_i2c_status^(0+384)+9),w
 11641  0C74  00F9               	movwf	??_i2c_ISR
 11642  0C75  01FA               	clrf	??_i2c_ISR+1
 11643  0C76  35F9               	lslf	??_i2c_ISR,f
 11644  0C77  0DFA               	rlf	??_i2c_ISR+1,f
 11645  0C78  3000               	movlw	low (_fsmStateTable| (0+32768))
 11646  0C79  0779               	addwf	??_i2c_ISR,w
 11647  0C7A  0084               	movwf	4
 11648  0C7B  3090               	movlw	high (_fsmStateTable| (0+32768))
 11649  0C7C  3D7A               	addwfc	??_i2c_ISR+1,w
 11650  0C7D  0085               	movwf	5
 11651  0C7E  3F01               	moviw [1]fsr0
 11652  0C7F  008A               	movwf	10
 11653  0C80  3F00               	moviw [0]fsr0
 11654  0C81  000A               	callw
 11655  0C82  318C               	pagesel	$
 11656  0C83  00FB               	movwf	??_i2c_ISR+2
 11657  0C84  087B               	movf	??_i2c_ISR+2,w
 11658  0C85  0023               	movlb	3	; select bank3
 11659  0C86  00A9               	movwf	(_i2c_status^(0+384)+9)
 11660  0C87  0008               	return
 11661  0C88                     __end_of_i2c_ISR:	
 11662                           
 11663                           	psect	text62
 11664  0A0C                     __ptext62:	
 11665 ;; *************** function _mssp1_clearIRQ *****************
 11666 ;; Defined at:
 11667 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;		None
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;		None
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  1    wreg      void 
 11674 ;; Registers used:
 11675 ;;		None
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;Total ram usage:        0 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; This function calls:
 11688 ;;		Nothing
 11689 ;; This function is called by:
 11690 ;;		_i2c_ISR
 11691 ;;		_i2c_open
 11692 ;;		_i2c_close
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           
 11697                           ;psect for function _mssp1_clearIRQ
 11698  0A0C                     _mssp1_clearIRQ:	
 11699                           
 11700                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 11701                           
 11702                           ;incstack = 0
 11703                           ; Regs used in _mssp1_clearIRQ: []
 11704  0A0C  0020               	movlb	0	; select bank0
 11705  0A0D  1191               	bcf	17,3	;volatile
 11706  0A0E  0008               	return
 11707  0A0F                     __end_of_mssp1_clearIRQ:	
 11708                           
 11709                           	psect	text63
 11710  0ED2                     __ptext63:	
 11711 ;; *************** function _do_I2C_RX *****************
 11712 ;; Defined at:
 11713 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 11714 ;; Parameters:    Size  Location     Type
 11715 ;;		None
 11716 ;; Auto vars:     Size  Location     Type
 11717 ;;		None
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  1    wreg      enum E7120
 11720 ;; Registers used:
 11721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;Total ram usage:        3 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; Hardware stack levels required when called:    2
 11734 ;; This function calls:
 11735 ;;		_do_I2C_DO_NACK_RESTART
 11736 ;;		_do_I2C_DO_NACK_STOP
 11737 ;;		_i2c1_driver_sendACK
 11738 ;;		_returnReset
 11739 ;;		_returnStop
 11740 ;;		i1_i2c1_driver_getRXData
 11741 ;; This function is called by:
 11742 ;;		_i2c_ISR
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function _do_I2C_RX
 11748  0ED2                     _do_I2C_RX:	
 11749                           
 11750                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 11751                           
 11752                           ;incstack = 0
 11753                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11754  0ED2  318A  2206  318E   	fcall	i1_i2c1_driver_getRXData
 11755  0ED5  00F6               	movwf	??_do_I2C_RX
 11756  0ED6  0023               	movlb	3	; select bank3
 11757  0ED7  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 11758  0ED8  0086               	movwf	6
 11759  0ED9  0187               	clrf	7
 11760  0EDA  0876               	movf	??_do_I2C_RX,w
 11761  0EDB  0081               	movwf	1
 11762  0EDC  3001               	movlw	1
 11763  0EDD  00F6               	movwf	??_do_I2C_RX
 11764  0EDE  0876               	movf	??_do_I2C_RX,w
 11765  0EDF  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 11766                           
 11767                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 11768  0EE0  3001               	movlw	1
 11769  0EE1  02A3               	subwf	(_i2c_status^(0+384)+3),f
 11770  0EE2  3000               	movlw	0
 11771  0EE3  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 11772  0EE4  0823               	movf	(_i2c_status^(0+384)+3),w
 11773  0EE5  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 11774  0EE6  1903               	btfsc	3,2
 11775  0EE7  2EEC               	goto	i1l173
 11776                           
 11777                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 11778  0EE8  318A  2230         	fcall	_i2c1_driver_sendACK
 11779                           
 11780                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 11781  0EEA  3005               	movlw	5
 11782  0EEB  0008               	return
 11783  0EEC                     i1l173:	
 11784                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 11785                           
 11786                           
 11787                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 11788  0EEC  1520               	bsf	_i2c_status^(0+384),2
 11789                           
 11790                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 11791  0EED  2EF4               	goto	i1l4227
 11792  0EEE                     i1l4217:	
 11793                           
 11794                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 11795  0EEE  318A  2250         	fcall	_do_I2C_DO_NACK_RESTART
 11796  0EF0  0008               	return
 11797  0EF1                     i1l4221:	
 11798                           
 11799                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 11800  0EF1  318A  224C         	fcall	_do_I2C_DO_NACK_STOP
 11801  0EF3  0008               	return
 11802  0EF4                     i1l4227:	
 11803  0EF4  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 11804  0EF5  00F6               	movwf	??_do_I2C_RX
 11805  0EF6  0876               	movf	??_do_I2C_RX,w
 11806  0EF7  00F6               	movwf	returnReset@p
 11807  0EF8  300B               	movlw	11
 11808  0EF9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11809  0EFA  0086               	movwf	6
 11810  0EFB  3001               	movlw	1	; select bank3/4
 11811  0EFC  0087               	movwf	7
 11812  0EFD  3F41               	moviw [1]fsr1
 11813  0EFE  008A               	movwf	10
 11814  0EFF  3F40               	moviw [0]fsr1
 11815  0F00  000A               	callw
 11816  0F01  318E               	pagesel	$
 11817  0F02  00F7               	movwf	??_do_I2C_RX+1
 11818  0F03  01F8               	clrf	??_do_I2C_RX+2
 11819                           
 11820                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11821                           ; Switch size 1, requested type "simple"
 11822                           ; Number of cases is 1, Range of values is 0 to 0
 11823                           ; switch strategies available:
 11824                           ; Name         Instructions Cycles
 11825                           ; simple_byte            4     3 (average)
 11826                           ; direct_byte            8     6 (fixed)
 11827                           ; jumptable            260     6 (fixed)
 11828                           ;	Chosen strategy is simple_byte
 11829  0F04  0878               	movf	??_do_I2C_RX+2,w
 11830  0F05  3A00               	xorlw	0	; case 0
 11831  0F06  1903               	skipnz
 11832  0F07  2F09               	goto	i1l6667
 11833  0F08  2EF1               	goto	i1l4221
 11834  0F09                     i1l6667:	
 11835                           
 11836                           ; Switch size 1, requested type "simple"
 11837                           ; Number of cases is 4, Range of values is 1 to 4
 11838                           ; switch strategies available:
 11839                           ; Name         Instructions Cycles
 11840                           ; simple_byte           13     7 (average)
 11841                           ; direct_byte           17     9 (fixed)
 11842                           ; jumptable            263     9 (fixed)
 11843                           ;	Chosen strategy is simple_byte
 11844  0F09  0877               	movf	??_do_I2C_RX+1,w
 11845  0F0A  3A01               	xorlw	1	; case 1
 11846  0F0B  1903               	skipnz
 11847  0F0C  2EF1               	goto	i1l4221
 11848  0F0D  3A03               	xorlw	3	; case 2
 11849  0F0E  1903               	skipnz
 11850  0F0F  2EEE               	goto	i1l4217
 11851  0F10  3A01               	xorlw	1	; case 3
 11852  0F11  1903               	skipnz
 11853  0F12  2EEE               	goto	i1l4217
 11854  0F13  3A07               	xorlw	7	; case 4
 11855  0F14  1903               	skipnz
 11856  0F15  2EF1               	goto	i1l4221
 11857  0F16  2EF1               	goto	i1l4221
 11858  0F17  0008               	return
 11859  0F18                     __end_of_do_I2C_RX:	
 11860                           
 11861                           	psect	text64
 11862  0F62                     __ptext64:	
 11863 ;; *************** function _do_I2C_TX *****************
 11864 ;; Defined at:
 11865 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      enum E7120
 11872 ;; Registers used:
 11873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        3 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    2
 11886 ;; This function calls:
 11887 ;;		_do_I2C_SEND_RESTART_READ
 11888 ;;		_do_I2C_SEND_RESTART_WRITE
 11889 ;;		_do_I2C_SEND_STOP
 11890 ;;		_i2c1_driver_isNACK
 11891 ;;		_returnReset
 11892 ;;		_returnStop
 11893 ;;		i1_i2c1_driver_TXData
 11894 ;; This function is called by:
 11895 ;;		_i2c_ISR
 11896 ;; This function uses a non-reentrant model
 11897 ;;
 11898                           
 11899                           
 11900                           ;psect for function _do_I2C_TX
 11901  0F62                     _do_I2C_TX:	
 11902                           
 11903                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 11904                           
 11905                           ;incstack = 0
 11906                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11907  0F62  318A  2290  318F   	fcall	_i2c1_driver_isNACK
 11908  0F65  1803               	btfsc	3,0
 11909  0F66  2F71               	goto	i1l4187
 11910  0F67  2F95               	goto	i1l157
 11911  0F68                     i1l4173:	
 11912                           
 11913                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 11914  0F68  318A  2238         	fcall	_do_I2C_SEND_RESTART_READ
 11915  0F6A  0008               	return
 11916  0F6B                     i1l4177:	
 11917                           
 11918                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 11919  0F6B  318A  223C         	fcall	_do_I2C_SEND_RESTART_WRITE
 11920  0F6D  0008               	return
 11921  0F6E                     i1l4181:	
 11922                           
 11923                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 11924  0F6E  318A  2244         	fcall	_do_I2C_SEND_STOP
 11925  0F70  0008               	return
 11926  0F71                     i1l4187:	
 11927  0F71  0023               	movlb	3	; select bank3
 11928  0F72  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 11929  0F73  00F6               	movwf	??_do_I2C_TX
 11930  0F74  0876               	movf	??_do_I2C_TX,w
 11931  0F75  00F6               	movwf	returnReset@p
 11932  0F76  3011               	movlw	17
 11933  0F77  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11934  0F78  0086               	movwf	6
 11935  0F79  3001               	movlw	1	; select bank3/4
 11936  0F7A  0087               	movwf	7
 11937  0F7B  3F41               	moviw [1]fsr1
 11938  0F7C  008A               	movwf	10
 11939  0F7D  3F40               	moviw [0]fsr1
 11940  0F7E  000A               	callw
 11941  0F7F  318F               	pagesel	$
 11942  0F80  00F7               	movwf	??_do_I2C_TX+1
 11943  0F81  01F8               	clrf	??_do_I2C_TX+2
 11944                           
 11945                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11946                           ; Switch size 1, requested type "simple"
 11947                           ; Number of cases is 1, Range of values is 0 to 0
 11948                           ; switch strategies available:
 11949                           ; Name         Instructions Cycles
 11950                           ; simple_byte            4     3 (average)
 11951                           ; direct_byte            8     6 (fixed)
 11952                           ; jumptable            260     6 (fixed)
 11953                           ;	Chosen strategy is simple_byte
 11954  0F82  0878               	movf	??_do_I2C_TX+2,w
 11955  0F83  3A00               	xorlw	0	; case 0
 11956  0F84  1903               	skipnz
 11957  0F85  2F87               	goto	i1l6669
 11958  0F86  2F6E               	goto	i1l4181
 11959  0F87                     i1l6669:	
 11960                           
 11961                           ; Switch size 1, requested type "simple"
 11962                           ; Number of cases is 4, Range of values is 1 to 4
 11963                           ; switch strategies available:
 11964                           ; Name         Instructions Cycles
 11965                           ; simple_byte           13     7 (average)
 11966                           ; direct_byte           17     9 (fixed)
 11967                           ; jumptable            263     9 (fixed)
 11968                           ;	Chosen strategy is simple_byte
 11969  0F87  0877               	movf	??_do_I2C_TX+1,w
 11970  0F88  3A01               	xorlw	1	; case 1
 11971  0F89  1903               	skipnz
 11972  0F8A  2F6E               	goto	i1l4181
 11973  0F8B  3A03               	xorlw	3	; case 2
 11974  0F8C  1903               	skipnz
 11975  0F8D  2F68               	goto	i1l4173
 11976  0F8E  3A01               	xorlw	1	; case 3
 11977  0F8F  1903               	skipnz
 11978  0F90  2F6B               	goto	i1l4177
 11979  0F91  3A07               	xorlw	7	; case 4
 11980  0F92  1903               	skipnz
 11981  0F93  2F6E               	goto	i1l4181
 11982  0F94  2F6E               	goto	i1l4181
 11983  0F95                     i1l157:	
 11984                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 11985                           
 11986                           
 11987                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 11988  0F95  0023               	movlb	3	; select bank3
 11989  0F96  11A0               	bcf	_i2c_status^(0+384),3
 11990                           
 11991                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 11992  0F97  3002               	movlw	2
 11993  0F98  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11994  0F99  0086               	movwf	6
 11995  0F9A  3001               	movlw	1	; select bank3/4
 11996  0F9B  0087               	movwf	7
 11997  0F9C  3F40               	moviw [0]fsr1
 11998  0F9D  0084               	movwf	4
 11999  0F9E  0185               	clrf	5
 12000  0F9F  0A81               	incf	1,f
 12001  0FA0  0800               	movf	0,w
 12002  0FA1  318A  2258  318F   	fcall	i1_i2c1_driver_TXData
 12003                           
 12004                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 12005  0FA4  3001               	movlw	1
 12006  0FA5  0023               	movlb	3	; select bank3
 12007  0FA6  02A3               	subwf	(_i2c_status^(0+384)+3),f
 12008  0FA7  3000               	movlw	0
 12009  0FA8  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 12010  0FA9  0823               	movf	(_i2c_status^(0+384)+3),w
 12011  0FAA  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 12012  0FAB  1D03               	btfss	3,2
 12013  0FAC  2FAF               	goto	i1l4195
 12014  0FAD  3006               	movlw	6
 12015  0FAE  0008               	return
 12016  0FAF                     i1l4195:	
 12017  0FAF  3003               	movlw	3
 12018  0FB0  0008               	return
 12019  0FB1                     __end_of_do_I2C_TX:	
 12020                           
 12021                           	psect	text65
 12022  0D76                     __ptext65:	
 12023 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 12024 ;; Defined at:
 12025 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;		None
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  1    wreg      enum E7120
 12032 ;; Registers used:
 12033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;Total ram usage:        3 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    2
 12046 ;; This function calls:
 12047 ;;		_do_I2C_SEND_RESTART
 12048 ;;		_do_I2C_SEND_STOP
 12049 ;;		_returnReset
 12050 ;;		_returnStop
 12051 ;; This function is called by:
 12052 ;;		_i2c_ISR
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           
 12057                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 12058  0D76                     _do_I2C_DO_ADDRESS_NACK:	
 12059                           
 12060                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 12061                           
 12062                           ;incstack = 0
 12063                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12064  0D76  0023               	movlb	3	; select bank3
 12065  0D77  11A0               	bcf	_i2c_status^(0+384),3
 12066                           
 12067                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 12068  0D78  3002               	movlw	2
 12069  0D79  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 12070  0D7A  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 12071  0D7B  00AA               	movwf	(_i2c_status^(0+384)+10)
 12072                           
 12073                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 12074  0D7C  2D83               	goto	i1l4161
 12075  0D7D                     i1l4151:	
 12076                           
 12077                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 12078  0D7D  318A  2240         	fcall	_do_I2C_SEND_RESTART
 12079  0D7F  0008               	return
 12080  0D80                     i1l4155:	
 12081                           
 12082                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 12083  0D80  318A  2244         	fcall	_do_I2C_SEND_STOP
 12084  0D82  0008               	return
 12085  0D83                     i1l4161:	
 12086  0D83  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 12087  0D84  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 12088  0D85  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 12089  0D86  00F6               	movwf	returnReset@p
 12090  0D87  300F               	movlw	15
 12091  0D88  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12092  0D89  0086               	movwf	6
 12093  0D8A  3001               	movlw	1	; select bank3/4
 12094  0D8B  0087               	movwf	7
 12095  0D8C  3F41               	moviw [1]fsr1
 12096  0D8D  008A               	movwf	10
 12097  0D8E  3F40               	moviw [0]fsr1
 12098  0D8F  000A               	callw
 12099  0D90  318D               	pagesel	$
 12100  0D91  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 12101  0D92  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 12102                           
 12103                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12104                           ; Switch size 1, requested type "simple"
 12105                           ; Number of cases is 1, Range of values is 0 to 0
 12106                           ; switch strategies available:
 12107                           ; Name         Instructions Cycles
 12108                           ; simple_byte            4     3 (average)
 12109                           ; direct_byte            8     6 (fixed)
 12110                           ; jumptable            260     6 (fixed)
 12111                           ;	Chosen strategy is simple_byte
 12112  0D93  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 12113  0D94  3A00               	xorlw	0	; case 0
 12114  0D95  1903               	skipnz
 12115  0D96  2D98               	goto	i1l6671
 12116  0D97  2D80               	goto	i1l4155
 12117  0D98                     i1l6671:	
 12118                           
 12119                           ; Switch size 1, requested type "simple"
 12120                           ; Number of cases is 2, Range of values is 2 to 3
 12121                           ; switch strategies available:
 12122                           ; Name         Instructions Cycles
 12123                           ; simple_byte            7     4 (average)
 12124                           ; direct_byte           13     9 (fixed)
 12125                           ; jumptable            263     9 (fixed)
 12126                           ;	Chosen strategy is simple_byte
 12127  0D98  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 12128  0D99  3A02               	xorlw	2	; case 2
 12129  0D9A  1903               	skipnz
 12130  0D9B  2D7D               	goto	i1l4151
 12131  0D9C  3A01               	xorlw	1	; case 3
 12132  0D9D  1903               	skipnz
 12133  0D9E  2D7D               	goto	i1l4151
 12134  0D9F  2D80               	goto	i1l4155
 12135  0DA0  0008               	return
 12136  0DA1                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 12137                           
 12138                           	psect	text66
 12139  0A50                     __ptext66:	
 12140 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 12141 ;; Defined at:
 12142 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 12143 ;; Parameters:    Size  Location     Type
 12144 ;;		None
 12145 ;; Auto vars:     Size  Location     Type
 12146 ;;		None
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  1    wreg      enum E7120
 12149 ;; Registers used:
 12150 ;;		wreg, status,2, status,0, pclath, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;Total ram usage:        0 bytes
 12161 ;; Hardware stack levels used:    1
 12162 ;; Hardware stack levels required when called:    1
 12163 ;; This function calls:
 12164 ;;		i1_i2c1_driver_sendNACK
 12165 ;; This function is called by:
 12166 ;;		_do_I2C_RX
 12167 ;;		_i2c_ISR
 12168 ;; This function uses a non-reentrant model
 12169 ;;
 12170                           
 12171                           
 12172                           ;psect for function _do_I2C_DO_NACK_RESTART
 12173  0A50                     _do_I2C_DO_NACK_RESTART:	
 12174                           
 12175                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 12176                           
 12177                           ;incstack = 0
 12178                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12179  0A50  318A  2234         	fcall	i1_i2c1_driver_sendNACK
 12180                           
 12181                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 12182  0A52  3009               	movlw	9
 12183  0A53  0008               	return
 12184  0A54                     __end_of_do_I2C_DO_NACK_RESTART:	
 12185                           
 12186                           	psect	text67
 12187  0A4C                     __ptext67:	
 12188 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 12189 ;; Defined at:
 12190 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;		None
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;		None
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  1    wreg      enum E7120
 12197 ;; Registers used:
 12198 ;;		wreg, status,2, status,0, pclath, cstack
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;Total ram usage:        0 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; Hardware stack levels required when called:    1
 12211 ;; This function calls:
 12212 ;;		i1_i2c1_driver_sendNACK
 12213 ;; This function is called by:
 12214 ;;		_do_I2C_RX
 12215 ;;		_i2c_ISR
 12216 ;; This function uses a non-reentrant model
 12217 ;;
 12218                           
 12219                           
 12220                           ;psect for function _do_I2C_DO_NACK_STOP
 12221  0A4C                     _do_I2C_DO_NACK_STOP:	
 12222                           
 12223                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 12224                           
 12225                           ;incstack = 0
 12226                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 12227  0A4C  318A  2234         	fcall	i1_i2c1_driver_sendNACK
 12228                           
 12229                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 12230  0A4E  300A               	movlw	10
 12231  0A4F  0008               	return
 12232  0A50                     __end_of_do_I2C_DO_NACK_STOP:	
 12233                           
 12234                           	psect	text68
 12235  0A48                     __ptext68:	
 12236 ;; *************** function _do_I2C_DO_ACK *****************
 12237 ;; Defined at:
 12238 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;		None
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;		None
 12243 ;; Return value:  Size  Location     Type
 12244 ;;                  1    wreg      enum E7120
 12245 ;; Registers used:
 12246 ;;		wreg, status,2, status,0, pclath, cstack
 12247 ;; Tracked objects:
 12248 ;;		On entry : 0/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;Total ram usage:        0 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    1
 12259 ;; This function calls:
 12260 ;;		_i2c1_driver_sendACK
 12261 ;; This function is called by:
 12262 ;;		_i2c_ISR
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           
 12267                           ;psect for function _do_I2C_DO_ACK
 12268  0A48                     _do_I2C_DO_ACK:	
 12269                           
 12270                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 12274  0A48  318A  2230         	fcall	_i2c1_driver_sendACK
 12275                           
 12276                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 12277  0A4A  3005               	movlw	5
 12278  0A4B  0008               	return
 12279  0A4C                     __end_of_do_I2C_DO_ACK:	
 12280                           
 12281                           	psect	text69
 12282  0A62                     __ptext69:	
 12283 ;; *************** function _do_I2C_RCEN *****************
 12284 ;; Defined at:
 12285 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 12286 ;; Parameters:    Size  Location     Type
 12287 ;;		None
 12288 ;; Auto vars:     Size  Location     Type
 12289 ;;		None
 12290 ;; Return value:  Size  Location     Type
 12291 ;;                  1    wreg      enum E7120
 12292 ;; Registers used:
 12293 ;;		wreg, status,2, status,0, pclath, cstack
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;Total ram usage:        0 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    1
 12306 ;; This function calls:
 12307 ;;		i1_i2c1_driver_startRX
 12308 ;; This function is called by:
 12309 ;;		_i2c_ISR
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           
 12314                           ;psect for function _do_I2C_RCEN
 12315  0A62                     _do_I2C_RCEN:	
 12316                           
 12317                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 12318                           
 12319                           ;incstack = 0
 12320                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12321  0A62  0023               	movlb	3	; select bank3
 12322  0A63  11A0               	bcf	_i2c_status^(0+384),3
 12323                           
 12324                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 12325  0A64  318A  2203         	fcall	i1_i2c1_driver_startRX
 12326                           
 12327                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 12328  0A66  3004               	movlw	4
 12329  0A67  0008               	return
 12330  0A68                     __end_of_do_I2C_RCEN:	
 12331                           
 12332                           	psect	text70
 12333  0A7B                     __ptext70:	
 12334 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 12335 ;; Defined at:
 12336 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;		None
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      enum E7120
 12343 ;; Registers used:
 12344 ;;		wreg, status,2, status,0, pclath, cstack
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;Total ram usage:        0 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    1
 12357 ;; This function calls:
 12358 ;;		i1_i2c1_driver_TXData
 12359 ;; This function is called by:
 12360 ;;		_i2c_ISR
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           
 12365                           ;psect for function _do_I2C_SEND_ADR_WRITE
 12366  0A7B                     _do_I2C_SEND_ADR_WRITE:	
 12367                           
 12368                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 12369                           
 12370                           ;incstack = 0
 12371                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12372  0A7B  0023               	movlb	3	; select bank3
 12373  0A7C  15A0               	bsf	_i2c_status^(0+384),3
 12374                           
 12375                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 12376  0A7D  3521               	lslf	(_i2c_status^(0+384)+1),w
 12377  0A7E  318A  2258         	fcall	i1_i2c1_driver_TXData
 12378                           
 12379                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 12380  0A80  3003               	movlw	3
 12381  0A81  0008               	return
 12382  0A82                     __end_of_do_I2C_SEND_ADR_WRITE:	
 12383                           
 12384                           	psect	text71
 12385  0A98                     __ptext71:	
 12386 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 12387 ;; Defined at:
 12388 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;		None
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;		None
 12393 ;; Return value:  Size  Location     Type
 12394 ;;                  1    wreg      enum E7120
 12395 ;; Registers used:
 12396 ;;		wreg, status,2, status,0, pclath, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;Total ram usage:        0 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    1
 12409 ;; This function calls:
 12410 ;;		i1_i2c1_driver_TXData
 12411 ;; This function is called by:
 12412 ;;		_i2c_ISR
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           
 12417                           ;psect for function _do_I2C_SEND_ADR_READ
 12418  0A98                     _do_I2C_SEND_ADR_READ:	
 12419                           
 12420                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 12421                           
 12422                           ;incstack = 0
 12423                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12424  0A98  0023               	movlb	3	; select bank3
 12425  0A99  15A0               	bsf	_i2c_status^(0+384),3
 12426                           
 12427                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 12428  0A9A  1403               	setc
 12429  0A9B  0D21               	rlf	(_i2c_status^(0+384)+1),w
 12430  0A9C  318A  2258         	fcall	i1_i2c1_driver_TXData
 12431                           
 12432                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 12433  0A9E  3005               	movlw	5
 12434  0A9F  0008               	return
 12435  0AA0                     __end_of_do_I2C_SEND_ADR_READ:	
 12436                           
 12437                           	psect	text72
 12438  0A44                     __ptext72:	
 12439 ;; *************** function _do_I2C_SEND_STOP *****************
 12440 ;; Defined at:
 12441 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 12442 ;; Parameters:    Size  Location     Type
 12443 ;;		None
 12444 ;; Auto vars:     Size  Location     Type
 12445 ;;		None
 12446 ;; Return value:  Size  Location     Type
 12447 ;;                  1    wreg      enum E7120
 12448 ;; Registers used:
 12449 ;;		wreg, status,2, status,0, pclath, cstack
 12450 ;; Tracked objects:
 12451 ;;		On entry : 0/0
 12452 ;;		On exit  : 0/0
 12453 ;;		Unchanged: 0/0
 12454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;Total ram usage:        0 bytes
 12460 ;; Hardware stack levels used:    1
 12461 ;; Hardware stack levels required when called:    1
 12462 ;; This function calls:
 12463 ;;		i1_i2c1_driver_stop
 12464 ;; This function is called by:
 12465 ;;		_do_I2C_DO_ADDRESS_NACK
 12466 ;;		_do_I2C_TX
 12467 ;;		_do_I2C_TX_EMPTY
 12468 ;;		_i2c_ISR
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           
 12473                           ;psect for function _do_I2C_SEND_STOP
 12474  0A44                     _do_I2C_SEND_STOP:	
 12475                           
 12476                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 12480  0A44  318A  2200         	fcall	i1_i2c1_driver_stop
 12481                           
 12482                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 12483  0A46  3000               	movlw	0
 12484  0A47  0008               	return
 12485  0A48                     __end_of_do_I2C_SEND_STOP:	
 12486                           
 12487                           	psect	text73
 12488  0A40                     __ptext73:	
 12489 ;; *************** function _do_I2C_SEND_RESTART *****************
 12490 ;; Defined at:
 12491 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;		None
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;		None
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  1    wreg      enum E7120
 12498 ;; Registers used:
 12499 ;;		wreg, status,2, status,0, pclath, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:        0 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    1
 12512 ;; This function calls:
 12513 ;;		i1_i2c1_driver_restart
 12514 ;; This function is called by:
 12515 ;;		_do_I2C_DO_ADDRESS_NACK
 12516 ;;		_do_I2C_TX_EMPTY
 12517 ;;		_i2c_ISR
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           
 12522                           ;psect for function _do_I2C_SEND_RESTART
 12523  0A40                     _do_I2C_SEND_RESTART:	
 12524                           
 12525                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12529  0A40  3189  21FD         	fcall	i1_i2c1_driver_restart
 12530                           
 12531                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 12532  0A42  3001               	movlw	1
 12533  0A43  0008               	return
 12534  0A44                     __end_of_do_I2C_SEND_RESTART:	
 12535                           
 12536                           	psect	text74
 12537  0A3C                     __ptext74:	
 12538 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 12539 ;; Defined at:
 12540 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;		None
 12545 ;; Return value:  Size  Location     Type
 12546 ;;                  1    wreg      enum E7120
 12547 ;; Registers used:
 12548 ;;		wreg, status,2, status,0, pclath, cstack
 12549 ;; Tracked objects:
 12550 ;;		On entry : 0/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;Total ram usage:        0 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    1
 12561 ;; This function calls:
 12562 ;;		i1_i2c1_driver_restart
 12563 ;; This function is called by:
 12564 ;;		_do_I2C_TX
 12565 ;;		_i2c_ISR
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           
 12570                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 12571  0A3C                     _do_I2C_SEND_RESTART_WRITE:	
 12572                           
 12573                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12577  0A3C  3189  21FD         	fcall	i1_i2c1_driver_restart
 12578                           
 12579                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 12580  0A3E  3002               	movlw	2
 12581  0A3F  0008               	return
 12582  0A40                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 12583                           
 12584                           	psect	text75
 12585  0A38                     __ptext75:	
 12586 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 12587 ;; Defined at:
 12588 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;		None
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;		None
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  1    wreg      enum E7120
 12595 ;; Registers used:
 12596 ;;		wreg, status,2, status,0, pclath, cstack
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;Total ram usage:        0 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    1
 12609 ;; This function calls:
 12610 ;;		i1_i2c1_driver_restart
 12611 ;; This function is called by:
 12612 ;;		_do_I2C_TX
 12613 ;;		_i2c_ISR
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _do_I2C_SEND_RESTART_READ
 12619  0A38                     _do_I2C_SEND_RESTART_READ:	
 12620                           
 12621                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12625  0A38  3189  21FD         	fcall	i1_i2c1_driver_restart
 12626                           
 12627                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 12628  0A3A  3001               	movlw	1
 12629  0A3B  0008               	return
 12630  0A3C                     __end_of_do_I2C_SEND_RESTART_READ:	
 12631                           
 12632                           	psect	text76
 12633  0A5D                     __ptext76:	
 12634 ;; *************** function _do_I2C_IDLE *****************
 12635 ;; Defined at:
 12636 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 12637 ;; Parameters:    Size  Location     Type
 12638 ;;		None
 12639 ;; Auto vars:     Size  Location     Type
 12640 ;;		None
 12641 ;; Return value:  Size  Location     Type
 12642 ;;                  1    wreg      enum E7120
 12643 ;; Registers used:
 12644 ;;		wreg, status,2
 12645 ;; Tracked objects:
 12646 ;;		On entry : 0/0
 12647 ;;		On exit  : 0/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;Total ram usage:        0 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; This function calls:
 12657 ;;		Nothing
 12658 ;; This function is called by:
 12659 ;;		_i2c_ISR
 12660 ;; This function uses a non-reentrant model
 12661 ;;
 12662                           
 12663                           
 12664                           ;psect for function _do_I2C_IDLE
 12665  0A5D                     _do_I2C_IDLE:	
 12666                           
 12667                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 12668                           
 12669                           ;incstack = 0
 12670                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 12671  0A5D  0023               	movlb	3	; select bank3
 12672  0A5E  1020               	bcf	_i2c_status^(0+384),0
 12673                           
 12674                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 12675  0A5F  01AA               	clrf	(_i2c_status^(0+384)+10)
 12676                           
 12677                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 12678  0A60  300E               	movlw	14
 12679  0A61  0008               	return
 12680  0A62                     __end_of_do_I2C_IDLE:	
 12681                           
 12682                           	psect	text77
 12683  0A74                     __ptext77:	
 12684 ;; *************** function _do_I2C_RESET *****************
 12685 ;; Defined at:
 12686 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 12687 ;; Parameters:    Size  Location     Type
 12688 ;;		None
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;		None
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  1    wreg      enum E7120
 12693 ;; Registers used:
 12694 ;;		wreg, status,2, status,0, pclath, cstack
 12695 ;; Tracked objects:
 12696 ;;		On entry : 0/0
 12697 ;;		On exit  : 0/0
 12698 ;;		Unchanged: 0/0
 12699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;Total ram usage:        0 bytes
 12705 ;; Hardware stack levels used:    1
 12706 ;; Hardware stack levels required when called:    1
 12707 ;; This function calls:
 12708 ;;		_i2c1_driver_resetBus
 12709 ;; This function is called by:
 12710 ;;		_i2c_ISR
 12711 ;; This function uses a non-reentrant model
 12712 ;;
 12713                           
 12714                           
 12715                           ;psect for function _do_I2C_RESET
 12716  0A74                     _do_I2C_RESET:	
 12717                           
 12718                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 12719                           
 12720                           ;incstack = 0
 12721                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 12722  0A74  3189  21F9         	fcall	_i2c1_driver_resetBus
 12723                           
 12724                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 12725  0A76  0023               	movlb	3	; select bank3
 12726  0A77  1020               	bcf	_i2c_status^(0+384),0
 12727                           
 12728                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 12729  0A78  01AA               	clrf	(_i2c_status^(0+384)+10)
 12730                           
 12731                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 12732  0A79  300E               	movlw	14
 12733  0A7A  0008               	return
 12734  0A7B                     __end_of_do_I2C_RESET:	
 12735                           
 12736                           	psect	text78
 12737  0DA1                     __ptext78:	
 12738 ;; *************** function _do_I2C_TX_EMPTY *****************
 12739 ;; Defined at:
 12740 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;		None
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;		None
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  1    wreg      enum E7120
 12747 ;; Registers used:
 12748 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12749 ;; Tracked objects:
 12750 ;;		On entry : 0/0
 12751 ;;		On exit  : 0/0
 12752 ;;		Unchanged: 0/0
 12753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;Total ram usage:        3 bytes
 12759 ;; Hardware stack levels used:    1
 12760 ;; Hardware stack levels required when called:    2
 12761 ;; This function calls:
 12762 ;;		_do_I2C_SEND_RESTART
 12763 ;;		_do_I2C_SEND_STOP
 12764 ;;		_mssp1_setIRQ
 12765 ;;		_returnReset
 12766 ;;		_returnStop
 12767 ;; This function is called by:
 12768 ;;		_i2c_ISR
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           
 12773                           ;psect for function _do_I2C_TX_EMPTY
 12774  0DA1                     _do_I2C_TX_EMPTY:	
 12775                           
 12776                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 12777                           
 12778                           ;incstack = 0
 12779                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12780  0DA1  0023               	movlb	3	; select bank3
 12781  0DA2  1520               	bsf	_i2c_status^(0+384),2
 12782                           
 12783                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 12784  0DA3  2DAE               	goto	i1l4253
 12785  0DA4                     i1l4237:	
 12786                           
 12787                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 12788  0DA4  318A  2240         	fcall	_do_I2C_SEND_RESTART
 12789  0DA6  0008               	return
 12790  0DA7                     i1l4241:	
 12791                           
 12792                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 12793  0DA7  318A  2209         	fcall	_mssp1_setIRQ
 12794                           
 12795                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 12796  0DA9  3003               	movlw	3
 12797  0DAA  0008               	return
 12798  0DAB                     i1l4247:	
 12799                           
 12800                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 12801  0DAB  318A  2244         	fcall	_do_I2C_SEND_STOP
 12802  0DAD  0008               	return
 12803  0DAE                     i1l4253:	
 12804  0DAE  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 12805  0DAF  00F6               	movwf	??_do_I2C_TX_EMPTY
 12806  0DB0  0876               	movf	??_do_I2C_TX_EMPTY,w
 12807  0DB1  00F6               	movwf	returnReset@p
 12808  0DB2  300B               	movlw	11
 12809  0DB3  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12810  0DB4  0086               	movwf	6
 12811  0DB5  3001               	movlw	1	; select bank3/4
 12812  0DB6  0087               	movwf	7
 12813  0DB7  3F41               	moviw [1]fsr1
 12814  0DB8  008A               	movwf	10
 12815  0DB9  3F40               	moviw [0]fsr1
 12816  0DBA  000A               	callw
 12817  0DBB  318D               	pagesel	$
 12818  0DBC  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 12819  0DBD  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 12820                           
 12821                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12822                           ; Switch size 1, requested type "simple"
 12823                           ; Number of cases is 1, Range of values is 0 to 0
 12824                           ; switch strategies available:
 12825                           ; Name         Instructions Cycles
 12826                           ; simple_byte            4     3 (average)
 12827                           ; direct_byte            8     6 (fixed)
 12828                           ; jumptable            260     6 (fixed)
 12829                           ;	Chosen strategy is simple_byte
 12830  0DBE  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 12831  0DBF  3A00               	xorlw	0	; case 0
 12832  0DC0  1903               	skipnz
 12833  0DC1  2DC3               	goto	i1l6673
 12834  0DC2  2DAB               	goto	i1l4247
 12835  0DC3                     i1l6673:	
 12836                           
 12837                           ; Switch size 1, requested type "simple"
 12838                           ; Number of cases is 4, Range of values is 1 to 4
 12839                           ; switch strategies available:
 12840                           ; Name         Instructions Cycles
 12841                           ; simple_byte           13     7 (average)
 12842                           ; direct_byte           17     9 (fixed)
 12843                           ; jumptable            263     9 (fixed)
 12844                           ;	Chosen strategy is simple_byte
 12845  0DC3  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 12846  0DC4  3A01               	xorlw	1	; case 1
 12847  0DC5  1903               	skipnz
 12848  0DC6  2DAB               	goto	i1l4247
 12849  0DC7  3A03               	xorlw	3	; case 2
 12850  0DC8  1903               	skipnz
 12851  0DC9  2DA4               	goto	i1l4237
 12852  0DCA  3A01               	xorlw	1	; case 3
 12853  0DCB  1903               	skipnz
 12854  0DCC  2DA4               	goto	i1l4237
 12855  0DCD  3A07               	xorlw	7	; case 4
 12856  0DCE  1903               	skipnz
 12857  0DCF  2DA7               	goto	i1l4241
 12858  0DD0  2DAB               	goto	i1l4247
 12859  0DD1  0008               	return
 12860  0DD2                     __end_of_do_I2C_TX_EMPTY:	
 12861                           
 12862                           	psect	text79
 12863  0A09                     __ptext79:	
 12864 ;; *************** function _mssp1_setIRQ *****************
 12865 ;; Defined at:
 12866 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 12867 ;; Parameters:    Size  Location     Type
 12868 ;;		None
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;		None
 12871 ;; Return value:  Size  Location     Type
 12872 ;;                  1    wreg      void 
 12873 ;; Registers used:
 12874 ;;		None
 12875 ;; Tracked objects:
 12876 ;;		On entry : 0/0
 12877 ;;		On exit  : 0/0
 12878 ;;		Unchanged: 0/0
 12879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12884 ;;Total ram usage:        0 bytes
 12885 ;; Hardware stack levels used:    1
 12886 ;; This function calls:
 12887 ;;		Nothing
 12888 ;; This function is called by:
 12889 ;;		_do_I2C_TX_EMPTY
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           
 12894                           ;psect for function _mssp1_setIRQ
 12895  0A09                     _mssp1_setIRQ:	
 12896                           
 12897                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 12898                           
 12899                           ;incstack = 0
 12900                           ; Regs used in _mssp1_setIRQ: []
 12901  0A09  0020               	movlb	0	; select bank0
 12902  0A0A  1591               	bsf	17,3	;volatile
 12903  0A0B  0008               	return
 12904  0A0C                     __end_of_mssp1_setIRQ:	
 12905                           
 12906                           	psect	text80
 12907  0A90                     __ptext80:	
 12908 ;; *************** function _i2c1_driver_isNACK *****************
 12909 ;; Defined at:
 12910 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;		None
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;		None
 12915 ;; Return value:  Size  Location     Type
 12916 ;;		None               void
 12917 ;; Registers used:
 12918 ;;		wreg, status,2, status,0
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;Total ram usage:        1 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; This function calls:
 12931 ;;		Nothing
 12932 ;; This function is called by:
 12933 ;;		_do_I2C_TX
 12934 ;;		_i2c_ISR
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function _i2c1_driver_isNACK
 12940  0A90                     _i2c1_driver_isNACK:	
 12941                           
 12942                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 12943                           
 12944                           ;incstack = 0
 12945                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 12946  0A90  0024               	movlb	4	; select bank4
 12947  0A91  0E16               	swapf	22,w	;volatile
 12948  0A92  0C89               	rrf	9,f
 12949  0A93  0C89               	rrf	9,f
 12950  0A94  3901               	andlw	1
 12951  0A95  00F6               	movwf	??_i2c1_driver_isNACK
 12952  0A96  0C76               	rrf	??_i2c1_driver_isNACK,w
 12953  0A97  0008               	return
 12954  0A98                     __end_of_i2c1_driver_isNACK:	
 12955                           
 12956                           	psect	text81
 12957  0A58                     __ptext81:	
 12958 ;; *************** function i1_i2c1_driver_TXData *****************
 12959 ;; Defined at:
 12960 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 12961 ;; Parameters:    Size  Location     Type
 12962 ;;  d               1    wreg     unsigned char 
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;  d               1    0[COMMON] unsigned char 
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  1    wreg      void 
 12967 ;; Registers used:
 12968 ;;		wreg
 12969 ;; Tracked objects:
 12970 ;;		On entry : 0/0
 12971 ;;		On exit  : 0/0
 12972 ;;		Unchanged: 0/0
 12973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;Total ram usage:        1 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; This function calls:
 12981 ;;		Nothing
 12982 ;; This function is called by:
 12983 ;;		_do_I2C_SEND_ADR_READ
 12984 ;;		_do_I2C_SEND_ADR_WRITE
 12985 ;;		_do_I2C_TX
 12986 ;; This function uses a non-reentrant model
 12987 ;;
 12988                           
 12989                           
 12990                           ;psect for function i1_i2c1_driver_TXData
 12991  0A58                     i1_i2c1_driver_TXData:	
 12992                           
 12993                           ;incstack = 0
 12994                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 12995                           ;i1i2c1_driver_TXData@d stored from wreg
 12996  0A58  00F6               	movwf	i1i2c1_driver_TXData@d
 12997                           
 12998                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 12999  0A59  0876               	movf	i1i2c1_driver_TXData@d,w
 13000  0A5A  0024               	movlb	4	; select bank4
 13001  0A5B  0091               	movwf	17	;volatile
 13002  0A5C  0008               	return
 13003  0A5D                     __end_ofi1_i2c1_driver_TXData:	
 13004                           
 13005                           	psect	text82
 13006  0A06                     __ptext82:	
 13007 ;; *************** function i1_i2c1_driver_getRXData *****************
 13008 ;; Defined at:
 13009 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;		None
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;		None
 13014 ;; Return value:  Size  Location     Type
 13015 ;;                  1    wreg      unsigned char 
 13016 ;; Registers used:
 13017 ;;		wreg
 13018 ;; Tracked objects:
 13019 ;;		On entry : 0/0
 13020 ;;		On exit  : 0/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:        0 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; This function calls:
 13030 ;;		Nothing
 13031 ;; This function is called by:
 13032 ;;		_do_I2C_RX
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           
 13037                           ;psect for function i1_i2c1_driver_getRXData
 13038  0A06                     i1_i2c1_driver_getRXData:	
 13039                           
 13040                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 13044  0A06  0024               	movlb	4	; select bank4
 13045  0A07  0811               	movf	17,w	;volatile
 13046  0A08  0008               	return
 13047  0A09                     __end_ofi1_i2c1_driver_getRXData:	
 13048                           
 13049                           	psect	text83
 13050  0A34                     __ptext83:	
 13051 ;; *************** function i1_i2c1_driver_sendNACK *****************
 13052 ;; Defined at:
 13053 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 13054 ;; Parameters:    Size  Location     Type
 13055 ;;		None
 13056 ;; Auto vars:     Size  Location     Type
 13057 ;;		None
 13058 ;; Return value:  Size  Location     Type
 13059 ;;                  1    wreg      void 
 13060 ;; Registers used:
 13061 ;;		None
 13062 ;; Tracked objects:
 13063 ;;		On entry : 0/0
 13064 ;;		On exit  : 0/0
 13065 ;;		Unchanged: 0/0
 13066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;Total ram usage:        0 bytes
 13072 ;; Hardware stack levels used:    1
 13073 ;; This function calls:
 13074 ;;		Nothing
 13075 ;; This function is called by:
 13076 ;;		_do_I2C_DO_NACK_STOP
 13077 ;;		_do_I2C_DO_NACK_RESTART
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           
 13082                           ;psect for function i1_i2c1_driver_sendNACK
 13083  0A34                     i1_i2c1_driver_sendNACK:	
 13084                           
 13085                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in i1_i2c1_driver_sendNACK: []
 13089  0A34  0024               	movlb	4	; select bank4
 13090  0A35  1696               	bsf	22,5	;volatile
 13091                           
 13092                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 13093  0A36  1616               	bsf	22,4	;volatile
 13094  0A37  0008               	return
 13095  0A38                     __end_ofi1_i2c1_driver_sendNACK:	
 13096                           
 13097                           	psect	text84
 13098  09F9                     __ptext84:	
 13099 ;; *************** function _i2c1_driver_resetBus *****************
 13100 ;; Defined at:
 13101 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 13102 ;; Parameters:    Size  Location     Type
 13103 ;;		None
 13104 ;; Auto vars:     Size  Location     Type
 13105 ;;		None
 13106 ;; Return value:  Size  Location     Type
 13107 ;;                  1    wreg      void 
 13108 ;; Registers used:
 13109 ;;		None
 13110 ;; Tracked objects:
 13111 ;;		On entry : 0/0
 13112 ;;		On exit  : 0/0
 13113 ;;		Unchanged: 0/0
 13114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;Total ram usage:        0 bytes
 13120 ;; Hardware stack levels used:    1
 13121 ;; This function calls:
 13122 ;;		Nothing
 13123 ;; This function is called by:
 13124 ;;		_do_I2C_RESET
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           
 13129                           ;psect for function _i2c1_driver_resetBus
 13130  09F9                     _i2c1_driver_resetBus:	
 13131                           
 13132                           ;incstack = 0
 13133                           ; Regs used in _i2c1_driver_resetBus: []
 13134  09F9  0008               	return
 13135  09FA                     __end_of_i2c1_driver_resetBus:	
 13136                           
 13137                           	psect	text85
 13138  0A03                     __ptext85:	
 13139 ;; *************** function i1_i2c1_driver_startRX *****************
 13140 ;; Defined at:
 13141 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		None
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        0 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; This function calls:
 13162 ;;		Nothing
 13163 ;; This function is called by:
 13164 ;;		_do_I2C_RCEN
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           
 13169                           ;psect for function i1_i2c1_driver_startRX
 13170  0A03                     i1_i2c1_driver_startRX:	
 13171                           
 13172                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 13173                           
 13174                           ;incstack = 0
 13175                           ; Regs used in i1_i2c1_driver_startRX: []
 13176  0A03  0024               	movlb	4	; select bank4
 13177  0A04  1596               	bsf	22,3	;volatile
 13178  0A05  0008               	return
 13179  0A06                     __end_ofi1_i2c1_driver_startRX:	
 13180                           
 13181                           	psect	text86
 13182  0002                     __ptext86:	
 13183 ;; *************** function _returnReset *****************
 13184 ;; Defined at:
 13185 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;  p               1    0[COMMON] PTR void 
 13188 ;;		 -> NULL(0), 
 13189 ;; Auto vars:     Size  Location     Type
 13190 ;;		None
 13191 ;; Return value:  Size  Location     Type
 13192 ;;                  1    wreg      enum E6966
 13193 ;; Registers used:
 13194 ;;		wreg
 13195 ;; Tracked objects:
 13196 ;;		On entry : 0/0
 13197 ;;		On exit  : 0/0
 13198 ;;		Unchanged: 0/0
 13199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13200 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;Total ram usage:        1 bytes
 13205 ;; Hardware stack levels used:    1
 13206 ;; This function calls:
 13207 ;;		Nothing
 13208 ;; This function is called by:
 13209 ;;		_i2c_open
 13210 ;;		_do_I2C_DO_ADDRESS_NACK
 13211 ;;		_do_I2C_TX
 13212 ;;		_do_I2C_RX
 13213 ;;		_do_I2C_TX_EMPTY
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           
 13218                           ;psect for function _returnReset
 13219  0002                     _returnReset:	
 13220                           
 13221                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 13222                           
 13223                           ;incstack = 0
 13224                           ; Regs used in _returnReset: [wreg]
 13225  0002  3005               	movlw	5
 13226  0003  0008               	return
 13227  0004                     __end_of_returnReset:	
 13228                           
 13229                           	psect	text87
 13230  09FB                     __ptext87:	
 13231 ;; *************** function _returnStop *****************
 13232 ;; Defined at:
 13233 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  p               1    0[COMMON] PTR void 
 13236 ;;		 -> NULL(0), 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;		None
 13239 ;; Return value:  Size  Location     Type
 13240 ;;                  1    wreg      enum E6966
 13241 ;; Registers used:
 13242 ;;		wreg
 13243 ;; Tracked objects:
 13244 ;;		On entry : 0/0
 13245 ;;		On exit  : 0/0
 13246 ;;		Unchanged: 0/0
 13247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13248 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;Total ram usage:        1 bytes
 13253 ;; Hardware stack levels used:    1
 13254 ;; This function calls:
 13255 ;;		Nothing
 13256 ;; This function is called by:
 13257 ;;		_i2c_open
 13258 ;;		_setCallBack
 13259 ;;		_do_I2C_DO_ADDRESS_NACK
 13260 ;;		_do_I2C_TX
 13261 ;;		_do_I2C_RX
 13262 ;;		_do_I2C_TX_EMPTY
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           
 13267                           ;psect for function _returnStop
 13268  09FB                     _returnStop:	
 13269                           
 13270                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 13271                           
 13272                           ;incstack = 0
 13273                           ; Regs used in _returnStop: [wreg]
 13274  09FB  3001               	movlw	1
 13275  09FC  0008               	return
 13276  09FD                     __end_of_returnStop:	
 13277                           
 13278                           	psect	text88
 13279  0A00                     __ptext88:	
 13280 ;; *************** function i1_i2c1_driver_stop *****************
 13281 ;; Defined at:
 13282 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 13283 ;; Parameters:    Size  Location     Type
 13284 ;;		None
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;		None
 13287 ;; Return value:  Size  Location     Type
 13288 ;;                  1    wreg      void 
 13289 ;; Registers used:
 13290 ;;		None
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        0 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; This function calls:
 13303 ;;		Nothing
 13304 ;; This function is called by:
 13305 ;;		_do_I2C_SEND_STOP
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           
 13310                           ;psect for function i1_i2c1_driver_stop
 13311  0A00                     i1_i2c1_driver_stop:	
 13312                           
 13313                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 13314                           
 13315                           ;incstack = 0
 13316                           ; Regs used in i1_i2c1_driver_stop: []
 13317  0A00  0024               	movlb	4	; select bank4
 13318  0A01  1516               	bsf	22,2	;volatile
 13319  0A02  0008               	return
 13320  0A03                     __end_ofi1_i2c1_driver_stop:	
 13321                           
 13322                           	psect	text89
 13323  09FD                     __ptext89:	
 13324 ;; *************** function i1_i2c1_driver_restart *****************
 13325 ;; Defined at:
 13326 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;		None
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;		None
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  1    wreg      void 
 13333 ;; Registers used:
 13334 ;;		None
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;Total ram usage:        0 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; This function calls:
 13347 ;;		Nothing
 13348 ;; This function is called by:
 13349 ;;		_do_I2C_SEND_RESTART_READ
 13350 ;;		_do_I2C_SEND_RESTART_WRITE
 13351 ;;		_do_I2C_SEND_RESTART
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           
 13356                           ;psect for function i1_i2c1_driver_restart
 13357  09FD                     i1_i2c1_driver_restart:	
 13358                           
 13359                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 13360                           
 13361                           ;incstack = 0
 13362                           ; Regs used in i1_i2c1_driver_restart: []
 13363  09FD  0024               	movlb	4	; select bank4
 13364  09FE  1496               	bsf	22,1	;volatile
 13365  09FF  0008               	return
 13366  0A00                     __end_ofi1_i2c1_driver_restart:	
 13367                           
 13368                           	psect	text90
 13369  0A30                     __ptext90:	
 13370 ;; *************** function _i2c1_driver_sendACK *****************
 13371 ;; Defined at:
 13372 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;		None
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;		None
 13377 ;; Return value:  Size  Location     Type
 13378 ;;                  1    wreg      void 
 13379 ;; Registers used:
 13380 ;;		None
 13381 ;; Tracked objects:
 13382 ;;		On entry : 0/0
 13383 ;;		On exit  : 0/0
 13384 ;;		Unchanged: 0/0
 13385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;Total ram usage:        0 bytes
 13391 ;; Hardware stack levels used:    1
 13392 ;; This function calls:
 13393 ;;		Nothing
 13394 ;; This function is called by:
 13395 ;;		_do_I2C_DO_ACK
 13396 ;;		_do_I2C_RX
 13397 ;;		_I2C_Send_ACK
 13398 ;; This function uses a non-reentrant model
 13399 ;;
 13400                           
 13401                           
 13402                           ;psect for function _i2c1_driver_sendACK
 13403  0A30                     _i2c1_driver_sendACK:	
 13404                           
 13405                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 13406                           
 13407                           ;incstack = 0
 13408                           ; Regs used in _i2c1_driver_sendACK: []
 13409  0A30  0024               	movlb	4	; select bank4
 13410  0A31  1296               	bcf	22,5	;volatile
 13411                           
 13412                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 13413  0A32  1616               	bsf	22,4	;volatile
 13414  0A33  0008               	return
 13415  0A34                     __end_of_i2c1_driver_sendACK:	
 13416                           
 13417                           	psect	text91
 13418  09F8                     __ptext91:	
 13419 ;; *************** function _PIN_MANAGER_IOC *****************
 13420 ;; Defined at:
 13421 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;		None
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;		None
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  1    wreg      void 
 13428 ;; Registers used:
 13429 ;;		None
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;Total ram usage:        0 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; This function calls:
 13442 ;;		Nothing
 13443 ;; This function is called by:
 13444 ;;		_INTERRUPT_InterruptManager
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _PIN_MANAGER_IOC
 13450  09F8                     _PIN_MANAGER_IOC:	
 13451                           
 13452                           ;incstack = 0
 13453                           ; Regs used in _PIN_MANAGER_IOC: []
 13454  09F8  0008               	return
 13455  09F9                     __end_of_PIN_MANAGER_IOC:	
 13456  007E                     btemp	set	126	;btemp
 13457  007E                     int$flags	set	126
 13458  007E                     wtemp0	set	126


Data Sizes:
    Strings     86
    Constant    32
    Data        1
    BSS         122
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     66      66
    BANK2            80     64      64
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2098	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_11(CODE[11]), STR_10(CODE[16]), STR_9(CODE[13]), STR_8(CODE[12]), 
		 -> STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[6]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_11(CODE[11]), STR_10(CODE[16]), STR_9(CODE[13]), STR_8(CODE[12]), 
		 -> STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[6]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_11(CODE[11]), STR_10(CODE[16]), STR_9(CODE[13]), STR_8(CODE[12]), 
		 -> STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[6]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   88279
                                             64 BANK1      2     2      0
                      _Display_Clear
                       _Display_Name
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8984
                                             59 BANK0      1     1      0
                      _Display_Clear
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    7486
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5314
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1846
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2    1436
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _SPI2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _SPI2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Clear
       _SPI_Write
         _SPI2_Exchange8bit
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      42       7       82.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 31 16:43:49 2019

                          returnReset@p 0076                   ?_setGestureExitThresh 0076  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 0A40                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                             __CFG_LVP$ON 0000  
                                   l604 0E97                                     l903 02C7  
                                   l907 02F0        processGestureData@ud_ratio_first 0031  
                                   l908 0308                                     l941 03DB  
                                   l933 03A7                                     l861 0071  
                                   l953 042E                                     l945 03F8  
                                   l929 038A                                     l890 027A  
                                   l884 022C                                     l965 047D  
                                   l957 044B                                     l896 02A8  
                                   l888 0255                                     l969 049A  
                          __CFG_CPD$OFF 0000                   __end_of_decodeGesture 04AB  
                  __size_of_I2C_ReStart 0003                 __size_of_PMD_Initialize 0008  
                    I2C_Write_Byte@Byte 0023                   __size_of_do_I2C_RESET 0007  
                                   wreg 0009                      i1_i2c1_driver_stop 0A00  
                                  l1032 0BD0                                    l1062 0AF3  
                                  l1241 0BEC                                    l6001 0CEE  
                                  l6017 0B2F                                    l5403 0B1C  
                                  l6027 0B42                                    l6117 0E02  
                                  l5309 0AF8                                    l6045 0E34  
                                  l5431 0FBF                                    l6135 0CAD  
                                  l5335 0BE6                                    l6063 0E66  
                                  l5281 0AC6                                    l5441 0FE4  
                                  l6145 0ADA                                    l6321 0731  
                                  l5417 0B99                                    l5361 0795  
                                  l5513 006D                                    l6401 06D6  
                                  l6081 0CD4                                    l5275 0BD3  
                                  l5427 0FBD                                    l5419 0BA5  
                                  l5371 079D                                    l5355 078A  
                                  l5603 0276                                    l5515 00C7  
                                  l6411 06F3                                    l6325 0733  
                                  l5701 03B4                                    l5373 07A9  
                                  l5613 029C                                    l5621 02AA  
                                  l6405 06DF                                    l5447 0FF0  
                                  l5439 0FD7                                    l5383 07C4  
                                  l5631 02EB                                    l5543 00DE  
                                  l6415 06FB                                    l5449 0FF1  
                                  l5713 03F3                                    l5625 02C2  
                                  l5561 01CD                                    l5529 00E2  
                                  l5481 0F28                                    l6409 06EB  
                                  l6417 0718                                    l6193 04C0  
                                  l6099 07FA                                    l6339 072F  
                                  l5731 0446                                    l5387 07CC  
                                  l5379 07BB                                    l5571 01F2  
                                  l5547 012C                                    l5483 0F57  
                                  l5709 03D6                                    l5653 0328  
                                  l5565 01DF                                    l5493 0060  
                                  l6189 04BE                                    l5727 0429  
                                  l5719 0405                                    l5671 0349  
                                  l5663 033D                                    l5591 0250  
                                  l5575 0204                                    l5567 01E2  
                                  l5903 0682                                    l6391 06C0  
                                  l5745 0478                                    l5737 0458  
                                  l5681 035D                                    l5665 033F  
                                  l5585 0227                                    l5577 0207  
                                  l5497 0062                                    l6481 0C31  
                                  l5755 04A7                                    l5691 0385  
                                  l5683 0363                                    l5675 0351  
                                  l5659 0333                                    l6387 06B0  
                                  l5845 0E7A                                    l5749 0495  
                                  l5677 0353                                    l5669 0347  
                                  l6397 06CA                                    l6389 06B8  
                                  l5695 03A2                                    l5759 04A9  
                                  l5599 026E                                    l5863 0685  
                                  l6665 0704                                    l5859 05D0  
                                  l5885 060A                                    l5877 05E7  
                                  l5869 05D4                                    l5981 0D15  
                                  l5957 0B68                                    l5967 0B55  
                                  l5897 0618                                    l5977 0D13  
                                  l5899 0679                                    l5997 0CEC  
                                  STR_1 1054                                    STR_2 1073  
                                  STR_3 1060                                    STR_4 106A  
                                  STR_5 105A                                    STR_6 1065  
                                  STR_7 106F                                    STR_8 103D  
                                  STR_9 1030                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u4115 07A0                                    u5005 0469  
                                  u5015 0486                                    u4135 07AA  
                                  u4055 0BED                                    u5025 04A4  
                                  u4145 07B4                                    u4065 0BF2  
                                  u4234 0FD0                                    u4235 0FCF  
                                  u4155 07BC                                    u4244 0FDC  
                                  u4245 0FDB                                    u5125 0613  
                                  u5055 0E84                                    u5135 0622  
                                  u5315 0DE3                                    u5155 0D35  
                                  _PMD0 0911                                    u4605 0283  
                                  u4525 0218                                    u4365 007C  
                                  u4285 0F31                                    u5165 0D5E  
                                  _PMD1 0912                                    _PMD2 0913  
                                  u4615 028F                                    u4535 0235  
                                  u5255 0E15                                    _PMD3 0914  
                                  _PMD4 0915                                    u4545 0241  
                                  u4465 01C6                                    _PMD5 0916  
                                  u4555 025E                                    u4475 01D7  
                                  u5275 0E47                                    u4725 0311  
                                  u4485 01EB                                    u4495 01FC  
                                  u4905 03C7                                    u4665 02B3  
                                  u4915 03E4                                    u4675 02D0  
                                  u4925 0402                                    u4685 02DC  
                                  u4855 0376                                    u4695 02F9  
                                  u4865 0393                                    u5817 0689  
                                  u4955 041A                                    u4875 03B1  
                                  u5827 069B                                    u5837 0B02  
                                  u4965 0437                    ?_do_I2C_SEND_RESTART 0076  
                                  u5847 0B8E                                    u4975 0455  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000       __size_of_do_I2C_SEND_RESTART_READ 0004  
                   ?i1_i2c1_driver_stop 0076               ?_do_I2C_SEND_RESTART_READ 0076  
                                  _main 0C1D                                    _name 006F  
             __size_of_do_I2C_SEND_STOP 0004                  __size_of_do_I2C_DO_ACK 0004  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                   ??_setGestureIntEnable 002A  
                      __end_of_I2C_Stop 0A30                           __CFG_BOREN$ON 0000  
               i1_i2c1_driver_getRXData 0A06                   ?_do_I2C_SEND_ADR_READ 0076  
                         __CFG_BORV$LOW 0000         ??_i2c1_driver_clearBusCollision 0076  
                                  start 002B                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 0C88                ??_do_I2C_DO_NACK_RESTART 0076  
                          ?_readGesture 004F                            _do_I2C_RESET 0A74  
        __size_of_OSCILLATOR_Initialize 0008           __end_of_OSCILLATOR_Initialize 0AA8  
                  ??i1_i2c1_driver_stop 0076                __end_of_i2c1_driver_open 0AC3  
                                 ?_main 0076                         __end_of___awdiv 07D1  
              __end_of_i2c1_driver_stop 0A2D                                   STR_10 1020  
                                 STR_11 1049                         ___awdiv@divisor 0026  
            __end_of_i2c1_driver_TXData 0A6E                          __CFG_DEBUG$OFF 0000  
                                 i1l157 0F95                                   i1l173 0EEC  
                                 i1l253 0029                                   i1l245 0010  
                                 i1l248 001E                            ?_setLEDBoost 0076  
                       ___awdiv@counter 002B                            ?_setLEDDrive 0076  
                        _setGestureGain 0E04                                   _OSCEN 091D  
                    wireReadDataBlock@j 0030                          _setGestureMode 0C88  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E             __end_of_setProxIntLowThresh 0B6A  
                       __end_of_getMode 0AB9                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 09F9              __end_of_i2c1_driver_isNACK 0A98  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 0A54  
                      _b_i2c_error_flag 0072            __end_of_setProxIntHighThresh 0B57  
            ?_do_I2C_SEND_RESTART_WRITE 0076                   ??_do_I2C_SEND_RESTART 0076  
                       __end_of_setMode 1000                       __end_of_I2C_Start 0A2A  
                                 pclath 000A                 __size_of_mssp1_clearIRQ 0003  
                  i1_i2c1_driver_TXData 0A58            __size_of_setAmbientLightGain 001E  
                ?_do_I2C_SEND_ADR_WRITE 0076                  __size_of_I2C_Send_NACK 0003  
                                 status 0003                                   wtemp0 007E  
                    __size_of_SPI_Write 0015                ?_setLightIntLowThreshold 002A  
            __end_of_setGestureLEDDrive 0E68                   setGestureWaitTime@val 002C  
                         _fsmStateTable 1000                           _gesture_data_ 0220  
                       __initialization 002D                  ??_setGestureExitThresh 002A  
                     _SPI2_Exchange8bit 0AEB              processGestureData@lr_delta 004B  
                            _i2c_status 01A0                            __end_of_main 0C3E  
                     _handleGestureFlag 0073              processGestureData@ud_delta 0049  
                    ?_SPI2_Exchange8bit 0076             ?_INTERRUPT_InterruptManager 0076  
                __end_of_setGestureGain 0E36               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0CAF                           _do_I2C_DO_ACK 0A48  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 0A58                 ?_do_I2C_DO_ADDRESS_NACK 0076  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0E9B                    __size_of_enablePower 000E  
                      ___awdiv@dividend 0028                      _processGestureData 0052  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
          setProxIntLowThresh@threshold 002B                   ?i1_i2c1_driver_TXData 0076  
                                _RC2PPS 0EA2                                  _RB5PPS 0E9D  
                                _RB6PPS 0E9E                                  _RB7PPS 0E9F  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _ODCONC 028E                                  i1l4221 0EF1  
                                i1l4151 0D7D                                  i1l4241 0DA7  
                                i1l4161 0D83                                  i1l4217 0EEE  
                                i1l4155 0D80                                  i1l4227 0EF4  
                                i1l4237 0DA4                                  i1l4253 0DAE  
                                i1l4181 0F6E                                  i1l4173 0F68  
                                i1l4247 0DAB                                  i1l4177 0F6B  
                                i1l4195 0FAF                                  i1l4187 0F71  
                                i1l4665 0C72               ??i1_i2c1_driver_getRXData 0076  
                                i1l6671 0D98                                  i1l6673 0DC3  
                                i1l6667 0F09                                  i1l6669 0F87  
                      _wireReadDataByte 0C3E                                  _OSCFRQ 091F  
               ?_resetGestureParameters 0076                  ??_do_I2C_SEND_ADR_READ 0076  
                                _WDTCON 0097                               ??_i2c_ISR 0079  
                   ?_processGestureData 0076                       _gesture_lr_delta_ 0068  
                        __CFG_PWRTE$OFF 0000           setProxIntHighThresh@threshold 002B  
             __end_of_SPI2_Exchange8bit 0AFA                       _gesture_lr_count_ 0064  
                   wireReadDataByte@reg 0027                   _i2c1_driver_getRXData 0A1B  
                   wireReadDataByte@val 0028                       _gesture_ud_delta_ 006A  
           __end_of_do_I2C_DO_NACK_STOP 0A50                           _I2C_Read_Byte 0AC3  
            __end_of_isGestureAvailable 0B1E                       _gesture_ud_count_ 0066  
                                ___wmul 0BE3                               ??___awdiv 002A  
 __end_of_i2c1_driver_clearBusCollision 0A12  __size_of_i2c1_driver_clearBusCollision 0003  
         _i2c1_driver_clearBusCollision 0A0F              __end_of_setGestureWaitTime 0CD6  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0004  
                                _button 0075                        ___awdiv@quotient 002D  
                        ?_do_I2C_DO_ACK 0076                         ?_setGestureGain 0076  
                         _I2C_Send_NACK 0A21                               ??_getMode 0029  
                       ?_setGestureMode 0076                                  _strlen 0B94  
               ??_setGestureEnterThresh 002A                    ??_processGestureData 002F  
                     __end_of_SPI_Write 0B94             __end_of_i2c1_driver_sendACK 0A34  
                        _PMD_Initialize 0AA8          __end_of_do_I2C_DO_ADDRESS_NACK 0DA1  
                             ?_I2C_Stop 0076                      Display_Name@length 0028  
                             ??_setMode 002C                         ?_WDT_Initialize 0076  
           __end_of_i2c1_driver_restart 0A18                            ?_returnReset 0076  
                     readGesture@motion 0053             __end_of_i2c1_driver_startRX 0A21  
                      ?_PIN_MANAGER_IOC 0076          __end_of_resetGestureParameters 0B7F  
                     _SYSTEM_Initialize 0ADC                 __end_of__initialization 004E  
                      _do_I2C_SEND_STOP 0A44                      __size_of_do_I2C_RX 0046  
                    __size_of_do_I2C_TX 004F                      ?_SYSTEM_Initialize 0076  
                setGestureWaitTime@time 002B                __size_of_do_I2C_TX_EMPTY 0031  
                        ?_I2C_Read_Byte 0076                          __pcstackCOMMON 0076  
                          __pidataBANK0 09FA                     ??_SYSTEM_Initialize 0020  
                 i1i2c1_driver_TXData@d 0076                    _setProxIntHighThresh 0B44  
                        _gesture_state_ 005E                          ?_I2C_Send_NACK 0076  
                 i1_i2c1_driver_restart 09FD                  __end_of_PMD_Initialize 0AB0  
                 i1_i2c1_driver_startRX 0A03                    __size_of_readGesture 00EE  
                 __end_of_handleGesture 071B       __size_of_i2c1_driver_isBufferFull 0007  
                            ??_I2C_Stop 0020               ?_i2c1_driver_isBufferFull 0076  
                    _gesture_far_count_ 0060                    __size_of_setLEDBoost 0032  
                  __size_of_setLEDDrive 0029                  _do_I2C_DO_NACK_RESTART 0A50  
                ??i1_i2c1_driver_TXData 0076               __end_of_SYSTEM_Initialize 0AEB  
                     ??_SPI2_Initialize 0020                          _mssp1_clearIRQ 0A0C  
                            __pbssBANK0 005C                              __pbssBANK3 01A0  
                            __pbssBANK4 0220                    wireWriteDataByte@reg 0029  
                  wireWriteDataByte@val 0026                     getMode@enable_value 002A  
              ??i1_i2c1_driver_sendNACK 0076                  ?_i2c1_driver_getRXData 0076  
            __size_of_SPI2_Exchange8bit 000F            __size_of_i2c_busCollisionISR 0003  
                            __pmaintext 0C1D                   __end_of_Display_Clear 0B0B  
                         ??_do_I2C_IDLE 0076                           ??_do_I2C_RCEN 0076  
               setGestureLEDDrive@drive 002D                                 ?___wmul 0020  
                       __CFG_PPS1WAY$ON 0000                         ??_do_I2C_DO_ACK 0076  
          __size_of_enableGestureSensor 0064                              __pintentry 0004  
                 ?_setProxIntHighThresh 0076                 __size_of_I2C_Write_Byte 001C  
                         ??_I2C_ReStart 0020                        _setProximityGain 0D4D  
                           setMode@mode 002F                         ?_PMD_Initialize 0076  
                   _setAmbientLightGain 0BFF                   __size_of_Display_Name 0033  
        ?_i2c1_driver_clearBusCollision 0076                                 ?_strlen 0020  
                     ?_i2c1_driver_open 0076                       __end_of_do_I2C_RX 0F18  
                     __end_of_do_I2C_TX 0FB1                       ?_i2c1_driver_stop 0076  
                     _wireReadDataBlock 0F18                      ??_i2c1_driver_open 0020  
                    ??_i2c1_driver_stop 0020                                 _OSCCON1 0919  
                               _OSCCON3 091B                           ?_mssp1_setIRQ 0076  
                               _OSCTUNE 091E                    wireReadDataBlock@len 0028  
                  wireReadDataBlock@reg 002F                    wireReadDataBlock@val 0026  
                               _SSP1ADD 0212                                 _SSP2ADD 021A  
                               _SLRCONA 030C                                 _SLRCONB 030D  
                               _SLRCONC 030E                                 _SSP1BUF 0211  
                __end_of_mssp1_clearIRQ 0A0F                                 _SSP2BUF 0219  
                    ?_wireReadDataBlock 0026                                 _SSP1MSK 0213  
                     SPI_Write@incoming 0022             __end_of_setGestureIntEnable 07FC  
               ??_do_I2C_SEND_ADR_WRITE 0076         processGestureData@lr_ratio_last 0037  
           ??_do_I2C_SEND_RESTART_WRITE 0076                            readGesture@i 0059  
                    _i2c1_driver_TXData 0A68                    ?_setAmbientLightGain 0076  
                    _i2c1_driver_i2cISR 006C                     ??_wireReadDataBlock 002A  
                               _i2c_ISR 0C62                               _I2C_Start 0A27  
                       ??_I2C_Read_Byte 0021                           setMode@enable 002B  
                    _i2c1_driver_isNACK 0A90                  __size_of_decodeGesture 018E  
                   ?_i2c1_driver_TXData 0076                            _Display_Name 0E68  
                       ??_I2C_Send_NACK 0020                                 ___awdiv 077F  
                       __size_of___wmul 001C                  ?i1_i2c1_driver_restart 0076  
                     ??_do_I2C_TX_EMPTY 0076                     ?_i2c1_driver_isNACK 0076  
                ?i1_i2c1_driver_startRX 0076                __end_of_wireReadDataByte 0C62  
                            _initialize 04AB                                 _getMode 0AB0  
      __size_of_setLightIntLowThreshold 0027                      _setGestureLEDDrive 0E36  
                               __ptext1 04AB                                 __ptext2 0D4D  
                               __ptext3 0B57                                 __ptext4 0B44  
                               __ptext5 0CFD                                 __ptext6 0CD6  
                               __ptext7 0D24                                 __ptext8 0CAF  
                               __ptext9 0E36             __size_ofi1_i2c1_driver_stop 0003  
                   __end_of_do_I2C_IDLE 0A62               __end_of_wireReadDataBlock 0F62  
                   __end_of_do_I2C_RCEN 0A68                         __size_of_strlen 0018  
                 _OSCILLATOR_Initialize 0AA0             __end_of_do_I2C_SEND_RESTART 0A44  
                        ??_mssp1_setIRQ 0076                    ??_i2c1_driver_TXData 0020  
                               _setMode 0FB1                ??_PIN_MANAGER_Initialize 0020  
                   __end_of_I2C_ReStart 0A1B                     ?_setGestureLEDDrive 0076  
                               _printed 006E                         ?_mssp1_clearIRQ 0076  
              _do_I2C_SEND_RESTART_READ 0A38              __size_of_SYSTEM_Initialize 000F  
                               clrloop0 0A6F                    __size_of_returnReset 0002  
                  end_of_initialization 004E                    ??_i2c1_driver_isNACK 0076  
                 ??_setAmbientLightGain 002A            __size_of_setProxIntLowThresh 0013  
          __end_of_i2c1_driver_sendNACK 0800         __size_ofi1_i2c1_driver_sendNACK 0004  
                            ?_I2C_Start 0076           enableGestureSensor@interrupts 0031  
          __end_of_i2c1_driver_resetBus 09FA           setGestureExitThresh@threshold 002B  
                  ??_setGestureLEDDrive 002A                      readGesture@gstatus 0055  
                          initialize@id 0031                        ??_setGestureGain 002A  
                ??_setProxIntHighThresh 002A                        ??_setGestureMode 002A  
             _do_I2C_SEND_RESTART_WRITE 0A3C                     Display_Name@string1 0025  
         __size_of_setGestureExitThresh 0013                                 strlen@a 0023  
                               strlen@s 0020                        ??_WDT_Initialize 0020  
                     _wireWriteDataByte 0BAC                              _returnStop 09FB  
              __end_of_do_I2C_SEND_STOP 0A48                           ??_enablePower 0030  
                    ?_wireWriteDataByte 0026         setLightIntHighThreshold@val_low 002D  
        __size_of_setGestureEnterThresh 0013           __end_of_setGestureEnterThresh 0B31  
                         _decodeGesture 031D                      _isGestureAvailable 0B0B  
                    _setGestureWaitTime 0CAF                               _SPI_Write 0B7F  
                     __size_of_I2C_Stop 0003                             returnStop@p 0076  
                   ??_wireWriteDataByte 0029                        __CFG_FEXTOSC$OFF 0000  
       processGestureData@ud_ratio_last 0035                     ?_isGestureAvailable 0076  
                   ?_setGestureWaitTime 0076                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
      __end_of_i2c1_driver_isBufferFull 0A90                             _do_I2C_IDLE 0A5D  
                           _do_I2C_RCEN 0A62               __end_of_wireWriteDataByte 0BC7  
                        _I2C_Write_Byte 0BC7                    ??_isGestureAvailable 0029  
                        __end_of___wmul 0BFF                    ??_setGestureWaitTime 002A  
                           ?_initialize 0076                             _I2C_ReStart 0A18  
                i1_i2c1_driver_sendNACK 0A34                  ?_OSCILLATOR_Initialize 0076  
              _setLightIntHighThreshold 0CD6              __size_of_wireReadDataBlock 004A  
                       _gesture_motion_ 005C                         _SPI2_Initialize 0A82  
          __size_of_do_I2C_DO_NACK_STOP 0004             __size_of_processGestureData 02CB  
                        ?_decodeGesture 0076                          __end_of_strlen 0BAC  
               ?_do_I2C_DO_NACK_RESTART 0076                     start_initialization 002D  
                    setGestureGain@gain 002D                     _i2c_busCollisionISR 0A12  
       __size_of_PIN_MANAGER_Initialize 0037                ?i1_i2c1_driver_getRXData 0076  
                            ?_SPI_Write 0076        setLightIntHighThreshold@val_high 002E  
                   _enableGestureSensor 071B                     __end_of_enablePower 0ADC  
          __size_of_i2c1_driver_sendACK 0004                 ??_i2c1_driver_getRXData 0020  
              __end_of_setProximityGain 0D76            __size_of_i2c1_driver_restart 0003  
              processGestureData@d_last 0042            __size_of_i2c1_driver_startRX 0003  
              processGestureData@l_last 0043                             ??_I2C_Start 0020  
              processGestureData@r_last 0044                __size_of_PIN_MANAGER_IOC 0001  
              processGestureData@u_last 0041                 _processGestureData$1184 0039  
               _processGestureData$1185 003B                 _processGestureData$1186 003D  
               _processGestureData$1187 003F                    ?_i2c_busCollisionISR 0076  
                      __CFG_LPBOREN$OFF 0000                    __end_of_mssp1_setIRQ 0A0C  
                __end_of_I2C_Write_Byte 0BE3                        ??_PMD_Initialize 0020  
       setLightIntLowThreshold@val_high 002E                                ??___wmul 0024  
                  ?_enableGestureSensor 0076                           ??_readGesture 0051  
                         ?_do_I2C_RESET 0076                             __pdataBANK0 006F  
                    setGestureMode@mode 002B                 _setLightIntLowThreshold 0CFD  
             setGestureIntEnable@enable 002C                setAmbientLightGain@drive 002B  
                           ?_returnStop 0076                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 0A54                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 07FC  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0070  
                             ___latbits 0002                               _adcResult 0074  
                  _i2c1_driver_resetBus 09F9                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
                             _do_I2C_RX 0ED2                               _do_I2C_TX 0F62  
        __size_of_do_I2C_SEND_ADR_WRITE 0007           __size_ofi1_i2c1_driver_TXData 0005  
         __end_of_do_I2C_SEND_ADR_WRITE 0A82                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0076  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0DA1  
                __size_of_handleGesture 006C                   ??_i2c_busCollisionISR 0076  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0E9B  
               ??i1_i2c1_driver_restart 0076                 ??i1_i2c1_driver_startRX 0076  
                       ?_I2C_Write_Byte 0076                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 0A89                          ??_do_I2C_RESET 0076  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0076             _i2c1_driver_busCollisionISR 0070  
                   _setProxIntLowThresh 0B57                   __end_of_do_I2C_DO_ACK 0A4C  
          ??_INTERRUPT_InterruptManager 007C                _i2c1_driver_isBufferFull 0A89  
                              ?_getMode 0076                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0076              ??_do_I2C_SEND_RESTART_READ 0076  
                 ?_i2c1_driver_sendNACK 0076         __end_ofi1_i2c1_driver_getRXData 0A09  
                      ??_mssp1_clearIRQ 0076                             _enablePower 0ACE  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 06AF  
                 ?_i2c1_driver_resetBus 0076      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 0A2D                ??_resetGestureParameters 0020  
                              ?_setMode 002B                              ?_do_I2C_RX 0076  
                            ?_do_I2C_TX 0076                        __CFG_WDTE$SWDTEN 0000  
                           ??_SPI_Write 0021                       _i2c1_driver_start 0A24  
                __size_of_Display_Clear 0011                     __end_of_setLEDBoost 0E04  
                   __end_of_setLEDDrive 0D4D                    ?_setProxIntLowThresh 0076  
                 readGesture@bytes_read 0056                      ?_i2c1_driver_start 0076  
                        ___wmul@product 0024                                _LATCbits 010E  
                   __size_of_returnStop 0002                               clear_ram0 0A6E  
                              _PIE0bits 0090                                _PIE1bits 0091  
          __size_of_setGestureIntEnable 002B                     _gesture_near_count_ 0062  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0027  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 0ACE               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 0A03                       ??_PIN_MANAGER_IOC 0076  
                 __end_of_I2C_Send_NACK 0A24                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                       ___wmul@multiplier 0020  
                     ?_do_I2C_SEND_STOP 0076               processGestureData@d_first 0046  
                         _handleGesture 06AF               __end_of_i2c1_driver_start 0A27  
                         ??_returnReset 0077                      ??_do_I2C_SEND_STOP 0076  
           __size_of_i2c1_driver_TXData 0006             __end_of_setAmbientLightGain 0C1D  
             processGestureData@l_first 0047       __end_of_do_I2C_SEND_RESTART_WRITE 0A40  
               __end_of_do_I2C_TX_EMPTY 0DD2            __end_of_setGestureExitThresh 0B44  
             processGestureData@r_first 0048               processGestureData@u_first 0045  
                 ??_setProxIntLowThresh 002A            __size_of_do_I2C_SEND_RESTART 0004  
           __size_of_i2c1_driver_isNACK 0008                       setGestureGain@val 002C  
                 __size_of_mssp1_setIRQ 0003                     _do_I2C_DO_NACK_STOP 0A4C  
                      __size_of_i2c_ISR 0026              ??_setLightIntHighThreshold 002C  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0076  
                         _Display_Clear 0AFA                            ?_do_I2C_RCEN 0076  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0076  
               ?i1_i2c1_driver_sendNACK 0076                 ??_OSCILLATOR_Initialize 0020  
                   _i2c1_driver_sendACK 0A30                        __size_of___awdiv 0052  
         __size_of_setProxIntHighThresh 0013                             _readGesture 05C1  
       __size_of_do_I2C_DO_ADDRESS_NACK 002B                     i2c1_driver_TXData@d 0020  
                ??_i2c1_driver_sendNACK 0020                            ??_initialize 0030  
                          ?_I2C_ReStart 0076                     _i2c1_driver_restart 0A15  
      setLightIntLowThreshold@threshold 002A                    ?_do_I2C_DO_NACK_STOP 0076  
                   _i2c1_driver_startRX 0A1E                          ?_handleGesture 0076  
          __end_of_do_I2C_SEND_ADR_READ 0AA0                        __size_of_getMode 0009  
                ??_i2c1_driver_resetBus 0076                    readGesture@fifo_data 0120  
                           _setLEDBoost 0DD2                             _setLEDDrive 0D24  
       __size_of_resetGestureParameters 0015                            _mssp1_setIRQ 0A09  
       __end_of_setLightIntLowThreshold 0D24                             ??_do_I2C_RX 0076  
                           ??_do_I2C_TX 0076                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0E04  
                              __ptext11 0B31                                __ptext20 077F  
                              __ptext12 0B1E                                __ptext21 0B0B  
                              __ptext13 0BFF                                __ptext30 0C88  
                              __ptext22 031D                                __ptext14 0AB9  
                              __ptext31 07D1                                __ptext23 0E68  
                              __ptext15 06AF                                __ptext40 0A2D  
                              __ptext32 0B6A                                __ptext24 0B94  
                              __ptext16 05C1                                __ptext41 0A2A  
                              __ptext33 0ACE                                __ptext25 0AFA  
                              __ptext17 0F18                                __ptext50 0A18  
                              __ptext42 0A27                                __ptext34 0FB1  
                              __ptext26 0B7F                                __ptext18 0052  
                              __ptext51 0A15                                __ptext43 0A24  
                              __ptext35 0BAC                                __ptext27 0AEB  
                              __ptext19 0BE3                                __ptext60 0A0F  
                              __ptext52 0ADC                                __ptext44 0A21  
                              __ptext36 0AB0                                __ptext28 071B  
                              __ptext61 0C62                                __ptext53 0A54  
                              __ptext45 07FC                                __ptext37 0C3E  
                              __ptext29 0DD2                                __ptext70 0A7B  
                              __ptext62 0A0C                                __ptext54 0A82  
                              __ptext46 0AC3                                __ptext38 0BC7  
                              __ptext71 0A98                                __ptext63 0ED2  
                              __ptext55 0AA8                                __ptext47 0A1E  
                              __ptext39 0A68                                __ptext80 0A90  
                              __ptext72 0A44                                __ptext64 0F62  
                              __ptext56 0E9B                                __ptext48 0A89  
                              __ptext81 0A58                                __ptext73 0A40  
                              __ptext65 0D76                                __ptext57 0AA0  
                              __ptext49 0A1B                                __ptext90 0A30  
                              __ptext82 0A06                                __ptext74 0A3C  
                              __ptext66 0A50                                __ptext91 09F8  
                              __ptext83 0A34                                __ptext75 0A38  
                              __ptext67 0A4C                                __ptext59 0A12  
                              __ptext84 09F9                                __ptext76 0A5D  
                              __ptext68 0A48                                __ptext85 0A03  
                              __ptext77 0A74                                __ptext69 0A62  
                              __ptext86 0002                                __ptext78 0DA1  
                              __ptext87 09FB                                __ptext79 0A09  
                              __ptext88 0A00                                __ptext89 09FD  
                 _setGestureEnterThresh 0B1E                            _SSP1CON1bits 0215  
                          _SSP1CON2bits 0216          setGestureEnterThresh@threshold 002B  
                          _SSP2CON1bits 021D                    ?_i2c1_driver_sendACK 0076  
                  __end_of_do_I2C_RESET 0A7B                    ?_i2c1_driver_restart 0076  
                   __end_of_returnReset 0004                        _i2c1_driver_open 0AB9  
                      _i2c1_driver_stop 0A2A                           __size_of_main 0021  
                  ?_i2c1_driver_startRX 0076                       ?_setProximityGain 0076  
        __size_of_i2c1_driver_getRXData 0003           __end_of_i2c1_driver_getRXData 0A1E  
                    __end_of_initialize 05C1                      ??_setProximityGain 002A  
      __size_ofi1_i2c1_driver_getRXData 0003                      _decodeGesture$1190 0024  
                    _decodeGesture$1191 0026                      _decodeGesture$1192 0028  
                    _decodeGesture$1193 002A                      _decodeGesture$1194 002C  
                    _decodeGesture$1195 002E                      _decodeGesture$1196 0030  
                    _decodeGesture$1189 0022                          ?_Display_Clear 0076  
        __end_ofi1_i2c1_driver_sendNACK 0A38                                int$flags 007E  
    __end_of_INTERRUPT_InterruptManager 002B              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214             __size_of_isGestureAvailable 0013  
                         Display_Name@i 002A                     setProximityGain@val 002C  
      __end_of_do_I2C_SEND_RESTART_READ 0A3C             __size_of_setGestureWaitTime 0027  
            __end_of_processGestureData 031D                            ??_returnStop 0077  
                          _SSP2STATbits 021C                   ??_do_I2C_DO_NACK_STOP 0076  
               __size_of_setGestureGain 0032                              _INTCONbits 000B  
               __size_of_setGestureMode 0027              __size_of_i2c1_driver_start 0003  
                        __pstringtext10 106F                          __pstringtext11 1073  
                        __pstringtext12 0000                  setAmbientLightGain@val 002C  
                 ??_i2c1_driver_sendACK 0076                        ?_do_I2C_TX_EMPTY 0076  
               __size_of_WDT_Initialize 0004                  _do_I2C_DO_ADDRESS_NACK 0D76  
                              intlevel1 0000                   ??_i2c1_driver_restart 0020  
                 ??_i2c1_driver_startRX 0020                 ?_PIN_MANAGER_Initialize 0076  
                      ??_I2C_Write_Byte 0021                       __CFG_CLKOUTEN$OFF 0000  
                    __end_of_returnStop 09FD                  _resetGestureParameters 0B6A  
            ??_i2c1_driver_isBufferFull 0020                           ?_Display_Name 0025  
        __size_ofi1_i2c1_driver_restart 0003           __end_ofi1_i2c1_driver_restart 0A00  
        __size_ofi1_i2c1_driver_startRX 0003            __end_ofi1_i2c1_driver_TXData 0A5D  
         __end_ofi1_i2c1_driver_startRX 0A06                    _setGestureExitThresh 0B31  
                       ??_handleGesture 005B                           __pstringtext1 1000  
                         __pstringtext2 1030                           __pstringtext3 103D  
                         __pstringtext4 1049                           __pstringtext5 1054  
                         __pstringtext6 105A                           __pstringtext7 1060  
                         __pstringtext8 1065                           __pstringtext9 106A  
                            _SSP1DATPPS 0E21                            ?_enablePower 0076  
                            _SSP2DATPPS 0E1E                              _SSP1CLKPPS 0E20  
                   _setGestureIntEnable 07D1                              _SSP2CLKPPS 0E1D  
                      setLEDBoost@boost 002D                  ?_setGestureEnterThresh 0076  
                           _returnReset 0002          __end_of_PIN_MANAGER_Initialize 0ED2  
           __end_of_i2c_busCollisionISR 0A15               __size_of_wireReadDataByte 0024  
                      setLEDDrive@drive 002D                     processGestureData@i 004D  
                       _PIN_MANAGER_IOC 09F8             __end_of_enableGestureSensor 077F  
                 _do_I2C_SEND_ADR_WRITE 0A7B                    ?_setGestureIntEnable 0076  
                  _do_I2C_SEND_ADR_READ 0A98                         ??_Display_Clear 0023  
      __end_of_setLightIntHighThreshold 0CFD                          ??_Display_Name 0027  
