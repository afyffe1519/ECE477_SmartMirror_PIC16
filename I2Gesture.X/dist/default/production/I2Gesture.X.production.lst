

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 03 07:50:50 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	intentry,global,class=CODE,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	dabs	1,0x7E,2
   125  0000                     
   126                           ; Version 2.05
   127                           ; Generated 20/12/2018 GMT
   128                           ; 
   129                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   130                           ; All rights reserved.
   131                           ; 
   132                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   133                           ; 
   134                           ; Redistribution and use in source and binary forms, with or without modification, are
   135                           ; permitted provided that the following conditions are met:
   136                           ; 
   137                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   138                           ;        conditions and the following disclaimer.
   139                           ; 
   140                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   141                           ;        of conditions and the following disclaimer in the documentation and/or other
   142                           ;        materials provided with the distribution.
   143                           ; 
   144                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   145                           ;        software without specific prior written permission.
   146                           ; 
   147                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   148                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   149                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   150                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   151                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   152                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   153                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   154                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   155                           ; 
   156                           ; 
   157                           ; Code-generator required, PIC16F18345 Definitions
   158                           ; 
   159                           ; SFR Addresses
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0097                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  018E                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  0199                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019A                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019C                     	;# 
   239  019D                     	;# 
   240  019D                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019E                     	;# 
   244  019E                     	;# 
   245  019F                     	;# 
   246  019F                     	;# 
   247  019F                     	;# 
   248  019F                     	;# 
   249  019F                     	;# 
   250  020C                     	;# 
   251  020D                     	;# 
   252  020E                     	;# 
   253  0211                     	;# 
   254  0211                     	;# 
   255  0212                     	;# 
   256  0212                     	;# 
   257  0213                     	;# 
   258  0213                     	;# 
   259  0214                     	;# 
   260  0214                     	;# 
   261  0215                     	;# 
   262  0215                     	;# 
   263  0215                     	;# 
   264  0215                     	;# 
   265  0216                     	;# 
   266  0216                     	;# 
   267  0217                     	;# 
   268  0217                     	;# 
   269  0219                     	;# 
   270  021A                     	;# 
   271  021B                     	;# 
   272  021C                     	;# 
   273  021D                     	;# 
   274  021D                     	;# 
   275  021E                     	;# 
   276  021F                     	;# 
   277  028C                     	;# 
   278  028D                     	;# 
   279  028E                     	;# 
   280  0291                     	;# 
   281  0291                     	;# 
   282  0292                     	;# 
   283  0293                     	;# 
   284  0294                     	;# 
   285  0295                     	;# 
   286  0295                     	;# 
   287  0296                     	;# 
   288  0297                     	;# 
   289  0298                     	;# 
   290  029F                     	;# 
   291  030C                     	;# 
   292  030D                     	;# 
   293  030E                     	;# 
   294  0311                     	;# 
   295  0311                     	;# 
   296  0312                     	;# 
   297  0313                     	;# 
   298  0314                     	;# 
   299  0315                     	;# 
   300  0315                     	;# 
   301  0316                     	;# 
   302  0317                     	;# 
   303  0318                     	;# 
   304  038C                     	;# 
   305  038D                     	;# 
   306  038E                     	;# 
   307  0391                     	;# 
   308  0392                     	;# 
   309  0393                     	;# 
   310  0394                     	;# 
   311  0395                     	;# 
   312  0396                     	;# 
   313  0397                     	;# 
   314  0398                     	;# 
   315  0399                     	;# 
   316  039A                     	;# 
   317  039C                     	;# 
   318  039D                     	;# 
   319  039E                     	;# 
   320  039F                     	;# 
   321  0411                     	;# 
   322  0411                     	;# 
   323  0412                     	;# 
   324  0413                     	;# 
   325  0414                     	;# 
   326  0415                     	;# 
   327  0416                     	;# 
   328  0417                     	;# 
   329  0418                     	;# 
   330  0418                     	;# 
   331  0419                     	;# 
   332  041A                     	;# 
   333  041B                     	;# 
   334  041C                     	;# 
   335  041D                     	;# 
   336  041E                     	;# 
   337  041F                     	;# 
   338  0498                     	;# 
   339  0498                     	;# 
   340  0499                     	;# 
   341  049A                     	;# 
   342  049B                     	;# 
   343  049B                     	;# 
   344  049C                     	;# 
   345  049D                     	;# 
   346  049E                     	;# 
   347  049F                     	;# 
   348  0617                     	;# 
   349  0618                     	;# 
   350  0619                     	;# 
   351  0619                     	;# 
   352  061A                     	;# 
   353  061B                     	;# 
   354  061C                     	;# 
   355  061C                     	;# 
   356  061F                     	;# 
   357  0691                     	;# 
   358  0692                     	;# 
   359  0693                     	;# 
   360  0694                     	;# 
   361  0695                     	;# 
   362  0696                     	;# 
   363  0697                     	;# 
   364  0698                     	;# 
   365  0699                     	;# 
   366  0711                     	;# 
   367  0712                     	;# 
   368  0713                     	;# 
   369  0714                     	;# 
   370  0715                     	;# 
   371  0716                     	;# 
   372  0717                     	;# 
   373  0718                     	;# 
   374  0719                     	;# 
   375  0891                     	;# 
   376  0891                     	;# 
   377  0891                     	;# 
   378  0891                     	;# 
   379  0891                     	;# 
   380  0891                     	;# 
   381  0892                     	;# 
   382  0892                     	;# 
   383  0892                     	;# 
   384  0893                     	;# 
   385  0893                     	;# 
   386  0893                     	;# 
   387  0893                     	;# 
   388  0893                     	;# 
   389  0893                     	;# 
   390  0894                     	;# 
   391  0894                     	;# 
   392  0894                     	;# 
   393  0895                     	;# 
   394  0895                     	;# 
   395  0895                     	;# 
   396  0896                     	;# 
   397  0896                     	;# 
   398  0896                     	;# 
   399  089B                     	;# 
   400  0911                     	;# 
   401  0912                     	;# 
   402  0913                     	;# 
   403  0914                     	;# 
   404  0915                     	;# 
   405  0916                     	;# 
   406  0918                     	;# 
   407  0919                     	;# 
   408  091A                     	;# 
   409  091B                     	;# 
   410  091C                     	;# 
   411  091D                     	;# 
   412  091E                     	;# 
   413  091F                     	;# 
   414  0E0F                     	;# 
   415  0E10                     	;# 
   416  0E11                     	;# 
   417  0E12                     	;# 
   418  0E13                     	;# 
   419  0E14                     	;# 
   420  0E15                     	;# 
   421  0E16                     	;# 
   422  0E17                     	;# 
   423  0E18                     	;# 
   424  0E19                     	;# 
   425  0E1A                     	;# 
   426  0E1B                     	;# 
   427  0E1C                     	;# 
   428  0E1D                     	;# 
   429  0E1E                     	;# 
   430  0E1F                     	;# 
   431  0E20                     	;# 
   432  0E21                     	;# 
   433  0E22                     	;# 
   434  0E24                     	;# 
   435  0E25                     	;# 
   436  0E28                     	;# 
   437  0E29                     	;# 
   438  0E2A                     	;# 
   439  0E2B                     	;# 
   440  0E2C                     	;# 
   441  0E2D                     	;# 
   442  0E2E                     	;# 
   443  0E2F                     	;# 
   444  0E90                     	;# 
   445  0E91                     	;# 
   446  0E92                     	;# 
   447  0E94                     	;# 
   448  0E95                     	;# 
   449  0E9C                     	;# 
   450  0E9D                     	;# 
   451  0E9E                     	;# 
   452  0E9F                     	;# 
   453  0EA0                     	;# 
   454  0EA1                     	;# 
   455  0EA2                     	;# 
   456  0EA3                     	;# 
   457  0EA4                     	;# 
   458  0EA5                     	;# 
   459  0EA6                     	;# 
   460  0EA7                     	;# 
   461  0F0F                     	;# 
   462  0F10                     	;# 
   463  0F11                     	;# 
   464  0F12                     	;# 
   465  0F13                     	;# 
   466  0F14                     	;# 
   467  0F15                     	;# 
   468  0F16                     	;# 
   469  0F17                     	;# 
   470  0F18                     	;# 
   471  0F19                     	;# 
   472  0F1A                     	;# 
   473  0F1B                     	;# 
   474  0F1C                     	;# 
   475  0F1D                     	;# 
   476  0F1E                     	;# 
   477  0F1F                     	;# 
   478  0F20                     	;# 
   479  0F21                     	;# 
   480  0F22                     	;# 
   481  0F23                     	;# 
   482  0F24                     	;# 
   483  0F25                     	;# 
   484  0F26                     	;# 
   485  0F27                     	;# 
   486  0F28                     	;# 
   487  0F29                     	;# 
   488  0F2A                     	;# 
   489  0F2B                     	;# 
   490  0F2C                     	;# 
   491  0F2D                     	;# 
   492  0F2E                     	;# 
   493  0F2F                     	;# 
   494  0F30                     	;# 
   495  0F31                     	;# 
   496  0F32                     	;# 
   497  0F33                     	;# 
   498  0F34                     	;# 
   499  0F35                     	;# 
   500  0F36                     	;# 
   501  0F37                     	;# 
   502  0FE4                     	;# 
   503  0FE5                     	;# 
   504  0FE6                     	;# 
   505  0FE7                     	;# 
   506  0FE8                     	;# 
   507  0FE9                     	;# 
   508  0FEA                     	;# 
   509  0FEB                     	;# 
   510  0FED                     	;# 
   511  0FEE                     	;# 
   512  0FEF                     	;# 
   513  0000                     	;# 
   514  0001                     	;# 
   515  0002                     	;# 
   516  0003                     	;# 
   517  0004                     	;# 
   518  0005                     	;# 
   519  0006                     	;# 
   520  0007                     	;# 
   521  0008                     	;# 
   522  0009                     	;# 
   523  000A                     	;# 
   524  000B                     	;# 
   525  000C                     	;# 
   526  000D                     	;# 
   527  000E                     	;# 
   528  0010                     	;# 
   529  0011                     	;# 
   530  0012                     	;# 
   531  0013                     	;# 
   532  0014                     	;# 
   533  0015                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  0019                     	;# 
   541  001A                     	;# 
   542  001B                     	;# 
   543  001C                     	;# 
   544  001D                     	;# 
   545  001E                     	;# 
   546  001F                     	;# 
   547  008C                     	;# 
   548  008D                     	;# 
   549  008E                     	;# 
   550  0090                     	;# 
   551  0091                     	;# 
   552  0092                     	;# 
   553  0093                     	;# 
   554  0094                     	;# 
   555  0097                     	;# 
   556  009B                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  010C                     	;# 
   563  010D                     	;# 
   564  010E                     	;# 
   565  0111                     	;# 
   566  0112                     	;# 
   567  0113                     	;# 
   568  0114                     	;# 
   569  0115                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  0118                     	;# 
   573  0119                     	;# 
   574  018C                     	;# 
   575  018D                     	;# 
   576  018E                     	;# 
   577  0197                     	;# 
   578  0199                     	;# 
   579  0199                     	;# 
   580  0199                     	;# 
   581  019A                     	;# 
   582  019A                     	;# 
   583  019A                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019C                     	;# 
   590  019C                     	;# 
   591  019C                     	;# 
   592  019D                     	;# 
   593  019D                     	;# 
   594  019D                     	;# 
   595  019E                     	;# 
   596  019E                     	;# 
   597  019E                     	;# 
   598  019F                     	;# 
   599  019F                     	;# 
   600  019F                     	;# 
   601  019F                     	;# 
   602  019F                     	;# 
   603  020C                     	;# 
   604  020D                     	;# 
   605  020E                     	;# 
   606  0211                     	;# 
   607  0211                     	;# 
   608  0212                     	;# 
   609  0212                     	;# 
   610  0213                     	;# 
   611  0213                     	;# 
   612  0214                     	;# 
   613  0214                     	;# 
   614  0215                     	;# 
   615  0215                     	;# 
   616  0215                     	;# 
   617  0215                     	;# 
   618  0216                     	;# 
   619  0216                     	;# 
   620  0217                     	;# 
   621  0217                     	;# 
   622  0219                     	;# 
   623  021A                     	;# 
   624  021B                     	;# 
   625  021C                     	;# 
   626  021D                     	;# 
   627  021D                     	;# 
   628  021E                     	;# 
   629  021F                     	;# 
   630  028C                     	;# 
   631  028D                     	;# 
   632  028E                     	;# 
   633  0291                     	;# 
   634  0291                     	;# 
   635  0292                     	;# 
   636  0293                     	;# 
   637  0294                     	;# 
   638  0295                     	;# 
   639  0295                     	;# 
   640  0296                     	;# 
   641  0297                     	;# 
   642  0298                     	;# 
   643  029F                     	;# 
   644  030C                     	;# 
   645  030D                     	;# 
   646  030E                     	;# 
   647  0311                     	;# 
   648  0311                     	;# 
   649  0312                     	;# 
   650  0313                     	;# 
   651  0314                     	;# 
   652  0315                     	;# 
   653  0315                     	;# 
   654  0316                     	;# 
   655  0317                     	;# 
   656  0318                     	;# 
   657  038C                     	;# 
   658  038D                     	;# 
   659  038E                     	;# 
   660  0391                     	;# 
   661  0392                     	;# 
   662  0393                     	;# 
   663  0394                     	;# 
   664  0395                     	;# 
   665  0396                     	;# 
   666  0397                     	;# 
   667  0398                     	;# 
   668  0399                     	;# 
   669  039A                     	;# 
   670  039C                     	;# 
   671  039D                     	;# 
   672  039E                     	;# 
   673  039F                     	;# 
   674  0411                     	;# 
   675  0411                     	;# 
   676  0412                     	;# 
   677  0413                     	;# 
   678  0414                     	;# 
   679  0415                     	;# 
   680  0416                     	;# 
   681  0417                     	;# 
   682  0418                     	;# 
   683  0418                     	;# 
   684  0419                     	;# 
   685  041A                     	;# 
   686  041B                     	;# 
   687  041C                     	;# 
   688  041D                     	;# 
   689  041E                     	;# 
   690  041F                     	;# 
   691  0498                     	;# 
   692  0498                     	;# 
   693  0499                     	;# 
   694  049A                     	;# 
   695  049B                     	;# 
   696  049B                     	;# 
   697  049C                     	;# 
   698  049D                     	;# 
   699  049E                     	;# 
   700  049F                     	;# 
   701  0617                     	;# 
   702  0618                     	;# 
   703  0619                     	;# 
   704  0619                     	;# 
   705  061A                     	;# 
   706  061B                     	;# 
   707  061C                     	;# 
   708  061C                     	;# 
   709  061F                     	;# 
   710  0691                     	;# 
   711  0692                     	;# 
   712  0693                     	;# 
   713  0694                     	;# 
   714  0695                     	;# 
   715  0696                     	;# 
   716  0697                     	;# 
   717  0698                     	;# 
   718  0699                     	;# 
   719  0711                     	;# 
   720  0712                     	;# 
   721  0713                     	;# 
   722  0714                     	;# 
   723  0715                     	;# 
   724  0716                     	;# 
   725  0717                     	;# 
   726  0718                     	;# 
   727  0719                     	;# 
   728  0891                     	;# 
   729  0891                     	;# 
   730  0891                     	;# 
   731  0891                     	;# 
   732  0891                     	;# 
   733  0891                     	;# 
   734  0892                     	;# 
   735  0892                     	;# 
   736  0892                     	;# 
   737  0893                     	;# 
   738  0893                     	;# 
   739  0893                     	;# 
   740  0893                     	;# 
   741  0893                     	;# 
   742  0893                     	;# 
   743  0894                     	;# 
   744  0894                     	;# 
   745  0894                     	;# 
   746  0895                     	;# 
   747  0895                     	;# 
   748  0895                     	;# 
   749  0896                     	;# 
   750  0896                     	;# 
   751  0896                     	;# 
   752  089B                     	;# 
   753  0911                     	;# 
   754  0912                     	;# 
   755  0913                     	;# 
   756  0914                     	;# 
   757  0915                     	;# 
   758  0916                     	;# 
   759  0918                     	;# 
   760  0919                     	;# 
   761  091A                     	;# 
   762  091B                     	;# 
   763  091C                     	;# 
   764  091D                     	;# 
   765  091E                     	;# 
   766  091F                     	;# 
   767  0E0F                     	;# 
   768  0E10                     	;# 
   769  0E11                     	;# 
   770  0E12                     	;# 
   771  0E13                     	;# 
   772  0E14                     	;# 
   773  0E15                     	;# 
   774  0E16                     	;# 
   775  0E17                     	;# 
   776  0E18                     	;# 
   777  0E19                     	;# 
   778  0E1A                     	;# 
   779  0E1B                     	;# 
   780  0E1C                     	;# 
   781  0E1D                     	;# 
   782  0E1E                     	;# 
   783  0E1F                     	;# 
   784  0E20                     	;# 
   785  0E21                     	;# 
   786  0E22                     	;# 
   787  0E24                     	;# 
   788  0E25                     	;# 
   789  0E28                     	;# 
   790  0E29                     	;# 
   791  0E2A                     	;# 
   792  0E2B                     	;# 
   793  0E2C                     	;# 
   794  0E2D                     	;# 
   795  0E2E                     	;# 
   796  0E2F                     	;# 
   797  0E90                     	;# 
   798  0E91                     	;# 
   799  0E92                     	;# 
   800  0E94                     	;# 
   801  0E95                     	;# 
   802  0E9C                     	;# 
   803  0E9D                     	;# 
   804  0E9E                     	;# 
   805  0E9F                     	;# 
   806  0EA0                     	;# 
   807  0EA1                     	;# 
   808  0EA2                     	;# 
   809  0EA3                     	;# 
   810  0EA4                     	;# 
   811  0EA5                     	;# 
   812  0EA6                     	;# 
   813  0EA7                     	;# 
   814  0F0F                     	;# 
   815  0F10                     	;# 
   816  0F11                     	;# 
   817  0F12                     	;# 
   818  0F13                     	;# 
   819  0F14                     	;# 
   820  0F15                     	;# 
   821  0F16                     	;# 
   822  0F17                     	;# 
   823  0F18                     	;# 
   824  0F19                     	;# 
   825  0F1A                     	;# 
   826  0F1B                     	;# 
   827  0F1C                     	;# 
   828  0F1D                     	;# 
   829  0F1E                     	;# 
   830  0F1F                     	;# 
   831  0F20                     	;# 
   832  0F21                     	;# 
   833  0F22                     	;# 
   834  0F23                     	;# 
   835  0F24                     	;# 
   836  0F25                     	;# 
   837  0F26                     	;# 
   838  0F27                     	;# 
   839  0F28                     	;# 
   840  0F29                     	;# 
   841  0F2A                     	;# 
   842  0F2B                     	;# 
   843  0F2C                     	;# 
   844  0F2D                     	;# 
   845  0F2E                     	;# 
   846  0F2F                     	;# 
   847  0F30                     	;# 
   848  0F31                     	;# 
   849  0F32                     	;# 
   850  0F33                     	;# 
   851  0F34                     	;# 
   852  0F35                     	;# 
   853  0F36                     	;# 
   854  0F37                     	;# 
   855  0FE4                     	;# 
   856  0FE5                     	;# 
   857  0FE6                     	;# 
   858  0FE7                     	;# 
   859  0FE8                     	;# 
   860  0FE9                     	;# 
   861  0FEA                     	;# 
   862  0FEB                     	;# 
   863  0FED                     	;# 
   864  0FEE                     	;# 
   865  0FEF                     	;# 
   866  0000                     	;# 
   867  0001                     	;# 
   868  0002                     	;# 
   869  0003                     	;# 
   870  0004                     	;# 
   871  0005                     	;# 
   872  0006                     	;# 
   873  0007                     	;# 
   874  0008                     	;# 
   875  0009                     	;# 
   876  000A                     	;# 
   877  000B                     	;# 
   878  000C                     	;# 
   879  000D                     	;# 
   880  000E                     	;# 
   881  0010                     	;# 
   882  0011                     	;# 
   883  0012                     	;# 
   884  0013                     	;# 
   885  0014                     	;# 
   886  0015                     	;# 
   887  0015                     	;# 
   888  0016                     	;# 
   889  0016                     	;# 
   890  0017                     	;# 
   891  0018                     	;# 
   892  0019                     	;# 
   893  0019                     	;# 
   894  001A                     	;# 
   895  001B                     	;# 
   896  001C                     	;# 
   897  001D                     	;# 
   898  001E                     	;# 
   899  001F                     	;# 
   900  008C                     	;# 
   901  008D                     	;# 
   902  008E                     	;# 
   903  0090                     	;# 
   904  0091                     	;# 
   905  0092                     	;# 
   906  0093                     	;# 
   907  0094                     	;# 
   908  0097                     	;# 
   909  009B                     	;# 
   910  009B                     	;# 
   911  009C                     	;# 
   912  009D                     	;# 
   913  009E                     	;# 
   914  009F                     	;# 
   915  010C                     	;# 
   916  010D                     	;# 
   917  010E                     	;# 
   918  0111                     	;# 
   919  0112                     	;# 
   920  0113                     	;# 
   921  0114                     	;# 
   922  0115                     	;# 
   923  0116                     	;# 
   924  0117                     	;# 
   925  0118                     	;# 
   926  0119                     	;# 
   927  018C                     	;# 
   928  018D                     	;# 
   929  018E                     	;# 
   930  0197                     	;# 
   931  0199                     	;# 
   932  0199                     	;# 
   933  0199                     	;# 
   934  019A                     	;# 
   935  019A                     	;# 
   936  019A                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019B                     	;# 
   942  019C                     	;# 
   943  019C                     	;# 
   944  019C                     	;# 
   945  019D                     	;# 
   946  019D                     	;# 
   947  019D                     	;# 
   948  019E                     	;# 
   949  019E                     	;# 
   950  019E                     	;# 
   951  019F                     	;# 
   952  019F                     	;# 
   953  019F                     	;# 
   954  019F                     	;# 
   955  019F                     	;# 
   956  020C                     	;# 
   957  020D                     	;# 
   958  020E                     	;# 
   959  0211                     	;# 
   960  0211                     	;# 
   961  0212                     	;# 
   962  0212                     	;# 
   963  0213                     	;# 
   964  0213                     	;# 
   965  0214                     	;# 
   966  0214                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0216                     	;# 
   972  0216                     	;# 
   973  0217                     	;# 
   974  0217                     	;# 
   975  0219                     	;# 
   976  021A                     	;# 
   977  021B                     	;# 
   978  021C                     	;# 
   979  021D                     	;# 
   980  021D                     	;# 
   981  021E                     	;# 
   982  021F                     	;# 
   983  028C                     	;# 
   984  028D                     	;# 
   985  028E                     	;# 
   986  0291                     	;# 
   987  0291                     	;# 
   988  0292                     	;# 
   989  0293                     	;# 
   990  0294                     	;# 
   991  0295                     	;# 
   992  0295                     	;# 
   993  0296                     	;# 
   994  0297                     	;# 
   995  0298                     	;# 
   996  029F                     	;# 
   997  030C                     	;# 
   998  030D                     	;# 
   999  030E                     	;# 
  1000  0311                     	;# 
  1001  0311                     	;# 
  1002  0312                     	;# 
  1003  0313                     	;# 
  1004  0314                     	;# 
  1005  0315                     	;# 
  1006  0315                     	;# 
  1007  0316                     	;# 
  1008  0317                     	;# 
  1009  0318                     	;# 
  1010  038C                     	;# 
  1011  038D                     	;# 
  1012  038E                     	;# 
  1013  0391                     	;# 
  1014  0392                     	;# 
  1015  0393                     	;# 
  1016  0394                     	;# 
  1017  0395                     	;# 
  1018  0396                     	;# 
  1019  0397                     	;# 
  1020  0398                     	;# 
  1021  0399                     	;# 
  1022  039A                     	;# 
  1023  039C                     	;# 
  1024  039D                     	;# 
  1025  039E                     	;# 
  1026  039F                     	;# 
  1027  0411                     	;# 
  1028  0411                     	;# 
  1029  0412                     	;# 
  1030  0413                     	;# 
  1031  0414                     	;# 
  1032  0415                     	;# 
  1033  0416                     	;# 
  1034  0417                     	;# 
  1035  0418                     	;# 
  1036  0418                     	;# 
  1037  0419                     	;# 
  1038  041A                     	;# 
  1039  041B                     	;# 
  1040  041C                     	;# 
  1041  041D                     	;# 
  1042  041E                     	;# 
  1043  041F                     	;# 
  1044  0498                     	;# 
  1045  0498                     	;# 
  1046  0499                     	;# 
  1047  049A                     	;# 
  1048  049B                     	;# 
  1049  049B                     	;# 
  1050  049C                     	;# 
  1051  049D                     	;# 
  1052  049E                     	;# 
  1053  049F                     	;# 
  1054  0617                     	;# 
  1055  0618                     	;# 
  1056  0619                     	;# 
  1057  0619                     	;# 
  1058  061A                     	;# 
  1059  061B                     	;# 
  1060  061C                     	;# 
  1061  061C                     	;# 
  1062  061F                     	;# 
  1063  0691                     	;# 
  1064  0692                     	;# 
  1065  0693                     	;# 
  1066  0694                     	;# 
  1067  0695                     	;# 
  1068  0696                     	;# 
  1069  0697                     	;# 
  1070  0698                     	;# 
  1071  0699                     	;# 
  1072  0711                     	;# 
  1073  0712                     	;# 
  1074  0713                     	;# 
  1075  0714                     	;# 
  1076  0715                     	;# 
  1077  0716                     	;# 
  1078  0717                     	;# 
  1079  0718                     	;# 
  1080  0719                     	;# 
  1081  0891                     	;# 
  1082  0891                     	;# 
  1083  0891                     	;# 
  1084  0891                     	;# 
  1085  0891                     	;# 
  1086  0891                     	;# 
  1087  0892                     	;# 
  1088  0892                     	;# 
  1089  0892                     	;# 
  1090  0893                     	;# 
  1091  0893                     	;# 
  1092  0893                     	;# 
  1093  0893                     	;# 
  1094  0893                     	;# 
  1095  0893                     	;# 
  1096  0894                     	;# 
  1097  0894                     	;# 
  1098  0894                     	;# 
  1099  0895                     	;# 
  1100  0895                     	;# 
  1101  0895                     	;# 
  1102  0896                     	;# 
  1103  0896                     	;# 
  1104  0896                     	;# 
  1105  089B                     	;# 
  1106  0911                     	;# 
  1107  0912                     	;# 
  1108  0913                     	;# 
  1109  0914                     	;# 
  1110  0915                     	;# 
  1111  0916                     	;# 
  1112  0918                     	;# 
  1113  0919                     	;# 
  1114  091A                     	;# 
  1115  091B                     	;# 
  1116  091C                     	;# 
  1117  091D                     	;# 
  1118  091E                     	;# 
  1119  091F                     	;# 
  1120  0E0F                     	;# 
  1121  0E10                     	;# 
  1122  0E11                     	;# 
  1123  0E12                     	;# 
  1124  0E13                     	;# 
  1125  0E14                     	;# 
  1126  0E15                     	;# 
  1127  0E16                     	;# 
  1128  0E17                     	;# 
  1129  0E18                     	;# 
  1130  0E19                     	;# 
  1131  0E1A                     	;# 
  1132  0E1B                     	;# 
  1133  0E1C                     	;# 
  1134  0E1D                     	;# 
  1135  0E1E                     	;# 
  1136  0E1F                     	;# 
  1137  0E20                     	;# 
  1138  0E21                     	;# 
  1139  0E22                     	;# 
  1140  0E24                     	;# 
  1141  0E25                     	;# 
  1142  0E28                     	;# 
  1143  0E29                     	;# 
  1144  0E2A                     	;# 
  1145  0E2B                     	;# 
  1146  0E2C                     	;# 
  1147  0E2D                     	;# 
  1148  0E2E                     	;# 
  1149  0E2F                     	;# 
  1150  0E90                     	;# 
  1151  0E91                     	;# 
  1152  0E92                     	;# 
  1153  0E94                     	;# 
  1154  0E95                     	;# 
  1155  0E9C                     	;# 
  1156  0E9D                     	;# 
  1157  0E9E                     	;# 
  1158  0E9F                     	;# 
  1159  0EA0                     	;# 
  1160  0EA1                     	;# 
  1161  0EA2                     	;# 
  1162  0EA3                     	;# 
  1163  0EA4                     	;# 
  1164  0EA5                     	;# 
  1165  0EA6                     	;# 
  1166  0EA7                     	;# 
  1167  0F0F                     	;# 
  1168  0F10                     	;# 
  1169  0F11                     	;# 
  1170  0F12                     	;# 
  1171  0F13                     	;# 
  1172  0F14                     	;# 
  1173  0F15                     	;# 
  1174  0F16                     	;# 
  1175  0F17                     	;# 
  1176  0F18                     	;# 
  1177  0F19                     	;# 
  1178  0F1A                     	;# 
  1179  0F1B                     	;# 
  1180  0F1C                     	;# 
  1181  0F1D                     	;# 
  1182  0F1E                     	;# 
  1183  0F1F                     	;# 
  1184  0F20                     	;# 
  1185  0F21                     	;# 
  1186  0F22                     	;# 
  1187  0F23                     	;# 
  1188  0F24                     	;# 
  1189  0F25                     	;# 
  1190  0F26                     	;# 
  1191  0F27                     	;# 
  1192  0F28                     	;# 
  1193  0F29                     	;# 
  1194  0F2A                     	;# 
  1195  0F2B                     	;# 
  1196  0F2C                     	;# 
  1197  0F2D                     	;# 
  1198  0F2E                     	;# 
  1199  0F2F                     	;# 
  1200  0F30                     	;# 
  1201  0F31                     	;# 
  1202  0F32                     	;# 
  1203  0F33                     	;# 
  1204  0F34                     	;# 
  1205  0F35                     	;# 
  1206  0F36                     	;# 
  1207  0F37                     	;# 
  1208  0FE4                     	;# 
  1209  0FE5                     	;# 
  1210  0FE6                     	;# 
  1211  0FE7                     	;# 
  1212  0FE8                     	;# 
  1213  0FE9                     	;# 
  1214  0FEA                     	;# 
  1215  0FEB                     	;# 
  1216  0FED                     	;# 
  1217  0FEE                     	;# 
  1218  0FEF                     	;# 
  1219  0000                     	;# 
  1220  0001                     	;# 
  1221  0002                     	;# 
  1222  0003                     	;# 
  1223  0004                     	;# 
  1224  0005                     	;# 
  1225  0006                     	;# 
  1226  0007                     	;# 
  1227  0008                     	;# 
  1228  0009                     	;# 
  1229  000A                     	;# 
  1230  000B                     	;# 
  1231  000C                     	;# 
  1232  000D                     	;# 
  1233  000E                     	;# 
  1234  0010                     	;# 
  1235  0011                     	;# 
  1236  0012                     	;# 
  1237  0013                     	;# 
  1238  0014                     	;# 
  1239  0015                     	;# 
  1240  0015                     	;# 
  1241  0016                     	;# 
  1242  0016                     	;# 
  1243  0017                     	;# 
  1244  0018                     	;# 
  1245  0019                     	;# 
  1246  0019                     	;# 
  1247  001A                     	;# 
  1248  001B                     	;# 
  1249  001C                     	;# 
  1250  001D                     	;# 
  1251  001E                     	;# 
  1252  001F                     	;# 
  1253  008C                     	;# 
  1254  008D                     	;# 
  1255  008E                     	;# 
  1256  0090                     	;# 
  1257  0091                     	;# 
  1258  0092                     	;# 
  1259  0093                     	;# 
  1260  0094                     	;# 
  1261  0097                     	;# 
  1262  009B                     	;# 
  1263  009B                     	;# 
  1264  009C                     	;# 
  1265  009D                     	;# 
  1266  009E                     	;# 
  1267  009F                     	;# 
  1268  010C                     	;# 
  1269  010D                     	;# 
  1270  010E                     	;# 
  1271  0111                     	;# 
  1272  0112                     	;# 
  1273  0113                     	;# 
  1274  0114                     	;# 
  1275  0115                     	;# 
  1276  0116                     	;# 
  1277  0117                     	;# 
  1278  0118                     	;# 
  1279  0119                     	;# 
  1280  018C                     	;# 
  1281  018D                     	;# 
  1282  018E                     	;# 
  1283  0197                     	;# 
  1284  0199                     	;# 
  1285  0199                     	;# 
  1286  0199                     	;# 
  1287  019A                     	;# 
  1288  019A                     	;# 
  1289  019A                     	;# 
  1290  019B                     	;# 
  1291  019B                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019C                     	;# 
  1296  019C                     	;# 
  1297  019C                     	;# 
  1298  019D                     	;# 
  1299  019D                     	;# 
  1300  019D                     	;# 
  1301  019E                     	;# 
  1302  019E                     	;# 
  1303  019E                     	;# 
  1304  019F                     	;# 
  1305  019F                     	;# 
  1306  019F                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  020C                     	;# 
  1310  020D                     	;# 
  1311  020E                     	;# 
  1312  0211                     	;# 
  1313  0211                     	;# 
  1314  0212                     	;# 
  1315  0212                     	;# 
  1316  0213                     	;# 
  1317  0213                     	;# 
  1318  0214                     	;# 
  1319  0214                     	;# 
  1320  0215                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0216                     	;# 
  1325  0216                     	;# 
  1326  0217                     	;# 
  1327  0217                     	;# 
  1328  0219                     	;# 
  1329  021A                     	;# 
  1330  021B                     	;# 
  1331  021C                     	;# 
  1332  021D                     	;# 
  1333  021D                     	;# 
  1334  021E                     	;# 
  1335  021F                     	;# 
  1336  028C                     	;# 
  1337  028D                     	;# 
  1338  028E                     	;# 
  1339  0291                     	;# 
  1340  0291                     	;# 
  1341  0292                     	;# 
  1342  0293                     	;# 
  1343  0294                     	;# 
  1344  0295                     	;# 
  1345  0295                     	;# 
  1346  0296                     	;# 
  1347  0297                     	;# 
  1348  0298                     	;# 
  1349  029F                     	;# 
  1350  030C                     	;# 
  1351  030D                     	;# 
  1352  030E                     	;# 
  1353  0311                     	;# 
  1354  0311                     	;# 
  1355  0312                     	;# 
  1356  0313                     	;# 
  1357  0314                     	;# 
  1358  0315                     	;# 
  1359  0315                     	;# 
  1360  0316                     	;# 
  1361  0317                     	;# 
  1362  0318                     	;# 
  1363  038C                     	;# 
  1364  038D                     	;# 
  1365  038E                     	;# 
  1366  0391                     	;# 
  1367  0392                     	;# 
  1368  0393                     	;# 
  1369  0394                     	;# 
  1370  0395                     	;# 
  1371  0396                     	;# 
  1372  0397                     	;# 
  1373  0398                     	;# 
  1374  0399                     	;# 
  1375  039A                     	;# 
  1376  039C                     	;# 
  1377  039D                     	;# 
  1378  039E                     	;# 
  1379  039F                     	;# 
  1380  0411                     	;# 
  1381  0411                     	;# 
  1382  0412                     	;# 
  1383  0413                     	;# 
  1384  0414                     	;# 
  1385  0415                     	;# 
  1386  0416                     	;# 
  1387  0417                     	;# 
  1388  0418                     	;# 
  1389  0418                     	;# 
  1390  0419                     	;# 
  1391  041A                     	;# 
  1392  041B                     	;# 
  1393  041C                     	;# 
  1394  041D                     	;# 
  1395  041E                     	;# 
  1396  041F                     	;# 
  1397  0498                     	;# 
  1398  0498                     	;# 
  1399  0499                     	;# 
  1400  049A                     	;# 
  1401  049B                     	;# 
  1402  049B                     	;# 
  1403  049C                     	;# 
  1404  049D                     	;# 
  1405  049E                     	;# 
  1406  049F                     	;# 
  1407  0617                     	;# 
  1408  0618                     	;# 
  1409  0619                     	;# 
  1410  0619                     	;# 
  1411  061A                     	;# 
  1412  061B                     	;# 
  1413  061C                     	;# 
  1414  061C                     	;# 
  1415  061F                     	;# 
  1416  0691                     	;# 
  1417  0692                     	;# 
  1418  0693                     	;# 
  1419  0694                     	;# 
  1420  0695                     	;# 
  1421  0696                     	;# 
  1422  0697                     	;# 
  1423  0698                     	;# 
  1424  0699                     	;# 
  1425  0711                     	;# 
  1426  0712                     	;# 
  1427  0713                     	;# 
  1428  0714                     	;# 
  1429  0715                     	;# 
  1430  0716                     	;# 
  1431  0717                     	;# 
  1432  0718                     	;# 
  1433  0719                     	;# 
  1434  0891                     	;# 
  1435  0891                     	;# 
  1436  0891                     	;# 
  1437  0891                     	;# 
  1438  0891                     	;# 
  1439  0891                     	;# 
  1440  0892                     	;# 
  1441  0892                     	;# 
  1442  0892                     	;# 
  1443  0893                     	;# 
  1444  0893                     	;# 
  1445  0893                     	;# 
  1446  0893                     	;# 
  1447  0893                     	;# 
  1448  0893                     	;# 
  1449  0894                     	;# 
  1450  0894                     	;# 
  1451  0894                     	;# 
  1452  0895                     	;# 
  1453  0895                     	;# 
  1454  0895                     	;# 
  1455  0896                     	;# 
  1456  0896                     	;# 
  1457  0896                     	;# 
  1458  089B                     	;# 
  1459  0911                     	;# 
  1460  0912                     	;# 
  1461  0913                     	;# 
  1462  0914                     	;# 
  1463  0915                     	;# 
  1464  0916                     	;# 
  1465  0918                     	;# 
  1466  0919                     	;# 
  1467  091A                     	;# 
  1468  091B                     	;# 
  1469  091C                     	;# 
  1470  091D                     	;# 
  1471  091E                     	;# 
  1472  091F                     	;# 
  1473  0E0F                     	;# 
  1474  0E10                     	;# 
  1475  0E11                     	;# 
  1476  0E12                     	;# 
  1477  0E13                     	;# 
  1478  0E14                     	;# 
  1479  0E15                     	;# 
  1480  0E16                     	;# 
  1481  0E17                     	;# 
  1482  0E18                     	;# 
  1483  0E19                     	;# 
  1484  0E1A                     	;# 
  1485  0E1B                     	;# 
  1486  0E1C                     	;# 
  1487  0E1D                     	;# 
  1488  0E1E                     	;# 
  1489  0E1F                     	;# 
  1490  0E20                     	;# 
  1491  0E21                     	;# 
  1492  0E22                     	;# 
  1493  0E24                     	;# 
  1494  0E25                     	;# 
  1495  0E28                     	;# 
  1496  0E29                     	;# 
  1497  0E2A                     	;# 
  1498  0E2B                     	;# 
  1499  0E2C                     	;# 
  1500  0E2D                     	;# 
  1501  0E2E                     	;# 
  1502  0E2F                     	;# 
  1503  0E90                     	;# 
  1504  0E91                     	;# 
  1505  0E92                     	;# 
  1506  0E94                     	;# 
  1507  0E95                     	;# 
  1508  0E9C                     	;# 
  1509  0E9D                     	;# 
  1510  0E9E                     	;# 
  1511  0E9F                     	;# 
  1512  0EA0                     	;# 
  1513  0EA1                     	;# 
  1514  0EA2                     	;# 
  1515  0EA3                     	;# 
  1516  0EA4                     	;# 
  1517  0EA5                     	;# 
  1518  0EA6                     	;# 
  1519  0EA7                     	;# 
  1520  0F0F                     	;# 
  1521  0F10                     	;# 
  1522  0F11                     	;# 
  1523  0F12                     	;# 
  1524  0F13                     	;# 
  1525  0F14                     	;# 
  1526  0F15                     	;# 
  1527  0F16                     	;# 
  1528  0F17                     	;# 
  1529  0F18                     	;# 
  1530  0F19                     	;# 
  1531  0F1A                     	;# 
  1532  0F1B                     	;# 
  1533  0F1C                     	;# 
  1534  0F1D                     	;# 
  1535  0F1E                     	;# 
  1536  0F1F                     	;# 
  1537  0F20                     	;# 
  1538  0F21                     	;# 
  1539  0F22                     	;# 
  1540  0F23                     	;# 
  1541  0F24                     	;# 
  1542  0F25                     	;# 
  1543  0F26                     	;# 
  1544  0F27                     	;# 
  1545  0F28                     	;# 
  1546  0F29                     	;# 
  1547  0F2A                     	;# 
  1548  0F2B                     	;# 
  1549  0F2C                     	;# 
  1550  0F2D                     	;# 
  1551  0F2E                     	;# 
  1552  0F2F                     	;# 
  1553  0F30                     	;# 
  1554  0F31                     	;# 
  1555  0F32                     	;# 
  1556  0F33                     	;# 
  1557  0F34                     	;# 
  1558  0F35                     	;# 
  1559  0F36                     	;# 
  1560  0F37                     	;# 
  1561  0FE4                     	;# 
  1562  0FE5                     	;# 
  1563  0FE6                     	;# 
  1564  0FE7                     	;# 
  1565  0FE8                     	;# 
  1566  0FE9                     	;# 
  1567  0FEA                     	;# 
  1568  0FEB                     	;# 
  1569  0FED                     	;# 
  1570  0FEE                     	;# 
  1571  0FEF                     	;# 
  1572  0000                     	;# 
  1573  0001                     	;# 
  1574  0002                     	;# 
  1575  0003                     	;# 
  1576  0004                     	;# 
  1577  0005                     	;# 
  1578  0006                     	;# 
  1579  0007                     	;# 
  1580  0008                     	;# 
  1581  0009                     	;# 
  1582  000A                     	;# 
  1583  000B                     	;# 
  1584  000C                     	;# 
  1585  000D                     	;# 
  1586  000E                     	;# 
  1587  0010                     	;# 
  1588  0011                     	;# 
  1589  0012                     	;# 
  1590  0013                     	;# 
  1591  0014                     	;# 
  1592  0015                     	;# 
  1593  0015                     	;# 
  1594  0016                     	;# 
  1595  0016                     	;# 
  1596  0017                     	;# 
  1597  0018                     	;# 
  1598  0019                     	;# 
  1599  0019                     	;# 
  1600  001A                     	;# 
  1601  001B                     	;# 
  1602  001C                     	;# 
  1603  001D                     	;# 
  1604  001E                     	;# 
  1605  001F                     	;# 
  1606  008C                     	;# 
  1607  008D                     	;# 
  1608  008E                     	;# 
  1609  0090                     	;# 
  1610  0091                     	;# 
  1611  0092                     	;# 
  1612  0093                     	;# 
  1613  0094                     	;# 
  1614  0097                     	;# 
  1615  009B                     	;# 
  1616  009B                     	;# 
  1617  009C                     	;# 
  1618  009D                     	;# 
  1619  009E                     	;# 
  1620  009F                     	;# 
  1621  010C                     	;# 
  1622  010D                     	;# 
  1623  010E                     	;# 
  1624  0111                     	;# 
  1625  0112                     	;# 
  1626  0113                     	;# 
  1627  0114                     	;# 
  1628  0115                     	;# 
  1629  0116                     	;# 
  1630  0117                     	;# 
  1631  0118                     	;# 
  1632  0119                     	;# 
  1633  018C                     	;# 
  1634  018D                     	;# 
  1635  018E                     	;# 
  1636  0197                     	;# 
  1637  0199                     	;# 
  1638  0199                     	;# 
  1639  0199                     	;# 
  1640  019A                     	;# 
  1641  019A                     	;# 
  1642  019A                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019C                     	;# 
  1649  019C                     	;# 
  1650  019C                     	;# 
  1651  019D                     	;# 
  1652  019D                     	;# 
  1653  019D                     	;# 
  1654  019E                     	;# 
  1655  019E                     	;# 
  1656  019E                     	;# 
  1657  019F                     	;# 
  1658  019F                     	;# 
  1659  019F                     	;# 
  1660  019F                     	;# 
  1661  019F                     	;# 
  1662  020C                     	;# 
  1663  020D                     	;# 
  1664  020E                     	;# 
  1665  0211                     	;# 
  1666  0211                     	;# 
  1667  0212                     	;# 
  1668  0212                     	;# 
  1669  0213                     	;# 
  1670  0213                     	;# 
  1671  0214                     	;# 
  1672  0214                     	;# 
  1673  0215                     	;# 
  1674  0215                     	;# 
  1675  0215                     	;# 
  1676  0215                     	;# 
  1677  0216                     	;# 
  1678  0216                     	;# 
  1679  0217                     	;# 
  1680  0217                     	;# 
  1681  0219                     	;# 
  1682  021A                     	;# 
  1683  021B                     	;# 
  1684  021C                     	;# 
  1685  021D                     	;# 
  1686  021D                     	;# 
  1687  021E                     	;# 
  1688  021F                     	;# 
  1689  028C                     	;# 
  1690  028D                     	;# 
  1691  028E                     	;# 
  1692  0291                     	;# 
  1693  0291                     	;# 
  1694  0292                     	;# 
  1695  0293                     	;# 
  1696  0294                     	;# 
  1697  0295                     	;# 
  1698  0295                     	;# 
  1699  0296                     	;# 
  1700  0297                     	;# 
  1701  0298                     	;# 
  1702  029F                     	;# 
  1703  030C                     	;# 
  1704  030D                     	;# 
  1705  030E                     	;# 
  1706  0311                     	;# 
  1707  0311                     	;# 
  1708  0312                     	;# 
  1709  0313                     	;# 
  1710  0314                     	;# 
  1711  0315                     	;# 
  1712  0315                     	;# 
  1713  0316                     	;# 
  1714  0317                     	;# 
  1715  0318                     	;# 
  1716  038C                     	;# 
  1717  038D                     	;# 
  1718  038E                     	;# 
  1719  0391                     	;# 
  1720  0392                     	;# 
  1721  0393                     	;# 
  1722  0394                     	;# 
  1723  0395                     	;# 
  1724  0396                     	;# 
  1725  0397                     	;# 
  1726  0398                     	;# 
  1727  0399                     	;# 
  1728  039A                     	;# 
  1729  039C                     	;# 
  1730  039D                     	;# 
  1731  039E                     	;# 
  1732  039F                     	;# 
  1733  0411                     	;# 
  1734  0411                     	;# 
  1735  0412                     	;# 
  1736  0413                     	;# 
  1737  0414                     	;# 
  1738  0415                     	;# 
  1739  0416                     	;# 
  1740  0417                     	;# 
  1741  0418                     	;# 
  1742  0418                     	;# 
  1743  0419                     	;# 
  1744  041A                     	;# 
  1745  041B                     	;# 
  1746  041C                     	;# 
  1747  041D                     	;# 
  1748  041E                     	;# 
  1749  041F                     	;# 
  1750  0498                     	;# 
  1751  0498                     	;# 
  1752  0499                     	;# 
  1753  049A                     	;# 
  1754  049B                     	;# 
  1755  049B                     	;# 
  1756  049C                     	;# 
  1757  049D                     	;# 
  1758  049E                     	;# 
  1759  049F                     	;# 
  1760  0617                     	;# 
  1761  0618                     	;# 
  1762  0619                     	;# 
  1763  0619                     	;# 
  1764  061A                     	;# 
  1765  061B                     	;# 
  1766  061C                     	;# 
  1767  061C                     	;# 
  1768  061F                     	;# 
  1769  0691                     	;# 
  1770  0692                     	;# 
  1771  0693                     	;# 
  1772  0694                     	;# 
  1773  0695                     	;# 
  1774  0696                     	;# 
  1775  0697                     	;# 
  1776  0698                     	;# 
  1777  0699                     	;# 
  1778  0711                     	;# 
  1779  0712                     	;# 
  1780  0713                     	;# 
  1781  0714                     	;# 
  1782  0715                     	;# 
  1783  0716                     	;# 
  1784  0717                     	;# 
  1785  0718                     	;# 
  1786  0719                     	;# 
  1787  0891                     	;# 
  1788  0891                     	;# 
  1789  0891                     	;# 
  1790  0891                     	;# 
  1791  0891                     	;# 
  1792  0891                     	;# 
  1793  0892                     	;# 
  1794  0892                     	;# 
  1795  0892                     	;# 
  1796  0893                     	;# 
  1797  0893                     	;# 
  1798  0893                     	;# 
  1799  0893                     	;# 
  1800  0893                     	;# 
  1801  0893                     	;# 
  1802  0894                     	;# 
  1803  0894                     	;# 
  1804  0894                     	;# 
  1805  0895                     	;# 
  1806  0895                     	;# 
  1807  0895                     	;# 
  1808  0896                     	;# 
  1809  0896                     	;# 
  1810  0896                     	;# 
  1811  089B                     	;# 
  1812  0911                     	;# 
  1813  0912                     	;# 
  1814  0913                     	;# 
  1815  0914                     	;# 
  1816  0915                     	;# 
  1817  0916                     	;# 
  1818  0918                     	;# 
  1819  0919                     	;# 
  1820  091A                     	;# 
  1821  091B                     	;# 
  1822  091C                     	;# 
  1823  091D                     	;# 
  1824  091E                     	;# 
  1825  091F                     	;# 
  1826  0E0F                     	;# 
  1827  0E10                     	;# 
  1828  0E11                     	;# 
  1829  0E12                     	;# 
  1830  0E13                     	;# 
  1831  0E14                     	;# 
  1832  0E15                     	;# 
  1833  0E16                     	;# 
  1834  0E17                     	;# 
  1835  0E18                     	;# 
  1836  0E19                     	;# 
  1837  0E1A                     	;# 
  1838  0E1B                     	;# 
  1839  0E1C                     	;# 
  1840  0E1D                     	;# 
  1841  0E1E                     	;# 
  1842  0E1F                     	;# 
  1843  0E20                     	;# 
  1844  0E21                     	;# 
  1845  0E22                     	;# 
  1846  0E24                     	;# 
  1847  0E25                     	;# 
  1848  0E28                     	;# 
  1849  0E29                     	;# 
  1850  0E2A                     	;# 
  1851  0E2B                     	;# 
  1852  0E2C                     	;# 
  1853  0E2D                     	;# 
  1854  0E2E                     	;# 
  1855  0E2F                     	;# 
  1856  0E90                     	;# 
  1857  0E91                     	;# 
  1858  0E92                     	;# 
  1859  0E94                     	;# 
  1860  0E95                     	;# 
  1861  0E9C                     	;# 
  1862  0E9D                     	;# 
  1863  0E9E                     	;# 
  1864  0E9F                     	;# 
  1865  0EA0                     	;# 
  1866  0EA1                     	;# 
  1867  0EA2                     	;# 
  1868  0EA3                     	;# 
  1869  0EA4                     	;# 
  1870  0EA5                     	;# 
  1871  0EA6                     	;# 
  1872  0EA7                     	;# 
  1873  0F0F                     	;# 
  1874  0F10                     	;# 
  1875  0F11                     	;# 
  1876  0F12                     	;# 
  1877  0F13                     	;# 
  1878  0F14                     	;# 
  1879  0F15                     	;# 
  1880  0F16                     	;# 
  1881  0F17                     	;# 
  1882  0F18                     	;# 
  1883  0F19                     	;# 
  1884  0F1A                     	;# 
  1885  0F1B                     	;# 
  1886  0F1C                     	;# 
  1887  0F1D                     	;# 
  1888  0F1E                     	;# 
  1889  0F1F                     	;# 
  1890  0F20                     	;# 
  1891  0F21                     	;# 
  1892  0F22                     	;# 
  1893  0F23                     	;# 
  1894  0F24                     	;# 
  1895  0F25                     	;# 
  1896  0F26                     	;# 
  1897  0F27                     	;# 
  1898  0F28                     	;# 
  1899  0F29                     	;# 
  1900  0F2A                     	;# 
  1901  0F2B                     	;# 
  1902  0F2C                     	;# 
  1903  0F2D                     	;# 
  1904  0F2E                     	;# 
  1905  0F2F                     	;# 
  1906  0F30                     	;# 
  1907  0F31                     	;# 
  1908  0F32                     	;# 
  1909  0F33                     	;# 
  1910  0F34                     	;# 
  1911  0F35                     	;# 
  1912  0F36                     	;# 
  1913  0F37                     	;# 
  1914  0FE4                     	;# 
  1915  0FE5                     	;# 
  1916  0FE6                     	;# 
  1917  0FE7                     	;# 
  1918  0FE8                     	;# 
  1919  0FE9                     	;# 
  1920  0FEA                     	;# 
  1921  0FEB                     	;# 
  1922  0FED                     	;# 
  1923  0FEE                     	;# 
  1924  0FEF                     	;# 
  1925  0000                     	;# 
  1926  0001                     	;# 
  1927  0002                     	;# 
  1928  0003                     	;# 
  1929  0004                     	;# 
  1930  0005                     	;# 
  1931  0006                     	;# 
  1932  0007                     	;# 
  1933  0008                     	;# 
  1934  0009                     	;# 
  1935  000A                     	;# 
  1936  000B                     	;# 
  1937  000C                     	;# 
  1938  000D                     	;# 
  1939  000E                     	;# 
  1940  0010                     	;# 
  1941  0011                     	;# 
  1942  0012                     	;# 
  1943  0013                     	;# 
  1944  0014                     	;# 
  1945  0015                     	;# 
  1946  0015                     	;# 
  1947  0016                     	;# 
  1948  0016                     	;# 
  1949  0017                     	;# 
  1950  0018                     	;# 
  1951  0019                     	;# 
  1952  0019                     	;# 
  1953  001A                     	;# 
  1954  001B                     	;# 
  1955  001C                     	;# 
  1956  001D                     	;# 
  1957  001E                     	;# 
  1958  001F                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0093                     	;# 
  1966  0094                     	;# 
  1967  0097                     	;# 
  1968  009B                     	;# 
  1969  009B                     	;# 
  1970  009C                     	;# 
  1971  009D                     	;# 
  1972  009E                     	;# 
  1973  009F                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0111                     	;# 
  1978  0112                     	;# 
  1979  0113                     	;# 
  1980  0114                     	;# 
  1981  0115                     	;# 
  1982  0116                     	;# 
  1983  0117                     	;# 
  1984  0118                     	;# 
  1985  0119                     	;# 
  1986  018C                     	;# 
  1987  018D                     	;# 
  1988  018E                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  0199                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019A                     	;# 
  1995  019A                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019C                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019D                     	;# 
  2006  019D                     	;# 
  2007  019E                     	;# 
  2008  019E                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  019F                     	;# 
  2012  019F                     	;# 
  2013  019F                     	;# 
  2014  019F                     	;# 
  2015  020C                     	;# 
  2016  020D                     	;# 
  2017  020E                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0215                     	;# 
  2030  0216                     	;# 
  2031  0216                     	;# 
  2032  0217                     	;# 
  2033  0217                     	;# 
  2034  0219                     	;# 
  2035  021A                     	;# 
  2036  021B                     	;# 
  2037  021C                     	;# 
  2038  021D                     	;# 
  2039  021D                     	;# 
  2040  021E                     	;# 
  2041  021F                     	;# 
  2042  028C                     	;# 
  2043  028D                     	;# 
  2044  028E                     	;# 
  2045  0291                     	;# 
  2046  0291                     	;# 
  2047  0292                     	;# 
  2048  0293                     	;# 
  2049  0294                     	;# 
  2050  0295                     	;# 
  2051  0295                     	;# 
  2052  0296                     	;# 
  2053  0297                     	;# 
  2054  0298                     	;# 
  2055  029F                     	;# 
  2056  030C                     	;# 
  2057  030D                     	;# 
  2058  030E                     	;# 
  2059  0311                     	;# 
  2060  0311                     	;# 
  2061  0312                     	;# 
  2062  0313                     	;# 
  2063  0314                     	;# 
  2064  0315                     	;# 
  2065  0315                     	;# 
  2066  0316                     	;# 
  2067  0317                     	;# 
  2068  0318                     	;# 
  2069  038C                     	;# 
  2070  038D                     	;# 
  2071  038E                     	;# 
  2072  0391                     	;# 
  2073  0392                     	;# 
  2074  0393                     	;# 
  2075  0394                     	;# 
  2076  0395                     	;# 
  2077  0396                     	;# 
  2078  0397                     	;# 
  2079  0398                     	;# 
  2080  0399                     	;# 
  2081  039A                     	;# 
  2082  039C                     	;# 
  2083  039D                     	;# 
  2084  039E                     	;# 
  2085  039F                     	;# 
  2086  0411                     	;# 
  2087  0411                     	;# 
  2088  0412                     	;# 
  2089  0413                     	;# 
  2090  0414                     	;# 
  2091  0415                     	;# 
  2092  0416                     	;# 
  2093  0417                     	;# 
  2094  0418                     	;# 
  2095  0418                     	;# 
  2096  0419                     	;# 
  2097  041A                     	;# 
  2098  041B                     	;# 
  2099  041C                     	;# 
  2100  041D                     	;# 
  2101  041E                     	;# 
  2102  041F                     	;# 
  2103  0498                     	;# 
  2104  0498                     	;# 
  2105  0499                     	;# 
  2106  049A                     	;# 
  2107  049B                     	;# 
  2108  049B                     	;# 
  2109  049C                     	;# 
  2110  049D                     	;# 
  2111  049E                     	;# 
  2112  049F                     	;# 
  2113  0617                     	;# 
  2114  0618                     	;# 
  2115  0619                     	;# 
  2116  0619                     	;# 
  2117  061A                     	;# 
  2118  061B                     	;# 
  2119  061C                     	;# 
  2120  061C                     	;# 
  2121  061F                     	;# 
  2122  0691                     	;# 
  2123  0692                     	;# 
  2124  0693                     	;# 
  2125  0694                     	;# 
  2126  0695                     	;# 
  2127  0696                     	;# 
  2128  0697                     	;# 
  2129  0698                     	;# 
  2130  0699                     	;# 
  2131  0711                     	;# 
  2132  0712                     	;# 
  2133  0713                     	;# 
  2134  0714                     	;# 
  2135  0715                     	;# 
  2136  0716                     	;# 
  2137  0717                     	;# 
  2138  0718                     	;# 
  2139  0719                     	;# 
  2140  0891                     	;# 
  2141  0891                     	;# 
  2142  0891                     	;# 
  2143  0891                     	;# 
  2144  0891                     	;# 
  2145  0891                     	;# 
  2146  0892                     	;# 
  2147  0892                     	;# 
  2148  0892                     	;# 
  2149  0893                     	;# 
  2150  0893                     	;# 
  2151  0893                     	;# 
  2152  0893                     	;# 
  2153  0893                     	;# 
  2154  0893                     	;# 
  2155  0894                     	;# 
  2156  0894                     	;# 
  2157  0894                     	;# 
  2158  0895                     	;# 
  2159  0895                     	;# 
  2160  0895                     	;# 
  2161  0896                     	;# 
  2162  0896                     	;# 
  2163  0896                     	;# 
  2164  089B                     	;# 
  2165  0911                     	;# 
  2166  0912                     	;# 
  2167  0913                     	;# 
  2168  0914                     	;# 
  2169  0915                     	;# 
  2170  0916                     	;# 
  2171  0918                     	;# 
  2172  0919                     	;# 
  2173  091A                     	;# 
  2174  091B                     	;# 
  2175  091C                     	;# 
  2176  091D                     	;# 
  2177  091E                     	;# 
  2178  091F                     	;# 
  2179  0E0F                     	;# 
  2180  0E10                     	;# 
  2181  0E11                     	;# 
  2182  0E12                     	;# 
  2183  0E13                     	;# 
  2184  0E14                     	;# 
  2185  0E15                     	;# 
  2186  0E16                     	;# 
  2187  0E17                     	;# 
  2188  0E18                     	;# 
  2189  0E19                     	;# 
  2190  0E1A                     	;# 
  2191  0E1B                     	;# 
  2192  0E1C                     	;# 
  2193  0E1D                     	;# 
  2194  0E1E                     	;# 
  2195  0E1F                     	;# 
  2196  0E20                     	;# 
  2197  0E21                     	;# 
  2198  0E22                     	;# 
  2199  0E24                     	;# 
  2200  0E25                     	;# 
  2201  0E28                     	;# 
  2202  0E29                     	;# 
  2203  0E2A                     	;# 
  2204  0E2B                     	;# 
  2205  0E2C                     	;# 
  2206  0E2D                     	;# 
  2207  0E2E                     	;# 
  2208  0E2F                     	;# 
  2209  0E90                     	;# 
  2210  0E91                     	;# 
  2211  0E92                     	;# 
  2212  0E94                     	;# 
  2213  0E95                     	;# 
  2214  0E9C                     	;# 
  2215  0E9D                     	;# 
  2216  0E9E                     	;# 
  2217  0E9F                     	;# 
  2218  0EA0                     	;# 
  2219  0EA1                     	;# 
  2220  0EA2                     	;# 
  2221  0EA3                     	;# 
  2222  0EA4                     	;# 
  2223  0EA5                     	;# 
  2224  0EA6                     	;# 
  2225  0EA7                     	;# 
  2226  0F0F                     	;# 
  2227  0F10                     	;# 
  2228  0F11                     	;# 
  2229  0F12                     	;# 
  2230  0F13                     	;# 
  2231  0F14                     	;# 
  2232  0F15                     	;# 
  2233  0F16                     	;# 
  2234  0F17                     	;# 
  2235  0F18                     	;# 
  2236  0F19                     	;# 
  2237  0F1A                     	;# 
  2238  0F1B                     	;# 
  2239  0F1C                     	;# 
  2240  0F1D                     	;# 
  2241  0F1E                     	;# 
  2242  0F1F                     	;# 
  2243  0F20                     	;# 
  2244  0F21                     	;# 
  2245  0F22                     	;# 
  2246  0F23                     	;# 
  2247  0F24                     	;# 
  2248  0F25                     	;# 
  2249  0F26                     	;# 
  2250  0F27                     	;# 
  2251  0F28                     	;# 
  2252  0F29                     	;# 
  2253  0F2A                     	;# 
  2254  0F2B                     	;# 
  2255  0F2C                     	;# 
  2256  0F2D                     	;# 
  2257  0F2E                     	;# 
  2258  0F2F                     	;# 
  2259  0F30                     	;# 
  2260  0F31                     	;# 
  2261  0F32                     	;# 
  2262  0F33                     	;# 
  2263  0F34                     	;# 
  2264  0F35                     	;# 
  2265  0F36                     	;# 
  2266  0F37                     	;# 
  2267  0FE4                     	;# 
  2268  0FE5                     	;# 
  2269  0FE6                     	;# 
  2270  0FE7                     	;# 
  2271  0FE8                     	;# 
  2272  0FE9                     	;# 
  2273  0FEA                     	;# 
  2274  0FEB                     	;# 
  2275  0FED                     	;# 
  2276  0FEE                     	;# 
  2277  0FEF                     	;# 
  2278  0000                     	;# 
  2279  0001                     	;# 
  2280  0002                     	;# 
  2281  0003                     	;# 
  2282  0004                     	;# 
  2283  0005                     	;# 
  2284  0006                     	;# 
  2285  0007                     	;# 
  2286  0008                     	;# 
  2287  0009                     	;# 
  2288  000A                     	;# 
  2289  000B                     	;# 
  2290  000C                     	;# 
  2291  000D                     	;# 
  2292  000E                     	;# 
  2293  0010                     	;# 
  2294  0011                     	;# 
  2295  0012                     	;# 
  2296  0013                     	;# 
  2297  0014                     	;# 
  2298  0015                     	;# 
  2299  0015                     	;# 
  2300  0016                     	;# 
  2301  0016                     	;# 
  2302  0017                     	;# 
  2303  0018                     	;# 
  2304  0019                     	;# 
  2305  0019                     	;# 
  2306  001A                     	;# 
  2307  001B                     	;# 
  2308  001C                     	;# 
  2309  001D                     	;# 
  2310  001E                     	;# 
  2311  001F                     	;# 
  2312  008C                     	;# 
  2313  008D                     	;# 
  2314  008E                     	;# 
  2315  0090                     	;# 
  2316  0091                     	;# 
  2317  0092                     	;# 
  2318  0093                     	;# 
  2319  0094                     	;# 
  2320  0097                     	;# 
  2321  009B                     	;# 
  2322  009B                     	;# 
  2323  009C                     	;# 
  2324  009D                     	;# 
  2325  009E                     	;# 
  2326  009F                     	;# 
  2327  010C                     	;# 
  2328  010D                     	;# 
  2329  010E                     	;# 
  2330  0111                     	;# 
  2331  0112                     	;# 
  2332  0113                     	;# 
  2333  0114                     	;# 
  2334  0115                     	;# 
  2335  0116                     	;# 
  2336  0117                     	;# 
  2337  0118                     	;# 
  2338  0119                     	;# 
  2339  018C                     	;# 
  2340  018D                     	;# 
  2341  018E                     	;# 
  2342  0197                     	;# 
  2343  0199                     	;# 
  2344  0199                     	;# 
  2345  0199                     	;# 
  2346  019A                     	;# 
  2347  019A                     	;# 
  2348  019A                     	;# 
  2349  019B                     	;# 
  2350  019B                     	;# 
  2351  019B                     	;# 
  2352  019B                     	;# 
  2353  019B                     	;# 
  2354  019C                     	;# 
  2355  019C                     	;# 
  2356  019C                     	;# 
  2357  019D                     	;# 
  2358  019D                     	;# 
  2359  019D                     	;# 
  2360  019E                     	;# 
  2361  019E                     	;# 
  2362  019E                     	;# 
  2363  019F                     	;# 
  2364  019F                     	;# 
  2365  019F                     	;# 
  2366  019F                     	;# 
  2367  019F                     	;# 
  2368  020C                     	;# 
  2369  020D                     	;# 
  2370  020E                     	;# 
  2371  0211                     	;# 
  2372  0211                     	;# 
  2373  0212                     	;# 
  2374  0212                     	;# 
  2375  0213                     	;# 
  2376  0213                     	;# 
  2377  0214                     	;# 
  2378  0214                     	;# 
  2379  0215                     	;# 
  2380  0215                     	;# 
  2381  0215                     	;# 
  2382  0215                     	;# 
  2383  0216                     	;# 
  2384  0216                     	;# 
  2385  0217                     	;# 
  2386  0217                     	;# 
  2387  0219                     	;# 
  2388  021A                     	;# 
  2389  021B                     	;# 
  2390  021C                     	;# 
  2391  021D                     	;# 
  2392  021D                     	;# 
  2393  021E                     	;# 
  2394  021F                     	;# 
  2395  028C                     	;# 
  2396  028D                     	;# 
  2397  028E                     	;# 
  2398  0291                     	;# 
  2399  0291                     	;# 
  2400  0292                     	;# 
  2401  0293                     	;# 
  2402  0294                     	;# 
  2403  0295                     	;# 
  2404  0295                     	;# 
  2405  0296                     	;# 
  2406  0297                     	;# 
  2407  0298                     	;# 
  2408  029F                     	;# 
  2409  030C                     	;# 
  2410  030D                     	;# 
  2411  030E                     	;# 
  2412  0311                     	;# 
  2413  0311                     	;# 
  2414  0312                     	;# 
  2415  0313                     	;# 
  2416  0314                     	;# 
  2417  0315                     	;# 
  2418  0315                     	;# 
  2419  0316                     	;# 
  2420  0317                     	;# 
  2421  0318                     	;# 
  2422  038C                     	;# 
  2423  038D                     	;# 
  2424  038E                     	;# 
  2425  0391                     	;# 
  2426  0392                     	;# 
  2427  0393                     	;# 
  2428  0394                     	;# 
  2429  0395                     	;# 
  2430  0396                     	;# 
  2431  0397                     	;# 
  2432  0398                     	;# 
  2433  0399                     	;# 
  2434  039A                     	;# 
  2435  039C                     	;# 
  2436  039D                     	;# 
  2437  039E                     	;# 
  2438  039F                     	;# 
  2439  0411                     	;# 
  2440  0411                     	;# 
  2441  0412                     	;# 
  2442  0413                     	;# 
  2443  0414                     	;# 
  2444  0415                     	;# 
  2445  0416                     	;# 
  2446  0417                     	;# 
  2447  0418                     	;# 
  2448  0418                     	;# 
  2449  0419                     	;# 
  2450  041A                     	;# 
  2451  041B                     	;# 
  2452  041C                     	;# 
  2453  041D                     	;# 
  2454  041E                     	;# 
  2455  041F                     	;# 
  2456  0498                     	;# 
  2457  0498                     	;# 
  2458  0499                     	;# 
  2459  049A                     	;# 
  2460  049B                     	;# 
  2461  049B                     	;# 
  2462  049C                     	;# 
  2463  049D                     	;# 
  2464  049E                     	;# 
  2465  049F                     	;# 
  2466  0617                     	;# 
  2467  0618                     	;# 
  2468  0619                     	;# 
  2469  0619                     	;# 
  2470  061A                     	;# 
  2471  061B                     	;# 
  2472  061C                     	;# 
  2473  061C                     	;# 
  2474  061F                     	;# 
  2475  0691                     	;# 
  2476  0692                     	;# 
  2477  0693                     	;# 
  2478  0694                     	;# 
  2479  0695                     	;# 
  2480  0696                     	;# 
  2481  0697                     	;# 
  2482  0698                     	;# 
  2483  0699                     	;# 
  2484  0711                     	;# 
  2485  0712                     	;# 
  2486  0713                     	;# 
  2487  0714                     	;# 
  2488  0715                     	;# 
  2489  0716                     	;# 
  2490  0717                     	;# 
  2491  0718                     	;# 
  2492  0719                     	;# 
  2493  0891                     	;# 
  2494  0891                     	;# 
  2495  0891                     	;# 
  2496  0891                     	;# 
  2497  0891                     	;# 
  2498  0891                     	;# 
  2499  0892                     	;# 
  2500  0892                     	;# 
  2501  0892                     	;# 
  2502  0893                     	;# 
  2503  0893                     	;# 
  2504  0893                     	;# 
  2505  0893                     	;# 
  2506  0893                     	;# 
  2507  0893                     	;# 
  2508  0894                     	;# 
  2509  0894                     	;# 
  2510  0894                     	;# 
  2511  0895                     	;# 
  2512  0895                     	;# 
  2513  0895                     	;# 
  2514  0896                     	;# 
  2515  0896                     	;# 
  2516  0896                     	;# 
  2517  089B                     	;# 
  2518  0911                     	;# 
  2519  0912                     	;# 
  2520  0913                     	;# 
  2521  0914                     	;# 
  2522  0915                     	;# 
  2523  0916                     	;# 
  2524  0918                     	;# 
  2525  0919                     	;# 
  2526  091A                     	;# 
  2527  091B                     	;# 
  2528  091C                     	;# 
  2529  091D                     	;# 
  2530  091E                     	;# 
  2531  091F                     	;# 
  2532  0E0F                     	;# 
  2533  0E10                     	;# 
  2534  0E11                     	;# 
  2535  0E12                     	;# 
  2536  0E13                     	;# 
  2537  0E14                     	;# 
  2538  0E15                     	;# 
  2539  0E16                     	;# 
  2540  0E17                     	;# 
  2541  0E18                     	;# 
  2542  0E19                     	;# 
  2543  0E1A                     	;# 
  2544  0E1B                     	;# 
  2545  0E1C                     	;# 
  2546  0E1D                     	;# 
  2547  0E1E                     	;# 
  2548  0E1F                     	;# 
  2549  0E20                     	;# 
  2550  0E21                     	;# 
  2551  0E22                     	;# 
  2552  0E24                     	;# 
  2553  0E25                     	;# 
  2554  0E28                     	;# 
  2555  0E29                     	;# 
  2556  0E2A                     	;# 
  2557  0E2B                     	;# 
  2558  0E2C                     	;# 
  2559  0E2D                     	;# 
  2560  0E2E                     	;# 
  2561  0E2F                     	;# 
  2562  0E90                     	;# 
  2563  0E91                     	;# 
  2564  0E92                     	;# 
  2565  0E94                     	;# 
  2566  0E95                     	;# 
  2567  0E9C                     	;# 
  2568  0E9D                     	;# 
  2569  0E9E                     	;# 
  2570  0E9F                     	;# 
  2571  0EA0                     	;# 
  2572  0EA1                     	;# 
  2573  0EA2                     	;# 
  2574  0EA3                     	;# 
  2575  0EA4                     	;# 
  2576  0EA5                     	;# 
  2577  0EA6                     	;# 
  2578  0EA7                     	;# 
  2579  0F0F                     	;# 
  2580  0F10                     	;# 
  2581  0F11                     	;# 
  2582  0F12                     	;# 
  2583  0F13                     	;# 
  2584  0F14                     	;# 
  2585  0F15                     	;# 
  2586  0F16                     	;# 
  2587  0F17                     	;# 
  2588  0F18                     	;# 
  2589  0F19                     	;# 
  2590  0F1A                     	;# 
  2591  0F1B                     	;# 
  2592  0F1C                     	;# 
  2593  0F1D                     	;# 
  2594  0F1E                     	;# 
  2595  0F1F                     	;# 
  2596  0F20                     	;# 
  2597  0F21                     	;# 
  2598  0F22                     	;# 
  2599  0F23                     	;# 
  2600  0F24                     	;# 
  2601  0F25                     	;# 
  2602  0F26                     	;# 
  2603  0F27                     	;# 
  2604  0F28                     	;# 
  2605  0F29                     	;# 
  2606  0F2A                     	;# 
  2607  0F2B                     	;# 
  2608  0F2C                     	;# 
  2609  0F2D                     	;# 
  2610  0F2E                     	;# 
  2611  0F2F                     	;# 
  2612  0F30                     	;# 
  2613  0F31                     	;# 
  2614  0F32                     	;# 
  2615  0F33                     	;# 
  2616  0F34                     	;# 
  2617  0F35                     	;# 
  2618  0F36                     	;# 
  2619  0F37                     	;# 
  2620  0FE4                     	;# 
  2621  0FE5                     	;# 
  2622  0FE6                     	;# 
  2623  0FE7                     	;# 
  2624  0FE8                     	;# 
  2625  0FE9                     	;# 
  2626  0FEA                     	;# 
  2627  0FEB                     	;# 
  2628  0FED                     	;# 
  2629  0FEE                     	;# 
  2630  0FEF                     	;# 
  2631  0000                     	;# 
  2632  0001                     	;# 
  2633  0002                     	;# 
  2634  0003                     	;# 
  2635  0004                     	;# 
  2636  0005                     	;# 
  2637  0006                     	;# 
  2638  0007                     	;# 
  2639  0008                     	;# 
  2640  0009                     	;# 
  2641  000A                     	;# 
  2642  000B                     	;# 
  2643  000C                     	;# 
  2644  000D                     	;# 
  2645  000E                     	;# 
  2646  0010                     	;# 
  2647  0011                     	;# 
  2648  0012                     	;# 
  2649  0013                     	;# 
  2650  0014                     	;# 
  2651  0015                     	;# 
  2652  0015                     	;# 
  2653  0016                     	;# 
  2654  0016                     	;# 
  2655  0017                     	;# 
  2656  0018                     	;# 
  2657  0019                     	;# 
  2658  0019                     	;# 
  2659  001A                     	;# 
  2660  001B                     	;# 
  2661  001C                     	;# 
  2662  001D                     	;# 
  2663  001E                     	;# 
  2664  001F                     	;# 
  2665  008C                     	;# 
  2666  008D                     	;# 
  2667  008E                     	;# 
  2668  0090                     	;# 
  2669  0091                     	;# 
  2670  0092                     	;# 
  2671  0093                     	;# 
  2672  0094                     	;# 
  2673  0097                     	;# 
  2674  009B                     	;# 
  2675  009B                     	;# 
  2676  009C                     	;# 
  2677  009D                     	;# 
  2678  009E                     	;# 
  2679  009F                     	;# 
  2680  010C                     	;# 
  2681  010D                     	;# 
  2682  010E                     	;# 
  2683  0111                     	;# 
  2684  0112                     	;# 
  2685  0113                     	;# 
  2686  0114                     	;# 
  2687  0115                     	;# 
  2688  0116                     	;# 
  2689  0117                     	;# 
  2690  0118                     	;# 
  2691  0119                     	;# 
  2692  018C                     	;# 
  2693  018D                     	;# 
  2694  018E                     	;# 
  2695  0197                     	;# 
  2696  0199                     	;# 
  2697  0199                     	;# 
  2698  0199                     	;# 
  2699  019A                     	;# 
  2700  019A                     	;# 
  2701  019A                     	;# 
  2702  019B                     	;# 
  2703  019B                     	;# 
  2704  019B                     	;# 
  2705  019B                     	;# 
  2706  019B                     	;# 
  2707  019C                     	;# 
  2708  019C                     	;# 
  2709  019C                     	;# 
  2710  019D                     	;# 
  2711  019D                     	;# 
  2712  019D                     	;# 
  2713  019E                     	;# 
  2714  019E                     	;# 
  2715  019E                     	;# 
  2716  019F                     	;# 
  2717  019F                     	;# 
  2718  019F                     	;# 
  2719  019F                     	;# 
  2720  019F                     	;# 
  2721  020C                     	;# 
  2722  020D                     	;# 
  2723  020E                     	;# 
  2724  0211                     	;# 
  2725  0211                     	;# 
  2726  0212                     	;# 
  2727  0212                     	;# 
  2728  0213                     	;# 
  2729  0213                     	;# 
  2730  0214                     	;# 
  2731  0214                     	;# 
  2732  0215                     	;# 
  2733  0215                     	;# 
  2734  0215                     	;# 
  2735  0215                     	;# 
  2736  0216                     	;# 
  2737  0216                     	;# 
  2738  0217                     	;# 
  2739  0217                     	;# 
  2740  0219                     	;# 
  2741  021A                     	;# 
  2742  021B                     	;# 
  2743  021C                     	;# 
  2744  021D                     	;# 
  2745  021D                     	;# 
  2746  021E                     	;# 
  2747  021F                     	;# 
  2748  028C                     	;# 
  2749  028D                     	;# 
  2750  028E                     	;# 
  2751  0291                     	;# 
  2752  0291                     	;# 
  2753  0292                     	;# 
  2754  0293                     	;# 
  2755  0294                     	;# 
  2756  0295                     	;# 
  2757  0295                     	;# 
  2758  0296                     	;# 
  2759  0297                     	;# 
  2760  0298                     	;# 
  2761  029F                     	;# 
  2762  030C                     	;# 
  2763  030D                     	;# 
  2764  030E                     	;# 
  2765  0311                     	;# 
  2766  0311                     	;# 
  2767  0312                     	;# 
  2768  0313                     	;# 
  2769  0314                     	;# 
  2770  0315                     	;# 
  2771  0315                     	;# 
  2772  0316                     	;# 
  2773  0317                     	;# 
  2774  0318                     	;# 
  2775  038C                     	;# 
  2776  038D                     	;# 
  2777  038E                     	;# 
  2778  0391                     	;# 
  2779  0392                     	;# 
  2780  0393                     	;# 
  2781  0394                     	;# 
  2782  0395                     	;# 
  2783  0396                     	;# 
  2784  0397                     	;# 
  2785  0398                     	;# 
  2786  0399                     	;# 
  2787  039A                     	;# 
  2788  039C                     	;# 
  2789  039D                     	;# 
  2790  039E                     	;# 
  2791  039F                     	;# 
  2792  0411                     	;# 
  2793  0411                     	;# 
  2794  0412                     	;# 
  2795  0413                     	;# 
  2796  0414                     	;# 
  2797  0415                     	;# 
  2798  0416                     	;# 
  2799  0417                     	;# 
  2800  0418                     	;# 
  2801  0418                     	;# 
  2802  0419                     	;# 
  2803  041A                     	;# 
  2804  041B                     	;# 
  2805  041C                     	;# 
  2806  041D                     	;# 
  2807  041E                     	;# 
  2808  041F                     	;# 
  2809  0498                     	;# 
  2810  0498                     	;# 
  2811  0499                     	;# 
  2812  049A                     	;# 
  2813  049B                     	;# 
  2814  049B                     	;# 
  2815  049C                     	;# 
  2816  049D                     	;# 
  2817  049E                     	;# 
  2818  049F                     	;# 
  2819  0617                     	;# 
  2820  0618                     	;# 
  2821  0619                     	;# 
  2822  0619                     	;# 
  2823  061A                     	;# 
  2824  061B                     	;# 
  2825  061C                     	;# 
  2826  061C                     	;# 
  2827  061F                     	;# 
  2828  0691                     	;# 
  2829  0692                     	;# 
  2830  0693                     	;# 
  2831  0694                     	;# 
  2832  0695                     	;# 
  2833  0696                     	;# 
  2834  0697                     	;# 
  2835  0698                     	;# 
  2836  0699                     	;# 
  2837  0711                     	;# 
  2838  0712                     	;# 
  2839  0713                     	;# 
  2840  0714                     	;# 
  2841  0715                     	;# 
  2842  0716                     	;# 
  2843  0717                     	;# 
  2844  0718                     	;# 
  2845  0719                     	;# 
  2846  0891                     	;# 
  2847  0891                     	;# 
  2848  0891                     	;# 
  2849  0891                     	;# 
  2850  0891                     	;# 
  2851  0891                     	;# 
  2852  0892                     	;# 
  2853  0892                     	;# 
  2854  0892                     	;# 
  2855  0893                     	;# 
  2856  0893                     	;# 
  2857  0893                     	;# 
  2858  0893                     	;# 
  2859  0893                     	;# 
  2860  0893                     	;# 
  2861  0894                     	;# 
  2862  0894                     	;# 
  2863  0894                     	;# 
  2864  0895                     	;# 
  2865  0895                     	;# 
  2866  0895                     	;# 
  2867  0896                     	;# 
  2868  0896                     	;# 
  2869  0896                     	;# 
  2870  089B                     	;# 
  2871  0911                     	;# 
  2872  0912                     	;# 
  2873  0913                     	;# 
  2874  0914                     	;# 
  2875  0915                     	;# 
  2876  0916                     	;# 
  2877  0918                     	;# 
  2878  0919                     	;# 
  2879  091A                     	;# 
  2880  091B                     	;# 
  2881  091C                     	;# 
  2882  091D                     	;# 
  2883  091E                     	;# 
  2884  091F                     	;# 
  2885  0E0F                     	;# 
  2886  0E10                     	;# 
  2887  0E11                     	;# 
  2888  0E12                     	;# 
  2889  0E13                     	;# 
  2890  0E14                     	;# 
  2891  0E15                     	;# 
  2892  0E16                     	;# 
  2893  0E17                     	;# 
  2894  0E18                     	;# 
  2895  0E19                     	;# 
  2896  0E1A                     	;# 
  2897  0E1B                     	;# 
  2898  0E1C                     	;# 
  2899  0E1D                     	;# 
  2900  0E1E                     	;# 
  2901  0E1F                     	;# 
  2902  0E20                     	;# 
  2903  0E21                     	;# 
  2904  0E22                     	;# 
  2905  0E24                     	;# 
  2906  0E25                     	;# 
  2907  0E28                     	;# 
  2908  0E29                     	;# 
  2909  0E2A                     	;# 
  2910  0E2B                     	;# 
  2911  0E2C                     	;# 
  2912  0E2D                     	;# 
  2913  0E2E                     	;# 
  2914  0E2F                     	;# 
  2915  0E90                     	;# 
  2916  0E91                     	;# 
  2917  0E92                     	;# 
  2918  0E94                     	;# 
  2919  0E95                     	;# 
  2920  0E9C                     	;# 
  2921  0E9D                     	;# 
  2922  0E9E                     	;# 
  2923  0E9F                     	;# 
  2924  0EA0                     	;# 
  2925  0EA1                     	;# 
  2926  0EA2                     	;# 
  2927  0EA3                     	;# 
  2928  0EA4                     	;# 
  2929  0EA5                     	;# 
  2930  0EA6                     	;# 
  2931  0EA7                     	;# 
  2932  0F0F                     	;# 
  2933  0F10                     	;# 
  2934  0F11                     	;# 
  2935  0F12                     	;# 
  2936  0F13                     	;# 
  2937  0F14                     	;# 
  2938  0F15                     	;# 
  2939  0F16                     	;# 
  2940  0F17                     	;# 
  2941  0F18                     	;# 
  2942  0F19                     	;# 
  2943  0F1A                     	;# 
  2944  0F1B                     	;# 
  2945  0F1C                     	;# 
  2946  0F1D                     	;# 
  2947  0F1E                     	;# 
  2948  0F1F                     	;# 
  2949  0F20                     	;# 
  2950  0F21                     	;# 
  2951  0F22                     	;# 
  2952  0F23                     	;# 
  2953  0F24                     	;# 
  2954  0F25                     	;# 
  2955  0F26                     	;# 
  2956  0F27                     	;# 
  2957  0F28                     	;# 
  2958  0F29                     	;# 
  2959  0F2A                     	;# 
  2960  0F2B                     	;# 
  2961  0F2C                     	;# 
  2962  0F2D                     	;# 
  2963  0F2E                     	;# 
  2964  0F2F                     	;# 
  2965  0F30                     	;# 
  2966  0F31                     	;# 
  2967  0F32                     	;# 
  2968  0F33                     	;# 
  2969  0F34                     	;# 
  2970  0F35                     	;# 
  2971  0F36                     	;# 
  2972  0F37                     	;# 
  2973  0FE4                     	;# 
  2974  0FE5                     	;# 
  2975  0FE6                     	;# 
  2976  0FE7                     	;# 
  2977  0FE8                     	;# 
  2978  0FE9                     	;# 
  2979  0FEA                     	;# 
  2980  0FEB                     	;# 
  2981  0FED                     	;# 
  2982  0FEE                     	;# 
  2983  0FEF                     	;# 
  2984  0000                     	;# 
  2985  0001                     	;# 
  2986  0002                     	;# 
  2987  0003                     	;# 
  2988  0004                     	;# 
  2989  0005                     	;# 
  2990  0006                     	;# 
  2991  0007                     	;# 
  2992  0008                     	;# 
  2993  0009                     	;# 
  2994  000A                     	;# 
  2995  000B                     	;# 
  2996  000C                     	;# 
  2997  000D                     	;# 
  2998  000E                     	;# 
  2999  0010                     	;# 
  3000  0011                     	;# 
  3001  0012                     	;# 
  3002  0013                     	;# 
  3003  0014                     	;# 
  3004  0015                     	;# 
  3005  0015                     	;# 
  3006  0016                     	;# 
  3007  0016                     	;# 
  3008  0017                     	;# 
  3009  0018                     	;# 
  3010  0019                     	;# 
  3011  0019                     	;# 
  3012  001A                     	;# 
  3013  001B                     	;# 
  3014  001C                     	;# 
  3015  001D                     	;# 
  3016  001E                     	;# 
  3017  001F                     	;# 
  3018  008C                     	;# 
  3019  008D                     	;# 
  3020  008E                     	;# 
  3021  0090                     	;# 
  3022  0091                     	;# 
  3023  0092                     	;# 
  3024  0093                     	;# 
  3025  0094                     	;# 
  3026  0097                     	;# 
  3027  009B                     	;# 
  3028  009B                     	;# 
  3029  009C                     	;# 
  3030  009D                     	;# 
  3031  009E                     	;# 
  3032  009F                     	;# 
  3033  010C                     	;# 
  3034  010D                     	;# 
  3035  010E                     	;# 
  3036  0111                     	;# 
  3037  0112                     	;# 
  3038  0113                     	;# 
  3039  0114                     	;# 
  3040  0115                     	;# 
  3041  0116                     	;# 
  3042  0117                     	;# 
  3043  0118                     	;# 
  3044  0119                     	;# 
  3045  018C                     	;# 
  3046  018D                     	;# 
  3047  018E                     	;# 
  3048  0197                     	;# 
  3049  0199                     	;# 
  3050  0199                     	;# 
  3051  0199                     	;# 
  3052  019A                     	;# 
  3053  019A                     	;# 
  3054  019A                     	;# 
  3055  019B                     	;# 
  3056  019B                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019B                     	;# 
  3060  019C                     	;# 
  3061  019C                     	;# 
  3062  019C                     	;# 
  3063  019D                     	;# 
  3064  019D                     	;# 
  3065  019D                     	;# 
  3066  019E                     	;# 
  3067  019E                     	;# 
  3068  019E                     	;# 
  3069  019F                     	;# 
  3070  019F                     	;# 
  3071  019F                     	;# 
  3072  019F                     	;# 
  3073  019F                     	;# 
  3074  020C                     	;# 
  3075  020D                     	;# 
  3076  020E                     	;# 
  3077  0211                     	;# 
  3078  0211                     	;# 
  3079  0212                     	;# 
  3080  0212                     	;# 
  3081  0213                     	;# 
  3082  0213                     	;# 
  3083  0214                     	;# 
  3084  0214                     	;# 
  3085  0215                     	;# 
  3086  0215                     	;# 
  3087  0215                     	;# 
  3088  0215                     	;# 
  3089  0216                     	;# 
  3090  0216                     	;# 
  3091  0217                     	;# 
  3092  0217                     	;# 
  3093  0219                     	;# 
  3094  021A                     	;# 
  3095  021B                     	;# 
  3096  021C                     	;# 
  3097  021D                     	;# 
  3098  021D                     	;# 
  3099  021E                     	;# 
  3100  021F                     	;# 
  3101  028C                     	;# 
  3102  028D                     	;# 
  3103  028E                     	;# 
  3104  0291                     	;# 
  3105  0291                     	;# 
  3106  0292                     	;# 
  3107  0293                     	;# 
  3108  0294                     	;# 
  3109  0295                     	;# 
  3110  0295                     	;# 
  3111  0296                     	;# 
  3112  0297                     	;# 
  3113  0298                     	;# 
  3114  029F                     	;# 
  3115  030C                     	;# 
  3116  030D                     	;# 
  3117  030E                     	;# 
  3118  0311                     	;# 
  3119  0311                     	;# 
  3120  0312                     	;# 
  3121  0313                     	;# 
  3122  0314                     	;# 
  3123  0315                     	;# 
  3124  0315                     	;# 
  3125  0316                     	;# 
  3126  0317                     	;# 
  3127  0318                     	;# 
  3128  038C                     	;# 
  3129  038D                     	;# 
  3130  038E                     	;# 
  3131  0391                     	;# 
  3132  0392                     	;# 
  3133  0393                     	;# 
  3134  0394                     	;# 
  3135  0395                     	;# 
  3136  0396                     	;# 
  3137  0397                     	;# 
  3138  0398                     	;# 
  3139  0399                     	;# 
  3140  039A                     	;# 
  3141  039C                     	;# 
  3142  039D                     	;# 
  3143  039E                     	;# 
  3144  039F                     	;# 
  3145  0411                     	;# 
  3146  0411                     	;# 
  3147  0412                     	;# 
  3148  0413                     	;# 
  3149  0414                     	;# 
  3150  0415                     	;# 
  3151  0416                     	;# 
  3152  0417                     	;# 
  3153  0418                     	;# 
  3154  0418                     	;# 
  3155  0419                     	;# 
  3156  041A                     	;# 
  3157  041B                     	;# 
  3158  041C                     	;# 
  3159  041D                     	;# 
  3160  041E                     	;# 
  3161  041F                     	;# 
  3162  0498                     	;# 
  3163  0498                     	;# 
  3164  0499                     	;# 
  3165  049A                     	;# 
  3166  049B                     	;# 
  3167  049B                     	;# 
  3168  049C                     	;# 
  3169  049D                     	;# 
  3170  049E                     	;# 
  3171  049F                     	;# 
  3172  0617                     	;# 
  3173  0618                     	;# 
  3174  0619                     	;# 
  3175  0619                     	;# 
  3176  061A                     	;# 
  3177  061B                     	;# 
  3178  061C                     	;# 
  3179  061C                     	;# 
  3180  061F                     	;# 
  3181  0691                     	;# 
  3182  0692                     	;# 
  3183  0693                     	;# 
  3184  0694                     	;# 
  3185  0695                     	;# 
  3186  0696                     	;# 
  3187  0697                     	;# 
  3188  0698                     	;# 
  3189  0699                     	;# 
  3190  0711                     	;# 
  3191  0712                     	;# 
  3192  0713                     	;# 
  3193  0714                     	;# 
  3194  0715                     	;# 
  3195  0716                     	;# 
  3196  0717                     	;# 
  3197  0718                     	;# 
  3198  0719                     	;# 
  3199  0891                     	;# 
  3200  0891                     	;# 
  3201  0891                     	;# 
  3202  0891                     	;# 
  3203  0891                     	;# 
  3204  0891                     	;# 
  3205  0892                     	;# 
  3206  0892                     	;# 
  3207  0892                     	;# 
  3208  0893                     	;# 
  3209  0893                     	;# 
  3210  0893                     	;# 
  3211  0893                     	;# 
  3212  0893                     	;# 
  3213  0893                     	;# 
  3214  0894                     	;# 
  3215  0894                     	;# 
  3216  0894                     	;# 
  3217  0895                     	;# 
  3218  0895                     	;# 
  3219  0895                     	;# 
  3220  0896                     	;# 
  3221  0896                     	;# 
  3222  0896                     	;# 
  3223  089B                     	;# 
  3224  0911                     	;# 
  3225  0912                     	;# 
  3226  0913                     	;# 
  3227  0914                     	;# 
  3228  0915                     	;# 
  3229  0916                     	;# 
  3230  0918                     	;# 
  3231  0919                     	;# 
  3232  091A                     	;# 
  3233  091B                     	;# 
  3234  091C                     	;# 
  3235  091D                     	;# 
  3236  091E                     	;# 
  3237  091F                     	;# 
  3238  0E0F                     	;# 
  3239  0E10                     	;# 
  3240  0E11                     	;# 
  3241  0E12                     	;# 
  3242  0E13                     	;# 
  3243  0E14                     	;# 
  3244  0E15                     	;# 
  3245  0E16                     	;# 
  3246  0E17                     	;# 
  3247  0E18                     	;# 
  3248  0E19                     	;# 
  3249  0E1A                     	;# 
  3250  0E1B                     	;# 
  3251  0E1C                     	;# 
  3252  0E1D                     	;# 
  3253  0E1E                     	;# 
  3254  0E1F                     	;# 
  3255  0E20                     	;# 
  3256  0E21                     	;# 
  3257  0E22                     	;# 
  3258  0E24                     	;# 
  3259  0E25                     	;# 
  3260  0E28                     	;# 
  3261  0E29                     	;# 
  3262  0E2A                     	;# 
  3263  0E2B                     	;# 
  3264  0E2C                     	;# 
  3265  0E2D                     	;# 
  3266  0E2E                     	;# 
  3267  0E2F                     	;# 
  3268  0E90                     	;# 
  3269  0E91                     	;# 
  3270  0E92                     	;# 
  3271  0E94                     	;# 
  3272  0E95                     	;# 
  3273  0E9C                     	;# 
  3274  0E9D                     	;# 
  3275  0E9E                     	;# 
  3276  0E9F                     	;# 
  3277  0EA0                     	;# 
  3278  0EA1                     	;# 
  3279  0EA2                     	;# 
  3280  0EA3                     	;# 
  3281  0EA4                     	;# 
  3282  0EA5                     	;# 
  3283  0EA6                     	;# 
  3284  0EA7                     	;# 
  3285  0F0F                     	;# 
  3286  0F10                     	;# 
  3287  0F11                     	;# 
  3288  0F12                     	;# 
  3289  0F13                     	;# 
  3290  0F14                     	;# 
  3291  0F15                     	;# 
  3292  0F16                     	;# 
  3293  0F17                     	;# 
  3294  0F18                     	;# 
  3295  0F19                     	;# 
  3296  0F1A                     	;# 
  3297  0F1B                     	;# 
  3298  0F1C                     	;# 
  3299  0F1D                     	;# 
  3300  0F1E                     	;# 
  3301  0F1F                     	;# 
  3302  0F20                     	;# 
  3303  0F21                     	;# 
  3304  0F22                     	;# 
  3305  0F23                     	;# 
  3306  0F24                     	;# 
  3307  0F25                     	;# 
  3308  0F26                     	;# 
  3309  0F27                     	;# 
  3310  0F28                     	;# 
  3311  0F29                     	;# 
  3312  0F2A                     	;# 
  3313  0F2B                     	;# 
  3314  0F2C                     	;# 
  3315  0F2D                     	;# 
  3316  0F2E                     	;# 
  3317  0F2F                     	;# 
  3318  0F30                     	;# 
  3319  0F31                     	;# 
  3320  0F32                     	;# 
  3321  0F33                     	;# 
  3322  0F34                     	;# 
  3323  0F35                     	;# 
  3324  0F36                     	;# 
  3325  0F37                     	;# 
  3326  0FE4                     	;# 
  3327  0FE5                     	;# 
  3328  0FE6                     	;# 
  3329  0FE7                     	;# 
  3330  0FE8                     	;# 
  3331  0FE9                     	;# 
  3332  0FEA                     	;# 
  3333  0FEB                     	;# 
  3334  0FED                     	;# 
  3335  0FEE                     	;# 
  3336  0FEF                     	;# 
  3337  0000                     	;# 
  3338  0001                     	;# 
  3339  0002                     	;# 
  3340  0003                     	;# 
  3341  0004                     	;# 
  3342  0005                     	;# 
  3343  0006                     	;# 
  3344  0007                     	;# 
  3345  0008                     	;# 
  3346  0009                     	;# 
  3347  000A                     	;# 
  3348  000B                     	;# 
  3349  000C                     	;# 
  3350  000D                     	;# 
  3351  000E                     	;# 
  3352  0010                     	;# 
  3353  0011                     	;# 
  3354  0012                     	;# 
  3355  0013                     	;# 
  3356  0014                     	;# 
  3357  0015                     	;# 
  3358  0015                     	;# 
  3359  0016                     	;# 
  3360  0016                     	;# 
  3361  0017                     	;# 
  3362  0018                     	;# 
  3363  0019                     	;# 
  3364  0019                     	;# 
  3365  001A                     	;# 
  3366  001B                     	;# 
  3367  001C                     	;# 
  3368  001D                     	;# 
  3369  001E                     	;# 
  3370  001F                     	;# 
  3371  008C                     	;# 
  3372  008D                     	;# 
  3373  008E                     	;# 
  3374  0090                     	;# 
  3375  0091                     	;# 
  3376  0092                     	;# 
  3377  0093                     	;# 
  3378  0094                     	;# 
  3379  0097                     	;# 
  3380  009B                     	;# 
  3381  009B                     	;# 
  3382  009C                     	;# 
  3383  009D                     	;# 
  3384  009E                     	;# 
  3385  009F                     	;# 
  3386  010C                     	;# 
  3387  010D                     	;# 
  3388  010E                     	;# 
  3389  0111                     	;# 
  3390  0112                     	;# 
  3391  0113                     	;# 
  3392  0114                     	;# 
  3393  0115                     	;# 
  3394  0116                     	;# 
  3395  0117                     	;# 
  3396  0118                     	;# 
  3397  0119                     	;# 
  3398  018C                     	;# 
  3399  018D                     	;# 
  3400  018E                     	;# 
  3401  0197                     	;# 
  3402  0199                     	;# 
  3403  0199                     	;# 
  3404  0199                     	;# 
  3405  019A                     	;# 
  3406  019A                     	;# 
  3407  019A                     	;# 
  3408  019B                     	;# 
  3409  019B                     	;# 
  3410  019B                     	;# 
  3411  019B                     	;# 
  3412  019B                     	;# 
  3413  019C                     	;# 
  3414  019C                     	;# 
  3415  019C                     	;# 
  3416  019D                     	;# 
  3417  019D                     	;# 
  3418  019D                     	;# 
  3419  019E                     	;# 
  3420  019E                     	;# 
  3421  019E                     	;# 
  3422  019F                     	;# 
  3423  019F                     	;# 
  3424  019F                     	;# 
  3425  019F                     	;# 
  3426  019F                     	;# 
  3427  020C                     	;# 
  3428  020D                     	;# 
  3429  020E                     	;# 
  3430  0211                     	;# 
  3431  0211                     	;# 
  3432  0212                     	;# 
  3433  0212                     	;# 
  3434  0213                     	;# 
  3435  0213                     	;# 
  3436  0214                     	;# 
  3437  0214                     	;# 
  3438  0215                     	;# 
  3439  0215                     	;# 
  3440  0215                     	;# 
  3441  0215                     	;# 
  3442  0216                     	;# 
  3443  0216                     	;# 
  3444  0217                     	;# 
  3445  0217                     	;# 
  3446  0219                     	;# 
  3447  021A                     	;# 
  3448  021B                     	;# 
  3449  021C                     	;# 
  3450  021D                     	;# 
  3451  021D                     	;# 
  3452  021E                     	;# 
  3453  021F                     	;# 
  3454  028C                     	;# 
  3455  028D                     	;# 
  3456  028E                     	;# 
  3457  0291                     	;# 
  3458  0291                     	;# 
  3459  0292                     	;# 
  3460  0293                     	;# 
  3461  0294                     	;# 
  3462  0295                     	;# 
  3463  0295                     	;# 
  3464  0296                     	;# 
  3465  0297                     	;# 
  3466  0298                     	;# 
  3467  029F                     	;# 
  3468  030C                     	;# 
  3469  030D                     	;# 
  3470  030E                     	;# 
  3471  0311                     	;# 
  3472  0311                     	;# 
  3473  0312                     	;# 
  3474  0313                     	;# 
  3475  0314                     	;# 
  3476  0315                     	;# 
  3477  0315                     	;# 
  3478  0316                     	;# 
  3479  0317                     	;# 
  3480  0318                     	;# 
  3481  038C                     	;# 
  3482  038D                     	;# 
  3483  038E                     	;# 
  3484  0391                     	;# 
  3485  0392                     	;# 
  3486  0393                     	;# 
  3487  0394                     	;# 
  3488  0395                     	;# 
  3489  0396                     	;# 
  3490  0397                     	;# 
  3491  0398                     	;# 
  3492  0399                     	;# 
  3493  039A                     	;# 
  3494  039C                     	;# 
  3495  039D                     	;# 
  3496  039E                     	;# 
  3497  039F                     	;# 
  3498  0411                     	;# 
  3499  0411                     	;# 
  3500  0412                     	;# 
  3501  0413                     	;# 
  3502  0414                     	;# 
  3503  0415                     	;# 
  3504  0416                     	;# 
  3505  0417                     	;# 
  3506  0418                     	;# 
  3507  0418                     	;# 
  3508  0419                     	;# 
  3509  041A                     	;# 
  3510  041B                     	;# 
  3511  041C                     	;# 
  3512  041D                     	;# 
  3513  041E                     	;# 
  3514  041F                     	;# 
  3515  0498                     	;# 
  3516  0498                     	;# 
  3517  0499                     	;# 
  3518  049A                     	;# 
  3519  049B                     	;# 
  3520  049B                     	;# 
  3521  049C                     	;# 
  3522  049D                     	;# 
  3523  049E                     	;# 
  3524  049F                     	;# 
  3525  0617                     	;# 
  3526  0618                     	;# 
  3527  0619                     	;# 
  3528  0619                     	;# 
  3529  061A                     	;# 
  3530  061B                     	;# 
  3531  061C                     	;# 
  3532  061C                     	;# 
  3533  061F                     	;# 
  3534  0691                     	;# 
  3535  0692                     	;# 
  3536  0693                     	;# 
  3537  0694                     	;# 
  3538  0695                     	;# 
  3539  0696                     	;# 
  3540  0697                     	;# 
  3541  0698                     	;# 
  3542  0699                     	;# 
  3543  0711                     	;# 
  3544  0712                     	;# 
  3545  0713                     	;# 
  3546  0714                     	;# 
  3547  0715                     	;# 
  3548  0716                     	;# 
  3549  0717                     	;# 
  3550  0718                     	;# 
  3551  0719                     	;# 
  3552  0891                     	;# 
  3553  0891                     	;# 
  3554  0891                     	;# 
  3555  0891                     	;# 
  3556  0891                     	;# 
  3557  0891                     	;# 
  3558  0892                     	;# 
  3559  0892                     	;# 
  3560  0892                     	;# 
  3561  0893                     	;# 
  3562  0893                     	;# 
  3563  0893                     	;# 
  3564  0893                     	;# 
  3565  0893                     	;# 
  3566  0893                     	;# 
  3567  0894                     	;# 
  3568  0894                     	;# 
  3569  0894                     	;# 
  3570  0895                     	;# 
  3571  0895                     	;# 
  3572  0895                     	;# 
  3573  0896                     	;# 
  3574  0896                     	;# 
  3575  0896                     	;# 
  3576  089B                     	;# 
  3577  0911                     	;# 
  3578  0912                     	;# 
  3579  0913                     	;# 
  3580  0914                     	;# 
  3581  0915                     	;# 
  3582  0916                     	;# 
  3583  0918                     	;# 
  3584  0919                     	;# 
  3585  091A                     	;# 
  3586  091B                     	;# 
  3587  091C                     	;# 
  3588  091D                     	;# 
  3589  091E                     	;# 
  3590  091F                     	;# 
  3591  0E0F                     	;# 
  3592  0E10                     	;# 
  3593  0E11                     	;# 
  3594  0E12                     	;# 
  3595  0E13                     	;# 
  3596  0E14                     	;# 
  3597  0E15                     	;# 
  3598  0E16                     	;# 
  3599  0E17                     	;# 
  3600  0E18                     	;# 
  3601  0E19                     	;# 
  3602  0E1A                     	;# 
  3603  0E1B                     	;# 
  3604  0E1C                     	;# 
  3605  0E1D                     	;# 
  3606  0E1E                     	;# 
  3607  0E1F                     	;# 
  3608  0E20                     	;# 
  3609  0E21                     	;# 
  3610  0E22                     	;# 
  3611  0E24                     	;# 
  3612  0E25                     	;# 
  3613  0E28                     	;# 
  3614  0E29                     	;# 
  3615  0E2A                     	;# 
  3616  0E2B                     	;# 
  3617  0E2C                     	;# 
  3618  0E2D                     	;# 
  3619  0E2E                     	;# 
  3620  0E2F                     	;# 
  3621  0E90                     	;# 
  3622  0E91                     	;# 
  3623  0E92                     	;# 
  3624  0E94                     	;# 
  3625  0E95                     	;# 
  3626  0E9C                     	;# 
  3627  0E9D                     	;# 
  3628  0E9E                     	;# 
  3629  0E9F                     	;# 
  3630  0EA0                     	;# 
  3631  0EA1                     	;# 
  3632  0EA2                     	;# 
  3633  0EA3                     	;# 
  3634  0EA4                     	;# 
  3635  0EA5                     	;# 
  3636  0EA6                     	;# 
  3637  0EA7                     	;# 
  3638  0F0F                     	;# 
  3639  0F10                     	;# 
  3640  0F11                     	;# 
  3641  0F12                     	;# 
  3642  0F13                     	;# 
  3643  0F14                     	;# 
  3644  0F15                     	;# 
  3645  0F16                     	;# 
  3646  0F17                     	;# 
  3647  0F18                     	;# 
  3648  0F19                     	;# 
  3649  0F1A                     	;# 
  3650  0F1B                     	;# 
  3651  0F1C                     	;# 
  3652  0F1D                     	;# 
  3653  0F1E                     	;# 
  3654  0F1F                     	;# 
  3655  0F20                     	;# 
  3656  0F21                     	;# 
  3657  0F22                     	;# 
  3658  0F23                     	;# 
  3659  0F24                     	;# 
  3660  0F25                     	;# 
  3661  0F26                     	;# 
  3662  0F27                     	;# 
  3663  0F28                     	;# 
  3664  0F29                     	;# 
  3665  0F2A                     	;# 
  3666  0F2B                     	;# 
  3667  0F2C                     	;# 
  3668  0F2D                     	;# 
  3669  0F2E                     	;# 
  3670  0F2F                     	;# 
  3671  0F30                     	;# 
  3672  0F31                     	;# 
  3673  0F32                     	;# 
  3674  0F33                     	;# 
  3675  0F34                     	;# 
  3676  0F35                     	;# 
  3677  0F36                     	;# 
  3678  0F37                     	;# 
  3679  0FE4                     	;# 
  3680  0FE5                     	;# 
  3681  0FE6                     	;# 
  3682  0FE7                     	;# 
  3683  0FE8                     	;# 
  3684  0FE9                     	;# 
  3685  0FEA                     	;# 
  3686  0FEB                     	;# 
  3687  0FED                     	;# 
  3688  0FEE                     	;# 
  3689  0FEF                     	;# 
  3690  0000                     	;# 
  3691  0001                     	;# 
  3692  0002                     	;# 
  3693  0003                     	;# 
  3694  0004                     	;# 
  3695  0005                     	;# 
  3696  0006                     	;# 
  3697  0007                     	;# 
  3698  0008                     	;# 
  3699  0009                     	;# 
  3700  000A                     	;# 
  3701  000B                     	;# 
  3702  000C                     	;# 
  3703  000D                     	;# 
  3704  000E                     	;# 
  3705  0010                     	;# 
  3706  0011                     	;# 
  3707  0012                     	;# 
  3708  0013                     	;# 
  3709  0014                     	;# 
  3710  0015                     	;# 
  3711  0015                     	;# 
  3712  0016                     	;# 
  3713  0016                     	;# 
  3714  0017                     	;# 
  3715  0018                     	;# 
  3716  0019                     	;# 
  3717  0019                     	;# 
  3718  001A                     	;# 
  3719  001B                     	;# 
  3720  001C                     	;# 
  3721  001D                     	;# 
  3722  001E                     	;# 
  3723  001F                     	;# 
  3724  008C                     	;# 
  3725  008D                     	;# 
  3726  008E                     	;# 
  3727  0090                     	;# 
  3728  0091                     	;# 
  3729  0092                     	;# 
  3730  0093                     	;# 
  3731  0094                     	;# 
  3732  0097                     	;# 
  3733  009B                     	;# 
  3734  009B                     	;# 
  3735  009C                     	;# 
  3736  009D                     	;# 
  3737  009E                     	;# 
  3738  009F                     	;# 
  3739  010C                     	;# 
  3740  010D                     	;# 
  3741  010E                     	;# 
  3742  0111                     	;# 
  3743  0112                     	;# 
  3744  0113                     	;# 
  3745  0114                     	;# 
  3746  0115                     	;# 
  3747  0116                     	;# 
  3748  0117                     	;# 
  3749  0118                     	;# 
  3750  0119                     	;# 
  3751  018C                     	;# 
  3752  018D                     	;# 
  3753  018E                     	;# 
  3754  0197                     	;# 
  3755  0199                     	;# 
  3756  0199                     	;# 
  3757  0199                     	;# 
  3758  019A                     	;# 
  3759  019A                     	;# 
  3760  019A                     	;# 
  3761  019B                     	;# 
  3762  019B                     	;# 
  3763  019B                     	;# 
  3764  019B                     	;# 
  3765  019B                     	;# 
  3766  019C                     	;# 
  3767  019C                     	;# 
  3768  019C                     	;# 
  3769  019D                     	;# 
  3770  019D                     	;# 
  3771  019D                     	;# 
  3772  019E                     	;# 
  3773  019E                     	;# 
  3774  019E                     	;# 
  3775  019F                     	;# 
  3776  019F                     	;# 
  3777  019F                     	;# 
  3778  019F                     	;# 
  3779  019F                     	;# 
  3780  020C                     	;# 
  3781  020D                     	;# 
  3782  020E                     	;# 
  3783  0211                     	;# 
  3784  0211                     	;# 
  3785  0212                     	;# 
  3786  0212                     	;# 
  3787  0213                     	;# 
  3788  0213                     	;# 
  3789  0214                     	;# 
  3790  0214                     	;# 
  3791  0215                     	;# 
  3792  0215                     	;# 
  3793  0215                     	;# 
  3794  0215                     	;# 
  3795  0216                     	;# 
  3796  0216                     	;# 
  3797  0217                     	;# 
  3798  0217                     	;# 
  3799  0219                     	;# 
  3800  021A                     	;# 
  3801  021B                     	;# 
  3802  021C                     	;# 
  3803  021D                     	;# 
  3804  021D                     	;# 
  3805  021E                     	;# 
  3806  021F                     	;# 
  3807  028C                     	;# 
  3808  028D                     	;# 
  3809  028E                     	;# 
  3810  0291                     	;# 
  3811  0291                     	;# 
  3812  0292                     	;# 
  3813  0293                     	;# 
  3814  0294                     	;# 
  3815  0295                     	;# 
  3816  0295                     	;# 
  3817  0296                     	;# 
  3818  0297                     	;# 
  3819  0298                     	;# 
  3820  029F                     	;# 
  3821  030C                     	;# 
  3822  030D                     	;# 
  3823  030E                     	;# 
  3824  0311                     	;# 
  3825  0311                     	;# 
  3826  0312                     	;# 
  3827  0313                     	;# 
  3828  0314                     	;# 
  3829  0315                     	;# 
  3830  0315                     	;# 
  3831  0316                     	;# 
  3832  0317                     	;# 
  3833  0318                     	;# 
  3834  038C                     	;# 
  3835  038D                     	;# 
  3836  038E                     	;# 
  3837  0391                     	;# 
  3838  0392                     	;# 
  3839  0393                     	;# 
  3840  0394                     	;# 
  3841  0395                     	;# 
  3842  0396                     	;# 
  3843  0397                     	;# 
  3844  0398                     	;# 
  3845  0399                     	;# 
  3846  039A                     	;# 
  3847  039C                     	;# 
  3848  039D                     	;# 
  3849  039E                     	;# 
  3850  039F                     	;# 
  3851  0411                     	;# 
  3852  0411                     	;# 
  3853  0412                     	;# 
  3854  0413                     	;# 
  3855  0414                     	;# 
  3856  0415                     	;# 
  3857  0416                     	;# 
  3858  0417                     	;# 
  3859  0418                     	;# 
  3860  0418                     	;# 
  3861  0419                     	;# 
  3862  041A                     	;# 
  3863  041B                     	;# 
  3864  041C                     	;# 
  3865  041D                     	;# 
  3866  041E                     	;# 
  3867  041F                     	;# 
  3868  0498                     	;# 
  3869  0498                     	;# 
  3870  0499                     	;# 
  3871  049A                     	;# 
  3872  049B                     	;# 
  3873  049B                     	;# 
  3874  049C                     	;# 
  3875  049D                     	;# 
  3876  049E                     	;# 
  3877  049F                     	;# 
  3878  0617                     	;# 
  3879  0618                     	;# 
  3880  0619                     	;# 
  3881  0619                     	;# 
  3882  061A                     	;# 
  3883  061B                     	;# 
  3884  061C                     	;# 
  3885  061C                     	;# 
  3886  061F                     	;# 
  3887  0691                     	;# 
  3888  0692                     	;# 
  3889  0693                     	;# 
  3890  0694                     	;# 
  3891  0695                     	;# 
  3892  0696                     	;# 
  3893  0697                     	;# 
  3894  0698                     	;# 
  3895  0699                     	;# 
  3896  0711                     	;# 
  3897  0712                     	;# 
  3898  0713                     	;# 
  3899  0714                     	;# 
  3900  0715                     	;# 
  3901  0716                     	;# 
  3902  0717                     	;# 
  3903  0718                     	;# 
  3904  0719                     	;# 
  3905  0891                     	;# 
  3906  0891                     	;# 
  3907  0891                     	;# 
  3908  0891                     	;# 
  3909  0891                     	;# 
  3910  0891                     	;# 
  3911  0892                     	;# 
  3912  0892                     	;# 
  3913  0892                     	;# 
  3914  0893                     	;# 
  3915  0893                     	;# 
  3916  0893                     	;# 
  3917  0893                     	;# 
  3918  0893                     	;# 
  3919  0893                     	;# 
  3920  0894                     	;# 
  3921  0894                     	;# 
  3922  0894                     	;# 
  3923  0895                     	;# 
  3924  0895                     	;# 
  3925  0895                     	;# 
  3926  0896                     	;# 
  3927  0896                     	;# 
  3928  0896                     	;# 
  3929  089B                     	;# 
  3930  0911                     	;# 
  3931  0912                     	;# 
  3932  0913                     	;# 
  3933  0914                     	;# 
  3934  0915                     	;# 
  3935  0916                     	;# 
  3936  0918                     	;# 
  3937  0919                     	;# 
  3938  091A                     	;# 
  3939  091B                     	;# 
  3940  091C                     	;# 
  3941  091D                     	;# 
  3942  091E                     	;# 
  3943  091F                     	;# 
  3944  0E0F                     	;# 
  3945  0E10                     	;# 
  3946  0E11                     	;# 
  3947  0E12                     	;# 
  3948  0E13                     	;# 
  3949  0E14                     	;# 
  3950  0E15                     	;# 
  3951  0E16                     	;# 
  3952  0E17                     	;# 
  3953  0E18                     	;# 
  3954  0E19                     	;# 
  3955  0E1A                     	;# 
  3956  0E1B                     	;# 
  3957  0E1C                     	;# 
  3958  0E1D                     	;# 
  3959  0E1E                     	;# 
  3960  0E1F                     	;# 
  3961  0E20                     	;# 
  3962  0E21                     	;# 
  3963  0E22                     	;# 
  3964  0E24                     	;# 
  3965  0E25                     	;# 
  3966  0E28                     	;# 
  3967  0E29                     	;# 
  3968  0E2A                     	;# 
  3969  0E2B                     	;# 
  3970  0E2C                     	;# 
  3971  0E2D                     	;# 
  3972  0E2E                     	;# 
  3973  0E2F                     	;# 
  3974  0E90                     	;# 
  3975  0E91                     	;# 
  3976  0E92                     	;# 
  3977  0E94                     	;# 
  3978  0E95                     	;# 
  3979  0E9C                     	;# 
  3980  0E9D                     	;# 
  3981  0E9E                     	;# 
  3982  0E9F                     	;# 
  3983  0EA0                     	;# 
  3984  0EA1                     	;# 
  3985  0EA2                     	;# 
  3986  0EA3                     	;# 
  3987  0EA4                     	;# 
  3988  0EA5                     	;# 
  3989  0EA6                     	;# 
  3990  0EA7                     	;# 
  3991  0F0F                     	;# 
  3992  0F10                     	;# 
  3993  0F11                     	;# 
  3994  0F12                     	;# 
  3995  0F13                     	;# 
  3996  0F14                     	;# 
  3997  0F15                     	;# 
  3998  0F16                     	;# 
  3999  0F17                     	;# 
  4000  0F18                     	;# 
  4001  0F19                     	;# 
  4002  0F1A                     	;# 
  4003  0F1B                     	;# 
  4004  0F1C                     	;# 
  4005  0F1D                     	;# 
  4006  0F1E                     	;# 
  4007  0F1F                     	;# 
  4008  0F20                     	;# 
  4009  0F21                     	;# 
  4010  0F22                     	;# 
  4011  0F23                     	;# 
  4012  0F24                     	;# 
  4013  0F25                     	;# 
  4014  0F26                     	;# 
  4015  0F27                     	;# 
  4016  0F28                     	;# 
  4017  0F29                     	;# 
  4018  0F2A                     	;# 
  4019  0F2B                     	;# 
  4020  0F2C                     	;# 
  4021  0F2D                     	;# 
  4022  0F2E                     	;# 
  4023  0F2F                     	;# 
  4024  0F30                     	;# 
  4025  0F31                     	;# 
  4026  0F32                     	;# 
  4027  0F33                     	;# 
  4028  0F34                     	;# 
  4029  0F35                     	;# 
  4030  0F36                     	;# 
  4031  0F37                     	;# 
  4032  0FE4                     	;# 
  4033  0FE5                     	;# 
  4034  0FE6                     	;# 
  4035  0FE7                     	;# 
  4036  0FE8                     	;# 
  4037  0FE9                     	;# 
  4038  0FEA                     	;# 
  4039  0FEB                     	;# 
  4040  0FED                     	;# 
  4041  0FEE                     	;# 
  4042  0FEF                     	;# 
  4043  0000                     	;# 
  4044  0001                     	;# 
  4045  0002                     	;# 
  4046  0003                     	;# 
  4047  0004                     	;# 
  4048  0005                     	;# 
  4049  0006                     	;# 
  4050  0007                     	;# 
  4051  0008                     	;# 
  4052  0009                     	;# 
  4053  000A                     	;# 
  4054  000B                     	;# 
  4055  000C                     	;# 
  4056  000D                     	;# 
  4057  000E                     	;# 
  4058  0010                     	;# 
  4059  0011                     	;# 
  4060  0012                     	;# 
  4061  0013                     	;# 
  4062  0014                     	;# 
  4063  0015                     	;# 
  4064  0015                     	;# 
  4065  0016                     	;# 
  4066  0016                     	;# 
  4067  0017                     	;# 
  4068  0018                     	;# 
  4069  0019                     	;# 
  4070  0019                     	;# 
  4071  001A                     	;# 
  4072  001B                     	;# 
  4073  001C                     	;# 
  4074  001D                     	;# 
  4075  001E                     	;# 
  4076  001F                     	;# 
  4077  008C                     	;# 
  4078  008D                     	;# 
  4079  008E                     	;# 
  4080  0090                     	;# 
  4081  0091                     	;# 
  4082  0092                     	;# 
  4083  0093                     	;# 
  4084  0094                     	;# 
  4085  0097                     	;# 
  4086  009B                     	;# 
  4087  009B                     	;# 
  4088  009C                     	;# 
  4089  009D                     	;# 
  4090  009E                     	;# 
  4091  009F                     	;# 
  4092  010C                     	;# 
  4093  010D                     	;# 
  4094  010E                     	;# 
  4095  0111                     	;# 
  4096  0112                     	;# 
  4097  0113                     	;# 
  4098  0114                     	;# 
  4099  0115                     	;# 
  4100  0116                     	;# 
  4101  0117                     	;# 
  4102  0118                     	;# 
  4103  0119                     	;# 
  4104  018C                     	;# 
  4105  018D                     	;# 
  4106  018E                     	;# 
  4107  0197                     	;# 
  4108  0199                     	;# 
  4109  0199                     	;# 
  4110  0199                     	;# 
  4111  019A                     	;# 
  4112  019A                     	;# 
  4113  019A                     	;# 
  4114  019B                     	;# 
  4115  019B                     	;# 
  4116  019B                     	;# 
  4117  019B                     	;# 
  4118  019B                     	;# 
  4119  019C                     	;# 
  4120  019C                     	;# 
  4121  019C                     	;# 
  4122  019D                     	;# 
  4123  019D                     	;# 
  4124  019D                     	;# 
  4125  019E                     	;# 
  4126  019E                     	;# 
  4127  019E                     	;# 
  4128  019F                     	;# 
  4129  019F                     	;# 
  4130  019F                     	;# 
  4131  019F                     	;# 
  4132  019F                     	;# 
  4133  020C                     	;# 
  4134  020D                     	;# 
  4135  020E                     	;# 
  4136  0211                     	;# 
  4137  0211                     	;# 
  4138  0212                     	;# 
  4139  0212                     	;# 
  4140  0213                     	;# 
  4141  0213                     	;# 
  4142  0214                     	;# 
  4143  0214                     	;# 
  4144  0215                     	;# 
  4145  0215                     	;# 
  4146  0215                     	;# 
  4147  0215                     	;# 
  4148  0216                     	;# 
  4149  0216                     	;# 
  4150  0217                     	;# 
  4151  0217                     	;# 
  4152  0219                     	;# 
  4153  021A                     	;# 
  4154  021B                     	;# 
  4155  021C                     	;# 
  4156  021D                     	;# 
  4157  021D                     	;# 
  4158  021E                     	;# 
  4159  021F                     	;# 
  4160  028C                     	;# 
  4161  028D                     	;# 
  4162  028E                     	;# 
  4163  0291                     	;# 
  4164  0291                     	;# 
  4165  0292                     	;# 
  4166  0293                     	;# 
  4167  0294                     	;# 
  4168  0295                     	;# 
  4169  0295                     	;# 
  4170  0296                     	;# 
  4171  0297                     	;# 
  4172  0298                     	;# 
  4173  029F                     	;# 
  4174  030C                     	;# 
  4175  030D                     	;# 
  4176  030E                     	;# 
  4177  0311                     	;# 
  4178  0311                     	;# 
  4179  0312                     	;# 
  4180  0313                     	;# 
  4181  0314                     	;# 
  4182  0315                     	;# 
  4183  0315                     	;# 
  4184  0316                     	;# 
  4185  0317                     	;# 
  4186  0318                     	;# 
  4187  038C                     	;# 
  4188  038D                     	;# 
  4189  038E                     	;# 
  4190  0391                     	;# 
  4191  0392                     	;# 
  4192  0393                     	;# 
  4193  0394                     	;# 
  4194  0395                     	;# 
  4195  0396                     	;# 
  4196  0397                     	;# 
  4197  0398                     	;# 
  4198  0399                     	;# 
  4199  039A                     	;# 
  4200  039C                     	;# 
  4201  039D                     	;# 
  4202  039E                     	;# 
  4203  039F                     	;# 
  4204  0411                     	;# 
  4205  0411                     	;# 
  4206  0412                     	;# 
  4207  0413                     	;# 
  4208  0414                     	;# 
  4209  0415                     	;# 
  4210  0416                     	;# 
  4211  0417                     	;# 
  4212  0418                     	;# 
  4213  0418                     	;# 
  4214  0419                     	;# 
  4215  041A                     	;# 
  4216  041B                     	;# 
  4217  041C                     	;# 
  4218  041D                     	;# 
  4219  041E                     	;# 
  4220  041F                     	;# 
  4221  0498                     	;# 
  4222  0498                     	;# 
  4223  0499                     	;# 
  4224  049A                     	;# 
  4225  049B                     	;# 
  4226  049B                     	;# 
  4227  049C                     	;# 
  4228  049D                     	;# 
  4229  049E                     	;# 
  4230  049F                     	;# 
  4231  0617                     	;# 
  4232  0618                     	;# 
  4233  0619                     	;# 
  4234  0619                     	;# 
  4235  061A                     	;# 
  4236  061B                     	;# 
  4237  061C                     	;# 
  4238  061C                     	;# 
  4239  061F                     	;# 
  4240  0691                     	;# 
  4241  0692                     	;# 
  4242  0693                     	;# 
  4243  0694                     	;# 
  4244  0695                     	;# 
  4245  0696                     	;# 
  4246  0697                     	;# 
  4247  0698                     	;# 
  4248  0699                     	;# 
  4249  0711                     	;# 
  4250  0712                     	;# 
  4251  0713                     	;# 
  4252  0714                     	;# 
  4253  0715                     	;# 
  4254  0716                     	;# 
  4255  0717                     	;# 
  4256  0718                     	;# 
  4257  0719                     	;# 
  4258  0891                     	;# 
  4259  0891                     	;# 
  4260  0891                     	;# 
  4261  0891                     	;# 
  4262  0891                     	;# 
  4263  0891                     	;# 
  4264  0892                     	;# 
  4265  0892                     	;# 
  4266  0892                     	;# 
  4267  0893                     	;# 
  4268  0893                     	;# 
  4269  0893                     	;# 
  4270  0893                     	;# 
  4271  0893                     	;# 
  4272  0893                     	;# 
  4273  0894                     	;# 
  4274  0894                     	;# 
  4275  0894                     	;# 
  4276  0895                     	;# 
  4277  0895                     	;# 
  4278  0895                     	;# 
  4279  0896                     	;# 
  4280  0896                     	;# 
  4281  0896                     	;# 
  4282  089B                     	;# 
  4283  0911                     	;# 
  4284  0912                     	;# 
  4285  0913                     	;# 
  4286  0914                     	;# 
  4287  0915                     	;# 
  4288  0916                     	;# 
  4289  0918                     	;# 
  4290  0919                     	;# 
  4291  091A                     	;# 
  4292  091B                     	;# 
  4293  091C                     	;# 
  4294  091D                     	;# 
  4295  091E                     	;# 
  4296  091F                     	;# 
  4297  0E0F                     	;# 
  4298  0E10                     	;# 
  4299  0E11                     	;# 
  4300  0E12                     	;# 
  4301  0E13                     	;# 
  4302  0E14                     	;# 
  4303  0E15                     	;# 
  4304  0E16                     	;# 
  4305  0E17                     	;# 
  4306  0E18                     	;# 
  4307  0E19                     	;# 
  4308  0E1A                     	;# 
  4309  0E1B                     	;# 
  4310  0E1C                     	;# 
  4311  0E1D                     	;# 
  4312  0E1E                     	;# 
  4313  0E1F                     	;# 
  4314  0E20                     	;# 
  4315  0E21                     	;# 
  4316  0E22                     	;# 
  4317  0E24                     	;# 
  4318  0E25                     	;# 
  4319  0E28                     	;# 
  4320  0E29                     	;# 
  4321  0E2A                     	;# 
  4322  0E2B                     	;# 
  4323  0E2C                     	;# 
  4324  0E2D                     	;# 
  4325  0E2E                     	;# 
  4326  0E2F                     	;# 
  4327  0E90                     	;# 
  4328  0E91                     	;# 
  4329  0E92                     	;# 
  4330  0E94                     	;# 
  4331  0E95                     	;# 
  4332  0E9C                     	;# 
  4333  0E9D                     	;# 
  4334  0E9E                     	;# 
  4335  0E9F                     	;# 
  4336  0EA0                     	;# 
  4337  0EA1                     	;# 
  4338  0EA2                     	;# 
  4339  0EA3                     	;# 
  4340  0EA4                     	;# 
  4341  0EA5                     	;# 
  4342  0EA6                     	;# 
  4343  0EA7                     	;# 
  4344  0F0F                     	;# 
  4345  0F10                     	;# 
  4346  0F11                     	;# 
  4347  0F12                     	;# 
  4348  0F13                     	;# 
  4349  0F14                     	;# 
  4350  0F15                     	;# 
  4351  0F16                     	;# 
  4352  0F17                     	;# 
  4353  0F18                     	;# 
  4354  0F19                     	;# 
  4355  0F1A                     	;# 
  4356  0F1B                     	;# 
  4357  0F1C                     	;# 
  4358  0F1D                     	;# 
  4359  0F1E                     	;# 
  4360  0F1F                     	;# 
  4361  0F20                     	;# 
  4362  0F21                     	;# 
  4363  0F22                     	;# 
  4364  0F23                     	;# 
  4365  0F24                     	;# 
  4366  0F25                     	;# 
  4367  0F26                     	;# 
  4368  0F27                     	;# 
  4369  0F28                     	;# 
  4370  0F29                     	;# 
  4371  0F2A                     	;# 
  4372  0F2B                     	;# 
  4373  0F2C                     	;# 
  4374  0F2D                     	;# 
  4375  0F2E                     	;# 
  4376  0F2F                     	;# 
  4377  0F30                     	;# 
  4378  0F31                     	;# 
  4379  0F32                     	;# 
  4380  0F33                     	;# 
  4381  0F34                     	;# 
  4382  0F35                     	;# 
  4383  0F36                     	;# 
  4384  0F37                     	;# 
  4385  0FE4                     	;# 
  4386  0FE5                     	;# 
  4387  0FE6                     	;# 
  4388  0FE7                     	;# 
  4389  0FE8                     	;# 
  4390  0FE9                     	;# 
  4391  0FEA                     	;# 
  4392  0FEB                     	;# 
  4393  0FED                     	;# 
  4394  0FEE                     	;# 
  4395  0FEF                     	;# 
  4396  0000                     	;# 
  4397  0001                     	;# 
  4398  0002                     	;# 
  4399  0003                     	;# 
  4400  0004                     	;# 
  4401  0005                     	;# 
  4402  0006                     	;# 
  4403  0007                     	;# 
  4404  0008                     	;# 
  4405  0009                     	;# 
  4406  000A                     	;# 
  4407  000B                     	;# 
  4408  000C                     	;# 
  4409  000D                     	;# 
  4410  000E                     	;# 
  4411  0010                     	;# 
  4412  0011                     	;# 
  4413  0012                     	;# 
  4414  0013                     	;# 
  4415  0014                     	;# 
  4416  0015                     	;# 
  4417  0015                     	;# 
  4418  0016                     	;# 
  4419  0016                     	;# 
  4420  0017                     	;# 
  4421  0018                     	;# 
  4422  0019                     	;# 
  4423  0019                     	;# 
  4424  001A                     	;# 
  4425  001B                     	;# 
  4426  001C                     	;# 
  4427  001D                     	;# 
  4428  001E                     	;# 
  4429  001F                     	;# 
  4430  008C                     	;# 
  4431  008D                     	;# 
  4432  008E                     	;# 
  4433  0090                     	;# 
  4434  0091                     	;# 
  4435  0092                     	;# 
  4436  0093                     	;# 
  4437  0094                     	;# 
  4438  0097                     	;# 
  4439  009B                     	;# 
  4440  009B                     	;# 
  4441  009C                     	;# 
  4442  009D                     	;# 
  4443  009E                     	;# 
  4444  009F                     	;# 
  4445  010C                     	;# 
  4446  010D                     	;# 
  4447  010E                     	;# 
  4448  0111                     	;# 
  4449  0112                     	;# 
  4450  0113                     	;# 
  4451  0114                     	;# 
  4452  0115                     	;# 
  4453  0116                     	;# 
  4454  0117                     	;# 
  4455  0118                     	;# 
  4456  0119                     	;# 
  4457  018C                     	;# 
  4458  018D                     	;# 
  4459  018E                     	;# 
  4460  0197                     	;# 
  4461  0199                     	;# 
  4462  0199                     	;# 
  4463  0199                     	;# 
  4464  019A                     	;# 
  4465  019A                     	;# 
  4466  019A                     	;# 
  4467  019B                     	;# 
  4468  019B                     	;# 
  4469  019B                     	;# 
  4470  019B                     	;# 
  4471  019B                     	;# 
  4472  019C                     	;# 
  4473  019C                     	;# 
  4474  019C                     	;# 
  4475  019D                     	;# 
  4476  019D                     	;# 
  4477  019D                     	;# 
  4478  019E                     	;# 
  4479  019E                     	;# 
  4480  019E                     	;# 
  4481  019F                     	;# 
  4482  019F                     	;# 
  4483  019F                     	;# 
  4484  019F                     	;# 
  4485  019F                     	;# 
  4486  020C                     	;# 
  4487  020D                     	;# 
  4488  020E                     	;# 
  4489  0211                     	;# 
  4490  0211                     	;# 
  4491  0212                     	;# 
  4492  0212                     	;# 
  4493  0213                     	;# 
  4494  0213                     	;# 
  4495  0214                     	;# 
  4496  0214                     	;# 
  4497  0215                     	;# 
  4498  0215                     	;# 
  4499  0215                     	;# 
  4500  0215                     	;# 
  4501  0216                     	;# 
  4502  0216                     	;# 
  4503  0217                     	;# 
  4504  0217                     	;# 
  4505  0219                     	;# 
  4506  021A                     	;# 
  4507  021B                     	;# 
  4508  021C                     	;# 
  4509  021D                     	;# 
  4510  021D                     	;# 
  4511  021E                     	;# 
  4512  021F                     	;# 
  4513  028C                     	;# 
  4514  028D                     	;# 
  4515  028E                     	;# 
  4516  0291                     	;# 
  4517  0291                     	;# 
  4518  0292                     	;# 
  4519  0293                     	;# 
  4520  0294                     	;# 
  4521  0295                     	;# 
  4522  0295                     	;# 
  4523  0296                     	;# 
  4524  0297                     	;# 
  4525  0298                     	;# 
  4526  029F                     	;# 
  4527  030C                     	;# 
  4528  030D                     	;# 
  4529  030E                     	;# 
  4530  0311                     	;# 
  4531  0311                     	;# 
  4532  0312                     	;# 
  4533  0313                     	;# 
  4534  0314                     	;# 
  4535  0315                     	;# 
  4536  0315                     	;# 
  4537  0316                     	;# 
  4538  0317                     	;# 
  4539  0318                     	;# 
  4540  038C                     	;# 
  4541  038D                     	;# 
  4542  038E                     	;# 
  4543  0391                     	;# 
  4544  0392                     	;# 
  4545  0393                     	;# 
  4546  0394                     	;# 
  4547  0395                     	;# 
  4548  0396                     	;# 
  4549  0397                     	;# 
  4550  0398                     	;# 
  4551  0399                     	;# 
  4552  039A                     	;# 
  4553  039C                     	;# 
  4554  039D                     	;# 
  4555  039E                     	;# 
  4556  039F                     	;# 
  4557  0411                     	;# 
  4558  0411                     	;# 
  4559  0412                     	;# 
  4560  0413                     	;# 
  4561  0414                     	;# 
  4562  0415                     	;# 
  4563  0416                     	;# 
  4564  0417                     	;# 
  4565  0418                     	;# 
  4566  0418                     	;# 
  4567  0419                     	;# 
  4568  041A                     	;# 
  4569  041B                     	;# 
  4570  041C                     	;# 
  4571  041D                     	;# 
  4572  041E                     	;# 
  4573  041F                     	;# 
  4574  0498                     	;# 
  4575  0498                     	;# 
  4576  0499                     	;# 
  4577  049A                     	;# 
  4578  049B                     	;# 
  4579  049B                     	;# 
  4580  049C                     	;# 
  4581  049D                     	;# 
  4582  049E                     	;# 
  4583  049F                     	;# 
  4584  0617                     	;# 
  4585  0618                     	;# 
  4586  0619                     	;# 
  4587  0619                     	;# 
  4588  061A                     	;# 
  4589  061B                     	;# 
  4590  061C                     	;# 
  4591  061C                     	;# 
  4592  061F                     	;# 
  4593  0691                     	;# 
  4594  0692                     	;# 
  4595  0693                     	;# 
  4596  0694                     	;# 
  4597  0695                     	;# 
  4598  0696                     	;# 
  4599  0697                     	;# 
  4600  0698                     	;# 
  4601  0699                     	;# 
  4602  0711                     	;# 
  4603  0712                     	;# 
  4604  0713                     	;# 
  4605  0714                     	;# 
  4606  0715                     	;# 
  4607  0716                     	;# 
  4608  0717                     	;# 
  4609  0718                     	;# 
  4610  0719                     	;# 
  4611  0891                     	;# 
  4612  0891                     	;# 
  4613  0891                     	;# 
  4614  0891                     	;# 
  4615  0891                     	;# 
  4616  0891                     	;# 
  4617  0892                     	;# 
  4618  0892                     	;# 
  4619  0892                     	;# 
  4620  0893                     	;# 
  4621  0893                     	;# 
  4622  0893                     	;# 
  4623  0893                     	;# 
  4624  0893                     	;# 
  4625  0893                     	;# 
  4626  0894                     	;# 
  4627  0894                     	;# 
  4628  0894                     	;# 
  4629  0895                     	;# 
  4630  0895                     	;# 
  4631  0895                     	;# 
  4632  0896                     	;# 
  4633  0896                     	;# 
  4634  0896                     	;# 
  4635  089B                     	;# 
  4636  0911                     	;# 
  4637  0912                     	;# 
  4638  0913                     	;# 
  4639  0914                     	;# 
  4640  0915                     	;# 
  4641  0916                     	;# 
  4642  0918                     	;# 
  4643  0919                     	;# 
  4644  091A                     	;# 
  4645  091B                     	;# 
  4646  091C                     	;# 
  4647  091D                     	;# 
  4648  091E                     	;# 
  4649  091F                     	;# 
  4650  0E0F                     	;# 
  4651  0E10                     	;# 
  4652  0E11                     	;# 
  4653  0E12                     	;# 
  4654  0E13                     	;# 
  4655  0E14                     	;# 
  4656  0E15                     	;# 
  4657  0E16                     	;# 
  4658  0E17                     	;# 
  4659  0E18                     	;# 
  4660  0E19                     	;# 
  4661  0E1A                     	;# 
  4662  0E1B                     	;# 
  4663  0E1C                     	;# 
  4664  0E1D                     	;# 
  4665  0E1E                     	;# 
  4666  0E1F                     	;# 
  4667  0E20                     	;# 
  4668  0E21                     	;# 
  4669  0E22                     	;# 
  4670  0E24                     	;# 
  4671  0E25                     	;# 
  4672  0E28                     	;# 
  4673  0E29                     	;# 
  4674  0E2A                     	;# 
  4675  0E2B                     	;# 
  4676  0E2C                     	;# 
  4677  0E2D                     	;# 
  4678  0E2E                     	;# 
  4679  0E2F                     	;# 
  4680  0E90                     	;# 
  4681  0E91                     	;# 
  4682  0E92                     	;# 
  4683  0E94                     	;# 
  4684  0E95                     	;# 
  4685  0E9C                     	;# 
  4686  0E9D                     	;# 
  4687  0E9E                     	;# 
  4688  0E9F                     	;# 
  4689  0EA0                     	;# 
  4690  0EA1                     	;# 
  4691  0EA2                     	;# 
  4692  0EA3                     	;# 
  4693  0EA4                     	;# 
  4694  0EA5                     	;# 
  4695  0EA6                     	;# 
  4696  0EA7                     	;# 
  4697  0F0F                     	;# 
  4698  0F10                     	;# 
  4699  0F11                     	;# 
  4700  0F12                     	;# 
  4701  0F13                     	;# 
  4702  0F14                     	;# 
  4703  0F15                     	;# 
  4704  0F16                     	;# 
  4705  0F17                     	;# 
  4706  0F18                     	;# 
  4707  0F19                     	;# 
  4708  0F1A                     	;# 
  4709  0F1B                     	;# 
  4710  0F1C                     	;# 
  4711  0F1D                     	;# 
  4712  0F1E                     	;# 
  4713  0F1F                     	;# 
  4714  0F20                     	;# 
  4715  0F21                     	;# 
  4716  0F22                     	;# 
  4717  0F23                     	;# 
  4718  0F24                     	;# 
  4719  0F25                     	;# 
  4720  0F26                     	;# 
  4721  0F27                     	;# 
  4722  0F28                     	;# 
  4723  0F29                     	;# 
  4724  0F2A                     	;# 
  4725  0F2B                     	;# 
  4726  0F2C                     	;# 
  4727  0F2D                     	;# 
  4728  0F2E                     	;# 
  4729  0F2F                     	;# 
  4730  0F30                     	;# 
  4731  0F31                     	;# 
  4732  0F32                     	;# 
  4733  0F33                     	;# 
  4734  0F34                     	;# 
  4735  0F35                     	;# 
  4736  0F36                     	;# 
  4737  0F37                     	;# 
  4738  0FE4                     	;# 
  4739  0FE5                     	;# 
  4740  0FE6                     	;# 
  4741  0FE7                     	;# 
  4742  0FE8                     	;# 
  4743  0FE9                     	;# 
  4744  0FEA                     	;# 
  4745  0FEB                     	;# 
  4746  0FED                     	;# 
  4747  0FEE                     	;# 
  4748  0FEF                     	;# 
  4749                           
  4750                           	psect	idataCOMMON
  4751  07FF                     __pidataCOMMON:	
  4752                           
  4753                           ;initializer for _val
  4754  07FF  3404               	retlw	4
  4755                           
  4756                           	psect	idataBANK0
  4757  099A                     __pidataBANK0:	
  4758                           
  4759                           ;initializer for _start
  4760  099A  3401               	retlw	1
  4761                           
  4762                           	psect	idataBANK2
  4763  0A71                     __pidataBANK2:	
  4764                           
  4765                           ;initializer for _names
  4766  0A71  343D               	retlw	low (STR_1| (0+32768))
  4767  0A72  3490               	retlw	high (STR_1| (0+32768))
  4768  0A73  3430               	retlw	low (STR_2| (0+32768))
  4769  0A74  3490               	retlw	high (STR_2| (0+32768))
  4770  0A75  3420               	retlw	low (STR_3| (0+32768))
  4771  0A76  3490               	retlw	high (STR_3| (0+32768))
  4772  0A77  3449               	retlw	low (STR_4| (0+32768))
  4773  0A78  3490               	retlw	high (STR_4| (0+32768))
  4774                           
  4775                           	psect	stringtext1
  4776  1000                     __pstringtext1:	
  4777  1000                     _fsmStateTable:	
  4778  1000  3408               	retlw	low _do_I2C_IDLE
  4779  1001  340A               	retlw	high _do_I2C_IDLE
  4780  1002  3449               	retlw	low _do_I2C_SEND_ADR_READ
  4781  1003  340A               	retlw	high _do_I2C_SEND_ADR_READ
  4782  1004  342C               	retlw	low _do_I2C_SEND_ADR_WRITE
  4783  1005  340A               	retlw	high _do_I2C_SEND_ADR_WRITE
  4784  1006  3462               	retlw	low _do_I2C_TX
  4785  1007  340F               	retlw	high _do_I2C_TX
  4786  1008  34D2               	retlw	low _do_I2C_RX
  4787  1009  340E               	retlw	high _do_I2C_RX
  4788  100A  340D               	retlw	low _do_I2C_RCEN
  4789  100B  340A               	retlw	high _do_I2C_RCEN
  4790  100C  3494               	retlw	low _do_I2C_TX_EMPTY
  4791  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  4792  100E  34DB               	retlw	low _do_I2C_SEND_RESTART_READ
  4793  100F  3409               	retlw	high _do_I2C_SEND_RESTART_READ
  4794  1010  34DF               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4795  1011  3409               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4796  1012  34E3               	retlw	low _do_I2C_SEND_RESTART
  4797  1013  3409               	retlw	high _do_I2C_SEND_RESTART
  4798  1014  34E7               	retlw	low _do_I2C_SEND_STOP
  4799  1015  3409               	retlw	high _do_I2C_SEND_STOP
  4800  1016  34EB               	retlw	low _do_I2C_DO_ACK
  4801  1017  3409               	retlw	high _do_I2C_DO_ACK
  4802  1018  34EF               	retlw	low _do_I2C_DO_NACK_STOP
  4803  1019  3409               	retlw	high _do_I2C_DO_NACK_STOP
  4804  101A  34F3               	retlw	low _do_I2C_DO_NACK_RESTART
  4805  101B  3409               	retlw	high _do_I2C_DO_NACK_RESTART
  4806  101C  3425               	retlw	low _do_I2C_RESET
  4807  101D  340A               	retlw	high _do_I2C_RESET
  4808  101E  343E               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4809  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4810  1020                     __end_of_fsmStateTable:	
  4811  001F                     _T2CONbits	set	31
  4812  001F                     _T2CON	set	31
  4813  001D                     _TMR2	set	29
  4814  001E                     _PR2	set	30
  4815  0011                     _PIR1bits	set	17
  4816  000B                     _INTCONbits	set	11
  4817  0010                     _PIR0bits	set	16
  4818  009D                     _ADCON0bits	set	157
  4819  009C                     _ADRESH	set	156
  4820  009B                     _ADRESL	set	155
  4821  009F                     _ADACT	set	159
  4822  009E                     _ADCON1	set	158
  4823  009D                     _ADCON0	set	157
  4824  008E                     _TRISC	set	142
  4825  008D                     _TRISB	set	141
  4826  008C                     _TRISA	set	140
  4827  0097                     _WDTCON	set	151
  4828  0091                     _PIE1bits	set	145
  4829  0090                     _PIE0bits	set	144
  4830  010E                     _LATCbits	set	270
  4831  010E                     _LATC	set	270
  4832  010D                     _LATB	set	269
  4833  010C                     _LATA	set	268
  4834  018C                     _ANSELA	set	396
  4835  018D                     _ANSELB	set	397
  4836  018E                     _ANSELC	set	398
  4837  021C                     _SSP2STATbits	set	540
  4838  0219                     _SSP2BUF	set	537
  4839  021D                     _SSP2CON1bits	set	541
  4840  021A                     _SSP2ADD	set	538
  4841  021D                     _SSP2CON1	set	541
  4842  021C                     _SSP2STAT	set	540
  4843  0214                     _SSP1STATbits	set	532
  4844  0213                     _SSP1MSK	set	531
  4845  0211                     _SSP1BUF	set	529
  4846  0216                     _SSP1CON2bits	set	534
  4847  0212                     _SSP1ADD	set	530
  4848  0216                     _SSP1CON2	set	534
  4849  0215                     _SSP1CON1	set	533
  4850  0214                     _SSP1STAT	set	532
  4851  0215                     _SSP1CON1bits	set	533
  4852  020E                     _WPUC	set	526
  4853  020C                     _WPUA	set	524
  4854  020D                     _WPUB	set	525
  4855  0293                     _CCP1CONbits	set	659
  4856  029F                     _CCPTMRSbits	set	671
  4857  0291                     _CCPR1L	set	657
  4858  0292                     _CCPR1H	set	658
  4859  0293                     _CCP1CON	set	659
  4860  028E                     _ODCONC	set	654
  4861  028D                     _ODCONB	set	653
  4862  028C                     _ODCONA	set	652
  4863  030E                     _SLRCONC	set	782
  4864  030D                     _SLRCONB	set	781
  4865  030C                     _SLRCONA	set	780
  4866  0916                     _PMD5	set	2326
  4867  0915                     _PMD4	set	2325
  4868  0914                     _PMD3	set	2324
  4869  0913                     _PMD2	set	2323
  4870  0912                     _PMD1	set	2322
  4871  0911                     _PMD0	set	2321
  4872  091E                     _OSCTUNE	set	2334
  4873  091F                     _OSCFRQ	set	2335
  4874  091D                     _OSCEN	set	2333
  4875  091B                     _OSCCON3	set	2331
  4876  0919                     _OSCCON1	set	2329
  4877  0E1D                     _SSP2CLKPPS	set	3613
  4878  0E21                     _SSP1DATPPS	set	3617
  4879  0E20                     _SSP1CLKPPS	set	3616
  4880  0E1E                     _SSP2DATPPS	set	3614
  4881  0EA7                     _RC7PPS	set	3751
  4882  0EA2                     _RC2PPS	set	3746
  4883  0E9D                     _RB5PPS	set	3741
  4884  0E9F                     _RB7PPS	set	3743
  4885  0E9E                     _RB6PPS	set	3742
  4886  1020                     STR_3:	
  4887  1020  3441               	retlw	65	;'A'
  4888  1021  346C               	retlw	108	;'l'
  4889  1022  3465               	retlw	101	;'e'
  4890  1023  3478               	retlw	120	;'x'
  4891  1024  3461               	retlw	97	;'a'
  4892  1025  346E               	retlw	110	;'n'
  4893  1026  3464               	retlw	100	;'d'
  4894  1027  3472               	retlw	114	;'r'
  4895  1028  3461               	retlw	97	;'a'
  4896  1029  3420               	retlw	32	;' '
  4897  102A  3446               	retlw	70	;'F'
  4898  102B  3479               	retlw	121	;'y'
  4899  102C  3466               	retlw	102	;'f'
  4900  102D  3466               	retlw	102	;'f'
  4901  102E  3465               	retlw	101	;'e'
  4902  102F  3400               	retlw	0
  4903                           
  4904                           	psect	stringtext2
  4905  1030                     __pstringtext2:	
  4906  1030                     STR_2:	
  4907  1030  344E               	retlw	78	;'N'
  4908  1031  346F               	retlw	111	;'o'
  4909  1032  3465               	retlw	101	;'e'
  4910  1033  346C               	retlw	108	;'l'
  4911  1034  346C               	retlw	108	;'l'
  4912  1035  3465               	retlw	101	;'e'
  4913  1036  3420               	retlw	32	;' '
  4914  1037  3443               	retlw	67	;'C'
  4915  1038  3472               	retlw	114	;'r'
  4916  1039  3461               	retlw	97	;'a'
  4917  103A  346E               	retlw	110	;'n'
  4918  103B  3465               	retlw	101	;'e'
  4919  103C  3400               	retlw	0
  4920                           
  4921                           	psect	stringtext3
  4922  103D                     __pstringtext3:	
  4923  103D                     STR_1:	
  4924  103D  344A               	retlw	74	;'J'
  4925  103E  3475               	retlw	117	;'u'
  4926  103F  3473               	retlw	115	;'s'
  4927  1040  3474               	retlw	116	;'t'
  4928  1041  3469               	retlw	105	;'i'
  4929  1042  346E               	retlw	110	;'n'
  4930  1043  3420               	retlw	32	;' '
  4931  1044  3443               	retlw	67	;'C'
  4932  1045  3468               	retlw	104	;'h'
  4933  1046  3461               	retlw	97	;'a'
  4934  1047  346E               	retlw	110	;'n'
  4935  1048  3400               	retlw	0
  4936                           
  4937                           	psect	stringtext4
  4938  1049                     __pstringtext4:	
  4939  1049                     STR_4:	
  4940  1049  344A               	retlw	74	;'J'
  4941  104A  3465               	retlw	101	;'e'
  4942  104B  3466               	retlw	102	;'f'
  4943  104C  3466               	retlw	102	;'f'
  4944  104D  3420               	retlw	32	;' '
  4945  104E  3447               	retlw	71	;'G'
  4946  104F  3465               	retlw	101	;'e'
  4947  1050  3469               	retlw	105	;'i'
  4948  1051  3473               	retlw	115	;'s'
  4949  1052  3473               	retlw	115	;'s'
  4950  1053  3400               	retlw	0
  4951                           
  4952                           	psect	stringtext5
  4953  0000                     __pstringtext5:	
  4954                           
  4955                           ; #config settings
  4956  0000                     
  4957                           	psect	cinit
  4958  002D                     start_initialization:	
  4959  002D                     __initialization:	
  4960                           
  4961                           ; Initialize objects allocated to COMMON
  4962  002D  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  4963  0030  00FB               	movwf	__pdataCOMMON& (0+127)
  4964                           
  4965                           ; Initialize objects allocated to BANK0
  4966  0031  3189  219A  3180   	fcall	__pidataBANK0	;fetch initializer
  4967  0034  00EF               	movwf	__pdataBANK0& (0+127)
  4968                           
  4969                           ; Initialize objects allocated to BANK2
  4970  0035  3071               	movlw	low __pidataBANK2
  4971  0036  0084               	movwf	4
  4972  0037  308A               	movlw	(high __pidataBANK2)| (0+128)
  4973  0038  0085               	movwf	5
  4974  0039  3060               	movlw	low __pdataBANK2
  4975  003A  0086               	movwf	6
  4976  003B  3001               	movlw	high __pdataBANK2
  4977  003C  0087               	movwf	7
  4978  003D  3008               	movlw	8
  4979  003E  318A  221F  3180   	fcall	init_ram
  4980                           
  4981                           ; Clear objects allocated to COMMON
  4982  0041  01F6               	clrf	__pbssCOMMON& (0+127)
  4983  0042  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  4984  0043  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  4985  0044  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  4986  0045  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  4987                           
  4988                           ; Clear objects allocated to BANK0
  4989  0046  305C               	movlw	low __pbssBANK0
  4990  0047  0084               	movwf	4
  4991  0048  3000               	movlw	high __pbssBANK0
  4992  0049  0085               	movwf	5
  4993  004A  3013               	movlw	19
  4994  004B  318A  2219  3180   	fcall	clear_ram0
  4995                           
  4996                           ; Clear objects allocated to BANK1
  4997  004E  0021               	movlb	1	; select bank1
  4998  004F  01E0               	clrf	__pbssBANK1& (0+127)
  4999  0050  01E1               	clrf	(__pbssBANK1+1)& (0+127)
  5000  0051  01E2               	clrf	(__pbssBANK1+2)& (0+127)
  5001  0052  01E3               	clrf	(__pbssBANK1+3)& (0+127)
  5002                           
  5003                           ; Clear objects allocated to BANK2
  5004  0053  0022               	movlb	2	; select bank2
  5005  0054  01E8               	clrf	__pbssBANK2& (0+127)
  5006  0055  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5007                           
  5008                           ; Clear objects allocated to BANK3
  5009  0056  30A0               	movlw	low __pbssBANK3
  5010  0057  0084               	movwf	4
  5011  0058  3001               	movlw	high __pbssBANK3
  5012  0059  0085               	movwf	5
  5013  005A  301D               	movlw	29
  5014  005B  318A  2219  3180   	fcall	clear_ram0
  5015                           
  5016                           ; Clear objects allocated to BANK4
  5017  005E  3020               	movlw	low __pbssBANK4
  5018  005F  0084               	movwf	4
  5019  0060  3002               	movlw	high __pbssBANK4
  5020  0061  0085               	movwf	5
  5021  0062  3044               	movlw	68
  5022  0063  318A  2219         	fcall	clear_ram0
  5023  0065                     end_of_initialization:	
  5024                           ;End of C runtime variable initialization code
  5025                           
  5026  0065                     __end_of__initialization:	
  5027  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5028  0066  0020               	movlb	0
  5029  0067  318C  2CC4         	ljmp	_main	;jump to C main() function
  5030                           
  5031                           	psect	bssCOMMON
  5032  0076                     __pbssCOMMON:	
  5033  0076                     _b_i2c_error_flag:	
  5034  0076                     	ds	1
  5035  0077                     _handleGestureFlag:	
  5036  0077                     	ds	1
  5037  0078                     _state:	
  5038  0078                     	ds	1
  5039  0079                     _adcResult:	
  5040  0079                     	ds	1
  5041  007A                     _button:	
  5042  007A                     	ds	1
  5043                           
  5044                           	psect	dataCOMMON
  5045  007B                     __pdataCOMMON:	
  5046  007B                     _val:	
  5047  007B                     	ds	1
  5048                           
  5049                           	psect	bssBANK0
  5050  005C                     __pbssBANK0:	
  5051  005C                     _name:	
  5052  005C                     	ds	2
  5053  005E                     _gesture_state_:	
  5054  005E                     	ds	2
  5055  0060                     _gesture_near_count_:	
  5056  0060                     	ds	2
  5057  0062                     _gesture_lr_count_:	
  5058  0062                     	ds	2
  5059  0064                     _gesture_ud_count_:	
  5060  0064                     	ds	2
  5061  0066                     _gesture_lr_delta_:	
  5062  0066                     	ds	2
  5063  0068                     _gesture_ud_delta_:	
  5064  0068                     	ds	2
  5065  006A                     _i2c1_driver_i2cISR:	
  5066  006A                     	ds	2
  5067  006C                     _i2c1_driver_busCollisionISR:	
  5068  006C                     	ds	2
  5069  006E                     _printed:	
  5070  006E                     	ds	1
  5071                           
  5072                           	psect	dataBANK0
  5073  006F                     __pdataBANK0:	
  5074  006F                     _start:	
  5075  006F                     	ds	1
  5076                           
  5077                           	psect	bssBANK1
  5078  00E0                     __pbssBANK1:	
  5079  00E0                     _adcResult2:	
  5080  00E0                     	ds	2
  5081  00E2                     _gesture_far_count_:	
  5082  00E2                     	ds	2
  5083                           
  5084                           	psect	bssBANK2
  5085  0168                     __pbssBANK2:	
  5086  0168                     _gesture_motion_:	
  5087  0168                     	ds	2
  5088                           
  5089                           	psect	dataBANK2
  5090  0160                     __pdataBANK2:	
  5091  0160                     _names:	
  5092  0160                     	ds	8
  5093                           
  5094                           	psect	bssBANK3
  5095  01A0                     __pbssBANK3:	
  5096  01A0                     _i2c_status:	
  5097  01A0                     	ds	29
  5098                           
  5099                           	psect	bssBANK4
  5100  0220                     __pbssBANK4:	
  5101  0220                     _gesture_data_:	
  5102  0220                     	ds	68
  5103                           
  5104                           	psect	inittext
  5105  0A1F                     init_ram:	
  5106  0A1F  00FE               	movwf	126
  5107  0A20                     initloop:	
  5108  0A20  0012               	moviw fsr0++
  5109  0A21  001E               	movwi fsr1++
  5110  0A22  0BFE               	decfsz	126,f
  5111  0A23  2A20               	goto	initloop
  5112  0A24  3400               	retlw	0
  5113                           
  5114                           	psect	clrtext
  5115  0A19                     clear_ram0:	
  5116                           ;	Called with FSR0 containing the base address, and
  5117                           ;	WREG with the size to clear
  5118                           
  5119  0A19  0064               	clrwdt	;clear the watchdog before getting into this loop
  5120  0A1A                     clrloop0:	
  5121  0A1A  0180               	clrf	0	;clear RAM location pointed to by FSR
  5122  0A1B  3101               	addfsr 0,1
  5123  0A1C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5124  0A1D  2A1A               	goto	clrloop0	;have we reached the end yet?
  5125  0A1E  3400               	retlw	0	;all done for this memory range, return
  5126                           
  5127                           	psect	cstackBANK2
  5128  0120                     __pcstackBANK2:	
  5129  0120                     readGesture@fifo_data:	
  5130                           
  5131                           ; 64 bytes @ 0x0
  5132  0120                     	ds	64
  5133                           
  5134                           	psect	cstackBANK1
  5135  00A0                     __pcstackBANK1:	
  5136  00A0                     readGesture@fifo_data2:	
  5137                           
  5138                           ; 64 bytes @ 0x0
  5139  00A0                     	ds	64
  5140                           
  5141                           	psect	cstackCOMMON
  5142  0070                     __pcstackCOMMON:	
  5143  0070                     ?_i2c1_driver_open:	
  5144  0070                     ?_i2c1_driver_isNACK:	
  5145                           ; 1 bit 
  5146                           
  5147  0070                     ?_i2c1_driver_isBufferFull:	
  5148                           ; 1 bit 
  5149                           
  5150  0070                     ?_returnStop:	
  5151                           ; 1 bit 
  5152                           
  5153  0070                     ?_returnReset:	
  5154                           ; 1 bytes @ 0x0
  5155                           
  5156  0070                     ?_mssp1_clearIRQ:	
  5157                           ; 1 bytes @ 0x0
  5158                           
  5159  0070                     ??_mssp1_clearIRQ:	
  5160                           ; 1 bytes @ 0x0
  5161                           
  5162  0070                     ?_i2c_busCollisionISR:	
  5163                           ; 1 bytes @ 0x0
  5164                           
  5165  0070                     ??_i2c_busCollisionISR:	
  5166                           ; 1 bytes @ 0x0
  5167                           
  5168  0070                     ?_i2c_ISR:	
  5169                           ; 1 bytes @ 0x0
  5170                           
  5171  0070                     ?_i2c1_driver_start:	
  5172                           ; 1 bytes @ 0x0
  5173                           
  5174  0070                     ?_i2c1_driver_resetBus:	
  5175                           ; 1 bytes @ 0x0
  5176                           
  5177  0070                     ??_i2c1_driver_resetBus:	
  5178                           ; 1 bytes @ 0x0
  5179                           
  5180  0070                     ?_i2c1_driver_restart:	
  5181                           ; 1 bytes @ 0x0
  5182                           
  5183  0070                     ?_i2c1_driver_stop:	
  5184                           ; 1 bytes @ 0x0
  5185                           
  5186  0070                     ?_i2c1_driver_TXData:	
  5187                           ; 1 bytes @ 0x0
  5188                           
  5189  0070                     ?_i2c1_driver_startRX:	
  5190                           ; 1 bytes @ 0x0
  5191                           
  5192  0070                     ?_i2c1_driver_sendACK:	
  5193                           ; 1 bytes @ 0x0
  5194                           
  5195  0070                     ??_i2c1_driver_sendACK:	
  5196                           ; 1 bytes @ 0x0
  5197                           
  5198  0070                     ?_i2c1_driver_sendNACK:	
  5199                           ; 1 bytes @ 0x0
  5200                           
  5201  0070                     ??_i2c1_driver_isNACK:	
  5202                           ; 1 bytes @ 0x0
  5203                           
  5204  0070                     ?_i2c1_driver_getRXData:	
  5205                           ; 1 bytes @ 0x0
  5206                           
  5207  0070                     ?_mssp1_setIRQ:	
  5208                           ; 1 bytes @ 0x0
  5209                           
  5210  0070                     ??_mssp1_setIRQ:	
  5211                           ; 1 bytes @ 0x0
  5212                           
  5213  0070                     ?_i2c1_driver_clearBusCollision:	
  5214                           ; 1 bytes @ 0x0
  5215                           
  5216  0070                     ??_i2c1_driver_clearBusCollision:	
  5217                           ; 1 bytes @ 0x0
  5218                           
  5219  0070                     ?_PIN_MANAGER_IOC:	
  5220                           ; 1 bytes @ 0x0
  5221                           
  5222  0070                     ??_PIN_MANAGER_IOC:	
  5223                           ; 1 bytes @ 0x0
  5224                           
  5225  0070                     ?_PMD_Initialize:	
  5226                           ; 1 bytes @ 0x0
  5227                           
  5228  0070                     ?_PIN_MANAGER_Initialize:	
  5229                           ; 1 bytes @ 0x0
  5230                           
  5231  0070                     ?_OSCILLATOR_Initialize:	
  5232                           ; 1 bytes @ 0x0
  5233                           
  5234  0070                     ?_WDT_Initialize:	
  5235                           ; 1 bytes @ 0x0
  5236                           
  5237  0070                     ?_SPI2_Initialize:	
  5238                           ; 1 bytes @ 0x0
  5239                           
  5240  0070                     ?_PWM1_Initialize:	
  5241                           ; 1 bytes @ 0x0
  5242                           
  5243  0070                     ?_ADC_Initialize:	
  5244                           ; 1 bytes @ 0x0
  5245                           
  5246  0070                     ?_TMR2_Initialize:	
  5247                           ; 1 bytes @ 0x0
  5248                           
  5249  0070                     ?_initialize:	
  5250                           ; 1 bytes @ 0x0
  5251                           
  5252  0070                     ?_enableGestureSensor:	
  5253                           ; 1 bytes @ 0x0
  5254                           
  5255  0070                     ?_isGestureAvailable:	
  5256                           ; 1 bytes @ 0x0
  5257                           
  5258  0070                     ?_handleGesture:	
  5259                           ; 1 bytes @ 0x0
  5260                           
  5261  0070                     ?_PWM_Output_Enable:	
  5262                           ; 1 bytes @ 0x0
  5263                           
  5264  0070                     ?_PWM_Output_Disable:	
  5265                           ; 1 bytes @ 0x0
  5266                           
  5267  0070                     ?_wireReadDataByte:	
  5268                           ; 1 bytes @ 0x0
  5269                           
  5270  0070                     ?_setLEDDrive:	
  5271                           ; 1 bytes @ 0x0
  5272                           
  5273  0070                     ?_setProximityGain:	
  5274                           ; 1 bytes @ 0x0
  5275                           
  5276  0070                     ?_setAmbientLightGain:	
  5277                           ; 1 bytes @ 0x0
  5278                           
  5279  0070                     ?_setProxIntLowThresh:	
  5280                           ; 1 bytes @ 0x0
  5281                           
  5282  0070                     ?_setProxIntHighThresh:	
  5283                           ; 1 bytes @ 0x0
  5284                           
  5285  0070                     ?_setGestureEnterThresh:	
  5286                           ; 1 bytes @ 0x0
  5287                           
  5288  0070                     ?_setGestureExitThresh:	
  5289                           ; 1 bytes @ 0x0
  5290                           
  5291  0070                     ?_setGestureGain:	
  5292                           ; 1 bytes @ 0x0
  5293                           
  5294  0070                     ?_setGestureLEDDrive:	
  5295                           ; 1 bytes @ 0x0
  5296                           
  5297  0070                     ?_setGestureWaitTime:	
  5298                           ; 1 bytes @ 0x0
  5299                           
  5300  0070                     ?_setGestureIntEnable:	
  5301                           ; 1 bytes @ 0x0
  5302                           
  5303  0070                     ?_getMode:	
  5304                           ; 1 bytes @ 0x0
  5305                           
  5306  0070                     ?_resetGestureParameters:	
  5307                           ; 1 bytes @ 0x0
  5308                           
  5309  0070                     ?_setLEDBoost:	
  5310                           ; 1 bytes @ 0x0
  5311                           
  5312  0070                     ?_setGestureMode:	
  5313                           ; 1 bytes @ 0x0
  5314                           
  5315  0070                     ?_enablePower:	
  5316                           ; 1 bytes @ 0x0
  5317                           
  5318  0070                     ?_processGestureData:	
  5319                           ; 1 bytes @ 0x0
  5320                           
  5321  0070                     ?_decodeGesture:	
  5322                           ; 1 bytes @ 0x0
  5323                           
  5324  0070                     ?_I2C_Start:	
  5325                           ; 1 bytes @ 0x0
  5326                           
  5327  0070                     ?_I2C_Write_Byte:	
  5328                           ; 1 bytes @ 0x0
  5329                           
  5330  0070                     ?_I2C_ReStart:	
  5331                           ; 1 bytes @ 0x0
  5332                           
  5333  0070                     ?_I2C_Read_Byte:	
  5334                           ; 1 bytes @ 0x0
  5335                           
  5336  0070                     ?_I2C_Send_NACK:	
  5337                           ; 1 bytes @ 0x0
  5338                           
  5339  0070                     ?_I2C_Stop:	
  5340                           ; 1 bytes @ 0x0
  5341                           
  5342  0070                     ?_do_I2C_RESET:	
  5343                           ; 1 bytes @ 0x0
  5344                           
  5345  0070                     ??_do_I2C_RESET:	
  5346                           ; 1 bytes @ 0x0
  5347                           
  5348  0070                     ?_do_I2C_IDLE:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0070                     ??_do_I2C_IDLE:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0070                     ?_do_I2C_SEND_RESTART_READ:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0070                     ??_do_I2C_SEND_RESTART_READ:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0070                     ??_do_I2C_SEND_RESTART_WRITE:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0070                     ?_do_I2C_SEND_RESTART:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0070                     ??_do_I2C_SEND_RESTART:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0070                     ?_do_I2C_SEND_STOP:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0070                     ??_do_I2C_SEND_STOP:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0070                     ?_do_I2C_SEND_ADR_READ:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0070                     ??_do_I2C_SEND_ADR_READ:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  5385                           ; 1 bytes @ 0x0
  5386                           
  5387  0070                     ??_do_I2C_SEND_ADR_WRITE:	
  5388                           ; 1 bytes @ 0x0
  5389                           
  5390  0070                     ?_do_I2C_RCEN:	
  5391                           ; 1 bytes @ 0x0
  5392                           
  5393  0070                     ??_do_I2C_RCEN:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0070                     ?_do_I2C_DO_ACK:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0070                     ??_do_I2C_DO_ACK:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0070                     ?_do_I2C_DO_NACK_STOP:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0070                     ??_do_I2C_DO_NACK_STOP:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0070                     ?_do_I2C_DO_NACK_RESTART:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0070                     ??_do_I2C_DO_NACK_RESTART:	
  5412                           ; 1 bytes @ 0x0
  5413                           
  5414  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  5415                           ; 1 bytes @ 0x0
  5416                           
  5417  0070                     ??_do_I2C_DO_ADDRESS_NACK:	
  5418                           ; 1 bytes @ 0x0
  5419                           
  5420  0070                     ?_do_I2C_TX:	
  5421                           ; 1 bytes @ 0x0
  5422                           
  5423  0070                     ??_do_I2C_TX:	
  5424                           ; 1 bytes @ 0x0
  5425                           
  5426  0070                     ?_do_I2C_RX:	
  5427                           ; 1 bytes @ 0x0
  5428                           
  5429  0070                     ??_do_I2C_RX:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0070                     ?_do_I2C_TX_EMPTY:	
  5433                           ; 1 bytes @ 0x0
  5434                           
  5435  0070                     ??_do_I2C_TX_EMPTY:	
  5436                           ; 1 bytes @ 0x0
  5437                           
  5438  0070                     ?_INTERRUPT_InterruptManager:	
  5439                           ; 1 bytes @ 0x0
  5440                           
  5441  0070                     ?_SYSTEM_Initialize:	
  5442                           ; 1 bytes @ 0x0
  5443                           
  5444  0070                     ?_SPI2_Exchange8bit:	
  5445                           ; 1 bytes @ 0x0
  5446                           
  5447  0070                     ?_main:	
  5448                           ; 1 bytes @ 0x0
  5449                           
  5450  0070                     ?_SPI_Write:	
  5451                           ; 1 bytes @ 0x0
  5452                           
  5453  0070                     ?i1_i2c1_driver_restart:	
  5454                           ; 1 bytes @ 0x0
  5455                           
  5456  0070                     ??i1_i2c1_driver_restart:	
  5457                           ; 1 bytes @ 0x0
  5458                           
  5459  0070                     ?i1_i2c1_driver_stop:	
  5460                           ; 1 bytes @ 0x0
  5461                           
  5462  0070                     ??i1_i2c1_driver_stop:	
  5463                           ; 1 bytes @ 0x0
  5464                           
  5465  0070                     ?i1_i2c1_driver_startRX:	
  5466                           ; 1 bytes @ 0x0
  5467                           
  5468  0070                     ??i1_i2c1_driver_startRX:	
  5469                           ; 1 bytes @ 0x0
  5470                           
  5471  0070                     ?i1_i2c1_driver_getRXData:	
  5472                           ; 1 bytes @ 0x0
  5473                           
  5474  0070                     ??i1_i2c1_driver_getRXData:	
  5475                           ; 1 bytes @ 0x0
  5476                           
  5477  0070                     ?i1_i2c1_driver_TXData:	
  5478                           ; 1 bytes @ 0x0
  5479                           
  5480  0070                     ??i1_i2c1_driver_TXData:	
  5481                           ; 1 bytes @ 0x0
  5482                           
  5483  0070                     ?i1_i2c1_driver_sendNACK:	
  5484                           ; 1 bytes @ 0x0
  5485                           
  5486  0070                     ??i1_i2c1_driver_sendNACK:	
  5487                           ; 1 bytes @ 0x0
  5488                           
  5489  0070                     returnStop@p:	
  5490                           ; 1 bytes @ 0x0
  5491                           
  5492  0070                     returnReset@p:	
  5493                           ; 1 bytes @ 0x0
  5494                           
  5495  0070                     i1i2c1_driver_TXData@d:	
  5496                           ; 1 bytes @ 0x0
  5497                           
  5498                           
  5499                           ; 1 bytes @ 0x0
  5500  0070                     	ds	1
  5501  0071                     ??_returnStop:	
  5502  0071                     ??_returnReset:	
  5503                           ; 1 bytes @ 0x1
  5504                           
  5505                           
  5506                           ; 1 bytes @ 0x1
  5507  0071                     	ds	2
  5508  0073                     ??_i2c_ISR:	
  5509                           
  5510                           ; 1 bytes @ 0x3
  5511  0073                     	ds	3
  5512  0076                     ??_INTERRUPT_InterruptManager:	
  5513                           
  5514                           	psect	cstackBANK0
  5515  0020                     __pcstackBANK0:	
  5516                           ; 1 bytes @ 0x6
  5517                           
  5518  0020                     ??_i2c1_driver_open:	
  5519  0020                     ??_i2c1_driver_start:	
  5520                           ; 1 bytes @ 0x0
  5521                           
  5522  0020                     ??_i2c1_driver_restart:	
  5523                           ; 1 bytes @ 0x0
  5524                           
  5525  0020                     ??_i2c1_driver_stop:	
  5526                           ; 1 bytes @ 0x0
  5527                           
  5528  0020                     ??_i2c1_driver_TXData:	
  5529                           ; 1 bytes @ 0x0
  5530                           
  5531  0020                     ??_i2c1_driver_startRX:	
  5532                           ; 1 bytes @ 0x0
  5533                           
  5534  0020                     ??_i2c1_driver_sendNACK:	
  5535                           ; 1 bytes @ 0x0
  5536                           
  5537  0020                     ??_i2c1_driver_getRXData:	
  5538                           ; 1 bytes @ 0x0
  5539                           
  5540  0020                     ??_PMD_Initialize:	
  5541                           ; 1 bytes @ 0x0
  5542                           
  5543  0020                     ??_PIN_MANAGER_Initialize:	
  5544                           ; 1 bytes @ 0x0
  5545                           
  5546  0020                     ??_OSCILLATOR_Initialize:	
  5547                           ; 1 bytes @ 0x0
  5548                           
  5549  0020                     ??_WDT_Initialize:	
  5550                           ; 1 bytes @ 0x0
  5551                           
  5552  0020                     ??_SPI2_Initialize:	
  5553                           ; 1 bytes @ 0x0
  5554                           
  5555  0020                     ??_PWM1_Initialize:	
  5556                           ; 1 bytes @ 0x0
  5557                           
  5558  0020                     ??_ADC_Initialize:	
  5559                           ; 1 bytes @ 0x0
  5560                           
  5561  0020                     ??_TMR2_Initialize:	
  5562                           ; 1 bytes @ 0x0
  5563                           
  5564  0020                     ??_PWM_Output_Enable:	
  5565                           ; 1 bytes @ 0x0
  5566                           
  5567  0020                     ??_PWM_Output_Disable:	
  5568                           ; 1 bytes @ 0x0
  5569                           
  5570  0020                     ??_resetGestureParameters:	
  5571                           ; 1 bytes @ 0x0
  5572                           
  5573  0020                     ??_decodeGesture:	
  5574                           ; 1 bytes @ 0x0
  5575                           
  5576  0020                     ??_I2C_Start:	
  5577                           ; 1 bytes @ 0x0
  5578                           
  5579  0020                     ??_I2C_ReStart:	
  5580                           ; 1 bytes @ 0x0
  5581                           
  5582  0020                     ??_I2C_Send_NACK:	
  5583                           ; 1 bytes @ 0x0
  5584                           
  5585  0020                     ??_I2C_Stop:	
  5586                           ; 1 bytes @ 0x0
  5587                           
  5588  0020                     ??_SYSTEM_Initialize:	
  5589                           ; 1 bytes @ 0x0
  5590                           
  5591  0020                     ??_i2c1_driver_isBufferFull:	
  5592                           ; 1 bytes @ 0x0
  5593                           
  5594  0020                     ??_SPI2_Exchange8bit:	
  5595                           ; 1 bytes @ 0x0
  5596                           
  5597  0020                     ?_strlen:	
  5598                           ; 1 bytes @ 0x0
  5599                           
  5600  0020                     ?___wmul:	
  5601                           ; 2 bytes @ 0x0
  5602                           
  5603  0020                     i2c1_driver_TXData@d:	
  5604                           ; 2 bytes @ 0x0
  5605                           
  5606  0020                     SPI2_Exchange8bit@data:	
  5607                           ; 1 bytes @ 0x0
  5608                           
  5609  0020                     ___wmul@multiplier:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612  0020                     strlen@s:	
  5613                           ; 2 bytes @ 0x0
  5614                           
  5615                           
  5616                           ; 2 bytes @ 0x0
  5617  0020                     	ds	1
  5618  0021                     ??_I2C_Write_Byte:	
  5619  0021                     ??_I2C_Read_Byte:	
  5620                           ; 1 bytes @ 0x1
  5621                           
  5622  0021                     ??_SPI_Write:	
  5623                           ; 1 bytes @ 0x1
  5624                           
  5625                           
  5626                           ; 1 bytes @ 0x1
  5627  0021                     	ds	1
  5628  0022                     ??_strlen:	
  5629  0022                     SPI_Write@incoming:	
  5630                           ; 1 bytes @ 0x2
  5631                           
  5632  0022                     _decodeGesture$1486:	
  5633                           ; 1 bytes @ 0x2
  5634                           
  5635  0022                     ___wmul@multiplicand:	
  5636                           ; 2 bytes @ 0x2
  5637                           
  5638                           
  5639                           ; 2 bytes @ 0x2
  5640  0022                     	ds	1
  5641  0023                     I2C_Write_Byte@Byte:	
  5642  0023                     strlen@a:	
  5643                           ; 1 bytes @ 0x3
  5644                           
  5645                           
  5646                           ; 2 bytes @ 0x3
  5647  0023                     	ds	1
  5648  0024                     ??___wmul:	
  5649  0024                     _decodeGesture$1487:	
  5650                           ; 1 bytes @ 0x4
  5651                           
  5652  0024                     I2C_Write_Byte@count:	
  5653                           ; 2 bytes @ 0x4
  5654                           
  5655  0024                     ___wmul@product:	
  5656                           ; 2 bytes @ 0x4
  5657                           
  5658                           
  5659                           ; 2 bytes @ 0x4
  5660  0024                     	ds	1
  5661  0025                     ?_Display_Name:	
  5662  0025                     Display_Name@string1:	
  5663                           ; 1 bytes @ 0x5
  5664                           
  5665                           
  5666                           ; 2 bytes @ 0x5
  5667  0025                     	ds	1
  5668  0026                     ??_wireReadDataByte:	
  5669  0026                     ?_wireWriteDataByte:	
  5670                           ; 1 bytes @ 0x6
  5671                           
  5672  0026                     ?_wireReadDataBlock:	
  5673                           ; 2 bytes @ 0x6
  5674                           
  5675  0026                     ?___awdiv:	
  5676                           ; 2 bytes @ 0x6
  5677                           
  5678  0026                     wireWriteDataByte@val:	
  5679                           ; 2 bytes @ 0x6
  5680                           
  5681  0026                     _decodeGesture$1488:	
  5682                           ; 1 bytes @ 0x6
  5683                           
  5684  0026                     wireReadDataBlock@val:	
  5685                           ; 2 bytes @ 0x6
  5686                           
  5687  0026                     ___awdiv@divisor:	
  5688                           ; 2 bytes @ 0x6
  5689                           
  5690                           
  5691                           ; 2 bytes @ 0x6
  5692  0026                     	ds	1
  5693  0027                     ??_Display_Name:	
  5694  0027                     wireReadDataByte@reg:	
  5695                           ; 1 bytes @ 0x7
  5696                           
  5697                           
  5698                           ; 1 bytes @ 0x7
  5699  0027                     	ds	1
  5700  0028                     wireReadDataByte@val:	
  5701  0028                     Display_Name@length:	
  5702                           ; 1 bytes @ 0x8
  5703                           
  5704  0028                     _decodeGesture$1489:	
  5705                           ; 2 bytes @ 0x8
  5706                           
  5707  0028                     wireReadDataBlock@len:	
  5708                           ; 2 bytes @ 0x8
  5709                           
  5710  0028                     ___awdiv@dividend:	
  5711                           ; 2 bytes @ 0x8
  5712                           
  5713                           
  5714                           ; 2 bytes @ 0x8
  5715  0028                     	ds	1
  5716  0029                     ??_isGestureAvailable:	
  5717  0029                     ??_wireWriteDataByte:	
  5718                           ; 1 bytes @ 0x9
  5719                           
  5720  0029                     ??_getMode:	
  5721                           ; 1 bytes @ 0x9
  5722                           
  5723  0029                     wireWriteDataByte@reg:	
  5724                           ; 1 bytes @ 0x9
  5725                           
  5726                           
  5727                           ; 1 bytes @ 0x9
  5728  0029                     	ds	1
  5729  002A                     ??_setLEDDrive:	
  5730  002A                     ??_setProximityGain:	
  5731                           ; 1 bytes @ 0xA
  5732                           
  5733  002A                     ??_setAmbientLightGain:	
  5734                           ; 1 bytes @ 0xA
  5735                           
  5736  002A                     ??_setProxIntLowThresh:	
  5737                           ; 1 bytes @ 0xA
  5738                           
  5739  002A                     ??_setProxIntHighThresh:	
  5740                           ; 1 bytes @ 0xA
  5741                           
  5742  002A                     ?_setLightIntLowThreshold:	
  5743                           ; 1 bytes @ 0xA
  5744                           
  5745  002A                     ?_setLightIntHighThreshold:	
  5746                           ; 1 bytes @ 0xA
  5747                           
  5748  002A                     ??_setGestureEnterThresh:	
  5749                           ; 1 bytes @ 0xA
  5750                           
  5751  002A                     ??_setGestureExitThresh:	
  5752                           ; 1 bytes @ 0xA
  5753                           
  5754  002A                     ??_setGestureGain:	
  5755                           ; 1 bytes @ 0xA
  5756                           
  5757  002A                     ??_setGestureLEDDrive:	
  5758                           ; 1 bytes @ 0xA
  5759                           
  5760  002A                     ??_setGestureWaitTime:	
  5761                           ; 1 bytes @ 0xA
  5762                           
  5763  002A                     ??_setGestureIntEnable:	
  5764                           ; 1 bytes @ 0xA
  5765                           
  5766  002A                     ??_setLEDBoost:	
  5767                           ; 1 bytes @ 0xA
  5768                           
  5769  002A                     ??_setGestureMode:	
  5770                           ; 1 bytes @ 0xA
  5771                           
  5772  002A                     ??_wireReadDataBlock:	
  5773                           ; 1 bytes @ 0xA
  5774                           
  5775  002A                     ??___awdiv:	
  5776                           ; 1 bytes @ 0xA
  5777                           
  5778  002A                     getMode@enable_value:	
  5779                           ; 1 bytes @ 0xA
  5780                           
  5781  002A                     isGestureAvailable@val:	
  5782                           ; 1 bytes @ 0xA
  5783                           
  5784  002A                     Display_Name@i:	
  5785                           ; 1 bytes @ 0xA
  5786                           
  5787  002A                     setLightIntLowThreshold@threshold:	
  5788                           ; 2 bytes @ 0xA
  5789                           
  5790  002A                     setLightIntHighThreshold@threshold:	
  5791                           ; 2 bytes @ 0xA
  5792                           
  5793  002A                     _decodeGesture$1490:	
  5794                           ; 2 bytes @ 0xA
  5795                           
  5796                           
  5797                           ; 2 bytes @ 0xA
  5798  002A                     	ds	1
  5799  002B                     ?_setMode:	
  5800  002B                     setMode@enable:	
  5801                           ; 1 bytes @ 0xB
  5802                           
  5803  002B                     setAmbientLightGain@drive:	
  5804                           ; 1 bytes @ 0xB
  5805                           
  5806  002B                     setProxIntLowThresh@threshold:	
  5807                           ; 1 bytes @ 0xB
  5808                           
  5809  002B                     setProxIntHighThresh@threshold:	
  5810                           ; 1 bytes @ 0xB
  5811                           
  5812  002B                     setGestureEnterThresh@threshold:	
  5813                           ; 1 bytes @ 0xB
  5814                           
  5815  002B                     setGestureExitThresh@threshold:	
  5816                           ; 1 bytes @ 0xB
  5817                           
  5818  002B                     setGestureWaitTime@time:	
  5819                           ; 1 bytes @ 0xB
  5820                           
  5821  002B                     setGestureIntEnable@val:	
  5822                           ; 1 bytes @ 0xB
  5823                           
  5824  002B                     setGestureMode@mode:	
  5825                           ; 1 bytes @ 0xB
  5826                           
  5827  002B                     ___awdiv@counter:	
  5828                           ; 1 bytes @ 0xB
  5829                           
  5830                           
  5831                           ; 1 bytes @ 0xB
  5832  002B                     	ds	1
  5833  002C                     ??_setMode:	
  5834  002C                     ??_setLightIntLowThreshold:	
  5835                           ; 1 bytes @ 0xC
  5836                           
  5837  002C                     ??_setLightIntHighThreshold:	
  5838                           ; 1 bytes @ 0xC
  5839                           
  5840  002C                     setLEDDrive@val:	
  5841                           ; 1 bytes @ 0xC
  5842                           
  5843  002C                     setProximityGain@val:	
  5844                           ; 1 bytes @ 0xC
  5845                           
  5846  002C                     setAmbientLightGain@val:	
  5847                           ; 1 bytes @ 0xC
  5848                           
  5849  002C                     setGestureGain@val:	
  5850                           ; 1 bytes @ 0xC
  5851                           
  5852  002C                     setGestureLEDDrive@val:	
  5853                           ; 1 bytes @ 0xC
  5854                           
  5855  002C                     setGestureWaitTime@val:	
  5856                           ; 1 bytes @ 0xC
  5857                           
  5858  002C                     setGestureIntEnable@enable:	
  5859                           ; 1 bytes @ 0xC
  5860                           
  5861  002C                     setLEDBoost@val:	
  5862                           ; 1 bytes @ 0xC
  5863                           
  5864  002C                     setGestureMode@val:	
  5865                           ; 1 bytes @ 0xC
  5866                           
  5867  002C                     ___awdiv@sign:	
  5868                           ; 1 bytes @ 0xC
  5869                           
  5870  002C                     _decodeGesture$1491:	
  5871                           ; 1 bytes @ 0xC
  5872                           
  5873                           
  5874                           ; 2 bytes @ 0xC
  5875  002C                     	ds	1
  5876  002D                     setLEDDrive@drive:	
  5877  002D                     setProximityGain@drive:	
  5878                           ; 1 bytes @ 0xD
  5879                           
  5880  002D                     setLightIntLowThreshold@val_low:	
  5881                           ; 1 bytes @ 0xD
  5882                           
  5883  002D                     setLightIntHighThreshold@val_low:	
  5884                           ; 1 bytes @ 0xD
  5885                           
  5886  002D                     setGestureGain@gain:	
  5887                           ; 1 bytes @ 0xD
  5888                           
  5889  002D                     setGestureLEDDrive@drive:	
  5890                           ; 1 bytes @ 0xD
  5891                           
  5892  002D                     setLEDBoost@boost:	
  5893                           ; 1 bytes @ 0xD
  5894                           
  5895  002D                     ___awdiv@quotient:	
  5896                           ; 1 bytes @ 0xD
  5897                           
  5898                           
  5899                           ; 2 bytes @ 0xD
  5900  002D                     	ds	1
  5901  002E                     setMode@reg_val:	
  5902  002E                     setLightIntLowThreshold@val_high:	
  5903                           ; 1 bytes @ 0xE
  5904                           
  5905  002E                     setLightIntHighThreshold@val_high:	
  5906                           ; 1 bytes @ 0xE
  5907                           
  5908  002E                     _decodeGesture$1492:	
  5909                           ; 1 bytes @ 0xE
  5910                           
  5911                           
  5912                           ; 2 bytes @ 0xE
  5913  002E                     	ds	1
  5914  002F                     ??_processGestureData:	
  5915  002F                     setMode@mode:	
  5916                           ; 1 bytes @ 0xF
  5917                           
  5918  002F                     wireReadDataBlock@reg:	
  5919                           ; 1 bytes @ 0xF
  5920                           
  5921                           
  5922                           ; 1 bytes @ 0xF
  5923  002F                     	ds	1
  5924  0030                     ??_initialize:	
  5925  0030                     ??_enableGestureSensor:	
  5926                           ; 1 bytes @ 0x10
  5927                           
  5928  0030                     ??_enablePower:	
  5929                           ; 1 bytes @ 0x10
  5930                           
  5931  0030                     wireReadDataBlock@j:	
  5932                           ; 1 bytes @ 0x10
  5933                           
  5934  0030                     _decodeGesture$1493:	
  5935                           ; 1 bytes @ 0x10
  5936                           
  5937                           
  5938                           ; 2 bytes @ 0x10
  5939  0030                     	ds	1
  5940  0031                     initialize@id:	
  5941  0031                     enableGestureSensor@interrupts:	
  5942                           ; 1 bytes @ 0x11
  5943                           
  5944  0031                     processGestureData@ud_ratio_first:	
  5945                           ; 1 bytes @ 0x11
  5946                           
  5947                           
  5948                           ; 2 bytes @ 0x11
  5949  0031                     	ds	2
  5950  0033                     processGestureData@lr_ratio_first:	
  5951                           
  5952                           ; 2 bytes @ 0x13
  5953  0033                     	ds	2
  5954  0035                     processGestureData@ud_ratio_last:	
  5955                           
  5956                           ; 2 bytes @ 0x15
  5957  0035                     	ds	2
  5958  0037                     processGestureData@lr_ratio_last:	
  5959                           
  5960                           ; 2 bytes @ 0x17
  5961  0037                     	ds	2
  5962  0039                     _processGestureData$1481:	
  5963                           
  5964                           ; 2 bytes @ 0x19
  5965  0039                     	ds	2
  5966  003B                     _processGestureData$1482:	
  5967                           
  5968                           ; 2 bytes @ 0x1B
  5969  003B                     	ds	2
  5970  003D                     _processGestureData$1483:	
  5971                           
  5972                           ; 2 bytes @ 0x1D
  5973  003D                     	ds	2
  5974  003F                     _processGestureData$1484:	
  5975                           
  5976                           ; 2 bytes @ 0x1F
  5977  003F                     	ds	2
  5978  0041                     processGestureData@u_last:	
  5979                           
  5980                           ; 1 bytes @ 0x21
  5981  0041                     	ds	1
  5982  0042                     processGestureData@d_last:	
  5983                           
  5984                           ; 1 bytes @ 0x22
  5985  0042                     	ds	1
  5986  0043                     processGestureData@l_last:	
  5987                           
  5988                           ; 1 bytes @ 0x23
  5989  0043                     	ds	1
  5990  0044                     processGestureData@r_last:	
  5991                           
  5992                           ; 1 bytes @ 0x24
  5993  0044                     	ds	1
  5994  0045                     processGestureData@u_first:	
  5995                           
  5996                           ; 1 bytes @ 0x25
  5997  0045                     	ds	1
  5998  0046                     processGestureData@d_first:	
  5999                           
  6000                           ; 1 bytes @ 0x26
  6001  0046                     	ds	1
  6002  0047                     processGestureData@l_first:	
  6003                           
  6004                           ; 1 bytes @ 0x27
  6005  0047                     	ds	1
  6006  0048                     processGestureData@r_first:	
  6007                           
  6008                           ; 1 bytes @ 0x28
  6009  0048                     	ds	1
  6010  0049                     processGestureData@ud_delta:	
  6011                           
  6012                           ; 2 bytes @ 0x29
  6013  0049                     	ds	2
  6014  004B                     processGestureData@lr_delta:	
  6015                           
  6016                           ; 2 bytes @ 0x2B
  6017  004B                     	ds	2
  6018  004D                     processGestureData@i:	
  6019                           
  6020                           ; 2 bytes @ 0x2D
  6021  004D                     	ds	2
  6022  004F                     ?_readGesture:	
  6023                           
  6024                           ; 2 bytes @ 0x2F
  6025  004F                     	ds	2
  6026  0051                     ??_readGesture:	
  6027                           
  6028                           ; 1 bytes @ 0x31
  6029  0051                     	ds	2
  6030  0053                     readGesture@motion:	
  6031                           
  6032                           ; 2 bytes @ 0x33
  6033  0053                     	ds	2
  6034  0055                     readGesture@gstatus:	
  6035                           
  6036                           ; 1 bytes @ 0x35
  6037  0055                     	ds	1
  6038  0056                     readGesture@bytes_read:	
  6039                           
  6040                           ; 2 bytes @ 0x36
  6041  0056                     	ds	2
  6042  0058                     readGesture@fifo_level:	
  6043                           
  6044                           ; 1 bytes @ 0x38
  6045  0058                     	ds	1
  6046  0059                     readGesture@i:	
  6047                           
  6048                           ; 2 bytes @ 0x39
  6049  0059                     	ds	2
  6050  005B                     ??_handleGesture:	
  6051                           
  6052                           ; 1 bytes @ 0x3B
  6053  005B                     	ds	1
  6054  005C                     ??_main:	
  6055                           
  6056                           	psect	maintext
  6057  0CC4                     __pmaintext:	
  6058                           ; 1 bytes @ 0x3C
  6059 ;;
  6060 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6061 ;;
  6062 ;; *************** function _main *****************
  6063 ;; Defined at:
  6064 ;;		line 110 in file "main.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;		None
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  count           2    0        unsigned int 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      void 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6073 ;; Tracked objects:
  6074 ;;		On entry : B1F/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;Total ram usage:        2 bytes
  6083 ;; Hardware stack levels required when called:   12
  6084 ;; This function calls:
  6085 ;;		_Display_Name
  6086 ;;		_SYSTEM_Initialize
  6087 ;;		_enableGestureSensor
  6088 ;;		_handleGesture
  6089 ;;		_initialize
  6090 ;;		_isGestureAvailable
  6091 ;; This function is called by:
  6092 ;;		Startup code after reset
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _main
  6098  0CC4                     _main:	
  6099                           
  6100                           ;main.c: 113:     SYSTEM_Initialize();
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6104  0CC4  318B  2325  318C   	fcall	_SYSTEM_Initialize
  6105                           
  6106                           ;main.c: 119:     (INTCONbits.GIE = 1);
  6107  0CC7  178B               	bsf	11,7	;volatile
  6108                           
  6109                           ;main.c: 122:     (INTCONbits.PEIE = 1);
  6110  0CC8  170B               	bsf	11,6	;volatile
  6111                           
  6112                           ;main.c: 128:     if(initialize()){
  6113  0CC9  3184  24C8  318C   	fcall	_initialize
  6114                           
  6115                           ;main.c: 131:     if(enableGestureSensor(0)){
  6116  0CCC  3000               	movlw	0
  6117  0CCD  3187  273A  318C   	fcall	_enableGestureSensor
  6118  0CD0                     l6819:	
  6119                           
  6120                           ;main.c: 136:     {;main.c: 138:         if(start == 1) {
  6121  0CD0  0020               	movlb	0	; select bank0
  6122  0CD1  036F               	decf	_start,w
  6123  0CD2  1D03               	btfss	3,2
  6124  0CD3  2CE2               	goto	l6825
  6125                           
  6126                           ;main.c: 139:             Display_Name(names[name]);
  6127  0CD4  355C               	lslf	_name,w
  6128  0CD5  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6129  0CD6  0086               	movwf	6
  6130  0CD7  3001               	movlw	1	; select bank2/3
  6131  0CD8  0087               	movwf	7
  6132  0CD9  3F40               	moviw [0]fsr1
  6133  0CDA  00A5               	movwf	Display_Name@string1
  6134  0CDB  3F41               	moviw [1]fsr1
  6135  0CDC  00A6               	movwf	Display_Name@string1+1
  6136  0CDD  318E  2691  318C   	fcall	_Display_Name
  6137                           
  6138                           ;main.c: 140:             start = 0;
  6139  0CE0  0020               	movlb	0	; select bank0
  6140  0CE1  01EF               	clrf	_start
  6141  0CE2                     l6825:	
  6142                           
  6143                           ;main.c: 143:         if( isGestureAvailable() ){
  6144  0CE2  318A  22B1  318C   	fcall	_isGestureAvailable
  6145  0CE5  3A00               	xorlw	0
  6146  0CE6  1903               	skipnz
  6147  0CE7  2CD0               	goto	l6819
  6148                           
  6149                           ;main.c: 144:             handleGesture();
  6150  0CE8  3186  26D1  318C   	fcall	_handleGesture
  6151  0CEB  2CD0               	goto	l6819
  6152  0CEC                     __end_of_main:	
  6153                           
  6154                           	psect	text1
  6155  04C8                     __ptext1:	
  6156 ;; *************** function _initialize *****************
  6157 ;; Defined at:
  6158 ;;		line 20 in file "APDS9960.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;		None
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  id              1   17[BANK0 ] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      _Bool 
  6165 ;; Registers used:
  6166 ;;		wreg, status,2, status,0, pclath, cstack
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;Total ram usage:        2 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:   10
  6179 ;; This function calls:
  6180 ;;		_i2c1_driver_open
  6181 ;;		_setAmbientLightGain
  6182 ;;		_setGestureEnterThresh
  6183 ;;		_setGestureExitThresh
  6184 ;;		_setGestureGain
  6185 ;;		_setGestureIntEnable
  6186 ;;		_setGestureLEDDrive
  6187 ;;		_setGestureWaitTime
  6188 ;;		_setLEDDrive
  6189 ;;		_setLightIntHighThreshold
  6190 ;;		_setLightIntLowThreshold
  6191 ;;		_setMode
  6192 ;;		_setProxIntHighThresh
  6193 ;;		_setProxIntLowThresh
  6194 ;;		_setProximityGain
  6195 ;;		_wireReadDataByte
  6196 ;;		_wireWriteDataByte
  6197 ;; This function is called by:
  6198 ;;		_main
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _initialize
  6204  04C8                     _initialize:	
  6205                           
  6206                           ;APDS9960.c: 25:     i2c1_driver_open();
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6210  04C8  318A  2282  3184   	fcall	_i2c1_driver_open
  6211                           
  6212                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6213  04CB  3092               	movlw	146
  6214  04CC  318B  23DE  3184   	fcall	_wireReadDataByte
  6215  04CF  0020               	movlb	0	; select bank0
  6216  04D0  00B0               	movwf	??_initialize
  6217  04D1  0830               	movf	??_initialize,w
  6218  04D2  00B1               	movwf	initialize@id
  6219                           
  6220                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6221  04D3  30AB               	movlw	171
  6222  04D4  0631               	xorwf	initialize@id,w
  6223  04D5  1903               	btfsc	3,2
  6224  04D6  2CDD               	goto	l6509
  6225  04D7  309C               	movlw	156
  6226  04D8  0631               	xorwf	initialize@id,w
  6227  04D9  1903               	btfsc	3,2
  6228  04DA  2CDD               	goto	l6509
  6229  04DB                     l6505:	
  6230                           
  6231                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6232  04DB  3000               	movlw	0
  6233  04DC  0008               	return
  6234  04DD                     l6509:	
  6235                           
  6236                           ;APDS9960.c: 39:     setMode(7, 0);
  6237  04DD  01AB               	clrf	setMode@enable
  6238  04DE  3007               	movlw	7
  6239  04DF  318F  27B1  3184   	fcall	_setMode
  6240                           
  6241                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6242  04E2  30DB               	movlw	219
  6243  04E3  0020               	movlb	0	; select bank0
  6244  04E4  00B0               	movwf	??_initialize
  6245  04E5  0830               	movf	??_initialize,w
  6246  04E6  00A6               	movwf	wireWriteDataByte@val
  6247  04E7  3081               	movlw	129
  6248  04E8  318B  236D  3184   	fcall	_wireWriteDataByte
  6249                           
  6250                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6251  04EB  30F6               	movlw	246
  6252  04EC  0020               	movlb	0	; select bank0
  6253  04ED  00B0               	movwf	??_initialize
  6254  04EE  0830               	movf	??_initialize,w
  6255  04EF  00A6               	movwf	wireWriteDataByte@val
  6256  04F0  3083               	movlw	131
  6257  04F1  318B  236D  3184   	fcall	_wireWriteDataByte
  6258                           
  6259                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6260  04F4  3087               	movlw	135
  6261  04F5  0020               	movlb	0	; select bank0
  6262  04F6  00B0               	movwf	??_initialize
  6263  04F7  0830               	movf	??_initialize,w
  6264  04F8  00A6               	movwf	wireWriteDataByte@val
  6265  04F9  308E               	movlw	142
  6266  04FA  318B  236D  3184   	fcall	_wireWriteDataByte
  6267                           
  6268                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6269  04FD  0020               	movlb	0	; select bank0
  6270  04FE  01A6               	clrf	wireWriteDataByte@val
  6271  04FF  309D               	movlw	157
  6272  0500  318B  236D  3184   	fcall	_wireWriteDataByte
  6273                           
  6274                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6275  0503  0020               	movlb	0	; select bank0
  6276  0504  01A6               	clrf	wireWriteDataByte@val
  6277  0505  309E               	movlw	158
  6278  0506  318B  236D  3184   	fcall	_wireWriteDataByte
  6279                           
  6280                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6281  0509  3060               	movlw	96
  6282  050A  0020               	movlb	0	; select bank0
  6283  050B  00B0               	movwf	??_initialize
  6284  050C  0830               	movf	??_initialize,w
  6285  050D  00A6               	movwf	wireWriteDataByte@val
  6286  050E  308D               	movlw	141
  6287  050F  318B  236D  3184   	fcall	_wireWriteDataByte
  6288                           
  6289                           ;APDS9960.c: 47:     setLEDDrive(0);
  6290  0512  3000               	movlw	0
  6291  0513  318C  24EC  3184   	fcall	_setLEDDrive
  6292                           
  6293                           ;APDS9960.c: 48:     setProximityGain(2);
  6294  0516  3002               	movlw	2
  6295  0517  318D  2515  3184   	fcall	_setProximityGain
  6296                           
  6297                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6298  051A  3001               	movlw	1
  6299  051B  318B  23C0  3184   	fcall	_setAmbientLightGain
  6300                           
  6301                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6302  051E  3000               	movlw	0
  6303  051F  318A  22FD  3184   	fcall	_setProxIntLowThresh
  6304  0522  3A00               	xorlw	0
  6305  0523  1903               	btfsc	3,2
  6306  0524  2CDB               	goto	l6505
  6307                           
  6308                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6309  0525  3032               	movlw	50
  6310  0526  318A  22EA  3184   	fcall	_setProxIntHighThresh
  6311  0529  3A00               	xorlw	0
  6312  052A  1903               	btfsc	3,2
  6313  052B  2CDB               	goto	l6505
  6314                           
  6315                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6316  052C  30FF               	movlw	255
  6317  052D  0020               	movlb	0	; select bank0
  6318  052E  00AA               	movwf	setLightIntLowThreshold@threshold
  6319  052F  30FF               	movlw	255
  6320  0530  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6321  0531  318C  249D  3184   	fcall	_setLightIntLowThreshold
  6322  0534  3A00               	xorlw	0
  6323  0535  1903               	btfsc	3,2
  6324  0536  2CDB               	goto	l6505
  6325                           
  6326                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6327  0537  3000               	movlw	0
  6328  0538  0020               	movlb	0	; select bank0
  6329  0539  00AA               	movwf	setLightIntHighThreshold@threshold
  6330  053A  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6331  053B  318C  2476  3184   	fcall	_setLightIntHighThreshold
  6332  053E  3A00               	xorlw	0
  6333  053F  1903               	btfsc	3,2
  6334  0540  2CDB               	goto	l6505
  6335                           
  6336                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6337  0541  3011               	movlw	17
  6338  0542  0020               	movlb	0	; select bank0
  6339  0543  00B0               	movwf	??_initialize
  6340  0544  0830               	movf	??_initialize,w
  6341  0545  00A6               	movwf	wireWriteDataByte@val
  6342  0546  308C               	movlw	140
  6343  0547  318B  236D  3184   	fcall	_wireWriteDataByte
  6344  054A  0020               	movlb	0	; select bank0
  6345  054B  0826               	movf	?_wireWriteDataByte,w
  6346  054C  0427               	iorwf	?_wireWriteDataByte+1,w
  6347  054D  1903               	btfsc	3,2
  6348  054E  2CDB               	goto	l6505
  6349                           
  6350                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6351  054F  01A6               	clrf	wireWriteDataByte@val
  6352  0550  0AA6               	incf	wireWriteDataByte@val,f
  6353  0551  3090               	movlw	144
  6354  0552  318B  236D  3184   	fcall	_wireWriteDataByte
  6355  0555  0020               	movlb	0	; select bank0
  6356  0556  0826               	movf	?_wireWriteDataByte,w
  6357  0557  0427               	iorwf	?_wireWriteDataByte+1,w
  6358  0558  1903               	btfsc	3,2
  6359  0559  2CDB               	goto	l6505
  6360                           
  6361                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6362  055A  01A6               	clrf	wireWriteDataByte@val
  6363  055B  309F               	movlw	159
  6364  055C  318B  236D  3184   	fcall	_wireWriteDataByte
  6365  055F  0020               	movlb	0	; select bank0
  6366  0560  0826               	movf	?_wireWriteDataByte,w
  6367  0561  0427               	iorwf	?_wireWriteDataByte+1,w
  6368  0562  1903               	btfsc	3,2
  6369  0563  2CDB               	goto	l6505
  6370                           
  6371                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6372  0564  3028               	movlw	40
  6373  0565  318A  22C4  3184   	fcall	_setGestureEnterThresh
  6374  0568  3A00               	xorlw	0
  6375  0569  1903               	btfsc	3,2
  6376  056A  2CDB               	goto	l6505
  6377                           
  6378                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6379  056B  301E               	movlw	30
  6380  056C  318A  22D7  3184   	fcall	_setGestureExitThresh
  6381  056F  3A00               	xorlw	0
  6382  0570  1903               	btfsc	3,2
  6383  0571  2CDB               	goto	l6505
  6384                           
  6385                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6386  0572  3040               	movlw	64
  6387  0573  0020               	movlb	0	; select bank0
  6388  0574  00B0               	movwf	??_initialize
  6389  0575  0830               	movf	??_initialize,w
  6390  0576  00A6               	movwf	wireWriteDataByte@val
  6391  0577  30A2               	movlw	162
  6392  0578  318B  236D  3184   	fcall	_wireWriteDataByte
  6393  057B  0020               	movlb	0	; select bank0
  6394  057C  0826               	movf	?_wireWriteDataByte,w
  6395  057D  0427               	iorwf	?_wireWriteDataByte+1,w
  6396  057E  1903               	btfsc	3,2
  6397  057F  2CDB               	goto	l6505
  6398                           
  6399                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6400  0580  3002               	movlw	2
  6401  0581  318D  25F7  3184   	fcall	_setGestureGain
  6402  0584  3A00               	xorlw	0
  6403  0585  1903               	btfsc	3,2
  6404  0586  2CDB               	goto	l6505
  6405                           
  6406                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  6407  0587  3000               	movlw	0
  6408  0588  318E  2629  3184   	fcall	_setGestureLEDDrive
  6409  058B  3A00               	xorlw	0
  6410  058C  1903               	btfsc	3,2
  6411  058D  2CDB               	goto	l6505
  6412                           
  6413                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  6414  058E  3001               	movlw	1
  6415  058F  318C  244F  3184   	fcall	_setGestureWaitTime
  6416  0592  3A00               	xorlw	0
  6417  0593  1903               	btfsc	3,2
  6418  0594  2CDB               	goto	l6505
  6419                           
  6420                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  6421  0595  0020               	movlb	0	; select bank0
  6422  0596  01A6               	clrf	wireWriteDataByte@val
  6423  0597  30A4               	movlw	164
  6424  0598  318B  236D  3184   	fcall	_wireWriteDataByte
  6425  059B  0020               	movlb	0	; select bank0
  6426  059C  0826               	movf	?_wireWriteDataByte,w
  6427  059D  0427               	iorwf	?_wireWriteDataByte+1,w
  6428  059E  1903               	btfsc	3,2
  6429  059F  2CDB               	goto	l6505
  6430                           
  6431                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  6432  05A0  01A6               	clrf	wireWriteDataByte@val
  6433  05A1  30A5               	movlw	165
  6434  05A2  318B  236D  3184   	fcall	_wireWriteDataByte
  6435  05A5  0020               	movlb	0	; select bank0
  6436  05A6  0826               	movf	?_wireWriteDataByte,w
  6437  05A7  0427               	iorwf	?_wireWriteDataByte+1,w
  6438  05A8  1903               	btfsc	3,2
  6439  05A9  2CDB               	goto	l6505
  6440                           
  6441                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  6442  05AA  01A6               	clrf	wireWriteDataByte@val
  6443  05AB  30A7               	movlw	167
  6444  05AC  318B  236D  3184   	fcall	_wireWriteDataByte
  6445  05AF  0020               	movlb	0	; select bank0
  6446  05B0  0826               	movf	?_wireWriteDataByte,w
  6447  05B1  0427               	iorwf	?_wireWriteDataByte+1,w
  6448  05B2  1903               	btfsc	3,2
  6449  05B3  2CDB               	goto	l6505
  6450                           
  6451                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  6452  05B4  01A6               	clrf	wireWriteDataByte@val
  6453  05B5  30A9               	movlw	169
  6454  05B6  318B  236D  3184   	fcall	_wireWriteDataByte
  6455  05B9  0020               	movlb	0	; select bank0
  6456  05BA  0826               	movf	?_wireWriteDataByte,w
  6457  05BB  0427               	iorwf	?_wireWriteDataByte+1,w
  6458  05BC  1903               	btfsc	3,2
  6459  05BD  2CDB               	goto	l6505
  6460                           
  6461                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  6462  05BE  30C9               	movlw	201
  6463  05BF  00B0               	movwf	??_initialize
  6464  05C0  0830               	movf	??_initialize,w
  6465  05C1  00A6               	movwf	wireWriteDataByte@val
  6466  05C2  30A6               	movlw	166
  6467  05C3  318B  236D  3184   	fcall	_wireWriteDataByte
  6468  05C6  0020               	movlb	0	; select bank0
  6469  05C7  0826               	movf	?_wireWriteDataByte,w
  6470  05C8  0427               	iorwf	?_wireWriteDataByte+1,w
  6471  05C9  1903               	btfsc	3,2
  6472  05CA  2CDB               	goto	l6505
  6473                           
  6474                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  6475  05CB  01A6               	clrf	wireWriteDataByte@val
  6476  05CC  30AA               	movlw	170
  6477  05CD  318B  236D  3184   	fcall	_wireWriteDataByte
  6478  05D0  0020               	movlb	0	; select bank0
  6479  05D1  0826               	movf	?_wireWriteDataByte,w
  6480  05D2  0427               	iorwf	?_wireWriteDataByte+1,w
  6481  05D3  1903               	btfsc	3,2
  6482  05D4  2CDB               	goto	l6505
  6483                           
  6484                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  6485  05D5  3000               	movlw	0
  6486  05D6  318D  2569  3184   	fcall	_setGestureIntEnable
  6487  05D9  3A00               	xorlw	0
  6488  05DA  1903               	btfsc	3,2
  6489  05DB  2CDB               	goto	l6505
  6490                           
  6491                           ;APDS9960.c: 120:     return 1;
  6492  05DC  3001               	movlw	1
  6493  05DD  0008               	return
  6494  05DE                     __end_of_initialize:	
  6495                           
  6496                           	psect	text2
  6497  0D15                     __ptext2:	
  6498 ;; *************** function _setProximityGain *****************
  6499 ;; Defined at:
  6500 ;;		line 192 in file "APDS9960.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  drive           1    wreg     unsigned char 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  drive           1   13[BANK0 ] unsigned char 
  6505 ;;  val             1   12[BANK0 ] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      _Bool 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        4 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    8
  6522 ;; This function calls:
  6523 ;;		_wireReadDataByte
  6524 ;;		_wireWriteDataByte
  6525 ;; This function is called by:
  6526 ;;		_initialize
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _setProximityGain
  6532  0D15                     _setProximityGain:	
  6533                           
  6534                           ;incstack = 0
  6535                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  6536                           ;setProximityGain@drive stored from wreg
  6537  0D15  0020               	movlb	0	; select bank0
  6538  0D16  00AD               	movwf	setProximityGain@drive
  6539                           
  6540                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  6541  0D17  308F               	movlw	143
  6542  0D18  318B  23DE  318D   	fcall	_wireReadDataByte
  6543  0D1B  0020               	movlb	0	; select bank0
  6544  0D1C  00AA               	movwf	??_setProximityGain
  6545  0D1D  082A               	movf	??_setProximityGain,w
  6546  0D1E  00AC               	movwf	setProximityGain@val
  6547                           
  6548                           ;APDS9960.c: 199:     drive &= 0b00000011;
  6549  0D1F  3003               	movlw	3
  6550  0D20  00AA               	movwf	??_setProximityGain
  6551  0D21  082A               	movf	??_setProximityGain,w
  6552  0D22  05AD               	andwf	setProximityGain@drive,f
  6553                           
  6554                           ;APDS9960.c: 200:     drive = drive << 2;
  6555  0D23  082D               	movf	setProximityGain@drive,w
  6556  0D24  00AA               	movwf	??_setProximityGain
  6557  0D25  3001               	movlw	1
  6558  0D26                     u5235:	
  6559  0D26  35AA               	lslf	??_setProximityGain,f
  6560  0D27  3EFF               	addlw	-1
  6561  0D28  1D03               	skipz
  6562  0D29  2D26               	goto	u5235
  6563  0D2A  352A               	lslf	??_setProximityGain,w
  6564  0D2B  00AB               	movwf	??_setProximityGain+1
  6565  0D2C  082B               	movf	??_setProximityGain+1,w
  6566  0D2D  00AD               	movwf	setProximityGain@drive
  6567                           
  6568                           ;APDS9960.c: 201:     val &= 0b11110011;
  6569  0D2E  30F3               	movlw	243
  6570  0D2F  00AA               	movwf	??_setProximityGain
  6571  0D30  082A               	movf	??_setProximityGain,w
  6572  0D31  05AC               	andwf	setProximityGain@val,f
  6573                           
  6574                           ;APDS9960.c: 202:     val |= drive;
  6575  0D32  082D               	movf	setProximityGain@drive,w
  6576  0D33  00AA               	movwf	??_setProximityGain
  6577  0D34  082A               	movf	??_setProximityGain,w
  6578  0D35  04AC               	iorwf	setProximityGain@val,f
  6579                           
  6580                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  6581  0D36  082C               	movf	setProximityGain@val,w
  6582  0D37  00AA               	movwf	??_setProximityGain
  6583  0D38  082A               	movf	??_setProximityGain,w
  6584  0D39  00A6               	movwf	wireWriteDataByte@val
  6585  0D3A  308F               	movlw	143
  6586  0D3B  318B  236D         	fcall	_wireWriteDataByte
  6587  0D3D  0008               	return
  6588  0D3E                     __end_of_setProximityGain:	
  6589                           
  6590                           	psect	text3
  6591  0AFD                     __ptext3:	
  6592 ;; *************** function _setProxIntLowThresh *****************
  6593 ;; Defined at:
  6594 ;;		line 234 in file "APDS9960.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  threshold       1    wreg     unsigned char 
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  threshold       1   11[BANK0 ] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      _Bool 
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0, pclath, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;Total ram usage:        2 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    8
  6615 ;; This function calls:
  6616 ;;		_wireWriteDataByte
  6617 ;; This function is called by:
  6618 ;;		_initialize
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function _setProxIntLowThresh
  6624  0AFD                     _setProxIntLowThresh:	
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  6628                           ;setProxIntLowThresh@threshold stored from wreg
  6629  0AFD  0020               	movlb	0	; select bank0
  6630  0AFE  00AB               	movwf	setProxIntLowThresh@threshold
  6631                           
  6632                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  6633  0AFF  082B               	movf	setProxIntLowThresh@threshold,w
  6634  0B00  00AA               	movwf	??_setProxIntLowThresh
  6635  0B01  082A               	movf	??_setProxIntLowThresh,w
  6636  0B02  00A6               	movwf	wireWriteDataByte@val
  6637  0B03  3089               	movlw	137
  6638  0B04  318B  236D  318A   	fcall	_wireWriteDataByte
  6639  0B07  0020               	movlb	0	; select bank0
  6640  0B08  0826               	movf	?_wireWriteDataByte,w
  6641  0B09  0427               	iorwf	?_wireWriteDataByte+1,w
  6642  0B0A  1D03               	btfss	3,2
  6643  0B0B  2B0E               	goto	l6267
  6644                           
  6645                           ;APDS9960.c: 237:         return 0;
  6646  0B0C  3000               	movlw	0
  6647  0B0D  0008               	return
  6648  0B0E                     l6267:	
  6649                           
  6650                           ;APDS9960.c: 240:     return 1;
  6651  0B0E  3001               	movlw	1
  6652  0B0F  0008               	return
  6653  0B10                     __end_of_setProxIntLowThresh:	
  6654                           
  6655                           	psect	text4
  6656  0AEA                     __ptext4:	
  6657 ;; *************** function _setProxIntHighThresh *****************
  6658 ;; Defined at:
  6659 ;;		line 244 in file "APDS9960.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  threshold       1    wreg     unsigned char 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  threshold       1   11[BANK0 ] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  1    wreg      _Bool 
  6666 ;; Registers used:
  6667 ;;		wreg, status,2, status,0, pclath, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;Total ram usage:        2 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    8
  6680 ;; This function calls:
  6681 ;;		_wireWriteDataByte
  6682 ;; This function is called by:
  6683 ;;		_initialize
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _setProxIntHighThresh
  6689  0AEA                     _setProxIntHighThresh:	
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  6693                           ;setProxIntHighThresh@threshold stored from wreg
  6694  0AEA  0020               	movlb	0	; select bank0
  6695  0AEB  00AB               	movwf	setProxIntHighThresh@threshold
  6696                           
  6697                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  6698  0AEC  082B               	movf	setProxIntHighThresh@threshold,w
  6699  0AED  00AA               	movwf	??_setProxIntHighThresh
  6700  0AEE  082A               	movf	??_setProxIntHighThresh,w
  6701  0AEF  00A6               	movwf	wireWriteDataByte@val
  6702  0AF0  308B               	movlw	139
  6703  0AF1  318B  236D  318A   	fcall	_wireWriteDataByte
  6704  0AF4  0020               	movlb	0	; select bank0
  6705  0AF5  0826               	movf	?_wireWriteDataByte,w
  6706  0AF6  0427               	iorwf	?_wireWriteDataByte+1,w
  6707  0AF7  1D03               	btfss	3,2
  6708  0AF8  2AFB               	goto	l6277
  6709                           
  6710                           ;APDS9960.c: 247:         return 0;
  6711  0AF9  3000               	movlw	0
  6712  0AFA  0008               	return
  6713  0AFB                     l6277:	
  6714                           
  6715                           ;APDS9960.c: 250:     return 1;
  6716  0AFB  3001               	movlw	1
  6717  0AFC  0008               	return
  6718  0AFD                     __end_of_setProxIntHighThresh:	
  6719                           
  6720                           	psect	text5
  6721  0C9D                     __ptext5:	
  6722 ;; *************** function _setLightIntLowThreshold *****************
  6723 ;; Defined at:
  6724 ;;		line 254 in file "APDS9960.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  threshold       2   10[BANK0 ] unsigned short 
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;  val_high        1   14[BANK0 ] unsigned char 
  6729 ;;  val_low         1   13[BANK0 ] unsigned char 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      _Bool 
  6732 ;; Registers used:
  6733 ;;		wreg, status,2, status,0, pclath, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;Total ram usage:        5 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    8
  6746 ;; This function calls:
  6747 ;;		_wireWriteDataByte
  6748 ;; This function is called by:
  6749 ;;		_initialize
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _setLightIntLowThreshold
  6755  0C9D                     _setLightIntLowThreshold:	
  6756                           
  6757                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  6761  0C9D  0020               	movlb	0	; select bank0
  6762  0C9E  082A               	movf	setLightIntLowThreshold@threshold,w
  6763  0C9F  00AC               	movwf	??_setLightIntLowThreshold
  6764  0CA0  082C               	movf	??_setLightIntLowThreshold,w
  6765  0CA1  00AD               	movwf	setLightIntLowThreshold@val_low
  6766                           
  6767                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  6768  0CA2  082B               	movf	setLightIntLowThreshold@threshold+1,w
  6769  0CA3  00AC               	movwf	??_setLightIntLowThreshold
  6770  0CA4  082C               	movf	??_setLightIntLowThreshold,w
  6771  0CA5  00AE               	movwf	setLightIntLowThreshold@val_high
  6772                           
  6773                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  6774  0CA6  082D               	movf	setLightIntLowThreshold@val_low,w
  6775  0CA7  00AC               	movwf	??_setLightIntLowThreshold
  6776  0CA8  082C               	movf	??_setLightIntLowThreshold,w
  6777  0CA9  00A6               	movwf	wireWriteDataByte@val
  6778  0CAA  3084               	movlw	132
  6779  0CAB  318B  236D  318C   	fcall	_wireWriteDataByte
  6780  0CAE  0020               	movlb	0	; select bank0
  6781  0CAF  0826               	movf	?_wireWriteDataByte,w
  6782  0CB0  0427               	iorwf	?_wireWriteDataByte+1,w
  6783  0CB1  1D03               	btfss	3,2
  6784  0CB2  2CB5               	goto	l6291
  6785  0CB3                     l6287:	
  6786                           
  6787                           ;APDS9960.c: 265:         return 0;
  6788  0CB3  3000               	movlw	0
  6789  0CB4  0008               	return
  6790  0CB5                     l6291:	
  6791                           
  6792                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  6793  0CB5  082E               	movf	setLightIntLowThreshold@val_high,w
  6794  0CB6  00AC               	movwf	??_setLightIntLowThreshold
  6795  0CB7  082C               	movf	??_setLightIntLowThreshold,w
  6796  0CB8  00A6               	movwf	wireWriteDataByte@val
  6797  0CB9  3085               	movlw	133
  6798  0CBA  318B  236D  318C   	fcall	_wireWriteDataByte
  6799  0CBD  0020               	movlb	0	; select bank0
  6800  0CBE  0826               	movf	?_wireWriteDataByte,w
  6801  0CBF  0427               	iorwf	?_wireWriteDataByte+1,w
  6802  0CC0  1903               	btfsc	3,2
  6803  0CC1  2CB3               	goto	l6287
  6804                           
  6805                           ;APDS9960.c: 273:     return 1;
  6806  0CC2  3001               	movlw	1
  6807  0CC3  0008               	return
  6808  0CC4                     __end_of_setLightIntLowThreshold:	
  6809                           
  6810                           	psect	text6
  6811  0C76                     __ptext6:	
  6812 ;; *************** function _setLightIntHighThreshold *****************
  6813 ;; Defined at:
  6814 ;;		line 277 in file "APDS9960.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  threshold       2   10[BANK0 ] unsigned short 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  val_high        1   14[BANK0 ] unsigned char 
  6819 ;;  val_low         1   13[BANK0 ] unsigned char 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  1    wreg      _Bool 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0, pclath, cstack
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6830 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;Total ram usage:        5 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; Hardware stack levels required when called:    8
  6836 ;; This function calls:
  6837 ;;		_wireWriteDataByte
  6838 ;; This function is called by:
  6839 ;;		_initialize
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           
  6844                           ;psect for function _setLightIntHighThreshold
  6845  0C76                     _setLightIntHighThreshold:	
  6846                           
  6847                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  6848                           
  6849                           ;incstack = 0
  6850                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  6851  0C76  0020               	movlb	0	; select bank0
  6852  0C77  082A               	movf	setLightIntHighThreshold@threshold,w
  6853  0C78  00AC               	movwf	??_setLightIntHighThreshold
  6854  0C79  082C               	movf	??_setLightIntHighThreshold,w
  6855  0C7A  00AD               	movwf	setLightIntHighThreshold@val_low
  6856                           
  6857                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  6858  0C7B  082B               	movf	setLightIntHighThreshold@threshold+1,w
  6859  0C7C  00AC               	movwf	??_setLightIntHighThreshold
  6860  0C7D  082C               	movf	??_setLightIntHighThreshold,w
  6861  0C7E  00AE               	movwf	setLightIntHighThreshold@val_high
  6862                           
  6863                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  6864  0C7F  082D               	movf	setLightIntHighThreshold@val_low,w
  6865  0C80  00AC               	movwf	??_setLightIntHighThreshold
  6866  0C81  082C               	movf	??_setLightIntHighThreshold,w
  6867  0C82  00A6               	movwf	wireWriteDataByte@val
  6868  0C83  3086               	movlw	134
  6869  0C84  318B  236D  318C   	fcall	_wireWriteDataByte
  6870  0C87  0020               	movlb	0	; select bank0
  6871  0C88  0826               	movf	?_wireWriteDataByte,w
  6872  0C89  0427               	iorwf	?_wireWriteDataByte+1,w
  6873  0C8A  1D03               	btfss	3,2
  6874  0C8B  2C8E               	goto	l6311
  6875  0C8C                     l6307:	
  6876                           
  6877                           ;APDS9960.c: 288:         return 0;
  6878  0C8C  3000               	movlw	0
  6879  0C8D  0008               	return
  6880  0C8E                     l6311:	
  6881                           
  6882                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  6883  0C8E  082E               	movf	setLightIntHighThreshold@val_high,w
  6884  0C8F  00AC               	movwf	??_setLightIntHighThreshold
  6885  0C90  082C               	movf	??_setLightIntHighThreshold,w
  6886  0C91  00A6               	movwf	wireWriteDataByte@val
  6887  0C92  3087               	movlw	135
  6888  0C93  318B  236D  318C   	fcall	_wireWriteDataByte
  6889  0C96  0020               	movlb	0	; select bank0
  6890  0C97  0826               	movf	?_wireWriteDataByte,w
  6891  0C98  0427               	iorwf	?_wireWriteDataByte+1,w
  6892  0C99  1903               	btfsc	3,2
  6893  0C9A  2C8C               	goto	l6307
  6894                           
  6895                           ;APDS9960.c: 296:     return 1;
  6896  0C9B  3001               	movlw	1
  6897  0C9C  0008               	return
  6898  0C9D                     __end_of_setLightIntHighThreshold:	
  6899                           
  6900                           	psect	text7
  6901  0CEC                     __ptext7:	
  6902 ;; *************** function _setLEDDrive *****************
  6903 ;; Defined at:
  6904 ;;		line 170 in file "APDS9960.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;  drive           1    wreg     unsigned char 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;  drive           1   13[BANK0 ] unsigned char 
  6909 ;;  val             1   12[BANK0 ] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      _Bool 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0, pclath, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;Total ram usage:        4 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    8
  6926 ;; This function calls:
  6927 ;;		_wireReadDataByte
  6928 ;;		_wireWriteDataByte
  6929 ;; This function is called by:
  6930 ;;		_initialize
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           
  6935                           ;psect for function _setLEDDrive
  6936  0CEC                     _setLEDDrive:	
  6937                           
  6938                           ;incstack = 0
  6939                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  6940                           ;setLEDDrive@drive stored from wreg
  6941  0CEC  0020               	movlb	0	; select bank0
  6942  0CED  00AD               	movwf	setLEDDrive@drive
  6943                           
  6944                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  6945  0CEE  308F               	movlw	143
  6946  0CEF  318B  23DE  318C   	fcall	_wireReadDataByte
  6947  0CF2  0020               	movlb	0	; select bank0
  6948  0CF3  00AA               	movwf	??_setLEDDrive
  6949  0CF4  082A               	movf	??_setLEDDrive,w
  6950  0CF5  00AC               	movwf	setLEDDrive@val
  6951                           
  6952                           ;APDS9960.c: 178:     drive &= 0b00000011;
  6953  0CF6  3003               	movlw	3
  6954  0CF7  00AA               	movwf	??_setLEDDrive
  6955  0CF8  082A               	movf	??_setLEDDrive,w
  6956  0CF9  05AD               	andwf	setLEDDrive@drive,f
  6957                           
  6958                           ;APDS9960.c: 179:     drive = drive << 6;
  6959  0CFA  082D               	movf	setLEDDrive@drive,w
  6960  0CFB  00AA               	movwf	??_setLEDDrive
  6961  0CFC  3005               	movlw	5
  6962  0CFD                     u5225:	
  6963  0CFD  35AA               	lslf	??_setLEDDrive,f
  6964  0CFE  3EFF               	addlw	-1
  6965  0CFF  1D03               	skipz
  6966  0D00  2CFD               	goto	u5225
  6967  0D01  352A               	lslf	??_setLEDDrive,w
  6968  0D02  00AB               	movwf	??_setLEDDrive+1
  6969  0D03  082B               	movf	??_setLEDDrive+1,w
  6970  0D04  00AD               	movwf	setLEDDrive@drive
  6971                           
  6972                           ;APDS9960.c: 180:     val &= 0b00111111;
  6973  0D05  303F               	movlw	63
  6974  0D06  00AA               	movwf	??_setLEDDrive
  6975  0D07  082A               	movf	??_setLEDDrive,w
  6976  0D08  05AC               	andwf	setLEDDrive@val,f
  6977                           
  6978                           ;APDS9960.c: 181:     val |= drive;
  6979  0D09  082D               	movf	setLEDDrive@drive,w
  6980  0D0A  00AA               	movwf	??_setLEDDrive
  6981  0D0B  082A               	movf	??_setLEDDrive,w
  6982  0D0C  04AC               	iorwf	setLEDDrive@val,f
  6983                           
  6984                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  6985  0D0D  082C               	movf	setLEDDrive@val,w
  6986  0D0E  00AA               	movwf	??_setLEDDrive
  6987  0D0F  082A               	movf	??_setLEDDrive,w
  6988  0D10  00A6               	movwf	wireWriteDataByte@val
  6989  0D11  308F               	movlw	143
  6990  0D12  318B  236D         	fcall	_wireWriteDataByte
  6991  0D14  0008               	return
  6992  0D15                     __end_of_setLEDDrive:	
  6993                           
  6994                           	psect	text8
  6995  0C4F                     __ptext8:	
  6996 ;; *************** function _setGestureWaitTime *****************
  6997 ;; Defined at:
  6998 ;;		line 366 in file "APDS9960.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  time            1    wreg     unsigned char 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  time            1   11[BANK0 ] unsigned char 
  7003 ;;  val             1   12[BANK0 ] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      _Bool 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, pclath, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        3 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    8
  7020 ;; This function calls:
  7021 ;;		_wireReadDataByte
  7022 ;;		_wireWriteDataByte
  7023 ;; This function is called by:
  7024 ;;		_initialize
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function _setGestureWaitTime
  7030  0C4F                     _setGestureWaitTime:	
  7031                           
  7032                           ;incstack = 0
  7033                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7034                           ;setGestureWaitTime@time stored from wreg
  7035  0C4F  0020               	movlb	0	; select bank0
  7036  0C50  00AB               	movwf	setGestureWaitTime@time
  7037                           
  7038                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7039  0C51  30A3               	movlw	163
  7040  0C52  318B  23DE  318C   	fcall	_wireReadDataByte
  7041  0C55  0020               	movlb	0	; select bank0
  7042  0C56  00AA               	movwf	??_setGestureWaitTime
  7043  0C57  082A               	movf	??_setGestureWaitTime,w
  7044  0C58  00AC               	movwf	setGestureWaitTime@val
  7045                           
  7046                           ;APDS9960.c: 374:     time &= 0b00000111;
  7047  0C59  3007               	movlw	7
  7048  0C5A  00AA               	movwf	??_setGestureWaitTime
  7049  0C5B  082A               	movf	??_setGestureWaitTime,w
  7050  0C5C  05AB               	andwf	setGestureWaitTime@time,f
  7051                           
  7052                           ;APDS9960.c: 375:     val &= 0b11111000;
  7053  0C5D  30F8               	movlw	248
  7054  0C5E  00AA               	movwf	??_setGestureWaitTime
  7055  0C5F  082A               	movf	??_setGestureWaitTime,w
  7056  0C60  05AC               	andwf	setGestureWaitTime@val,f
  7057                           
  7058                           ;APDS9960.c: 376:     val |= time;
  7059  0C61  082B               	movf	setGestureWaitTime@time,w
  7060  0C62  00AA               	movwf	??_setGestureWaitTime
  7061  0C63  082A               	movf	??_setGestureWaitTime,w
  7062  0C64  04AC               	iorwf	setGestureWaitTime@val,f
  7063                           
  7064                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7065  0C65  082C               	movf	setGestureWaitTime@val,w
  7066  0C66  00AA               	movwf	??_setGestureWaitTime
  7067  0C67  082A               	movf	??_setGestureWaitTime,w
  7068  0C68  00A6               	movwf	wireWriteDataByte@val
  7069  0C69  30A3               	movlw	163
  7070  0C6A  318B  236D  318C   	fcall	_wireWriteDataByte
  7071  0C6D  0020               	movlb	0	; select bank0
  7072  0C6E  0826               	movf	?_wireWriteDataByte,w
  7073  0C6F  0427               	iorwf	?_wireWriteDataByte+1,w
  7074  0C70  1D03               	btfss	3,2
  7075  0C71  2C74               	goto	l6391
  7076                           
  7077                           ;APDS9960.c: 380:         return 0;
  7078  0C72  3000               	movlw	0
  7079  0C73  0008               	return
  7080  0C74                     l6391:	
  7081                           
  7082                           ;APDS9960.c: 383:     return 1;
  7083  0C74  3001               	movlw	1
  7084  0C75  0008               	return
  7085  0C76                     __end_of_setGestureWaitTime:	
  7086                           
  7087                           	psect	text9
  7088  0E29                     __ptext9:	
  7089 ;; *************** function _setGestureLEDDrive *****************
  7090 ;; Defined at:
  7091 ;;		line 343 in file "APDS9960.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  drive           1    wreg     unsigned char 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  drive           1   13[BANK0 ] unsigned char 
  7096 ;;  val             1   12[BANK0 ] unsigned char 
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      _Bool 
  7099 ;; Registers used:
  7100 ;;		wreg, status,2, status,0, pclath, cstack
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;Total ram usage:        4 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    8
  7113 ;; This function calls:
  7114 ;;		_wireReadDataByte
  7115 ;;		_wireWriteDataByte
  7116 ;; This function is called by:
  7117 ;;		_initialize
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           
  7122                           ;psect for function _setGestureLEDDrive
  7123  0E29                     _setGestureLEDDrive:	
  7124                           
  7125                           ;incstack = 0
  7126                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7127                           ;setGestureLEDDrive@drive stored from wreg
  7128  0E29  0020               	movlb	0	; select bank0
  7129  0E2A  00AD               	movwf	setGestureLEDDrive@drive
  7130                           
  7131                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7132  0E2B  30A3               	movlw	163
  7133  0E2C  318B  23DE  318E   	fcall	_wireReadDataByte
  7134  0E2F  0020               	movlb	0	; select bank0
  7135  0E30  00AA               	movwf	??_setGestureLEDDrive
  7136  0E31  082A               	movf	??_setGestureLEDDrive,w
  7137  0E32  00AC               	movwf	setGestureLEDDrive@val
  7138                           
  7139                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7140  0E33  3003               	movlw	3
  7141  0E34  00AA               	movwf	??_setGestureLEDDrive
  7142  0E35  082A               	movf	??_setGestureLEDDrive,w
  7143  0E36  05AD               	andwf	setGestureLEDDrive@drive,f
  7144                           
  7145                           ;APDS9960.c: 353:     drive = drive << 3;
  7146  0E37  082D               	movf	setGestureLEDDrive@drive,w
  7147  0E38  00AA               	movwf	??_setGestureLEDDrive
  7148  0E39  3002               	movlw	2
  7149  0E3A                     u5345:	
  7150  0E3A  35AA               	lslf	??_setGestureLEDDrive,f
  7151  0E3B  3EFF               	addlw	-1
  7152  0E3C  1D03               	skipz
  7153  0E3D  2E3A               	goto	u5345
  7154  0E3E  352A               	lslf	??_setGestureLEDDrive,w
  7155  0E3F  00AB               	movwf	??_setGestureLEDDrive+1
  7156  0E40  082B               	movf	??_setGestureLEDDrive+1,w
  7157  0E41  00AD               	movwf	setGestureLEDDrive@drive
  7158                           
  7159                           ;APDS9960.c: 354:     val &= 0b11100111;
  7160  0E42  30E7               	movlw	231
  7161  0E43  00AA               	movwf	??_setGestureLEDDrive
  7162  0E44  082A               	movf	??_setGestureLEDDrive,w
  7163  0E45  05AC               	andwf	setGestureLEDDrive@val,f
  7164                           
  7165                           ;APDS9960.c: 355:     val |= drive;
  7166  0E46  082D               	movf	setGestureLEDDrive@drive,w
  7167  0E47  00AA               	movwf	??_setGestureLEDDrive
  7168  0E48  082A               	movf	??_setGestureLEDDrive,w
  7169  0E49  04AC               	iorwf	setGestureLEDDrive@val,f
  7170                           
  7171                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7172  0E4A  082C               	movf	setGestureLEDDrive@val,w
  7173  0E4B  00AA               	movwf	??_setGestureLEDDrive
  7174  0E4C  082A               	movf	??_setGestureLEDDrive,w
  7175  0E4D  00A6               	movwf	wireWriteDataByte@val
  7176  0E4E  30A3               	movlw	163
  7177  0E4F  318B  236D  318E   	fcall	_wireWriteDataByte
  7178  0E52  0020               	movlb	0	; select bank0
  7179  0E53  0826               	movf	?_wireWriteDataByte,w
  7180  0E54  0427               	iorwf	?_wireWriteDataByte+1,w
  7181  0E55  1D03               	btfss	3,2
  7182  0E56  2E59               	goto	l6373
  7183                           
  7184                           ;APDS9960.c: 359:         return 0;
  7185  0E57  3000               	movlw	0
  7186  0E58  0008               	return
  7187  0E59                     l6373:	
  7188                           
  7189                           ;APDS9960.c: 362:     return 1;
  7190  0E59  3001               	movlw	1
  7191  0E5A  0008               	return
  7192  0E5B                     __end_of_setGestureLEDDrive:	
  7193                           
  7194                           	psect	text10
  7195  0DF7                     __ptext10:	
  7196 ;; *************** function _setGestureGain *****************
  7197 ;; Defined at:
  7198 ;;		line 320 in file "APDS9960.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  gain            1    wreg     unsigned char 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  gain            1   13[BANK0 ] unsigned char 
  7203 ;;  val             1   12[BANK0 ] unsigned char 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      _Bool 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0, pclath, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;Total ram usage:        4 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    8
  7220 ;; This function calls:
  7221 ;;		_wireReadDataByte
  7222 ;;		_wireWriteDataByte
  7223 ;; This function is called by:
  7224 ;;		_initialize
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _setGestureGain
  7230  0DF7                     _setGestureGain:	
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7234                           ;setGestureGain@gain stored from wreg
  7235  0DF7  0020               	movlb	0	; select bank0
  7236  0DF8  00AD               	movwf	setGestureGain@gain
  7237                           
  7238                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7239  0DF9  30A3               	movlw	163
  7240  0DFA  318B  23DE  318D   	fcall	_wireReadDataByte
  7241  0DFD  0020               	movlb	0	; select bank0
  7242  0DFE  00AA               	movwf	??_setGestureGain
  7243  0DFF  082A               	movf	??_setGestureGain,w
  7244  0E00  00AC               	movwf	setGestureGain@val
  7245                           
  7246                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7247  0E01  3003               	movlw	3
  7248  0E02  00AA               	movwf	??_setGestureGain
  7249  0E03  082A               	movf	??_setGestureGain,w
  7250  0E04  05AD               	andwf	setGestureGain@gain,f
  7251                           
  7252                           ;APDS9960.c: 330:     gain = gain << 5;
  7253  0E05  082D               	movf	setGestureGain@gain,w
  7254  0E06  00AA               	movwf	??_setGestureGain
  7255  0E07  3004               	movlw	4
  7256  0E08                     u5325:	
  7257  0E08  35AA               	lslf	??_setGestureGain,f
  7258  0E09  3EFF               	addlw	-1
  7259  0E0A  1D03               	skipz
  7260  0E0B  2E08               	goto	u5325
  7261  0E0C  352A               	lslf	??_setGestureGain,w
  7262  0E0D  00AB               	movwf	??_setGestureGain+1
  7263  0E0E  082B               	movf	??_setGestureGain+1,w
  7264  0E0F  00AD               	movwf	setGestureGain@gain
  7265                           
  7266                           ;APDS9960.c: 331:     val &= 0b10011111;
  7267  0E10  309F               	movlw	159
  7268  0E11  00AA               	movwf	??_setGestureGain
  7269  0E12  082A               	movf	??_setGestureGain,w
  7270  0E13  05AC               	andwf	setGestureGain@val,f
  7271                           
  7272                           ;APDS9960.c: 332:     val |= gain;
  7273  0E14  082D               	movf	setGestureGain@gain,w
  7274  0E15  00AA               	movwf	??_setGestureGain
  7275  0E16  082A               	movf	??_setGestureGain,w
  7276  0E17  04AC               	iorwf	setGestureGain@val,f
  7277                           
  7278                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7279  0E18  082C               	movf	setGestureGain@val,w
  7280  0E19  00AA               	movwf	??_setGestureGain
  7281  0E1A  082A               	movf	??_setGestureGain,w
  7282  0E1B  00A6               	movwf	wireWriteDataByte@val
  7283  0E1C  30A3               	movlw	163
  7284  0E1D  318B  236D  318D   	fcall	_wireWriteDataByte
  7285  0E20  0020               	movlb	0	; select bank0
  7286  0E21  0826               	movf	?_wireWriteDataByte,w
  7287  0E22  0427               	iorwf	?_wireWriteDataByte+1,w
  7288  0E23  1D03               	btfss	3,2
  7289  0E24  2E27               	goto	l6355
  7290                           
  7291                           ;APDS9960.c: 336:         return 0;
  7292  0E25  3000               	movlw	0
  7293  0E26  0008               	return
  7294  0E27                     l6355:	
  7295                           
  7296                           ;APDS9960.c: 339:     return 1;
  7297  0E27  3001               	movlw	1
  7298  0E28  0008               	return
  7299  0E29                     __end_of_setGestureGain:	
  7300                           
  7301                           	psect	text11
  7302  0AD7                     __ptext11:	
  7303 ;; *************** function _setGestureExitThresh *****************
  7304 ;; Defined at:
  7305 ;;		line 310 in file "APDS9960.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  threshold       1    wreg     unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  threshold       1   11[BANK0 ] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      _Bool 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2, status,0, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        2 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    8
  7326 ;; This function calls:
  7327 ;;		_wireWriteDataByte
  7328 ;; This function is called by:
  7329 ;;		_initialize
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function _setGestureExitThresh
  7335  0AD7                     _setGestureExitThresh:	
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7339                           ;setGestureExitThresh@threshold stored from wreg
  7340  0AD7  0020               	movlb	0	; select bank0
  7341  0AD8  00AB               	movwf	setGestureExitThresh@threshold
  7342                           
  7343                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7344  0AD9  082B               	movf	setGestureExitThresh@threshold,w
  7345  0ADA  00AA               	movwf	??_setGestureExitThresh
  7346  0ADB  082A               	movf	??_setGestureExitThresh,w
  7347  0ADC  00A6               	movwf	wireWriteDataByte@val
  7348  0ADD  30A1               	movlw	161
  7349  0ADE  318B  236D  318A   	fcall	_wireWriteDataByte
  7350  0AE1  0020               	movlb	0	; select bank0
  7351  0AE2  0826               	movf	?_wireWriteDataByte,w
  7352  0AE3  0427               	iorwf	?_wireWriteDataByte+1,w
  7353  0AE4  1D03               	btfss	3,2
  7354  0AE5  2AE8               	goto	l6337
  7355                           
  7356                           ;APDS9960.c: 313:         return 0;
  7357  0AE6  3000               	movlw	0
  7358  0AE7  0008               	return
  7359  0AE8                     l6337:	
  7360                           
  7361                           ;APDS9960.c: 316:     return 1;
  7362  0AE8  3001               	movlw	1
  7363  0AE9  0008               	return
  7364  0AEA                     __end_of_setGestureExitThresh:	
  7365                           
  7366                           	psect	text12
  7367  0AC4                     __ptext12:	
  7368 ;; *************** function _setGestureEnterThresh *****************
  7369 ;; Defined at:
  7370 ;;		line 300 in file "APDS9960.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  threshold       1    wreg     unsigned char 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  threshold       1   11[BANK0 ] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      _Bool 
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0, pclath, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;Total ram usage:        2 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    8
  7391 ;; This function calls:
  7392 ;;		_wireWriteDataByte
  7393 ;; This function is called by:
  7394 ;;		_initialize
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           
  7399                           ;psect for function _setGestureEnterThresh
  7400  0AC4                     _setGestureEnterThresh:	
  7401                           
  7402                           ;incstack = 0
  7403                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7404                           ;setGestureEnterThresh@threshold stored from wreg
  7405  0AC4  0020               	movlb	0	; select bank0
  7406  0AC5  00AB               	movwf	setGestureEnterThresh@threshold
  7407                           
  7408                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  7409  0AC6  082B               	movf	setGestureEnterThresh@threshold,w
  7410  0AC7  00AA               	movwf	??_setGestureEnterThresh
  7411  0AC8  082A               	movf	??_setGestureEnterThresh,w
  7412  0AC9  00A6               	movwf	wireWriteDataByte@val
  7413  0ACA  30A0               	movlw	160
  7414  0ACB  318B  236D  318A   	fcall	_wireWriteDataByte
  7415  0ACE  0020               	movlb	0	; select bank0
  7416  0ACF  0826               	movf	?_wireWriteDataByte,w
  7417  0AD0  0427               	iorwf	?_wireWriteDataByte+1,w
  7418  0AD1  1D03               	btfss	3,2
  7419  0AD2  2AD5               	goto	l6327
  7420                           
  7421                           ;APDS9960.c: 303:         return 0;
  7422  0AD3  3000               	movlw	0
  7423  0AD4  0008               	return
  7424  0AD5                     l6327:	
  7425                           
  7426                           ;APDS9960.c: 306:     return 1;
  7427  0AD5  3001               	movlw	1
  7428  0AD6  0008               	return
  7429  0AD7                     __end_of_setGestureEnterThresh:	
  7430                           
  7431                           	psect	text13
  7432  0BC0                     __ptext13:	
  7433 ;; *************** function _setAmbientLightGain *****************
  7434 ;; Defined at:
  7435 ;;		line 213 in file "APDS9960.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  drive           1    wreg     unsigned char 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  drive           1   11[BANK0 ] unsigned char 
  7440 ;;  val             1   12[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      _Bool 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0, pclath, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;Total ram usage:        3 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    8
  7457 ;; This function calls:
  7458 ;;		_wireReadDataByte
  7459 ;;		_wireWriteDataByte
  7460 ;; This function is called by:
  7461 ;;		_initialize
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function _setAmbientLightGain
  7467  0BC0                     _setAmbientLightGain:	
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  7471                           ;setAmbientLightGain@drive stored from wreg
  7472  0BC0  0020               	movlb	0	; select bank0
  7473  0BC1  00AB               	movwf	setAmbientLightGain@drive
  7474                           
  7475                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  7476  0BC2  308F               	movlw	143
  7477  0BC3  318B  23DE  318B   	fcall	_wireReadDataByte
  7478  0BC6  0020               	movlb	0	; select bank0
  7479  0BC7  00AA               	movwf	??_setAmbientLightGain
  7480  0BC8  082A               	movf	??_setAmbientLightGain,w
  7481  0BC9  00AC               	movwf	setAmbientLightGain@val
  7482                           
  7483                           ;APDS9960.c: 221:     drive &= 0b00000011;
  7484  0BCA  3003               	movlw	3
  7485  0BCB  00AA               	movwf	??_setAmbientLightGain
  7486  0BCC  082A               	movf	??_setAmbientLightGain,w
  7487  0BCD  05AB               	andwf	setAmbientLightGain@drive,f
  7488                           
  7489                           ;APDS9960.c: 222:     val &= 0b11111100;
  7490  0BCE  30FC               	movlw	252
  7491  0BCF  00AA               	movwf	??_setAmbientLightGain
  7492  0BD0  082A               	movf	??_setAmbientLightGain,w
  7493  0BD1  05AC               	andwf	setAmbientLightGain@val,f
  7494                           
  7495                           ;APDS9960.c: 223:     val |= drive;
  7496  0BD2  082B               	movf	setAmbientLightGain@drive,w
  7497  0BD3  00AA               	movwf	??_setAmbientLightGain
  7498  0BD4  082A               	movf	??_setAmbientLightGain,w
  7499  0BD5  04AC               	iorwf	setAmbientLightGain@val,f
  7500                           
  7501                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  7502  0BD6  082C               	movf	setAmbientLightGain@val,w
  7503  0BD7  00AA               	movwf	??_setAmbientLightGain
  7504  0BD8  082A               	movf	??_setAmbientLightGain,w
  7505  0BD9  00A6               	movwf	wireWriteDataByte@val
  7506  0BDA  308F               	movlw	143
  7507  0BDB  318B  236D         	fcall	_wireWriteDataByte
  7508  0BDD  0008               	return
  7509  0BDE                     __end_of_setAmbientLightGain:	
  7510                           
  7511                           	psect	text14
  7512  0A82                     __ptext14:	
  7513 ;; *************** function _i2c1_driver_open *****************
  7514 ;; Defined at:
  7515 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;		None
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg, status,2
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;Total ram usage:        0 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    5
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_initialize
  7540 ;;		_i2c_open
  7541 ;;		_InitI2C
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           
  7546                           ;psect for function _i2c1_driver_open
  7547  0A82                     _i2c1_driver_open:	
  7548                           
  7549                           ;incstack = 0
  7550                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  7551  0A82  0024               	movlb	4	; select bank4
  7552  0A83  1A95               	btfsc	21,5	;volatile
  7553  0A84  0008               	return
  7554  0A85  0194               	clrf	20	;volatile
  7555  0A86  3028               	movlw	40
  7556  0A87  0095               	movwf	21	;volatile
  7557  0A88  0196               	clrf	22	;volatile
  7558  0A89  3003               	movlw	3
  7559  0A8A  0092               	movwf	18	;volatile
  7560  0A8B  0008               	return
  7561  0A8C                     __end_of_i2c1_driver_open:	
  7562                           
  7563                           	psect	text15
  7564  06D1                     __ptext15:	
  7565 ;; *************** function _handleGesture *****************
  7566 ;; Defined at:
  7567 ;;		line 150 in file "main.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;Total ram usage:        1 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:   10
  7588 ;; This function calls:
  7589 ;;		_Display_Name
  7590 ;;		_PWM_Output_Disable
  7591 ;;		_PWM_Output_Enable
  7592 ;;		_readGesture
  7593 ;; This function is called by:
  7594 ;;		_main
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           
  7599                           ;psect for function _handleGesture
  7600  06D1                     _handleGesture:	
  7601                           
  7602                           ;main.c: 152:     PWM_Output_Enable();
  7603                           
  7604                           ;incstack = 0
  7605                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7606  06D1  3189  21FF  3186   	fcall	_PWM_Output_Enable
  7607                           
  7608                           ;main.c: 153:     _delay((unsigned long)((200)*(500000/4000.0)));
  7609  06D4  3021               	movlw	33
  7610  06D5  0020               	movlb	0	; select bank0
  7611  06D6  00DB               	movwf	??_handleGesture
  7612  06D7  3076               	movlw	118
  7613  06D8                     u5917:	
  7614  06D8  0B89               	decfsz	9,f
  7615  06D9  2ED8               	goto	u5917
  7616  06DA  0BDB               	decfsz	??_handleGesture,f
  7617  06DB  2ED8               	goto	u5917
  7618  06DC  0000               	nop
  7619                           
  7620                           ;main.c: 154:     PWM_Output_Disable();
  7621  06DD  3189  21D0  3186   	fcall	_PWM_Output_Disable
  7622                           
  7623                           ;main.c: 156:     switch(readGesture()) {
  7624  06E0  2F1A               	goto	l6727
  7625  06E1                     l6705:	
  7626                           
  7627                           ;main.c: 164:             printed = 0;
  7628  06E1  01EE               	clrf	_printed
  7629                           
  7630                           ;main.c: 167:             name++;
  7631  06E2  3001               	movlw	1
  7632  06E3  07DC               	addwf	_name,f
  7633  06E4  3000               	movlw	0
  7634  06E5  3DDD               	addwfc	_name+1,f
  7635                           
  7636                           ;main.c: 168:             if(name > 3) {
  7637  06E6  085D               	movf	_name+1,w
  7638  06E7  3A80               	xorlw	128
  7639  06E8  00DB               	movwf	??_handleGesture
  7640  06E9  3080               	movlw	128
  7641  06EA  025B               	subwf	??_handleGesture,w
  7642  06EB  1D03               	skipz
  7643  06EC  2EEF               	goto	u5785
  7644  06ED  3004               	movlw	4
  7645  06EE  025C               	subwf	_name,w
  7646  06EF                     u5785:	
  7647  06EF  1C03               	skipc
  7648  06F0  2EF4               	goto	l6713
  7649                           
  7650                           ;main.c: 169:                 name = 0;
  7651  06F1  0020               	movlb	0	; select bank0
  7652  06F2  01DC               	clrf	_name
  7653  06F3  01DD               	clrf	_name+1
  7654  06F4                     l6713:	
  7655                           
  7656                           ;main.c: 171:             Display_Name(names[name]);
  7657  06F4  0020               	movlb	0	; select bank0
  7658  06F5  355C               	lslf	_name,w
  7659  06F6  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7660  06F7  0086               	movwf	6
  7661  06F8  3001               	movlw	1	; select bank2/3
  7662  06F9  0087               	movwf	7
  7663  06FA  3F40               	moviw [0]fsr1
  7664  06FB  00A5               	movwf	Display_Name@string1
  7665  06FC  3F41               	moviw [1]fsr1
  7666  06FD  00A6               	movwf	Display_Name@string1+1
  7667  06FE  318E  2691  3186   	fcall	_Display_Name
  7668                           
  7669                           ;main.c: 172:             break;
  7670  0701  2F37               	goto	l6729
  7671  0702                     l6715:	
  7672                           
  7673                           ;main.c: 174:             printed = 0;
  7674  0702  01EE               	clrf	_printed
  7675                           
  7676                           ;main.c: 175:             --name;
  7677  0703  30FF               	movlw	255
  7678  0704  07DC               	addwf	_name,f
  7679  0705  30FF               	movlw	255
  7680  0706  3DDD               	addwfc	_name+1,f
  7681                           
  7682                           ;main.c: 176:             if(name < 0) {
  7683  0707  1FDD               	btfss	_name+1,7
  7684  0708  2F0D               	goto	l6723
  7685                           
  7686                           ;main.c: 177:                 name = 3;
  7687  0709  3003               	movlw	3
  7688  070A  00DC               	movwf	_name
  7689  070B  3000               	movlw	0
  7690  070C  00DD               	movwf	_name+1
  7691  070D                     l6723:	
  7692                           
  7693                           ;main.c: 179:             Display_Name(names[name]);
  7694  070D  355C               	lslf	_name,w
  7695  070E  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7696  070F  0086               	movwf	6
  7697  0710  3001               	movlw	1	; select bank2/3
  7698  0711  0087               	movwf	7
  7699  0712  3F40               	moviw [0]fsr1
  7700  0713  00A5               	movwf	Display_Name@string1
  7701  0714  3F41               	moviw [1]fsr1
  7702  0715  00A6               	movwf	Display_Name@string1+1
  7703  0716  318E  2691  3186   	fcall	_Display_Name
  7704                           
  7705                           ;main.c: 180:             break;
  7706  0719  2F37               	goto	l6729
  7707  071A                     l6727:	
  7708  071A  3185  25DE  3186   	fcall	_readGesture
  7709                           
  7710                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7711                           ; Switch size 1, requested type "simple"
  7712                           ; Number of cases is 1, Range of values is 0 to 0
  7713                           ; switch strategies available:
  7714                           ; Name         Instructions Cycles
  7715                           ; simple_byte            4     3 (average)
  7716                           ; direct_byte            8     6 (fixed)
  7717                           ; jumptable            260     6 (fixed)
  7718                           ;	Chosen strategy is simple_byte
  7719  071D  0020               	movlb	0	; select bank0
  7720  071E  0850               	movf	?_readGesture+1,w
  7721  071F  3A00               	xorlw	0	; case 0
  7722  0720  1903               	skipnz
  7723  0721  2F23               	goto	l6989
  7724  0722  2F37               	goto	l6729
  7725  0723                     l6989:	
  7726                           
  7727                           ; Switch size 1, requested type "simple"
  7728                           ; Number of cases is 6, Range of values is 1 to 6
  7729                           ; switch strategies available:
  7730                           ; Name         Instructions Cycles
  7731                           ; simple_byte           19    10 (average)
  7732                           ; direct_byte           21     9 (fixed)
  7733                           ; jumptable            263     9 (fixed)
  7734                           ;	Chosen strategy is simple_byte
  7735  0723  084F               	movf	?_readGesture,w
  7736  0724  3A01               	xorlw	1	; case 1
  7737  0725  1903               	skipnz
  7738  0726  2EE1               	goto	l6705
  7739  0727  3A03               	xorlw	3	; case 2
  7740  0728  1903               	skipnz
  7741  0729  2F02               	goto	l6715
  7742  072A  3A01               	xorlw	1	; case 3
  7743  072B  1903               	skipnz
  7744  072C  2F37               	goto	l6729
  7745  072D  3A07               	xorlw	7	; case 4
  7746  072E  1903               	skipnz
  7747  072F  2F37               	goto	l6729
  7748  0730  3A01               	xorlw	1	; case 5
  7749  0731  1903               	skipnz
  7750  0732  2F37               	goto	l6729
  7751  0733  3A03               	xorlw	3	; case 6
  7752  0734  1903               	skipnz
  7753  0735  2F37               	goto	l6729
  7754  0736  2F37               	goto	l6729
  7755  0737                     l6729:	
  7756                           
  7757                           ;main.c: 192:     printed = 0;
  7758  0737  0020               	movlb	0	; select bank0
  7759  0738  01EE               	clrf	_printed
  7760  0739  0008               	return
  7761  073A                     __end_of_handleGesture:	
  7762                           
  7763                           	psect	text16
  7764  05DE                     __ptext16:	
  7765 ;; *************** function _readGesture *****************
  7766 ;; Defined at:
  7767 ;;		line 556 in file "APDS9960.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;		None
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  7772 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  7773 ;;  i               2   57[BANK0 ] int 
  7774 ;;  bytes_read      2   54[BANK0 ] int 
  7775 ;;  motion          2   51[BANK0 ] int 
  7776 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  7777 ;;  gstatus         1   53[BANK0 ] unsigned char 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  2   47[BANK0 ] int 
  7780 ;; Registers used:
  7781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7787 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;Total ram usage:      140 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    9
  7794 ;; This function calls:
  7795 ;;		_decodeGesture
  7796 ;;		_getMode
  7797 ;;		_isGestureAvailable
  7798 ;;		_processGestureData
  7799 ;;		_resetGestureParameters
  7800 ;;		_wireReadDataBlock
  7801 ;;		_wireReadDataByte
  7802 ;; This function is called by:
  7803 ;;		_handleGesture
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function _readGesture
  7809  05DE                     _readGesture:	
  7810                           
  7811                           ;APDS9960.c: 559:     int bytes_read = 0;
  7812                           
  7813                           ;incstack = 0
  7814                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7815  05DE  0020               	movlb	0	; select bank0
  7816  05DF  01D6               	clrf	readGesture@bytes_read
  7817  05E0  01D7               	clrf	readGesture@bytes_read+1
  7818                           
  7819                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  7820  05E1  318A  22B1  3185   	fcall	_isGestureAvailable
  7821  05E4  3A00               	xorlw	0
  7822  05E5  1903               	skipnz
  7823  05E6  2DED               	goto	l6169
  7824  05E7  318A  2279  3185   	fcall	_getMode
  7825  05EA  3941               	andlw	65
  7826  05EB  1D03               	btfss	3,2
  7827  05EC  2EA2               	goto	l6173
  7828  05ED                     l6169:	
  7829                           
  7830                           ;APDS9960.c: 568:         return DIR_NONE;
  7831  05ED  0020               	movlb	0	; select bank0
  7832  05EE  01CF               	clrf	?_readGesture
  7833  05EF  01D0               	clrf	?_readGesture+1
  7834  05F0  0008               	return
  7835  05F1                     l6179:	
  7836                           ;APDS9960.c: 569:     }
  7837                           
  7838                           
  7839                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  7840  05F1  30AE               	movlw	174
  7841  05F2  318B  23DE  3185   	fcall	_wireReadDataByte
  7842  05F5  0020               	movlb	0	; select bank0
  7843  05F6  00D1               	movwf	??_readGesture
  7844  05F7  0851               	movf	??_readGesture,w
  7845  05F8  00D8               	movwf	readGesture@fifo_level
  7846                           
  7847                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  7848  05F9  0858               	movf	readGesture@fifo_level,w
  7849  05FA  1903               	btfsc	3,2
  7850  05FB  2EA2               	goto	l6173
  7851                           
  7852                           ;APDS9960.c: 592:               if(fifo_level < 17)
  7853  05FC  3011               	movlw	17
  7854  05FD  0258               	subwf	readGesture@fifo_level,w
  7855  05FE  1803               	skipnc
  7856  05FF  2E04               	goto	l6187
  7857                           
  7858                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7859  0600  3020               	movlw	low readGesture@fifo_data
  7860  0601  00A6               	movwf	wireReadDataBlock@val
  7861  0602  3001               	movlw	high readGesture@fifo_data
  7862  0603  2E07               	goto	L1
  7863  0604                     l6187:	
  7864                           ;APDS9960.c: 597:               } else
  7865                           
  7866                           
  7867                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7868  0604  30A0               	movlw	low readGesture@fifo_data2
  7869  0605  00A6               	movwf	wireReadDataBlock@val
  7870  0606  3000               	movlw	high readGesture@fifo_data2
  7871  0607                     L1:	
  7872  0607  00A7               	movwf	wireReadDataBlock@val+1
  7873  0608  0858               	movf	readGesture@fifo_level,w
  7874  0609  00D1               	movwf	??_readGesture
  7875  060A  01D2               	clrf	??_readGesture+1
  7876  060B  35D1               	lslf	??_readGesture,f
  7877  060C  0DD2               	rlf	??_readGesture+1,f
  7878  060D  35D1               	lslf	??_readGesture,f
  7879  060E  0DD2               	rlf	??_readGesture+1,f
  7880  060F  0851               	movf	??_readGesture,w
  7881  0610  00A8               	movwf	wireReadDataBlock@len
  7882  0611  0852               	movf	??_readGesture+1,w
  7883  0612  00A9               	movwf	wireReadDataBlock@len+1
  7884  0613  30FC               	movlw	252
  7885  0614  318F  2718  3185   	fcall	_wireReadDataBlock
  7886  0617  0020               	movlb	0	; select bank0
  7887  0618  0827               	movf	?_wireReadDataBlock+1,w
  7888  0619  00D7               	movwf	readGesture@bytes_read+1
  7889  061A  0826               	movf	?_wireReadDataBlock,w
  7890  061B  00D6               	movwf	readGesture@bytes_read
  7891                           
  7892                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  7893  061C  0A56               	incf	readGesture@bytes_read,w
  7894  061D  1D03               	skipz
  7895  061E  2E27               	goto	l6195
  7896  061F  0A57               	incf	readGesture@bytes_read+1,w
  7897  0620  1D03               	btfss	3,2
  7898  0621  2E27               	goto	l6195
  7899                           
  7900                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  7901  0622  30FF               	movlw	255
  7902  0623  00CF               	movwf	?_readGesture
  7903  0624  3000               	movlw	0
  7904  0625  00D0               	movwf	?_readGesture+1
  7905  0626  0008               	return
  7906  0627                     l6195:	
  7907                           
  7908                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  7909  0627  0857               	movf	readGesture@bytes_read+1,w
  7910  0628  3A80               	xorlw	128
  7911  0629  00D1               	movwf	??_readGesture
  7912  062A  3080               	movlw	128
  7913  062B  0251               	subwf	??_readGesture,w
  7914  062C  1D03               	skipz
  7915  062D  2E30               	goto	u5195
  7916  062E  3004               	movlw	4
  7917  062F  0256               	subwf	readGesture@bytes_read,w
  7918  0630                     u5195:	
  7919  0630  1C03               	skipc
  7920  0631  2EA2               	goto	l6173
  7921                           
  7922                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  7923  0632  0020               	movlb	0	; select bank0
  7924  0633  01D9               	clrf	readGesture@i
  7925  0634  01DA               	clrf	readGesture@i+1
  7926  0635                     l6207:	
  7927  0635  085A               	movf	readGesture@i+1,w
  7928  0636  3A80               	xorlw	128
  7929  0637  00D1               	movwf	??_readGesture
  7930  0638  0857               	movf	readGesture@bytes_read+1,w
  7931  0639  3A80               	xorlw	128
  7932  063A  0251               	subwf	??_readGesture,w
  7933  063B  1D03               	skipz
  7934  063C  2E3F               	goto	u5205
  7935  063D  0856               	movf	readGesture@bytes_read,w
  7936  063E  0259               	subwf	readGesture@i,w
  7937  063F                     u5205:	
  7938  063F  1803               	btfsc	3,0
  7939  0640  2E96               	goto	l6209
  7940                           
  7941                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  7942  0641  0020               	movlb	0	; select bank0
  7943  0642  0859               	movf	readGesture@i,w
  7944  0643  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7945  0644  0086               	movwf	6
  7946  0645  3001               	movlw	1	; select bank2/3
  7947  0646  0087               	movwf	7
  7948  0647  0801               	movf	1,w
  7949  0648  00D1               	movwf	??_readGesture
  7950  0649  0024               	movlb	4	; select bank4
  7951  064A  0860               	movf	(_gesture_data_^(0+512)+64),w
  7952  064B  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7953  064C  0086               	movwf	6
  7954  064D  3002               	movlw	2	; select bank4/5
  7955  064E  0087               	movwf	7
  7956  064F  0020               	movlb	0	; select bank0
  7957  0650  0851               	movf	??_readGesture,w
  7958  0651  0081               	movwf	1
  7959                           
  7960                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  7961  0652  0859               	movf	readGesture@i,w
  7962  0653  3E01               	addlw	1
  7963  0654  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7964  0655  0086               	movwf	6
  7965  0656  3001               	movlw	1	; select bank2/3
  7966  0657  0087               	movwf	7
  7967  0658  0801               	movf	1,w
  7968  0659  00D1               	movwf	??_readGesture
  7969  065A  0024               	movlb	4	; select bank4
  7970  065B  0860               	movf	(_gesture_data_^(0+512)+64),w
  7971  065C  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7972  065D  0086               	movwf	6
  7973  065E  3002               	movlw	2	; select bank4/5
  7974  065F  0087               	movwf	7
  7975  0660  0020               	movlb	0	; select bank0
  7976  0661  0851               	movf	??_readGesture,w
  7977  0662  0081               	movwf	1
  7978                           
  7979                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  7980  0663  0859               	movf	readGesture@i,w
  7981  0664  3E02               	addlw	2
  7982  0665  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7983  0666  0086               	movwf	6
  7984  0667  3001               	movlw	1	; select bank2/3
  7985  0668  0087               	movwf	7
  7986  0669  0801               	movf	1,w
  7987  066A  00D1               	movwf	??_readGesture
  7988  066B  0024               	movlb	4	; select bank4
  7989  066C  0860               	movf	(_gesture_data_^(0+512)+64),w
  7990  066D  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7991  066E  0086               	movwf	6
  7992  066F  3002               	movlw	2	; select bank4/5
  7993  0670  0087               	movwf	7
  7994  0671  0020               	movlb	0	; select bank0
  7995  0672  0851               	movf	??_readGesture,w
  7996  0673  0081               	movwf	1
  7997                           
  7998                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  7999  0674  0859               	movf	readGesture@i,w
  8000  0675  3E03               	addlw	3
  8001  0676  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8002  0677  0086               	movwf	6
  8003  0678  3001               	movlw	1	; select bank2/3
  8004  0679  0087               	movwf	7
  8005  067A  0801               	movf	1,w
  8006  067B  00D1               	movwf	??_readGesture
  8007  067C  0024               	movlb	4	; select bank4
  8008  067D  0860               	movf	(_gesture_data_^(0+512)+64),w
  8009  067E  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8010  067F  0086               	movwf	6
  8011  0680  3002               	movlw	2	; select bank4/5
  8012  0681  0087               	movwf	7
  8013  0682  0020               	movlb	0	; select bank0
  8014  0683  0851               	movf	??_readGesture,w
  8015  0684  0081               	movwf	1
  8016                           
  8017                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8018  0685  3001               	movlw	1
  8019  0686  00D1               	movwf	??_readGesture
  8020  0687  0851               	movf	??_readGesture,w
  8021  0688  0024               	movlb	4	; select bank4
  8022  0689  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8023                           
  8024                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8025  068A  3001               	movlw	1
  8026  068B  0020               	movlb	0	; select bank0
  8027  068C  00D1               	movwf	??_readGesture
  8028  068D  0851               	movf	??_readGesture,w
  8029  068E  0024               	movlb	4	; select bank4
  8030  068F  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8031                           
  8032                           ;APDS9960.c: 626:                     }
  8033  0690  3004               	movlw	4
  8034  0691  0020               	movlb	0	; select bank0
  8035  0692  07D9               	addwf	readGesture@i,f
  8036  0693  3000               	movlw	0
  8037  0694  3DDA               	addwfc	readGesture@i+1,f
  8038  0695  2E35               	goto	l6207
  8039  0696                     l6209:	
  8040                           
  8041                           ;APDS9960.c: 629:                     if( processGestureData() )
  8042  0696  3180  2069  3185   	fcall	_processGestureData
  8043  0699  3A00               	xorlw	0
  8044  069A  1903               	skipnz
  8045  069B  2E9F               	goto	l6213
  8046                           
  8047                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8048  069C  3183  2338  3185   	fcall	_decodeGesture
  8049  069F                     l6213:	
  8050                           
  8051                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8052  069F  0024               	movlb	4	; select bank4
  8053  06A0  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8054                           
  8055                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8056  06A1  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8057  06A2                     l6173:	
  8058                           
  8059                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8060  06A2  3005               	movlw	5
  8061  06A3  0020               	movlb	0	; select bank0
  8062  06A4  00D1               	movwf	??_readGesture
  8063  06A5  30DD               	movlw	221
  8064  06A6                     u5927:	
  8065  06A6  0B89               	decfsz	9,f
  8066  06A7  2EA6               	goto	u5927
  8067  06A8  0BD1               	decfsz	??_readGesture,f
  8068  06A9  2EA6               	goto	u5927
  8069  06AA  3200               	nop2
  8070                           
  8071                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8072  06AB  30AF               	movlw	175
  8073  06AC  318B  23DE  3185   	fcall	_wireReadDataByte
  8074  06AF  0020               	movlb	0	; select bank0
  8075  06B0  00D1               	movwf	??_readGesture
  8076  06B1  0851               	movf	??_readGesture,w
  8077  06B2  00D5               	movwf	readGesture@gstatus
  8078                           
  8079                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8080  06B3  1855               	btfsc	readGesture@gstatus,0
  8081  06B4  2DF1               	goto	l6179
  8082                           
  8083                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8084  06B5  3005               	movlw	5
  8085  06B6  0020               	movlb	0	; select bank0
  8086  06B7  00D1               	movwf	??_readGesture
  8087  06B8  30DD               	movlw	221
  8088  06B9                     u5937:	
  8089  06B9  0B89               	decfsz	9,f
  8090  06BA  2EB9               	goto	u5937
  8091  06BB  0BD1               	decfsz	??_readGesture,f
  8092  06BC  2EB9               	goto	u5937
  8093  06BD  3200               	nop2
  8094                           
  8095                           ;APDS9960.c: 646:             decodeGesture();
  8096  06BE  3183  2338  3185   	fcall	_decodeGesture
  8097                           
  8098                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8099  06C1  0022               	movlb	2	; select bank2
  8100  06C2  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8101  06C3  0020               	movlb	0	; select bank0
  8102  06C4  00D4               	movwf	readGesture@motion+1
  8103  06C5  0022               	movlb	2	; select bank2
  8104  06C6  0868               	movf	_gesture_motion_^(0+256),w
  8105  06C7  0020               	movlb	0	; select bank0
  8106  06C8  00D3               	movwf	readGesture@motion
  8107                           
  8108                           ;APDS9960.c: 649:             resetGestureParameters();
  8109  06C9  318B  233D         	fcall	_resetGestureParameters
  8110                           
  8111                           ;APDS9960.c: 651:             return motion;
  8112  06CB  0020               	movlb	0	; select bank0
  8113  06CC  0854               	movf	readGesture@motion+1,w
  8114  06CD  00D0               	movwf	?_readGesture+1
  8115  06CE  0853               	movf	readGesture@motion,w
  8116  06CF  00CF               	movwf	?_readGesture
  8117  06D0  0008               	return
  8118  06D1                     __end_of_readGesture:	
  8119                           
  8120                           	psect	text17
  8121  0F18                     __ptext17:	
  8122 ;; *************** function _wireReadDataBlock *****************
  8123 ;; Defined at:
  8124 ;;		line 847 in file "APDS9960.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  reg             1    wreg     unsigned char 
  8127 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8128 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8129 ;;  len             2    8[BANK0 ] unsigned int 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  reg             1   15[BANK0 ] unsigned char 
  8132 ;;  j               1   16[BANK0 ] unsigned char 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  2    6[BANK0 ] int 
  8135 ;; Registers used:
  8136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;Total ram usage:       11 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    7
  8149 ;; This function calls:
  8150 ;;		_I2C_ReStart
  8151 ;;		_I2C_Read_Byte
  8152 ;;		_I2C_Send_NACK
  8153 ;;		_I2C_Start
  8154 ;;		_I2C_Stop
  8155 ;;		_I2C_Write_Byte
  8156 ;; This function is called by:
  8157 ;;		_readGesture
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function _wireReadDataBlock
  8163  0F18                     _wireReadDataBlock:	
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8167                           ;wireReadDataBlock@reg stored from wreg
  8168  0F18  0020               	movlb	0	; select bank0
  8169  0F19  00AF               	movwf	wireReadDataBlock@reg
  8170                           
  8171                           ;APDS9960.c: 851:     I2C_Start();
  8172  0F1A  3189  21C7  318F   	fcall	_I2C_Start
  8173                           
  8174                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8175  0F1D  3072               	movlw	114
  8176  0F1E  318B  2388  318F   	fcall	_I2C_Write_Byte
  8177                           
  8178                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8179  0F21  0020               	movlb	0	; select bank0
  8180  0F22  082F               	movf	wireReadDataBlock@reg,w
  8181  0F23  318B  2388  318F   	fcall	_I2C_Write_Byte
  8182                           
  8183                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8184  0F26  0020               	movlb	0	; select bank0
  8185  0F27  01B0               	clrf	wireReadDataBlock@j
  8186  0F28                     l5761:	
  8187  0F28  0830               	movf	wireReadDataBlock@j,w
  8188  0F29  00AA               	movwf	??_wireReadDataBlock
  8189  0F2A  01AB               	clrf	??_wireReadDataBlock+1
  8190  0F2B  0829               	movf	wireReadDataBlock@len+1,w
  8191  0F2C  022B               	subwf	??_wireReadDataBlock+1,w
  8192  0F2D  1D03               	skipz
  8193  0F2E  2F31               	goto	u4365
  8194  0F2F  0828               	movf	wireReadDataBlock@len,w
  8195  0F30  022A               	subwf	??_wireReadDataBlock,w
  8196  0F31                     u4365:	
  8197  0F31  1803               	btfsc	3,0
  8198  0F32  2F57               	goto	l5763
  8199                           
  8200                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8201  0F33  3189  21B8  318F   	fcall	_I2C_ReStart
  8202                           
  8203                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8204  0F36  3073               	movlw	115
  8205  0F37  318B  2388  318F   	fcall	_I2C_Write_Byte
  8206                           
  8207                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8208  0F3A  318A  228C  318F   	fcall	_I2C_Read_Byte
  8209  0F3D  0020               	movlb	0	; select bank0
  8210  0F3E  00AA               	movwf	??_wireReadDataBlock
  8211  0F3F  0830               	movf	wireReadDataBlock@j,w
  8212  0F40  00AB               	movwf	??_wireReadDataBlock+1
  8213  0F41  01AC               	clrf	??_wireReadDataBlock+2
  8214  0F42  082B               	movf	??_wireReadDataBlock+1,w
  8215  0F43  0726               	addwf	wireReadDataBlock@val,w
  8216  0F44  00AD               	movwf	??_wireReadDataBlock+3
  8217  0F45  082C               	movf	??_wireReadDataBlock+2,w
  8218  0F46  3D27               	addwfc	wireReadDataBlock@val+1,w
  8219  0F47  00AE               	movwf	??_wireReadDataBlock+4
  8220  0F48  082D               	movf	??_wireReadDataBlock+3,w
  8221  0F49  0086               	movwf	6
  8222  0F4A  082E               	movf	??_wireReadDataBlock+4,w
  8223  0F4B  0087               	movwf	7
  8224  0F4C  082A               	movf	??_wireReadDataBlock,w
  8225  0F4D  0081               	movwf	1
  8226                           
  8227                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8228  0F4E  3189  21C1  318F   	fcall	_I2C_Send_NACK
  8229                           
  8230                           ;APDS9960.c: 864:     }
  8231  0F51  3001               	movlw	1
  8232  0F52  0020               	movlb	0	; select bank0
  8233  0F53  00AA               	movwf	??_wireReadDataBlock
  8234  0F54  082A               	movf	??_wireReadDataBlock,w
  8235  0F55  07B0               	addwf	wireReadDataBlock@j,f
  8236  0F56  2F28               	goto	l5761
  8237  0F57                     l5763:	
  8238                           
  8239                           ;APDS9960.c: 866:     I2C_Stop();
  8240  0F57  3189  21CD         	fcall	_I2C_Stop
  8241                           
  8242                           ;APDS9960.c: 867:     return (int)j;
  8243  0F59  0020               	movlb	0	; select bank0
  8244  0F5A  0830               	movf	wireReadDataBlock@j,w
  8245  0F5B  00AA               	movwf	??_wireReadDataBlock
  8246  0F5C  01AB               	clrf	??_wireReadDataBlock+1
  8247  0F5D  082A               	movf	??_wireReadDataBlock,w
  8248  0F5E  00A6               	movwf	?_wireReadDataBlock
  8249  0F5F  082B               	movf	??_wireReadDataBlock+1,w
  8250  0F60  00A7               	movwf	?_wireReadDataBlock+1
  8251  0F61  0008               	return
  8252  0F62                     __end_of_wireReadDataBlock:	
  8253                           
  8254                           	psect	text18
  8255  0069                     __ptext18:	
  8256 ;; *************** function _processGestureData *****************
  8257 ;; Defined at:
  8258 ;;		line 657 in file "APDS9960.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;		None
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  i               2   45[BANK0 ] int 
  8263 ;;  lr_delta        2   43[BANK0 ] int 
  8264 ;;  ud_delta        2   41[BANK0 ] int 
  8265 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8266 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8267 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8268 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8269 ;;  r_first         1   40[BANK0 ] unsigned char 
  8270 ;;  l_first         1   39[BANK0 ] unsigned char 
  8271 ;;  d_first         1   38[BANK0 ] unsigned char 
  8272 ;;  u_first         1   37[BANK0 ] unsigned char 
  8273 ;;  r_last          1   36[BANK0 ] unsigned char 
  8274 ;;  l_last          1   35[BANK0 ] unsigned char 
  8275 ;;  d_last          1   34[BANK0 ] unsigned char 
  8276 ;;  u_last          1   33[BANK0 ] unsigned char 
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      _Bool 
  8279 ;; Registers used:
  8280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:       32 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    6
  8293 ;; This function calls:
  8294 ;;		___awdiv
  8295 ;;		___wmul
  8296 ;; This function is called by:
  8297 ;;		_readGesture
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           
  8302                           ;psect for function _processGestureData
  8303  0069                     _processGestureData:	
  8304                           
  8305                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8309  0069  0020               	movlb	0	; select bank0
  8310  006A  01C5               	clrf	processGestureData@u_first
  8311                           
  8312                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8313  006B  01C6               	clrf	processGestureData@d_first
  8314                           
  8315                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8316  006C  01C7               	clrf	processGestureData@l_first
  8317                           
  8318                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8319  006D  01C8               	clrf	processGestureData@r_first
  8320                           
  8321                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8322  006E  01C1               	clrf	processGestureData@u_last
  8323                           
  8324                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8325  006F  01C2               	clrf	processGestureData@d_last
  8326                           
  8327                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8328  0070  01C3               	clrf	processGestureData@l_last
  8329                           
  8330                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8331  0071  01C4               	clrf	processGestureData@r_last
  8332                           
  8333                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8334  0072  3005               	movlw	5
  8335  0073  0024               	movlb	4	; select bank4
  8336  0074  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8337  0075  1803               	skipnc
  8338  0076  2879               	goto	l5777
  8339  0077                     l5773:	
  8340                           
  8341                           ;APDS9960.c: 677:         return 0;
  8342  0077  3000               	movlw	0
  8343  0078  0008               	return
  8344  0079                     l5777:	
  8345                           
  8346                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8347  0079  3021               	movlw	33
  8348  007A  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8349  007B  1803               	skipnc
  8350  007C  2943               	goto	l5827
  8351  007D  0861               	movf	(_gesture_data_^(0+512)+65),w
  8352  007E  1903               	btfsc	3,2
  8353  007F  2943               	goto	l5827
  8354                           
  8355                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8356  0080  0020               	movlb	0	; select bank0
  8357  0081  01CD               	clrf	processGestureData@i
  8358  0082  01CE               	clrf	processGestureData@i+1
  8359  0083  2888               	goto	l1030
  8360  0084                     l5793:	
  8361                           ;APDS9960.c: 695:                 break;
  8362                           
  8363                           
  8364                           ;APDS9960.c: 697:         }
  8365  0084  3001               	movlw	1
  8366  0085  07CD               	addwf	processGestureData@i,f
  8367  0086  3000               	movlw	0
  8368  0087  3DCE               	addwfc	processGestureData@i+1,f
  8369  0088                     l1030:	
  8370  0088  084E               	movf	processGestureData@i+1,w
  8371  0089  3A80               	xorlw	128
  8372  008A  00AF               	movwf	??_processGestureData
  8373  008B  3080               	movlw	128
  8374  008C  022F               	subwf	??_processGestureData,w
  8375  008D  1D03               	skipz
  8376  008E  2893               	goto	u4445
  8377  008F  0024               	movlb	4	; select bank4
  8378  0090  0861               	movf	(_gesture_data_^(0+512)+65),w
  8379  0091  0020               	movlb	0	; select bank0
  8380  0092  024D               	subwf	processGestureData@i,w
  8381  0093                     u4445:	
  8382  0093  1803               	btfsc	3,0
  8383  0094  28DE               	goto	l5795
  8384                           
  8385                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  8386  0095  0020               	movlb	0	; select bank0
  8387  0096  084D               	movf	processGestureData@i,w
  8388  0097  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8389  0098  0086               	movwf	6
  8390  0099  3002               	movlw	2	; select bank4/5
  8391  009A  0087               	movwf	7
  8392  009B  300B               	movlw	11
  8393  009C  0201               	subwf	1,w
  8394  009D  1C03               	skipc
  8395  009E  2884               	goto	l5793
  8396  009F  084D               	movf	processGestureData@i,w
  8397  00A0  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8398  00A1  0086               	movwf	6
  8399  00A2  3002               	movlw	2	; select bank4/5
  8400  00A3  0087               	movwf	7
  8401  00A4  300B               	movlw	11
  8402  00A5  0201               	subwf	1,w
  8403  00A6  1C03               	skipc
  8404  00A7  2884               	goto	l5793
  8405  00A8  084D               	movf	processGestureData@i,w
  8406  00A9  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8407  00AA  0086               	movwf	6
  8408  00AB  3002               	movlw	2	; select bank4/5
  8409  00AC  0087               	movwf	7
  8410  00AD  300B               	movlw	11
  8411  00AE  0201               	subwf	1,w
  8412  00AF  1C03               	skipc
  8413  00B0  2884               	goto	l5793
  8414  00B1  084D               	movf	processGestureData@i,w
  8415  00B2  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8416  00B3  0086               	movwf	6
  8417  00B4  3002               	movlw	2	; select bank4/5
  8418  00B5  0087               	movwf	7
  8419  00B6  300B               	movlw	11
  8420  00B7  0201               	subwf	1,w
  8421  00B8  1C03               	skipc
  8422  00B9  2884               	goto	l5793
  8423                           
  8424                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  8425  00BA  084D               	movf	processGestureData@i,w
  8426  00BB  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8427  00BC  0086               	movwf	6
  8428  00BD  3002               	movlw	2	; select bank4/5
  8429  00BE  0087               	movwf	7
  8430  00BF  0801               	movf	1,w
  8431  00C0  00AF               	movwf	??_processGestureData
  8432  00C1  082F               	movf	??_processGestureData,w
  8433  00C2  00C5               	movwf	processGestureData@u_first
  8434                           
  8435                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  8436  00C3  084D               	movf	processGestureData@i,w
  8437  00C4  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8438  00C5  0086               	movwf	6
  8439  00C6  3002               	movlw	2	; select bank4/5
  8440  00C7  0087               	movwf	7
  8441  00C8  0801               	movf	1,w
  8442  00C9  00AF               	movwf	??_processGestureData
  8443  00CA  082F               	movf	??_processGestureData,w
  8444  00CB  00C6               	movwf	processGestureData@d_first
  8445                           
  8446                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  8447  00CC  084D               	movf	processGestureData@i,w
  8448  00CD  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8449  00CE  0086               	movwf	6
  8450  00CF  3002               	movlw	2	; select bank4/5
  8451  00D0  0087               	movwf	7
  8452  00D1  0801               	movf	1,w
  8453  00D2  00AF               	movwf	??_processGestureData
  8454  00D3  082F               	movf	??_processGestureData,w
  8455  00D4  00C7               	movwf	processGestureData@l_first
  8456                           
  8457                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  8458  00D5  084D               	movf	processGestureData@i,w
  8459  00D6  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8460  00D7  0086               	movwf	6
  8461  00D8  3002               	movlw	2	; select bank4/5
  8462  00D9  0087               	movwf	7
  8463  00DA  0801               	movf	1,w
  8464  00DB  00AF               	movwf	??_processGestureData
  8465  00DC  082F               	movf	??_processGestureData,w
  8466  00DD  00C8               	movwf	processGestureData@r_first
  8467  00DE                     l5795:	
  8468                           
  8469                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  8470  00DE  0020               	movlb	0	; select bank0
  8471  00DF  0845               	movf	processGestureData@u_first,w
  8472  00E0  1903               	btfsc	3,2
  8473  00E1  2877               	goto	l5773
  8474  00E2  0846               	movf	processGestureData@d_first,w
  8475  00E3  1903               	btfsc	3,2
  8476  00E4  2877               	goto	l5773
  8477  00E5  0847               	movf	processGestureData@l_first,w
  8478  00E6  1903               	btfsc	3,2
  8479  00E7  2877               	goto	l5773
  8480  00E8  0848               	movf	processGestureData@r_first,w
  8481  00E9  1903               	btfsc	3,2
  8482  00EA  2877               	goto	l5773
  8483                           
  8484                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  8485  00EB  0024               	movlb	4	; select bank4
  8486  00EC  0861               	movf	(_gesture_data_^(0+512)+65),w
  8487  00ED  3EFF               	addlw	255
  8488  00EE  0020               	movlb	0	; select bank0
  8489  00EF  00CD               	movwf	processGestureData@i
  8490  00F0  30FF               	movlw	255
  8491  00F1  1803               	skipnc
  8492  00F2  3000               	movlw	0
  8493  00F3  00CE               	movwf	processGestureData@i+1
  8494                           
  8495                           ;APDS9960.c: 717:                 break;
  8496  00F4  28F9               	goto	l5809
  8497  00F5                     l5823:	
  8498                           
  8499                           ;APDS9960.c: 719:         }
  8500  00F5  30FF               	movlw	255
  8501  00F6  07CD               	addwf	processGestureData@i,f
  8502  00F7  30FF               	movlw	255
  8503  00F8  3DCE               	addwfc	processGestureData@i+1,f
  8504  00F9                     l5809:	
  8505  00F9  1BCE               	btfsc	processGestureData@i+1,7
  8506  00FA  2943               	goto	l5827
  8507                           
  8508                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  8509  00FB  084D               	movf	processGestureData@i,w
  8510  00FC  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8511  00FD  0086               	movwf	6
  8512  00FE  3002               	movlw	2	; select bank4/5
  8513  00FF  0087               	movwf	7
  8514  0100  300B               	movlw	11
  8515  0101  0201               	subwf	1,w
  8516  0102  1C03               	skipc
  8517  0103  28F5               	goto	l5823
  8518  0104  084D               	movf	processGestureData@i,w
  8519  0105  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8520  0106  0086               	movwf	6
  8521  0107  3002               	movlw	2	; select bank4/5
  8522  0108  0087               	movwf	7
  8523  0109  300B               	movlw	11
  8524  010A  0201               	subwf	1,w
  8525  010B  1C03               	skipc
  8526  010C  28F5               	goto	l5823
  8527  010D  084D               	movf	processGestureData@i,w
  8528  010E  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8529  010F  0086               	movwf	6
  8530  0110  3002               	movlw	2	; select bank4/5
  8531  0111  0087               	movwf	7
  8532  0112  300B               	movlw	11
  8533  0113  0201               	subwf	1,w
  8534  0114  1C03               	skipc
  8535  0115  28F5               	goto	l5823
  8536  0116  084D               	movf	processGestureData@i,w
  8537  0117  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8538  0118  0086               	movwf	6
  8539  0119  3002               	movlw	2	; select bank4/5
  8540  011A  0087               	movwf	7
  8541  011B  300B               	movlw	11
  8542  011C  0201               	subwf	1,w
  8543  011D  1C03               	skipc
  8544  011E  28F5               	goto	l5823
  8545                           
  8546                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  8547  011F  084D               	movf	processGestureData@i,w
  8548  0120  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8549  0121  0086               	movwf	6
  8550  0122  3002               	movlw	2	; select bank4/5
  8551  0123  0087               	movwf	7
  8552  0124  0801               	movf	1,w
  8553  0125  00AF               	movwf	??_processGestureData
  8554  0126  082F               	movf	??_processGestureData,w
  8555  0127  00C1               	movwf	processGestureData@u_last
  8556                           
  8557                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  8558  0128  084D               	movf	processGestureData@i,w
  8559  0129  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8560  012A  0086               	movwf	6
  8561  012B  3002               	movlw	2	; select bank4/5
  8562  012C  0087               	movwf	7
  8563  012D  0801               	movf	1,w
  8564  012E  00AF               	movwf	??_processGestureData
  8565  012F  082F               	movf	??_processGestureData,w
  8566  0130  00C2               	movwf	processGestureData@d_last
  8567                           
  8568                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  8569  0131  084D               	movf	processGestureData@i,w
  8570  0132  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8571  0133  0086               	movwf	6
  8572  0134  3002               	movlw	2	; select bank4/5
  8573  0135  0087               	movwf	7
  8574  0136  0801               	movf	1,w
  8575  0137  00AF               	movwf	??_processGestureData
  8576  0138  082F               	movf	??_processGestureData,w
  8577  0139  00C3               	movwf	processGestureData@l_last
  8578                           
  8579                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  8580  013A  084D               	movf	processGestureData@i,w
  8581  013B  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8582  013C  0086               	movwf	6
  8583  013D  3002               	movlw	2	; select bank4/5
  8584  013E  0087               	movwf	7
  8585  013F  0801               	movf	1,w
  8586  0140  00AF               	movwf	??_processGestureData
  8587  0141  082F               	movf	??_processGestureData,w
  8588  0142  00C4               	movwf	processGestureData@r_last
  8589  0143                     l5827:	
  8590                           
  8591                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  8592  0143  0020               	movlb	0	; select bank0
  8593  0144  0845               	movf	processGestureData@u_first,w
  8594  0145  0746               	addwf	processGestureData@d_first,w
  8595  0146  00A6               	movwf	___awdiv@divisor
  8596  0147  01A7               	clrf	___awdiv@divisor+1
  8597  0148  0DA7               	rlf	___awdiv@divisor+1,f
  8598  0149  0846               	movf	processGestureData@d_first,w
  8599  014A  0245               	subwf	processGestureData@u_first,w
  8600  014B  00A0               	movwf	___wmul@multiplier
  8601  014C  01A1               	clrf	___wmul@multiplier+1
  8602  014D  1C03               	skipc
  8603  014E  03A1               	decf	___wmul@multiplier+1,f
  8604  014F  3064               	movlw	100
  8605  0150  00A2               	movwf	___wmul@multiplicand
  8606  0151  3000               	movlw	0
  8607  0152  00A3               	movwf	___wmul@multiplicand+1
  8608  0153  318B  23A4  3180   	fcall	___wmul
  8609  0156  0020               	movlb	0	; select bank0
  8610  0157  0821               	movf	?___wmul+1,w
  8611  0158  00A9               	movwf	___awdiv@dividend+1
  8612  0159  0820               	movf	?___wmul,w
  8613  015A  00A8               	movwf	___awdiv@dividend
  8614  015B  3187  279E  3180   	fcall	___awdiv
  8615  015E  0020               	movlb	0	; select bank0
  8616  015F  0827               	movf	?___awdiv+1,w
  8617  0160  00B2               	movwf	processGestureData@ud_ratio_first+1
  8618  0161  0826               	movf	?___awdiv,w
  8619  0162  00B1               	movwf	processGestureData@ud_ratio_first
  8620                           
  8621                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  8622  0163  0847               	movf	processGestureData@l_first,w
  8623  0164  0748               	addwf	processGestureData@r_first,w
  8624  0165  00A6               	movwf	___awdiv@divisor
  8625  0166  01A7               	clrf	___awdiv@divisor+1
  8626  0167  0DA7               	rlf	___awdiv@divisor+1,f
  8627  0168  0848               	movf	processGestureData@r_first,w
  8628  0169  0247               	subwf	processGestureData@l_first,w
  8629  016A  00A0               	movwf	___wmul@multiplier
  8630  016B  01A1               	clrf	___wmul@multiplier+1
  8631  016C  1C03               	skipc
  8632  016D  03A1               	decf	___wmul@multiplier+1,f
  8633  016E  3064               	movlw	100
  8634  016F  00A2               	movwf	___wmul@multiplicand
  8635  0170  3000               	movlw	0
  8636  0171  00A3               	movwf	___wmul@multiplicand+1
  8637  0172  318B  23A4  3180   	fcall	___wmul
  8638  0175  0020               	movlb	0	; select bank0
  8639  0176  0821               	movf	?___wmul+1,w
  8640  0177  00A9               	movwf	___awdiv@dividend+1
  8641  0178  0820               	movf	?___wmul,w
  8642  0179  00A8               	movwf	___awdiv@dividend
  8643  017A  3187  279E  3180   	fcall	___awdiv
  8644  017D  0020               	movlb	0	; select bank0
  8645  017E  0827               	movf	?___awdiv+1,w
  8646  017F  00B4               	movwf	processGestureData@lr_ratio_first+1
  8647  0180  0826               	movf	?___awdiv,w
  8648  0181  00B3               	movwf	processGestureData@lr_ratio_first
  8649                           
  8650                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8651  0182  0841               	movf	processGestureData@u_last,w
  8652  0183  0742               	addwf	processGestureData@d_last,w
  8653  0184  00A6               	movwf	___awdiv@divisor
  8654  0185  01A7               	clrf	___awdiv@divisor+1
  8655  0186  0DA7               	rlf	___awdiv@divisor+1,f
  8656  0187  0842               	movf	processGestureData@d_last,w
  8657  0188  0241               	subwf	processGestureData@u_last,w
  8658  0189  00A0               	movwf	___wmul@multiplier
  8659  018A  01A1               	clrf	___wmul@multiplier+1
  8660  018B  1C03               	skipc
  8661  018C  03A1               	decf	___wmul@multiplier+1,f
  8662  018D  3064               	movlw	100
  8663  018E  00A2               	movwf	___wmul@multiplicand
  8664  018F  3000               	movlw	0
  8665  0190  00A3               	movwf	___wmul@multiplicand+1
  8666  0191  318B  23A4  3180   	fcall	___wmul
  8667  0194  0020               	movlb	0	; select bank0
  8668  0195  0821               	movf	?___wmul+1,w
  8669  0196  00A9               	movwf	___awdiv@dividend+1
  8670  0197  0820               	movf	?___wmul,w
  8671  0198  00A8               	movwf	___awdiv@dividend
  8672  0199  3187  279E  3180   	fcall	___awdiv
  8673  019C  0020               	movlb	0	; select bank0
  8674  019D  0827               	movf	?___awdiv+1,w
  8675  019E  00B6               	movwf	processGestureData@ud_ratio_last+1
  8676  019F  0826               	movf	?___awdiv,w
  8677  01A0  00B5               	movwf	processGestureData@ud_ratio_last
  8678                           
  8679                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8680  01A1  0843               	movf	processGestureData@l_last,w
  8681  01A2  0744               	addwf	processGestureData@r_last,w
  8682  01A3  00A6               	movwf	___awdiv@divisor
  8683  01A4  01A7               	clrf	___awdiv@divisor+1
  8684  01A5  0DA7               	rlf	___awdiv@divisor+1,f
  8685  01A6  0844               	movf	processGestureData@r_last,w
  8686  01A7  0243               	subwf	processGestureData@l_last,w
  8687  01A8  00A0               	movwf	___wmul@multiplier
  8688  01A9  01A1               	clrf	___wmul@multiplier+1
  8689  01AA  1C03               	skipc
  8690  01AB  03A1               	decf	___wmul@multiplier+1,f
  8691  01AC  3064               	movlw	100
  8692  01AD  00A2               	movwf	___wmul@multiplicand
  8693  01AE  3000               	movlw	0
  8694  01AF  00A3               	movwf	___wmul@multiplicand+1
  8695  01B0  318B  23A4  3180   	fcall	___wmul
  8696  01B3  0020               	movlb	0	; select bank0
  8697  01B4  0821               	movf	?___wmul+1,w
  8698  01B5  00A9               	movwf	___awdiv@dividend+1
  8699  01B6  0820               	movf	?___wmul,w
  8700  01B7  00A8               	movwf	___awdiv@dividend
  8701  01B8  3187  279E  3180   	fcall	___awdiv
  8702  01BB  0020               	movlb	0	; select bank0
  8703  01BC  0827               	movf	?___awdiv+1,w
  8704  01BD  00B8               	movwf	processGestureData@lr_ratio_last+1
  8705  01BE  0826               	movf	?___awdiv,w
  8706  01BF  00B7               	movwf	processGestureData@lr_ratio_last
  8707                           
  8708                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  8709  01C0  0831               	movf	processGestureData@ud_ratio_first,w
  8710  01C1  0235               	subwf	processGestureData@ud_ratio_last,w
  8711  01C2  00C9               	movwf	processGestureData@ud_delta
  8712  01C3  0832               	movf	processGestureData@ud_ratio_first+1,w
  8713  01C4  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  8714  01C5  00CA               	movwf	processGestureData@ud_delta+1
  8715                           
  8716                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  8717  01C6  0833               	movf	processGestureData@lr_ratio_first,w
  8718  01C7  0237               	subwf	processGestureData@lr_ratio_last,w
  8719  01C8  00CB               	movwf	processGestureData@lr_delta
  8720  01C9  0834               	movf	processGestureData@lr_ratio_first+1,w
  8721  01CA  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  8722  01CB  00CC               	movwf	processGestureData@lr_delta+1
  8723                           
  8724                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  8725  01CC  0849               	movf	processGestureData@ud_delta,w
  8726  01CD  07E8               	addwf	_gesture_ud_delta_,f
  8727  01CE  084A               	movf	processGestureData@ud_delta+1,w
  8728  01CF  3DE9               	addwfc	_gesture_ud_delta_+1,f
  8729                           
  8730                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  8731  01D0  084B               	movf	processGestureData@lr_delta,w
  8732  01D1  07E6               	addwf	_gesture_lr_delta_,f
  8733  01D2  084C               	movf	processGestureData@lr_delta+1,w
  8734  01D3  3DE7               	addwfc	_gesture_lr_delta_+1,f
  8735                           
  8736                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  8737  01D4  0869               	movf	_gesture_ud_delta_+1,w
  8738  01D5  3A80               	xorlw	128
  8739  01D6  00AF               	movwf	??_processGestureData
  8740  01D7  3080               	movlw	128
  8741  01D8  022F               	subwf	??_processGestureData,w
  8742  01D9  1D03               	skipz
  8743  01DA  29DD               	goto	u4545
  8744  01DB  3032               	movlw	50
  8745  01DC  0268               	subwf	_gesture_ud_delta_,w
  8746  01DD                     u4545:	
  8747  01DD  1C03               	skipc
  8748  01DE  29E4               	goto	l5841
  8749                           
  8750                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  8751  01DF  3001               	movlw	1
  8752  01E0  0020               	movlb	0	; select bank0
  8753  01E1  00E4               	movwf	_gesture_ud_count_
  8754  01E2  3000               	movlw	0
  8755  01E3  29F4               	goto	L2
  8756  01E4                     l5841:	
  8757                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  8758                           
  8759  01E4  0020               	movlb	0	; select bank0
  8760  01E5  0869               	movf	_gesture_ud_delta_+1,w
  8761  01E6  3A80               	xorlw	128
  8762  01E7  00AF               	movwf	??_processGestureData
  8763  01E8  307F               	movlw	127
  8764  01E9  022F               	subwf	??_processGestureData,w
  8765  01EA  1D03               	skipz
  8766  01EB  29EE               	goto	u4555
  8767  01EC  30CF               	movlw	207
  8768  01ED  0268               	subwf	_gesture_ud_delta_,w
  8769  01EE                     u4555:	
  8770  01EE  1803               	skipnc
  8771  01EF  29F6               	goto	l5845
  8772                           
  8773                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  8774  01F0  30FF               	movlw	255
  8775  01F1  0020               	movlb	0	; select bank0
  8776  01F2  00E4               	movwf	_gesture_ud_count_
  8777  01F3  30FF               	movlw	255
  8778  01F4                     L2:	
  8779  01F4  00E5               	movwf	_gesture_ud_count_+1
  8780                           
  8781                           ;APDS9960.c: 741:     } else {
  8782  01F5  29F9               	goto	l5847
  8783  01F6                     l5845:	
  8784                           
  8785                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  8786  01F6  0020               	movlb	0	; select bank0
  8787  01F7  01E4               	clrf	_gesture_ud_count_
  8788  01F8  01E5               	clrf	_gesture_ud_count_+1
  8789  01F9                     l5847:	
  8790                           
  8791                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  8792  01F9  0867               	movf	_gesture_lr_delta_+1,w
  8793  01FA  3A80               	xorlw	128
  8794  01FB  00AF               	movwf	??_processGestureData
  8795  01FC  3080               	movlw	128
  8796  01FD  022F               	subwf	??_processGestureData,w
  8797  01FE  1D03               	skipz
  8798  01FF  2A02               	goto	u4565
  8799  0200  3032               	movlw	50
  8800  0201  0266               	subwf	_gesture_lr_delta_,w
  8801  0202                     u4565:	
  8802  0202  1C03               	skipc
  8803  0203  2A09               	goto	l5851
  8804                           
  8805                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  8806  0204  3001               	movlw	1
  8807  0205  0020               	movlb	0	; select bank0
  8808  0206  00E2               	movwf	_gesture_lr_count_
  8809  0207  3000               	movlw	0
  8810  0208  2A19               	goto	L3
  8811  0209                     l5851:	
  8812                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  8813                           
  8814  0209  0020               	movlb	0	; select bank0
  8815  020A  0867               	movf	_gesture_lr_delta_+1,w
  8816  020B  3A80               	xorlw	128
  8817  020C  00AF               	movwf	??_processGestureData
  8818  020D  307F               	movlw	127
  8819  020E  022F               	subwf	??_processGestureData,w
  8820  020F  1D03               	skipz
  8821  0210  2A13               	goto	u4575
  8822  0211  30CF               	movlw	207
  8823  0212  0266               	subwf	_gesture_lr_delta_,w
  8824  0213                     u4575:	
  8825  0213  1803               	skipnc
  8826  0214  2A1B               	goto	l5855
  8827                           
  8828                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  8829  0215  30FF               	movlw	255
  8830  0216  0020               	movlb	0	; select bank0
  8831  0217  00E2               	movwf	_gesture_lr_count_
  8832  0218  30FF               	movlw	255
  8833  0219                     L3:	
  8834  0219  00E3               	movwf	_gesture_lr_count_+1
  8835                           
  8836                           ;APDS9960.c: 750:     } else {
  8837  021A  2A1E               	goto	l5857
  8838  021B                     l5855:	
  8839                           
  8840                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  8841  021B  0020               	movlb	0	; select bank0
  8842  021C  01E2               	clrf	_gesture_lr_count_
  8843  021D  01E3               	clrf	_gesture_lr_count_+1
  8844  021E                     l5857:	
  8845                           
  8846                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  8847  021E  0864               	movf	_gesture_ud_count_,w
  8848  021F  0465               	iorwf	_gesture_ud_count_+1,w
  8849  0220  1D03               	btfss	3,2
  8850  0221  2AC5               	goto	l5901
  8851  0222  0862               	movf	_gesture_lr_count_,w
  8852  0223  0463               	iorwf	_gesture_lr_count_+1,w
  8853  0224  1D03               	btfss	3,2
  8854  0225  2AC5               	goto	l5901
  8855                           
  8856                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8857  0226  084A               	movf	processGestureData@ud_delta+1,w
  8858  0227  3A80               	xorlw	128
  8859  0228  00AF               	movwf	??_processGestureData
  8860  0229  3080               	movlw	128
  8861  022A  022F               	subwf	??_processGestureData,w
  8862  022B  1D03               	skipz
  8863  022C  2A2F               	goto	u4605
  8864  022D  3001               	movlw	1
  8865  022E  0249               	subwf	processGestureData@ud_delta,w
  8866  022F                     u4605:	
  8867  022F  1803               	skipnc
  8868  0230  2A3E               	goto	l5865
  8869  0231  0020               	movlb	0	; select bank0
  8870  0232  0949               	comf	processGestureData@ud_delta,w
  8871  0233  00AF               	movwf	??_processGestureData
  8872  0234  094A               	comf	processGestureData@ud_delta+1,w
  8873  0235  00B0               	movwf	??_processGestureData+1
  8874  0236  0AAF               	incf	??_processGestureData,f
  8875  0237  1903               	skipnz
  8876  0238  0AB0               	incf	??_processGestureData+1,f
  8877  0239  082F               	movf	??_processGestureData,w
  8878  023A  00B9               	movwf	_processGestureData$1481
  8879  023B  0830               	movf	??_processGestureData+1,w
  8880  023C  00BA               	movwf	_processGestureData$1481+1
  8881  023D  2A43               	goto	l1053
  8882  023E                     l5865:	
  8883  023E  0020               	movlb	0	; select bank0
  8884  023F  084A               	movf	processGestureData@ud_delta+1,w
  8885  0240  00BA               	movwf	_processGestureData$1481+1
  8886  0241  0849               	movf	processGestureData@ud_delta,w
  8887  0242  00B9               	movwf	_processGestureData$1481
  8888  0243                     l1053:	
  8889  0243  083A               	movf	_processGestureData$1481+1,w
  8890  0244  3A80               	xorlw	128
  8891  0245  00AF               	movwf	??_processGestureData
  8892  0246  3080               	movlw	128
  8893  0247  022F               	subwf	??_processGestureData,w
  8894  0248  1D03               	skipz
  8895  0249  2A4C               	goto	u4615
  8896  024A  3014               	movlw	20
  8897  024B  0239               	subwf	_processGestureData$1481,w
  8898  024C                     u4615:	
  8899  024C  1803               	skipnc
  8900  024D  2877               	goto	l5773
  8901  024E  0020               	movlb	0	; select bank0
  8902  024F  084C               	movf	processGestureData@lr_delta+1,w
  8903  0250  3A80               	xorlw	128
  8904  0251  00AF               	movwf	??_processGestureData
  8905  0252  3080               	movlw	128
  8906  0253  022F               	subwf	??_processGestureData,w
  8907  0254  1D03               	skipz
  8908  0255  2A58               	goto	u4625
  8909  0256  3001               	movlw	1
  8910  0257  024B               	subwf	processGestureData@lr_delta,w
  8911  0258                     u4625:	
  8912  0258  1803               	skipnc
  8913  0259  2A67               	goto	l5871
  8914  025A  0020               	movlb	0	; select bank0
  8915  025B  094B               	comf	processGestureData@lr_delta,w
  8916  025C  00AF               	movwf	??_processGestureData
  8917  025D  094C               	comf	processGestureData@lr_delta+1,w
  8918  025E  00B0               	movwf	??_processGestureData+1
  8919  025F  0AAF               	incf	??_processGestureData,f
  8920  0260  1903               	skipnz
  8921  0261  0AB0               	incf	??_processGestureData+1,f
  8922  0262  082F               	movf	??_processGestureData,w
  8923  0263  00BB               	movwf	_processGestureData$1482
  8924  0264  0830               	movf	??_processGestureData+1,w
  8925  0265  00BC               	movwf	_processGestureData$1482+1
  8926  0266  2A6C               	goto	l1057
  8927  0267                     l5871:	
  8928  0267  0020               	movlb	0	; select bank0
  8929  0268  084C               	movf	processGestureData@lr_delta+1,w
  8930  0269  00BC               	movwf	_processGestureData$1482+1
  8931  026A  084B               	movf	processGestureData@lr_delta,w
  8932  026B  00BB               	movwf	_processGestureData$1482
  8933  026C                     l1057:	
  8934  026C  083C               	movf	_processGestureData$1482+1,w
  8935  026D  3A80               	xorlw	128
  8936  026E  00AF               	movwf	??_processGestureData
  8937  026F  3080               	movlw	128
  8938  0270  022F               	subwf	??_processGestureData,w
  8939  0271  1D03               	skipz
  8940  0272  2A75               	goto	u4635
  8941  0273  3014               	movlw	20
  8942  0274  023B               	subwf	_processGestureData$1482,w
  8943  0275                     u4635:	
  8944  0275  1803               	skipnc
  8945  0276  2877               	goto	l5773
  8946                           
  8947                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  8948  0277  0020               	movlb	0	; select bank0
  8949  0278  0849               	movf	processGestureData@ud_delta,w
  8950  0279  044A               	iorwf	processGestureData@ud_delta+1,w
  8951  027A  1D03               	btfss	3,2
  8952  027B  2A85               	goto	l5879
  8953  027C  084B               	movf	processGestureData@lr_delta,w
  8954  027D  044C               	iorwf	processGestureData@lr_delta+1,w
  8955  027E  1D03               	btfss	3,2
  8956  027F  2A85               	goto	l5879
  8957                           
  8958                           ;APDS9960.c: 760:                 gesture_near_count_++;
  8959  0280  3001               	movlw	1
  8960  0281  07E0               	addwf	_gesture_near_count_,f
  8961  0282  3000               	movlw	0
  8962  0283  3DE1               	addwfc	_gesture_near_count_+1,f
  8963                           
  8964                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  8965  0284  2A92               	goto	l1059
  8966  0285                     l5879:	
  8967  0285  0849               	movf	processGestureData@ud_delta,w
  8968  0286  044A               	iorwf	processGestureData@ud_delta+1,w
  8969  0287  1D03               	btfss	3,2
  8970  0288  2A8D               	goto	l5883
  8971  0289  084B               	movf	processGestureData@lr_delta,w
  8972  028A  044C               	iorwf	processGestureData@lr_delta+1,w
  8973  028B  1903               	btfsc	3,2
  8974  028C  2A92               	goto	l1059
  8975  028D                     l5883:	
  8976                           
  8977                           ;APDS9960.c: 762:                 gesture_far_count_++;
  8978  028D  3001               	movlw	1
  8979  028E  0021               	movlb	1	; select bank1
  8980  028F  07E2               	addwf	_gesture_far_count_^(0+128),f
  8981  0290  3000               	movlw	0
  8982  0291  3DE3               	addwfc	(_gesture_far_count_+1)^(0+128),f
  8983  0292                     l1059:	
  8984                           
  8985                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  8986  0292  0020               	movlb	0	; select bank0
  8987  0293  0861               	movf	_gesture_near_count_+1,w
  8988  0294  3A80               	xorlw	128
  8989  0295  00AF               	movwf	??_processGestureData
  8990  0296  3080               	movlw	128
  8991  0297  022F               	subwf	??_processGestureData,w
  8992  0298  1D03               	skipz
  8993  0299  2A9C               	goto	u4685
  8994  029A  300A               	movlw	10
  8995  029B  0260               	subwf	_gesture_near_count_,w
  8996  029C                     u4685:	
  8997  029C  1C03               	skipc
  8998  029D  2877               	goto	l5773
  8999  029E  0021               	movlb	1	; select bank1
  9000  029F  0863               	movf	(_gesture_far_count_+1)^(0+128),w
  9001  02A0  3A80               	xorlw	128
  9002  02A1  0020               	movlb	0	; select bank0
  9003  02A2  00AF               	movwf	??_processGestureData
  9004  02A3  3080               	movlw	128
  9005  02A4  022F               	subwf	??_processGestureData,w
  9006  02A5  1D03               	skipz
  9007  02A6  2AAA               	goto	u4695
  9008  02A7  3002               	movlw	2
  9009  02A8  0021               	movlb	1	; select bank1
  9010  02A9  0262               	subwf	_gesture_far_count_^(0+128),w
  9011  02AA                     u4695:	
  9012  02AA  1C03               	skipc
  9013  02AB  2877               	goto	l5773
  9014                           
  9015                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9016  02AC  0020               	movlb	0	; select bank0
  9017  02AD  0849               	movf	processGestureData@ud_delta,w
  9018  02AE  044A               	iorwf	processGestureData@ud_delta+1,w
  9019  02AF  1D03               	btfss	3,2
  9020  02B0  2AB7               	goto	l5893
  9021  02B1  084B               	movf	processGestureData@lr_delta,w
  9022  02B2  044C               	iorwf	processGestureData@lr_delta+1,w
  9023  02B3  1D03               	btfss	3,2
  9024  02B4  2AB7               	goto	l5893
  9025                           
  9026                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9027  02B5  3001               	movlw	1
  9028  02B6  2AC0               	goto	L4
  9029  02B7                     l5893:	
  9030                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9031                           
  9032  02B7  0849               	movf	processGestureData@ud_delta,w
  9033  02B8  044A               	iorwf	processGestureData@ud_delta+1,w
  9034  02B9  1903               	btfsc	3,2
  9035  02BA  2AC3               	goto	l1065
  9036  02BB  084B               	movf	processGestureData@lr_delta,w
  9037  02BC  044C               	iorwf	processGestureData@lr_delta+1,w
  9038  02BD  1903               	btfsc	3,2
  9039  02BE  2AC3               	goto	l1065
  9040                           
  9041                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9042  02BF  3002               	movlw	2
  9043  02C0                     L4:	
  9044  02C0  00DE               	movwf	_gesture_state_
  9045  02C1  3000               	movlw	0
  9046  02C2  00DF               	movwf	_gesture_state_+1
  9047  02C3                     l1065:	
  9048                           
  9049                           ;APDS9960.c: 771:                 return 1;
  9050  02C3  3001               	movlw	1
  9051  02C4  0008               	return
  9052  02C5                     l5901:	
  9053                           
  9054                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9055  02C5  084A               	movf	processGestureData@ud_delta+1,w
  9056  02C6  3A80               	xorlw	128
  9057  02C7  00AF               	movwf	??_processGestureData
  9058  02C8  3080               	movlw	128
  9059  02C9  022F               	subwf	??_processGestureData,w
  9060  02CA  1D03               	skipz
  9061  02CB  2ACE               	goto	u4745
  9062  02CC  3001               	movlw	1
  9063  02CD  0249               	subwf	processGestureData@ud_delta,w
  9064  02CE                     u4745:	
  9065  02CE  1803               	skipnc
  9066  02CF  2ADD               	goto	l5905
  9067  02D0  0020               	movlb	0	; select bank0
  9068  02D1  0949               	comf	processGestureData@ud_delta,w
  9069  02D2  00AF               	movwf	??_processGestureData
  9070  02D3  094A               	comf	processGestureData@ud_delta+1,w
  9071  02D4  00B0               	movwf	??_processGestureData+1
  9072  02D5  0AAF               	incf	??_processGestureData,f
  9073  02D6  1903               	skipnz
  9074  02D7  0AB0               	incf	??_processGestureData+1,f
  9075  02D8  082F               	movf	??_processGestureData,w
  9076  02D9  00BD               	movwf	_processGestureData$1483
  9077  02DA  0830               	movf	??_processGestureData+1,w
  9078  02DB  00BE               	movwf	_processGestureData$1483+1
  9079  02DC  2AE2               	goto	l1072
  9080  02DD                     l5905:	
  9081  02DD  0020               	movlb	0	; select bank0
  9082  02DE  084A               	movf	processGestureData@ud_delta+1,w
  9083  02DF  00BE               	movwf	_processGestureData$1483+1
  9084  02E0  0849               	movf	processGestureData@ud_delta,w
  9085  02E1  00BD               	movwf	_processGestureData$1483
  9086  02E2                     l1072:	
  9087  02E2  083E               	movf	_processGestureData$1483+1,w
  9088  02E3  3A80               	xorlw	128
  9089  02E4  00AF               	movwf	??_processGestureData
  9090  02E5  3080               	movlw	128
  9091  02E6  022F               	subwf	??_processGestureData,w
  9092  02E7  1D03               	skipz
  9093  02E8  2AEB               	goto	u4755
  9094  02E9  3014               	movlw	20
  9095  02EA  023D               	subwf	_processGestureData$1483,w
  9096  02EB                     u4755:	
  9097  02EB  1803               	skipnc
  9098  02EC  2877               	goto	l5773
  9099  02ED  0020               	movlb	0	; select bank0
  9100  02EE  084C               	movf	processGestureData@lr_delta+1,w
  9101  02EF  3A80               	xorlw	128
  9102  02F0  00AF               	movwf	??_processGestureData
  9103  02F1  3080               	movlw	128
  9104  02F2  022F               	subwf	??_processGestureData,w
  9105  02F3  1D03               	skipz
  9106  02F4  2AF7               	goto	u4765
  9107  02F5  3001               	movlw	1
  9108  02F6  024B               	subwf	processGestureData@lr_delta,w
  9109  02F7                     u4765:	
  9110  02F7  1803               	skipnc
  9111  02F8  2B06               	goto	l5911
  9112  02F9  0020               	movlb	0	; select bank0
  9113  02FA  094B               	comf	processGestureData@lr_delta,w
  9114  02FB  00AF               	movwf	??_processGestureData
  9115  02FC  094C               	comf	processGestureData@lr_delta+1,w
  9116  02FD  00B0               	movwf	??_processGestureData+1
  9117  02FE  0AAF               	incf	??_processGestureData,f
  9118  02FF  1903               	skipnz
  9119  0300  0AB0               	incf	??_processGestureData+1,f
  9120  0301  082F               	movf	??_processGestureData,w
  9121  0302  00BF               	movwf	_processGestureData$1484
  9122  0303  0830               	movf	??_processGestureData+1,w
  9123  0304  00C0               	movwf	_processGestureData$1484+1
  9124  0305  2B0B               	goto	l1076
  9125  0306                     l5911:	
  9126  0306  0020               	movlb	0	; select bank0
  9127  0307  084C               	movf	processGestureData@lr_delta+1,w
  9128  0308  00C0               	movwf	_processGestureData$1484+1
  9129  0309  084B               	movf	processGestureData@lr_delta,w
  9130  030A  00BF               	movwf	_processGestureData$1484
  9131  030B                     l1076:	
  9132  030B  0840               	movf	_processGestureData$1484+1,w
  9133  030C  3A80               	xorlw	128
  9134  030D  00AF               	movwf	??_processGestureData
  9135  030E  3080               	movlw	128
  9136  030F  022F               	subwf	??_processGestureData,w
  9137  0310  1D03               	skipz
  9138  0311  2B14               	goto	u4775
  9139  0312  3014               	movlw	20
  9140  0313  023F               	subwf	_processGestureData$1484,w
  9141  0314                     u4775:	
  9142  0314  1803               	skipnc
  9143  0315  2877               	goto	l5773
  9144                           
  9145                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9146  0316  0020               	movlb	0	; select bank0
  9147  0317  0849               	movf	processGestureData@ud_delta,w
  9148  0318  044A               	iorwf	processGestureData@ud_delta+1,w
  9149  0319  1D03               	btfss	3,2
  9150  031A  2B23               	goto	l1077
  9151  031B  084B               	movf	processGestureData@lr_delta,w
  9152  031C  044C               	iorwf	processGestureData@lr_delta+1,w
  9153  031D  1D03               	btfss	3,2
  9154  031E  2B23               	goto	l1077
  9155                           
  9156                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9157  031F  3001               	movlw	1
  9158  0320  07E0               	addwf	_gesture_near_count_,f
  9159  0321  3000               	movlw	0
  9160  0322  3DE1               	addwfc	_gesture_near_count_+1,f
  9161  0323                     l1077:	
  9162                           ;APDS9960.c: 780:             }
  9163                           
  9164                           
  9165                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9166  0323  0861               	movf	_gesture_near_count_+1,w
  9167  0324  3A80               	xorlw	128
  9168  0325  00AF               	movwf	??_processGestureData
  9169  0326  3080               	movlw	128
  9170  0327  022F               	subwf	??_processGestureData,w
  9171  0328  1D03               	skipz
  9172  0329  2B2C               	goto	u4805
  9173  032A  300A               	movlw	10
  9174  032B  0260               	subwf	_gesture_near_count_,w
  9175  032C                     u4805:	
  9176  032C  1C03               	skipc
  9177  032D  2877               	goto	l5773
  9178                           
  9179                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9180  032E  0020               	movlb	0	; select bank0
  9181  032F  01E4               	clrf	_gesture_ud_count_
  9182  0330  01E5               	clrf	_gesture_ud_count_+1
  9183                           
  9184                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9185  0331  01E2               	clrf	_gesture_lr_count_
  9186  0332  01E3               	clrf	_gesture_lr_count_+1
  9187                           
  9188                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9189  0333  01E8               	clrf	_gesture_ud_delta_
  9190  0334  01E9               	clrf	_gesture_ud_delta_+1
  9191                           
  9192                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9193  0335  01E6               	clrf	_gesture_lr_delta_
  9194  0336  01E7               	clrf	_gesture_lr_delta_+1
  9195  0337  2877               	goto	l5773
  9196  0338                     __end_of_processGestureData:	
  9197                           
  9198                           	psect	text19
  9199  0BA4                     __ptext19:	
  9200 ;; *************** function ___wmul *****************
  9201 ;; Defined at:
  9202 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9205 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;  product         2    4[BANK0 ] unsigned int 
  9208 ;; Return value:  Size  Location     Type
  9209 ;;                  2    0[BANK0 ] unsigned int 
  9210 ;; Registers used:
  9211 ;;		wreg, status,2, status,0
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        6 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; Hardware stack levels required when called:    5
  9224 ;; This function calls:
  9225 ;;		Nothing
  9226 ;; This function is called by:
  9227 ;;		_processGestureData
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function ___wmul
  9233  0BA4                     ___wmul:	
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9237  0BA4  0020               	movlb	0	; select bank0
  9238  0BA5  01A4               	clrf	___wmul@product
  9239  0BA6  01A5               	clrf	___wmul@product+1
  9240  0BA7                     l5615:	
  9241  0BA7  1C20               	btfss	___wmul@multiplier,0
  9242  0BA8  2BAD               	goto	l1365
  9243  0BA9  0822               	movf	___wmul@multiplicand,w
  9244  0BAA  07A4               	addwf	___wmul@product,f
  9245  0BAB  0823               	movf	___wmul@multiplicand+1,w
  9246  0BAC  3DA5               	addwfc	___wmul@product+1,f
  9247  0BAD                     l1365:	
  9248  0BAD  3001               	movlw	1
  9249  0BAE                     u4135:	
  9250  0BAE  35A2               	lslf	___wmul@multiplicand,f
  9251  0BAF  0DA3               	rlf	___wmul@multiplicand+1,f
  9252  0BB0  0B89               	decfsz	9,f
  9253  0BB1  2BAE               	goto	u4135
  9254  0BB2  3001               	movlw	1
  9255  0BB3                     u4145:	
  9256  0BB3  36A1               	lsrf	___wmul@multiplier+1,f
  9257  0BB4  0CA0               	rrf	___wmul@multiplier,f
  9258  0BB5  0B89               	decfsz	9,f
  9259  0BB6  2BB3               	goto	u4145
  9260  0BB7  0820               	movf	___wmul@multiplier,w
  9261  0BB8  0421               	iorwf	___wmul@multiplier+1,w
  9262  0BB9  1D03               	btfss	3,2
  9263  0BBA  2BA7               	goto	l5615
  9264  0BBB  0825               	movf	___wmul@product+1,w
  9265  0BBC  00A1               	movwf	?___wmul+1
  9266  0BBD  0824               	movf	___wmul@product,w
  9267  0BBE  00A0               	movwf	?___wmul
  9268  0BBF  0008               	return
  9269  0BC0                     __end_of___wmul:	
  9270                           
  9271                           	psect	text20
  9272  079E                     __ptext20:	
  9273 ;; *************** function ___awdiv *****************
  9274 ;; Defined at:
  9275 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;  divisor         2    6[BANK0 ] int 
  9278 ;;  dividend        2    8[BANK0 ] int 
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;  quotient        2   13[BANK0 ] int 
  9281 ;;  sign            1   12[BANK0 ] unsigned char 
  9282 ;;  counter         1   11[BANK0 ] unsigned char 
  9283 ;; Return value:  Size  Location     Type
  9284 ;;                  2    6[BANK0 ] int 
  9285 ;; Registers used:
  9286 ;;		wreg, status,2, status,0
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;Total ram usage:        9 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    5
  9299 ;; This function calls:
  9300 ;;		Nothing
  9301 ;; This function is called by:
  9302 ;;		_processGestureData
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           
  9307                           ;psect for function ___awdiv
  9308  079E                     ___awdiv:	
  9309                           
  9310                           ;incstack = 0
  9311                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9312  079E  0020               	movlb	0	; select bank0
  9313  079F  01AC               	clrf	___awdiv@sign
  9314  07A0  1FA7               	btfss	___awdiv@divisor+1,7
  9315  07A1  2FA9               	goto	l5635
  9316  07A2  09A6               	comf	___awdiv@divisor,f
  9317  07A3  09A7               	comf	___awdiv@divisor+1,f
  9318  07A4  0AA6               	incf	___awdiv@divisor,f
  9319  07A5  1903               	skipnz
  9320  07A6  0AA7               	incf	___awdiv@divisor+1,f
  9321  07A7  01AC               	clrf	___awdiv@sign
  9322  07A8  0AAC               	incf	___awdiv@sign,f
  9323  07A9                     l5635:	
  9324  07A9  1FA9               	btfss	___awdiv@dividend+1,7
  9325  07AA  2FB4               	goto	l5641
  9326  07AB  09A8               	comf	___awdiv@dividend,f
  9327  07AC  09A9               	comf	___awdiv@dividend+1,f
  9328  07AD  0AA8               	incf	___awdiv@dividend,f
  9329  07AE  1903               	skipnz
  9330  07AF  0AA9               	incf	___awdiv@dividend+1,f
  9331  07B0  3001               	movlw	1
  9332  07B1  00AA               	movwf	??___awdiv
  9333  07B2  082A               	movf	??___awdiv,w
  9334  07B3  06AC               	xorwf	___awdiv@sign,f
  9335  07B4                     l5641:	
  9336  07B4  01AD               	clrf	___awdiv@quotient
  9337  07B5  01AE               	clrf	___awdiv@quotient+1
  9338  07B6  0826               	movf	___awdiv@divisor,w
  9339  07B7  0427               	iorwf	___awdiv@divisor+1,w
  9340  07B8  1903               	btfsc	3,2
  9341  07B9  2FE3               	goto	l5663
  9342  07BA  01AB               	clrf	___awdiv@counter
  9343  07BB  0AAB               	incf	___awdiv@counter,f
  9344  07BC                     l5651:	
  9345  07BC  1BA7               	btfsc	___awdiv@divisor+1,7
  9346  07BD  2FC8               	goto	l5653
  9347  07BE  3001               	movlw	1
  9348  07BF                     u4195:	
  9349  07BF  35A6               	lslf	___awdiv@divisor,f
  9350  07C0  0DA7               	rlf	___awdiv@divisor+1,f
  9351  07C1  0B89               	decfsz	9,f
  9352  07C2  2FBF               	goto	u4195
  9353  07C3  3001               	movlw	1
  9354  07C4  00AA               	movwf	??___awdiv
  9355  07C5  082A               	movf	??___awdiv,w
  9356  07C6  07AB               	addwf	___awdiv@counter,f
  9357  07C7  2FBC               	goto	l5651
  9358  07C8                     l5653:	
  9359  07C8  3001               	movlw	1
  9360  07C9                     u4215:	
  9361  07C9  35AD               	lslf	___awdiv@quotient,f
  9362  07CA  0DAE               	rlf	___awdiv@quotient+1,f
  9363  07CB  0B89               	decfsz	9,f
  9364  07CC  2FC9               	goto	u4215
  9365  07CD  0827               	movf	___awdiv@divisor+1,w
  9366  07CE  0229               	subwf	___awdiv@dividend+1,w
  9367  07CF  1D03               	skipz
  9368  07D0  2FD3               	goto	u4225
  9369  07D1  0826               	movf	___awdiv@divisor,w
  9370  07D2  0228               	subwf	___awdiv@dividend,w
  9371  07D3                     u4225:	
  9372  07D3  1C03               	skipc
  9373  07D4  2FDA               	goto	l5659
  9374  07D5  0826               	movf	___awdiv@divisor,w
  9375  07D6  02A8               	subwf	___awdiv@dividend,f
  9376  07D7  0827               	movf	___awdiv@divisor+1,w
  9377  07D8  3BA9               	subwfb	___awdiv@dividend+1,f
  9378  07D9  142D               	bsf	___awdiv@quotient,0
  9379  07DA                     l5659:	
  9380  07DA  3001               	movlw	1
  9381  07DB                     u4235:	
  9382  07DB  36A7               	lsrf	___awdiv@divisor+1,f
  9383  07DC  0CA6               	rrf	___awdiv@divisor,f
  9384  07DD  0B89               	decfsz	9,f
  9385  07DE  2FDB               	goto	u4235
  9386  07DF  3001               	movlw	1
  9387  07E0  02AB               	subwf	___awdiv@counter,f
  9388  07E1  1D03               	btfss	3,2
  9389  07E2  2FC8               	goto	l5653
  9390  07E3                     l5663:	
  9391  07E3  082C               	movf	___awdiv@sign,w
  9392  07E4  1903               	btfsc	3,2
  9393  07E5  2FEB               	goto	l5667
  9394  07E6  09AD               	comf	___awdiv@quotient,f
  9395  07E7  09AE               	comf	___awdiv@quotient+1,f
  9396  07E8  0AAD               	incf	___awdiv@quotient,f
  9397  07E9  1903               	skipnz
  9398  07EA  0AAE               	incf	___awdiv@quotient+1,f
  9399  07EB                     l5667:	
  9400  07EB  082E               	movf	___awdiv@quotient+1,w
  9401  07EC  00A7               	movwf	?___awdiv+1
  9402  07ED  082D               	movf	___awdiv@quotient,w
  9403  07EE  00A6               	movwf	?___awdiv
  9404  07EF  0008               	return
  9405  07F0                     __end_of___awdiv:	
  9406                           
  9407                           	psect	text21
  9408  0AB1                     __ptext21:	
  9409 ;; *************** function _isGestureAvailable *****************
  9410 ;; Defined at:
  9411 ;;		line 537 in file "APDS9960.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;		None
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  val             1   10[BANK0 ] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      _Bool 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0, pclath, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;Total ram usage:        2 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    8
  9432 ;; This function calls:
  9433 ;;		_wireReadDataByte
  9434 ;; This function is called by:
  9435 ;;		_main
  9436 ;;		_readGesture
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           
  9441                           ;psect for function _isGestureAvailable
  9442  0AB1                     _isGestureAvailable:	
  9443                           
  9444                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  9448  0AB1  30AF               	movlw	175
  9449  0AB2  318B  23DE  318A   	fcall	_wireReadDataByte
  9450  0AB5  0020               	movlb	0	; select bank0
  9451  0AB6  00A9               	movwf	??_isGestureAvailable
  9452  0AB7  0829               	movf	??_isGestureAvailable,w
  9453  0AB8  00AA               	movwf	isGestureAvailable@val
  9454                           
  9455                           ;APDS9960.c: 545:     val &= 0b00000001;
  9456  0AB9  3001               	movlw	1
  9457  0ABA  00A9               	movwf	??_isGestureAvailable
  9458  0ABB  0829               	movf	??_isGestureAvailable,w
  9459  0ABC  05AA               	andwf	isGestureAvailable@val,f
  9460                           
  9461                           ;APDS9960.c: 548:     if( val == 1) {
  9462  0ABD  032A               	decf	isGestureAvailable@val,w
  9463  0ABE  1D03               	btfss	3,2
  9464  0ABF  2AC2               	goto	l5683
  9465                           
  9466                           ;APDS9960.c: 549:         return 1;
  9467  0AC0  3001               	movlw	1
  9468  0AC1  0008               	return
  9469  0AC2                     l5683:	
  9470                           
  9471                           ;APDS9960.c: 551:         return 0;
  9472  0AC2  3000               	movlw	0
  9473  0AC3  0008               	return
  9474  0AC4                     __end_of_isGestureAvailable:	
  9475                           
  9476                           	psect	text22
  9477  0338                     __ptext22:	
  9478 ;; *************** function _decodeGesture *****************
  9479 ;; Defined at:
  9480 ;;		line 795 in file "APDS9960.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      _Bool 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:       18 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_readGesture
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _decodeGesture
  9510  0338                     _decodeGesture:	
  9511                           
  9512                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9516  0338  0020               	movlb	0	; select bank0
  9517  0339  035E               	decf	_gesture_state_,w
  9518  033A  045F               	iorwf	_gesture_state_+1,w
  9519  033B  1D03               	btfss	3,2
  9520  033C  2B44               	goto	l5933
  9521                           
  9522                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  9523  033D  3005               	movlw	5
  9524  033E  0022               	movlb	2	; select bank2
  9525  033F  00E8               	movwf	_gesture_motion_^(0+256)
  9526  0340  3000               	movlw	0
  9527  0341  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9528                           
  9529                           ;APDS9960.c: 800:         return 1;
  9530  0342  3001               	movlw	1
  9531  0343  0008               	return
  9532  0344                     l5933:	
  9533  0344  3002               	movlw	2
  9534  0345  065E               	xorwf	_gesture_state_,w
  9535  0346  045F               	iorwf	_gesture_state_+1,w
  9536  0347  1D03               	btfss	3,2
  9537  0348  2B50               	goto	l5939
  9538                           
  9539                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  9540  0349  3006               	movlw	6
  9541  034A  0022               	movlb	2	; select bank2
  9542  034B  00E8               	movwf	_gesture_motion_^(0+256)
  9543  034C  3000               	movlw	0
  9544  034D  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9545                           
  9546                           ;APDS9960.c: 803:         return 1;
  9547  034E  3001               	movlw	1
  9548  034F  0008               	return
  9549  0350                     l5939:	
  9550                           
  9551                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  9552  0350  0A64               	incf	_gesture_ud_count_,w
  9553  0351  1D03               	skipz
  9554  0352  2B5C               	goto	l5945
  9555  0353  0A65               	incf	_gesture_ud_count_+1,w
  9556  0354  1D03               	btfss	3,2
  9557  0355  2B5C               	goto	l5945
  9558  0356  0862               	movf	_gesture_lr_count_,w
  9559  0357  0463               	iorwf	_gesture_lr_count_+1,w
  9560  0358  1D03               	btfss	3,2
  9561  0359  2B5C               	goto	l5945
  9562  035A                     l5943:	
  9563                           
  9564                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  9565  035A  3003               	movlw	3
  9566  035B  2B7B               	goto	L7
  9567  035C                     l5945:	
  9568                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  9569                           
  9570  035C  0364               	decf	_gesture_ud_count_,w
  9571  035D  0465               	iorwf	_gesture_ud_count_+1,w
  9572  035E  1D03               	btfss	3,2
  9573  035F  2B66               	goto	l5951
  9574  0360  0862               	movf	_gesture_lr_count_,w
  9575  0361  0463               	iorwf	_gesture_lr_count_+1,w
  9576  0362  1D03               	btfss	3,2
  9577  0363  2B66               	goto	l5951
  9578  0364                     l5949:	
  9579                           
  9580                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  9581  0364  3004               	movlw	4
  9582  0365  2B7B               	goto	L7
  9583  0366                     l5951:	
  9584                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  9585                           
  9586  0366  0864               	movf	_gesture_ud_count_,w
  9587  0367  0465               	iorwf	_gesture_ud_count_+1,w
  9588  0368  1D03               	btfss	3,2
  9589  0369  2B70               	goto	l5957
  9590  036A  0362               	decf	_gesture_lr_count_,w
  9591  036B  0463               	iorwf	_gesture_lr_count_+1,w
  9592  036C  1D03               	btfss	3,2
  9593  036D  2B70               	goto	l5957
  9594  036E                     l5955:	
  9595                           
  9596                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  9597  036E  3002               	movlw	2
  9598  036F  2B7B               	goto	L7
  9599  0370                     l5957:	
  9600                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  9601                           
  9602  0370  0864               	movf	_gesture_ud_count_,w
  9603  0371  0465               	iorwf	_gesture_ud_count_+1,w
  9604  0372  1D03               	btfss	3,2
  9605  0373  2B80               	goto	l5963
  9606  0374  0A62               	incf	_gesture_lr_count_,w
  9607  0375  1D03               	skipz
  9608  0376  2B80               	goto	l5963
  9609  0377  0A63               	incf	_gesture_lr_count_+1,w
  9610  0378  1D03               	btfss	3,2
  9611  0379  2B80               	goto	l5963
  9612  037A                     l5961:	
  9613                           
  9614                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  9615  037A  3001               	movlw	1
  9616  037B                     L7:	
  9617  037B  0022               	movlb	2	; select bank2
  9618  037C  00E8               	movwf	_gesture_motion_^(0+256)
  9619  037D  3000               	movlw	0
  9620  037E  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9621                           
  9622                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  9623  037F  2CC6               	goto	l6039
  9624  0380                     l5963:	
  9625  0380  0A64               	incf	_gesture_ud_count_,w
  9626  0381  1D03               	skipz
  9627  0382  2BD1               	goto	l5981
  9628  0383  0A65               	incf	_gesture_ud_count_+1,w
  9629  0384  1D03               	btfss	3,2
  9630  0385  2BD1               	goto	l5981
  9631  0386  0362               	decf	_gesture_lr_count_,w
  9632  0387  0463               	iorwf	_gesture_lr_count_+1,w
  9633  0388  1D03               	btfss	3,2
  9634  0389  2BD1               	goto	l5981
  9635                           
  9636                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9637  038A  0869               	movf	_gesture_ud_delta_+1,w
  9638  038B  3A80               	xorlw	128
  9639  038C  00A0               	movwf	??_decodeGesture
  9640  038D  3080               	movlw	128
  9641  038E  0220               	subwf	??_decodeGesture,w
  9642  038F  1D03               	skipz
  9643  0390  2B93               	goto	u4935
  9644  0391  3001               	movlw	1
  9645  0392  0268               	subwf	_gesture_ud_delta_,w
  9646  0393                     u4935:	
  9647  0393  1803               	skipnc
  9648  0394  2BA2               	goto	l5971
  9649  0395  0020               	movlb	0	; select bank0
  9650  0396  0968               	comf	_gesture_ud_delta_,w
  9651  0397  00A0               	movwf	??_decodeGesture
  9652  0398  0969               	comf	_gesture_ud_delta_+1,w
  9653  0399  00A1               	movwf	??_decodeGesture+1
  9654  039A  0AA0               	incf	??_decodeGesture,f
  9655  039B  1903               	skipnz
  9656  039C  0AA1               	incf	??_decodeGesture+1,f
  9657  039D  0820               	movf	??_decodeGesture,w
  9658  039E  00A2               	movwf	_decodeGesture$1486
  9659  039F  0821               	movf	??_decodeGesture+1,w
  9660  03A0  00A3               	movwf	_decodeGesture$1486+1
  9661  03A1  2BA7               	goto	l1098
  9662  03A2                     l5971:	
  9663  03A2  0020               	movlb	0	; select bank0
  9664  03A3  0869               	movf	_gesture_ud_delta_+1,w
  9665  03A4  00A3               	movwf	_decodeGesture$1486+1
  9666  03A5  0868               	movf	_gesture_ud_delta_,w
  9667  03A6  00A2               	movwf	_decodeGesture$1486
  9668  03A7                     l1098:	
  9669  03A7  0867               	movf	_gesture_lr_delta_+1,w
  9670  03A8  3A80               	xorlw	128
  9671  03A9  00A0               	movwf	??_decodeGesture
  9672  03AA  3080               	movlw	128
  9673  03AB  0220               	subwf	??_decodeGesture,w
  9674  03AC  1D03               	skipz
  9675  03AD  2BB0               	goto	u4945
  9676  03AE  3001               	movlw	1
  9677  03AF  0266               	subwf	_gesture_lr_delta_,w
  9678  03B0                     u4945:	
  9679  03B0  1803               	skipnc
  9680  03B1  2BBF               	goto	l5975
  9681  03B2  0020               	movlb	0	; select bank0
  9682  03B3  0966               	comf	_gesture_lr_delta_,w
  9683  03B4  00A0               	movwf	??_decodeGesture
  9684  03B5  0967               	comf	_gesture_lr_delta_+1,w
  9685  03B6  00A1               	movwf	??_decodeGesture+1
  9686  03B7  0AA0               	incf	??_decodeGesture,f
  9687  03B8  1903               	skipnz
  9688  03B9  0AA1               	incf	??_decodeGesture+1,f
  9689  03BA  0820               	movf	??_decodeGesture,w
  9690  03BB  00A4               	movwf	_decodeGesture$1487
  9691  03BC  0821               	movf	??_decodeGesture+1,w
  9692  03BD  00A5               	movwf	_decodeGesture$1487+1
  9693  03BE  2BC4               	goto	l1102
  9694  03BF                     l5975:	
  9695  03BF  0020               	movlb	0	; select bank0
  9696  03C0  0867               	movf	_gesture_lr_delta_+1,w
  9697  03C1  00A5               	movwf	_decodeGesture$1487+1
  9698  03C2  0866               	movf	_gesture_lr_delta_,w
  9699  03C3  00A4               	movwf	_decodeGesture$1487
  9700  03C4                     l1102:	
  9701  03C4  0825               	movf	_decodeGesture$1487+1,w
  9702  03C5  3A80               	xorlw	128
  9703  03C6  00A0               	movwf	??_decodeGesture
  9704  03C7  0823               	movf	_decodeGesture$1486+1,w
  9705  03C8  3A80               	xorlw	128
  9706  03C9  0220               	subwf	??_decodeGesture,w
  9707  03CA  1D03               	skipz
  9708  03CB  2BCE               	goto	u4955
  9709  03CC  0822               	movf	_decodeGesture$1486,w
  9710  03CD  0224               	subwf	_decodeGesture$1487,w
  9711  03CE                     u4955:	
  9712  03CE  1C03               	btfss	3,0
  9713  03CF  2B5A               	goto	l5943
  9714  03D0  2B6E               	goto	l5955
  9715  03D1                     l5981:	
  9716  03D1  0364               	decf	_gesture_ud_count_,w
  9717  03D2  0465               	iorwf	_gesture_ud_count_+1,w
  9718  03D3  1D03               	btfss	3,2
  9719  03D4  2C22               	goto	l5999
  9720  03D5  0A62               	incf	_gesture_lr_count_,w
  9721  03D6  1D03               	skipz
  9722  03D7  2C22               	goto	l5999
  9723  03D8  0A63               	incf	_gesture_lr_count_+1,w
  9724  03D9  1D03               	btfss	3,2
  9725  03DA  2C22               	goto	l5999
  9726                           
  9727                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9728  03DB  0869               	movf	_gesture_ud_delta_+1,w
  9729  03DC  3A80               	xorlw	128
  9730  03DD  00A0               	movwf	??_decodeGesture
  9731  03DE  3080               	movlw	128
  9732  03DF  0220               	subwf	??_decodeGesture,w
  9733  03E0  1D03               	skipz
  9734  03E1  2BE4               	goto	u4985
  9735  03E2  3001               	movlw	1
  9736  03E3  0268               	subwf	_gesture_ud_delta_,w
  9737  03E4                     u4985:	
  9738  03E4  1803               	skipnc
  9739  03E5  2BF3               	goto	l5989
  9740  03E6  0020               	movlb	0	; select bank0
  9741  03E7  0968               	comf	_gesture_ud_delta_,w
  9742  03E8  00A0               	movwf	??_decodeGesture
  9743  03E9  0969               	comf	_gesture_ud_delta_+1,w
  9744  03EA  00A1               	movwf	??_decodeGesture+1
  9745  03EB  0AA0               	incf	??_decodeGesture,f
  9746  03EC  1903               	skipnz
  9747  03ED  0AA1               	incf	??_decodeGesture+1,f
  9748  03EE  0820               	movf	??_decodeGesture,w
  9749  03EF  00A6               	movwf	_decodeGesture$1488
  9750  03F0  0821               	movf	??_decodeGesture+1,w
  9751  03F1  00A7               	movwf	_decodeGesture$1488+1
  9752  03F2  2BF8               	goto	l1110
  9753  03F3                     l5989:	
  9754  03F3  0020               	movlb	0	; select bank0
  9755  03F4  0869               	movf	_gesture_ud_delta_+1,w
  9756  03F5  00A7               	movwf	_decodeGesture$1488+1
  9757  03F6  0868               	movf	_gesture_ud_delta_,w
  9758  03F7  00A6               	movwf	_decodeGesture$1488
  9759  03F8                     l1110:	
  9760  03F8  0867               	movf	_gesture_lr_delta_+1,w
  9761  03F9  3A80               	xorlw	128
  9762  03FA  00A0               	movwf	??_decodeGesture
  9763  03FB  3080               	movlw	128
  9764  03FC  0220               	subwf	??_decodeGesture,w
  9765  03FD  1D03               	skipz
  9766  03FE  2C01               	goto	u4995
  9767  03FF  3001               	movlw	1
  9768  0400  0266               	subwf	_gesture_lr_delta_,w
  9769  0401                     u4995:	
  9770  0401  1803               	skipnc
  9771  0402  2C10               	goto	l5993
  9772  0403  0020               	movlb	0	; select bank0
  9773  0404  0966               	comf	_gesture_lr_delta_,w
  9774  0405  00A0               	movwf	??_decodeGesture
  9775  0406  0967               	comf	_gesture_lr_delta_+1,w
  9776  0407  00A1               	movwf	??_decodeGesture+1
  9777  0408  0AA0               	incf	??_decodeGesture,f
  9778  0409  1903               	skipnz
  9779  040A  0AA1               	incf	??_decodeGesture+1,f
  9780  040B  0820               	movf	??_decodeGesture,w
  9781  040C  00A8               	movwf	_decodeGesture$1489
  9782  040D  0821               	movf	??_decodeGesture+1,w
  9783  040E  00A9               	movwf	_decodeGesture$1489+1
  9784  040F  2C15               	goto	l1114
  9785  0410                     l5993:	
  9786  0410  0020               	movlb	0	; select bank0
  9787  0411  0867               	movf	_gesture_lr_delta_+1,w
  9788  0412  00A9               	movwf	_decodeGesture$1489+1
  9789  0413  0866               	movf	_gesture_lr_delta_,w
  9790  0414  00A8               	movwf	_decodeGesture$1489
  9791  0415                     l1114:	
  9792  0415  0829               	movf	_decodeGesture$1489+1,w
  9793  0416  3A80               	xorlw	128
  9794  0417  00A0               	movwf	??_decodeGesture
  9795  0418  0827               	movf	_decodeGesture$1488+1,w
  9796  0419  3A80               	xorlw	128
  9797  041A  0220               	subwf	??_decodeGesture,w
  9798  041B  1D03               	skipz
  9799  041C  2C1F               	goto	u5005
  9800  041D  0826               	movf	_decodeGesture$1488,w
  9801  041E  0228               	subwf	_decodeGesture$1489,w
  9802  041F                     u5005:	
  9803  041F  1C03               	btfss	3,0
  9804  0420  2B64               	goto	l5949
  9805  0421  2B7A               	goto	l5961
  9806  0422                     l5999:	
  9807  0422  0A64               	incf	_gesture_ud_count_,w
  9808  0423  1D03               	skipz
  9809  0424  2C75               	goto	l6017
  9810  0425  0A65               	incf	_gesture_ud_count_+1,w
  9811  0426  1D03               	btfss	3,2
  9812  0427  2C75               	goto	l6017
  9813  0428  0A62               	incf	_gesture_lr_count_,w
  9814  0429  1D03               	skipz
  9815  042A  2C75               	goto	l6017
  9816  042B  0A63               	incf	_gesture_lr_count_+1,w
  9817  042C  1D03               	btfss	3,2
  9818  042D  2C75               	goto	l6017
  9819                           
  9820                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9821  042E  0869               	movf	_gesture_ud_delta_+1,w
  9822  042F  3A80               	xorlw	128
  9823  0430  00A0               	movwf	??_decodeGesture
  9824  0431  3080               	movlw	128
  9825  0432  0220               	subwf	??_decodeGesture,w
  9826  0433  1D03               	skipz
  9827  0434  2C37               	goto	u5035
  9828  0435  3001               	movlw	1
  9829  0436  0268               	subwf	_gesture_ud_delta_,w
  9830  0437                     u5035:	
  9831  0437  1803               	skipnc
  9832  0438  2C46               	goto	l6007
  9833  0439  0020               	movlb	0	; select bank0
  9834  043A  0968               	comf	_gesture_ud_delta_,w
  9835  043B  00A0               	movwf	??_decodeGesture
  9836  043C  0969               	comf	_gesture_ud_delta_+1,w
  9837  043D  00A1               	movwf	??_decodeGesture+1
  9838  043E  0AA0               	incf	??_decodeGesture,f
  9839  043F  1903               	skipnz
  9840  0440  0AA1               	incf	??_decodeGesture+1,f
  9841  0441  0820               	movf	??_decodeGesture,w
  9842  0442  00AA               	movwf	_decodeGesture$1490
  9843  0443  0821               	movf	??_decodeGesture+1,w
  9844  0444  00AB               	movwf	_decodeGesture$1490+1
  9845  0445  2C4B               	goto	l1122
  9846  0446                     l6007:	
  9847  0446  0020               	movlb	0	; select bank0
  9848  0447  0869               	movf	_gesture_ud_delta_+1,w
  9849  0448  00AB               	movwf	_decodeGesture$1490+1
  9850  0449  0868               	movf	_gesture_ud_delta_,w
  9851  044A  00AA               	movwf	_decodeGesture$1490
  9852  044B                     l1122:	
  9853  044B  0867               	movf	_gesture_lr_delta_+1,w
  9854  044C  3A80               	xorlw	128
  9855  044D  00A0               	movwf	??_decodeGesture
  9856  044E  3080               	movlw	128
  9857  044F  0220               	subwf	??_decodeGesture,w
  9858  0450  1D03               	skipz
  9859  0451  2C54               	goto	u5045
  9860  0452  3001               	movlw	1
  9861  0453  0266               	subwf	_gesture_lr_delta_,w
  9862  0454                     u5045:	
  9863  0454  1803               	skipnc
  9864  0455  2C63               	goto	l6011
  9865  0456  0020               	movlb	0	; select bank0
  9866  0457  0966               	comf	_gesture_lr_delta_,w
  9867  0458  00A0               	movwf	??_decodeGesture
  9868  0459  0967               	comf	_gesture_lr_delta_+1,w
  9869  045A  00A1               	movwf	??_decodeGesture+1
  9870  045B  0AA0               	incf	??_decodeGesture,f
  9871  045C  1903               	skipnz
  9872  045D  0AA1               	incf	??_decodeGesture+1,f
  9873  045E  0820               	movf	??_decodeGesture,w
  9874  045F  00AC               	movwf	_decodeGesture$1491
  9875  0460  0821               	movf	??_decodeGesture+1,w
  9876  0461  00AD               	movwf	_decodeGesture$1491+1
  9877  0462  2C68               	goto	l1126
  9878  0463                     l6011:	
  9879  0463  0020               	movlb	0	; select bank0
  9880  0464  0867               	movf	_gesture_lr_delta_+1,w
  9881  0465  00AD               	movwf	_decodeGesture$1491+1
  9882  0466  0866               	movf	_gesture_lr_delta_,w
  9883  0467  00AC               	movwf	_decodeGesture$1491
  9884  0468                     l1126:	
  9885  0468  082D               	movf	_decodeGesture$1491+1,w
  9886  0469  3A80               	xorlw	128
  9887  046A  00A0               	movwf	??_decodeGesture
  9888  046B  082B               	movf	_decodeGesture$1490+1,w
  9889  046C  3A80               	xorlw	128
  9890  046D  0220               	subwf	??_decodeGesture,w
  9891  046E  1D03               	skipz
  9892  046F  2C72               	goto	u5055
  9893  0470  082A               	movf	_decodeGesture$1490,w
  9894  0471  022C               	subwf	_decodeGesture$1491,w
  9895  0472                     u5055:	
  9896  0472  1C03               	btfss	3,0
  9897  0473  2B5A               	goto	l5943
  9898  0474  2B7A               	goto	l5961
  9899  0475                     l6017:	
  9900  0475  0364               	decf	_gesture_ud_count_,w
  9901  0476  0465               	iorwf	_gesture_ud_count_+1,w
  9902  0477  1D03               	btfss	3,2
  9903  0478  2CC4               	goto	l6035
  9904  0479  0362               	decf	_gesture_lr_count_,w
  9905  047A  0463               	iorwf	_gesture_lr_count_+1,w
  9906  047B  1D03               	btfss	3,2
  9907  047C  2CC4               	goto	l6035
  9908                           
  9909                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9910  047D  0869               	movf	_gesture_ud_delta_+1,w
  9911  047E  3A80               	xorlw	128
  9912  047F  00A0               	movwf	??_decodeGesture
  9913  0480  3080               	movlw	128
  9914  0481  0220               	subwf	??_decodeGesture,w
  9915  0482  1D03               	skipz
  9916  0483  2C86               	goto	u5085
  9917  0484  3001               	movlw	1
  9918  0485  0268               	subwf	_gesture_ud_delta_,w
  9919  0486                     u5085:	
  9920  0486  1803               	skipnc
  9921  0487  2C95               	goto	l6025
  9922  0488  0020               	movlb	0	; select bank0
  9923  0489  0968               	comf	_gesture_ud_delta_,w
  9924  048A  00A0               	movwf	??_decodeGesture
  9925  048B  0969               	comf	_gesture_ud_delta_+1,w
  9926  048C  00A1               	movwf	??_decodeGesture+1
  9927  048D  0AA0               	incf	??_decodeGesture,f
  9928  048E  1903               	skipnz
  9929  048F  0AA1               	incf	??_decodeGesture+1,f
  9930  0490  0820               	movf	??_decodeGesture,w
  9931  0491  00AE               	movwf	_decodeGesture$1492
  9932  0492  0821               	movf	??_decodeGesture+1,w
  9933  0493  00AF               	movwf	_decodeGesture$1492+1
  9934  0494  2C9A               	goto	l1134
  9935  0495                     l6025:	
  9936  0495  0020               	movlb	0	; select bank0
  9937  0496  0869               	movf	_gesture_ud_delta_+1,w
  9938  0497  00AF               	movwf	_decodeGesture$1492+1
  9939  0498  0868               	movf	_gesture_ud_delta_,w
  9940  0499  00AE               	movwf	_decodeGesture$1492
  9941  049A                     l1134:	
  9942  049A  0867               	movf	_gesture_lr_delta_+1,w
  9943  049B  3A80               	xorlw	128
  9944  049C  00A0               	movwf	??_decodeGesture
  9945  049D  3080               	movlw	128
  9946  049E  0220               	subwf	??_decodeGesture,w
  9947  049F  1D03               	skipz
  9948  04A0  2CA3               	goto	u5095
  9949  04A1  3001               	movlw	1
  9950  04A2  0266               	subwf	_gesture_lr_delta_,w
  9951  04A3                     u5095:	
  9952  04A3  1803               	skipnc
  9953  04A4  2CB2               	goto	l6029
  9954  04A5  0020               	movlb	0	; select bank0
  9955  04A6  0966               	comf	_gesture_lr_delta_,w
  9956  04A7  00A0               	movwf	??_decodeGesture
  9957  04A8  0967               	comf	_gesture_lr_delta_+1,w
  9958  04A9  00A1               	movwf	??_decodeGesture+1
  9959  04AA  0AA0               	incf	??_decodeGesture,f
  9960  04AB  1903               	skipnz
  9961  04AC  0AA1               	incf	??_decodeGesture+1,f
  9962  04AD  0820               	movf	??_decodeGesture,w
  9963  04AE  00B0               	movwf	_decodeGesture$1493
  9964  04AF  0821               	movf	??_decodeGesture+1,w
  9965  04B0  00B1               	movwf	_decodeGesture$1493+1
  9966  04B1  2CB7               	goto	l1138
  9967  04B2                     l6029:	
  9968  04B2  0020               	movlb	0	; select bank0
  9969  04B3  0867               	movf	_gesture_lr_delta_+1,w
  9970  04B4  00B1               	movwf	_decodeGesture$1493+1
  9971  04B5  0866               	movf	_gesture_lr_delta_,w
  9972  04B6  00B0               	movwf	_decodeGesture$1493
  9973  04B7                     l1138:	
  9974  04B7  0831               	movf	_decodeGesture$1493+1,w
  9975  04B8  3A80               	xorlw	128
  9976  04B9  00A0               	movwf	??_decodeGesture
  9977  04BA  082F               	movf	_decodeGesture$1492+1,w
  9978  04BB  3A80               	xorlw	128
  9979  04BC  0220               	subwf	??_decodeGesture,w
  9980  04BD  1D03               	skipz
  9981  04BE  2CC1               	goto	u5105
  9982  04BF  082E               	movf	_decodeGesture$1492,w
  9983  04C0  0230               	subwf	_decodeGesture$1493,w
  9984  04C1                     u5105:	
  9985  04C1  1C03               	btfss	3,0
  9986  04C2  2B64               	goto	l5949
  9987  04C3  2B6E               	goto	l5955
  9988  04C4                     l6035:	
  9989                           
  9990                           ;APDS9960.c: 840:         return 0;
  9991  04C4  3000               	movlw	0
  9992  04C5  0008               	return
  9993  04C6                     l6039:	
  9994                           
  9995                           ;APDS9960.c: 843:     return 1;
  9996  04C6  3001               	movlw	1
  9997  04C7  0008               	return
  9998  04C8                     __end_of_decodeGesture:	
  9999                           
 10000                           	psect	text23
 10001  09FF                     __ptext23:	
 10002 ;; *************** function _PWM_Output_Enable *****************
 10003 ;; Defined at:
 10004 ;;		line 269 in file "main.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;		None
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;		None
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  1    wreg      void 
 10011 ;; Registers used:
 10012 ;;		wreg
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;Total ram usage:        0 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    5
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_handleGesture
 10029 ;;		_PWM
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function _PWM_Output_Enable
 10035  09FF                     _PWM_Output_Enable:	
 10036                           
 10037                           ;main.c: 270:     RC7PPS = 0x0C;
 10038                           
 10039                           ;incstack = 0
 10040                           ; Regs used in _PWM_Output_Enable: [wreg]
 10041  09FF  300C               	movlw	12
 10042  0A00  003D               	movlb	29	; select bank29
 10043  0A01  00A7               	movwf	39	;volatile
 10044  0A02  0008               	return
 10045  0A03                     __end_of_PWM_Output_Enable:	
 10046                           
 10047                           	psect	text24
 10048  09D0                     __ptext24:	
 10049 ;; *************** function _PWM_Output_Disable *****************
 10050 ;; Defined at:
 10051 ;;		line 273 in file "main.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      void 
 10058 ;; Registers used:
 10059 ;;		status,2
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;Total ram usage:        0 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    5
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_handleGesture
 10076 ;;		_PWM
 10077 ;; This function uses a non-reentrant model
 10078 ;;
 10079                           
 10080                           
 10081                           ;psect for function _PWM_Output_Disable
 10082  09D0                     _PWM_Output_Disable:	
 10083                           
 10084                           ;main.c: 274:     RC7PPS = 0x00;
 10085                           
 10086                           ;incstack = 0
 10087                           ; Regs used in _PWM_Output_Disable: [status,2]
 10088  09D0  003D               	movlb	29	; select bank29
 10089  09D1  01A7               	clrf	39	;volatile
 10090  09D2  0008               	return
 10091  09D3                     __end_of_PWM_Output_Disable:	
 10092                           
 10093                           	psect	text25
 10094  0E91                     __ptext25:	
 10095 ;; *************** function _Display_Name *****************
 10096 ;; Defined at:
 10097 ;;		line 203 in file "main.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 10100 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;  i               2   10[BANK0 ] int 
 10103 ;;  length          2    8[BANK0 ] int 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  1    wreg      void 
 10106 ;; Registers used:
 10107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10113 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;Total ram usage:        7 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    7
 10120 ;; This function calls:
 10121 ;;		_SPI_Write
 10122 ;;		_strlen
 10123 ;; This function is called by:
 10124 ;;		_main
 10125 ;;		_handleGesture
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function _Display_Name
 10131  0E91                     _Display_Name:	
 10132                           
 10133                           ;main.c: 204:     int length;;main.c: 205:     int i;;main.c: 207:         SPI_Write(0xF
      +                          E);
 10134                           
 10135                           ;incstack = 0
 10136                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10137  0E91  30FE               	movlw	254
 10138  0E92  318B  2310  318E   	fcall	_SPI_Write
 10139                           
 10140                           ;main.c: 208:         _delay((unsigned long)((100)*(500000/4000.0)));
 10141  0E95  3011               	movlw	17
 10142  0E96  0020               	movlb	0	; select bank0
 10143  0E97  00A7               	movwf	??_Display_Name
 10144  0E98  303A               	movlw	58
 10145  0E99                     u5947:	
 10146  0E99  0B89               	decfsz	9,f
 10147  0E9A  2E99               	goto	u5947
 10148  0E9B  0BA7               	decfsz	??_Display_Name,f
 10149  0E9C  2E99               	goto	u5947
 10150  0E9D  0000               	nop
 10151                           
 10152                           ;main.c: 209:         SPI_Write(0x51);
 10153  0E9E  3051               	movlw	81
 10154  0E9F  318B  2310  318E   	fcall	_SPI_Write
 10155                           
 10156                           ;main.c: 210:         length = strlen(string1);
 10157  0EA2  0020               	movlb	0	; select bank0
 10158  0EA3  0826               	movf	Display_Name@string1+1,w
 10159  0EA4  00A1               	movwf	strlen@s+1
 10160  0EA5  0825               	movf	Display_Name@string1,w
 10161  0EA6  00A0               	movwf	strlen@s
 10162  0EA7  318B  2355  318E   	fcall	_strlen
 10163  0EAA  0020               	movlb	0	; select bank0
 10164  0EAB  0821               	movf	?_strlen+1,w
 10165  0EAC  00A9               	movwf	Display_Name@length+1
 10166  0EAD  0820               	movf	?_strlen,w
 10167  0EAE  00A8               	movwf	Display_Name@length
 10168                           
 10169                           ;main.c: 211:         for(i = 0; i < length; i++){
 10170  0EAF  01AA               	clrf	Display_Name@i
 10171  0EB0  01AB               	clrf	Display_Name@i+1
 10172  0EB1                     l6157:	
 10173  0EB1  082B               	movf	Display_Name@i+1,w
 10174  0EB2  3A80               	xorlw	128
 10175  0EB3  00A7               	movwf	??_Display_Name
 10176  0EB4  0829               	movf	Display_Name@length+1,w
 10177  0EB5  3A80               	xorlw	128
 10178  0EB6  0227               	subwf	??_Display_Name,w
 10179  0EB7  1D03               	skipz
 10180  0EB8  2EBB               	goto	u5125
 10181  0EB9  0828               	movf	Display_Name@length,w
 10182  0EBA  022A               	subwf	Display_Name@i,w
 10183  0EBB                     u5125:	
 10184  0EBB  1803               	btfsc	3,0
 10185  0EBC  2ECE               	goto	l771
 10186                           
 10187                           ;main.c: 212:             SPI_Write(string1[i]);
 10188  0EBD  0020               	movlb	0	; select bank0
 10189  0EBE  0825               	movf	Display_Name@string1,w
 10190  0EBF  072A               	addwf	Display_Name@i,w
 10191  0EC0  0084               	movwf	4
 10192  0EC1  0826               	movf	Display_Name@string1+1,w
 10193  0EC2  3D2B               	addwfc	Display_Name@i+1,w
 10194  0EC3  0085               	movwf	5
 10195  0EC4  0800               	movf	0,w	;code access
 10196  0EC5  318B  2310  318E   	fcall	_SPI_Write
 10197                           
 10198                           ;main.c: 213:         }
 10199  0EC8  3001               	movlw	1
 10200  0EC9  0020               	movlb	0	; select bank0
 10201  0ECA  07AA               	addwf	Display_Name@i,f
 10202  0ECB  3000               	movlw	0
 10203  0ECC  3DAB               	addwfc	Display_Name@i+1,f
 10204  0ECD  2EB1               	goto	l6157
 10205  0ECE                     l771:	
 10206                           
 10207                           ;main.c: 215:     printed = 1;
 10208  0ECE  0020               	movlb	0	; select bank0
 10209  0ECF  01EE               	clrf	_printed
 10210  0ED0  0AEE               	incf	_printed,f
 10211  0ED1  0008               	return
 10212  0ED2                     __end_of_Display_Name:	
 10213                           
 10214                           	psect	text26
 10215  0B55                     __ptext26:	
 10216 ;; *************** function _strlen *****************
 10217 ;; Defined at:
 10218 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 10221 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 10224 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 10225 ;; Return value:  Size  Location     Type
 10226 ;;                  2    0[BANK0 ] unsigned int 
 10227 ;; Registers used:
 10228 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;Total ram usage:        5 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    5
 10241 ;; This function calls:
 10242 ;;		Nothing
 10243 ;; This function is called by:
 10244 ;;		_Display_Name
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           
 10249                           ;psect for function _strlen
 10250  0B55                     _strlen:	
 10251                           
 10252                           ;incstack = 0
 10253                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 10254  0B55  0020               	movlb	0	; select bank0
 10255  0B56  0821               	movf	strlen@s+1,w
 10256  0B57  00A4               	movwf	strlen@a+1
 10257  0B58  0820               	movf	strlen@s,w
 10258  0B59  00A3               	movwf	strlen@a
 10259  0B5A                     l5697:	
 10260  0B5A  0820               	movf	strlen@s,w
 10261  0B5B  0084               	movwf	4
 10262  0B5C  0821               	movf	strlen@s+1,w
 10263  0B5D  0085               	movwf	5
 10264  0B5E  0012               	moviw fsr0++
 10265  0B5F  1903               	btfsc	3,2
 10266  0B60  2B66               	goto	l5699
 10267  0B61  3001               	movlw	1
 10268  0B62  07A0               	addwf	strlen@s,f
 10269  0B63  3000               	movlw	0
 10270  0B64  3DA1               	addwfc	strlen@s+1,f
 10271  0B65  2B5A               	goto	l5697
 10272  0B66                     l5699:	
 10273  0B66  0823               	movf	strlen@a,w
 10274  0B67  0220               	subwf	strlen@s,w
 10275  0B68  00A0               	movwf	?_strlen
 10276  0B69  0824               	movf	strlen@a+1,w
 10277  0B6A  3B21               	subwfb	strlen@s+1,w
 10278  0B6B  00A1               	movwf	?_strlen+1
 10279  0B6C  0008               	return
 10280  0B6D                     __end_of_strlen:	
 10281                           
 10282                           	psect	text27
 10283  0B10                     __ptext27:	
 10284 ;; *************** function _SPI_Write *****************
 10285 ;; Defined at:
 10286 ;;		line 196 in file "main.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;  incoming        1    wreg     unsigned char 
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;  incoming        1    2[BANK0 ] unsigned char 
 10291 ;; Return value:  Size  Location     Type
 10292 ;;                  1    wreg      void 
 10293 ;; Registers used:
 10294 ;;		wreg, status,2, status,0, pclath, cstack
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;Total ram usage:        2 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    6
 10307 ;; This function calls:
 10308 ;;		_SPI2_Exchange8bit
 10309 ;; This function is called by:
 10310 ;;		_Display_Name
 10311 ;;		_Display_Clear
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           
 10316                           ;psect for function _SPI_Write
 10317  0B10                     _SPI_Write:	
 10318                           
 10319                           ;incstack = 0
 10320                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 10321                           ;SPI_Write@incoming stored from wreg
 10322  0B10  0020               	movlb	0	; select bank0
 10323  0B11  00A2               	movwf	SPI_Write@incoming
 10324                           
 10325                           ;main.c: 197:     do { LATCbits.LATC1 = 0; } while(0);
 10326  0B12  0022               	movlb	2	; select bank2
 10327  0B13  108E               	bcf	14,1	;volatile
 10328                           
 10329                           ;main.c: 198:     SPI2_Exchange8bit(incoming);
 10330  0B14  0020               	movlb	0	; select bank0
 10331  0B15  0822               	movf	SPI_Write@incoming,w
 10332  0B16  3187  27F0  318B   	fcall	_SPI2_Exchange8bit
 10333  0B19  0022               	movlb	2	; select bank2
 10334  0B1A  148E               	bsf	14,1	;volatile
 10335                           
 10336                           ;main.c: 200:     _delay((unsigned long)((100)*(500000/4000.0)));
 10337  0B1B  3011               	movlw	17
 10338  0B1C  0020               	movlb	0	; select bank0
 10339  0B1D  00A1               	movwf	??_SPI_Write
 10340  0B1E  303A               	movlw	58
 10341  0B1F                     u5957:	
 10342  0B1F  0B89               	decfsz	9,f
 10343  0B20  2B1F               	goto	u5957
 10344  0B21  0BA1               	decfsz	??_SPI_Write,f
 10345  0B22  2B1F               	goto	u5957
 10346  0B23  0000               	nop
 10347  0B24  0008               	return
 10348  0B25                     __end_of_SPI_Write:	
 10349                           
 10350                           	psect	text28
 10351  07F0                     __ptext28:	
 10352 ;; *************** function _SPI2_Exchange8bit *****************
 10353 ;; Defined at:
 10354 ;;		line 79 in file "mcc_generated_files/spi2.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;  data            1    wreg     unsigned char 
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;  data            1    0[BANK0 ] unsigned char 
 10359 ;; Return value:  Size  Location     Type
 10360 ;;                  1    wreg      unsigned char 
 10361 ;; Registers used:
 10362 ;;		wreg
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;Total ram usage:        1 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    5
 10375 ;; This function calls:
 10376 ;;		Nothing
 10377 ;; This function is called by:
 10378 ;;		_SPI_Write
 10379 ;;		_SPI2_Exchange8bitBuffer
 10380 ;; This function uses a non-reentrant model
 10381 ;;
 10382                           
 10383                           
 10384                           ;psect for function _SPI2_Exchange8bit
 10385  07F0                     _SPI2_Exchange8bit:	
 10386                           
 10387                           ;incstack = 0
 10388                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 10389                           ;SPI2_Exchange8bit@data stored from wreg
 10390  07F0  0020               	movlb	0	; select bank0
 10391  07F1  00A0               	movwf	SPI2_Exchange8bit@data
 10392                           
 10393                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 10394  07F2  0024               	movlb	4	; select bank4
 10395  07F3  139D               	bcf	29,7	;volatile
 10396                           
 10397                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 10398  07F4  0020               	movlb	0	; select bank0
 10399  07F5  0820               	movf	SPI2_Exchange8bit@data,w
 10400  07F6  0024               	movlb	4	; select bank4
 10401  07F7  0099               	movwf	25	;volatile
 10402  07F8                     l532:	
 10403                           ;mcc_generated_files/spi2.c: 89:     }
 10404                           
 10405                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 10406                           
 10407                           
 10408                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 10409  07F8  0024               	movlb	4	; select bank4
 10410  07F9  181C               	btfsc	28,0	;volatile
 10411  07FA  2FFD               	goto	l5589
 10412  07FB  0064               	clrwdt	;# 
 10413  07FC  2FF8               	goto	l532
 10414  07FD                     l5589:	
 10415                           
 10416                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 10417  07FD  0819               	movf	25,w	;volatile
 10418  07FE  0008               	return
 10419  07FF                     __end_of_SPI2_Exchange8bit:	
 10420                           
 10421                           	psect	text29
 10422  073A                     __ptext29:	
 10423 ;; *************** function _enableGestureSensor *****************
 10424 ;; Defined at:
 10425 ;;		line 409 in file "APDS9960.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  interrupts      1    wreg     _Bool 
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  interrupts      1   17[BANK0 ] _Bool 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  1    wreg      _Bool 
 10432 ;; Registers used:
 10433 ;;		wreg, status,2, status,0, pclath, cstack
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;Total ram usage:        2 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:   11
 10446 ;; This function calls:
 10447 ;;		_enablePower
 10448 ;;		_resetGestureParameters
 10449 ;;		_setGestureIntEnable
 10450 ;;		_setGestureMode
 10451 ;;		_setLEDBoost
 10452 ;;		_setMode
 10453 ;;		_wireWriteDataByte
 10454 ;; This function is called by:
 10455 ;;		_main
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           
 10460                           ;psect for function _enableGestureSensor
 10461  073A                     _enableGestureSensor:	
 10462                           
 10463                           ;incstack = 0
 10464                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10465                           ;enableGestureSensor@interrupts stored from wreg
 10466  073A  0020               	movlb	0	; select bank0
 10467  073B  00B1               	movwf	enableGestureSensor@interrupts
 10468                           
 10469                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10470  073C  318B  233D  3187   	fcall	_resetGestureParameters
 10471                           
 10472                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10473  073F  30FF               	movlw	255
 10474  0740  0020               	movlb	0	; select bank0
 10475  0741  00B0               	movwf	??_enableGestureSensor
 10476  0742  0830               	movf	??_enableGestureSensor,w
 10477  0743  00A6               	movwf	wireWriteDataByte@val
 10478  0744  3083               	movlw	131
 10479  0745  318B  236D  3187   	fcall	_wireWriteDataByte
 10480  0748  0020               	movlb	0	; select bank0
 10481  0749  0826               	movf	?_wireWriteDataByte,w
 10482  074A  0427               	iorwf	?_wireWriteDataByte+1,w
 10483  074B  1903               	btfsc	3,2
 10484  074C  2F50               	goto	l6637
 10485  074D  2F52               	goto	l6641
 10486  074E                     l6655:	
 10487                           
 10488                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10489  074E  3001               	movlw	1
 10490  074F  2F6B               	goto	L8
 10491  0750                     l6637:	
 10492                           
 10493                           ;APDS9960.c: 420:         return 0;
 10494  0750  3000               	movlw	0
 10495  0751  0008               	return
 10496  0752                     l6641:	
 10497                           
 10498                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10499  0752  3089               	movlw	137
 10500  0753  00B0               	movwf	??_enableGestureSensor
 10501  0754  0830               	movf	??_enableGestureSensor,w
 10502  0755  00A6               	movwf	wireWriteDataByte@val
 10503  0756  308E               	movlw	142
 10504  0757  318B  236D  3187   	fcall	_wireWriteDataByte
 10505  075A  0020               	movlb	0	; select bank0
 10506  075B  0826               	movf	?_wireWriteDataByte,w
 10507  075C  0427               	iorwf	?_wireWriteDataByte+1,w
 10508  075D  1903               	btfsc	3,2
 10509  075E  2F50               	goto	l6637
 10510                           
 10511                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10512  075F  3003               	movlw	3
 10513  0760  318D  25C5  3187   	fcall	_setLEDBoost
 10514  0763  3A00               	xorlw	0
 10515  0764  1903               	btfsc	3,2
 10516  0765  2F50               	goto	l6637
 10517                           
 10518                           ;APDS9960.c: 428:     if( interrupts ) {
 10519  0766  0020               	movlb	0	; select bank0
 10520  0767  0831               	movf	enableGestureSensor@interrupts,w
 10521  0768  1D03               	btfss	3,2
 10522  0769  2F4E               	goto	l6655
 10523                           
 10524                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10525  076A  3000               	movlw	0
 10526  076B                     L8:	
 10527  076B  318D  2569  3187   	fcall	_setGestureIntEnable
 10528  076E  3A00               	xorlw	0
 10529  076F  1903               	btfsc	3,2
 10530  0770  2F50               	goto	l6637
 10531                           
 10532                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10533  0771  3001               	movlw	1
 10534  0772  318C  2428  3187   	fcall	_setGestureMode
 10535  0775  3A00               	xorlw	0
 10536  0776  1903               	btfsc	3,2
 10537  0777  2F50               	goto	l6637
 10538                           
 10539                           ;APDS9960.c: 440:     if( !enablePower() ){
 10540  0778  318A  22A3  3187   	fcall	_enablePower
 10541  077B  3A00               	xorlw	0
 10542  077C  1903               	btfsc	3,2
 10543  077D  2F50               	goto	l6637
 10544                           
 10545                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10546  077E  0020               	movlb	0	; select bank0
 10547  077F  01AB               	clrf	setMode@enable
 10548  0780  0AAB               	incf	setMode@enable,f
 10549  0781  3003               	movlw	3
 10550  0782  318F  27B1  3187   	fcall	_setMode
 10551  0785  3A00               	xorlw	0
 10552  0786  1903               	btfsc	3,2
 10553  0787  2F50               	goto	l6637
 10554                           
 10555                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10556  0788  0020               	movlb	0	; select bank0
 10557  0789  01AB               	clrf	setMode@enable
 10558  078A  0AAB               	incf	setMode@enable,f
 10559  078B  3002               	movlw	2
 10560  078C  318F  27B1  3187   	fcall	_setMode
 10561  078F  3A00               	xorlw	0
 10562  0790  1903               	btfsc	3,2
 10563  0791  2F50               	goto	l6637
 10564                           
 10565                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10566  0792  0020               	movlb	0	; select bank0
 10567  0793  01AB               	clrf	setMode@enable
 10568  0794  0AAB               	incf	setMode@enable,f
 10569  0795  3006               	movlw	6
 10570  0796  318F  27B1  3187   	fcall	_setMode
 10571  0799  3A00               	xorlw	0
 10572  079A  1903               	btfsc	3,2
 10573  079B  2F50               	goto	l6637
 10574                           
 10575                           ;APDS9960.c: 453:     return 1;
 10576  079C  3001               	movlw	1
 10577  079D  0008               	return
 10578  079E                     __end_of_enableGestureSensor:	
 10579                           
 10580                           	psect	text30
 10581  0DC5                     __ptext30:	
 10582 ;; *************** function _setLEDBoost *****************
 10583 ;; Defined at:
 10584 ;;		line 484 in file "APDS9960.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  boost           1    wreg     unsigned char 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;  boost           1   13[BANK0 ] unsigned char 
 10589 ;;  val             1   12[BANK0 ] unsigned char 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  1    wreg      _Bool 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2, status,0, pclath, cstack
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:        4 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    8
 10606 ;; This function calls:
 10607 ;;		_wireReadDataByte
 10608 ;;		_wireWriteDataByte
 10609 ;; This function is called by:
 10610 ;;		_enableGestureSensor
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _setLEDBoost
 10616  0DC5                     _setLEDBoost:	
 10617                           
 10618                           ;incstack = 0
 10619                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10620                           ;setLEDBoost@boost stored from wreg
 10621  0DC5  0020               	movlb	0	; select bank0
 10622  0DC6  00AD               	movwf	setLEDBoost@boost
 10623                           
 10624                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10625  0DC7  3090               	movlw	144
 10626  0DC8  318B  23DE  318D   	fcall	_wireReadDataByte
 10627  0DCB  0020               	movlb	0	; select bank0
 10628  0DCC  00AA               	movwf	??_setLEDBoost
 10629  0DCD  082A               	movf	??_setLEDBoost,w
 10630  0DCE  00AC               	movwf	setLEDBoost@val
 10631                           
 10632                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10633  0DCF  3003               	movlw	3
 10634  0DD0  00AA               	movwf	??_setLEDBoost
 10635  0DD1  082A               	movf	??_setLEDBoost,w
 10636  0DD2  05AD               	andwf	setLEDBoost@boost,f
 10637                           
 10638                           ;APDS9960.c: 493:     boost = boost << 4;
 10639  0DD3  082D               	movf	setLEDBoost@boost,w
 10640  0DD4  00AA               	movwf	??_setLEDBoost
 10641  0DD5  3003               	movlw	3
 10642  0DD6                     u5385:	
 10643  0DD6  35AA               	lslf	??_setLEDBoost,f
 10644  0DD7  3EFF               	addlw	-1
 10645  0DD8  1D03               	skipz
 10646  0DD9  2DD6               	goto	u5385
 10647  0DDA  352A               	lslf	??_setLEDBoost,w
 10648  0DDB  00AB               	movwf	??_setLEDBoost+1
 10649  0DDC  082B               	movf	??_setLEDBoost+1,w
 10650  0DDD  00AD               	movwf	setLEDBoost@boost
 10651                           
 10652                           ;APDS9960.c: 494:     val &= 0b11001111;
 10653  0DDE  30CF               	movlw	207
 10654  0DDF  00AA               	movwf	??_setLEDBoost
 10655  0DE0  082A               	movf	??_setLEDBoost,w
 10656  0DE1  05AC               	andwf	setLEDBoost@val,f
 10657                           
 10658                           ;APDS9960.c: 495:     val |= boost;
 10659  0DE2  082D               	movf	setLEDBoost@boost,w
 10660  0DE3  00AA               	movwf	??_setLEDBoost
 10661  0DE4  082A               	movf	??_setLEDBoost,w
 10662  0DE5  04AC               	iorwf	setLEDBoost@val,f
 10663                           
 10664                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10665  0DE6  082C               	movf	setLEDBoost@val,w
 10666  0DE7  00AA               	movwf	??_setLEDBoost
 10667  0DE8  082A               	movf	??_setLEDBoost,w
 10668  0DE9  00A6               	movwf	wireWriteDataByte@val
 10669  0DEA  3090               	movlw	144
 10670  0DEB  318B  236D  318D   	fcall	_wireWriteDataByte
 10671  0DEE  0020               	movlb	0	; select bank0
 10672  0DEF  0826               	movf	?_wireWriteDataByte,w
 10673  0DF0  0427               	iorwf	?_wireWriteDataByte+1,w
 10674  0DF1  1D03               	btfss	3,2
 10675  0DF2  2DF5               	goto	l6427
 10676                           
 10677                           ;APDS9960.c: 499:         return 0;
 10678  0DF3  3000               	movlw	0
 10679  0DF4  0008               	return
 10680  0DF5                     l6427:	
 10681                           
 10682                           ;APDS9960.c: 502:     return 1;
 10683  0DF5  3001               	movlw	1
 10684  0DF6  0008               	return
 10685  0DF7                     __end_of_setLEDBoost:	
 10686                           
 10687                           	psect	text31
 10688  0C28                     __ptext31:	
 10689 ;; *************** function _setGestureMode *****************
 10690 ;; Defined at:
 10691 ;;		line 506 in file "APDS9960.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  mode            1    wreg     unsigned char 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  mode            1   11[BANK0 ] unsigned char 
 10696 ;;  val             1   12[BANK0 ] unsigned char 
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  1    wreg      _Bool 
 10699 ;; Registers used:
 10700 ;;		wreg, status,2, status,0, pclath, cstack
 10701 ;; Tracked objects:
 10702 ;;		On entry : 0/0
 10703 ;;		On exit  : 0/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;Total ram usage:        3 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:    8
 10713 ;; This function calls:
 10714 ;;		_wireReadDataByte
 10715 ;;		_wireWriteDataByte
 10716 ;; This function is called by:
 10717 ;;		_enableGestureSensor
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           
 10722                           ;psect for function _setGestureMode
 10723  0C28                     _setGestureMode:	
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10727                           ;setGestureMode@mode stored from wreg
 10728  0C28  0020               	movlb	0	; select bank0
 10729  0C29  00AB               	movwf	setGestureMode@mode
 10730                           
 10731                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10732  0C2A  30AB               	movlw	171
 10733  0C2B  318B  23DE  318C   	fcall	_wireReadDataByte
 10734  0C2E  0020               	movlb	0	; select bank0
 10735  0C2F  00AA               	movwf	??_setGestureMode
 10736  0C30  082A               	movf	??_setGestureMode,w
 10737  0C31  00AC               	movwf	setGestureMode@val
 10738                           
 10739                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10740  0C32  3001               	movlw	1
 10741  0C33  00AA               	movwf	??_setGestureMode
 10742  0C34  082A               	movf	??_setGestureMode,w
 10743  0C35  05AB               	andwf	setGestureMode@mode,f
 10744                           
 10745                           ;APDS9960.c: 515:     val &= 0b11111110;
 10746  0C36  30FE               	movlw	254
 10747  0C37  00AA               	movwf	??_setGestureMode
 10748  0C38  082A               	movf	??_setGestureMode,w
 10749  0C39  05AC               	andwf	setGestureMode@val,f
 10750                           
 10751                           ;APDS9960.c: 516:     val |= mode;
 10752  0C3A  082B               	movf	setGestureMode@mode,w
 10753  0C3B  00AA               	movwf	??_setGestureMode
 10754  0C3C  082A               	movf	??_setGestureMode,w
 10755  0C3D  04AC               	iorwf	setGestureMode@val,f
 10756                           
 10757                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 10758  0C3E  082C               	movf	setGestureMode@val,w
 10759  0C3F  00AA               	movwf	??_setGestureMode
 10760  0C40  082A               	movf	??_setGestureMode,w
 10761  0C41  00A6               	movwf	wireWriteDataByte@val
 10762  0C42  30AB               	movlw	171
 10763  0C43  318B  236D  318C   	fcall	_wireWriteDataByte
 10764  0C46  0020               	movlb	0	; select bank0
 10765  0C47  0826               	movf	?_wireWriteDataByte,w
 10766  0C48  0427               	iorwf	?_wireWriteDataByte+1,w
 10767  0C49  1D03               	btfss	3,2
 10768  0C4A  2C4D               	goto	l6445
 10769                           
 10770                           ;APDS9960.c: 520:         return 0;
 10771  0C4B  3000               	movlw	0
 10772  0C4C  0008               	return
 10773  0C4D                     l6445:	
 10774                           
 10775                           ;APDS9960.c: 523:     return 1;
 10776  0C4D  3001               	movlw	1
 10777  0C4E  0008               	return
 10778  0C4F                     __end_of_setGestureMode:	
 10779                           
 10780                           	psect	text32
 10781  0D69                     __ptext32:	
 10782 ;; *************** function _setGestureIntEnable *****************
 10783 ;; Defined at:
 10784 ;;		line 387 in file "APDS9960.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  enable          1    wreg     unsigned char 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  enable          1   12[BANK0 ] unsigned char 
 10789 ;;  val             1   11[BANK0 ] unsigned char 
 10790 ;; Return value:  Size  Location     Type
 10791 ;;                  1    wreg      _Bool 
 10792 ;; Registers used:
 10793 ;;		wreg, status,2, status,0, pclath, cstack
 10794 ;; Tracked objects:
 10795 ;;		On entry : 0/0
 10796 ;;		On exit  : 0/0
 10797 ;;		Unchanged: 0/0
 10798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;Total ram usage:        3 bytes
 10804 ;; Hardware stack levels used:    1
 10805 ;; Hardware stack levels required when called:    8
 10806 ;; This function calls:
 10807 ;;		_wireReadDataByte
 10808 ;;		_wireWriteDataByte
 10809 ;; This function is called by:
 10810 ;;		_initialize
 10811 ;;		_enableGestureSensor
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           
 10816                           ;psect for function _setGestureIntEnable
 10817  0D69                     _setGestureIntEnable:	
 10818                           
 10819                           ;incstack = 0
 10820                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 10821                           ;setGestureIntEnable@enable stored from wreg
 10822  0D69  0020               	movlb	0	; select bank0
 10823  0D6A  00AC               	movwf	setGestureIntEnable@enable
 10824                           
 10825                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 10826  0D6B  30AB               	movlw	171
 10827  0D6C  318B  23DE  318D   	fcall	_wireReadDataByte
 10828  0D6F  0020               	movlb	0	; select bank0
 10829  0D70  00AA               	movwf	??_setGestureIntEnable
 10830  0D71  082A               	movf	??_setGestureIntEnable,w
 10831  0D72  00AB               	movwf	setGestureIntEnable@val
 10832                           
 10833                           ;APDS9960.c: 395:     enable &= 0b00000001;
 10834  0D73  3001               	movlw	1
 10835  0D74  00AA               	movwf	??_setGestureIntEnable
 10836  0D75  082A               	movf	??_setGestureIntEnable,w
 10837  0D76  05AC               	andwf	setGestureIntEnable@enable,f
 10838                           
 10839                           ;APDS9960.c: 396:     enable = enable << 1;
 10840  0D77  352C               	lslf	setGestureIntEnable@enable,w
 10841  0D78  00AA               	movwf	??_setGestureIntEnable
 10842  0D79  082A               	movf	??_setGestureIntEnable,w
 10843  0D7A  00AC               	movwf	setGestureIntEnable@enable
 10844                           
 10845                           ;APDS9960.c: 397:     val &= 0b11111101;
 10846  0D7B  30FD               	movlw	253
 10847  0D7C  00AA               	movwf	??_setGestureIntEnable
 10848  0D7D  082A               	movf	??_setGestureIntEnable,w
 10849  0D7E  05AB               	andwf	setGestureIntEnable@val,f
 10850                           
 10851                           ;APDS9960.c: 398:     val |= enable;
 10852  0D7F  082C               	movf	setGestureIntEnable@enable,w
 10853  0D80  00AA               	movwf	??_setGestureIntEnable
 10854  0D81  082A               	movf	??_setGestureIntEnable,w
 10855  0D82  04AB               	iorwf	setGestureIntEnable@val,f
 10856                           
 10857                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 10858  0D83  082B               	movf	setGestureIntEnable@val,w
 10859  0D84  00AA               	movwf	??_setGestureIntEnable
 10860  0D85  082A               	movf	??_setGestureIntEnable,w
 10861  0D86  00A6               	movwf	wireWriteDataByte@val
 10862  0D87  30AB               	movlw	171
 10863  0D88  318B  236D  318D   	fcall	_wireWriteDataByte
 10864  0D8B  0020               	movlb	0	; select bank0
 10865  0D8C  0826               	movf	?_wireWriteDataByte,w
 10866  0D8D  0427               	iorwf	?_wireWriteDataByte+1,w
 10867  0D8E  1D03               	btfss	3,2
 10868  0D8F  2D92               	goto	l6409
 10869                           
 10870                           ;APDS9960.c: 402:         return 0;
 10871  0D90  3000               	movlw	0
 10872  0D91  0008               	return
 10873  0D92                     l6409:	
 10874                           
 10875                           ;APDS9960.c: 405:     return 1;
 10876  0D92  3001               	movlw	1
 10877  0D93  0008               	return
 10878  0D94                     __end_of_setGestureIntEnable:	
 10879                           
 10880                           	psect	text33
 10881  0B3D                     __ptext33:	
 10882 ;; *************** function _resetGestureParameters *****************
 10883 ;; Defined at:
 10884 ;;		line 457 in file "APDS9960.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;		None
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;		None
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		status,2
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;Total ram usage:        0 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    5
 10905 ;; This function calls:
 10906 ;;		Nothing
 10907 ;; This function is called by:
 10908 ;;		_enableGestureSensor
 10909 ;;		_readGesture
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           
 10914                           ;psect for function _resetGestureParameters
 10915  0B3D                     _resetGestureParameters:	
 10916                           
 10917                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 10918                           
 10919                           ;incstack = 0
 10920                           ; Regs used in _resetGestureParameters: [status,2]
 10921  0B3D  0024               	movlb	4	; select bank4
 10922  0B3E  01E0               	clrf	(_gesture_data_^(0+512)+64)
 10923                           
 10924                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 10925  0B3F  01E1               	clrf	(_gesture_data_^(0+512)+65)
 10926                           
 10927                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 10928  0B40  0020               	movlb	0	; select bank0
 10929  0B41  01E8               	clrf	_gesture_ud_delta_
 10930  0B42  01E9               	clrf	_gesture_ud_delta_+1
 10931                           
 10932                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 10933  0B43  01E6               	clrf	_gesture_lr_delta_
 10934  0B44  01E7               	clrf	_gesture_lr_delta_+1
 10935                           
 10936                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 10937  0B45  01E4               	clrf	_gesture_ud_count_
 10938  0B46  01E5               	clrf	_gesture_ud_count_+1
 10939                           
 10940                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 10941  0B47  01E2               	clrf	_gesture_lr_count_
 10942  0B48  01E3               	clrf	_gesture_lr_count_+1
 10943                           
 10944                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 10945  0B49  01E0               	clrf	_gesture_near_count_
 10946  0B4A  01E1               	clrf	_gesture_near_count_+1
 10947                           
 10948                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 10949  0B4B  0021               	movlb	1	; select bank1
 10950  0B4C  01E2               	clrf	_gesture_far_count_^(0+128)
 10951  0B4D  01E3               	clrf	(_gesture_far_count_+1)^(0+128)
 10952                           
 10953                           ;APDS9960.c: 472:     gesture_state_ = 0;
 10954  0B4E  0020               	movlb	0	; select bank0
 10955  0B4F  01DE               	clrf	_gesture_state_
 10956  0B50  01DF               	clrf	_gesture_state_+1
 10957                           
 10958                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 10959  0B51  0022               	movlb	2	; select bank2
 10960  0B52  01E8               	clrf	_gesture_motion_^(0+256)
 10961  0B53  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 10962  0B54  0008               	return
 10963  0B55                     __end_of_resetGestureParameters:	
 10964                           
 10965                           	psect	text34
 10966  0AA3                     __ptext34:	
 10967 ;; *************** function _enablePower *****************
 10968 ;; Defined at:
 10969 ;;		line 527 in file "APDS9960.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;		None
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;		None
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      _Bool 
 10976 ;; Registers used:
 10977 ;;		wreg, status,2, status,0, pclath, cstack
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;Total ram usage:        0 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:   10
 10990 ;; This function calls:
 10991 ;;		_setMode
 10992 ;; This function is called by:
 10993 ;;		_enableGestureSensor
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           
 10998                           ;psect for function _enablePower
 10999  0AA3                     _enablePower:	
 11000                           
 11001                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 11002                           
 11003                           ;incstack = 0
 11004                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 11005  0AA3  0020               	movlb	0	; select bank0
 11006  0AA4  01AB               	clrf	setMode@enable
 11007  0AA5  0AAB               	incf	setMode@enable,f
 11008  0AA6  3000               	movlw	0
 11009  0AA7  318F  27B1  318A   	fcall	_setMode
 11010  0AAA  3A00               	xorlw	0
 11011  0AAB  1D03               	skipz
 11012  0AAC  2AAF               	goto	l6455
 11013                           
 11014                           ;APDS9960.c: 530:         return 0;
 11015  0AAD  3000               	movlw	0
 11016  0AAE  0008               	return
 11017  0AAF                     l6455:	
 11018                           
 11019                           ;APDS9960.c: 533:     return 1;
 11020  0AAF  3001               	movlw	1
 11021  0AB0  0008               	return
 11022  0AB1                     __end_of_enablePower:	
 11023                           
 11024                           	psect	text35
 11025  0FB1                     __ptext35:	
 11026 ;; *************** function _setMode *****************
 11027 ;; Defined at:
 11028 ;;		line 124 in file "APDS9960.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;  mode            1    wreg     unsigned char 
 11031 ;;  enable          1   11[BANK0 ] unsigned char 
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;  mode            1   15[BANK0 ] unsigned char 
 11034 ;;  reg_val         1   14[BANK0 ] unsigned char 
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  1    wreg      _Bool 
 11037 ;; Registers used:
 11038 ;;		wreg, status,2, status,0, pclath, cstack
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 0/0
 11042 ;;		Unchanged: 0/0
 11043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11044 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;Total ram usage:        5 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:    9
 11051 ;; This function calls:
 11052 ;;		_getMode
 11053 ;;		_wireWriteDataByte
 11054 ;; This function is called by:
 11055 ;;		_initialize
 11056 ;;		_enableGestureSensor
 11057 ;;		_enablePower
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _setMode
 11063  0FB1                     _setMode:	
 11064                           
 11065                           ;incstack = 0
 11066                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 11067                           ;setMode@mode stored from wreg
 11068  0FB1  0020               	movlb	0	; select bank0
 11069  0FB2  00AF               	movwf	setMode@mode
 11070                           
 11071                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 11072  0FB3  318A  2279  318F   	fcall	_getMode
 11073  0FB6  0020               	movlb	0	; select bank0
 11074  0FB7  00AC               	movwf	??_setMode
 11075  0FB8  082C               	movf	??_setMode,w
 11076  0FB9  00AE               	movwf	setMode@reg_val
 11077                           
 11078                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 11079  0FBA  0A2E               	incf	setMode@reg_val,w
 11080  0FBB  1D03               	btfss	3,2
 11081  0FBC  2FBF               	goto	l5711
 11082  0FBD                     l5707:	
 11083                           
 11084                           ;APDS9960.c: 131:         return 0;
 11085  0FBD  3000               	movlw	0
 11086  0FBE  0008               	return
 11087  0FBF                     l5711:	
 11088                           
 11089                           ;APDS9960.c: 135:     enable = enable & 0x01;
 11090  0FBF  082B               	movf	setMode@enable,w
 11091  0FC0  3901               	andlw	1
 11092  0FC1  00AC               	movwf	??_setMode
 11093  0FC2  082C               	movf	??_setMode,w
 11094  0FC3  00AB               	movwf	setMode@enable
 11095                           
 11096                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 11097  0FC4  3007               	movlw	7
 11098  0FC5  022F               	subwf	setMode@mode,w
 11099  0FC6  1803               	skipnc
 11100  0FC7  2FE4               	goto	l5721
 11101                           
 11102                           ;APDS9960.c: 137:         if (enable) {
 11103  0FC8  082B               	movf	setMode@enable,w
 11104  0FC9  1903               	btfsc	3,2
 11105  0FCA  2FD7               	goto	l5719
 11106                           
 11107                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 11108  0FCB  3001               	movlw	1
 11109  0FCC  00AC               	movwf	??_setMode
 11110  0FCD  0A2F               	incf	setMode@mode,w
 11111  0FCE  2FD0               	goto	u4314
 11112  0FCF                     u4315:	
 11113  0FCF  35AC               	lslf	??_setMode,f
 11114  0FD0                     u4314:	
 11115  0FD0  0B89               	decfsz	9,f
 11116  0FD1  2FCF               	goto	u4315
 11117  0FD2  082C               	movf	??_setMode,w
 11118  0FD3  00AD               	movwf	??_setMode+1
 11119  0FD4  082D               	movf	??_setMode+1,w
 11120  0FD5  04AE               	iorwf	setMode@reg_val,f
 11121                           
 11122                           ;APDS9960.c: 139:         } else {
 11123  0FD6  2FF1               	goto	l5729
 11124  0FD7                     l5719:	
 11125                           
 11126                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11127  0FD7  3001               	movlw	1
 11128  0FD8  00AC               	movwf	??_setMode
 11129  0FD9  0A2F               	incf	setMode@mode,w
 11130  0FDA  2FDC               	goto	u4324
 11131  0FDB                     u4325:	
 11132  0FDB  35AC               	lslf	??_setMode,f
 11133  0FDC                     u4324:	
 11134  0FDC  0B89               	decfsz	9,f
 11135  0FDD  2FDB               	goto	u4325
 11136  0FDE  082C               	movf	??_setMode,w
 11137  0FDF  3AFF               	xorlw	255
 11138  0FE0  00AD               	movwf	??_setMode+1
 11139  0FE1  082D               	movf	??_setMode+1,w
 11140  0FE2  05AE               	andwf	setMode@reg_val,f
 11141  0FE3  2FF1               	goto	l5729
 11142  0FE4                     l5721:	
 11143  0FE4  3007               	movlw	7
 11144  0FE5  062F               	xorwf	setMode@mode,w
 11145  0FE6  1D03               	btfss	3,2
 11146  0FE7  2FF1               	goto	l5729
 11147                           
 11148                           ;APDS9960.c: 143:         if (enable) {
 11149  0FE8  082B               	movf	setMode@enable,w
 11150  0FE9  1903               	btfsc	3,2
 11151  0FEA  2FF0               	goto	l5727
 11152                           
 11153                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11154  0FEB  307F               	movlw	127
 11155  0FEC  00AC               	movwf	??_setMode
 11156  0FED  082C               	movf	??_setMode,w
 11157  0FEE  00AE               	movwf	setMode@reg_val
 11158                           
 11159                           ;APDS9960.c: 145:         } else {
 11160  0FEF  2FF1               	goto	l5729
 11161  0FF0                     l5727:	
 11162                           
 11163                           ;APDS9960.c: 146:             reg_val = 0x00;
 11164  0FF0  01AE               	clrf	setMode@reg_val
 11165  0FF1                     l5729:	
 11166                           
 11167                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11168  0FF1  082E               	movf	setMode@reg_val,w
 11169  0FF2  00AC               	movwf	??_setMode
 11170  0FF3  082C               	movf	??_setMode,w
 11171  0FF4  00A6               	movwf	wireWriteDataByte@val
 11172  0FF5  3080               	movlw	128
 11173  0FF6  318B  236D  318F   	fcall	_wireWriteDataByte
 11174  0FF9  0020               	movlb	0	; select bank0
 11175  0FFA  0826               	movf	?_wireWriteDataByte,w
 11176  0FFB  0427               	iorwf	?_wireWriteDataByte+1,w
 11177  0FFC  1903               	btfsc	3,2
 11178  0FFD  2FBD               	goto	l5707
 11179                           
 11180                           ;APDS9960.c: 155:     return 1;
 11181  0FFE  3001               	movlw	1
 11182  0FFF  0008               	return
 11183  1000                     __end_of_setMode:	
 11184                           
 11185                           	psect	text36
 11186  0B6D                     __ptext36:	
 11187 ;; *************** function _wireWriteDataByte *****************
 11188 ;; Defined at:
 11189 ;;		line 871 in file "APDS9960.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;  reg             1    wreg     unsigned char 
 11192 ;;  val             1    6[BANK0 ] unsigned char 
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;  reg             1    9[BANK0 ] unsigned char 
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  2    6[BANK0 ] int 
 11197 ;; Registers used:
 11198 ;;		wreg, status,2, status,0, pclath, cstack
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11204 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11207 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;Total ram usage:        4 bytes
 11209 ;; Hardware stack levels used:    1
 11210 ;; Hardware stack levels required when called:    7
 11211 ;; This function calls:
 11212 ;;		_I2C_Start
 11213 ;;		_I2C_Stop
 11214 ;;		_I2C_Write_Byte
 11215 ;; This function is called by:
 11216 ;;		_initialize
 11217 ;;		_setMode
 11218 ;;		_setLEDDrive
 11219 ;;		_setProximityGain
 11220 ;;		_setAmbientLightGain
 11221 ;;		_setProxIntLowThresh
 11222 ;;		_setProxIntHighThresh
 11223 ;;		_setLightIntLowThreshold
 11224 ;;		_setLightIntHighThreshold
 11225 ;;		_setGestureEnterThresh
 11226 ;;		_setGestureExitThresh
 11227 ;;		_setGestureGain
 11228 ;;		_setGestureLEDDrive
 11229 ;;		_setGestureWaitTime
 11230 ;;		_setGestureIntEnable
 11231 ;;		_enableGestureSensor
 11232 ;;		_setLEDBoost
 11233 ;;		_setGestureMode
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _wireWriteDataByte
 11239  0B6D                     _wireWriteDataByte:	
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11243                           ;wireWriteDataByte@reg stored from wreg
 11244  0B6D  0020               	movlb	0	; select bank0
 11245  0B6E  00A9               	movwf	wireWriteDataByte@reg
 11246                           
 11247                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11248  0B6F  3189  21C7  318B   	fcall	_I2C_Start
 11249                           
 11250                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11251  0B72  3072               	movlw	114
 11252  0B73  318B  2388  318B   	fcall	_I2C_Write_Byte
 11253                           
 11254                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11255  0B76  0020               	movlb	0	; select bank0
 11256  0B77  0829               	movf	wireWriteDataByte@reg,w
 11257  0B78  318B  2388  318B   	fcall	_I2C_Write_Byte
 11258                           
 11259                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11260  0B7B  0020               	movlb	0	; select bank0
 11261  0B7C  0826               	movf	wireWriteDataByte@val,w
 11262  0B7D  318B  2388  318B   	fcall	_I2C_Write_Byte
 11263                           
 11264                           ;APDS9960.c: 886:     I2C_Stop();
 11265  0B80  3189  21CD         	fcall	_I2C_Stop
 11266                           
 11267                           ;APDS9960.c: 889:     return 1;
 11268  0B82  3001               	movlw	1
 11269  0B83  0020               	movlb	0	; select bank0
 11270  0B84  00A6               	movwf	?_wireWriteDataByte
 11271  0B85  3000               	movlw	0
 11272  0B86  00A7               	movwf	?_wireWriteDataByte+1
 11273  0B87  0008               	return
 11274  0B88                     __end_of_wireWriteDataByte:	
 11275                           
 11276                           	psect	text37
 11277  0A79                     __ptext37:	
 11278 ;; *************** function _getMode *****************
 11279 ;; Defined at:
 11280 ;;		line 159 in file "APDS9960.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;		None
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      unsigned char 
 11287 ;; Registers used:
 11288 ;;		wreg, status,2, status,0, pclath, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;Total ram usage:        2 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    8
 11301 ;; This function calls:
 11302 ;;		_wireReadDataByte
 11303 ;; This function is called by:
 11304 ;;		_setMode
 11305 ;;		_readGesture
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _getMode
 11311  0A79                     _getMode:	
 11312                           
 11313                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11317  0A79  3080               	movlw	128
 11318  0A7A  318B  23DE         	fcall	_wireReadDataByte
 11319  0A7C  0020               	movlb	0	; select bank0
 11320  0A7D  00A9               	movwf	??_getMode
 11321  0A7E  0829               	movf	??_getMode,w
 11322  0A7F  00AA               	movwf	getMode@enable_value
 11323                           
 11324                           ;APDS9960.c: 166:     return enable_value;
 11325  0A80  082A               	movf	getMode@enable_value,w
 11326  0A81  0008               	return
 11327  0A82                     __end_of_getMode:	
 11328                           
 11329                           	psect	text38
 11330  0BDE                     __ptext38:	
 11331 ;; *************** function _wireReadDataByte *****************
 11332 ;; Defined at:
 11333 ;;		line 893 in file "APDS9960.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;  reg             1    wreg     unsigned char 
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;  reg             1    7[BANK0 ] unsigned char 
 11338 ;;  val             1    8[BANK0 ] unsigned char 
 11339 ;; Return value:  Size  Location     Type
 11340 ;;                  1    wreg      unsigned char 
 11341 ;; Registers used:
 11342 ;;		wreg, status,2, status,0, pclath, cstack
 11343 ;; Tracked objects:
 11344 ;;		On entry : 0/0
 11345 ;;		On exit  : 0/0
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11352 ;;Total ram usage:        3 bytes
 11353 ;; Hardware stack levels used:    1
 11354 ;; Hardware stack levels required when called:    7
 11355 ;; This function calls:
 11356 ;;		_I2C_ReStart
 11357 ;;		_I2C_Read_Byte
 11358 ;;		_I2C_Send_NACK
 11359 ;;		_I2C_Start
 11360 ;;		_I2C_Stop
 11361 ;;		_I2C_Write_Byte
 11362 ;; This function is called by:
 11363 ;;		_initialize
 11364 ;;		_getMode
 11365 ;;		_setLEDDrive
 11366 ;;		_setProximityGain
 11367 ;;		_setAmbientLightGain
 11368 ;;		_setGestureGain
 11369 ;;		_setGestureLEDDrive
 11370 ;;		_setGestureWaitTime
 11371 ;;		_setGestureIntEnable
 11372 ;;		_setLEDBoost
 11373 ;;		_setGestureMode
 11374 ;;		_isGestureAvailable
 11375 ;;		_readGesture
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _wireReadDataByte
 11381  0BDE                     _wireReadDataByte:	
 11382                           
 11383                           ;incstack = 0
 11384                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11385                           ;wireReadDataByte@reg stored from wreg
 11386  0BDE  0020               	movlb	0	; select bank0
 11387  0BDF  00A7               	movwf	wireReadDataByte@reg
 11388                           
 11389                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11390  0BE0  3189  21C7  318B   	fcall	_I2C_Start
 11391                           
 11392                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11393  0BE3  3072               	movlw	114
 11394  0BE4  318B  2388  318B   	fcall	_I2C_Write_Byte
 11395                           
 11396                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11397  0BE7  0020               	movlb	0	; select bank0
 11398  0BE8  0827               	movf	wireReadDataByte@reg,w
 11399  0BE9  318B  2388  318B   	fcall	_I2C_Write_Byte
 11400                           
 11401                           ;APDS9960.c: 912:     I2C_ReStart();
 11402  0BEC  3189  21B8  318B   	fcall	_I2C_ReStart
 11403                           
 11404                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11405  0BEF  3073               	movlw	115
 11406  0BF0  318B  2388  318B   	fcall	_I2C_Write_Byte
 11407                           
 11408                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11409  0BF3  318A  228C  318B   	fcall	_I2C_Read_Byte
 11410  0BF6  0020               	movlb	0	; select bank0
 11411  0BF7  00A6               	movwf	??_wireReadDataByte
 11412  0BF8  0826               	movf	??_wireReadDataByte,w
 11413  0BF9  00A8               	movwf	wireReadDataByte@val
 11414                           
 11415                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11416  0BFA  3189  21C1  318B   	fcall	_I2C_Send_NACK
 11417                           
 11418                           ;APDS9960.c: 917:     I2C_Stop();
 11419  0BFD  3189  21CD         	fcall	_I2C_Stop
 11420                           
 11421                           ;APDS9960.c: 919:     return val;
 11422  0BFF  0020               	movlb	0	; select bank0
 11423  0C00  0828               	movf	wireReadDataByte@val,w
 11424  0C01  0008               	return
 11425  0C02                     __end_of_wireReadDataByte:	
 11426                           
 11427                           	psect	text39
 11428  0B88                     __ptext39:	
 11429 ;; *************** function _I2C_Write_Byte *****************
 11430 ;; Defined at:
 11431 ;;		line 75 in file "i2c.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;  Byte            1    wreg     unsigned char 
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;  Byte            1    3[BANK0 ] unsigned char 
 11436 ;;  count           2    4[BANK0 ] unsigned int 
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      void 
 11439 ;; Registers used:
 11440 ;;		wreg, status,2, status,0, pclath, cstack
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;Total ram usage:        5 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    6
 11453 ;; This function calls:
 11454 ;;		_i2c1_driver_TXData
 11455 ;; This function is called by:
 11456 ;;		_wireReadDataBlock
 11457 ;;		_wireWriteDataByte
 11458 ;;		_wireReadDataByte
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           
 11463                           ;psect for function _I2C_Write_Byte
 11464  0B88                     _I2C_Write_Byte:	
 11465                           
 11466                           ;incstack = 0
 11467                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11468                           ;I2C_Write_Byte@Byte stored from wreg
 11469  0B88  0020               	movlb	0	; select bank0
 11470  0B89  00A3               	movwf	I2C_Write_Byte@Byte
 11471                           
 11472                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11473  0B8A  0823               	movf	I2C_Write_Byte@Byte,w
 11474  0B8B  318A  2213  318B   	fcall	_i2c1_driver_TXData
 11475                           
 11476                           ;i2c.c: 83:     unsigned int count = 0;
 11477  0B8E  0020               	movlb	0	; select bank0
 11478  0B8F  01A4               	clrf	I2C_Write_Byte@count
 11479  0B90  01A5               	clrf	I2C_Write_Byte@count+1
 11480  0B91                     l1201:	
 11481                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11482                           
 11483  0B91  0024               	movlb	4	; select bank4
 11484  0B92  1B16               	btfsc	22,6	;volatile
 11485  0B93  2B91               	goto	l1201
 11486  0B94                     l5555:	
 11487  0B94  0020               	movlb	0	; select bank0
 11488  0B95  0825               	movf	I2C_Write_Byte@count+1,w
 11489  0B96  00A2               	movwf	??_I2C_Write_Byte+1
 11490  0B97  0824               	movf	I2C_Write_Byte@count,w
 11491  0B98  00A1               	movwf	??_I2C_Write_Byte
 11492  0B99  0AA4               	incf	I2C_Write_Byte@count,f
 11493  0B9A  1903               	skipnz
 11494  0B9B  0AA5               	incf	I2C_Write_Byte@count+1,f
 11495  0B9C  3000               	movlw	0
 11496  0B9D  0222               	subwf	??_I2C_Write_Byte+1,w
 11497  0B9E  3005               	movlw	5
 11498  0B9F  1903               	skipnz
 11499  0BA0  0221               	subwf	??_I2C_Write_Byte,w
 11500  0BA1  1803               	btfsc	3,0
 11501  0BA2  0008               	return
 11502  0BA3  2B94               	goto	l5555
 11503  0BA4                     __end_of_I2C_Write_Byte:	
 11504                           
 11505                           	psect	text40
 11506  0A13                     __ptext40:	
 11507 ;; *************** function _i2c1_driver_TXData *****************
 11508 ;; Defined at:
 11509 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;  d               1    wreg     unsigned char 
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;  d               1    0[BANK0 ] unsigned char 
 11514 ;; Return value:  Size  Location     Type
 11515 ;;                  1    wreg      void 
 11516 ;; Registers used:
 11517 ;;		wreg
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;Total ram usage:        1 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    5
 11530 ;; This function calls:
 11531 ;;		Nothing
 11532 ;; This function is called by:
 11533 ;;		_I2C_Write_Byte
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           
 11538                           ;psect for function _i2c1_driver_TXData
 11539  0A13                     _i2c1_driver_TXData:	
 11540                           
 11541                           ;incstack = 0
 11542                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11543                           ;i2c1_driver_TXData@d stored from wreg
 11544  0A13  0020               	movlb	0	; select bank0
 11545  0A14  00A0               	movwf	i2c1_driver_TXData@d
 11546                           
 11547                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11548  0A15  0820               	movf	i2c1_driver_TXData@d,w
 11549  0A16  0024               	movlb	4	; select bank4
 11550  0A17  0091               	movwf	17	;volatile
 11551  0A18  0008               	return
 11552  0A19                     __end_of_i2c1_driver_TXData:	
 11553                           
 11554                           	psect	text41
 11555  09CD                     __ptext41:	
 11556 ;; *************** function _I2C_Stop *****************
 11557 ;; Defined at:
 11558 ;;		line 50 in file "i2c.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;		None
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;		None
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      void 
 11565 ;; Registers used:
 11566 ;;		status,2, status,0, pclath, cstack
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;Total ram usage:        0 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    6
 11579 ;; This function calls:
 11580 ;;		_i2c1_driver_stop
 11581 ;; This function is called by:
 11582 ;;		_wireReadDataBlock
 11583 ;;		_wireWriteDataByte
 11584 ;;		_wireReadDataByte
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           
 11589                           ;psect for function _I2C_Stop
 11590  09CD                     _I2C_Stop:	
 11591                           
 11592                           ;i2c.c: 52:  i2c1_driver_stop();
 11593                           
 11594                           ;incstack = 0
 11595                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11596  09CD  3189  21CA         	fcall	_i2c1_driver_stop
 11597  09CF  0008               	return
 11598  09D0                     __end_of_I2C_Stop:	
 11599                           
 11600                           	psect	text42
 11601  09CA                     __ptext42:	
 11602 ;; *************** function _i2c1_driver_stop *****************
 11603 ;; Defined at:
 11604 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;		None
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;		None
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  1    wreg      void 
 11611 ;; Registers used:
 11612 ;;		None
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/0
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;Total ram usage:        0 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    5
 11625 ;; This function calls:
 11626 ;;		Nothing
 11627 ;; This function is called by:
 11628 ;;		_I2C_Stop
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           
 11633                           ;psect for function _i2c1_driver_stop
 11634  09CA                     _i2c1_driver_stop:	
 11635                           
 11636                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11637                           
 11638                           ;incstack = 0
 11639                           ; Regs used in _i2c1_driver_stop: []
 11640  09CA  0024               	movlb	4	; select bank4
 11641  09CB  1516               	bsf	22,2	;volatile
 11642  09CC  0008               	return
 11643  09CD                     __end_of_i2c1_driver_stop:	
 11644                           
 11645                           	psect	text43
 11646  09C7                     __ptext43:	
 11647 ;; *************** function _I2C_Start *****************
 11648 ;; Defined at:
 11649 ;;		line 35 in file "i2c.c"
 11650 ;; Parameters:    Size  Location     Type
 11651 ;;		None
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;		None
 11654 ;; Return value:  Size  Location     Type
 11655 ;;                  1    wreg      void 
 11656 ;; Registers used:
 11657 ;;		status,2, status,0, pclath, cstack
 11658 ;; Tracked objects:
 11659 ;;		On entry : 0/0
 11660 ;;		On exit  : 0/0
 11661 ;;		Unchanged: 0/0
 11662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;Total ram usage:        0 bytes
 11668 ;; Hardware stack levels used:    1
 11669 ;; Hardware stack levels required when called:    6
 11670 ;; This function calls:
 11671 ;;		_i2c1_driver_start
 11672 ;; This function is called by:
 11673 ;;		_wireReadDataBlock
 11674 ;;		_wireWriteDataByte
 11675 ;;		_wireReadDataByte
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           
 11680                           ;psect for function _I2C_Start
 11681  09C7                     _I2C_Start:	
 11682                           
 11683                           ;i2c.c: 37:  i2c1_driver_start();
 11684                           
 11685                           ;incstack = 0
 11686                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11687  09C7  3189  21C4         	fcall	_i2c1_driver_start
 11688  09C9  0008               	return
 11689  09CA                     __end_of_I2C_Start:	
 11690                           
 11691                           	psect	text44
 11692  09C4                     __ptext44:	
 11693 ;; *************** function _i2c1_driver_start *****************
 11694 ;; Defined at:
 11695 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;		None
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;		None
 11700 ;; Return value:  Size  Location     Type
 11701 ;;                  1    wreg      void 
 11702 ;; Registers used:
 11703 ;;		None
 11704 ;; Tracked objects:
 11705 ;;		On entry : 0/0
 11706 ;;		On exit  : 0/0
 11707 ;;		Unchanged: 0/0
 11708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;Total ram usage:        0 bytes
 11714 ;; Hardware stack levels used:    1
 11715 ;; Hardware stack levels required when called:    5
 11716 ;; This function calls:
 11717 ;;		Nothing
 11718 ;; This function is called by:
 11719 ;;		_I2C_Start
 11720 ;;		_i2c_masterOperation
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           
 11725                           ;psect for function _i2c1_driver_start
 11726  09C4                     _i2c1_driver_start:	
 11727                           
 11728                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11729                           
 11730                           ;incstack = 0
 11731                           ; Regs used in _i2c1_driver_start: []
 11732  09C4  0024               	movlb	4	; select bank4
 11733  09C5  1416               	bsf	22,0	;volatile
 11734  09C6  0008               	return
 11735  09C7                     __end_of_i2c1_driver_start:	
 11736                           
 11737                           	psect	text45
 11738  09C1                     __ptext45:	
 11739 ;; *************** function _I2C_Send_NACK *****************
 11740 ;; Defined at:
 11741 ;;		line 66 in file "i2c.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;		None
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;		None
 11746 ;; Return value:  Size  Location     Type
 11747 ;;                  1    wreg      void 
 11748 ;; Registers used:
 11749 ;;		status,2, status,0, pclath, cstack
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;Total ram usage:        0 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; Hardware stack levels required when called:    6
 11762 ;; This function calls:
 11763 ;;		_i2c1_driver_sendNACK
 11764 ;; This function is called by:
 11765 ;;		_wireReadDataBlock
 11766 ;;		_wireReadDataByte
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           
 11771                           ;psect for function _I2C_Send_NACK
 11772  09C1                     _I2C_Send_NACK:	
 11773                           
 11774                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 11775                           
 11776                           ;incstack = 0
 11777                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 11778  09C1  3189  21FB         	fcall	_i2c1_driver_sendNACK
 11779  09C3  0008               	return
 11780  09C4                     __end_of_I2C_Send_NACK:	
 11781                           
 11782                           	psect	text46
 11783  09FB                     __ptext46:	
 11784 ;; *************** function _i2c1_driver_sendNACK *****************
 11785 ;; Defined at:
 11786 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;		None
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;		None
 11791 ;; Return value:  Size  Location     Type
 11792 ;;                  1    wreg      void 
 11793 ;; Registers used:
 11794 ;;		None
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : 0/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;Total ram usage:        0 bytes
 11805 ;; Hardware stack levels used:    1
 11806 ;; Hardware stack levels required when called:    5
 11807 ;; This function calls:
 11808 ;;		Nothing
 11809 ;; This function is called by:
 11810 ;;		_I2C_Send_NACK
 11811 ;; This function uses a non-reentrant model
 11812 ;;
 11813                           
 11814                           
 11815                           ;psect for function _i2c1_driver_sendNACK
 11816  09FB                     _i2c1_driver_sendNACK:	
 11817                           
 11818                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 11819                           
 11820                           ;incstack = 0
 11821                           ; Regs used in _i2c1_driver_sendNACK: []
 11822  09FB  0024               	movlb	4	; select bank4
 11823  09FC  1696               	bsf	22,5	;volatile
 11824                           
 11825                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 11826  09FD  1616               	bsf	22,4	;volatile
 11827  09FE  0008               	return
 11828  09FF                     __end_of_i2c1_driver_sendNACK:	
 11829                           
 11830                           	psect	text47
 11831  0A8C                     __ptext47:	
 11832 ;; *************** function _I2C_Read_Byte *****************
 11833 ;; Defined at:
 11834 ;;		line 115 in file "i2c.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;		None
 11837 ;; Auto vars:     Size  Location     Type
 11838 ;;		None
 11839 ;; Return value:  Size  Location     Type
 11840 ;;                  1    wreg      unsigned char 
 11841 ;; Registers used:
 11842 ;;		wreg, status,2, status,0, pclath, cstack
 11843 ;; Tracked objects:
 11844 ;;		On entry : 0/0
 11845 ;;		On exit  : 0/0
 11846 ;;		Unchanged: 0/0
 11847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;Total ram usage:        0 bytes
 11853 ;; Hardware stack levels used:    1
 11854 ;; Hardware stack levels required when called:    6
 11855 ;; This function calls:
 11856 ;;		_i2c1_driver_getRXData
 11857 ;;		_i2c1_driver_isBufferFull
 11858 ;;		_i2c1_driver_startRX
 11859 ;; This function is called by:
 11860 ;;		_wireReadDataBlock
 11861 ;;		_wireReadDataByte
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function _I2C_Read_Byte
 11867  0A8C                     _I2C_Read_Byte:	
 11868                           
 11869                           ;i2c.c: 117:     i2c1_driver_startRX();
 11870                           
 11871                           ;incstack = 0
 11872                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 11873  0A8C  3189  21BE  318A   	fcall	_i2c1_driver_startRX
 11874  0A8F                     l5561:	
 11875                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11876                           
 11877                           
 11878                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11879  0A8F  318A  223A  318A   	fcall	_i2c1_driver_isBufferFull
 11880  0A92  1C03               	btfss	3,0
 11881  0A93  2A8F               	goto	l5561
 11882                           
 11883                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 11884  0A94  3189  21BB         	fcall	_i2c1_driver_getRXData
 11885  0A96  0008               	return
 11886  0A97                     __end_of_I2C_Read_Byte:	
 11887                           
 11888                           	psect	text48
 11889  09BE                     __ptext48:	
 11890 ;; *************** function _i2c1_driver_startRX *****************
 11891 ;; Defined at:
 11892 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;		None
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;		None
 11897 ;; Return value:  Size  Location     Type
 11898 ;;                  1    wreg      void 
 11899 ;; Registers used:
 11900 ;;		None
 11901 ;; Tracked objects:
 11902 ;;		On entry : 0/0
 11903 ;;		On exit  : 0/0
 11904 ;;		Unchanged: 0/0
 11905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;Total ram usage:        0 bytes
 11911 ;; Hardware stack levels used:    1
 11912 ;; Hardware stack levels required when called:    5
 11913 ;; This function calls:
 11914 ;;		Nothing
 11915 ;; This function is called by:
 11916 ;;		_I2C_Read_Byte
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           
 11921                           ;psect for function _i2c1_driver_startRX
 11922  09BE                     _i2c1_driver_startRX:	
 11923                           
 11924                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 11925                           
 11926                           ;incstack = 0
 11927                           ; Regs used in _i2c1_driver_startRX: []
 11928  09BE  0024               	movlb	4	; select bank4
 11929  09BF  1596               	bsf	22,3	;volatile
 11930  09C0  0008               	return
 11931  09C1                     __end_of_i2c1_driver_startRX:	
 11932                           
 11933                           	psect	text49
 11934  0A3A                     __ptext49:	
 11935 ;; *************** function _i2c1_driver_isBufferFull *****************
 11936 ;; Defined at:
 11937 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;		None
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;		None
 11942 ;; Return value:  Size  Location     Type
 11943 ;;		None               void
 11944 ;; Registers used:
 11945 ;;		wreg, status,2, status,0
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;Total ram usage:        1 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    5
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_I2C_Read_Byte
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           
 11966                           ;psect for function _i2c1_driver_isBufferFull
 11967  0A3A                     _i2c1_driver_isBufferFull:	
 11968                           
 11969                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 11970                           
 11971                           ;incstack = 0
 11972                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 11973  0A3A  0024               	movlb	4	; select bank4
 11974  0A3B  0814               	movf	20,w	;volatile
 11975  0A3C  3901               	andlw	1
 11976  0A3D  0020               	movlb	0	; select bank0
 11977  0A3E  00A0               	movwf	??_i2c1_driver_isBufferFull
 11978  0A3F  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 11979  0A40  0008               	return
 11980  0A41                     __end_of_i2c1_driver_isBufferFull:	
 11981                           
 11982                           	psect	text50
 11983  09BB                     __ptext50:	
 11984 ;; *************** function _i2c1_driver_getRXData *****************
 11985 ;; Defined at:
 11986 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;		None
 11989 ;; Auto vars:     Size  Location     Type
 11990 ;;		None
 11991 ;; Return value:  Size  Location     Type
 11992 ;;                  1    wreg      unsigned char 
 11993 ;; Registers used:
 11994 ;;		wreg
 11995 ;; Tracked objects:
 11996 ;;		On entry : 0/0
 11997 ;;		On exit  : 0/0
 11998 ;;		Unchanged: 0/0
 11999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;Total ram usage:        0 bytes
 12005 ;; Hardware stack levels used:    1
 12006 ;; Hardware stack levels required when called:    5
 12007 ;; This function calls:
 12008 ;;		Nothing
 12009 ;; This function is called by:
 12010 ;;		_I2C_Read_Byte
 12011 ;; This function uses a non-reentrant model
 12012 ;;
 12013                           
 12014                           
 12015                           ;psect for function _i2c1_driver_getRXData
 12016  09BB                     _i2c1_driver_getRXData:	
 12017                           
 12018                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 12022  09BB  0024               	movlb	4	; select bank4
 12023  09BC  0811               	movf	17,w	;volatile
 12024  09BD  0008               	return
 12025  09BE                     __end_of_i2c1_driver_getRXData:	
 12026                           
 12027                           	psect	text51
 12028  09B8                     __ptext51:	
 12029 ;; *************** function _I2C_ReStart *****************
 12030 ;; Defined at:
 12031 ;;		line 43 in file "i2c.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;		None
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;		None
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  1    wreg      void 
 12038 ;; Registers used:
 12039 ;;		status,2, status,0, pclath, cstack
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;Total ram usage:        0 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    6
 12052 ;; This function calls:
 12053 ;;		_i2c1_driver_restart
 12054 ;; This function is called by:
 12055 ;;		_wireReadDataBlock
 12056 ;;		_wireReadDataByte
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           
 12061                           ;psect for function _I2C_ReStart
 12062  09B8                     _I2C_ReStart:	
 12063                           
 12064                           ;i2c.c: 45:  i2c1_driver_restart();
 12065                           
 12066                           ;incstack = 0
 12067                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 12068  09B8  3189  21B5         	fcall	_i2c1_driver_restart
 12069  09BA  0008               	return
 12070  09BB                     __end_of_I2C_ReStart:	
 12071                           
 12072                           	psect	text52
 12073  09B5                     __ptext52:	
 12074 ;; *************** function _i2c1_driver_restart *****************
 12075 ;; Defined at:
 12076 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;		None
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;		None
 12081 ;; Return value:  Size  Location     Type
 12082 ;;                  1    wreg      void 
 12083 ;; Registers used:
 12084 ;;		None
 12085 ;; Tracked objects:
 12086 ;;		On entry : 0/0
 12087 ;;		On exit  : 0/0
 12088 ;;		Unchanged: 0/0
 12089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;Total ram usage:        0 bytes
 12095 ;; Hardware stack levels used:    1
 12096 ;; Hardware stack levels required when called:    5
 12097 ;; This function calls:
 12098 ;;		Nothing
 12099 ;; This function is called by:
 12100 ;;		_I2C_ReStart
 12101 ;; This function uses a non-reentrant model
 12102 ;;
 12103                           
 12104                           
 12105                           ;psect for function _i2c1_driver_restart
 12106  09B5                     _i2c1_driver_restart:	
 12107                           
 12108                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12109                           
 12110                           ;incstack = 0
 12111                           ; Regs used in _i2c1_driver_restart: []
 12112  09B5  0024               	movlb	4	; select bank4
 12113  09B6  1496               	bsf	22,1	;volatile
 12114  09B7  0008               	return
 12115  09B8                     __end_of_i2c1_driver_restart:	
 12116                           
 12117                           	psect	text53
 12118  0B25                     __ptext53:	
 12119 ;; *************** function _SYSTEM_Initialize *****************
 12120 ;; Defined at:
 12121 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;		None
 12124 ;; Auto vars:     Size  Location     Type
 12125 ;;		None
 12126 ;; Return value:  Size  Location     Type
 12127 ;;                  1    wreg      void 
 12128 ;; Registers used:
 12129 ;;		wreg, status,2, status,0, pclath, cstack
 12130 ;; Tracked objects:
 12131 ;;		On entry : 0/0
 12132 ;;		On exit  : 0/0
 12133 ;;		Unchanged: 0/0
 12134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;Total ram usage:        0 bytes
 12140 ;; Hardware stack levels used:    1
 12141 ;; Hardware stack levels required when called:    6
 12142 ;; This function calls:
 12143 ;;		_ADC_Initialize
 12144 ;;		_OSCILLATOR_Initialize
 12145 ;;		_PIN_MANAGER_Initialize
 12146 ;;		_PMD_Initialize
 12147 ;;		_PWM1_Initialize
 12148 ;;		_SPI2_Initialize
 12149 ;;		_TMR2_Initialize
 12150 ;;		_WDT_Initialize
 12151 ;; This function is called by:
 12152 ;;		_main
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           
 12157                           ;psect for function _SYSTEM_Initialize
 12158  0B25                     _SYSTEM_Initialize:	
 12159                           
 12160                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 12161                           
 12162                           ;incstack = 0
 12163                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12164  0B25  318A  2261  318B   	fcall	_PMD_Initialize
 12165                           
 12166                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 12167  0B28  318E  265B  318B   	fcall	_PIN_MANAGER_Initialize
 12168                           
 12169                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 12170  0B2B  318A  2259  318B   	fcall	_OSCILLATOR_Initialize
 12171                           
 12172                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 12173  0B2E  3189  21F7  318B   	fcall	_WDT_Initialize
 12174                           
 12175                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 12176  0B31  318A  2233  318B   	fcall	_SPI2_Initialize
 12177                           
 12178                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 12179  0B34  318A  2297  318B   	fcall	_PWM1_Initialize
 12180                           
 12181                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 12182  0B37  318A  2251  318B   	fcall	_ADC_Initialize
 12183                           
 12184                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 12185  0B3A  318A  2269         	fcall	_TMR2_Initialize
 12186  0B3C  0008               	return
 12187  0B3D                     __end_of_SYSTEM_Initialize:	
 12188                           
 12189                           	psect	text54
 12190  09F7                     __ptext54:	
 12191 ;; *************** function _WDT_Initialize *****************
 12192 ;; Defined at:
 12193 ;;		line 77 in file "mcc_generated_files/mcc.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;		None
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      void 
 12200 ;; Registers used:
 12201 ;;		wreg
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;Total ram usage:        0 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    5
 12214 ;; This function calls:
 12215 ;;		Nothing
 12216 ;; This function is called by:
 12217 ;;		_SYSTEM_Initialize
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           
 12222                           ;psect for function _WDT_Initialize
 12223  09F7                     _WDT_Initialize:	
 12224                           
 12225                           ;mcc_generated_files/mcc.c: 80:     WDTCON = 0x18;
 12226                           
 12227                           ;incstack = 0
 12228                           ; Regs used in _WDT_Initialize: [wreg]
 12229  09F7  3018               	movlw	24
 12230  09F8  0021               	movlb	1	; select bank1
 12231  09F9  0097               	movwf	23	;volatile
 12232  09FA  0008               	return
 12233  09FB                     __end_of_WDT_Initialize:	
 12234                           
 12235                           	psect	text55
 12236  0A69                     __ptext55:	
 12237 ;; *************** function _TMR2_Initialize *****************
 12238 ;; Defined at:
 12239 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;		None
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;		None
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  1    wreg      void 
 12246 ;; Registers used:
 12247 ;;		wreg, status,2
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;Total ram usage:        0 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:    5
 12260 ;; This function calls:
 12261 ;;		Nothing
 12262 ;; This function is called by:
 12263 ;;		_SYSTEM_Initialize
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           
 12268                           ;psect for function _TMR2_Initialize
 12269  0A69                     _TMR2_Initialize:	
 12270                           
 12271                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 12272                           
 12273                           ;incstack = 0
 12274                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12275  0A69  30FF               	movlw	255
 12276  0A6A  0020               	movlb	0	; select bank0
 12277  0A6B  009E               	movwf	30	;volatile
 12278                           
 12279                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 12280  0A6C  019D               	clrf	29	;volatile
 12281                           
 12282                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 12283  0A6D  1091               	bcf	17,1	;volatile
 12284                           
 12285                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 12286  0A6E  3004               	movlw	4
 12287  0A6F  009F               	movwf	31	;volatile
 12288  0A70  0008               	return
 12289  0A71                     __end_of_TMR2_Initialize:	
 12290                           
 12291                           	psect	text56
 12292  0A33                     __ptext56:	
 12293 ;; *************** function _SPI2_Initialize *****************
 12294 ;; Defined at:
 12295 ;;		line 65 in file "mcc_generated_files/spi2.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;		None
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;		None
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  1    wreg      void 
 12302 ;; Registers used:
 12303 ;;		wreg, status,2
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        0 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    5
 12316 ;; This function calls:
 12317 ;;		Nothing
 12318 ;; This function is called by:
 12319 ;;		_SYSTEM_Initialize
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           
 12324                           ;psect for function _SPI2_Initialize
 12325  0A33                     _SPI2_Initialize:	
 12326                           
 12327                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 12328                           
 12329                           ;incstack = 0
 12330                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 12331  0A33  3080               	movlw	128
 12332  0A34  0024               	movlb	4	; select bank4
 12333  0A35  009C               	movwf	28	;volatile
 12334                           
 12335                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 12336  0A36  3031               	movlw	49
 12337  0A37  009D               	movwf	29	;volatile
 12338                           
 12339                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 12340  0A38  019A               	clrf	26	;volatile
 12341  0A39  0008               	return
 12342  0A3A                     __end_of_SPI2_Initialize:	
 12343                           
 12344                           	psect	text57
 12345  0A97                     __ptext57:	
 12346 ;; *************** function _PWM1_Initialize *****************
 12347 ;; Defined at:
 12348 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;		None
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;		None
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      void 
 12355 ;; Registers used:
 12356 ;;		wreg, status,2, status,0
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;Total ram usage:        0 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    5
 12369 ;; This function calls:
 12370 ;;		Nothing
 12371 ;; This function is called by:
 12372 ;;		_SYSTEM_Initialize
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           
 12377                           ;psect for function _PWM1_Initialize
 12378  0A97                     _PWM1_Initialize:	
 12379                           
 12380                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12381                           
 12382                           ;incstack = 0
 12383                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12384  0A97  308F               	movlw	143
 12385  0A98  0025               	movlb	5	; select bank5
 12386  0A99  0093               	movwf	19	;volatile
 12387                           
 12388                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12389  0A9A  3001               	movlw	1
 12390  0A9B  0092               	movwf	18	;volatile
 12391                           
 12392                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0xFF;
 12393  0A9C  30FF               	movlw	255
 12394  0A9D  0091               	movwf	17	;volatile
 12395                           
 12396                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12397  0A9E  081F               	movf	31,w	;volatile
 12398  0A9F  39FC               	andlw	-4
 12399  0AA0  3801               	iorlw	1
 12400  0AA1  009F               	movwf	31	;volatile
 12401  0AA2  0008               	return
 12402  0AA3                     __end_of_PWM1_Initialize:	
 12403                           
 12404                           	psect	text58
 12405  0A61                     __ptext58:	
 12406 ;; *************** function _PMD_Initialize *****************
 12407 ;; Defined at:
 12408 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12409 ;; Parameters:    Size  Location     Type
 12410 ;;		None
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;		None
 12413 ;; Return value:  Size  Location     Type
 12414 ;;                  1    wreg      void 
 12415 ;; Registers used:
 12416 ;;		status,2
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;Total ram usage:        0 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    5
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_SYSTEM_Initialize
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function _PMD_Initialize
 12438  0A61                     _PMD_Initialize:	
 12439                           
 12440                           ;mcc_generated_files/mcc.c: 86:     PMD0 = 0x00;
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _PMD_Initialize: [status,2]
 12444  0A61  0032               	movlb	18	; select bank18
 12445  0A62  0191               	clrf	17	;volatile
 12446                           
 12447                           ;mcc_generated_files/mcc.c: 88:     PMD1 = 0x00;
 12448  0A63  0192               	clrf	18	;volatile
 12449                           
 12450                           ;mcc_generated_files/mcc.c: 90:     PMD2 = 0x00;
 12451  0A64  0193               	clrf	19	;volatile
 12452                           
 12453                           ;mcc_generated_files/mcc.c: 92:     PMD3 = 0x00;
 12454  0A65  0194               	clrf	20	;volatile
 12455                           
 12456                           ;mcc_generated_files/mcc.c: 94:     PMD4 = 0x00;
 12457  0A66  0195               	clrf	21	;volatile
 12458                           
 12459                           ;mcc_generated_files/mcc.c: 96:     PMD5 = 0x00;
 12460  0A67  0196               	clrf	22	;volatile
 12461  0A68  0008               	return
 12462  0A69                     __end_of_PMD_Initialize:	
 12463                           
 12464                           	psect	text59
 12465  0E5B                     __ptext59:	
 12466 ;; *************** function _PIN_MANAGER_Initialize *****************
 12467 ;; Defined at:
 12468 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;		None
 12471 ;; Auto vars:     Size  Location     Type
 12472 ;;		None
 12473 ;; Return value:  Size  Location     Type
 12474 ;;                  1    wreg      void 
 12475 ;; Registers used:
 12476 ;;		wreg, status,2
 12477 ;; Tracked objects:
 12478 ;;		On entry : 0/0
 12479 ;;		On exit  : 0/0
 12480 ;;		Unchanged: 0/0
 12481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;Total ram usage:        0 bytes
 12487 ;; Hardware stack levels used:    1
 12488 ;; Hardware stack levels required when called:    5
 12489 ;; This function calls:
 12490 ;;		Nothing
 12491 ;; This function is called by:
 12492 ;;		_SYSTEM_Initialize
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           
 12497                           ;psect for function _PIN_MANAGER_Initialize
 12498  0E5B                     _PIN_MANAGER_Initialize:	
 12499                           
 12500                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 12501                           
 12502                           ;incstack = 0
 12503                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12504  0E5B  0022               	movlb	2	; select bank2
 12505  0E5C  018C               	clrf	12	;volatile
 12506                           
 12507                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 12508  0E5D  018D               	clrf	13	;volatile
 12509                           
 12510                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 12511  0E5E  018E               	clrf	14	;volatile
 12512                           
 12513                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 12514  0E5F  3037               	movlw	55
 12515  0E60  0021               	movlb	1	; select bank1
 12516  0E61  008C               	movwf	12	;volatile
 12517                           
 12518                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 12519  0E62  30B0               	movlw	176
 12520  0E63  008D               	movwf	13	;volatile
 12521                           
 12522                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x79;
 12523  0E64  3079               	movlw	121
 12524  0E65  008E               	movwf	14	;volatile
 12525                           
 12526                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xF5;
 12527  0E66  30F5               	movlw	245
 12528  0E67  0023               	movlb	3	; select bank3
 12529  0E68  008E               	movwf	14	;volatile
 12530                           
 12531                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 12532  0E69  018D               	clrf	13	;volatile
 12533                           
 12534                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 12535  0E6A  3011               	movlw	17
 12536  0E6B  008C               	movwf	12	;volatile
 12537                           
 12538                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 12539  0E6C  0024               	movlb	4	; select bank4
 12540  0E6D  018D               	clrf	13	;volatile
 12541                           
 12542                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 12543  0E6E  018C               	clrf	12	;volatile
 12544                           
 12545                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 12546  0E6F  018E               	clrf	14	;volatile
 12547                           
 12548                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 12549  0E70  0025               	movlb	5	; select bank5
 12550  0E71  018C               	clrf	12	;volatile
 12551                           
 12552                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 12553  0E72  018D               	clrf	13	;volatile
 12554                           
 12555                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 12556  0E73  018E               	clrf	14	;volatile
 12557                           
 12558                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 12559  0E74  3037               	movlw	55
 12560  0E75  0026               	movlb	6	; select bank6
 12561  0E76  008C               	movwf	12	;volatile
 12562                           
 12563                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 12564  0E77  30F0               	movlw	240
 12565  0E78  008D               	movwf	13	;volatile
 12566                           
 12567                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 12568  0E79  30FF               	movlw	255
 12569  0E7A  008E               	movwf	14	;volatile
 12570                           
 12571                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 12572  0E7B  0021               	movlb	1	; select bank1
 12573  0E7C  1610               	bsf	16,4	;volatile
 12574                           
 12575                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 12576  0E7D  300C               	movlw	12
 12577  0E7E  003C               	movlb	28	; select bank28
 12578  0E7F  009E               	movwf	30	;volatile
 12579                           
 12580                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 12581  0E80  300F               	movlw	15
 12582  0E81  00A0               	movwf	32	;volatile
 12583                           
 12584                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 12585  0E82  301A               	movlw	26
 12586  0E83  003D               	movlb	29	; select bank29
 12587  0E84  009E               	movwf	30	;volatile
 12588                           
 12589                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 12590  0E85  3018               	movlw	24
 12591  0E86  009F               	movwf	31	;volatile
 12592                           
 12593                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 12594  0E87  3019               	movlw	25
 12595  0E88  009D               	movwf	29	;volatile
 12596                           
 12597                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 12598  0E89  301B               	movlw	27
 12599  0E8A  00A2               	movwf	34	;volatile
 12600                           
 12601                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 12602  0E8B  300D               	movlw	13
 12603  0E8C  003C               	movlb	28	; select bank28
 12604  0E8D  00A1               	movwf	33	;volatile
 12605                           
 12606                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 12607  0E8E  300E               	movlw	14
 12608  0E8F  009D               	movwf	29	;volatile
 12609  0E90  0008               	return
 12610  0E91                     __end_of_PIN_MANAGER_Initialize:	
 12611                           
 12612                           	psect	text60
 12613  0A59                     __ptext60:	
 12614 ;; *************** function _OSCILLATOR_Initialize *****************
 12615 ;; Defined at:
 12616 ;;		line 63 in file "mcc_generated_files/mcc.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;		None
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;		None
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      void 
 12623 ;; Registers used:
 12624 ;;		wreg, status,2
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;Total ram usage:        0 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    5
 12637 ;; This function calls:
 12638 ;;		Nothing
 12639 ;; This function is called by:
 12640 ;;		_SYSTEM_Initialize
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           
 12645                           ;psect for function _OSCILLATOR_Initialize
 12646  0A59                     _OSCILLATOR_Initialize:	
 12647                           
 12648                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x61;
 12649                           
 12650                           ;incstack = 0
 12651                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12652  0A59  3061               	movlw	97
 12653  0A5A  0032               	movlb	18	; select bank18
 12654  0A5B  0099               	movwf	25	;volatile
 12655                           
 12656                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 12657  0A5C  019B               	clrf	27	;volatile
 12658                           
 12659                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 12660  0A5D  019D               	clrf	29	;volatile
 12661                           
 12662                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x00;
 12663  0A5E  019F               	clrf	31	;volatile
 12664                           
 12665                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 12666  0A5F  019E               	clrf	30	;volatile
 12667  0A60  0008               	return
 12668  0A61                     __end_of_OSCILLATOR_Initialize:	
 12669                           
 12670                           	psect	text61
 12671  0A51                     __ptext61:	
 12672 ;; *************** function _ADC_Initialize *****************
 12673 ;; Defined at:
 12674 ;;		line 65 in file "mcc_generated_files/adc.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;		None
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;		None
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  1    wreg      void 
 12681 ;; Registers used:
 12682 ;;		wreg, status,2
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;Total ram usage:        0 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:    5
 12695 ;; This function calls:
 12696 ;;		Nothing
 12697 ;; This function is called by:
 12698 ;;		_SYSTEM_Initialize
 12699 ;; This function uses a non-reentrant model
 12700 ;;
 12701                           
 12702                           
 12703                           ;psect for function _ADC_Initialize
 12704  0A51                     _ADC_Initialize:	
 12705                           
 12706                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 12707                           
 12708                           ;incstack = 0
 12709                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12710  0A51  3001               	movlw	1
 12711  0A52  0021               	movlb	1	; select bank1
 12712  0A53  009D               	movwf	29	;volatile
 12713                           
 12714                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 12715  0A54  019E               	clrf	30	;volatile
 12716                           
 12717                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 12718  0A55  019F               	clrf	31	;volatile
 12719                           
 12720                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 12721  0A56  019B               	clrf	27	;volatile
 12722                           
 12723                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 12724  0A57  019C               	clrf	28	;volatile
 12725  0A58  0008               	return
 12726  0A59                     __end_of_ADC_Initialize:	
 12727                           
 12728                           	psect	intentry
 12729  0004                     __pintentry:	
 12730 ;; *************** function _INTERRUPT_InterruptManager *****************
 12731 ;; Defined at:
 12732 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;		None
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;		None
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  1    wreg      void 
 12739 ;; Registers used:
 12740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;Total ram usage:        0 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    4
 12753 ;; This function calls:
 12754 ;;		Absolute function
 12755 ;;		_PIN_MANAGER_IOC
 12756 ;;		_i2c_ISR
 12757 ;;		_i2c_busCollisionISR
 12758 ;; This function is called by:
 12759 ;;		Interrupt level 1
 12760 ;; This function uses a non-reentrant model
 12761 ;;
 12762                           
 12763  0004                     _INTERRUPT_InterruptManager:	
 12764                           
 12765                           ;incstack = 0
 12766  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12767                           
 12768                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12769  0005  3180               	pagesel	$
 12770                           
 12771                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 12772  0006  0021               	movlb	1	; select bank1
 12773  0007  1E10               	btfss	16,4	;volatile
 12774  0008  2810               	goto	i1l245
 12775  0009  0020               	movlb	0	; select bank0
 12776  000A  1E10               	btfss	16,4	;volatile
 12777  000B  2810               	goto	i1l245
 12778                           
 12779                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 12780  000C  3189  2198  3180   	fcall	_PIN_MANAGER_IOC
 12781                           
 12782                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 12783  000F  2829               	goto	i1l253
 12784  0010                     i1l245:	
 12785                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 12786                           
 12787  0010  1F0B               	btfss	11,6	;volatile
 12788  0011  2829               	goto	i1l253
 12789                           
 12790                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 12791  0012  0021               	movlb	1	; select bank1
 12792  0013  1D11               	btfss	17,2	;volatile
 12793  0014  281E               	goto	i1l248
 12794  0015  0020               	movlb	0	; select bank0
 12795  0016  1D11               	btfss	17,2	;volatile
 12796  0017  281E               	goto	i1l248
 12797                           
 12798                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 12799  0018  086D               	movf	_i2c1_driver_busCollisionISR+1,w
 12800  0019  008A               	movwf	10
 12801  001A  086C               	movf	_i2c1_driver_busCollisionISR,w
 12802  001B  000A               	callw
 12803  001C  3180               	pagesel	$
 12804                           
 12805                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 12806  001D  2829               	goto	i1l253
 12807  001E                     i1l248:	
 12808                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 12809                           
 12810  001E  0021               	movlb	1	; select bank1
 12811  001F  1D91               	btfss	17,3	;volatile
 12812  0020  2829               	goto	i1l253
 12813  0021  0020               	movlb	0	; select bank0
 12814  0022  1D91               	btfss	17,3	;volatile
 12815  0023  2829               	goto	i1l253
 12816                           
 12817                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 12818  0024  086B               	movf	_i2c1_driver_i2cISR+1,w
 12819  0025  008A               	movwf	10
 12820  0026  086A               	movf	_i2c1_driver_i2cISR,w
 12821  0027  000A               	callw
 12822  0028  3180               	pagesel	$
 12823  0029                     i1l253:	
 12824                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 12825                           
 12826                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 12827                           
 12828  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12829  002A  0009               	retfie
 12830  002B                     __end_of_INTERRUPT_InterruptManager:	
 12831                           
 12832                           	psect	text63
 12833  09B2                     __ptext63:	
 12834 ;; *************** function _i2c_busCollisionISR *****************
 12835 ;; Defined at:
 12836 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;		None
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;		None
 12841 ;; Return value:  Size  Location     Type
 12842 ;;                  1    wreg      void 
 12843 ;; Registers used:
 12844 ;;		status,2, status,0, pclath, cstack
 12845 ;; Tracked objects:
 12846 ;;		On entry : 0/0
 12847 ;;		On exit  : 0/0
 12848 ;;		Unchanged: 0/0
 12849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;Total ram usage:        0 bytes
 12855 ;; Hardware stack levels used:    1
 12856 ;; Hardware stack levels required when called:    1
 12857 ;; This function calls:
 12858 ;;		_i2c1_driver_clearBusCollision
 12859 ;; This function is called by:
 12860 ;;		_i2c_open
 12861 ;;		_INTERRUPT_InterruptManager
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           
 12866                           ;psect for function _i2c_busCollisionISR
 12867  09B2                     _i2c_busCollisionISR:	
 12868                           
 12869                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 12870                           
 12871                           ;incstack = 0
 12872                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 12873  09B2  3189  21AF         	fcall	_i2c1_driver_clearBusCollision
 12874  09B4  0008               	return
 12875  09B5                     __end_of_i2c_busCollisionISR:	
 12876                           
 12877                           	psect	text64
 12878  09AF                     __ptext64:	
 12879 ;; *************** function _i2c1_driver_clearBusCollision *****************
 12880 ;; Defined at:
 12881 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 12882 ;; Parameters:    Size  Location     Type
 12883 ;;		None
 12884 ;; Auto vars:     Size  Location     Type
 12885 ;;		None
 12886 ;; Return value:  Size  Location     Type
 12887 ;;                  1    wreg      void 
 12888 ;; Registers used:
 12889 ;;		None
 12890 ;; Tracked objects:
 12891 ;;		On entry : 0/0
 12892 ;;		On exit  : 0/0
 12893 ;;		Unchanged: 0/0
 12894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12899 ;;Total ram usage:        0 bytes
 12900 ;; Hardware stack levels used:    1
 12901 ;; This function calls:
 12902 ;;		Nothing
 12903 ;; This function is called by:
 12904 ;;		_i2c_busCollisionISR
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           
 12909                           ;psect for function _i2c1_driver_clearBusCollision
 12910  09AF                     _i2c1_driver_clearBusCollision:	
 12911                           
 12912                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 12913                           
 12914                           ;incstack = 0
 12915                           ; Regs used in _i2c1_driver_clearBusCollision: []
 12916  09AF  0020               	movlb	0	; select bank0
 12917  09B0  1111               	bcf	17,2	;volatile
 12918  09B1  0008               	return
 12919  09B2                     __end_of_i2c1_driver_clearBusCollision:	
 12920                           
 12921                           	psect	text65
 12922  0C02                     __ptext65:	
 12923 ;; *************** function _i2c_ISR *****************
 12924 ;; Defined at:
 12925 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;		None
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;		None
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  1    wreg      void 
 12932 ;; Registers used:
 12933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12934 ;; Tracked objects:
 12935 ;;		On entry : 0/0
 12936 ;;		On exit  : 0/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        3 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; Hardware stack levels required when called:    3
 12946 ;; This function calls:
 12947 ;;		_do_I2C_DO_ACK
 12948 ;;		_do_I2C_DO_ADDRESS_NACK
 12949 ;;		_do_I2C_DO_NACK_RESTART
 12950 ;;		_do_I2C_DO_NACK_STOP
 12951 ;;		_do_I2C_IDLE
 12952 ;;		_do_I2C_RCEN
 12953 ;;		_do_I2C_RESET
 12954 ;;		_do_I2C_RX
 12955 ;;		_do_I2C_SEND_ADR_READ
 12956 ;;		_do_I2C_SEND_ADR_WRITE
 12957 ;;		_do_I2C_SEND_RESTART
 12958 ;;		_do_I2C_SEND_RESTART_READ
 12959 ;;		_do_I2C_SEND_RESTART_WRITE
 12960 ;;		_do_I2C_SEND_STOP
 12961 ;;		_do_I2C_TX
 12962 ;;		_do_I2C_TX_EMPTY
 12963 ;;		_i2c1_driver_isNACK
 12964 ;;		_mssp1_clearIRQ
 12965 ;; This function is called by:
 12966 ;;		_i2c_open
 12967 ;;		_i2c_poller
 12968 ;;		_INTERRUPT_InterruptManager
 12969 ;; This function uses a non-reentrant model
 12970 ;;
 12971                           
 12972                           
 12973                           ;psect for function _i2c_ISR
 12974  0C02                     _i2c_ISR:	
 12975                           
 12976                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 12977                           
 12978                           ;incstack = 0
 12979                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12980  0C02  3189  21AC  318C   	fcall	_mssp1_clearIRQ
 12981                           
 12982                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 12983  0C05  0023               	movlb	3	; select bank3
 12984  0C06  1DA0               	btfss	_i2c_status^(0+384),3
 12985  0C07  2C12               	goto	i1l4929
 12986  0C08  318A  2241  318C   	fcall	_i2c1_driver_isNACK
 12987  0C0B  1C03               	btfss	3,0
 12988  0C0C  2C12               	goto	i1l4929
 12989                           
 12990                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 12991  0C0D  300F               	movlw	15
 12992  0C0E  00F3               	movwf	??_i2c_ISR
 12993  0C0F  0873               	movf	??_i2c_ISR,w
 12994  0C10  0023               	movlb	3	; select bank3
 12995  0C11  00A9               	movwf	(_i2c_status^(0+384)+9)
 12996  0C12                     i1l4929:	
 12997                           
 12998                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 12999  0C12  0023               	movlb	3	; select bank3
 13000  0C13  0829               	movf	(_i2c_status^(0+384)+9),w
 13001  0C14  00F3               	movwf	??_i2c_ISR
 13002  0C15  01F4               	clrf	??_i2c_ISR+1
 13003  0C16  35F3               	lslf	??_i2c_ISR,f
 13004  0C17  0DF4               	rlf	??_i2c_ISR+1,f
 13005  0C18  3000               	movlw	low (_fsmStateTable| (0+32768))
 13006  0C19  0773               	addwf	??_i2c_ISR,w
 13007  0C1A  0084               	movwf	4
 13008  0C1B  3090               	movlw	high (_fsmStateTable| (0+32768))
 13009  0C1C  3D74               	addwfc	??_i2c_ISR+1,w
 13010  0C1D  0085               	movwf	5
 13011  0C1E  3F01               	moviw [1]fsr0
 13012  0C1F  008A               	movwf	10
 13013  0C20  3F00               	moviw [0]fsr0
 13014  0C21  000A               	callw
 13015  0C22  318C               	pagesel	$
 13016  0C23  00F5               	movwf	??_i2c_ISR+2
 13017  0C24  0875               	movf	??_i2c_ISR+2,w
 13018  0C25  0023               	movlb	3	; select bank3
 13019  0C26  00A9               	movwf	(_i2c_status^(0+384)+9)
 13020  0C27  0008               	return
 13021  0C28                     __end_of_i2c_ISR:	
 13022                           
 13023                           	psect	text66
 13024  09AC                     __ptext66:	
 13025 ;; *************** function _mssp1_clearIRQ *****************
 13026 ;; Defined at:
 13027 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 13028 ;; Parameters:    Size  Location     Type
 13029 ;;		None
 13030 ;; Auto vars:     Size  Location     Type
 13031 ;;		None
 13032 ;; Return value:  Size  Location     Type
 13033 ;;                  1    wreg      void 
 13034 ;; Registers used:
 13035 ;;		None
 13036 ;; Tracked objects:
 13037 ;;		On entry : 0/0
 13038 ;;		On exit  : 0/0
 13039 ;;		Unchanged: 0/0
 13040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;Total ram usage:        0 bytes
 13046 ;; Hardware stack levels used:    1
 13047 ;; This function calls:
 13048 ;;		Nothing
 13049 ;; This function is called by:
 13050 ;;		_i2c_ISR
 13051 ;;		_i2c_open
 13052 ;;		_i2c_close
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _mssp1_clearIRQ
 13058  09AC                     _mssp1_clearIRQ:	
 13059                           
 13060                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _mssp1_clearIRQ: []
 13064  09AC  0020               	movlb	0	; select bank0
 13065  09AD  1191               	bcf	17,3	;volatile
 13066  09AE  0008               	return
 13067  09AF                     __end_of_mssp1_clearIRQ:	
 13068                           
 13069                           	psect	text67
 13070  0ED2                     __ptext67:	
 13071 ;; *************** function _do_I2C_RX *****************
 13072 ;; Defined at:
 13073 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;		None
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;		None
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      enum E7120
 13080 ;; Registers used:
 13081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;Total ram usage:        3 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    2
 13094 ;; This function calls:
 13095 ;;		_do_I2C_DO_NACK_RESTART
 13096 ;;		_do_I2C_DO_NACK_STOP
 13097 ;;		_i2c1_driver_sendACK
 13098 ;;		_returnReset
 13099 ;;		_returnStop
 13100 ;;		i1_i2c1_driver_getRXData
 13101 ;; This function is called by:
 13102 ;;		_i2c_ISR
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           
 13107                           ;psect for function _do_I2C_RX
 13108  0ED2                     _do_I2C_RX:	
 13109                           
 13110                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 13111                           
 13112                           ;incstack = 0
 13113                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13114  0ED2  3189  21A6  318E   	fcall	i1_i2c1_driver_getRXData
 13115  0ED5  00F0               	movwf	??_do_I2C_RX
 13116  0ED6  0023               	movlb	3	; select bank3
 13117  0ED7  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 13118  0ED8  0086               	movwf	6
 13119  0ED9  0187               	clrf	7
 13120  0EDA  0870               	movf	??_do_I2C_RX,w
 13121  0EDB  0081               	movwf	1
 13122  0EDC  3001               	movlw	1
 13123  0EDD  00F0               	movwf	??_do_I2C_RX
 13124  0EDE  0870               	movf	??_do_I2C_RX,w
 13125  0EDF  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 13126                           
 13127                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13128  0EE0  3001               	movlw	1
 13129  0EE1  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13130  0EE2  3000               	movlw	0
 13131  0EE3  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13132  0EE4  0823               	movf	(_i2c_status^(0+384)+3),w
 13133  0EE5  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13134  0EE6  1903               	btfsc	3,2
 13135  0EE7  2EEC               	goto	i1l173
 13136                           
 13137                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 13138  0EE8  3189  21D3         	fcall	_i2c1_driver_sendACK
 13139                           
 13140                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13141  0EEA  3005               	movlw	5
 13142  0EEB  0008               	return
 13143  0EEC                     i1l173:	
 13144                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13145                           
 13146                           
 13147                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13148  0EEC  1520               	bsf	_i2c_status^(0+384),2
 13149                           
 13150                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13151  0EED  2EF4               	goto	i1l4461
 13152  0EEE                     i1l4451:	
 13153                           
 13154                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13155  0EEE  3189  21F3         	fcall	_do_I2C_DO_NACK_RESTART
 13156  0EF0  0008               	return
 13157  0EF1                     i1l4455:	
 13158                           
 13159                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13160  0EF1  3189  21EF         	fcall	_do_I2C_DO_NACK_STOP
 13161  0EF3  0008               	return
 13162  0EF4                     i1l4461:	
 13163  0EF4  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 13164  0EF5  00F0               	movwf	??_do_I2C_RX
 13165  0EF6  0870               	movf	??_do_I2C_RX,w
 13166  0EF7  00F0               	movwf	returnReset@p
 13167  0EF8  300B               	movlw	11
 13168  0EF9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13169  0EFA  0086               	movwf	6
 13170  0EFB  3001               	movlw	1	; select bank3/4
 13171  0EFC  0087               	movwf	7
 13172  0EFD  3F41               	moviw [1]fsr1
 13173  0EFE  008A               	movwf	10
 13174  0EFF  3F40               	moviw [0]fsr1
 13175  0F00  000A               	callw
 13176  0F01  318E               	pagesel	$
 13177  0F02  00F1               	movwf	??_do_I2C_RX+1
 13178  0F03  01F2               	clrf	??_do_I2C_RX+2
 13179                           
 13180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13181                           ; Switch size 1, requested type "simple"
 13182                           ; Number of cases is 1, Range of values is 0 to 0
 13183                           ; switch strategies available:
 13184                           ; Name         Instructions Cycles
 13185                           ; simple_byte            4     3 (average)
 13186                           ; direct_byte            8     6 (fixed)
 13187                           ; jumptable            260     6 (fixed)
 13188                           ;	Chosen strategy is simple_byte
 13189  0F04  0872               	movf	??_do_I2C_RX+2,w
 13190  0F05  3A00               	xorlw	0	; case 0
 13191  0F06  1903               	skipnz
 13192  0F07  2F09               	goto	i1l6991
 13193  0F08  2EF1               	goto	i1l4455
 13194  0F09                     i1l6991:	
 13195                           
 13196                           ; Switch size 1, requested type "simple"
 13197                           ; Number of cases is 4, Range of values is 1 to 4
 13198                           ; switch strategies available:
 13199                           ; Name         Instructions Cycles
 13200                           ; simple_byte           13     7 (average)
 13201                           ; direct_byte           17     9 (fixed)
 13202                           ; jumptable            263     9 (fixed)
 13203                           ;	Chosen strategy is simple_byte
 13204  0F09  0871               	movf	??_do_I2C_RX+1,w
 13205  0F0A  3A01               	xorlw	1	; case 1
 13206  0F0B  1903               	skipnz
 13207  0F0C  2EF1               	goto	i1l4455
 13208  0F0D  3A03               	xorlw	3	; case 2
 13209  0F0E  1903               	skipnz
 13210  0F0F  2EEE               	goto	i1l4451
 13211  0F10  3A01               	xorlw	1	; case 3
 13212  0F11  1903               	skipnz
 13213  0F12  2EEE               	goto	i1l4451
 13214  0F13  3A07               	xorlw	7	; case 4
 13215  0F14  1903               	skipnz
 13216  0F15  2EF1               	goto	i1l4455
 13217  0F16  2EF1               	goto	i1l4455
 13218  0F17  0008               	return
 13219  0F18                     __end_of_do_I2C_RX:	
 13220                           
 13221                           	psect	text68
 13222  0F62                     __ptext68:	
 13223 ;; *************** function _do_I2C_TX *****************
 13224 ;; Defined at:
 13225 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13226 ;; Parameters:    Size  Location     Type
 13227 ;;		None
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;		None
 13230 ;; Return value:  Size  Location     Type
 13231 ;;                  1    wreg      enum E7120
 13232 ;; Registers used:
 13233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;Total ram usage:        3 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; Hardware stack levels required when called:    2
 13246 ;; This function calls:
 13247 ;;		_do_I2C_SEND_RESTART_READ
 13248 ;;		_do_I2C_SEND_RESTART_WRITE
 13249 ;;		_do_I2C_SEND_STOP
 13250 ;;		_i2c1_driver_isNACK
 13251 ;;		_returnReset
 13252 ;;		_returnStop
 13253 ;;		i1_i2c1_driver_TXData
 13254 ;; This function is called by:
 13255 ;;		_i2c_ISR
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           
 13260                           ;psect for function _do_I2C_TX
 13261  0F62                     _do_I2C_TX:	
 13262                           
 13263                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 13264                           
 13265                           ;incstack = 0
 13266                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13267  0F62  318A  2241  318F   	fcall	_i2c1_driver_isNACK
 13268  0F65  1803               	btfsc	3,0
 13269  0F66  2F71               	goto	i1l4421
 13270  0F67  2F95               	goto	i1l157
 13271  0F68                     i1l4407:	
 13272                           
 13273                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 13274  0F68  3189  21DB         	fcall	_do_I2C_SEND_RESTART_READ
 13275  0F6A  0008               	return
 13276  0F6B                     i1l4411:	
 13277                           
 13278                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 13279  0F6B  3189  21DF         	fcall	_do_I2C_SEND_RESTART_WRITE
 13280  0F6D  0008               	return
 13281  0F6E                     i1l4415:	
 13282                           
 13283                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 13284  0F6E  3189  21E7         	fcall	_do_I2C_SEND_STOP
 13285  0F70  0008               	return
 13286  0F71                     i1l4421:	
 13287  0F71  0023               	movlb	3	; select bank3
 13288  0F72  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 13289  0F73  00F0               	movwf	??_do_I2C_TX
 13290  0F74  0870               	movf	??_do_I2C_TX,w
 13291  0F75  00F0               	movwf	returnReset@p
 13292  0F76  3011               	movlw	17
 13293  0F77  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13294  0F78  0086               	movwf	6
 13295  0F79  3001               	movlw	1	; select bank3/4
 13296  0F7A  0087               	movwf	7
 13297  0F7B  3F41               	moviw [1]fsr1
 13298  0F7C  008A               	movwf	10
 13299  0F7D  3F40               	moviw [0]fsr1
 13300  0F7E  000A               	callw
 13301  0F7F  318F               	pagesel	$
 13302  0F80  00F1               	movwf	??_do_I2C_TX+1
 13303  0F81  01F2               	clrf	??_do_I2C_TX+2
 13304                           
 13305                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13306                           ; Switch size 1, requested type "simple"
 13307                           ; Number of cases is 1, Range of values is 0 to 0
 13308                           ; switch strategies available:
 13309                           ; Name         Instructions Cycles
 13310                           ; simple_byte            4     3 (average)
 13311                           ; direct_byte            8     6 (fixed)
 13312                           ; jumptable            260     6 (fixed)
 13313                           ;	Chosen strategy is simple_byte
 13314  0F82  0872               	movf	??_do_I2C_TX+2,w
 13315  0F83  3A00               	xorlw	0	; case 0
 13316  0F84  1903               	skipnz
 13317  0F85  2F87               	goto	i1l6993
 13318  0F86  2F6E               	goto	i1l4415
 13319  0F87                     i1l6993:	
 13320                           
 13321                           ; Switch size 1, requested type "simple"
 13322                           ; Number of cases is 4, Range of values is 1 to 4
 13323                           ; switch strategies available:
 13324                           ; Name         Instructions Cycles
 13325                           ; simple_byte           13     7 (average)
 13326                           ; direct_byte           17     9 (fixed)
 13327                           ; jumptable            263     9 (fixed)
 13328                           ;	Chosen strategy is simple_byte
 13329  0F87  0871               	movf	??_do_I2C_TX+1,w
 13330  0F88  3A01               	xorlw	1	; case 1
 13331  0F89  1903               	skipnz
 13332  0F8A  2F6E               	goto	i1l4415
 13333  0F8B  3A03               	xorlw	3	; case 2
 13334  0F8C  1903               	skipnz
 13335  0F8D  2F68               	goto	i1l4407
 13336  0F8E  3A01               	xorlw	1	; case 3
 13337  0F8F  1903               	skipnz
 13338  0F90  2F6B               	goto	i1l4411
 13339  0F91  3A07               	xorlw	7	; case 4
 13340  0F92  1903               	skipnz
 13341  0F93  2F6E               	goto	i1l4415
 13342  0F94  2F6E               	goto	i1l4415
 13343  0F95                     i1l157:	
 13344                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 13345                           
 13346                           
 13347                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 13348  0F95  0023               	movlb	3	; select bank3
 13349  0F96  11A0               	bcf	_i2c_status^(0+384),3
 13350                           
 13351                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 13352  0F97  3002               	movlw	2
 13353  0F98  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13354  0F99  0086               	movwf	6
 13355  0F9A  3001               	movlw	1	; select bank3/4
 13356  0F9B  0087               	movwf	7
 13357  0F9C  3F40               	moviw [0]fsr1
 13358  0F9D  0084               	movwf	4
 13359  0F9E  0185               	clrf	5
 13360  0F9F  0A81               	incf	1,f
 13361  0FA0  0800               	movf	0,w
 13362  0FA1  318A  2203  318F   	fcall	i1_i2c1_driver_TXData
 13363                           
 13364                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 13365  0FA4  3001               	movlw	1
 13366  0FA5  0023               	movlb	3	; select bank3
 13367  0FA6  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13368  0FA7  3000               	movlw	0
 13369  0FA8  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13370  0FA9  0823               	movf	(_i2c_status^(0+384)+3),w
 13371  0FAA  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13372  0FAB  1D03               	btfss	3,2
 13373  0FAC  2FAF               	goto	i1l4429
 13374  0FAD  3006               	movlw	6
 13375  0FAE  0008               	return
 13376  0FAF                     i1l4429:	
 13377  0FAF  3003               	movlw	3
 13378  0FB0  0008               	return
 13379  0FB1                     __end_of_do_I2C_TX:	
 13380                           
 13381                           	psect	text69
 13382  0D3E                     __ptext69:	
 13383 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 13384 ;; Defined at:
 13385 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;		None
 13388 ;; Auto vars:     Size  Location     Type
 13389 ;;		None
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      enum E7120
 13392 ;; Registers used:
 13393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;Total ram usage:        3 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:    2
 13406 ;; This function calls:
 13407 ;;		_do_I2C_SEND_RESTART
 13408 ;;		_do_I2C_SEND_STOP
 13409 ;;		_returnReset
 13410 ;;		_returnStop
 13411 ;; This function is called by:
 13412 ;;		_i2c_ISR
 13413 ;; This function uses a non-reentrant model
 13414 ;;
 13415                           
 13416                           
 13417                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 13418  0D3E                     _do_I2C_DO_ADDRESS_NACK:	
 13419                           
 13420                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 13421                           
 13422                           ;incstack = 0
 13423                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13424  0D3E  0023               	movlb	3	; select bank3
 13425  0D3F  11A0               	bcf	_i2c_status^(0+384),3
 13426                           
 13427                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 13428  0D40  3002               	movlw	2
 13429  0D41  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 13430  0D42  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 13431  0D43  00AA               	movwf	(_i2c_status^(0+384)+10)
 13432                           
 13433                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 13434  0D44  2D4B               	goto	i1l4395
 13435  0D45                     i1l4385:	
 13436                           
 13437                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 13438  0D45  3189  21E3         	fcall	_do_I2C_SEND_RESTART
 13439  0D47  0008               	return
 13440  0D48                     i1l4389:	
 13441                           
 13442                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 13443  0D48  3189  21E7         	fcall	_do_I2C_SEND_STOP
 13444  0D4A  0008               	return
 13445  0D4B                     i1l4395:	
 13446  0D4B  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 13447  0D4C  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 13448  0D4D  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 13449  0D4E  00F0               	movwf	returnReset@p
 13450  0D4F  300F               	movlw	15
 13451  0D50  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13452  0D51  0086               	movwf	6
 13453  0D52  3001               	movlw	1	; select bank3/4
 13454  0D53  0087               	movwf	7
 13455  0D54  3F41               	moviw [1]fsr1
 13456  0D55  008A               	movwf	10
 13457  0D56  3F40               	moviw [0]fsr1
 13458  0D57  000A               	callw
 13459  0D58  318D               	pagesel	$
 13460  0D59  00F1               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 13461  0D5A  01F2               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 13462                           
 13463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13464                           ; Switch size 1, requested type "simple"
 13465                           ; Number of cases is 1, Range of values is 0 to 0
 13466                           ; switch strategies available:
 13467                           ; Name         Instructions Cycles
 13468                           ; simple_byte            4     3 (average)
 13469                           ; direct_byte            8     6 (fixed)
 13470                           ; jumptable            260     6 (fixed)
 13471                           ;	Chosen strategy is simple_byte
 13472  0D5B  0872               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 13473  0D5C  3A00               	xorlw	0	; case 0
 13474  0D5D  1903               	skipnz
 13475  0D5E  2D60               	goto	i1l6995
 13476  0D5F  2D48               	goto	i1l4389
 13477  0D60                     i1l6995:	
 13478                           
 13479                           ; Switch size 1, requested type "simple"
 13480                           ; Number of cases is 2, Range of values is 2 to 3
 13481                           ; switch strategies available:
 13482                           ; Name         Instructions Cycles
 13483                           ; simple_byte            7     4 (average)
 13484                           ; direct_byte           13     9 (fixed)
 13485                           ; jumptable            263     9 (fixed)
 13486                           ;	Chosen strategy is simple_byte
 13487  0D60  0871               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 13488  0D61  3A02               	xorlw	2	; case 2
 13489  0D62  1903               	skipnz
 13490  0D63  2D45               	goto	i1l4385
 13491  0D64  3A01               	xorlw	1	; case 3
 13492  0D65  1903               	skipnz
 13493  0D66  2D45               	goto	i1l4385
 13494  0D67  2D48               	goto	i1l4389
 13495  0D68  0008               	return
 13496  0D69                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 13497                           
 13498                           	psect	text70
 13499  09F3                     __ptext70:	
 13500 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 13501 ;; Defined at:
 13502 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;		None
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;		None
 13507 ;; Return value:  Size  Location     Type
 13508 ;;                  1    wreg      enum E7120
 13509 ;; Registers used:
 13510 ;;		wreg, status,2, status,0, pclath, cstack
 13511 ;; Tracked objects:
 13512 ;;		On entry : 0/0
 13513 ;;		On exit  : 0/0
 13514 ;;		Unchanged: 0/0
 13515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;Total ram usage:        0 bytes
 13521 ;; Hardware stack levels used:    1
 13522 ;; Hardware stack levels required when called:    1
 13523 ;; This function calls:
 13524 ;;		i1_i2c1_driver_sendNACK
 13525 ;; This function is called by:
 13526 ;;		_do_I2C_RX
 13527 ;;		_i2c_ISR
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           
 13532                           ;psect for function _do_I2C_DO_NACK_RESTART
 13533  09F3                     _do_I2C_DO_NACK_RESTART:	
 13534                           
 13535                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 13536                           
 13537                           ;incstack = 0
 13538                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13539  09F3  3189  21D7         	fcall	i1_i2c1_driver_sendNACK
 13540                           
 13541                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 13542  09F5  3009               	movlw	9
 13543  09F6  0008               	return
 13544  09F7                     __end_of_do_I2C_DO_NACK_RESTART:	
 13545                           
 13546                           	psect	text71
 13547  09EF                     __ptext71:	
 13548 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 13549 ;; Defined at:
 13550 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 13551 ;; Parameters:    Size  Location     Type
 13552 ;;		None
 13553 ;; Auto vars:     Size  Location     Type
 13554 ;;		None
 13555 ;; Return value:  Size  Location     Type
 13556 ;;                  1    wreg      enum E7120
 13557 ;; Registers used:
 13558 ;;		wreg, status,2, status,0, pclath, cstack
 13559 ;; Tracked objects:
 13560 ;;		On entry : 0/0
 13561 ;;		On exit  : 0/0
 13562 ;;		Unchanged: 0/0
 13563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;Total ram usage:        0 bytes
 13569 ;; Hardware stack levels used:    1
 13570 ;; Hardware stack levels required when called:    1
 13571 ;; This function calls:
 13572 ;;		i1_i2c1_driver_sendNACK
 13573 ;; This function is called by:
 13574 ;;		_do_I2C_RX
 13575 ;;		_i2c_ISR
 13576 ;; This function uses a non-reentrant model
 13577 ;;
 13578                           
 13579                           
 13580                           ;psect for function _do_I2C_DO_NACK_STOP
 13581  09EF                     _do_I2C_DO_NACK_STOP:	
 13582                           
 13583                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 13584                           
 13585                           ;incstack = 0
 13586                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 13587  09EF  3189  21D7         	fcall	i1_i2c1_driver_sendNACK
 13588                           
 13589                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 13590  09F1  300A               	movlw	10
 13591  09F2  0008               	return
 13592  09F3                     __end_of_do_I2C_DO_NACK_STOP:	
 13593                           
 13594                           	psect	text72
 13595  09EB                     __ptext72:	
 13596 ;; *************** function _do_I2C_DO_ACK *****************
 13597 ;; Defined at:
 13598 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;		None
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;		None
 13603 ;; Return value:  Size  Location     Type
 13604 ;;                  1    wreg      enum E7120
 13605 ;; Registers used:
 13606 ;;		wreg, status,2, status,0, pclath, cstack
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;Total ram usage:        0 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    1
 13619 ;; This function calls:
 13620 ;;		_i2c1_driver_sendACK
 13621 ;; This function is called by:
 13622 ;;		_i2c_ISR
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function _do_I2C_DO_ACK
 13628  09EB                     _do_I2C_DO_ACK:	
 13629                           
 13630                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 13631                           
 13632                           ;incstack = 0
 13633                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 13634  09EB  3189  21D3         	fcall	_i2c1_driver_sendACK
 13635                           
 13636                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 13637  09ED  3005               	movlw	5
 13638  09EE  0008               	return
 13639  09EF                     __end_of_do_I2C_DO_ACK:	
 13640                           
 13641                           	psect	text73
 13642  0A0D                     __ptext73:	
 13643 ;; *************** function _do_I2C_RCEN *****************
 13644 ;; Defined at:
 13645 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;		None
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;                  1    wreg      enum E7120
 13652 ;; Registers used:
 13653 ;;		wreg, status,2, status,0, pclath, cstack
 13654 ;; Tracked objects:
 13655 ;;		On entry : 0/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;Total ram usage:        0 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    1
 13666 ;; This function calls:
 13667 ;;		i1_i2c1_driver_startRX
 13668 ;; This function is called by:
 13669 ;;		_i2c_ISR
 13670 ;; This function uses a non-reentrant model
 13671 ;;
 13672                           
 13673                           
 13674                           ;psect for function _do_I2C_RCEN
 13675  0A0D                     _do_I2C_RCEN:	
 13676                           
 13677                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 13678                           
 13679                           ;incstack = 0
 13680                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 13681  0A0D  0023               	movlb	3	; select bank3
 13682  0A0E  11A0               	bcf	_i2c_status^(0+384),3
 13683                           
 13684                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 13685  0A0F  3189  21A3         	fcall	i1_i2c1_driver_startRX
 13686                           
 13687                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 13688  0A11  3004               	movlw	4
 13689  0A12  0008               	return
 13690  0A13                     __end_of_do_I2C_RCEN:	
 13691                           
 13692                           	psect	text74
 13693  0A2C                     __ptext74:	
 13694 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 13695 ;; Defined at:
 13696 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 13697 ;; Parameters:    Size  Location     Type
 13698 ;;		None
 13699 ;; Auto vars:     Size  Location     Type
 13700 ;;		None
 13701 ;; Return value:  Size  Location     Type
 13702 ;;                  1    wreg      enum E7120
 13703 ;; Registers used:
 13704 ;;		wreg, status,2, status,0, pclath, cstack
 13705 ;; Tracked objects:
 13706 ;;		On entry : 0/0
 13707 ;;		On exit  : 0/0
 13708 ;;		Unchanged: 0/0
 13709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13714 ;;Total ram usage:        0 bytes
 13715 ;; Hardware stack levels used:    1
 13716 ;; Hardware stack levels required when called:    1
 13717 ;; This function calls:
 13718 ;;		i1_i2c1_driver_TXData
 13719 ;; This function is called by:
 13720 ;;		_i2c_ISR
 13721 ;; This function uses a non-reentrant model
 13722 ;;
 13723                           
 13724                           
 13725                           ;psect for function _do_I2C_SEND_ADR_WRITE
 13726  0A2C                     _do_I2C_SEND_ADR_WRITE:	
 13727                           
 13728                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 13729                           
 13730                           ;incstack = 0
 13731                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13732  0A2C  0023               	movlb	3	; select bank3
 13733  0A2D  15A0               	bsf	_i2c_status^(0+384),3
 13734                           
 13735                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 13736  0A2E  3521               	lslf	(_i2c_status^(0+384)+1),w
 13737  0A2F  318A  2203         	fcall	i1_i2c1_driver_TXData
 13738                           
 13739                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 13740  0A31  3003               	movlw	3
 13741  0A32  0008               	return
 13742  0A33                     __end_of_do_I2C_SEND_ADR_WRITE:	
 13743                           
 13744                           	psect	text75
 13745  0A49                     __ptext75:	
 13746 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 13747 ;; Defined at:
 13748 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;		None
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;		None
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      enum E7120
 13755 ;; Registers used:
 13756 ;;		wreg, status,2, status,0, pclath, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13766 ;;Total ram usage:        0 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    1
 13769 ;; This function calls:
 13770 ;;		i1_i2c1_driver_TXData
 13771 ;; This function is called by:
 13772 ;;		_i2c_ISR
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776                           
 13777                           ;psect for function _do_I2C_SEND_ADR_READ
 13778  0A49                     _do_I2C_SEND_ADR_READ:	
 13779                           
 13780                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 13781                           
 13782                           ;incstack = 0
 13783                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 13784  0A49  0023               	movlb	3	; select bank3
 13785  0A4A  15A0               	bsf	_i2c_status^(0+384),3
 13786                           
 13787                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 13788  0A4B  1403               	setc
 13789  0A4C  0D21               	rlf	(_i2c_status^(0+384)+1),w
 13790  0A4D  318A  2203         	fcall	i1_i2c1_driver_TXData
 13791                           
 13792                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 13793  0A4F  3005               	movlw	5
 13794  0A50  0008               	return
 13795  0A51                     __end_of_do_I2C_SEND_ADR_READ:	
 13796                           
 13797                           	psect	text76
 13798  09E7                     __ptext76:	
 13799 ;; *************** function _do_I2C_SEND_STOP *****************
 13800 ;; Defined at:
 13801 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;		None
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;		None
 13806 ;; Return value:  Size  Location     Type
 13807 ;;                  1    wreg      enum E7120
 13808 ;; Registers used:
 13809 ;;		wreg, status,2, status,0, pclath, cstack
 13810 ;; Tracked objects:
 13811 ;;		On entry : 0/0
 13812 ;;		On exit  : 0/0
 13813 ;;		Unchanged: 0/0
 13814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;Total ram usage:        0 bytes
 13820 ;; Hardware stack levels used:    1
 13821 ;; Hardware stack levels required when called:    1
 13822 ;; This function calls:
 13823 ;;		i1_i2c1_driver_stop
 13824 ;; This function is called by:
 13825 ;;		_do_I2C_DO_ADDRESS_NACK
 13826 ;;		_do_I2C_TX
 13827 ;;		_do_I2C_TX_EMPTY
 13828 ;;		_i2c_ISR
 13829 ;; This function uses a non-reentrant model
 13830 ;;
 13831                           
 13832                           
 13833                           ;psect for function _do_I2C_SEND_STOP
 13834  09E7                     _do_I2C_SEND_STOP:	
 13835                           
 13836                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 13837                           
 13838                           ;incstack = 0
 13839                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 13840  09E7  3189  21A0         	fcall	i1_i2c1_driver_stop
 13841                           
 13842                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 13843  09E9  3000               	movlw	0
 13844  09EA  0008               	return
 13845  09EB                     __end_of_do_I2C_SEND_STOP:	
 13846                           
 13847                           	psect	text77
 13848  09E3                     __ptext77:	
 13849 ;; *************** function _do_I2C_SEND_RESTART *****************
 13850 ;; Defined at:
 13851 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;		None
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;		None
 13856 ;; Return value:  Size  Location     Type
 13857 ;;                  1    wreg      enum E7120
 13858 ;; Registers used:
 13859 ;;		wreg, status,2, status,0, pclath, cstack
 13860 ;; Tracked objects:
 13861 ;;		On entry : 0/0
 13862 ;;		On exit  : 0/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;Total ram usage:        0 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; Hardware stack levels required when called:    1
 13872 ;; This function calls:
 13873 ;;		i1_i2c1_driver_restart
 13874 ;; This function is called by:
 13875 ;;		_do_I2C_DO_ADDRESS_NACK
 13876 ;;		_do_I2C_TX_EMPTY
 13877 ;;		_i2c_ISR
 13878 ;; This function uses a non-reentrant model
 13879 ;;
 13880                           
 13881                           
 13882                           ;psect for function _do_I2C_SEND_RESTART
 13883  09E3                     _do_I2C_SEND_RESTART:	
 13884                           
 13885                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 13886                           
 13887                           ;incstack = 0
 13888                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13889  09E3  3189  219D         	fcall	i1_i2c1_driver_restart
 13890                           
 13891                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 13892  09E5  3001               	movlw	1
 13893  09E6  0008               	return
 13894  09E7                     __end_of_do_I2C_SEND_RESTART:	
 13895                           
 13896                           	psect	text78
 13897  09DF                     __ptext78:	
 13898 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 13899 ;; Defined at:
 13900 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 13901 ;; Parameters:    Size  Location     Type
 13902 ;;		None
 13903 ;; Auto vars:     Size  Location     Type
 13904 ;;		None
 13905 ;; Return value:  Size  Location     Type
 13906 ;;                  1    wreg      enum E7120
 13907 ;; Registers used:
 13908 ;;		wreg, status,2, status,0, pclath, cstack
 13909 ;; Tracked objects:
 13910 ;;		On entry : 0/0
 13911 ;;		On exit  : 0/0
 13912 ;;		Unchanged: 0/0
 13913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;Total ram usage:        0 bytes
 13919 ;; Hardware stack levels used:    1
 13920 ;; Hardware stack levels required when called:    1
 13921 ;; This function calls:
 13922 ;;		i1_i2c1_driver_restart
 13923 ;; This function is called by:
 13924 ;;		_do_I2C_TX
 13925 ;;		_i2c_ISR
 13926 ;; This function uses a non-reentrant model
 13927 ;;
 13928                           
 13929                           
 13930                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 13931  09DF                     _do_I2C_SEND_RESTART_WRITE:	
 13932                           
 13933                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 13934                           
 13935                           ;incstack = 0
 13936                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13937  09DF  3189  219D         	fcall	i1_i2c1_driver_restart
 13938                           
 13939                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 13940  09E1  3002               	movlw	2
 13941  09E2  0008               	return
 13942  09E3                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 13943                           
 13944                           	psect	text79
 13945  09DB                     __ptext79:	
 13946 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 13947 ;; Defined at:
 13948 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 13949 ;; Parameters:    Size  Location     Type
 13950 ;;		None
 13951 ;; Auto vars:     Size  Location     Type
 13952 ;;		None
 13953 ;; Return value:  Size  Location     Type
 13954 ;;                  1    wreg      enum E7120
 13955 ;; Registers used:
 13956 ;;		wreg, status,2, status,0, pclath, cstack
 13957 ;; Tracked objects:
 13958 ;;		On entry : 0/0
 13959 ;;		On exit  : 0/0
 13960 ;;		Unchanged: 0/0
 13961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;Total ram usage:        0 bytes
 13967 ;; Hardware stack levels used:    1
 13968 ;; Hardware stack levels required when called:    1
 13969 ;; This function calls:
 13970 ;;		i1_i2c1_driver_restart
 13971 ;; This function is called by:
 13972 ;;		_do_I2C_TX
 13973 ;;		_i2c_ISR
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           
 13978                           ;psect for function _do_I2C_SEND_RESTART_READ
 13979  09DB                     _do_I2C_SEND_RESTART_READ:	
 13980                           
 13981                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 13985  09DB  3189  219D         	fcall	i1_i2c1_driver_restart
 13986                           
 13987                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 13988  09DD  3001               	movlw	1
 13989  09DE  0008               	return
 13990  09DF                     __end_of_do_I2C_SEND_RESTART_READ:	
 13991                           
 13992                           	psect	text80
 13993  0A08                     __ptext80:	
 13994 ;; *************** function _do_I2C_IDLE *****************
 13995 ;; Defined at:
 13996 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 13997 ;; Parameters:    Size  Location     Type
 13998 ;;		None
 13999 ;; Auto vars:     Size  Location     Type
 14000 ;;		None
 14001 ;; Return value:  Size  Location     Type
 14002 ;;                  1    wreg      enum E7120
 14003 ;; Registers used:
 14004 ;;		wreg, status,2
 14005 ;; Tracked objects:
 14006 ;;		On entry : 0/0
 14007 ;;		On exit  : 0/0
 14008 ;;		Unchanged: 0/0
 14009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;Total ram usage:        0 bytes
 14015 ;; Hardware stack levels used:    1
 14016 ;; This function calls:
 14017 ;;		Nothing
 14018 ;; This function is called by:
 14019 ;;		_i2c_ISR
 14020 ;; This function uses a non-reentrant model
 14021 ;;
 14022                           
 14023                           
 14024                           ;psect for function _do_I2C_IDLE
 14025  0A08                     _do_I2C_IDLE:	
 14026                           
 14027                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14028                           
 14029                           ;incstack = 0
 14030                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 14031  0A08  0023               	movlb	3	; select bank3
 14032  0A09  1020               	bcf	_i2c_status^(0+384),0
 14033                           
 14034                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14035  0A0A  01AA               	clrf	(_i2c_status^(0+384)+10)
 14036                           
 14037                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14038  0A0B  300E               	movlw	14
 14039  0A0C  0008               	return
 14040  0A0D                     __end_of_do_I2C_IDLE:	
 14041                           
 14042                           	psect	text81
 14043  0A25                     __ptext81:	
 14044 ;; *************** function _do_I2C_RESET *****************
 14045 ;; Defined at:
 14046 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14047 ;; Parameters:    Size  Location     Type
 14048 ;;		None
 14049 ;; Auto vars:     Size  Location     Type
 14050 ;;		None
 14051 ;; Return value:  Size  Location     Type
 14052 ;;                  1    wreg      enum E7120
 14053 ;; Registers used:
 14054 ;;		wreg, status,2, status,0, pclath, cstack
 14055 ;; Tracked objects:
 14056 ;;		On entry : 0/0
 14057 ;;		On exit  : 0/0
 14058 ;;		Unchanged: 0/0
 14059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;Total ram usage:        0 bytes
 14065 ;; Hardware stack levels used:    1
 14066 ;; Hardware stack levels required when called:    1
 14067 ;; This function calls:
 14068 ;;		_i2c1_driver_resetBus
 14069 ;; This function is called by:
 14070 ;;		_i2c_ISR
 14071 ;; This function uses a non-reentrant model
 14072 ;;
 14073                           
 14074                           
 14075                           ;psect for function _do_I2C_RESET
 14076  0A25                     _do_I2C_RESET:	
 14077                           
 14078                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 14079                           
 14080                           ;incstack = 0
 14081                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14082  0A25  3189  2199         	fcall	_i2c1_driver_resetBus
 14083                           
 14084                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14085  0A27  0023               	movlb	3	; select bank3
 14086  0A28  1020               	bcf	_i2c_status^(0+384),0
 14087                           
 14088                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14089  0A29  01AA               	clrf	(_i2c_status^(0+384)+10)
 14090                           
 14091                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14092  0A2A  300E               	movlw	14
 14093  0A2B  0008               	return
 14094  0A2C                     __end_of_do_I2C_RESET:	
 14095                           
 14096                           	psect	text82
 14097  0D94                     __ptext82:	
 14098 ;; *************** function _do_I2C_TX_EMPTY *****************
 14099 ;; Defined at:
 14100 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14101 ;; Parameters:    Size  Location     Type
 14102 ;;		None
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;		None
 14105 ;; Return value:  Size  Location     Type
 14106 ;;                  1    wreg      enum E7120
 14107 ;; Registers used:
 14108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14109 ;; Tracked objects:
 14110 ;;		On entry : 0/0
 14111 ;;		On exit  : 0/0
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;Total ram usage:        3 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    2
 14121 ;; This function calls:
 14122 ;;		_do_I2C_SEND_RESTART
 14123 ;;		_do_I2C_SEND_STOP
 14124 ;;		_mssp1_setIRQ
 14125 ;;		_returnReset
 14126 ;;		_returnStop
 14127 ;; This function is called by:
 14128 ;;		_i2c_ISR
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132                           
 14133                           ;psect for function _do_I2C_TX_EMPTY
 14134  0D94                     _do_I2C_TX_EMPTY:	
 14135                           
 14136                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 14137                           
 14138                           ;incstack = 0
 14139                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14140  0D94  0023               	movlb	3	; select bank3
 14141  0D95  1520               	bsf	_i2c_status^(0+384),2
 14142                           
 14143                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14144  0D96  2DA1               	goto	i1l4487
 14145  0D97                     i1l4471:	
 14146                           
 14147                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 14148  0D97  3189  21E3         	fcall	_do_I2C_SEND_RESTART
 14149  0D99  0008               	return
 14150  0D9A                     i1l4475:	
 14151                           
 14152                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 14153  0D9A  3189  21A9         	fcall	_mssp1_setIRQ
 14154                           
 14155                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 14156  0D9C  3003               	movlw	3
 14157  0D9D  0008               	return
 14158  0D9E                     i1l4481:	
 14159                           
 14160                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 14161  0D9E  3189  21E7         	fcall	_do_I2C_SEND_STOP
 14162  0DA0  0008               	return
 14163  0DA1                     i1l4487:	
 14164  0DA1  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14165  0DA2  00F0               	movwf	??_do_I2C_TX_EMPTY
 14166  0DA3  0870               	movf	??_do_I2C_TX_EMPTY,w
 14167  0DA4  00F0               	movwf	returnReset@p
 14168  0DA5  300B               	movlw	11
 14169  0DA6  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14170  0DA7  0086               	movwf	6
 14171  0DA8  3001               	movlw	1	; select bank3/4
 14172  0DA9  0087               	movwf	7
 14173  0DAA  3F41               	moviw [1]fsr1
 14174  0DAB  008A               	movwf	10
 14175  0DAC  3F40               	moviw [0]fsr1
 14176  0DAD  000A               	callw
 14177  0DAE  318D               	pagesel	$
 14178  0DAF  00F1               	movwf	??_do_I2C_TX_EMPTY+1
 14179  0DB0  01F2               	clrf	??_do_I2C_TX_EMPTY+2
 14180                           
 14181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14182                           ; Switch size 1, requested type "simple"
 14183                           ; Number of cases is 1, Range of values is 0 to 0
 14184                           ; switch strategies available:
 14185                           ; Name         Instructions Cycles
 14186                           ; simple_byte            4     3 (average)
 14187                           ; direct_byte            8     6 (fixed)
 14188                           ; jumptable            260     6 (fixed)
 14189                           ;	Chosen strategy is simple_byte
 14190  0DB1  0872               	movf	??_do_I2C_TX_EMPTY+2,w
 14191  0DB2  3A00               	xorlw	0	; case 0
 14192  0DB3  1903               	skipnz
 14193  0DB4  2DB6               	goto	i1l6997
 14194  0DB5  2D9E               	goto	i1l4481
 14195  0DB6                     i1l6997:	
 14196                           
 14197                           ; Switch size 1, requested type "simple"
 14198                           ; Number of cases is 4, Range of values is 1 to 4
 14199                           ; switch strategies available:
 14200                           ; Name         Instructions Cycles
 14201                           ; simple_byte           13     7 (average)
 14202                           ; direct_byte           17     9 (fixed)
 14203                           ; jumptable            263     9 (fixed)
 14204                           ;	Chosen strategy is simple_byte
 14205  0DB6  0871               	movf	??_do_I2C_TX_EMPTY+1,w
 14206  0DB7  3A01               	xorlw	1	; case 1
 14207  0DB8  1903               	skipnz
 14208  0DB9  2D9E               	goto	i1l4481
 14209  0DBA  3A03               	xorlw	3	; case 2
 14210  0DBB  1903               	skipnz
 14211  0DBC  2D97               	goto	i1l4471
 14212  0DBD  3A01               	xorlw	1	; case 3
 14213  0DBE  1903               	skipnz
 14214  0DBF  2D97               	goto	i1l4471
 14215  0DC0  3A07               	xorlw	7	; case 4
 14216  0DC1  1903               	skipnz
 14217  0DC2  2D9A               	goto	i1l4475
 14218  0DC3  2D9E               	goto	i1l4481
 14219  0DC4  0008               	return
 14220  0DC5                     __end_of_do_I2C_TX_EMPTY:	
 14221                           
 14222                           	psect	text83
 14223  09A9                     __ptext83:	
 14224 ;; *************** function _mssp1_setIRQ *****************
 14225 ;; Defined at:
 14226 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 14227 ;; Parameters:    Size  Location     Type
 14228 ;;		None
 14229 ;; Auto vars:     Size  Location     Type
 14230 ;;		None
 14231 ;; Return value:  Size  Location     Type
 14232 ;;                  1    wreg      void 
 14233 ;; Registers used:
 14234 ;;		None
 14235 ;; Tracked objects:
 14236 ;;		On entry : 0/0
 14237 ;;		On exit  : 0/0
 14238 ;;		Unchanged: 0/0
 14239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;Total ram usage:        0 bytes
 14245 ;; Hardware stack levels used:    1
 14246 ;; This function calls:
 14247 ;;		Nothing
 14248 ;; This function is called by:
 14249 ;;		_do_I2C_TX_EMPTY
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _mssp1_setIRQ
 14255  09A9                     _mssp1_setIRQ:	
 14256                           
 14257                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 14258                           
 14259                           ;incstack = 0
 14260                           ; Regs used in _mssp1_setIRQ: []
 14261  09A9  0020               	movlb	0	; select bank0
 14262  09AA  1591               	bsf	17,3	;volatile
 14263  09AB  0008               	return
 14264  09AC                     __end_of_mssp1_setIRQ:	
 14265                           
 14266                           	psect	text84
 14267  0A41                     __ptext84:	
 14268 ;; *************** function _i2c1_driver_isNACK *****************
 14269 ;; Defined at:
 14270 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;		None
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;		None
 14275 ;; Return value:  Size  Location     Type
 14276 ;;		None               void
 14277 ;; Registers used:
 14278 ;;		wreg, status,2, status,0
 14279 ;; Tracked objects:
 14280 ;;		On entry : 0/0
 14281 ;;		On exit  : 0/0
 14282 ;;		Unchanged: 0/0
 14283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;Total ram usage:        1 bytes
 14289 ;; Hardware stack levels used:    1
 14290 ;; This function calls:
 14291 ;;		Nothing
 14292 ;; This function is called by:
 14293 ;;		_do_I2C_TX
 14294 ;;		_i2c_ISR
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           
 14299                           ;psect for function _i2c1_driver_isNACK
 14300  0A41                     _i2c1_driver_isNACK:	
 14301                           
 14302                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 14303                           
 14304                           ;incstack = 0
 14305                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 14306  0A41  0024               	movlb	4	; select bank4
 14307  0A42  0E16               	swapf	22,w	;volatile
 14308  0A43  0C89               	rrf	9,f
 14309  0A44  0C89               	rrf	9,f
 14310  0A45  3901               	andlw	1
 14311  0A46  00F0               	movwf	??_i2c1_driver_isNACK
 14312  0A47  0C70               	rrf	??_i2c1_driver_isNACK,w
 14313  0A48  0008               	return
 14314  0A49                     __end_of_i2c1_driver_isNACK:	
 14315                           
 14316                           	psect	text85
 14317  0A03                     __ptext85:	
 14318 ;; *************** function i1_i2c1_driver_TXData *****************
 14319 ;; Defined at:
 14320 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 14321 ;; Parameters:    Size  Location     Type
 14322 ;;  d               1    wreg     unsigned char 
 14323 ;; Auto vars:     Size  Location     Type
 14324 ;;  d               1    0[COMMON] unsigned char 
 14325 ;; Return value:  Size  Location     Type
 14326 ;;                  1    wreg      void 
 14327 ;; Registers used:
 14328 ;;		wreg
 14329 ;; Tracked objects:
 14330 ;;		On entry : 0/0
 14331 ;;		On exit  : 0/0
 14332 ;;		Unchanged: 0/0
 14333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;Total ram usage:        1 bytes
 14339 ;; Hardware stack levels used:    1
 14340 ;; This function calls:
 14341 ;;		Nothing
 14342 ;; This function is called by:
 14343 ;;		_do_I2C_SEND_ADR_READ
 14344 ;;		_do_I2C_SEND_ADR_WRITE
 14345 ;;		_do_I2C_TX
 14346 ;; This function uses a non-reentrant model
 14347 ;;
 14348                           
 14349                           
 14350                           ;psect for function i1_i2c1_driver_TXData
 14351  0A03                     i1_i2c1_driver_TXData:	
 14352                           
 14353                           ;incstack = 0
 14354                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 14355                           ;i1i2c1_driver_TXData@d stored from wreg
 14356  0A03  00F0               	movwf	i1i2c1_driver_TXData@d
 14357                           
 14358                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 14359  0A04  0870               	movf	i1i2c1_driver_TXData@d,w
 14360  0A05  0024               	movlb	4	; select bank4
 14361  0A06  0091               	movwf	17	;volatile
 14362  0A07  0008               	return
 14363  0A08                     __end_ofi1_i2c1_driver_TXData:	
 14364                           
 14365                           	psect	text86
 14366  09A6                     __ptext86:	
 14367 ;; *************** function i1_i2c1_driver_getRXData *****************
 14368 ;; Defined at:
 14369 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 14370 ;; Parameters:    Size  Location     Type
 14371 ;;		None
 14372 ;; Auto vars:     Size  Location     Type
 14373 ;;		None
 14374 ;; Return value:  Size  Location     Type
 14375 ;;                  1    wreg      unsigned char 
 14376 ;; Registers used:
 14377 ;;		wreg
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;Total ram usage:        0 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; This function calls:
 14390 ;;		Nothing
 14391 ;; This function is called by:
 14392 ;;		_do_I2C_RX
 14393 ;; This function uses a non-reentrant model
 14394 ;;
 14395                           
 14396                           
 14397                           ;psect for function i1_i2c1_driver_getRXData
 14398  09A6                     i1_i2c1_driver_getRXData:	
 14399                           
 14400                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 14401                           
 14402                           ;incstack = 0
 14403                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 14404  09A6  0024               	movlb	4	; select bank4
 14405  09A7  0811               	movf	17,w	;volatile
 14406  09A8  0008               	return
 14407  09A9                     __end_ofi1_i2c1_driver_getRXData:	
 14408                           
 14409                           	psect	text87
 14410  09D7                     __ptext87:	
 14411 ;; *************** function i1_i2c1_driver_sendNACK *****************
 14412 ;; Defined at:
 14413 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 14414 ;; Parameters:    Size  Location     Type
 14415 ;;		None
 14416 ;; Auto vars:     Size  Location     Type
 14417 ;;		None
 14418 ;; Return value:  Size  Location     Type
 14419 ;;                  1    wreg      void 
 14420 ;; Registers used:
 14421 ;;		None
 14422 ;; Tracked objects:
 14423 ;;		On entry : 0/0
 14424 ;;		On exit  : 0/0
 14425 ;;		Unchanged: 0/0
 14426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14431 ;;Total ram usage:        0 bytes
 14432 ;; Hardware stack levels used:    1
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		_do_I2C_DO_NACK_STOP
 14437 ;;		_do_I2C_DO_NACK_RESTART
 14438 ;; This function uses a non-reentrant model
 14439 ;;
 14440                           
 14441                           
 14442                           ;psect for function i1_i2c1_driver_sendNACK
 14443  09D7                     i1_i2c1_driver_sendNACK:	
 14444                           
 14445                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 14446                           
 14447                           ;incstack = 0
 14448                           ; Regs used in i1_i2c1_driver_sendNACK: []
 14449  09D7  0024               	movlb	4	; select bank4
 14450  09D8  1696               	bsf	22,5	;volatile
 14451                           
 14452                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 14453  09D9  1616               	bsf	22,4	;volatile
 14454  09DA  0008               	return
 14455  09DB                     __end_ofi1_i2c1_driver_sendNACK:	
 14456                           
 14457                           	psect	text88
 14458  0999                     __ptext88:	
 14459 ;; *************** function _i2c1_driver_resetBus *****************
 14460 ;; Defined at:
 14461 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 14462 ;; Parameters:    Size  Location     Type
 14463 ;;		None
 14464 ;; Auto vars:     Size  Location     Type
 14465 ;;		None
 14466 ;; Return value:  Size  Location     Type
 14467 ;;                  1    wreg      void 
 14468 ;; Registers used:
 14469 ;;		None
 14470 ;; Tracked objects:
 14471 ;;		On entry : 0/0
 14472 ;;		On exit  : 0/0
 14473 ;;		Unchanged: 0/0
 14474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14479 ;;Total ram usage:        0 bytes
 14480 ;; Hardware stack levels used:    1
 14481 ;; This function calls:
 14482 ;;		Nothing
 14483 ;; This function is called by:
 14484 ;;		_do_I2C_RESET
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           
 14489                           ;psect for function _i2c1_driver_resetBus
 14490  0999                     _i2c1_driver_resetBus:	
 14491                           
 14492                           ;incstack = 0
 14493                           ; Regs used in _i2c1_driver_resetBus: []
 14494  0999  0008               	return
 14495  099A                     __end_of_i2c1_driver_resetBus:	
 14496                           
 14497                           	psect	text89
 14498  09A3                     __ptext89:	
 14499 ;; *************** function i1_i2c1_driver_startRX *****************
 14500 ;; Defined at:
 14501 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;		None
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;		None
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      void 
 14508 ;; Registers used:
 14509 ;;		None
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;Total ram usage:        0 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; This function calls:
 14522 ;;		Nothing
 14523 ;; This function is called by:
 14524 ;;		_do_I2C_RCEN
 14525 ;; This function uses a non-reentrant model
 14526 ;;
 14527                           
 14528                           
 14529                           ;psect for function i1_i2c1_driver_startRX
 14530  09A3                     i1_i2c1_driver_startRX:	
 14531                           
 14532                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 14533                           
 14534                           ;incstack = 0
 14535                           ; Regs used in i1_i2c1_driver_startRX: []
 14536  09A3  0024               	movlb	4	; select bank4
 14537  09A4  1596               	bsf	22,3	;volatile
 14538  09A5  0008               	return
 14539  09A6                     __end_ofi1_i2c1_driver_startRX:	
 14540                           
 14541                           	psect	text90
 14542  0002                     __ptext90:	
 14543 ;; *************** function _returnReset *****************
 14544 ;; Defined at:
 14545 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  p               1    0[COMMON] PTR void 
 14548 ;;		 -> NULL(0), 
 14549 ;; Auto vars:     Size  Location     Type
 14550 ;;		None
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  1    wreg      enum E6966
 14553 ;; Registers used:
 14554 ;;		wreg
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14560 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;Total ram usage:        1 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; This function calls:
 14567 ;;		Nothing
 14568 ;; This function is called by:
 14569 ;;		_i2c_open
 14570 ;;		_do_I2C_DO_ADDRESS_NACK
 14571 ;;		_do_I2C_TX
 14572 ;;		_do_I2C_RX
 14573 ;;		_do_I2C_TX_EMPTY
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           
 14578                           ;psect for function _returnReset
 14579  0002                     _returnReset:	
 14580                           
 14581                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 14582                           
 14583                           ;incstack = 0
 14584                           ; Regs used in _returnReset: [wreg]
 14585  0002  3005               	movlw	5
 14586  0003  0008               	return
 14587  0004                     __end_of_returnReset:	
 14588                           
 14589                           	psect	text91
 14590  099B                     __ptext91:	
 14591 ;; *************** function _returnStop *****************
 14592 ;; Defined at:
 14593 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 14594 ;; Parameters:    Size  Location     Type
 14595 ;;  p               1    0[COMMON] PTR void 
 14596 ;;		 -> NULL(0), 
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;		None
 14599 ;; Return value:  Size  Location     Type
 14600 ;;                  1    wreg      enum E6966
 14601 ;; Registers used:
 14602 ;;		wreg
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14608 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14612 ;;Total ram usage:        1 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; This function calls:
 14615 ;;		Nothing
 14616 ;; This function is called by:
 14617 ;;		_i2c_open
 14618 ;;		_setCallBack
 14619 ;;		_do_I2C_DO_ADDRESS_NACK
 14620 ;;		_do_I2C_TX
 14621 ;;		_do_I2C_RX
 14622 ;;		_do_I2C_TX_EMPTY
 14623 ;; This function uses a non-reentrant model
 14624 ;;
 14625                           
 14626                           
 14627                           ;psect for function _returnStop
 14628  099B                     _returnStop:	
 14629                           
 14630                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 14631                           
 14632                           ;incstack = 0
 14633                           ; Regs used in _returnStop: [wreg]
 14634  099B  3001               	movlw	1
 14635  099C  0008               	return
 14636  099D                     __end_of_returnStop:	
 14637                           
 14638                           	psect	text92
 14639  09A0                     __ptext92:	
 14640 ;; *************** function i1_i2c1_driver_stop *****************
 14641 ;; Defined at:
 14642 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 14643 ;; Parameters:    Size  Location     Type
 14644 ;;		None
 14645 ;; Auto vars:     Size  Location     Type
 14646 ;;		None
 14647 ;; Return value:  Size  Location     Type
 14648 ;;                  1    wreg      void 
 14649 ;; Registers used:
 14650 ;;		None
 14651 ;; Tracked objects:
 14652 ;;		On entry : 0/0
 14653 ;;		On exit  : 0/0
 14654 ;;		Unchanged: 0/0
 14655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;Total ram usage:        0 bytes
 14661 ;; Hardware stack levels used:    1
 14662 ;; This function calls:
 14663 ;;		Nothing
 14664 ;; This function is called by:
 14665 ;;		_do_I2C_SEND_STOP
 14666 ;; This function uses a non-reentrant model
 14667 ;;
 14668                           
 14669                           
 14670                           ;psect for function i1_i2c1_driver_stop
 14671  09A0                     i1_i2c1_driver_stop:	
 14672                           
 14673                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 14674                           
 14675                           ;incstack = 0
 14676                           ; Regs used in i1_i2c1_driver_stop: []
 14677  09A0  0024               	movlb	4	; select bank4
 14678  09A1  1516               	bsf	22,2	;volatile
 14679  09A2  0008               	return
 14680  09A3                     __end_ofi1_i2c1_driver_stop:	
 14681                           
 14682                           	psect	text93
 14683  099D                     __ptext93:	
 14684 ;; *************** function i1_i2c1_driver_restart *****************
 14685 ;; Defined at:
 14686 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;		None
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		None
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;Total ram usage:        0 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; This function calls:
 14707 ;;		Nothing
 14708 ;; This function is called by:
 14709 ;;		_do_I2C_SEND_RESTART_READ
 14710 ;;		_do_I2C_SEND_RESTART_WRITE
 14711 ;;		_do_I2C_SEND_RESTART
 14712 ;; This function uses a non-reentrant model
 14713 ;;
 14714                           
 14715                           
 14716                           ;psect for function i1_i2c1_driver_restart
 14717  099D                     i1_i2c1_driver_restart:	
 14718                           
 14719                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 14720                           
 14721                           ;incstack = 0
 14722                           ; Regs used in i1_i2c1_driver_restart: []
 14723  099D  0024               	movlb	4	; select bank4
 14724  099E  1496               	bsf	22,1	;volatile
 14725  099F  0008               	return
 14726  09A0                     __end_ofi1_i2c1_driver_restart:	
 14727                           
 14728                           	psect	text94
 14729  09D3                     __ptext94:	
 14730 ;; *************** function _i2c1_driver_sendACK *****************
 14731 ;; Defined at:
 14732 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 14733 ;; Parameters:    Size  Location     Type
 14734 ;;		None
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;		None
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  1    wreg      void 
 14739 ;; Registers used:
 14740 ;;		None
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;Total ram usage:        0 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_do_I2C_DO_ACK
 14756 ;;		_do_I2C_RX
 14757 ;;		_I2C_Send_ACK
 14758 ;; This function uses a non-reentrant model
 14759 ;;
 14760                           
 14761                           
 14762                           ;psect for function _i2c1_driver_sendACK
 14763  09D3                     _i2c1_driver_sendACK:	
 14764                           
 14765                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 14766                           
 14767                           ;incstack = 0
 14768                           ; Regs used in _i2c1_driver_sendACK: []
 14769  09D3  0024               	movlb	4	; select bank4
 14770  09D4  1296               	bcf	22,5	;volatile
 14771                           
 14772                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 14773  09D5  1616               	bsf	22,4	;volatile
 14774  09D6  0008               	return
 14775  09D7                     __end_of_i2c1_driver_sendACK:	
 14776                           
 14777                           	psect	text95
 14778  0998                     __ptext95:	
 14779 ;; *************** function _PIN_MANAGER_IOC *****************
 14780 ;; Defined at:
 14781 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 14782 ;; Parameters:    Size  Location     Type
 14783 ;;		None
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;		None
 14786 ;; Return value:  Size  Location     Type
 14787 ;;                  1    wreg      void 
 14788 ;; Registers used:
 14789 ;;		None
 14790 ;; Tracked objects:
 14791 ;;		On entry : 0/0
 14792 ;;		On exit  : 0/0
 14793 ;;		Unchanged: 0/0
 14794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;Total ram usage:        0 bytes
 14800 ;; Hardware stack levels used:    1
 14801 ;; This function calls:
 14802 ;;		Nothing
 14803 ;; This function is called by:
 14804 ;;		_INTERRUPT_InterruptManager
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           
 14809                           ;psect for function _PIN_MANAGER_IOC
 14810  0998                     _PIN_MANAGER_IOC:	
 14811                           
 14812                           ;incstack = 0
 14813                           ; Regs used in _PIN_MANAGER_IOC: []
 14814  0998  0008               	return
 14815  0999                     __end_of_PIN_MANAGER_IOC:	
 14816  007E                     btemp	set	126	;btemp
 14817  007E                     int$flags	set	126
 14818  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        10
    BSS         127
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     66      70
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2365	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _Display_Name->_strlen
    _SPI_Write->_SPI2_Exchange8bit
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   87045
                                             64 BANK1      2     2      0
                       _Display_Name
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8532
                                             59 BANK0      1     1      0
                       _Display_Name
                 _PWM_Output_Disable
                  _PWM_Output_Enable
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    7816
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5644
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2176
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _PWM_Output_Enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Output_Disable                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     716
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _PWM_Output_Disable
     _PWM_Output_Enable
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 03 07:50:50 2019

                          returnReset@p 0070                   ?_setGestureExitThresh 0070  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 09E3                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                      _PWM_Output_Disable 09D0  
                           __CFG_LVP$ON 0000                                     l532 07F8  
                                   l771 0ECE        processGestureData@ud_ratio_first 0031  
                                   _PR2 001E                            __CFG_CPD$OFF 0000  
                 __end_of_decodeGesture 04C8                    __size_of_I2C_ReStart 0003  
                                   _val 007B                 __size_of_PMD_Initialize 0008  
                    I2C_Write_Byte@Byte 0023                         _TMR2_Initialize 0A69  
                 __size_of_do_I2C_RESET 0007                                     wreg 0009  
                   ?_PWM_Output_Disable 0070                      i1_i2c1_driver_stop 09A0  
                                  l1110 03F8                                    l1102 03C4  
                                  l1030 0088                                    l1201 0B91  
                                  l1122 044B                                    l1114 0415  
                                  l1053 0243                                    l1134 049A  
                                  l1126 0468                                    l1072 02E2  
                                  l1065 02C3                                    l1057 026C  
                                  l1138 04B7                                    l1059 0292  
                                  l1076 030B                                    l1077 0323  
                                  l1098 03A7                                    l1365 0BAD  
                                  l6011 0463                                    l6007 0446  
                                  l6025 0495                                    l6017 0475  
                                  l6035 04C4                                    l6029 04B2  
                                  l6213 069F                                    l6039 04C6  
                                  l6207 0635                                    l6311 0C8E  
                                  l6209 0696                                    l6307 0C8C  
                                  l6157 0EB1                                    l6173 06A2  
                                  l5711 0FBF                                    l5615 0BA7  
                                  l6327 0AD5                                    l5561 0A8F  
                                  l5721 0FE4                                    l6409 0D92  
                                  l5641 07B4                                    l6169 05ED  
                                  l6337 0AE8                                    l6505 04DB  
                                  l5555 0B94                                    l5707 0FBD  
                                  l6427 0DF5                                    l5651 07BC  
                                  l5635 07A9                                    l6195 0627  
                                  l6187 0604                                    l6179 05F1  
                                  l6355 0E27                                    l6291 0CB5  
                                  l6267 0B0E                                    l6445 0C4D  
                                  l5653 07C8                                    l5901 02C5  
                                  l6373 0E59                                    l6277 0AFB  
                                  l6509 04DD                                    l5727 0FF0  
                                  l5719 0FD7                                    l6455 0AAF  
                                  l5663 07E3                                    l5911 0306  
                                  l5823 00F5                                    l6391 0C74  
                                  l6287 0CB3                                    l5729 0FF1  
                                  l6641 0752                                    l5905 02DD  
                                  l5841 01E4                                    l5809 00F9  
                                  l5761 0F28                                    l6713 06F4  
                                  l6705 06E1                                    l5683 0AC2  
                                  l5667 07EB                                    l5659 07DA  
                                  l5851 0209                                    l5827 0143  
                                  l5763 0F57                                    l6723 070D  
                                  l6715 0702                                    l6637 0750  
                                  l5589 07FD                                    l5933 0344  
                                  l5845 01F6                                    l5773 0077  
                                  l6655 074E                                    l5951 0366  
                                  l5943 035A                                    l5871 0267  
                                  l5855 021B                                    l5847 01F9  
                                  l6727 071A                                    l5697 0B5A  
                                  l5961 037A                                    l5945 035C  
                                  l5865 023E                                    l5857 021E  
                                  l5793 0084                                    l5777 0079  
                                  l6729 0737                                    l6825 0CE2  
                                  l5699 0B66                                    l5971 03A2  
                                  l5963 0380                                    l5955 036E  
                                  l5939 0350                                    l5883 028D  
                                  l5795 00DE                                    l6819 0CD0  
                                  l5981 03D1                                    l5957 0370  
                                  l5949 0364                                    l5893 02B7  
                                  l5975 03BF                                    l5879 0285  
                                  l5993 0410                                    l5989 03F3  
                                  l5999 0422                                    l6989 0723  
                                  STR_1 103D                                    STR_2 1030  
                                  STR_3 1020                                    STR_4 1049  
               __end_of_PWM1_Initialize 0AA3                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u5005 041F                                    u4215 07C9  
                                  u4135 0BAE                                    u5105 04C1  
                                  u4225 07D3                                    u4145 0BB3  
                                  u4314 0FD0                                    u4315 0FCF  
                                  u5035 0437                                    u4235 07DB  
                                  u4324 0FDC                                    u4325 0FDB  
                                  u5125 0EBB                                    u5045 0454  
                                  u5205 063F                                    u5055 0472  
                                  u5225 0CFD                                    u4195 07BF  
                                  u5235 0D26                                    _PMD0 0911  
                                  u5085 0486                                    u4605 022F  
                                  u4445 0093                                    u4365 0F31  
                                  u5325 0E08                                    _PMD1 0912  
                                  _PMD2 0913                                    u5095 04A3  
                                  u4615 024C                                    _PMD3 0914  
                                  _PMD4 0915                                    u4625 0258  
                                  u4545 01DD                                    u5345 0E3A  
                                  _PMD5 0916                                    u4635 0275  
                                  u4555 01EE                                    u5195 0630  
                                  u4805 032C                                    u4565 0202  
                                  u4575 0213                                    u5385 0DD6  
                                  u4745 02CE                                    u4755 02EB  
                                  u4765 02F7                                    u4685 029C  
                                  u4935 0393                                    u4775 0314  
                                  u4695 02AA                                    u4945 03B0  
                                  u4955 03CE                                    u5917 06D8  
                  ?_do_I2C_SEND_RESTART 0070                                    u5927 06A6  
                                  u4985 03E4                                    u5937 06B9  
                                  u5785 06EF                                    u5947 0E99  
                                  u4995 0401                                    u5957 0B1F  
                                  _TMR2 001D                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
     __size_of_do_I2C_SEND_RESTART_READ 0004                     ?i1_i2c1_driver_stop 0070  
             ?_do_I2C_SEND_RESTART_READ 0070                                    _main 0CC4  
                                  _name 005C               __size_of_do_I2C_SEND_STOP 0004  
                __size_of_do_I2C_DO_ACK 0004                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                 ??_setGestureIntEnable 002A                        __end_of_I2C_Stop 09D0  
                         __CFG_BOREN$ON 0000                 i1_i2c1_driver_getRXData 09A6  
                 ?_do_I2C_SEND_ADR_READ 0070                           __CFG_BORV$LOW 0000  
       ??_i2c1_driver_clearBusCollision 0070                                    start 002B  
                   I2C_Write_Byte@count 0024                           __CFG_CSWEN$ON 0000  
                         __CFG_MCLRE$ON 0000                    ??_PWM_Output_Disable 0020  
                       __end_of_i2c_ISR 0C28                ??_do_I2C_DO_NACK_RESTART 0070  
                          ?_readGesture 004F                            _do_I2C_RESET 0A25  
        __size_of_OSCILLATOR_Initialize 0008           __end_of_OSCILLATOR_Initialize 0A61  
                  ??i1_i2c1_driver_stop 0070                                   _ADACT 009F  
              __end_of_i2c1_driver_open 0A8C                                   ?_main 0070  
                       __end_of___awdiv 07F0                __end_of_i2c1_driver_stop 09CD  
                       ___awdiv@divisor 0026                                   _T2CON 001F  
            __end_of_i2c1_driver_TXData 0A19                          __CFG_DEBUG$OFF 0000  
                                 i1l157 0F95                                   i1l173 0EEC  
                                 i1l253 0029                                   i1l245 0010  
                                 i1l248 001E                            ?_setLEDBoost 0070  
                       ___awdiv@counter 002B                            ?_setLEDDrive 0070  
                        _setGestureGain 0DF7                                   _OSCEN 091D  
                    wireReadDataBlock@j 0030                          _setGestureMode 0C28  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E             __end_of_setProxIntLowThresh 0B10  
                       __end_of_getMode 0A82                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 0999              __end_of_i2c1_driver_isNACK 0A49  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 09F7  
                                 _names 0160                        _b_i2c_error_flag 0076  
          __end_of_setProxIntHighThresh 0AFD              ?_do_I2C_SEND_RESTART_WRITE 0070  
                                 _state 0078                                   _start 006F  
                 ??_do_I2C_SEND_RESTART 0070                         __end_of_setMode 1000  
                     __end_of_I2C_Start 09CA                                   pclath 000A  
               __size_of_mssp1_clearIRQ 0003                    i1_i2c1_driver_TXData 0A03  
          __size_of_setAmbientLightGain 001E                  ?_do_I2C_SEND_ADR_WRITE 0070  
                __size_of_I2C_Send_NACK 0003                                   status 0003  
                                 wtemp0 007E                      __size_of_SPI_Write 0015  
              ?_setLightIntLowThreshold 002A              __end_of_setGestureLEDDrive 0E5B  
                 setGestureWaitTime@val 002C                           _fsmStateTable 1000  
                         _gesture_data_ 0220                         __initialization 002D  
                ??_setGestureExitThresh 002A                       _SPI2_Exchange8bit 07F0  
            processGestureData@lr_delta 004B                              _i2c_status 01A0  
                          __end_of_main 0CEC                       _handleGestureFlag 0077  
            processGestureData@ud_delta 0049                      ?_SPI2_Exchange8bit 0070  
               __end_of_TMR2_Initialize 0A71             ?_INTERRUPT_InterruptManager 0070  
                __end_of_setGestureGain 0E29               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0C4F                           _do_I2C_DO_ACK 09EB  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 09FB                 ?_do_I2C_DO_ADDRESS_NACK 0070  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0ED2                    __size_of_enablePower 000E  
                                _ADCON0 009D                                  _ADCON1 009E  
                                _ADRESH 009C                                  _ADRESL 009B  
                                _CCPR1H 0292                                  _CCPR1L 0291  
                      ___awdiv@dividend 0028                      _processGestureData 0069  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
          setProxIntLowThresh@threshold 002B                   ?i1_i2c1_driver_TXData 0070  
                                _RC2PPS 0EA2                                  _RB5PPS 0E9D  
                                _RB6PPS 0E9E                        ?_PWM1_Initialize 0070  
                                _RB7PPS 0E9F                                  _ODCONA 028C  
                                _ODCONB 028D                                  _ODCONC 028E  
                                _RC7PPS 0EA7                                  i1l4411 0F6B  
                                i1l4421 0F71                                  i1l4415 0F6E  
                                i1l4407 0F68                                  i1l4451 0EEE  
                                i1l4429 0FAF                                  i1l4461 0EF4  
                                i1l4471 0D97                                  i1l4455 0EF1  
                                i1l4481 0D9E                                  i1l4385 0D45  
                                i1l4475 0D9A                                  i1l4395 0D4B  
                                i1l4389 0D48                                  i1l4487 0DA1  
             ??i1_i2c1_driver_getRXData 0070                                  i1l4929 0C12  
                                i1l6991 0F09                                  i1l6993 0F87  
                                i1l6995 0D60                                  i1l6997 0DB6  
                      _wireReadDataByte 0BDE                                  _OSCFRQ 091F  
               ?_resetGestureParameters 0070                  ??_do_I2C_SEND_ADR_READ 0070  
                                _WDTCON 0097                               ??_i2c_ISR 0073  
                   ?_processGestureData 0070                       _gesture_lr_delta_ 0066  
                        __CFG_PWRTE$OFF 0000           setProxIntHighThresh@threshold 002B  
             __end_of_SPI2_Exchange8bit 07FF                       _gesture_lr_count_ 0062  
                   wireReadDataByte@reg 0027                   _i2c1_driver_getRXData 09BB  
                   wireReadDataByte@val 0028                       _gesture_ud_delta_ 0068  
           __end_of_do_I2C_DO_NACK_STOP 09F3                           _I2C_Read_Byte 0A8C  
            __end_of_isGestureAvailable 0AC4                       _gesture_ud_count_ 0064  
                                ___wmul 0BA4                               ??___awdiv 002A  
 __end_of_i2c1_driver_clearBusCollision 09B2  __size_of_i2c1_driver_clearBusCollision 0003  
         _i2c1_driver_clearBusCollision 09AF              __end_of_setGestureWaitTime 0C76  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0004  
                                _button 007A                        ___awdiv@quotient 002D  
                        ?_do_I2C_DO_ACK 0070                         ?_setGestureGain 0070  
                         _I2C_Send_NACK 09C1                               ??_getMode 0029  
                       ?_setGestureMode 0070                                  _strlen 0B55  
               ??_setGestureEnterThresh 002A                    ??_processGestureData 002F  
                     __end_of_SPI_Write 0B25             __end_of_i2c1_driver_sendACK 09D7  
                        _PMD_Initialize 0A61          __end_of_do_I2C_DO_ADDRESS_NACK 0D69  
                          __pdataCOMMON 007B                               ?_I2C_Stop 0070  
                    Display_Name@length 0028                               ??_setMode 002C  
                       ?_WDT_Initialize 0070             __end_of_i2c1_driver_restart 09B8  
                          ?_returnReset 0070                       readGesture@motion 0053  
           __end_of_i2c1_driver_startRX 09C1                        ?_PIN_MANAGER_IOC 0070  
        __end_of_resetGestureParameters 0B55                       _SYSTEM_Initialize 0B25  
               __end_of__initialization 0065                        _do_I2C_SEND_STOP 09E7  
                    __size_of_do_I2C_RX 0046                      __size_of_do_I2C_TX 004F  
                    ?_SYSTEM_Initialize 0070                  setGestureWaitTime@time 002B  
              __size_of_do_I2C_TX_EMPTY 0031                              _adcResult2 00E0  
                        ?_I2C_Read_Byte 0070                          __pcstackCOMMON 0070  
                          __pidataBANK0 099A                            __pidataBANK2 0A71  
                   ??_SYSTEM_Initialize 0020                   i1i2c1_driver_TXData@d 0070  
                  _setProxIntHighThresh 0AEA                          _gesture_state_ 005E  
                        ?_I2C_Send_NACK 0070                        ?_TMR2_Initialize 0070  
                 i1_i2c1_driver_restart 099D                  __end_of_PMD_Initialize 0A69  
                 i1_i2c1_driver_startRX 09A3                    __size_of_readGesture 00F3  
                 __end_of_handleGesture 073A       __size_of_i2c1_driver_isBufferFull 0007  
                            ??_I2C_Stop 0020               ?_i2c1_driver_isBufferFull 0070  
                    _gesture_far_count_ 00E2                    __size_of_setLEDBoost 0032  
                  __size_of_setLEDDrive 0029                  _do_I2C_DO_NACK_RESTART 09F3  
                ??i1_i2c1_driver_TXData 0070               __end_of_SYSTEM_Initialize 0B3D  
                     ??_SPI2_Initialize 0020                          _mssp1_clearIRQ 09AC  
                            __pbssBANK0 005C                              __pbssBANK1 00E0  
                            __pbssBANK2 0168                              __pbssBANK3 01A0  
                            __pbssBANK4 0220                    wireWriteDataByte@reg 0029  
                  wireWriteDataByte@val 0026                     getMode@enable_value 002A  
              ??i1_i2c1_driver_sendNACK 0070                  ?_i2c1_driver_getRXData 0070  
            __size_of_SPI2_Exchange8bit 000F            __size_of_i2c_busCollisionISR 0003  
                            __pmaintext 0CC4                           ??_do_I2C_IDLE 0070  
                         ??_do_I2C_RCEN 0070                 setGestureLEDDrive@drive 002D  
                               ?___wmul 0020                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0070            __size_of_enableGestureSensor 0064  
                            __pintentry 0004                   ?_setProxIntHighThresh 0070  
                               _CCP1CON 0293                 __size_of_I2C_Write_Byte 001C  
                         ??_I2C_ReStart 0020                        _setProximityGain 0D15  
                           setMode@mode 002F                         ?_PMD_Initialize 0070  
                   _setAmbientLightGain 0BC0                 __size_of_ADC_Initialize 0008  
                 __size_of_Display_Name 0041          ?_i2c1_driver_clearBusCollision 0070  
                               ?_strlen 0020                       ?_i2c1_driver_open 0070  
                     __end_of_do_I2C_RX 0F18                       __end_of_do_I2C_TX 0FB1  
                     ?_i2c1_driver_stop 0070                       _wireReadDataBlock 0F18  
                    ??_i2c1_driver_open 0020                      ??_i2c1_driver_stop 0020  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                         ?_mssp1_setIRQ 0070                                 _OSCTUNE 091E  
                  wireReadDataBlock@len 0028                    wireReadDataBlock@reg 002F  
                  wireReadDataBlock@val 0026                                 _SSP1ADD 0212  
                               _SSP2ADD 021A                                 _SLRCONA 030C  
                               _SLRCONB 030D                                 _SLRCONC 030E  
                               _SSP1BUF 0211                  __end_of_mssp1_clearIRQ 09AF  
                               _SSP2BUF 0219                      ?_wireReadDataBlock 0026  
                               _SSP1MSK 0213                       SPI_Write@incoming 0022  
           __end_of_setGestureIntEnable 0D94                 ??_do_I2C_SEND_ADR_WRITE 0070  
       processGestureData@lr_ratio_last 0037             ??_do_I2C_SEND_RESTART_WRITE 0070  
                          readGesture@i 0059                      _i2c1_driver_TXData 0A13  
                  ?_setAmbientLightGain 0070                      _i2c1_driver_i2cISR 006A  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0C02  
                             _I2C_Start 09C7                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0A41  
                __size_of_decodeGesture 0190                     ?_i2c1_driver_TXData 0070  
           __size_of_PWM_Output_Disable 0003                            _Display_Name 0E91  
                       ??_I2C_Send_NACK 0020                                 ___awdiv 079E  
                       __size_of___wmul 001C                  ?i1_i2c1_driver_restart 0070  
                     ??_do_I2C_TX_EMPTY 0070                     ?_i2c1_driver_isNACK 0070  
                ?i1_i2c1_driver_startRX 0070                __end_of_wireReadDataByte 0C02  
                            _initialize 04C8                                 _getMode 0A79  
      __size_of_setLightIntLowThreshold 0027                      _setGestureLEDDrive 0E29  
                               __ptext1 04C8                                 __ptext2 0D15  
                               __ptext3 0AFD                                 __ptext4 0AEA  
                               __ptext5 0C9D                                 __ptext6 0C76  
                               __ptext7 0CEC                                 __ptext8 0C4F  
                               __ptext9 0E29             __size_ofi1_i2c1_driver_stop 0003  
                   __end_of_do_I2C_IDLE 0A0D               __end_of_wireReadDataBlock 0F62  
                   __end_of_do_I2C_RCEN 0A13                         __size_of_strlen 0018  
                 _OSCILLATOR_Initialize 0A59                               _T2CONbits 001F  
           __end_of_do_I2C_SEND_RESTART 09E7                          ??_mssp1_setIRQ 0070  
                  ??_i2c1_driver_TXData 0020                                 _setMode 0FB1  
              ??_PIN_MANAGER_Initialize 0020                     __end_of_I2C_ReStart 09BB  
                   ?_setGestureLEDDrive 0070                                 _printed 006E  
                       ?_mssp1_clearIRQ 0070                _do_I2C_SEND_RESTART_READ 09DB  
            __size_of_SYSTEM_Initialize 0018                                 clrloop0 0A1A  
                  __size_of_returnReset 0002                    end_of_initialization 0065  
                  ??_i2c1_driver_isNACK 0070                   ??_setAmbientLightGain 002A  
          __size_of_setProxIntLowThresh 0013                                 init_ram 0A1F  
          __end_of_i2c1_driver_sendNACK 09FF                                 initloop 0A20  
       __size_ofi1_i2c1_driver_sendNACK 0004                              ?_I2C_Start 0070  
         enableGestureSensor@interrupts 0031            __end_of_i2c1_driver_resetBus 099A  
         setGestureExitThresh@threshold 002B                    ??_setGestureLEDDrive 002A  
                    readGesture@gstatus 0055                            initialize@id 0031  
                      ??_setGestureGain 002A                  ??_setProxIntHighThresh 002A  
                      ??_setGestureMode 002A               _do_I2C_SEND_RESTART_WRITE 09DF  
                   Display_Name@string1 0025           __size_of_setGestureExitThresh 0013  
                               strlen@a 0023                                 strlen@s 0020  
                      ??_WDT_Initialize 0020                       _wireWriteDataByte 0B6D  
                            _returnStop 099B                __end_of_do_I2C_SEND_STOP 09EB  
                         ??_enablePower 0030                      ?_wireWriteDataByte 0026  
       setLightIntHighThreshold@val_low 002D          __size_of_setGestureEnterThresh 0013  
         __end_of_setGestureEnterThresh 0AD7                           _decodeGesture 0338  
                    _isGestureAvailable 0AB1                      _setGestureWaitTime 0C4F  
                             _SPI_Write 0B10                       __size_of_I2C_Stop 0003  
                           returnStop@p 0070                     ??_wireWriteDataByte 0029  
                      __CFG_FEXTOSC$OFF 0000                       _PWM_Output_Enable 09FF  
       processGestureData@ud_ratio_last 0035                     ?_isGestureAvailable 0070  
                   ?_setGestureWaitTime 0070                      ?_PWM_Output_Enable 0070  
                           _CCP1CONbits 0293                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
              __size_of_PWM1_Initialize 000C                     ??_PWM_Output_Enable 0020  
      __end_of_i2c1_driver_isBufferFull 0A41                             _do_I2C_IDLE 0A08  
                           _do_I2C_RCEN 0A0D               __end_of_wireWriteDataByte 0B88  
                        _I2C_Write_Byte 0B88                    ??_isGestureAvailable 0029  
                        __end_of___wmul 0BC0                    ??_setGestureWaitTime 002A  
                         __pidataCOMMON 07FF                             ?_initialize 0070  
                           _I2C_ReStart 09B8                          _ADC_Initialize 0A51  
                i1_i2c1_driver_sendNACK 09D7                  ?_OSCILLATOR_Initialize 0070  
              _setLightIntHighThreshold 0C76              __size_of_wireReadDataBlock 004A  
                       _gesture_motion_ 0168                         _SPI2_Initialize 0A33  
          __size_of_do_I2C_DO_NACK_STOP 0004             __size_of_processGestureData 02CF  
                        ?_decodeGesture 0070                          __end_of_strlen 0B6D  
               ?_do_I2C_DO_NACK_RESTART 0070                     start_initialization 002D  
                    setGestureGain@gain 002D                     _i2c_busCollisionISR 09B2  
       __size_of_PIN_MANAGER_Initialize 0036               __end_of_PWM_Output_Enable 0A03  
              ?i1_i2c1_driver_getRXData 0070                              ?_SPI_Write 0070  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 073A  
                   __end_of_enablePower 0AB1            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 0D3E  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1481 0039                 _processGestureData$1482 003B  
               _processGestureData$1483 003D                 _processGestureData$1484 003F  
                  ?_i2c_busCollisionISR 0070                        __CFG_LPBOREN$OFF 0000  
                  __end_of_mssp1_setIRQ 09AC                  __end_of_I2C_Write_Byte 0BA4  
                      ??_PMD_Initialize 0020         setLightIntLowThreshold@val_high 002E  
                              ??___wmul 0024                    ?_enableGestureSensor 0070  
                           _CCPTMRSbits 029F                           ??_readGesture 0051  
                __end_of_ADC_Initialize 0A59                           ?_do_I2C_RESET 0070  
                           __pdataBANK0 006F                             __pdataBANK2 0160  
                    setGestureMode@mode 002B                 _setLightIntLowThreshold 0C9D  
             setGestureIntEnable@enable 002C                setAmbientLightGain@drive 002B  
                           ?_returnStop 0070                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 09F7                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 09FB  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0076  
                             ___latbits 0002                               _adcResult 0079  
                  _i2c1_driver_resetBus 0999                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
              __size_of_TMR2_Initialize 0008                               _do_I2C_RX 0ED2  
                             _do_I2C_TX 0F62          __size_of_do_I2C_SEND_ADR_WRITE 0007  
         __size_ofi1_i2c1_driver_TXData 0005           __end_of_do_I2C_SEND_ADR_WRITE 0A33  
                 readGesture@fifo_data2 00A0               __size_of_i2c1_driver_open 000A  
                 readGesture@fifo_level 0058               __size_of_i2c1_driver_stop 0003  
                              ?_i2c_ISR 0070                     __size_of_initialize 0116  
                       _do_I2C_TX_EMPTY 0D94                  __size_of_handleGesture 0069  
                 ??_i2c_busCollisionISR 0070                   __end_of_fsmStateTable 1020  
                _PIN_MANAGER_Initialize 0E5B                 ??i1_i2c1_driver_restart 0070  
               ??i1_i2c1_driver_startRX 0070                         ?_I2C_Write_Byte 0070  
                 ??_enableGestureSensor 0030                 __end_of_SPI2_Initialize 0A3A  
                        ??_do_I2C_RESET 0070                                ?___awdiv 0026  
            __size_of_wireWriteDataByte 001B                ??_do_I2C_DO_ADDRESS_NACK 0070  
                       ?_ADC_Initialize 0070             _i2c1_driver_busCollisionISR 006C  
                   _setProxIntLowThresh 0AFD                   __end_of_do_I2C_DO_ACK 09EF  
                     ??_PWM1_Initialize 0020            ??_INTERRUPT_InterruptManager 0076  
              _i2c1_driver_isBufferFull 0A3A                                ?_getMode 0070  
                       ??_decodeGesture 0020                       ?_wireReadDataByte 0070  
            ??_do_I2C_SEND_RESTART_READ 0070                   ?_i2c1_driver_sendNACK 0070  
       __end_ofi1_i2c1_driver_getRXData 09A9                        ??_mssp1_clearIRQ 0070  
                           _enablePower 0AA3                      ??_wireReadDataByte 0026  
                   __end_of_readGesture 06D1                   ?_i2c1_driver_resetBus 0070  
    __size_of_do_I2C_SEND_RESTART_WRITE 0004                                _I2C_Stop 09CD  
              ??_resetGestureParameters 0020                                ?_setMode 002B  
            __size_of_PWM_Output_Enable 0004                              ?_do_I2C_RX 0070  
                            ?_do_I2C_TX 0070                        __CFG_WDTE$SWDTEN 0000  
                           ??_SPI_Write 0021                       _i2c1_driver_start 09C4  
                   __end_of_setLEDBoost 0DF7                     __end_of_setLEDDrive 0D15  
                  ?_setProxIntLowThresh 0070                   readGesture@bytes_read 0056  
                    ?_i2c1_driver_start 0070                          ___wmul@product 0024  
                              _LATCbits 010E                     __size_of_returnStop 0002  
                             clear_ram0 0A19                                _PIE0bits 0090  
                              _PIE1bits 0091            __size_of_setGestureIntEnable 002B  
            __end_of_PWM_Output_Disable 09D3                     _gesture_near_count_ 0060  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0027  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 0A97               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 09A3                       ??_PIN_MANAGER_IOC 0070  
                 __end_of_I2C_Send_NACK 09C4                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                              _ADCON0bits 009D  
                     ___wmul@multiplier 0020                       ?_do_I2C_SEND_STOP 0070  
             processGestureData@d_first 0046                           _handleGesture 06D1  
             __end_of_i2c1_driver_start 09C7                           ??_returnReset 0071  
                    ??_do_I2C_SEND_STOP 0070             __size_of_i2c1_driver_TXData 0006  
           __end_of_setAmbientLightGain 0BDE               processGestureData@l_first 0047  
     __end_of_do_I2C_SEND_RESTART_WRITE 09E3                 __end_of_do_I2C_TX_EMPTY 0DC5  
          __end_of_setGestureExitThresh 0AEA               processGestureData@r_first 0048  
             processGestureData@u_first 0045                   ??_setProxIntLowThresh 002A  
          __size_of_do_I2C_SEND_RESTART 0004             __size_of_i2c1_driver_isNACK 0008  
                     setGestureGain@val 002C                   __size_of_mssp1_setIRQ 0003  
                     ??_TMR2_Initialize 0020                     _do_I2C_DO_NACK_STOP 09EF  
                      __size_of_i2c_ISR 0026              ??_setLightIntHighThreshold 002C  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0070  
                          ?_do_I2C_RCEN 0070                       setGestureMode@val 002C  
                      ?_SPI2_Initialize 0070                 ?i1_i2c1_driver_sendNACK 0070  
               ??_OSCILLATOR_Initialize 0020                     _i2c1_driver_sendACK 09D3  
                      __size_of___awdiv 0052           __size_of_setProxIntHighThresh 0013  
                           _readGesture 05DE         __size_of_do_I2C_DO_ADDRESS_NACK 002B  
                   i2c1_driver_TXData@d 0020                  ??_i2c1_driver_sendNACK 0020  
                          ??_initialize 0030                            ?_I2C_ReStart 0070  
                   _i2c1_driver_restart 09B5        setLightIntLowThreshold@threshold 002A  
                  ?_do_I2C_DO_NACK_STOP 0070                     _i2c1_driver_startRX 09BE  
                        ?_handleGesture 0070            __end_of_do_I2C_SEND_ADR_READ 0A51  
                      __size_of_getMode 0009                  ??_i2c1_driver_resetBus 0070  
                  readGesture@fifo_data 0120                             _setLEDBoost 0DC5  
                           _setLEDDrive 0CEC         __size_of_resetGestureParameters 0018  
                          _mssp1_setIRQ 09A9         __end_of_setLightIntLowThreshold 0CC4  
                           ??_do_I2C_RX 0070                             ??_do_I2C_TX 0070  
                 setGestureLEDDrive@val 002C                        __size_of_setMode 004F  
                              __ptext10 0DF7                                __ptext11 0AD7  
                              __ptext20 079E                                __ptext12 0AC4  
                              __ptext21 0AB1                                __ptext13 0BC0  
                              __ptext30 0DC5                                __ptext22 0338  
                              __ptext14 0A82                                __ptext31 0C28  
                              __ptext23 09FF                                __ptext15 06D1  
                              __ptext40 0A13                                __ptext32 0D69  
                              __ptext24 09D0                                __ptext16 05DE  
                              __ptext41 09CD                                __ptext33 0B3D  
                              __ptext25 0E91                                __ptext17 0F18  
                              __ptext50 09BB                                __ptext42 09CA  
                              __ptext34 0AA3                                __ptext26 0B55  
                              __ptext18 0069                                __ptext51 09B8  
                              __ptext43 09C7                                __ptext35 0FB1  
                              __ptext27 0B10                                __ptext19 0BA4  
                              __ptext60 0A59                                __ptext52 09B5  
                              __ptext44 09C4                                __ptext36 0B6D  
                              __ptext28 07F0                                __ptext61 0A51  
                              __ptext53 0B25                                __ptext45 09C1  
                              __ptext37 0A79                                __ptext29 073A  
                              __ptext70 09F3                                __ptext54 09F7  
                              __ptext46 09FB                                __ptext38 0BDE  
                              __ptext71 09EF                                __ptext63 09B2  
                              __ptext55 0A69                                __ptext47 0A8C  
                              __ptext39 0B88                                __ptext80 0A08  
                              __ptext72 09EB                                __ptext64 09AF  
                              __ptext56 0A33                                __ptext48 09BE  
                              __ptext81 0A25                                __ptext73 0A0D  
                              __ptext65 0C02                                __ptext57 0A97  
                              __ptext49 0A3A                                __ptext90 0002  
                              __ptext82 0D94                                __ptext74 0A2C  
                              __ptext66 09AC                                __ptext58 0A61  
                              __ptext91 099B                                __ptext83 09A9  
                              __ptext75 0A49                                __ptext67 0ED2  
                              __ptext59 0E5B                                __ptext92 09A0  
                              __ptext84 0A41                                __ptext76 09E7  
                              __ptext68 0F62                                __ptext93 099D  
                              __ptext85 0A03                                __ptext77 09E3  
                              __ptext69 0D3E                                __ptext94 09D3  
                              __ptext86 09A6                                __ptext78 09DF  
                              __ptext95 0998                                __ptext87 09D7  
                              __ptext79 09DB                                __ptext88 0999  
                              __ptext89 09A3                   _setGestureEnterThresh 0AC4  
                          _SSP1CON1bits 0215                            _SSP1CON2bits 0216  
        setGestureEnterThresh@threshold 002B                            _SSP2CON1bits 021D  
                  ?_i2c1_driver_sendACK 0070                    __end_of_do_I2C_RESET 0A2C  
                  ?_i2c1_driver_restart 0070                     __end_of_returnReset 0004  
                      _i2c1_driver_open 0A82                        _i2c1_driver_stop 09CA  
                         __size_of_main 0028                    ?_i2c1_driver_startRX 0070  
                     ?_setProximityGain 0070          __size_of_i2c1_driver_getRXData 0003  
         __end_of_i2c1_driver_getRXData 09BE                      __end_of_initialize 05DE  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1490 002A                      _decodeGesture$1491 002C  
                    _decodeGesture$1492 002E                      _decodeGesture$1493 0030  
                    _decodeGesture$1486 0022                      _decodeGesture$1487 0024  
                    _decodeGesture$1488 0026                      _decodeGesture$1489 0028  
        __end_ofi1_i2c1_driver_sendNACK 09DB                                int$flags 007E  
    __end_of_INTERRUPT_InterruptManager 002B              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214             __size_of_isGestureAvailable 0013  
                         Display_Name@i 002A                     setProximityGain@val 002C  
      __end_of_do_I2C_SEND_RESTART_READ 09DF             __size_of_setGestureWaitTime 0027  
            __end_of_processGestureData 0338                            ??_returnStop 0071  
                          _SSP2STATbits 021C                   ??_do_I2C_DO_NACK_STOP 0070  
               __size_of_setGestureGain 0032                              _INTCONbits 000B  
               __size_of_setGestureMode 0027              __size_of_i2c1_driver_start 0003  
                setAmbientLightGain@val 002C                   ??_i2c1_driver_sendACK 0070  
                      ?_do_I2C_TX_EMPTY 0070                 __size_of_WDT_Initialize 0004  
                _do_I2C_DO_ADDRESS_NACK 0D3E                                intlevel1 0000  
                 ??_i2c1_driver_restart 0020                   ??_i2c1_driver_startRX 0020  
               ?_PIN_MANAGER_Initialize 0070                        ??_I2C_Write_Byte 0021  
                     __CFG_CLKOUTEN$OFF 0000                      __end_of_returnStop 099D  
                       _PWM1_Initialize 0A97                        ??_ADC_Initialize 0020  
                _resetGestureParameters 0B3D              ??_i2c1_driver_isBufferFull 0020  
                         ?_Display_Name 0025          __size_ofi1_i2c1_driver_restart 0003  
         __end_ofi1_i2c1_driver_restart 09A0          __size_ofi1_i2c1_driver_startRX 0003  
          __end_ofi1_i2c1_driver_TXData 0A08           __end_ofi1_i2c1_driver_startRX 09A6  
                  _setGestureExitThresh 0AD7                         ??_handleGesture 005B  
                         __pstringtext1 1000                           __pstringtext2 1030  
                         __pstringtext3 103D                           __pstringtext4 1049  
                         __pstringtext5 0000                              _SSP1DATPPS 0E21  
                          ?_enablePower 0070                              _SSP2DATPPS 0E1E  
                            _SSP1CLKPPS 0E20                     _setGestureIntEnable 0D69  
                            _SSP2CLKPPS 0E1D                        setLEDBoost@boost 002D  
                ?_setGestureEnterThresh 0070                             _returnReset 0002  
        __end_of_PIN_MANAGER_Initialize 0E91             __end_of_i2c_busCollisionISR 09B5  
             __size_of_wireReadDataByte 0024                        setLEDDrive@drive 002D  
                   processGestureData@i 004D                         _PIN_MANAGER_IOC 0998  
           __end_of_enableGestureSensor 079E                   _do_I2C_SEND_ADR_WRITE 0A2C  
                  ?_setGestureIntEnable 0070                    _do_I2C_SEND_ADR_READ 0A49  
      __end_of_setLightIntHighThreshold 0C9D                          ??_Display_Name 0027  
