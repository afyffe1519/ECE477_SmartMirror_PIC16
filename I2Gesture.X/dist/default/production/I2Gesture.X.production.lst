

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 30 13:12:30 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,delta=2
    77                           	psect	text61,local,class=CODE,merge=1,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,delta=2
    84                           	psect	text68,local,class=CODE,merge=1,delta=2
    85                           	psect	text69,local,class=CODE,merge=1,delta=2
    86                           	psect	text70,local,class=CODE,merge=1,delta=2
    87                           	psect	text71,local,class=CODE,merge=1,delta=2
    88                           	psect	text72,local,class=CODE,merge=1,delta=2
    89                           	psect	text73,local,class=CODE,merge=1,delta=2
    90                           	psect	text74,local,class=CODE,merge=1,delta=2
    91                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text82,local,class=CODE,merge=1,delta=2
    99                           	psect	text83,local,class=CODE,merge=1,delta=2
   100                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text87,local,class=CODE,merge=1,delta=2
   104                           	psect	text88,local,class=CODE,merge=1,delta=2
   105                           	psect	text89,local,class=CODE,merge=1,delta=2
   106                           	psect	text90,local,class=CODE,merge=1,delta=2
   107                           	dabs	1,0x7E,2
   108  0000                     
   109                           ; Version 2.05
   110                           ; Generated 20/12/2018 GMT
   111                           ; 
   112                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC16F18345 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0097                     	;# 
   186  009B                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  010C                     	;# 
   193  010D                     	;# 
   194  010E                     	;# 
   195  0111                     	;# 
   196  0112                     	;# 
   197  0113                     	;# 
   198  0114                     	;# 
   199  0115                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  0118                     	;# 
   203  0119                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0197                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0219                     	;# 
   253  021A                     	;# 
   254  021B                     	;# 
   255  021C                     	;# 
   256  021D                     	;# 
   257  021D                     	;# 
   258  021E                     	;# 
   259  021F                     	;# 
   260  028C                     	;# 
   261  028D                     	;# 
   262  028E                     	;# 
   263  0291                     	;# 
   264  0291                     	;# 
   265  0292                     	;# 
   266  0293                     	;# 
   267  0294                     	;# 
   268  0295                     	;# 
   269  0295                     	;# 
   270  0296                     	;# 
   271  0297                     	;# 
   272  0298                     	;# 
   273  029F                     	;# 
   274  030C                     	;# 
   275  030D                     	;# 
   276  030E                     	;# 
   277  0311                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0315                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0317                     	;# 
   286  0318                     	;# 
   287  038C                     	;# 
   288  038D                     	;# 
   289  038E                     	;# 
   290  0391                     	;# 
   291  0392                     	;# 
   292  0393                     	;# 
   293  0394                     	;# 
   294  0395                     	;# 
   295  0396                     	;# 
   296  0397                     	;# 
   297  0398                     	;# 
   298  0399                     	;# 
   299  039A                     	;# 
   300  039C                     	;# 
   301  039D                     	;# 
   302  039E                     	;# 
   303  039F                     	;# 
   304  0411                     	;# 
   305  0411                     	;# 
   306  0412                     	;# 
   307  0413                     	;# 
   308  0414                     	;# 
   309  0415                     	;# 
   310  0416                     	;# 
   311  0417                     	;# 
   312  0418                     	;# 
   313  0418                     	;# 
   314  0419                     	;# 
   315  041A                     	;# 
   316  041B                     	;# 
   317  041C                     	;# 
   318  041D                     	;# 
   319  041E                     	;# 
   320  041F                     	;# 
   321  0498                     	;# 
   322  0498                     	;# 
   323  0499                     	;# 
   324  049A                     	;# 
   325  049B                     	;# 
   326  049B                     	;# 
   327  049C                     	;# 
   328  049D                     	;# 
   329  049E                     	;# 
   330  049F                     	;# 
   331  0617                     	;# 
   332  0618                     	;# 
   333  0619                     	;# 
   334  0619                     	;# 
   335  061A                     	;# 
   336  061B                     	;# 
   337  061C                     	;# 
   338  061C                     	;# 
   339  061F                     	;# 
   340  0691                     	;# 
   341  0692                     	;# 
   342  0693                     	;# 
   343  0694                     	;# 
   344  0695                     	;# 
   345  0696                     	;# 
   346  0697                     	;# 
   347  0698                     	;# 
   348  0699                     	;# 
   349  0711                     	;# 
   350  0712                     	;# 
   351  0713                     	;# 
   352  0714                     	;# 
   353  0715                     	;# 
   354  0716                     	;# 
   355  0717                     	;# 
   356  0718                     	;# 
   357  0719                     	;# 
   358  0891                     	;# 
   359  0891                     	;# 
   360  0891                     	;# 
   361  0891                     	;# 
   362  0891                     	;# 
   363  0891                     	;# 
   364  0892                     	;# 
   365  0892                     	;# 
   366  0892                     	;# 
   367  0893                     	;# 
   368  0893                     	;# 
   369  0893                     	;# 
   370  0893                     	;# 
   371  0893                     	;# 
   372  0893                     	;# 
   373  0894                     	;# 
   374  0894                     	;# 
   375  0894                     	;# 
   376  0895                     	;# 
   377  0895                     	;# 
   378  0895                     	;# 
   379  0896                     	;# 
   380  0896                     	;# 
   381  0896                     	;# 
   382  089B                     	;# 
   383  0911                     	;# 
   384  0912                     	;# 
   385  0913                     	;# 
   386  0914                     	;# 
   387  0915                     	;# 
   388  0916                     	;# 
   389  0918                     	;# 
   390  0919                     	;# 
   391  091A                     	;# 
   392  091B                     	;# 
   393  091C                     	;# 
   394  091D                     	;# 
   395  091E                     	;# 
   396  091F                     	;# 
   397  0E0F                     	;# 
   398  0E10                     	;# 
   399  0E11                     	;# 
   400  0E12                     	;# 
   401  0E13                     	;# 
   402  0E14                     	;# 
   403  0E15                     	;# 
   404  0E16                     	;# 
   405  0E17                     	;# 
   406  0E18                     	;# 
   407  0E19                     	;# 
   408  0E1A                     	;# 
   409  0E1B                     	;# 
   410  0E1C                     	;# 
   411  0E1D                     	;# 
   412  0E1E                     	;# 
   413  0E1F                     	;# 
   414  0E20                     	;# 
   415  0E21                     	;# 
   416  0E22                     	;# 
   417  0E24                     	;# 
   418  0E25                     	;# 
   419  0E28                     	;# 
   420  0E29                     	;# 
   421  0E2A                     	;# 
   422  0E2B                     	;# 
   423  0E2C                     	;# 
   424  0E2D                     	;# 
   425  0E2E                     	;# 
   426  0E2F                     	;# 
   427  0E90                     	;# 
   428  0E91                     	;# 
   429  0E92                     	;# 
   430  0E94                     	;# 
   431  0E95                     	;# 
   432  0E9C                     	;# 
   433  0E9D                     	;# 
   434  0E9E                     	;# 
   435  0E9F                     	;# 
   436  0EA0                     	;# 
   437  0EA1                     	;# 
   438  0EA2                     	;# 
   439  0EA3                     	;# 
   440  0EA4                     	;# 
   441  0EA5                     	;# 
   442  0EA6                     	;# 
   443  0EA7                     	;# 
   444  0F0F                     	;# 
   445  0F10                     	;# 
   446  0F11                     	;# 
   447  0F12                     	;# 
   448  0F13                     	;# 
   449  0F14                     	;# 
   450  0F15                     	;# 
   451  0F16                     	;# 
   452  0F17                     	;# 
   453  0F18                     	;# 
   454  0F19                     	;# 
   455  0F1A                     	;# 
   456  0F1B                     	;# 
   457  0F1C                     	;# 
   458  0F1D                     	;# 
   459  0F1E                     	;# 
   460  0F1F                     	;# 
   461  0F20                     	;# 
   462  0F21                     	;# 
   463  0F22                     	;# 
   464  0F23                     	;# 
   465  0F24                     	;# 
   466  0F25                     	;# 
   467  0F26                     	;# 
   468  0F27                     	;# 
   469  0F28                     	;# 
   470  0F29                     	;# 
   471  0F2A                     	;# 
   472  0F2B                     	;# 
   473  0F2C                     	;# 
   474  0F2D                     	;# 
   475  0F2E                     	;# 
   476  0F2F                     	;# 
   477  0F30                     	;# 
   478  0F31                     	;# 
   479  0F32                     	;# 
   480  0F33                     	;# 
   481  0F34                     	;# 
   482  0F35                     	;# 
   483  0F36                     	;# 
   484  0F37                     	;# 
   485  0FE4                     	;# 
   486  0FE5                     	;# 
   487  0FE6                     	;# 
   488  0FE7                     	;# 
   489  0FE8                     	;# 
   490  0FE9                     	;# 
   491  0FEA                     	;# 
   492  0FEB                     	;# 
   493  0FED                     	;# 
   494  0FEE                     	;# 
   495  0FEF                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0008                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  001D                     	;# 
   528  001E                     	;# 
   529  001F                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  0090                     	;# 
   534  0091                     	;# 
   535  0092                     	;# 
   536  0093                     	;# 
   537  0094                     	;# 
   538  0097                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  009F                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  0111                     	;# 
   549  0112                     	;# 
   550  0113                     	;# 
   551  0114                     	;# 
   552  0115                     	;# 
   553  0116                     	;# 
   554  0117                     	;# 
   555  0118                     	;# 
   556  0119                     	;# 
   557  018C                     	;# 
   558  018D                     	;# 
   559  018E                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  0199                     	;# 
   563  0199                     	;# 
   564  019A                     	;# 
   565  019A                     	;# 
   566  019A                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019C                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019D                     	;# 
   577  019D                     	;# 
   578  019E                     	;# 
   579  019E                     	;# 
   580  019E                     	;# 
   581  019F                     	;# 
   582  019F                     	;# 
   583  019F                     	;# 
   584  019F                     	;# 
   585  019F                     	;# 
   586  020C                     	;# 
   587  020D                     	;# 
   588  020E                     	;# 
   589  0211                     	;# 
   590  0211                     	;# 
   591  0212                     	;# 
   592  0212                     	;# 
   593  0213                     	;# 
   594  0213                     	;# 
   595  0214                     	;# 
   596  0214                     	;# 
   597  0215                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0216                     	;# 
   602  0216                     	;# 
   603  0217                     	;# 
   604  0217                     	;# 
   605  0219                     	;# 
   606  021A                     	;# 
   607  021B                     	;# 
   608  021C                     	;# 
   609  021D                     	;# 
   610  021D                     	;# 
   611  021E                     	;# 
   612  021F                     	;# 
   613  028C                     	;# 
   614  028D                     	;# 
   615  028E                     	;# 
   616  0291                     	;# 
   617  0291                     	;# 
   618  0292                     	;# 
   619  0293                     	;# 
   620  0294                     	;# 
   621  0295                     	;# 
   622  0295                     	;# 
   623  0296                     	;# 
   624  0297                     	;# 
   625  0298                     	;# 
   626  029F                     	;# 
   627  030C                     	;# 
   628  030D                     	;# 
   629  030E                     	;# 
   630  0311                     	;# 
   631  0311                     	;# 
   632  0312                     	;# 
   633  0313                     	;# 
   634  0314                     	;# 
   635  0315                     	;# 
   636  0315                     	;# 
   637  0316                     	;# 
   638  0317                     	;# 
   639  0318                     	;# 
   640  038C                     	;# 
   641  038D                     	;# 
   642  038E                     	;# 
   643  0391                     	;# 
   644  0392                     	;# 
   645  0393                     	;# 
   646  0394                     	;# 
   647  0395                     	;# 
   648  0396                     	;# 
   649  0397                     	;# 
   650  0398                     	;# 
   651  0399                     	;# 
   652  039A                     	;# 
   653  039C                     	;# 
   654  039D                     	;# 
   655  039E                     	;# 
   656  039F                     	;# 
   657  0411                     	;# 
   658  0411                     	;# 
   659  0412                     	;# 
   660  0413                     	;# 
   661  0414                     	;# 
   662  0415                     	;# 
   663  0416                     	;# 
   664  0417                     	;# 
   665  0418                     	;# 
   666  0418                     	;# 
   667  0419                     	;# 
   668  041A                     	;# 
   669  041B                     	;# 
   670  041C                     	;# 
   671  041D                     	;# 
   672  041E                     	;# 
   673  041F                     	;# 
   674  0498                     	;# 
   675  0498                     	;# 
   676  0499                     	;# 
   677  049A                     	;# 
   678  049B                     	;# 
   679  049B                     	;# 
   680  049C                     	;# 
   681  049D                     	;# 
   682  049E                     	;# 
   683  049F                     	;# 
   684  0617                     	;# 
   685  0618                     	;# 
   686  0619                     	;# 
   687  0619                     	;# 
   688  061A                     	;# 
   689  061B                     	;# 
   690  061C                     	;# 
   691  061C                     	;# 
   692  061F                     	;# 
   693  0691                     	;# 
   694  0692                     	;# 
   695  0693                     	;# 
   696  0694                     	;# 
   697  0695                     	;# 
   698  0696                     	;# 
   699  0697                     	;# 
   700  0698                     	;# 
   701  0699                     	;# 
   702  0711                     	;# 
   703  0712                     	;# 
   704  0713                     	;# 
   705  0714                     	;# 
   706  0715                     	;# 
   707  0716                     	;# 
   708  0717                     	;# 
   709  0718                     	;# 
   710  0719                     	;# 
   711  0891                     	;# 
   712  0891                     	;# 
   713  0891                     	;# 
   714  0891                     	;# 
   715  0891                     	;# 
   716  0891                     	;# 
   717  0892                     	;# 
   718  0892                     	;# 
   719  0892                     	;# 
   720  0893                     	;# 
   721  0893                     	;# 
   722  0893                     	;# 
   723  0893                     	;# 
   724  0893                     	;# 
   725  0893                     	;# 
   726  0894                     	;# 
   727  0894                     	;# 
   728  0894                     	;# 
   729  0895                     	;# 
   730  0895                     	;# 
   731  0895                     	;# 
   732  0896                     	;# 
   733  0896                     	;# 
   734  0896                     	;# 
   735  089B                     	;# 
   736  0911                     	;# 
   737  0912                     	;# 
   738  0913                     	;# 
   739  0914                     	;# 
   740  0915                     	;# 
   741  0916                     	;# 
   742  0918                     	;# 
   743  0919                     	;# 
   744  091A                     	;# 
   745  091B                     	;# 
   746  091C                     	;# 
   747  091D                     	;# 
   748  091E                     	;# 
   749  091F                     	;# 
   750  0E0F                     	;# 
   751  0E10                     	;# 
   752  0E11                     	;# 
   753  0E12                     	;# 
   754  0E13                     	;# 
   755  0E14                     	;# 
   756  0E15                     	;# 
   757  0E16                     	;# 
   758  0E17                     	;# 
   759  0E18                     	;# 
   760  0E19                     	;# 
   761  0E1A                     	;# 
   762  0E1B                     	;# 
   763  0E1C                     	;# 
   764  0E1D                     	;# 
   765  0E1E                     	;# 
   766  0E1F                     	;# 
   767  0E20                     	;# 
   768  0E21                     	;# 
   769  0E22                     	;# 
   770  0E24                     	;# 
   771  0E25                     	;# 
   772  0E28                     	;# 
   773  0E29                     	;# 
   774  0E2A                     	;# 
   775  0E2B                     	;# 
   776  0E2C                     	;# 
   777  0E2D                     	;# 
   778  0E2E                     	;# 
   779  0E2F                     	;# 
   780  0E90                     	;# 
   781  0E91                     	;# 
   782  0E92                     	;# 
   783  0E94                     	;# 
   784  0E95                     	;# 
   785  0E9C                     	;# 
   786  0E9D                     	;# 
   787  0E9E                     	;# 
   788  0E9F                     	;# 
   789  0EA0                     	;# 
   790  0EA1                     	;# 
   791  0EA2                     	;# 
   792  0EA3                     	;# 
   793  0EA4                     	;# 
   794  0EA5                     	;# 
   795  0EA6                     	;# 
   796  0EA7                     	;# 
   797  0F0F                     	;# 
   798  0F10                     	;# 
   799  0F11                     	;# 
   800  0F12                     	;# 
   801  0F13                     	;# 
   802  0F14                     	;# 
   803  0F15                     	;# 
   804  0F16                     	;# 
   805  0F17                     	;# 
   806  0F18                     	;# 
   807  0F19                     	;# 
   808  0F1A                     	;# 
   809  0F1B                     	;# 
   810  0F1C                     	;# 
   811  0F1D                     	;# 
   812  0F1E                     	;# 
   813  0F1F                     	;# 
   814  0F20                     	;# 
   815  0F21                     	;# 
   816  0F22                     	;# 
   817  0F23                     	;# 
   818  0F24                     	;# 
   819  0F25                     	;# 
   820  0F26                     	;# 
   821  0F27                     	;# 
   822  0F28                     	;# 
   823  0F29                     	;# 
   824  0F2A                     	;# 
   825  0F2B                     	;# 
   826  0F2C                     	;# 
   827  0F2D                     	;# 
   828  0F2E                     	;# 
   829  0F2F                     	;# 
   830  0F30                     	;# 
   831  0F31                     	;# 
   832  0F32                     	;# 
   833  0F33                     	;# 
   834  0F34                     	;# 
   835  0F35                     	;# 
   836  0F36                     	;# 
   837  0F37                     	;# 
   838  0FE4                     	;# 
   839  0FE5                     	;# 
   840  0FE6                     	;# 
   841  0FE7                     	;# 
   842  0FE8                     	;# 
   843  0FE9                     	;# 
   844  0FEA                     	;# 
   845  0FEB                     	;# 
   846  0FED                     	;# 
   847  0FEE                     	;# 
   848  0FEF                     	;# 
   849  0000                     	;# 
   850  0001                     	;# 
   851  0002                     	;# 
   852  0003                     	;# 
   853  0004                     	;# 
   854  0005                     	;# 
   855  0006                     	;# 
   856  0007                     	;# 
   857  0008                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  0010                     	;# 
   865  0011                     	;# 
   866  0012                     	;# 
   867  0013                     	;# 
   868  0014                     	;# 
   869  0015                     	;# 
   870  0015                     	;# 
   871  0016                     	;# 
   872  0016                     	;# 
   873  0017                     	;# 
   874  0018                     	;# 
   875  0019                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001C                     	;# 
   880  001D                     	;# 
   881  001E                     	;# 
   882  001F                     	;# 
   883  008C                     	;# 
   884  008D                     	;# 
   885  008E                     	;# 
   886  0090                     	;# 
   887  0091                     	;# 
   888  0092                     	;# 
   889  0093                     	;# 
   890  0094                     	;# 
   891  0097                     	;# 
   892  009B                     	;# 
   893  009B                     	;# 
   894  009C                     	;# 
   895  009D                     	;# 
   896  009E                     	;# 
   897  009F                     	;# 
   898  010C                     	;# 
   899  010D                     	;# 
   900  010E                     	;# 
   901  0111                     	;# 
   902  0112                     	;# 
   903  0113                     	;# 
   904  0114                     	;# 
   905  0115                     	;# 
   906  0116                     	;# 
   907  0117                     	;# 
   908  0118                     	;# 
   909  0119                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0197                     	;# 
   914  0199                     	;# 
   915  0199                     	;# 
   916  0199                     	;# 
   917  019A                     	;# 
   918  019A                     	;# 
   919  019A                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019B                     	;# 
   925  019C                     	;# 
   926  019C                     	;# 
   927  019C                     	;# 
   928  019D                     	;# 
   929  019D                     	;# 
   930  019D                     	;# 
   931  019E                     	;# 
   932  019E                     	;# 
   933  019E                     	;# 
   934  019F                     	;# 
   935  019F                     	;# 
   936  019F                     	;# 
   937  019F                     	;# 
   938  019F                     	;# 
   939  020C                     	;# 
   940  020D                     	;# 
   941  020E                     	;# 
   942  0211                     	;# 
   943  0211                     	;# 
   944  0212                     	;# 
   945  0212                     	;# 
   946  0213                     	;# 
   947  0213                     	;# 
   948  0214                     	;# 
   949  0214                     	;# 
   950  0215                     	;# 
   951  0215                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0216                     	;# 
   955  0216                     	;# 
   956  0217                     	;# 
   957  0217                     	;# 
   958  0219                     	;# 
   959  021A                     	;# 
   960  021B                     	;# 
   961  021C                     	;# 
   962  021D                     	;# 
   963  021D                     	;# 
   964  021E                     	;# 
   965  021F                     	;# 
   966  028C                     	;# 
   967  028D                     	;# 
   968  028E                     	;# 
   969  0291                     	;# 
   970  0291                     	;# 
   971  0292                     	;# 
   972  0293                     	;# 
   973  0294                     	;# 
   974  0295                     	;# 
   975  0295                     	;# 
   976  0296                     	;# 
   977  0297                     	;# 
   978  0298                     	;# 
   979  029F                     	;# 
   980  030C                     	;# 
   981  030D                     	;# 
   982  030E                     	;# 
   983  0311                     	;# 
   984  0311                     	;# 
   985  0312                     	;# 
   986  0313                     	;# 
   987  0314                     	;# 
   988  0315                     	;# 
   989  0315                     	;# 
   990  0316                     	;# 
   991  0317                     	;# 
   992  0318                     	;# 
   993  038C                     	;# 
   994  038D                     	;# 
   995  038E                     	;# 
   996  0391                     	;# 
   997  0392                     	;# 
   998  0393                     	;# 
   999  0394                     	;# 
  1000  0395                     	;# 
  1001  0396                     	;# 
  1002  0397                     	;# 
  1003  0398                     	;# 
  1004  0399                     	;# 
  1005  039A                     	;# 
  1006  039C                     	;# 
  1007  039D                     	;# 
  1008  039E                     	;# 
  1009  039F                     	;# 
  1010  0411                     	;# 
  1011  0411                     	;# 
  1012  0412                     	;# 
  1013  0413                     	;# 
  1014  0414                     	;# 
  1015  0415                     	;# 
  1016  0416                     	;# 
  1017  0417                     	;# 
  1018  0418                     	;# 
  1019  0418                     	;# 
  1020  0419                     	;# 
  1021  041A                     	;# 
  1022  041B                     	;# 
  1023  041C                     	;# 
  1024  041D                     	;# 
  1025  041E                     	;# 
  1026  041F                     	;# 
  1027  0498                     	;# 
  1028  0498                     	;# 
  1029  0499                     	;# 
  1030  049A                     	;# 
  1031  049B                     	;# 
  1032  049B                     	;# 
  1033  049C                     	;# 
  1034  049D                     	;# 
  1035  049E                     	;# 
  1036  049F                     	;# 
  1037  0617                     	;# 
  1038  0618                     	;# 
  1039  0619                     	;# 
  1040  0619                     	;# 
  1041  061A                     	;# 
  1042  061B                     	;# 
  1043  061C                     	;# 
  1044  061C                     	;# 
  1045  061F                     	;# 
  1046  0691                     	;# 
  1047  0692                     	;# 
  1048  0693                     	;# 
  1049  0694                     	;# 
  1050  0695                     	;# 
  1051  0696                     	;# 
  1052  0697                     	;# 
  1053  0698                     	;# 
  1054  0699                     	;# 
  1055  0711                     	;# 
  1056  0712                     	;# 
  1057  0713                     	;# 
  1058  0714                     	;# 
  1059  0715                     	;# 
  1060  0716                     	;# 
  1061  0717                     	;# 
  1062  0718                     	;# 
  1063  0719                     	;# 
  1064  0891                     	;# 
  1065  0891                     	;# 
  1066  0891                     	;# 
  1067  0891                     	;# 
  1068  0891                     	;# 
  1069  0891                     	;# 
  1070  0892                     	;# 
  1071  0892                     	;# 
  1072  0892                     	;# 
  1073  0893                     	;# 
  1074  0893                     	;# 
  1075  0893                     	;# 
  1076  0893                     	;# 
  1077  0893                     	;# 
  1078  0893                     	;# 
  1079  0894                     	;# 
  1080  0894                     	;# 
  1081  0894                     	;# 
  1082  0895                     	;# 
  1083  0895                     	;# 
  1084  0895                     	;# 
  1085  0896                     	;# 
  1086  0896                     	;# 
  1087  0896                     	;# 
  1088  089B                     	;# 
  1089  0911                     	;# 
  1090  0912                     	;# 
  1091  0913                     	;# 
  1092  0914                     	;# 
  1093  0915                     	;# 
  1094  0916                     	;# 
  1095  0918                     	;# 
  1096  0919                     	;# 
  1097  091A                     	;# 
  1098  091B                     	;# 
  1099  091C                     	;# 
  1100  091D                     	;# 
  1101  091E                     	;# 
  1102  091F                     	;# 
  1103  0E0F                     	;# 
  1104  0E10                     	;# 
  1105  0E11                     	;# 
  1106  0E12                     	;# 
  1107  0E13                     	;# 
  1108  0E14                     	;# 
  1109  0E15                     	;# 
  1110  0E16                     	;# 
  1111  0E17                     	;# 
  1112  0E18                     	;# 
  1113  0E19                     	;# 
  1114  0E1A                     	;# 
  1115  0E1B                     	;# 
  1116  0E1C                     	;# 
  1117  0E1D                     	;# 
  1118  0E1E                     	;# 
  1119  0E1F                     	;# 
  1120  0E20                     	;# 
  1121  0E21                     	;# 
  1122  0E22                     	;# 
  1123  0E24                     	;# 
  1124  0E25                     	;# 
  1125  0E28                     	;# 
  1126  0E29                     	;# 
  1127  0E2A                     	;# 
  1128  0E2B                     	;# 
  1129  0E2C                     	;# 
  1130  0E2D                     	;# 
  1131  0E2E                     	;# 
  1132  0E2F                     	;# 
  1133  0E90                     	;# 
  1134  0E91                     	;# 
  1135  0E92                     	;# 
  1136  0E94                     	;# 
  1137  0E95                     	;# 
  1138  0E9C                     	;# 
  1139  0E9D                     	;# 
  1140  0E9E                     	;# 
  1141  0E9F                     	;# 
  1142  0EA0                     	;# 
  1143  0EA1                     	;# 
  1144  0EA2                     	;# 
  1145  0EA3                     	;# 
  1146  0EA4                     	;# 
  1147  0EA5                     	;# 
  1148  0EA6                     	;# 
  1149  0EA7                     	;# 
  1150  0F0F                     	;# 
  1151  0F10                     	;# 
  1152  0F11                     	;# 
  1153  0F12                     	;# 
  1154  0F13                     	;# 
  1155  0F14                     	;# 
  1156  0F15                     	;# 
  1157  0F16                     	;# 
  1158  0F17                     	;# 
  1159  0F18                     	;# 
  1160  0F19                     	;# 
  1161  0F1A                     	;# 
  1162  0F1B                     	;# 
  1163  0F1C                     	;# 
  1164  0F1D                     	;# 
  1165  0F1E                     	;# 
  1166  0F1F                     	;# 
  1167  0F20                     	;# 
  1168  0F21                     	;# 
  1169  0F22                     	;# 
  1170  0F23                     	;# 
  1171  0F24                     	;# 
  1172  0F25                     	;# 
  1173  0F26                     	;# 
  1174  0F27                     	;# 
  1175  0F28                     	;# 
  1176  0F29                     	;# 
  1177  0F2A                     	;# 
  1178  0F2B                     	;# 
  1179  0F2C                     	;# 
  1180  0F2D                     	;# 
  1181  0F2E                     	;# 
  1182  0F2F                     	;# 
  1183  0F30                     	;# 
  1184  0F31                     	;# 
  1185  0F32                     	;# 
  1186  0F33                     	;# 
  1187  0F34                     	;# 
  1188  0F35                     	;# 
  1189  0F36                     	;# 
  1190  0F37                     	;# 
  1191  0FE4                     	;# 
  1192  0FE5                     	;# 
  1193  0FE6                     	;# 
  1194  0FE7                     	;# 
  1195  0FE8                     	;# 
  1196  0FE9                     	;# 
  1197  0FEA                     	;# 
  1198  0FEB                     	;# 
  1199  0FED                     	;# 
  1200  0FEE                     	;# 
  1201  0FEF                     	;# 
  1202  0000                     	;# 
  1203  0001                     	;# 
  1204  0002                     	;# 
  1205  0003                     	;# 
  1206  0004                     	;# 
  1207  0005                     	;# 
  1208  0006                     	;# 
  1209  0007                     	;# 
  1210  0008                     	;# 
  1211  0009                     	;# 
  1212  000A                     	;# 
  1213  000B                     	;# 
  1214  000C                     	;# 
  1215  000D                     	;# 
  1216  000E                     	;# 
  1217  0010                     	;# 
  1218  0011                     	;# 
  1219  0012                     	;# 
  1220  0013                     	;# 
  1221  0014                     	;# 
  1222  0015                     	;# 
  1223  0015                     	;# 
  1224  0016                     	;# 
  1225  0016                     	;# 
  1226  0017                     	;# 
  1227  0018                     	;# 
  1228  0019                     	;# 
  1229  0019                     	;# 
  1230  001A                     	;# 
  1231  001B                     	;# 
  1232  001C                     	;# 
  1233  001D                     	;# 
  1234  001E                     	;# 
  1235  001F                     	;# 
  1236  008C                     	;# 
  1237  008D                     	;# 
  1238  008E                     	;# 
  1239  0090                     	;# 
  1240  0091                     	;# 
  1241  0092                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0097                     	;# 
  1245  009B                     	;# 
  1246  009B                     	;# 
  1247  009C                     	;# 
  1248  009D                     	;# 
  1249  009E                     	;# 
  1250  009F                     	;# 
  1251  010C                     	;# 
  1252  010D                     	;# 
  1253  010E                     	;# 
  1254  0111                     	;# 
  1255  0112                     	;# 
  1256  0113                     	;# 
  1257  0114                     	;# 
  1258  0115                     	;# 
  1259  0116                     	;# 
  1260  0117                     	;# 
  1261  0118                     	;# 
  1262  0119                     	;# 
  1263  018C                     	;# 
  1264  018D                     	;# 
  1265  018E                     	;# 
  1266  0197                     	;# 
  1267  0199                     	;# 
  1268  0199                     	;# 
  1269  0199                     	;# 
  1270  019A                     	;# 
  1271  019A                     	;# 
  1272  019A                     	;# 
  1273  019B                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019C                     	;# 
  1279  019C                     	;# 
  1280  019C                     	;# 
  1281  019D                     	;# 
  1282  019D                     	;# 
  1283  019D                     	;# 
  1284  019E                     	;# 
  1285  019E                     	;# 
  1286  019E                     	;# 
  1287  019F                     	;# 
  1288  019F                     	;# 
  1289  019F                     	;# 
  1290  019F                     	;# 
  1291  019F                     	;# 
  1292  020C                     	;# 
  1293  020D                     	;# 
  1294  020E                     	;# 
  1295  0211                     	;# 
  1296  0211                     	;# 
  1297  0212                     	;# 
  1298  0212                     	;# 
  1299  0213                     	;# 
  1300  0213                     	;# 
  1301  0214                     	;# 
  1302  0214                     	;# 
  1303  0215                     	;# 
  1304  0215                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0216                     	;# 
  1308  0216                     	;# 
  1309  0217                     	;# 
  1310  0217                     	;# 
  1311  0219                     	;# 
  1312  021A                     	;# 
  1313  021B                     	;# 
  1314  021C                     	;# 
  1315  021D                     	;# 
  1316  021D                     	;# 
  1317  021E                     	;# 
  1318  021F                     	;# 
  1319  028C                     	;# 
  1320  028D                     	;# 
  1321  028E                     	;# 
  1322  0291                     	;# 
  1323  0291                     	;# 
  1324  0292                     	;# 
  1325  0293                     	;# 
  1326  0294                     	;# 
  1327  0295                     	;# 
  1328  0295                     	;# 
  1329  0296                     	;# 
  1330  0297                     	;# 
  1331  0298                     	;# 
  1332  029F                     	;# 
  1333  030C                     	;# 
  1334  030D                     	;# 
  1335  030E                     	;# 
  1336  0311                     	;# 
  1337  0311                     	;# 
  1338  0312                     	;# 
  1339  0313                     	;# 
  1340  0314                     	;# 
  1341  0315                     	;# 
  1342  0315                     	;# 
  1343  0316                     	;# 
  1344  0317                     	;# 
  1345  0318                     	;# 
  1346  038C                     	;# 
  1347  038D                     	;# 
  1348  038E                     	;# 
  1349  0391                     	;# 
  1350  0392                     	;# 
  1351  0393                     	;# 
  1352  0394                     	;# 
  1353  0395                     	;# 
  1354  0396                     	;# 
  1355  0397                     	;# 
  1356  0398                     	;# 
  1357  0399                     	;# 
  1358  039A                     	;# 
  1359  039C                     	;# 
  1360  039D                     	;# 
  1361  039E                     	;# 
  1362  039F                     	;# 
  1363  0411                     	;# 
  1364  0411                     	;# 
  1365  0412                     	;# 
  1366  0413                     	;# 
  1367  0414                     	;# 
  1368  0415                     	;# 
  1369  0416                     	;# 
  1370  0417                     	;# 
  1371  0418                     	;# 
  1372  0418                     	;# 
  1373  0419                     	;# 
  1374  041A                     	;# 
  1375  041B                     	;# 
  1376  041C                     	;# 
  1377  041D                     	;# 
  1378  041E                     	;# 
  1379  041F                     	;# 
  1380  0498                     	;# 
  1381  0498                     	;# 
  1382  0499                     	;# 
  1383  049A                     	;# 
  1384  049B                     	;# 
  1385  049B                     	;# 
  1386  049C                     	;# 
  1387  049D                     	;# 
  1388  049E                     	;# 
  1389  049F                     	;# 
  1390  0617                     	;# 
  1391  0618                     	;# 
  1392  0619                     	;# 
  1393  0619                     	;# 
  1394  061A                     	;# 
  1395  061B                     	;# 
  1396  061C                     	;# 
  1397  061C                     	;# 
  1398  061F                     	;# 
  1399  0691                     	;# 
  1400  0692                     	;# 
  1401  0693                     	;# 
  1402  0694                     	;# 
  1403  0695                     	;# 
  1404  0696                     	;# 
  1405  0697                     	;# 
  1406  0698                     	;# 
  1407  0699                     	;# 
  1408  0711                     	;# 
  1409  0712                     	;# 
  1410  0713                     	;# 
  1411  0714                     	;# 
  1412  0715                     	;# 
  1413  0716                     	;# 
  1414  0717                     	;# 
  1415  0718                     	;# 
  1416  0719                     	;# 
  1417  0891                     	;# 
  1418  0891                     	;# 
  1419  0891                     	;# 
  1420  0891                     	;# 
  1421  0891                     	;# 
  1422  0891                     	;# 
  1423  0892                     	;# 
  1424  0892                     	;# 
  1425  0892                     	;# 
  1426  0893                     	;# 
  1427  0893                     	;# 
  1428  0893                     	;# 
  1429  0893                     	;# 
  1430  0893                     	;# 
  1431  0893                     	;# 
  1432  0894                     	;# 
  1433  0894                     	;# 
  1434  0894                     	;# 
  1435  0895                     	;# 
  1436  0895                     	;# 
  1437  0895                     	;# 
  1438  0896                     	;# 
  1439  0896                     	;# 
  1440  0896                     	;# 
  1441  089B                     	;# 
  1442  0911                     	;# 
  1443  0912                     	;# 
  1444  0913                     	;# 
  1445  0914                     	;# 
  1446  0915                     	;# 
  1447  0916                     	;# 
  1448  0918                     	;# 
  1449  0919                     	;# 
  1450  091A                     	;# 
  1451  091B                     	;# 
  1452  091C                     	;# 
  1453  091D                     	;# 
  1454  091E                     	;# 
  1455  091F                     	;# 
  1456  0E0F                     	;# 
  1457  0E10                     	;# 
  1458  0E11                     	;# 
  1459  0E12                     	;# 
  1460  0E13                     	;# 
  1461  0E14                     	;# 
  1462  0E15                     	;# 
  1463  0E16                     	;# 
  1464  0E17                     	;# 
  1465  0E18                     	;# 
  1466  0E19                     	;# 
  1467  0E1A                     	;# 
  1468  0E1B                     	;# 
  1469  0E1C                     	;# 
  1470  0E1D                     	;# 
  1471  0E1E                     	;# 
  1472  0E1F                     	;# 
  1473  0E20                     	;# 
  1474  0E21                     	;# 
  1475  0E22                     	;# 
  1476  0E24                     	;# 
  1477  0E25                     	;# 
  1478  0E28                     	;# 
  1479  0E29                     	;# 
  1480  0E2A                     	;# 
  1481  0E2B                     	;# 
  1482  0E2C                     	;# 
  1483  0E2D                     	;# 
  1484  0E2E                     	;# 
  1485  0E2F                     	;# 
  1486  0E90                     	;# 
  1487  0E91                     	;# 
  1488  0E92                     	;# 
  1489  0E94                     	;# 
  1490  0E95                     	;# 
  1491  0E9C                     	;# 
  1492  0E9D                     	;# 
  1493  0E9E                     	;# 
  1494  0E9F                     	;# 
  1495  0EA0                     	;# 
  1496  0EA1                     	;# 
  1497  0EA2                     	;# 
  1498  0EA3                     	;# 
  1499  0EA4                     	;# 
  1500  0EA5                     	;# 
  1501  0EA6                     	;# 
  1502  0EA7                     	;# 
  1503  0F0F                     	;# 
  1504  0F10                     	;# 
  1505  0F11                     	;# 
  1506  0F12                     	;# 
  1507  0F13                     	;# 
  1508  0F14                     	;# 
  1509  0F15                     	;# 
  1510  0F16                     	;# 
  1511  0F17                     	;# 
  1512  0F18                     	;# 
  1513  0F19                     	;# 
  1514  0F1A                     	;# 
  1515  0F1B                     	;# 
  1516  0F1C                     	;# 
  1517  0F1D                     	;# 
  1518  0F1E                     	;# 
  1519  0F1F                     	;# 
  1520  0F20                     	;# 
  1521  0F21                     	;# 
  1522  0F22                     	;# 
  1523  0F23                     	;# 
  1524  0F24                     	;# 
  1525  0F25                     	;# 
  1526  0F26                     	;# 
  1527  0F27                     	;# 
  1528  0F28                     	;# 
  1529  0F29                     	;# 
  1530  0F2A                     	;# 
  1531  0F2B                     	;# 
  1532  0F2C                     	;# 
  1533  0F2D                     	;# 
  1534  0F2E                     	;# 
  1535  0F2F                     	;# 
  1536  0F30                     	;# 
  1537  0F31                     	;# 
  1538  0F32                     	;# 
  1539  0F33                     	;# 
  1540  0F34                     	;# 
  1541  0F35                     	;# 
  1542  0F36                     	;# 
  1543  0F37                     	;# 
  1544  0FE4                     	;# 
  1545  0FE5                     	;# 
  1546  0FE6                     	;# 
  1547  0FE7                     	;# 
  1548  0FE8                     	;# 
  1549  0FE9                     	;# 
  1550  0FEA                     	;# 
  1551  0FEB                     	;# 
  1552  0FED                     	;# 
  1553  0FEE                     	;# 
  1554  0FEF                     	;# 
  1555  0000                     	;# 
  1556  0001                     	;# 
  1557  0002                     	;# 
  1558  0003                     	;# 
  1559  0004                     	;# 
  1560  0005                     	;# 
  1561  0006                     	;# 
  1562  0007                     	;# 
  1563  0008                     	;# 
  1564  0009                     	;# 
  1565  000A                     	;# 
  1566  000B                     	;# 
  1567  000C                     	;# 
  1568  000D                     	;# 
  1569  000E                     	;# 
  1570  0010                     	;# 
  1571  0011                     	;# 
  1572  0012                     	;# 
  1573  0013                     	;# 
  1574  0014                     	;# 
  1575  0015                     	;# 
  1576  0015                     	;# 
  1577  0016                     	;# 
  1578  0016                     	;# 
  1579  0017                     	;# 
  1580  0018                     	;# 
  1581  0019                     	;# 
  1582  0019                     	;# 
  1583  001A                     	;# 
  1584  001B                     	;# 
  1585  001C                     	;# 
  1586  001D                     	;# 
  1587  001E                     	;# 
  1588  001F                     	;# 
  1589  008C                     	;# 
  1590  008D                     	;# 
  1591  008E                     	;# 
  1592  0090                     	;# 
  1593  0091                     	;# 
  1594  0092                     	;# 
  1595  0093                     	;# 
  1596  0094                     	;# 
  1597  0097                     	;# 
  1598  009B                     	;# 
  1599  009B                     	;# 
  1600  009C                     	;# 
  1601  009D                     	;# 
  1602  009E                     	;# 
  1603  009F                     	;# 
  1604  010C                     	;# 
  1605  010D                     	;# 
  1606  010E                     	;# 
  1607  0111                     	;# 
  1608  0112                     	;# 
  1609  0113                     	;# 
  1610  0114                     	;# 
  1611  0115                     	;# 
  1612  0116                     	;# 
  1613  0117                     	;# 
  1614  0118                     	;# 
  1615  0119                     	;# 
  1616  018C                     	;# 
  1617  018D                     	;# 
  1618  018E                     	;# 
  1619  0197                     	;# 
  1620  0199                     	;# 
  1621  0199                     	;# 
  1622  0199                     	;# 
  1623  019A                     	;# 
  1624  019A                     	;# 
  1625  019A                     	;# 
  1626  019B                     	;# 
  1627  019B                     	;# 
  1628  019B                     	;# 
  1629  019B                     	;# 
  1630  019B                     	;# 
  1631  019C                     	;# 
  1632  019C                     	;# 
  1633  019C                     	;# 
  1634  019D                     	;# 
  1635  019D                     	;# 
  1636  019D                     	;# 
  1637  019E                     	;# 
  1638  019E                     	;# 
  1639  019E                     	;# 
  1640  019F                     	;# 
  1641  019F                     	;# 
  1642  019F                     	;# 
  1643  019F                     	;# 
  1644  019F                     	;# 
  1645  020C                     	;# 
  1646  020D                     	;# 
  1647  020E                     	;# 
  1648  0211                     	;# 
  1649  0211                     	;# 
  1650  0212                     	;# 
  1651  0212                     	;# 
  1652  0213                     	;# 
  1653  0213                     	;# 
  1654  0214                     	;# 
  1655  0214                     	;# 
  1656  0215                     	;# 
  1657  0215                     	;# 
  1658  0215                     	;# 
  1659  0215                     	;# 
  1660  0216                     	;# 
  1661  0216                     	;# 
  1662  0217                     	;# 
  1663  0217                     	;# 
  1664  0219                     	;# 
  1665  021A                     	;# 
  1666  021B                     	;# 
  1667  021C                     	;# 
  1668  021D                     	;# 
  1669  021D                     	;# 
  1670  021E                     	;# 
  1671  021F                     	;# 
  1672  028C                     	;# 
  1673  028D                     	;# 
  1674  028E                     	;# 
  1675  0291                     	;# 
  1676  0291                     	;# 
  1677  0292                     	;# 
  1678  0293                     	;# 
  1679  0294                     	;# 
  1680  0295                     	;# 
  1681  0295                     	;# 
  1682  0296                     	;# 
  1683  0297                     	;# 
  1684  0298                     	;# 
  1685  029F                     	;# 
  1686  030C                     	;# 
  1687  030D                     	;# 
  1688  030E                     	;# 
  1689  0311                     	;# 
  1690  0311                     	;# 
  1691  0312                     	;# 
  1692  0313                     	;# 
  1693  0314                     	;# 
  1694  0315                     	;# 
  1695  0315                     	;# 
  1696  0316                     	;# 
  1697  0317                     	;# 
  1698  0318                     	;# 
  1699  038C                     	;# 
  1700  038D                     	;# 
  1701  038E                     	;# 
  1702  0391                     	;# 
  1703  0392                     	;# 
  1704  0393                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0397                     	;# 
  1709  0398                     	;# 
  1710  0399                     	;# 
  1711  039A                     	;# 
  1712  039C                     	;# 
  1713  039D                     	;# 
  1714  039E                     	;# 
  1715  039F                     	;# 
  1716  0411                     	;# 
  1717  0411                     	;# 
  1718  0412                     	;# 
  1719  0413                     	;# 
  1720  0414                     	;# 
  1721  0415                     	;# 
  1722  0416                     	;# 
  1723  0417                     	;# 
  1724  0418                     	;# 
  1725  0418                     	;# 
  1726  0419                     	;# 
  1727  041A                     	;# 
  1728  041B                     	;# 
  1729  041C                     	;# 
  1730  041D                     	;# 
  1731  041E                     	;# 
  1732  041F                     	;# 
  1733  0498                     	;# 
  1734  0498                     	;# 
  1735  0499                     	;# 
  1736  049A                     	;# 
  1737  049B                     	;# 
  1738  049B                     	;# 
  1739  049C                     	;# 
  1740  049D                     	;# 
  1741  049E                     	;# 
  1742  049F                     	;# 
  1743  0617                     	;# 
  1744  0618                     	;# 
  1745  0619                     	;# 
  1746  0619                     	;# 
  1747  061A                     	;# 
  1748  061B                     	;# 
  1749  061C                     	;# 
  1750  061C                     	;# 
  1751  061F                     	;# 
  1752  0691                     	;# 
  1753  0692                     	;# 
  1754  0693                     	;# 
  1755  0694                     	;# 
  1756  0695                     	;# 
  1757  0696                     	;# 
  1758  0697                     	;# 
  1759  0698                     	;# 
  1760  0699                     	;# 
  1761  0711                     	;# 
  1762  0712                     	;# 
  1763  0713                     	;# 
  1764  0714                     	;# 
  1765  0715                     	;# 
  1766  0716                     	;# 
  1767  0717                     	;# 
  1768  0718                     	;# 
  1769  0719                     	;# 
  1770  0891                     	;# 
  1771  0891                     	;# 
  1772  0891                     	;# 
  1773  0891                     	;# 
  1774  0891                     	;# 
  1775  0891                     	;# 
  1776  0892                     	;# 
  1777  0892                     	;# 
  1778  0892                     	;# 
  1779  0893                     	;# 
  1780  0893                     	;# 
  1781  0893                     	;# 
  1782  0893                     	;# 
  1783  0893                     	;# 
  1784  0893                     	;# 
  1785  0894                     	;# 
  1786  0894                     	;# 
  1787  0894                     	;# 
  1788  0895                     	;# 
  1789  0895                     	;# 
  1790  0895                     	;# 
  1791  0896                     	;# 
  1792  0896                     	;# 
  1793  0896                     	;# 
  1794  089B                     	;# 
  1795  0911                     	;# 
  1796  0912                     	;# 
  1797  0913                     	;# 
  1798  0914                     	;# 
  1799  0915                     	;# 
  1800  0916                     	;# 
  1801  0918                     	;# 
  1802  0919                     	;# 
  1803  091A                     	;# 
  1804  091B                     	;# 
  1805  091C                     	;# 
  1806  091D                     	;# 
  1807  091E                     	;# 
  1808  091F                     	;# 
  1809  0E0F                     	;# 
  1810  0E10                     	;# 
  1811  0E11                     	;# 
  1812  0E12                     	;# 
  1813  0E13                     	;# 
  1814  0E14                     	;# 
  1815  0E15                     	;# 
  1816  0E16                     	;# 
  1817  0E17                     	;# 
  1818  0E18                     	;# 
  1819  0E19                     	;# 
  1820  0E1A                     	;# 
  1821  0E1B                     	;# 
  1822  0E1C                     	;# 
  1823  0E1D                     	;# 
  1824  0E1E                     	;# 
  1825  0E1F                     	;# 
  1826  0E20                     	;# 
  1827  0E21                     	;# 
  1828  0E22                     	;# 
  1829  0E24                     	;# 
  1830  0E25                     	;# 
  1831  0E28                     	;# 
  1832  0E29                     	;# 
  1833  0E2A                     	;# 
  1834  0E2B                     	;# 
  1835  0E2C                     	;# 
  1836  0E2D                     	;# 
  1837  0E2E                     	;# 
  1838  0E2F                     	;# 
  1839  0E90                     	;# 
  1840  0E91                     	;# 
  1841  0E92                     	;# 
  1842  0E94                     	;# 
  1843  0E95                     	;# 
  1844  0E9C                     	;# 
  1845  0E9D                     	;# 
  1846  0E9E                     	;# 
  1847  0E9F                     	;# 
  1848  0EA0                     	;# 
  1849  0EA1                     	;# 
  1850  0EA2                     	;# 
  1851  0EA3                     	;# 
  1852  0EA4                     	;# 
  1853  0EA5                     	;# 
  1854  0EA6                     	;# 
  1855  0EA7                     	;# 
  1856  0F0F                     	;# 
  1857  0F10                     	;# 
  1858  0F11                     	;# 
  1859  0F12                     	;# 
  1860  0F13                     	;# 
  1861  0F14                     	;# 
  1862  0F15                     	;# 
  1863  0F16                     	;# 
  1864  0F17                     	;# 
  1865  0F18                     	;# 
  1866  0F19                     	;# 
  1867  0F1A                     	;# 
  1868  0F1B                     	;# 
  1869  0F1C                     	;# 
  1870  0F1D                     	;# 
  1871  0F1E                     	;# 
  1872  0F1F                     	;# 
  1873  0F20                     	;# 
  1874  0F21                     	;# 
  1875  0F22                     	;# 
  1876  0F23                     	;# 
  1877  0F24                     	;# 
  1878  0F25                     	;# 
  1879  0F26                     	;# 
  1880  0F27                     	;# 
  1881  0F28                     	;# 
  1882  0F29                     	;# 
  1883  0F2A                     	;# 
  1884  0F2B                     	;# 
  1885  0F2C                     	;# 
  1886  0F2D                     	;# 
  1887  0F2E                     	;# 
  1888  0F2F                     	;# 
  1889  0F30                     	;# 
  1890  0F31                     	;# 
  1891  0F32                     	;# 
  1892  0F33                     	;# 
  1893  0F34                     	;# 
  1894  0F35                     	;# 
  1895  0F36                     	;# 
  1896  0F37                     	;# 
  1897  0FE4                     	;# 
  1898  0FE5                     	;# 
  1899  0FE6                     	;# 
  1900  0FE7                     	;# 
  1901  0FE8                     	;# 
  1902  0FE9                     	;# 
  1903  0FEA                     	;# 
  1904  0FEB                     	;# 
  1905  0FED                     	;# 
  1906  0FEE                     	;# 
  1907  0FEF                     	;# 
  1908  0000                     	;# 
  1909  0001                     	;# 
  1910  0002                     	;# 
  1911  0003                     	;# 
  1912  0004                     	;# 
  1913  0005                     	;# 
  1914  0006                     	;# 
  1915  0007                     	;# 
  1916  0008                     	;# 
  1917  0009                     	;# 
  1918  000A                     	;# 
  1919  000B                     	;# 
  1920  000C                     	;# 
  1921  000D                     	;# 
  1922  000E                     	;# 
  1923  0010                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0013                     	;# 
  1927  0014                     	;# 
  1928  0015                     	;# 
  1929  0015                     	;# 
  1930  0016                     	;# 
  1931  0016                     	;# 
  1932  0017                     	;# 
  1933  0018                     	;# 
  1934  0019                     	;# 
  1935  0019                     	;# 
  1936  001A                     	;# 
  1937  001B                     	;# 
  1938  001C                     	;# 
  1939  001D                     	;# 
  1940  001E                     	;# 
  1941  001F                     	;# 
  1942  008C                     	;# 
  1943  008D                     	;# 
  1944  008E                     	;# 
  1945  0090                     	;# 
  1946  0091                     	;# 
  1947  0092                     	;# 
  1948  0093                     	;# 
  1949  0094                     	;# 
  1950  0097                     	;# 
  1951  009B                     	;# 
  1952  009B                     	;# 
  1953  009C                     	;# 
  1954  009D                     	;# 
  1955  009E                     	;# 
  1956  009F                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0111                     	;# 
  1961  0112                     	;# 
  1962  0113                     	;# 
  1963  0114                     	;# 
  1964  0115                     	;# 
  1965  0116                     	;# 
  1966  0117                     	;# 
  1967  0118                     	;# 
  1968  0119                     	;# 
  1969  018C                     	;# 
  1970  018D                     	;# 
  1971  018E                     	;# 
  1972  0197                     	;# 
  1973  0199                     	;# 
  1974  0199                     	;# 
  1975  0199                     	;# 
  1976  019A                     	;# 
  1977  019A                     	;# 
  1978  019A                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019C                     	;# 
  1985  019C                     	;# 
  1986  019C                     	;# 
  1987  019D                     	;# 
  1988  019D                     	;# 
  1989  019D                     	;# 
  1990  019E                     	;# 
  1991  019E                     	;# 
  1992  019E                     	;# 
  1993  019F                     	;# 
  1994  019F                     	;# 
  1995  019F                     	;# 
  1996  019F                     	;# 
  1997  019F                     	;# 
  1998  020C                     	;# 
  1999  020D                     	;# 
  2000  020E                     	;# 
  2001  0211                     	;# 
  2002  0211                     	;# 
  2003  0212                     	;# 
  2004  0212                     	;# 
  2005  0213                     	;# 
  2006  0213                     	;# 
  2007  0214                     	;# 
  2008  0214                     	;# 
  2009  0215                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0216                     	;# 
  2014  0216                     	;# 
  2015  0217                     	;# 
  2016  0217                     	;# 
  2017  0219                     	;# 
  2018  021A                     	;# 
  2019  021B                     	;# 
  2020  021C                     	;# 
  2021  021D                     	;# 
  2022  021D                     	;# 
  2023  021E                     	;# 
  2024  021F                     	;# 
  2025  028C                     	;# 
  2026  028D                     	;# 
  2027  028E                     	;# 
  2028  0291                     	;# 
  2029  0291                     	;# 
  2030  0292                     	;# 
  2031  0293                     	;# 
  2032  0294                     	;# 
  2033  0295                     	;# 
  2034  0295                     	;# 
  2035  0296                     	;# 
  2036  0297                     	;# 
  2037  0298                     	;# 
  2038  029F                     	;# 
  2039  030C                     	;# 
  2040  030D                     	;# 
  2041  030E                     	;# 
  2042  0311                     	;# 
  2043  0311                     	;# 
  2044  0312                     	;# 
  2045  0313                     	;# 
  2046  0314                     	;# 
  2047  0315                     	;# 
  2048  0315                     	;# 
  2049  0316                     	;# 
  2050  0317                     	;# 
  2051  0318                     	;# 
  2052  038C                     	;# 
  2053  038D                     	;# 
  2054  038E                     	;# 
  2055  0391                     	;# 
  2056  0392                     	;# 
  2057  0393                     	;# 
  2058  0394                     	;# 
  2059  0395                     	;# 
  2060  0396                     	;# 
  2061  0397                     	;# 
  2062  0398                     	;# 
  2063  0399                     	;# 
  2064  039A                     	;# 
  2065  039C                     	;# 
  2066  039D                     	;# 
  2067  039E                     	;# 
  2068  039F                     	;# 
  2069  0411                     	;# 
  2070  0411                     	;# 
  2071  0412                     	;# 
  2072  0413                     	;# 
  2073  0414                     	;# 
  2074  0415                     	;# 
  2075  0416                     	;# 
  2076  0417                     	;# 
  2077  0418                     	;# 
  2078  0418                     	;# 
  2079  0419                     	;# 
  2080  041A                     	;# 
  2081  041B                     	;# 
  2082  041C                     	;# 
  2083  041D                     	;# 
  2084  041E                     	;# 
  2085  041F                     	;# 
  2086  0498                     	;# 
  2087  0498                     	;# 
  2088  0499                     	;# 
  2089  049A                     	;# 
  2090  049B                     	;# 
  2091  049B                     	;# 
  2092  049C                     	;# 
  2093  049D                     	;# 
  2094  049E                     	;# 
  2095  049F                     	;# 
  2096  0617                     	;# 
  2097  0618                     	;# 
  2098  0619                     	;# 
  2099  0619                     	;# 
  2100  061A                     	;# 
  2101  061B                     	;# 
  2102  061C                     	;# 
  2103  061C                     	;# 
  2104  061F                     	;# 
  2105  0691                     	;# 
  2106  0692                     	;# 
  2107  0693                     	;# 
  2108  0694                     	;# 
  2109  0695                     	;# 
  2110  0696                     	;# 
  2111  0697                     	;# 
  2112  0698                     	;# 
  2113  0699                     	;# 
  2114  0711                     	;# 
  2115  0712                     	;# 
  2116  0713                     	;# 
  2117  0714                     	;# 
  2118  0715                     	;# 
  2119  0716                     	;# 
  2120  0717                     	;# 
  2121  0718                     	;# 
  2122  0719                     	;# 
  2123  0891                     	;# 
  2124  0891                     	;# 
  2125  0891                     	;# 
  2126  0891                     	;# 
  2127  0891                     	;# 
  2128  0891                     	;# 
  2129  0892                     	;# 
  2130  0892                     	;# 
  2131  0892                     	;# 
  2132  0893                     	;# 
  2133  0893                     	;# 
  2134  0893                     	;# 
  2135  0893                     	;# 
  2136  0893                     	;# 
  2137  0893                     	;# 
  2138  0894                     	;# 
  2139  0894                     	;# 
  2140  0894                     	;# 
  2141  0895                     	;# 
  2142  0895                     	;# 
  2143  0895                     	;# 
  2144  0896                     	;# 
  2145  0896                     	;# 
  2146  0896                     	;# 
  2147  089B                     	;# 
  2148  0911                     	;# 
  2149  0912                     	;# 
  2150  0913                     	;# 
  2151  0914                     	;# 
  2152  0915                     	;# 
  2153  0916                     	;# 
  2154  0918                     	;# 
  2155  0919                     	;# 
  2156  091A                     	;# 
  2157  091B                     	;# 
  2158  091C                     	;# 
  2159  091D                     	;# 
  2160  091E                     	;# 
  2161  091F                     	;# 
  2162  0E0F                     	;# 
  2163  0E10                     	;# 
  2164  0E11                     	;# 
  2165  0E12                     	;# 
  2166  0E13                     	;# 
  2167  0E14                     	;# 
  2168  0E15                     	;# 
  2169  0E16                     	;# 
  2170  0E17                     	;# 
  2171  0E18                     	;# 
  2172  0E19                     	;# 
  2173  0E1A                     	;# 
  2174  0E1B                     	;# 
  2175  0E1C                     	;# 
  2176  0E1D                     	;# 
  2177  0E1E                     	;# 
  2178  0E1F                     	;# 
  2179  0E20                     	;# 
  2180  0E21                     	;# 
  2181  0E22                     	;# 
  2182  0E24                     	;# 
  2183  0E25                     	;# 
  2184  0E28                     	;# 
  2185  0E29                     	;# 
  2186  0E2A                     	;# 
  2187  0E2B                     	;# 
  2188  0E2C                     	;# 
  2189  0E2D                     	;# 
  2190  0E2E                     	;# 
  2191  0E2F                     	;# 
  2192  0E90                     	;# 
  2193  0E91                     	;# 
  2194  0E92                     	;# 
  2195  0E94                     	;# 
  2196  0E95                     	;# 
  2197  0E9C                     	;# 
  2198  0E9D                     	;# 
  2199  0E9E                     	;# 
  2200  0E9F                     	;# 
  2201  0EA0                     	;# 
  2202  0EA1                     	;# 
  2203  0EA2                     	;# 
  2204  0EA3                     	;# 
  2205  0EA4                     	;# 
  2206  0EA5                     	;# 
  2207  0EA6                     	;# 
  2208  0EA7                     	;# 
  2209  0F0F                     	;# 
  2210  0F10                     	;# 
  2211  0F11                     	;# 
  2212  0F12                     	;# 
  2213  0F13                     	;# 
  2214  0F14                     	;# 
  2215  0F15                     	;# 
  2216  0F16                     	;# 
  2217  0F17                     	;# 
  2218  0F18                     	;# 
  2219  0F19                     	;# 
  2220  0F1A                     	;# 
  2221  0F1B                     	;# 
  2222  0F1C                     	;# 
  2223  0F1D                     	;# 
  2224  0F1E                     	;# 
  2225  0F1F                     	;# 
  2226  0F20                     	;# 
  2227  0F21                     	;# 
  2228  0F22                     	;# 
  2229  0F23                     	;# 
  2230  0F24                     	;# 
  2231  0F25                     	;# 
  2232  0F26                     	;# 
  2233  0F27                     	;# 
  2234  0F28                     	;# 
  2235  0F29                     	;# 
  2236  0F2A                     	;# 
  2237  0F2B                     	;# 
  2238  0F2C                     	;# 
  2239  0F2D                     	;# 
  2240  0F2E                     	;# 
  2241  0F2F                     	;# 
  2242  0F30                     	;# 
  2243  0F31                     	;# 
  2244  0F32                     	;# 
  2245  0F33                     	;# 
  2246  0F34                     	;# 
  2247  0F35                     	;# 
  2248  0F36                     	;# 
  2249  0F37                     	;# 
  2250  0FE4                     	;# 
  2251  0FE5                     	;# 
  2252  0FE6                     	;# 
  2253  0FE7                     	;# 
  2254  0FE8                     	;# 
  2255  0FE9                     	;# 
  2256  0FEA                     	;# 
  2257  0FEB                     	;# 
  2258  0FED                     	;# 
  2259  0FEE                     	;# 
  2260  0FEF                     	;# 
  2261  0000                     	;# 
  2262  0001                     	;# 
  2263  0002                     	;# 
  2264  0003                     	;# 
  2265  0004                     	;# 
  2266  0005                     	;# 
  2267  0006                     	;# 
  2268  0007                     	;# 
  2269  0008                     	;# 
  2270  0009                     	;# 
  2271  000A                     	;# 
  2272  000B                     	;# 
  2273  000C                     	;# 
  2274  000D                     	;# 
  2275  000E                     	;# 
  2276  0010                     	;# 
  2277  0011                     	;# 
  2278  0012                     	;# 
  2279  0013                     	;# 
  2280  0014                     	;# 
  2281  0015                     	;# 
  2282  0015                     	;# 
  2283  0016                     	;# 
  2284  0016                     	;# 
  2285  0017                     	;# 
  2286  0018                     	;# 
  2287  0019                     	;# 
  2288  0019                     	;# 
  2289  001A                     	;# 
  2290  001B                     	;# 
  2291  001C                     	;# 
  2292  001D                     	;# 
  2293  001E                     	;# 
  2294  001F                     	;# 
  2295  008C                     	;# 
  2296  008D                     	;# 
  2297  008E                     	;# 
  2298  0090                     	;# 
  2299  0091                     	;# 
  2300  0092                     	;# 
  2301  0093                     	;# 
  2302  0094                     	;# 
  2303  0097                     	;# 
  2304  009B                     	;# 
  2305  009B                     	;# 
  2306  009C                     	;# 
  2307  009D                     	;# 
  2308  009E                     	;# 
  2309  009F                     	;# 
  2310  010C                     	;# 
  2311  010D                     	;# 
  2312  010E                     	;# 
  2313  0111                     	;# 
  2314  0112                     	;# 
  2315  0113                     	;# 
  2316  0114                     	;# 
  2317  0115                     	;# 
  2318  0116                     	;# 
  2319  0117                     	;# 
  2320  0118                     	;# 
  2321  0119                     	;# 
  2322  018C                     	;# 
  2323  018D                     	;# 
  2324  018E                     	;# 
  2325  0197                     	;# 
  2326  0199                     	;# 
  2327  0199                     	;# 
  2328  0199                     	;# 
  2329  019A                     	;# 
  2330  019A                     	;# 
  2331  019A                     	;# 
  2332  019B                     	;# 
  2333  019B                     	;# 
  2334  019B                     	;# 
  2335  019B                     	;# 
  2336  019B                     	;# 
  2337  019C                     	;# 
  2338  019C                     	;# 
  2339  019C                     	;# 
  2340  019D                     	;# 
  2341  019D                     	;# 
  2342  019D                     	;# 
  2343  019E                     	;# 
  2344  019E                     	;# 
  2345  019E                     	;# 
  2346  019F                     	;# 
  2347  019F                     	;# 
  2348  019F                     	;# 
  2349  019F                     	;# 
  2350  019F                     	;# 
  2351  020C                     	;# 
  2352  020D                     	;# 
  2353  020E                     	;# 
  2354  0211                     	;# 
  2355  0211                     	;# 
  2356  0212                     	;# 
  2357  0212                     	;# 
  2358  0213                     	;# 
  2359  0213                     	;# 
  2360  0214                     	;# 
  2361  0214                     	;# 
  2362  0215                     	;# 
  2363  0215                     	;# 
  2364  0215                     	;# 
  2365  0215                     	;# 
  2366  0216                     	;# 
  2367  0216                     	;# 
  2368  0217                     	;# 
  2369  0217                     	;# 
  2370  0219                     	;# 
  2371  021A                     	;# 
  2372  021B                     	;# 
  2373  021C                     	;# 
  2374  021D                     	;# 
  2375  021D                     	;# 
  2376  021E                     	;# 
  2377  021F                     	;# 
  2378  028C                     	;# 
  2379  028D                     	;# 
  2380  028E                     	;# 
  2381  0291                     	;# 
  2382  0291                     	;# 
  2383  0292                     	;# 
  2384  0293                     	;# 
  2385  0294                     	;# 
  2386  0295                     	;# 
  2387  0295                     	;# 
  2388  0296                     	;# 
  2389  0297                     	;# 
  2390  0298                     	;# 
  2391  029F                     	;# 
  2392  030C                     	;# 
  2393  030D                     	;# 
  2394  030E                     	;# 
  2395  0311                     	;# 
  2396  0311                     	;# 
  2397  0312                     	;# 
  2398  0313                     	;# 
  2399  0314                     	;# 
  2400  0315                     	;# 
  2401  0315                     	;# 
  2402  0316                     	;# 
  2403  0317                     	;# 
  2404  0318                     	;# 
  2405  038C                     	;# 
  2406  038D                     	;# 
  2407  038E                     	;# 
  2408  0391                     	;# 
  2409  0392                     	;# 
  2410  0393                     	;# 
  2411  0394                     	;# 
  2412  0395                     	;# 
  2413  0396                     	;# 
  2414  0397                     	;# 
  2415  0398                     	;# 
  2416  0399                     	;# 
  2417  039A                     	;# 
  2418  039C                     	;# 
  2419  039D                     	;# 
  2420  039E                     	;# 
  2421  039F                     	;# 
  2422  0411                     	;# 
  2423  0411                     	;# 
  2424  0412                     	;# 
  2425  0413                     	;# 
  2426  0414                     	;# 
  2427  0415                     	;# 
  2428  0416                     	;# 
  2429  0417                     	;# 
  2430  0418                     	;# 
  2431  0418                     	;# 
  2432  0419                     	;# 
  2433  041A                     	;# 
  2434  041B                     	;# 
  2435  041C                     	;# 
  2436  041D                     	;# 
  2437  041E                     	;# 
  2438  041F                     	;# 
  2439  0498                     	;# 
  2440  0498                     	;# 
  2441  0499                     	;# 
  2442  049A                     	;# 
  2443  049B                     	;# 
  2444  049B                     	;# 
  2445  049C                     	;# 
  2446  049D                     	;# 
  2447  049E                     	;# 
  2448  049F                     	;# 
  2449  0617                     	;# 
  2450  0618                     	;# 
  2451  0619                     	;# 
  2452  0619                     	;# 
  2453  061A                     	;# 
  2454  061B                     	;# 
  2455  061C                     	;# 
  2456  061C                     	;# 
  2457  061F                     	;# 
  2458  0691                     	;# 
  2459  0692                     	;# 
  2460  0693                     	;# 
  2461  0694                     	;# 
  2462  0695                     	;# 
  2463  0696                     	;# 
  2464  0697                     	;# 
  2465  0698                     	;# 
  2466  0699                     	;# 
  2467  0711                     	;# 
  2468  0712                     	;# 
  2469  0713                     	;# 
  2470  0714                     	;# 
  2471  0715                     	;# 
  2472  0716                     	;# 
  2473  0717                     	;# 
  2474  0718                     	;# 
  2475  0719                     	;# 
  2476  0891                     	;# 
  2477  0891                     	;# 
  2478  0891                     	;# 
  2479  0891                     	;# 
  2480  0891                     	;# 
  2481  0891                     	;# 
  2482  0892                     	;# 
  2483  0892                     	;# 
  2484  0892                     	;# 
  2485  0893                     	;# 
  2486  0893                     	;# 
  2487  0893                     	;# 
  2488  0893                     	;# 
  2489  0893                     	;# 
  2490  0893                     	;# 
  2491  0894                     	;# 
  2492  0894                     	;# 
  2493  0894                     	;# 
  2494  0895                     	;# 
  2495  0895                     	;# 
  2496  0895                     	;# 
  2497  0896                     	;# 
  2498  0896                     	;# 
  2499  0896                     	;# 
  2500  089B                     	;# 
  2501  0911                     	;# 
  2502  0912                     	;# 
  2503  0913                     	;# 
  2504  0914                     	;# 
  2505  0915                     	;# 
  2506  0916                     	;# 
  2507  0918                     	;# 
  2508  0919                     	;# 
  2509  091A                     	;# 
  2510  091B                     	;# 
  2511  091C                     	;# 
  2512  091D                     	;# 
  2513  091E                     	;# 
  2514  091F                     	;# 
  2515  0E0F                     	;# 
  2516  0E10                     	;# 
  2517  0E11                     	;# 
  2518  0E12                     	;# 
  2519  0E13                     	;# 
  2520  0E14                     	;# 
  2521  0E15                     	;# 
  2522  0E16                     	;# 
  2523  0E17                     	;# 
  2524  0E18                     	;# 
  2525  0E19                     	;# 
  2526  0E1A                     	;# 
  2527  0E1B                     	;# 
  2528  0E1C                     	;# 
  2529  0E1D                     	;# 
  2530  0E1E                     	;# 
  2531  0E1F                     	;# 
  2532  0E20                     	;# 
  2533  0E21                     	;# 
  2534  0E22                     	;# 
  2535  0E24                     	;# 
  2536  0E25                     	;# 
  2537  0E28                     	;# 
  2538  0E29                     	;# 
  2539  0E2A                     	;# 
  2540  0E2B                     	;# 
  2541  0E2C                     	;# 
  2542  0E2D                     	;# 
  2543  0E2E                     	;# 
  2544  0E2F                     	;# 
  2545  0E90                     	;# 
  2546  0E91                     	;# 
  2547  0E92                     	;# 
  2548  0E94                     	;# 
  2549  0E95                     	;# 
  2550  0E9C                     	;# 
  2551  0E9D                     	;# 
  2552  0E9E                     	;# 
  2553  0E9F                     	;# 
  2554  0EA0                     	;# 
  2555  0EA1                     	;# 
  2556  0EA2                     	;# 
  2557  0EA3                     	;# 
  2558  0EA4                     	;# 
  2559  0EA5                     	;# 
  2560  0EA6                     	;# 
  2561  0EA7                     	;# 
  2562  0F0F                     	;# 
  2563  0F10                     	;# 
  2564  0F11                     	;# 
  2565  0F12                     	;# 
  2566  0F13                     	;# 
  2567  0F14                     	;# 
  2568  0F15                     	;# 
  2569  0F16                     	;# 
  2570  0F17                     	;# 
  2571  0F18                     	;# 
  2572  0F19                     	;# 
  2573  0F1A                     	;# 
  2574  0F1B                     	;# 
  2575  0F1C                     	;# 
  2576  0F1D                     	;# 
  2577  0F1E                     	;# 
  2578  0F1F                     	;# 
  2579  0F20                     	;# 
  2580  0F21                     	;# 
  2581  0F22                     	;# 
  2582  0F23                     	;# 
  2583  0F24                     	;# 
  2584  0F25                     	;# 
  2585  0F26                     	;# 
  2586  0F27                     	;# 
  2587  0F28                     	;# 
  2588  0F29                     	;# 
  2589  0F2A                     	;# 
  2590  0F2B                     	;# 
  2591  0F2C                     	;# 
  2592  0F2D                     	;# 
  2593  0F2E                     	;# 
  2594  0F2F                     	;# 
  2595  0F30                     	;# 
  2596  0F31                     	;# 
  2597  0F32                     	;# 
  2598  0F33                     	;# 
  2599  0F34                     	;# 
  2600  0F35                     	;# 
  2601  0F36                     	;# 
  2602  0F37                     	;# 
  2603  0FE4                     	;# 
  2604  0FE5                     	;# 
  2605  0FE6                     	;# 
  2606  0FE7                     	;# 
  2607  0FE8                     	;# 
  2608  0FE9                     	;# 
  2609  0FEA                     	;# 
  2610  0FEB                     	;# 
  2611  0FED                     	;# 
  2612  0FEE                     	;# 
  2613  0FEF                     	;# 
  2614  0000                     	;# 
  2615  0001                     	;# 
  2616  0002                     	;# 
  2617  0003                     	;# 
  2618  0004                     	;# 
  2619  0005                     	;# 
  2620  0006                     	;# 
  2621  0007                     	;# 
  2622  0008                     	;# 
  2623  0009                     	;# 
  2624  000A                     	;# 
  2625  000B                     	;# 
  2626  000C                     	;# 
  2627  000D                     	;# 
  2628  000E                     	;# 
  2629  0010                     	;# 
  2630  0011                     	;# 
  2631  0012                     	;# 
  2632  0013                     	;# 
  2633  0014                     	;# 
  2634  0015                     	;# 
  2635  0015                     	;# 
  2636  0016                     	;# 
  2637  0016                     	;# 
  2638  0017                     	;# 
  2639  0018                     	;# 
  2640  0019                     	;# 
  2641  0019                     	;# 
  2642  001A                     	;# 
  2643  001B                     	;# 
  2644  001C                     	;# 
  2645  001D                     	;# 
  2646  001E                     	;# 
  2647  001F                     	;# 
  2648  008C                     	;# 
  2649  008D                     	;# 
  2650  008E                     	;# 
  2651  0090                     	;# 
  2652  0091                     	;# 
  2653  0092                     	;# 
  2654  0093                     	;# 
  2655  0094                     	;# 
  2656  0097                     	;# 
  2657  009B                     	;# 
  2658  009B                     	;# 
  2659  009C                     	;# 
  2660  009D                     	;# 
  2661  009E                     	;# 
  2662  009F                     	;# 
  2663  010C                     	;# 
  2664  010D                     	;# 
  2665  010E                     	;# 
  2666  0111                     	;# 
  2667  0112                     	;# 
  2668  0113                     	;# 
  2669  0114                     	;# 
  2670  0115                     	;# 
  2671  0116                     	;# 
  2672  0117                     	;# 
  2673  0118                     	;# 
  2674  0119                     	;# 
  2675  018C                     	;# 
  2676  018D                     	;# 
  2677  018E                     	;# 
  2678  0197                     	;# 
  2679  0199                     	;# 
  2680  0199                     	;# 
  2681  0199                     	;# 
  2682  019A                     	;# 
  2683  019A                     	;# 
  2684  019A                     	;# 
  2685  019B                     	;# 
  2686  019B                     	;# 
  2687  019B                     	;# 
  2688  019B                     	;# 
  2689  019B                     	;# 
  2690  019C                     	;# 
  2691  019C                     	;# 
  2692  019C                     	;# 
  2693  019D                     	;# 
  2694  019D                     	;# 
  2695  019D                     	;# 
  2696  019E                     	;# 
  2697  019E                     	;# 
  2698  019E                     	;# 
  2699  019F                     	;# 
  2700  019F                     	;# 
  2701  019F                     	;# 
  2702  019F                     	;# 
  2703  019F                     	;# 
  2704  020C                     	;# 
  2705  020D                     	;# 
  2706  020E                     	;# 
  2707  0211                     	;# 
  2708  0211                     	;# 
  2709  0212                     	;# 
  2710  0212                     	;# 
  2711  0213                     	;# 
  2712  0213                     	;# 
  2713  0214                     	;# 
  2714  0214                     	;# 
  2715  0215                     	;# 
  2716  0215                     	;# 
  2717  0215                     	;# 
  2718  0215                     	;# 
  2719  0216                     	;# 
  2720  0216                     	;# 
  2721  0217                     	;# 
  2722  0217                     	;# 
  2723  0219                     	;# 
  2724  021A                     	;# 
  2725  021B                     	;# 
  2726  021C                     	;# 
  2727  021D                     	;# 
  2728  021D                     	;# 
  2729  021E                     	;# 
  2730  021F                     	;# 
  2731  028C                     	;# 
  2732  028D                     	;# 
  2733  028E                     	;# 
  2734  0291                     	;# 
  2735  0291                     	;# 
  2736  0292                     	;# 
  2737  0293                     	;# 
  2738  0294                     	;# 
  2739  0295                     	;# 
  2740  0295                     	;# 
  2741  0296                     	;# 
  2742  0297                     	;# 
  2743  0298                     	;# 
  2744  029F                     	;# 
  2745  030C                     	;# 
  2746  030D                     	;# 
  2747  030E                     	;# 
  2748  0311                     	;# 
  2749  0311                     	;# 
  2750  0312                     	;# 
  2751  0313                     	;# 
  2752  0314                     	;# 
  2753  0315                     	;# 
  2754  0315                     	;# 
  2755  0316                     	;# 
  2756  0317                     	;# 
  2757  0318                     	;# 
  2758  038C                     	;# 
  2759  038D                     	;# 
  2760  038E                     	;# 
  2761  0391                     	;# 
  2762  0392                     	;# 
  2763  0393                     	;# 
  2764  0394                     	;# 
  2765  0395                     	;# 
  2766  0396                     	;# 
  2767  0397                     	;# 
  2768  0398                     	;# 
  2769  0399                     	;# 
  2770  039A                     	;# 
  2771  039C                     	;# 
  2772  039D                     	;# 
  2773  039E                     	;# 
  2774  039F                     	;# 
  2775  0411                     	;# 
  2776  0411                     	;# 
  2777  0412                     	;# 
  2778  0413                     	;# 
  2779  0414                     	;# 
  2780  0415                     	;# 
  2781  0416                     	;# 
  2782  0417                     	;# 
  2783  0418                     	;# 
  2784  0418                     	;# 
  2785  0419                     	;# 
  2786  041A                     	;# 
  2787  041B                     	;# 
  2788  041C                     	;# 
  2789  041D                     	;# 
  2790  041E                     	;# 
  2791  041F                     	;# 
  2792  0498                     	;# 
  2793  0498                     	;# 
  2794  0499                     	;# 
  2795  049A                     	;# 
  2796  049B                     	;# 
  2797  049B                     	;# 
  2798  049C                     	;# 
  2799  049D                     	;# 
  2800  049E                     	;# 
  2801  049F                     	;# 
  2802  0617                     	;# 
  2803  0618                     	;# 
  2804  0619                     	;# 
  2805  0619                     	;# 
  2806  061A                     	;# 
  2807  061B                     	;# 
  2808  061C                     	;# 
  2809  061C                     	;# 
  2810  061F                     	;# 
  2811  0691                     	;# 
  2812  0692                     	;# 
  2813  0693                     	;# 
  2814  0694                     	;# 
  2815  0695                     	;# 
  2816  0696                     	;# 
  2817  0697                     	;# 
  2818  0698                     	;# 
  2819  0699                     	;# 
  2820  0711                     	;# 
  2821  0712                     	;# 
  2822  0713                     	;# 
  2823  0714                     	;# 
  2824  0715                     	;# 
  2825  0716                     	;# 
  2826  0717                     	;# 
  2827  0718                     	;# 
  2828  0719                     	;# 
  2829  0891                     	;# 
  2830  0891                     	;# 
  2831  0891                     	;# 
  2832  0891                     	;# 
  2833  0891                     	;# 
  2834  0891                     	;# 
  2835  0892                     	;# 
  2836  0892                     	;# 
  2837  0892                     	;# 
  2838  0893                     	;# 
  2839  0893                     	;# 
  2840  0893                     	;# 
  2841  0893                     	;# 
  2842  0893                     	;# 
  2843  0893                     	;# 
  2844  0894                     	;# 
  2845  0894                     	;# 
  2846  0894                     	;# 
  2847  0895                     	;# 
  2848  0895                     	;# 
  2849  0895                     	;# 
  2850  0896                     	;# 
  2851  0896                     	;# 
  2852  0896                     	;# 
  2853  089B                     	;# 
  2854  0911                     	;# 
  2855  0912                     	;# 
  2856  0913                     	;# 
  2857  0914                     	;# 
  2858  0915                     	;# 
  2859  0916                     	;# 
  2860  0918                     	;# 
  2861  0919                     	;# 
  2862  091A                     	;# 
  2863  091B                     	;# 
  2864  091C                     	;# 
  2865  091D                     	;# 
  2866  091E                     	;# 
  2867  091F                     	;# 
  2868  0E0F                     	;# 
  2869  0E10                     	;# 
  2870  0E11                     	;# 
  2871  0E12                     	;# 
  2872  0E13                     	;# 
  2873  0E14                     	;# 
  2874  0E15                     	;# 
  2875  0E16                     	;# 
  2876  0E17                     	;# 
  2877  0E18                     	;# 
  2878  0E19                     	;# 
  2879  0E1A                     	;# 
  2880  0E1B                     	;# 
  2881  0E1C                     	;# 
  2882  0E1D                     	;# 
  2883  0E1E                     	;# 
  2884  0E1F                     	;# 
  2885  0E20                     	;# 
  2886  0E21                     	;# 
  2887  0E22                     	;# 
  2888  0E24                     	;# 
  2889  0E25                     	;# 
  2890  0E28                     	;# 
  2891  0E29                     	;# 
  2892  0E2A                     	;# 
  2893  0E2B                     	;# 
  2894  0E2C                     	;# 
  2895  0E2D                     	;# 
  2896  0E2E                     	;# 
  2897  0E2F                     	;# 
  2898  0E90                     	;# 
  2899  0E91                     	;# 
  2900  0E92                     	;# 
  2901  0E94                     	;# 
  2902  0E95                     	;# 
  2903  0E9C                     	;# 
  2904  0E9D                     	;# 
  2905  0E9E                     	;# 
  2906  0E9F                     	;# 
  2907  0EA0                     	;# 
  2908  0EA1                     	;# 
  2909  0EA2                     	;# 
  2910  0EA3                     	;# 
  2911  0EA4                     	;# 
  2912  0EA5                     	;# 
  2913  0EA6                     	;# 
  2914  0EA7                     	;# 
  2915  0F0F                     	;# 
  2916  0F10                     	;# 
  2917  0F11                     	;# 
  2918  0F12                     	;# 
  2919  0F13                     	;# 
  2920  0F14                     	;# 
  2921  0F15                     	;# 
  2922  0F16                     	;# 
  2923  0F17                     	;# 
  2924  0F18                     	;# 
  2925  0F19                     	;# 
  2926  0F1A                     	;# 
  2927  0F1B                     	;# 
  2928  0F1C                     	;# 
  2929  0F1D                     	;# 
  2930  0F1E                     	;# 
  2931  0F1F                     	;# 
  2932  0F20                     	;# 
  2933  0F21                     	;# 
  2934  0F22                     	;# 
  2935  0F23                     	;# 
  2936  0F24                     	;# 
  2937  0F25                     	;# 
  2938  0F26                     	;# 
  2939  0F27                     	;# 
  2940  0F28                     	;# 
  2941  0F29                     	;# 
  2942  0F2A                     	;# 
  2943  0F2B                     	;# 
  2944  0F2C                     	;# 
  2945  0F2D                     	;# 
  2946  0F2E                     	;# 
  2947  0F2F                     	;# 
  2948  0F30                     	;# 
  2949  0F31                     	;# 
  2950  0F32                     	;# 
  2951  0F33                     	;# 
  2952  0F34                     	;# 
  2953  0F35                     	;# 
  2954  0F36                     	;# 
  2955  0F37                     	;# 
  2956  0FE4                     	;# 
  2957  0FE5                     	;# 
  2958  0FE6                     	;# 
  2959  0FE7                     	;# 
  2960  0FE8                     	;# 
  2961  0FE9                     	;# 
  2962  0FEA                     	;# 
  2963  0FEB                     	;# 
  2964  0FED                     	;# 
  2965  0FEE                     	;# 
  2966  0FEF                     	;# 
  2967  0000                     	;# 
  2968  0001                     	;# 
  2969  0002                     	;# 
  2970  0003                     	;# 
  2971  0004                     	;# 
  2972  0005                     	;# 
  2973  0006                     	;# 
  2974  0007                     	;# 
  2975  0008                     	;# 
  2976  0009                     	;# 
  2977  000A                     	;# 
  2978  000B                     	;# 
  2979  000C                     	;# 
  2980  000D                     	;# 
  2981  000E                     	;# 
  2982  0010                     	;# 
  2983  0011                     	;# 
  2984  0012                     	;# 
  2985  0013                     	;# 
  2986  0014                     	;# 
  2987  0015                     	;# 
  2988  0015                     	;# 
  2989  0016                     	;# 
  2990  0016                     	;# 
  2991  0017                     	;# 
  2992  0018                     	;# 
  2993  0019                     	;# 
  2994  0019                     	;# 
  2995  001A                     	;# 
  2996  001B                     	;# 
  2997  001C                     	;# 
  2998  001D                     	;# 
  2999  001E                     	;# 
  3000  001F                     	;# 
  3001  008C                     	;# 
  3002  008D                     	;# 
  3003  008E                     	;# 
  3004  0090                     	;# 
  3005  0091                     	;# 
  3006  0092                     	;# 
  3007  0093                     	;# 
  3008  0094                     	;# 
  3009  0097                     	;# 
  3010  009B                     	;# 
  3011  009B                     	;# 
  3012  009C                     	;# 
  3013  009D                     	;# 
  3014  009E                     	;# 
  3015  009F                     	;# 
  3016  010C                     	;# 
  3017  010D                     	;# 
  3018  010E                     	;# 
  3019  0111                     	;# 
  3020  0112                     	;# 
  3021  0113                     	;# 
  3022  0114                     	;# 
  3023  0115                     	;# 
  3024  0116                     	;# 
  3025  0117                     	;# 
  3026  0118                     	;# 
  3027  0119                     	;# 
  3028  018C                     	;# 
  3029  018D                     	;# 
  3030  018E                     	;# 
  3031  0197                     	;# 
  3032  0199                     	;# 
  3033  0199                     	;# 
  3034  0199                     	;# 
  3035  019A                     	;# 
  3036  019A                     	;# 
  3037  019A                     	;# 
  3038  019B                     	;# 
  3039  019B                     	;# 
  3040  019B                     	;# 
  3041  019B                     	;# 
  3042  019B                     	;# 
  3043  019C                     	;# 
  3044  019C                     	;# 
  3045  019C                     	;# 
  3046  019D                     	;# 
  3047  019D                     	;# 
  3048  019D                     	;# 
  3049  019E                     	;# 
  3050  019E                     	;# 
  3051  019E                     	;# 
  3052  019F                     	;# 
  3053  019F                     	;# 
  3054  019F                     	;# 
  3055  019F                     	;# 
  3056  019F                     	;# 
  3057  020C                     	;# 
  3058  020D                     	;# 
  3059  020E                     	;# 
  3060  0211                     	;# 
  3061  0211                     	;# 
  3062  0212                     	;# 
  3063  0212                     	;# 
  3064  0213                     	;# 
  3065  0213                     	;# 
  3066  0214                     	;# 
  3067  0214                     	;# 
  3068  0215                     	;# 
  3069  0215                     	;# 
  3070  0215                     	;# 
  3071  0215                     	;# 
  3072  0216                     	;# 
  3073  0216                     	;# 
  3074  0217                     	;# 
  3075  0217                     	;# 
  3076  0219                     	;# 
  3077  021A                     	;# 
  3078  021B                     	;# 
  3079  021C                     	;# 
  3080  021D                     	;# 
  3081  021D                     	;# 
  3082  021E                     	;# 
  3083  021F                     	;# 
  3084  028C                     	;# 
  3085  028D                     	;# 
  3086  028E                     	;# 
  3087  0291                     	;# 
  3088  0291                     	;# 
  3089  0292                     	;# 
  3090  0293                     	;# 
  3091  0294                     	;# 
  3092  0295                     	;# 
  3093  0295                     	;# 
  3094  0296                     	;# 
  3095  0297                     	;# 
  3096  0298                     	;# 
  3097  029F                     	;# 
  3098  030C                     	;# 
  3099  030D                     	;# 
  3100  030E                     	;# 
  3101  0311                     	;# 
  3102  0311                     	;# 
  3103  0312                     	;# 
  3104  0313                     	;# 
  3105  0314                     	;# 
  3106  0315                     	;# 
  3107  0315                     	;# 
  3108  0316                     	;# 
  3109  0317                     	;# 
  3110  0318                     	;# 
  3111  038C                     	;# 
  3112  038D                     	;# 
  3113  038E                     	;# 
  3114  0391                     	;# 
  3115  0392                     	;# 
  3116  0393                     	;# 
  3117  0394                     	;# 
  3118  0395                     	;# 
  3119  0396                     	;# 
  3120  0397                     	;# 
  3121  0398                     	;# 
  3122  0399                     	;# 
  3123  039A                     	;# 
  3124  039C                     	;# 
  3125  039D                     	;# 
  3126  039E                     	;# 
  3127  039F                     	;# 
  3128  0411                     	;# 
  3129  0411                     	;# 
  3130  0412                     	;# 
  3131  0413                     	;# 
  3132  0414                     	;# 
  3133  0415                     	;# 
  3134  0416                     	;# 
  3135  0417                     	;# 
  3136  0418                     	;# 
  3137  0418                     	;# 
  3138  0419                     	;# 
  3139  041A                     	;# 
  3140  041B                     	;# 
  3141  041C                     	;# 
  3142  041D                     	;# 
  3143  041E                     	;# 
  3144  041F                     	;# 
  3145  0498                     	;# 
  3146  0498                     	;# 
  3147  0499                     	;# 
  3148  049A                     	;# 
  3149  049B                     	;# 
  3150  049B                     	;# 
  3151  049C                     	;# 
  3152  049D                     	;# 
  3153  049E                     	;# 
  3154  049F                     	;# 
  3155  0617                     	;# 
  3156  0618                     	;# 
  3157  0619                     	;# 
  3158  0619                     	;# 
  3159  061A                     	;# 
  3160  061B                     	;# 
  3161  061C                     	;# 
  3162  061C                     	;# 
  3163  061F                     	;# 
  3164  0691                     	;# 
  3165  0692                     	;# 
  3166  0693                     	;# 
  3167  0694                     	;# 
  3168  0695                     	;# 
  3169  0696                     	;# 
  3170  0697                     	;# 
  3171  0698                     	;# 
  3172  0699                     	;# 
  3173  0711                     	;# 
  3174  0712                     	;# 
  3175  0713                     	;# 
  3176  0714                     	;# 
  3177  0715                     	;# 
  3178  0716                     	;# 
  3179  0717                     	;# 
  3180  0718                     	;# 
  3181  0719                     	;# 
  3182  0891                     	;# 
  3183  0891                     	;# 
  3184  0891                     	;# 
  3185  0891                     	;# 
  3186  0891                     	;# 
  3187  0891                     	;# 
  3188  0892                     	;# 
  3189  0892                     	;# 
  3190  0892                     	;# 
  3191  0893                     	;# 
  3192  0893                     	;# 
  3193  0893                     	;# 
  3194  0893                     	;# 
  3195  0893                     	;# 
  3196  0893                     	;# 
  3197  0894                     	;# 
  3198  0894                     	;# 
  3199  0894                     	;# 
  3200  0895                     	;# 
  3201  0895                     	;# 
  3202  0895                     	;# 
  3203  0896                     	;# 
  3204  0896                     	;# 
  3205  0896                     	;# 
  3206  089B                     	;# 
  3207  0911                     	;# 
  3208  0912                     	;# 
  3209  0913                     	;# 
  3210  0914                     	;# 
  3211  0915                     	;# 
  3212  0916                     	;# 
  3213  0918                     	;# 
  3214  0919                     	;# 
  3215  091A                     	;# 
  3216  091B                     	;# 
  3217  091C                     	;# 
  3218  091D                     	;# 
  3219  091E                     	;# 
  3220  091F                     	;# 
  3221  0E0F                     	;# 
  3222  0E10                     	;# 
  3223  0E11                     	;# 
  3224  0E12                     	;# 
  3225  0E13                     	;# 
  3226  0E14                     	;# 
  3227  0E15                     	;# 
  3228  0E16                     	;# 
  3229  0E17                     	;# 
  3230  0E18                     	;# 
  3231  0E19                     	;# 
  3232  0E1A                     	;# 
  3233  0E1B                     	;# 
  3234  0E1C                     	;# 
  3235  0E1D                     	;# 
  3236  0E1E                     	;# 
  3237  0E1F                     	;# 
  3238  0E20                     	;# 
  3239  0E21                     	;# 
  3240  0E22                     	;# 
  3241  0E24                     	;# 
  3242  0E25                     	;# 
  3243  0E28                     	;# 
  3244  0E29                     	;# 
  3245  0E2A                     	;# 
  3246  0E2B                     	;# 
  3247  0E2C                     	;# 
  3248  0E2D                     	;# 
  3249  0E2E                     	;# 
  3250  0E2F                     	;# 
  3251  0E90                     	;# 
  3252  0E91                     	;# 
  3253  0E92                     	;# 
  3254  0E94                     	;# 
  3255  0E95                     	;# 
  3256  0E9C                     	;# 
  3257  0E9D                     	;# 
  3258  0E9E                     	;# 
  3259  0E9F                     	;# 
  3260  0EA0                     	;# 
  3261  0EA1                     	;# 
  3262  0EA2                     	;# 
  3263  0EA3                     	;# 
  3264  0EA4                     	;# 
  3265  0EA5                     	;# 
  3266  0EA6                     	;# 
  3267  0EA7                     	;# 
  3268  0F0F                     	;# 
  3269  0F10                     	;# 
  3270  0F11                     	;# 
  3271  0F12                     	;# 
  3272  0F13                     	;# 
  3273  0F14                     	;# 
  3274  0F15                     	;# 
  3275  0F16                     	;# 
  3276  0F17                     	;# 
  3277  0F18                     	;# 
  3278  0F19                     	;# 
  3279  0F1A                     	;# 
  3280  0F1B                     	;# 
  3281  0F1C                     	;# 
  3282  0F1D                     	;# 
  3283  0F1E                     	;# 
  3284  0F1F                     	;# 
  3285  0F20                     	;# 
  3286  0F21                     	;# 
  3287  0F22                     	;# 
  3288  0F23                     	;# 
  3289  0F24                     	;# 
  3290  0F25                     	;# 
  3291  0F26                     	;# 
  3292  0F27                     	;# 
  3293  0F28                     	;# 
  3294  0F29                     	;# 
  3295  0F2A                     	;# 
  3296  0F2B                     	;# 
  3297  0F2C                     	;# 
  3298  0F2D                     	;# 
  3299  0F2E                     	;# 
  3300  0F2F                     	;# 
  3301  0F30                     	;# 
  3302  0F31                     	;# 
  3303  0F32                     	;# 
  3304  0F33                     	;# 
  3305  0F34                     	;# 
  3306  0F35                     	;# 
  3307  0F36                     	;# 
  3308  0F37                     	;# 
  3309  0FE4                     	;# 
  3310  0FE5                     	;# 
  3311  0FE6                     	;# 
  3312  0FE7                     	;# 
  3313  0FE8                     	;# 
  3314  0FE9                     	;# 
  3315  0FEA                     	;# 
  3316  0FEB                     	;# 
  3317  0FED                     	;# 
  3318  0FEE                     	;# 
  3319  0FEF                     	;# 
  3320                           
  3321                           	psect	stringtext1
  3322  1000                     __pstringtext1:	
  3323  1000                     _fsmStateTable:	
  3324  1000  34DF               	retlw	low _do_I2C_IDLE
  3325  1001  340A               	retlw	high _do_I2C_IDLE
  3326  1002  3425               	retlw	low _do_I2C_SEND_ADR_READ
  3327  1003  340B               	retlw	high _do_I2C_SEND_ADR_READ
  3328  1004  340F               	retlw	low _do_I2C_SEND_ADR_WRITE
  3329  1005  340B               	retlw	high _do_I2C_SEND_ADR_WRITE
  3330  1006  34B1               	retlw	low _do_I2C_TX
  3331  1007  3407               	retlw	high _do_I2C_TX
  3332  1008  3470               	retlw	low _do_I2C_RX
  3333  1009  340F               	retlw	high _do_I2C_RX
  3334  100A  34EA               	retlw	low _do_I2C_RCEN
  3335  100B  340A               	retlw	high _do_I2C_RCEN
  3336  100C  34F6               	retlw	low _do_I2C_TX_EMPTY
  3337  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  3338  100E  34B6               	retlw	low _do_I2C_SEND_RESTART_READ
  3339  100F  340A               	retlw	high _do_I2C_SEND_RESTART_READ
  3340  1010  34BA               	retlw	low _do_I2C_SEND_RESTART_WRITE
  3341  1011  340A               	retlw	high _do_I2C_SEND_RESTART_WRITE
  3342  1012  34BE               	retlw	low _do_I2C_SEND_RESTART
  3343  1013  340A               	retlw	high _do_I2C_SEND_RESTART
  3344  1014  34C2               	retlw	low _do_I2C_SEND_STOP
  3345  1015  340A               	retlw	high _do_I2C_SEND_STOP
  3346  1016  34C6               	retlw	low _do_I2C_DO_ACK
  3347  1017  340A               	retlw	high _do_I2C_DO_ACK
  3348  1018  34CA               	retlw	low _do_I2C_DO_NACK_STOP
  3349  1019  340A               	retlw	high _do_I2C_DO_NACK_STOP
  3350  101A  34CE               	retlw	low _do_I2C_DO_NACK_RESTART
  3351  101B  340A               	retlw	high _do_I2C_DO_NACK_RESTART
  3352  101C  3408               	retlw	low _do_I2C_RESET
  3353  101D  340B               	retlw	high _do_I2C_RESET
  3354  101E  34A0               	retlw	low _do_I2C_DO_ADDRESS_NACK
  3355  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  3356  1020                     __end_of_fsmStateTable:	
  3357                           
  3358                           	psect	nvBANK0
  3359  006E                     __pnvBANK0:	
  3360  006E                     _IOCCF1_InterruptHandler:	
  3361  006E                     	ds	2
  3362  0011                     _PIR1bits	set	17
  3363  000B                     _INTCONbits	set	11
  3364  0010                     _PIR0bits	set	16
  3365  008E                     _TRISC	set	142
  3366  008D                     _TRISB	set	141
  3367  008C                     _TRISA	set	140
  3368  0097                     _WDTCON	set	151
  3369  0091                     _PIE1bits	set	145
  3370  0090                     _PIE0bits	set	144
  3371  010E                     _LATCbits	set	270
  3372  010C                     _LATAbits	set	268
  3373  010E                     _LATC	set	270
  3374  010D                     _LATB	set	269
  3375  010C                     _LATA	set	268
  3376  018C                     _ANSELA	set	396
  3377  018D                     _ANSELB	set	397
  3378  018E                     _ANSELC	set	398
  3379  0214                     _SSP1STATbits	set	532
  3380  0213                     _SSP1MSK	set	531
  3381  0211                     _SSP1BUF	set	529
  3382  0216                     _SSP1CON2bits	set	534
  3383  0212                     _SSP1ADD	set	530
  3384  0216                     _SSP1CON2	set	534
  3385  0215                     _SSP1CON1	set	533
  3386  0214                     _SSP1STAT	set	532
  3387  0215                     _SSP1CON1bits	set	533
  3388  020E                     _WPUC	set	526
  3389  020C                     _WPUA	set	524
  3390  020D                     _WPUB	set	525
  3391  028E                     _ODCONC	set	654
  3392  028D                     _ODCONB	set	653
  3393  028C                     _ODCONA	set	652
  3394  030E                     _SLRCONC	set	782
  3395  030D                     _SLRCONB	set	781
  3396  030C                     _SLRCONA	set	780
  3397  0397                     _IOCCPbits	set	919
  3398  0398                     _IOCCNbits	set	920
  3399  0399                     _IOCCFbits	set	921
  3400  0916                     _PMD5	set	2326
  3401  0915                     _PMD4	set	2325
  3402  0914                     _PMD3	set	2324
  3403  0913                     _PMD2	set	2323
  3404  0912                     _PMD1	set	2322
  3405  0911                     _PMD0	set	2321
  3406  091E                     _OSCTUNE	set	2334
  3407  091F                     _OSCFRQ	set	2335
  3408  091D                     _OSCEN	set	2333
  3409  091B                     _OSCCON3	set	2331
  3410  0919                     _OSCCON1	set	2329
  3411  0E21                     _SSP1DATPPS	set	3617
  3412  0E20                     _SSP1CLKPPS	set	3616
  3413  0E9D                     _RB5PPS	set	3741
  3414  0E9F                     _RB7PPS	set	3743
  3415                           
  3416                           ; #config settings
  3417  0000                     
  3418                           	psect	cinit
  3419  002D                     start_initialization:	
  3420  002D                     __initialization:	
  3421                           
  3422                           ; Clear objects allocated to COMMON
  3423  002D  01F6               	clrf	__pbssCOMMON& (0+127)
  3424  002E  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  3425  002F  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  3426  0030  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  3427  0031  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  3428                           
  3429                           ; Clear objects allocated to BANK0
  3430  0032  305D               	movlw	low __pbssBANK0
  3431  0033  0084               	movwf	4
  3432  0034  3000               	movlw	high __pbssBANK0
  3433  0035  0085               	movwf	5
  3434  0036  3011               	movlw	17
  3435  0037  318B  2302  3180   	fcall	clear_ram0
  3436                           
  3437                           ; Clear objects allocated to BANK3
  3438  003A  30A0               	movlw	low __pbssBANK3
  3439  003B  0084               	movwf	4
  3440  003C  3001               	movlw	high __pbssBANK3
  3441  003D  0085               	movwf	5
  3442  003E  301D               	movlw	29
  3443  003F  318B  2302  3180   	fcall	clear_ram0
  3444                           
  3445                           ; Clear objects allocated to BANK4
  3446  0042  3020               	movlw	low __pbssBANK4
  3447  0043  0084               	movwf	4
  3448  0044  3002               	movlw	high __pbssBANK4
  3449  0045  0085               	movwf	5
  3450  0046  3044               	movlw	68
  3451  0047  318B  2302         	fcall	clear_ram0
  3452  0049                     end_of_initialization:	
  3453                           ;End of C runtime variable initialization code
  3454                           
  3455  0049                     __end_of__initialization:	
  3456  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3457  004A  0020               	movlb	0
  3458  004B  318E  2EBD         	ljmp	_main	;jump to C main() function
  3459                           
  3460                           	psect	bssCOMMON
  3461  0076                     __pbssCOMMON:	
  3462  0076                     _i2c1_driver_i2cISR:	
  3463  0076                     	ds	2
  3464  0078                     _i2c1_driver_busCollisionISR:	
  3465  0078                     	ds	2
  3466  007A                     _b_i2c_error_flag:	
  3467  007A                     	ds	1
  3468                           
  3469                           	psect	bssBANK0
  3470  005D                     __pbssBANK0:	
  3471  005D                     _gesture_motion_:	
  3472  005D                     	ds	2
  3473  005F                     _gesture_state_:	
  3474  005F                     	ds	2
  3475  0061                     _gesture_far_count_:	
  3476  0061                     	ds	2
  3477  0063                     _gesture_near_count_:	
  3478  0063                     	ds	2
  3479  0065                     _gesture_lr_count_:	
  3480  0065                     	ds	2
  3481  0067                     _gesture_ud_count_:	
  3482  0067                     	ds	2
  3483  0069                     _gesture_lr_delta_:	
  3484  0069                     	ds	2
  3485  006B                     _gesture_ud_delta_:	
  3486  006B                     	ds	2
  3487  006D                     _handleGestureFlag:	
  3488  006D                     	ds	1
  3489                           
  3490                           	psect	bssBANK3
  3491  01A0                     __pbssBANK3:	
  3492  01A0                     _i2c_status:	
  3493  01A0                     	ds	29
  3494                           
  3495                           	psect	bssBANK4
  3496  0220                     __pbssBANK4:	
  3497  0220                     _gesture_data_:	
  3498  0220                     	ds	68
  3499                           
  3500                           	psect	clrtext
  3501  0B02                     clear_ram0:	
  3502                           ;	Called with FSR0 containing the base address, and
  3503                           ;	WREG with the size to clear
  3504                           
  3505  0B02  0064               	clrwdt	;clear the watchdog before getting into this loop
  3506  0B03                     clrloop0:	
  3507  0B03  0180               	clrf	0	;clear RAM location pointed to by FSR
  3508  0B04  3101               	addfsr 0,1
  3509  0B05  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3510  0B06  2B03               	goto	clrloop0	;have we reached the end yet?
  3511  0B07  3400               	retlw	0	;all done for this memory range, return
  3512                           
  3513                           	psect	cstackBANK2
  3514  0120                     __pcstackBANK2:	
  3515  0120                     readGesture@fifo_data:	
  3516                           
  3517                           ; 64 bytes @ 0x0
  3518  0120                     	ds	64
  3519                           
  3520                           	psect	cstackBANK1
  3521  00A0                     __pcstackBANK1:	
  3522  00A0                     readGesture@fifo_data2:	
  3523                           
  3524                           ; 64 bytes @ 0x0
  3525  00A0                     	ds	64
  3526                           
  3527                           	psect	cstackCOMMON
  3528  0070                     __pcstackCOMMON:	
  3529  0070                     ?_i2c1_driver_open:	
  3530  0070                     ?_i2c1_driver_isNACK:	
  3531                           ; 1 bit 
  3532                           
  3533  0070                     ?_i2c1_driver_isBufferFull:	
  3534                           ; 1 bit 
  3535                           
  3536  0070                     ?_returnStop:	
  3537                           ; 1 bit 
  3538                           
  3539  0070                     ?_returnReset:	
  3540                           ; 1 bytes @ 0x0
  3541                           
  3542  0070                     ?_mssp1_clearIRQ:	
  3543                           ; 1 bytes @ 0x0
  3544                           
  3545  0070                     ??_mssp1_clearIRQ:	
  3546                           ; 1 bytes @ 0x0
  3547                           
  3548  0070                     ?_i2c_busCollisionISR:	
  3549                           ; 1 bytes @ 0x0
  3550                           
  3551  0070                     ??_i2c_busCollisionISR:	
  3552                           ; 1 bytes @ 0x0
  3553                           
  3554  0070                     ?_i2c_ISR:	
  3555                           ; 1 bytes @ 0x0
  3556                           
  3557  0070                     ?_i2c1_driver_start:	
  3558                           ; 1 bytes @ 0x0
  3559                           
  3560  0070                     ?_i2c1_driver_resetBus:	
  3561                           ; 1 bytes @ 0x0
  3562                           
  3563  0070                     ??_i2c1_driver_resetBus:	
  3564                           ; 1 bytes @ 0x0
  3565                           
  3566  0070                     ?_i2c1_driver_restart:	
  3567                           ; 1 bytes @ 0x0
  3568                           
  3569  0070                     ?_i2c1_driver_stop:	
  3570                           ; 1 bytes @ 0x0
  3571                           
  3572  0070                     ?_i2c1_driver_TXData:	
  3573                           ; 1 bytes @ 0x0
  3574                           
  3575  0070                     ?_i2c1_driver_startRX:	
  3576                           ; 1 bytes @ 0x0
  3577                           
  3578  0070                     ?_i2c1_driver_sendACK:	
  3579                           ; 1 bytes @ 0x0
  3580                           
  3581  0070                     ??_i2c1_driver_sendACK:	
  3582                           ; 1 bytes @ 0x0
  3583                           
  3584  0070                     ?_i2c1_driver_sendNACK:	
  3585                           ; 1 bytes @ 0x0
  3586                           
  3587  0070                     ??_i2c1_driver_isNACK:	
  3588                           ; 1 bytes @ 0x0
  3589                           
  3590  0070                     ?_i2c1_driver_getRXData:	
  3591                           ; 1 bytes @ 0x0
  3592                           
  3593  0070                     ?_mssp1_setIRQ:	
  3594                           ; 1 bytes @ 0x0
  3595                           
  3596  0070                     ??_mssp1_setIRQ:	
  3597                           ; 1 bytes @ 0x0
  3598                           
  3599  0070                     ?_i2c1_driver_clearBusCollision:	
  3600                           ; 1 bytes @ 0x0
  3601                           
  3602  0070                     ??_i2c1_driver_clearBusCollision:	
  3603                           ; 1 bytes @ 0x0
  3604                           
  3605  0070                     ?_PIN_MANAGER_IOC:	
  3606                           ; 1 bytes @ 0x0
  3607                           
  3608  0070                     ??_PIN_MANAGER_IOC:	
  3609                           ; 1 bytes @ 0x0
  3610                           
  3611  0070                     ?_PMD_Initialize:	
  3612                           ; 1 bytes @ 0x0
  3613                           
  3614  0070                     ?_PIN_MANAGER_Initialize:	
  3615                           ; 1 bytes @ 0x0
  3616                           
  3617  0070                     ?_OSCILLATOR_Initialize:	
  3618                           ; 1 bytes @ 0x0
  3619                           
  3620  0070                     ?_WDT_Initialize:	
  3621                           ; 1 bytes @ 0x0
  3622                           
  3623  0070                     ?_IOCCF1_DefaultInterruptHandler:	
  3624                           ; 1 bytes @ 0x0
  3625                           
  3626  0070                     ??_IOCCF1_DefaultInterruptHandler:	
  3627                           ; 1 bytes @ 0x0
  3628                           
  3629  0070                     ?_IOCCF1_ISR:	
  3630                           ; 1 bytes @ 0x0
  3631                           
  3632  0070                     ??_IOCCF1_ISR:	
  3633                           ; 1 bytes @ 0x0
  3634                           
  3635  0070                     ?_initialize:	
  3636                           ; 1 bytes @ 0x0
  3637                           
  3638  0070                     ?_enableGestureSensor:	
  3639                           ; 1 bytes @ 0x0
  3640                           
  3641  0070                     ?_isGestureAvailable:	
  3642                           ; 1 bytes @ 0x0
  3643                           
  3644  0070                     ?_handleGesture:	
  3645                           ; 1 bytes @ 0x0
  3646                           
  3647  0070                     ?_wireReadDataByte:	
  3648                           ; 1 bytes @ 0x0
  3649                           
  3650  0070                     ?_setLEDDrive:	
  3651                           ; 1 bytes @ 0x0
  3652                           
  3653  0070                     ?_setProximityGain:	
  3654                           ; 1 bytes @ 0x0
  3655                           
  3656  0070                     ?_setAmbientLightGain:	
  3657                           ; 1 bytes @ 0x0
  3658                           
  3659  0070                     ?_setProxIntLowThresh:	
  3660                           ; 1 bytes @ 0x0
  3661                           
  3662  0070                     ?_setProxIntHighThresh:	
  3663                           ; 1 bytes @ 0x0
  3664                           
  3665  0070                     ?_setGestureEnterThresh:	
  3666                           ; 1 bytes @ 0x0
  3667                           
  3668  0070                     ?_setGestureExitThresh:	
  3669                           ; 1 bytes @ 0x0
  3670                           
  3671  0070                     ?_setGestureGain:	
  3672                           ; 1 bytes @ 0x0
  3673                           
  3674  0070                     ?_setGestureLEDDrive:	
  3675                           ; 1 bytes @ 0x0
  3676                           
  3677  0070                     ?_setGestureWaitTime:	
  3678                           ; 1 bytes @ 0x0
  3679                           
  3680  0070                     ?_setGestureIntEnable:	
  3681                           ; 1 bytes @ 0x0
  3682                           
  3683  0070                     ?_getMode:	
  3684                           ; 1 bytes @ 0x0
  3685                           
  3686  0070                     ?_resetGestureParameters:	
  3687                           ; 1 bytes @ 0x0
  3688                           
  3689  0070                     ?_setLEDBoost:	
  3690                           ; 1 bytes @ 0x0
  3691                           
  3692  0070                     ?_setGestureMode:	
  3693                           ; 1 bytes @ 0x0
  3694                           
  3695  0070                     ?_enablePower:	
  3696                           ; 1 bytes @ 0x0
  3697                           
  3698  0070                     ?_processGestureData:	
  3699                           ; 1 bytes @ 0x0
  3700                           
  3701  0070                     ?_decodeGesture:	
  3702                           ; 1 bytes @ 0x0
  3703                           
  3704  0070                     ?_I2C_Start:	
  3705                           ; 1 bytes @ 0x0
  3706                           
  3707  0070                     ?_I2C_Write_Byte:	
  3708                           ; 1 bytes @ 0x0
  3709                           
  3710  0070                     ?_I2C_ReStart:	
  3711                           ; 1 bytes @ 0x0
  3712                           
  3713  0070                     ?_I2C_Read_Byte:	
  3714                           ; 1 bytes @ 0x0
  3715                           
  3716  0070                     ?_I2C_Send_NACK:	
  3717                           ; 1 bytes @ 0x0
  3718                           
  3719  0070                     ?_I2C_Stop:	
  3720                           ; 1 bytes @ 0x0
  3721                           
  3722  0070                     ?_do_I2C_RESET:	
  3723                           ; 1 bytes @ 0x0
  3724                           
  3725  0070                     ??_do_I2C_RESET:	
  3726                           ; 1 bytes @ 0x0
  3727                           
  3728  0070                     ?_do_I2C_IDLE:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731  0070                     ??_do_I2C_IDLE:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734  0070                     ?_do_I2C_SEND_RESTART_READ:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737  0070                     ??_do_I2C_SEND_RESTART_READ:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  3741                           ; 1 bytes @ 0x0
  3742                           
  3743  0070                     ??_do_I2C_SEND_RESTART_WRITE:	
  3744                           ; 1 bytes @ 0x0
  3745                           
  3746  0070                     ?_do_I2C_SEND_RESTART:	
  3747                           ; 1 bytes @ 0x0
  3748                           
  3749  0070                     ??_do_I2C_SEND_RESTART:	
  3750                           ; 1 bytes @ 0x0
  3751                           
  3752  0070                     ?_do_I2C_SEND_STOP:	
  3753                           ; 1 bytes @ 0x0
  3754                           
  3755  0070                     ??_do_I2C_SEND_STOP:	
  3756                           ; 1 bytes @ 0x0
  3757                           
  3758  0070                     ?_do_I2C_SEND_ADR_READ:	
  3759                           ; 1 bytes @ 0x0
  3760                           
  3761  0070                     ??_do_I2C_SEND_ADR_READ:	
  3762                           ; 1 bytes @ 0x0
  3763                           
  3764  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767  0070                     ??_do_I2C_SEND_ADR_WRITE:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770  0070                     ?_do_I2C_RCEN:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773  0070                     ??_do_I2C_RCEN:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776  0070                     ?_do_I2C_DO_ACK:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779  0070                     ??_do_I2C_DO_ACK:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782  0070                     ?_do_I2C_DO_NACK_STOP:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785  0070                     ??_do_I2C_DO_NACK_STOP:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788  0070                     ?_do_I2C_DO_NACK_RESTART:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791  0070                     ??_do_I2C_DO_NACK_RESTART:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  3795                           ; 1 bytes @ 0x0
  3796                           
  3797  0070                     ??_do_I2C_DO_ADDRESS_NACK:	
  3798                           ; 1 bytes @ 0x0
  3799                           
  3800  0070                     ?_do_I2C_TX:	
  3801                           ; 1 bytes @ 0x0
  3802                           
  3803  0070                     ??_do_I2C_TX:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806  0070                     ?_do_I2C_RX:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809  0070                     ??_do_I2C_RX:	
  3810                           ; 1 bytes @ 0x0
  3811                           
  3812  0070                     ?_do_I2C_TX_EMPTY:	
  3813                           ; 1 bytes @ 0x0
  3814                           
  3815  0070                     ??_do_I2C_TX_EMPTY:	
  3816                           ; 1 bytes @ 0x0
  3817                           
  3818  0070                     ?_INTERRUPT_InterruptManager:	
  3819                           ; 1 bytes @ 0x0
  3820                           
  3821  0070                     ?_SYSTEM_Initialize:	
  3822                           ; 1 bytes @ 0x0
  3823                           
  3824  0070                     ?_GestureInterruptHandler:	
  3825                           ; 1 bytes @ 0x0
  3826                           
  3827  0070                     ??_GestureInterruptHandler:	
  3828                           ; 1 bytes @ 0x0
  3829                           
  3830  0070                     ?_main:	
  3831                           ; 1 bytes @ 0x0
  3832                           
  3833  0070                     ?_LEDs_SetLow:	
  3834                           ; 1 bytes @ 0x0
  3835                           
  3836  0070                     ?i1_i2c1_driver_restart:	
  3837                           ; 1 bytes @ 0x0
  3838                           
  3839  0070                     ??i1_i2c1_driver_restart:	
  3840                           ; 1 bytes @ 0x0
  3841                           
  3842  0070                     ?i1_i2c1_driver_stop:	
  3843                           ; 1 bytes @ 0x0
  3844                           
  3845  0070                     ??i1_i2c1_driver_stop:	
  3846                           ; 1 bytes @ 0x0
  3847                           
  3848  0070                     ?i1_i2c1_driver_startRX:	
  3849                           ; 1 bytes @ 0x0
  3850                           
  3851  0070                     ??i1_i2c1_driver_startRX:	
  3852                           ; 1 bytes @ 0x0
  3853                           
  3854  0070                     ?i1_i2c1_driver_getRXData:	
  3855                           ; 1 bytes @ 0x0
  3856                           
  3857  0070                     ??i1_i2c1_driver_getRXData:	
  3858                           ; 1 bytes @ 0x0
  3859                           
  3860  0070                     ?i1_i2c1_driver_TXData:	
  3861                           ; 1 bytes @ 0x0
  3862                           
  3863  0070                     ??i1_i2c1_driver_TXData:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866  0070                     ?i1_i2c1_driver_sendNACK:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869  0070                     ??i1_i2c1_driver_sendNACK:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872  0070                     returnStop@p:	
  3873                           ; 1 bytes @ 0x0
  3874                           
  3875  0070                     returnReset@p:	
  3876                           ; 1 bytes @ 0x0
  3877                           
  3878  0070                     i1i2c1_driver_TXData@d:	
  3879                           ; 1 bytes @ 0x0
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x0
  3883  0070                     	ds	1
  3884  0071                     ??_returnStop:	
  3885  0071                     ??_returnReset:	
  3886                           ; 1 bytes @ 0x1
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x1
  3890  0071                     	ds	2
  3891  0073                     ??_i2c_ISR:	
  3892                           
  3893                           ; 1 bytes @ 0x3
  3894  0073                     	ds	3
  3895  0076                     ??_INTERRUPT_InterruptManager:	
  3896                           
  3897                           	psect	cstackBANK0
  3898  0020                     __pcstackBANK0:	
  3899                           ; 1 bytes @ 0x6
  3900                           
  3901  0020                     ??_i2c1_driver_open:	
  3902  0020                     ??_i2c1_driver_start:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905  0020                     ??_i2c1_driver_restart:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908  0020                     ??_i2c1_driver_stop:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911  0020                     ??_i2c1_driver_TXData:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914  0020                     ??_i2c1_driver_startRX:	
  3915                           ; 1 bytes @ 0x0
  3916                           
  3917  0020                     ??_i2c1_driver_sendNACK:	
  3918                           ; 1 bytes @ 0x0
  3919                           
  3920  0020                     ??_i2c1_driver_getRXData:	
  3921                           ; 1 bytes @ 0x0
  3922                           
  3923  0020                     ??_PMD_Initialize:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926  0020                     ??_OSCILLATOR_Initialize:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929  0020                     ??_WDT_Initialize:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932  0020                     ?_IOCCF1_SetInterruptHandler:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935  0020                     ??_resetGestureParameters:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938  0020                     ??_decodeGesture:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941  0020                     ??_I2C_Start:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944  0020                     ??_I2C_ReStart:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947  0020                     ??_I2C_Send_NACK:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950  0020                     ??_I2C_Stop:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953  0020                     ??_i2c1_driver_isBufferFull:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956  0020                     ??_LEDs_SetLow:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0020                     ?___wmul:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962  0020                     i2c1_driver_TXData@d:	
  3963                           ; 2 bytes @ 0x0
  3964                           
  3965  0020                     IOCCF1_SetInterruptHandler@InterruptHandler:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968  0020                     ___wmul@multiplier:	
  3969                           ; 2 bytes @ 0x0
  3970                           
  3971                           
  3972                           ; 2 bytes @ 0x0
  3973  0020                     	ds	1
  3974  0021                     ??_I2C_Write_Byte:	
  3975  0021                     ??_I2C_Read_Byte:	
  3976                           ; 1 bytes @ 0x1
  3977                           
  3978                           
  3979                           ; 1 bytes @ 0x1
  3980  0021                     	ds	1
  3981  0022                     ??_PIN_MANAGER_Initialize:	
  3982  0022                     ??_IOCCF1_SetInterruptHandler:	
  3983                           ; 1 bytes @ 0x2
  3984                           
  3985  0022                     ??_SYSTEM_Initialize:	
  3986                           ; 1 bytes @ 0x2
  3987                           
  3988  0022                     _decodeGesture$1277:	
  3989                           ; 1 bytes @ 0x2
  3990                           
  3991  0022                     ___wmul@multiplicand:	
  3992                           ; 2 bytes @ 0x2
  3993                           
  3994                           
  3995                           ; 2 bytes @ 0x2
  3996  0022                     	ds	1
  3997  0023                     I2C_Write_Byte@Byte:	
  3998                           
  3999                           ; 1 bytes @ 0x3
  4000  0023                     	ds	1
  4001  0024                     ??___wmul:	
  4002  0024                     _decodeGesture$1278:	
  4003                           ; 1 bytes @ 0x4
  4004                           
  4005  0024                     I2C_Write_Byte@count:	
  4006                           ; 2 bytes @ 0x4
  4007                           
  4008  0024                     ___wmul@product:	
  4009                           ; 2 bytes @ 0x4
  4010                           
  4011                           
  4012                           ; 2 bytes @ 0x4
  4013  0024                     	ds	2
  4014  0026                     ??_wireReadDataByte:	
  4015  0026                     ?_wireWriteDataByte:	
  4016                           ; 1 bytes @ 0x6
  4017                           
  4018  0026                     ?_wireReadDataBlock:	
  4019                           ; 2 bytes @ 0x6
  4020                           
  4021  0026                     ?___awdiv:	
  4022                           ; 2 bytes @ 0x6
  4023                           
  4024  0026                     wireWriteDataByte@val:	
  4025                           ; 2 bytes @ 0x6
  4026                           
  4027  0026                     _decodeGesture$1279:	
  4028                           ; 1 bytes @ 0x6
  4029                           
  4030  0026                     wireReadDataBlock@val:	
  4031                           ; 2 bytes @ 0x6
  4032                           
  4033  0026                     ___awdiv@divisor:	
  4034                           ; 2 bytes @ 0x6
  4035                           
  4036                           
  4037                           ; 2 bytes @ 0x6
  4038  0026                     	ds	1
  4039  0027                     wireReadDataByte@reg:	
  4040                           
  4041                           ; 1 bytes @ 0x7
  4042  0027                     	ds	1
  4043  0028                     wireReadDataByte@val:	
  4044  0028                     _decodeGesture$1280:	
  4045                           ; 1 bytes @ 0x8
  4046                           
  4047  0028                     wireReadDataBlock@len:	
  4048                           ; 2 bytes @ 0x8
  4049                           
  4050  0028                     ___awdiv@dividend:	
  4051                           ; 2 bytes @ 0x8
  4052                           
  4053                           
  4054                           ; 2 bytes @ 0x8
  4055  0028                     	ds	1
  4056  0029                     ??_isGestureAvailable:	
  4057  0029                     ??_wireWriteDataByte:	
  4058                           ; 1 bytes @ 0x9
  4059                           
  4060  0029                     ??_getMode:	
  4061                           ; 1 bytes @ 0x9
  4062                           
  4063  0029                     wireWriteDataByte@reg:	
  4064                           ; 1 bytes @ 0x9
  4065                           
  4066                           
  4067                           ; 1 bytes @ 0x9
  4068  0029                     	ds	1
  4069  002A                     ??_setLEDDrive:	
  4070  002A                     ??_setProximityGain:	
  4071                           ; 1 bytes @ 0xA
  4072                           
  4073  002A                     ??_setAmbientLightGain:	
  4074                           ; 1 bytes @ 0xA
  4075                           
  4076  002A                     ??_setProxIntLowThresh:	
  4077                           ; 1 bytes @ 0xA
  4078                           
  4079  002A                     ??_setProxIntHighThresh:	
  4080                           ; 1 bytes @ 0xA
  4081                           
  4082  002A                     ?_setLightIntLowThreshold:	
  4083                           ; 1 bytes @ 0xA
  4084                           
  4085  002A                     ?_setLightIntHighThreshold:	
  4086                           ; 1 bytes @ 0xA
  4087                           
  4088  002A                     ??_setGestureEnterThresh:	
  4089                           ; 1 bytes @ 0xA
  4090                           
  4091  002A                     ??_setGestureExitThresh:	
  4092                           ; 1 bytes @ 0xA
  4093                           
  4094  002A                     ??_setGestureGain:	
  4095                           ; 1 bytes @ 0xA
  4096                           
  4097  002A                     ??_setGestureLEDDrive:	
  4098                           ; 1 bytes @ 0xA
  4099                           
  4100  002A                     ??_setGestureWaitTime:	
  4101                           ; 1 bytes @ 0xA
  4102                           
  4103  002A                     ??_setGestureIntEnable:	
  4104                           ; 1 bytes @ 0xA
  4105                           
  4106  002A                     ??_setLEDBoost:	
  4107                           ; 1 bytes @ 0xA
  4108                           
  4109  002A                     ??_setGestureMode:	
  4110                           ; 1 bytes @ 0xA
  4111                           
  4112  002A                     ??_wireReadDataBlock:	
  4113                           ; 1 bytes @ 0xA
  4114                           
  4115  002A                     ??___awdiv:	
  4116                           ; 1 bytes @ 0xA
  4117                           
  4118  002A                     getMode@enable_value:	
  4119                           ; 1 bytes @ 0xA
  4120                           
  4121  002A                     isGestureAvailable@val:	
  4122                           ; 1 bytes @ 0xA
  4123                           
  4124  002A                     setLightIntLowThreshold@threshold:	
  4125                           ; 1 bytes @ 0xA
  4126                           
  4127  002A                     setLightIntHighThreshold@threshold:	
  4128                           ; 2 bytes @ 0xA
  4129                           
  4130  002A                     _decodeGesture$1281:	
  4131                           ; 2 bytes @ 0xA
  4132                           
  4133                           
  4134                           ; 2 bytes @ 0xA
  4135  002A                     	ds	1
  4136  002B                     ?_setMode:	
  4137  002B                     setMode@enable:	
  4138                           ; 1 bytes @ 0xB
  4139                           
  4140  002B                     setAmbientLightGain@drive:	
  4141                           ; 1 bytes @ 0xB
  4142                           
  4143  002B                     setProxIntLowThresh@threshold:	
  4144                           ; 1 bytes @ 0xB
  4145                           
  4146  002B                     setProxIntHighThresh@threshold:	
  4147                           ; 1 bytes @ 0xB
  4148                           
  4149  002B                     setGestureEnterThresh@threshold:	
  4150                           ; 1 bytes @ 0xB
  4151                           
  4152  002B                     setGestureExitThresh@threshold:	
  4153                           ; 1 bytes @ 0xB
  4154                           
  4155  002B                     setGestureWaitTime@time:	
  4156                           ; 1 bytes @ 0xB
  4157                           
  4158  002B                     setGestureIntEnable@val:	
  4159                           ; 1 bytes @ 0xB
  4160                           
  4161  002B                     setGestureMode@mode:	
  4162                           ; 1 bytes @ 0xB
  4163                           
  4164  002B                     ___awdiv@counter:	
  4165                           ; 1 bytes @ 0xB
  4166                           
  4167                           
  4168                           ; 1 bytes @ 0xB
  4169  002B                     	ds	1
  4170  002C                     ??_setMode:	
  4171  002C                     ??_setLightIntLowThreshold:	
  4172                           ; 1 bytes @ 0xC
  4173                           
  4174  002C                     ??_setLightIntHighThreshold:	
  4175                           ; 1 bytes @ 0xC
  4176                           
  4177  002C                     setLEDDrive@val:	
  4178                           ; 1 bytes @ 0xC
  4179                           
  4180  002C                     setProximityGain@val:	
  4181                           ; 1 bytes @ 0xC
  4182                           
  4183  002C                     setAmbientLightGain@val:	
  4184                           ; 1 bytes @ 0xC
  4185                           
  4186  002C                     setGestureGain@val:	
  4187                           ; 1 bytes @ 0xC
  4188                           
  4189  002C                     setGestureLEDDrive@val:	
  4190                           ; 1 bytes @ 0xC
  4191                           
  4192  002C                     setGestureWaitTime@val:	
  4193                           ; 1 bytes @ 0xC
  4194                           
  4195  002C                     setGestureIntEnable@enable:	
  4196                           ; 1 bytes @ 0xC
  4197                           
  4198  002C                     setLEDBoost@val:	
  4199                           ; 1 bytes @ 0xC
  4200                           
  4201  002C                     setGestureMode@val:	
  4202                           ; 1 bytes @ 0xC
  4203                           
  4204  002C                     ___awdiv@sign:	
  4205                           ; 1 bytes @ 0xC
  4206                           
  4207  002C                     _decodeGesture$1282:	
  4208                           ; 1 bytes @ 0xC
  4209                           
  4210                           
  4211                           ; 2 bytes @ 0xC
  4212  002C                     	ds	1
  4213  002D                     setLEDDrive@drive:	
  4214  002D                     setProximityGain@drive:	
  4215                           ; 1 bytes @ 0xD
  4216                           
  4217  002D                     setLightIntLowThreshold@val_low:	
  4218                           ; 1 bytes @ 0xD
  4219                           
  4220  002D                     setLightIntHighThreshold@val_low:	
  4221                           ; 1 bytes @ 0xD
  4222                           
  4223  002D                     setGestureGain@gain:	
  4224                           ; 1 bytes @ 0xD
  4225                           
  4226  002D                     setGestureLEDDrive@drive:	
  4227                           ; 1 bytes @ 0xD
  4228                           
  4229  002D                     setLEDBoost@boost:	
  4230                           ; 1 bytes @ 0xD
  4231                           
  4232  002D                     ___awdiv@quotient:	
  4233                           ; 1 bytes @ 0xD
  4234                           
  4235                           
  4236                           ; 2 bytes @ 0xD
  4237  002D                     	ds	1
  4238  002E                     setMode@reg_val:	
  4239  002E                     setLightIntLowThreshold@val_high:	
  4240                           ; 1 bytes @ 0xE
  4241                           
  4242  002E                     setLightIntHighThreshold@val_high:	
  4243                           ; 1 bytes @ 0xE
  4244                           
  4245  002E                     _decodeGesture$1283:	
  4246                           ; 1 bytes @ 0xE
  4247                           
  4248                           
  4249                           ; 2 bytes @ 0xE
  4250  002E                     	ds	1
  4251  002F                     ??_processGestureData:	
  4252  002F                     setMode@mode:	
  4253                           ; 1 bytes @ 0xF
  4254                           
  4255  002F                     wireReadDataBlock@reg:	
  4256                           ; 1 bytes @ 0xF
  4257                           
  4258                           
  4259                           ; 1 bytes @ 0xF
  4260  002F                     	ds	1
  4261  0030                     ??_initialize:	
  4262  0030                     ??_enableGestureSensor:	
  4263                           ; 1 bytes @ 0x10
  4264                           
  4265  0030                     ??_enablePower:	
  4266                           ; 1 bytes @ 0x10
  4267                           
  4268  0030                     wireReadDataBlock@j:	
  4269                           ; 1 bytes @ 0x10
  4270                           
  4271  0030                     _decodeGesture$1284:	
  4272                           ; 1 bytes @ 0x10
  4273                           
  4274                           
  4275                           ; 2 bytes @ 0x10
  4276  0030                     	ds	1
  4277  0031                     initialize@id:	
  4278  0031                     enableGestureSensor@interrupts:	
  4279                           ; 1 bytes @ 0x11
  4280                           
  4281  0031                     processGestureData@ud_ratio_first:	
  4282                           ; 1 bytes @ 0x11
  4283                           
  4284                           
  4285                           ; 2 bytes @ 0x11
  4286  0031                     	ds	2
  4287  0033                     processGestureData@lr_ratio_first:	
  4288                           
  4289                           ; 2 bytes @ 0x13
  4290  0033                     	ds	2
  4291  0035                     processGestureData@ud_ratio_last:	
  4292                           
  4293                           ; 2 bytes @ 0x15
  4294  0035                     	ds	2
  4295  0037                     processGestureData@lr_ratio_last:	
  4296                           
  4297                           ; 2 bytes @ 0x17
  4298  0037                     	ds	2
  4299  0039                     _processGestureData$1272:	
  4300                           
  4301                           ; 2 bytes @ 0x19
  4302  0039                     	ds	2
  4303  003B                     _processGestureData$1273:	
  4304                           
  4305                           ; 2 bytes @ 0x1B
  4306  003B                     	ds	2
  4307  003D                     _processGestureData$1274:	
  4308                           
  4309                           ; 2 bytes @ 0x1D
  4310  003D                     	ds	2
  4311  003F                     _processGestureData$1275:	
  4312                           
  4313                           ; 2 bytes @ 0x1F
  4314  003F                     	ds	2
  4315  0041                     processGestureData@u_last:	
  4316                           
  4317                           ; 1 bytes @ 0x21
  4318  0041                     	ds	1
  4319  0042                     processGestureData@d_last:	
  4320                           
  4321                           ; 1 bytes @ 0x22
  4322  0042                     	ds	1
  4323  0043                     processGestureData@l_last:	
  4324                           
  4325                           ; 1 bytes @ 0x23
  4326  0043                     	ds	1
  4327  0044                     processGestureData@r_last:	
  4328                           
  4329                           ; 1 bytes @ 0x24
  4330  0044                     	ds	1
  4331  0045                     processGestureData@u_first:	
  4332                           
  4333                           ; 1 bytes @ 0x25
  4334  0045                     	ds	1
  4335  0046                     processGestureData@d_first:	
  4336                           
  4337                           ; 1 bytes @ 0x26
  4338  0046                     	ds	1
  4339  0047                     processGestureData@l_first:	
  4340                           
  4341                           ; 1 bytes @ 0x27
  4342  0047                     	ds	1
  4343  0048                     processGestureData@r_first:	
  4344                           
  4345                           ; 1 bytes @ 0x28
  4346  0048                     	ds	1
  4347  0049                     processGestureData@ud_delta:	
  4348                           
  4349                           ; 2 bytes @ 0x29
  4350  0049                     	ds	2
  4351  004B                     processGestureData@lr_delta:	
  4352                           
  4353                           ; 2 bytes @ 0x2B
  4354  004B                     	ds	2
  4355  004D                     processGestureData@i:	
  4356                           
  4357                           ; 2 bytes @ 0x2D
  4358  004D                     	ds	2
  4359  004F                     ?_readGesture:	
  4360                           
  4361                           ; 2 bytes @ 0x2F
  4362  004F                     	ds	2
  4363  0051                     ??_readGesture:	
  4364                           
  4365                           ; 1 bytes @ 0x31
  4366  0051                     	ds	2
  4367  0053                     readGesture@motion:	
  4368                           
  4369                           ; 2 bytes @ 0x33
  4370  0053                     	ds	2
  4371  0055                     readGesture@gstatus:	
  4372                           
  4373                           ; 1 bytes @ 0x35
  4374  0055                     	ds	1
  4375  0056                     readGesture@bytes_read:	
  4376                           
  4377                           ; 2 bytes @ 0x36
  4378  0056                     	ds	2
  4379  0058                     readGesture@fifo_level:	
  4380                           
  4381                           ; 1 bytes @ 0x38
  4382  0058                     	ds	1
  4383  0059                     readGesture@i:	
  4384                           
  4385                           ; 2 bytes @ 0x39
  4386  0059                     	ds	2
  4387  005B                     ??_handleGesture:	
  4388                           
  4389                           ; 1 bytes @ 0x3B
  4390  005B                     	ds	2
  4391  005D                     ??_main:	
  4392                           
  4393                           	psect	maintext
  4394  0EBD                     __pmaintext:	
  4395                           ; 1 bytes @ 0x3D
  4396 ;;
  4397 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4398 ;;
  4399 ;; *************** function _main *****************
  4400 ;; Defined at:
  4401 ;;		line 60 in file "main.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  count           2    0        unsigned int 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : B1F/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        2 bytes
  4420 ;; Hardware stack levels required when called:   12
  4421 ;; This function calls:
  4422 ;;		_IOCCF1_SetInterruptHandler
  4423 ;;		_SYSTEM_Initialize
  4424 ;;		_enableGestureSensor
  4425 ;;		_handleGesture
  4426 ;;		_initialize
  4427 ;;		_isGestureAvailable
  4428 ;;		_readGesture
  4429 ;; This function is called by:
  4430 ;;		Startup code after reset
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _main
  4436  0EBD                     _main:	
  4437                           
  4438                           ;main.c: 63:     SYSTEM_Initialize();
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4442  0EBD  318B  235C  318E   	fcall	_SYSTEM_Initialize
  4443                           
  4444                           ;main.c: 69:     (INTCONbits.GIE = 1);
  4445  0EC0  178B               	bsf	11,7	;volatile
  4446                           
  4447                           ;main.c: 72:     (INTCONbits.PEIE = 1);
  4448  0EC1  170B               	bsf	11,6	;volatile
  4449                           
  4450                           ;main.c: 74:     IOCCF1_SetInterruptHandler(GestureInterruptHandler);
  4451  0EC2  30AA               	movlw	low _GestureInterruptHandler
  4452  0EC3  0020               	movlb	0	; select bank0
  4453  0EC4  00A0               	movwf	IOCCF1_SetInterruptHandler@InterruptHandler
  4454  0EC5  300A               	movlw	high _GestureInterruptHandler
  4455  0EC6  00A1               	movwf	IOCCF1_SetInterruptHandler@InterruptHandler+1
  4456  0EC7  318A  22F0  318E   	fcall	_IOCCF1_SetInterruptHandler
  4457                           
  4458                           ;main.c: 96:     if(initialize()){
  4459  0ECA  3184  24A6  318E   	fcall	_initialize
  4460  0ECD  3A00               	xorlw	0
  4461  0ECE  1903               	skipnz
  4462  0ECF  2ED2               	goto	l6185
  4463                           
  4464                           ;main.c: 97:         do { LATAbits.LATA2 = 1; } while(0);
  4465  0ED0  0022               	movlb	2	; select bank2
  4466  0ED1  150C               	bsf	12,2	;volatile
  4467  0ED2                     l6185:	
  4468                           
  4469                           ;main.c: 99:     if(enableGestureSensor(1)){
  4470  0ED2  3001               	movlw	1
  4471  0ED3  3186  26AC  318E   	fcall	_enableGestureSensor
  4472  0ED6                     l6187:	
  4473                           
  4474                           ;main.c: 105:     {;main.c: 110:         if(isGestureAvailable()){
  4475  0ED6  318B  2383  318E   	fcall	_isGestureAvailable
  4476  0ED9  3A00               	xorlw	0
  4477  0EDA  1903               	skipnz
  4478  0EDB  2EE5               	goto	l6193
  4479                           
  4480                           ;main.c: 111:             do { LATCbits.LATC5 = 1; } while(0);
  4481  0EDC  0022               	movlb	2	; select bank2
  4482  0EDD  168E               	bsf	14,5	;volatile
  4483                           
  4484                           ;main.c: 112:             readGesture();
  4485  0EDE  3185  25BC  318E   	fcall	_readGesture
  4486                           
  4487                           ;main.c: 113:             _delay((unsigned long)((1)*(1000000/4000.0)));
  4488  0EE1  3053               	movlw	83
  4489  0EE2                     u5587:	
  4490  0EE2  0B89               	decfsz	9,f
  4491  0EE3  2EE2               	goto	u5587
  4492  0EE4  0000               	nop
  4493  0EE5                     l6193:	
  4494                           
  4495                           ;main.c: 139:         if(handleGestureFlag){
  4496  0EE5  0020               	movlb	0	; select bank0
  4497  0EE6  086D               	movf	_handleGestureFlag,w
  4498  0EE7  1903               	btfsc	3,2
  4499  0EE8  2ED6               	goto	l6187
  4500                           
  4501                           ;main.c: 140:             do { LATAbits.LATA1 = 1; } while(0);
  4502  0EE9  0022               	movlb	2	; select bank2
  4503  0EEA  148C               	bsf	12,1	;volatile
  4504                           
  4505                           ;main.c: 141:             handleGesture();
  4506  0EEB  318F  272C  318E   	fcall	_handleGesture
  4507                           
  4508                           ;main.c: 142:             handleGestureFlag = 0;
  4509  0EEE  0020               	movlb	0	; select bank0
  4510  0EEF  01ED               	clrf	_handleGestureFlag
  4511  0EF0  2ED6               	goto	l6187
  4512  0EF1                     __end_of_main:	
  4513                           
  4514                           	psect	text1
  4515  04A6                     __ptext1:	
  4516 ;; *************** function _initialize *****************
  4517 ;; Defined at:
  4518 ;;		line 19 in file "APDS9960.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;		None
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  id              1   17[BANK0 ] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      _Bool 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;Total ram usage:        2 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:   10
  4539 ;; This function calls:
  4540 ;;		_i2c1_driver_open
  4541 ;;		_setAmbientLightGain
  4542 ;;		_setGestureEnterThresh
  4543 ;;		_setGestureExitThresh
  4544 ;;		_setGestureGain
  4545 ;;		_setGestureIntEnable
  4546 ;;		_setGestureLEDDrive
  4547 ;;		_setGestureWaitTime
  4548 ;;		_setLEDDrive
  4549 ;;		_setLightIntHighThreshold
  4550 ;;		_setLightIntLowThreshold
  4551 ;;		_setMode
  4552 ;;		_setProxIntHighThresh
  4553 ;;		_setProxIntLowThresh
  4554 ;;		_setProximityGain
  4555 ;;		_wireReadDataByte
  4556 ;;		_wireWriteDataByte
  4557 ;; This function is called by:
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _initialize
  4564  04A6                     _initialize:	
  4565                           
  4566                           ;APDS9960.c: 24:     i2c1_driver_open();
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  4570  04A6  318B  2347  3184   	fcall	_i2c1_driver_open
  4571                           
  4572                           ;APDS9960.c: 30:     id = wireReadDataByte(0x92);
  4573  04A9  3092               	movlw	146
  4574  04AA  318C  2468  3184   	fcall	_wireReadDataByte
  4575  04AD  0020               	movlb	0	; select bank0
  4576  04AE  00B0               	movwf	??_initialize
  4577  04AF  0830               	movf	??_initialize,w
  4578  04B0  00B1               	movwf	initialize@id
  4579                           
  4580                           ;APDS9960.c: 32:     if( !(id == 0xAB ||id == 0x9C ) )
  4581  04B1  30AB               	movlw	171
  4582  04B2  0631               	xorwf	initialize@id,w
  4583  04B3  1903               	btfsc	3,2
  4584  04B4  2CBB               	goto	l5903
  4585  04B5  309C               	movlw	156
  4586  04B6  0631               	xorwf	initialize@id,w
  4587  04B7  1903               	btfsc	3,2
  4588  04B8  2CBB               	goto	l5903
  4589  04B9                     l5899:	
  4590                           
  4591                           ;APDS9960.c: 33:     {;APDS9960.c: 34:      return 0;
  4592  04B9  3000               	movlw	0
  4593  04BA  0008               	return
  4594  04BB                     l5903:	
  4595                           
  4596                           ;APDS9960.c: 38:     setMode(7, 0);
  4597  04BB  01AB               	clrf	setMode@enable
  4598  04BC  3007               	movlw	7
  4599  04BD  3187  2762  3184   	fcall	_setMode
  4600                           
  4601                           ;APDS9960.c: 40:     wireWriteDataByte(0x81, 219);
  4602  04C0  30DB               	movlw	219
  4603  04C1  0020               	movlb	0	; select bank0
  4604  04C2  00B0               	movwf	??_initialize
  4605  04C3  0830               	movf	??_initialize,w
  4606  04C4  00A6               	movwf	wireWriteDataByte@val
  4607  04C5  3081               	movlw	129
  4608  04C6  318B  23F7  3184   	fcall	_wireWriteDataByte
  4609                           
  4610                           ;APDS9960.c: 41:     wireWriteDataByte(0x83, 246);
  4611  04C9  30F6               	movlw	246
  4612  04CA  0020               	movlb	0	; select bank0
  4613  04CB  00B0               	movwf	??_initialize
  4614  04CC  0830               	movf	??_initialize,w
  4615  04CD  00A6               	movwf	wireWriteDataByte@val
  4616  04CE  3083               	movlw	131
  4617  04CF  318B  23F7  3184   	fcall	_wireWriteDataByte
  4618                           
  4619                           ;APDS9960.c: 42:     wireWriteDataByte(0x8E, 0x87);
  4620  04D2  3087               	movlw	135
  4621  04D3  0020               	movlb	0	; select bank0
  4622  04D4  00B0               	movwf	??_initialize
  4623  04D5  0830               	movf	??_initialize,w
  4624  04D6  00A6               	movwf	wireWriteDataByte@val
  4625  04D7  308E               	movlw	142
  4626  04D8  318B  23F7  3184   	fcall	_wireWriteDataByte
  4627                           
  4628                           ;APDS9960.c: 43:     wireWriteDataByte(0x9D, 0) ;
  4629  04DB  0020               	movlb	0	; select bank0
  4630  04DC  01A6               	clrf	wireWriteDataByte@val
  4631  04DD  309D               	movlw	157
  4632  04DE  318B  23F7  3184   	fcall	_wireWriteDataByte
  4633                           
  4634                           ;APDS9960.c: 44:     wireWriteDataByte(0x9E, 0) ;
  4635  04E1  0020               	movlb	0	; select bank0
  4636  04E2  01A6               	clrf	wireWriteDataByte@val
  4637  04E3  309E               	movlw	158
  4638  04E4  318B  23F7  3184   	fcall	_wireWriteDataByte
  4639                           
  4640                           ;APDS9960.c: 45:     wireWriteDataByte(0x8D, 0x60) ;
  4641  04E7  3060               	movlw	96
  4642  04E8  0020               	movlb	0	; select bank0
  4643  04E9  00B0               	movwf	??_initialize
  4644  04EA  0830               	movf	??_initialize,w
  4645  04EB  00A6               	movwf	wireWriteDataByte@val
  4646  04EC  308D               	movlw	141
  4647  04ED  318B  23F7  3184   	fcall	_wireWriteDataByte
  4648                           
  4649                           ;APDS9960.c: 46:     setLEDDrive(0);
  4650  04F0  3000               	movlw	0
  4651  04F1  318D  254E  3184   	fcall	_setLEDDrive
  4652                           
  4653                           ;APDS9960.c: 47:     setProximityGain(2);
  4654  04F4  3002               	movlw	2
  4655  04F5  318D  2577  3184   	fcall	_setProximityGain
  4656                           
  4657                           ;APDS9960.c: 48:     setAmbientLightGain(1);
  4658  04F8  3001               	movlw	1
  4659  04F9  318C  244A  3184   	fcall	_setAmbientLightGain
  4660                           
  4661                           ;APDS9960.c: 50:     if( !setProxIntLowThresh(0) ) {
  4662  04FC  3000               	movlw	0
  4663  04FD  318B  23CF  3184   	fcall	_setProxIntLowThresh
  4664  0500  3A00               	xorlw	0
  4665  0501  1903               	btfsc	3,2
  4666  0502  2CB9               	goto	l5899
  4667                           
  4668                           ;APDS9960.c: 53:     if( !setProxIntHighThresh(50) ) {
  4669  0503  3032               	movlw	50
  4670  0504  318B  23BC  3184   	fcall	_setProxIntHighThresh
  4671  0507  3A00               	xorlw	0
  4672  0508  1903               	btfsc	3,2
  4673  0509  2CB9               	goto	l5899
  4674                           
  4675                           ;APDS9960.c: 58:     if( !setLightIntLowThreshold(0xFFFF) ) {
  4676  050A  30FF               	movlw	255
  4677  050B  0020               	movlb	0	; select bank0
  4678  050C  00AA               	movwf	setLightIntLowThreshold@threshold
  4679  050D  30FF               	movlw	255
  4680  050E  00AB               	movwf	setLightIntLowThreshold@threshold+1
  4681  050F  318D  2527  3184   	fcall	_setLightIntLowThreshold
  4682  0512  3A00               	xorlw	0
  4683  0513  1903               	btfsc	3,2
  4684  0514  2CB9               	goto	l5899
  4685                           
  4686                           ;APDS9960.c: 61:     if( !setLightIntHighThreshold(0) ) {
  4687  0515  3000               	movlw	0
  4688  0516  0020               	movlb	0	; select bank0
  4689  0517  00AA               	movwf	setLightIntHighThreshold@threshold
  4690  0518  00AB               	movwf	setLightIntHighThreshold@threshold+1
  4691  0519  318D  2500  3184   	fcall	_setLightIntHighThreshold
  4692  051C  3A00               	xorlw	0
  4693  051D  1903               	btfsc	3,2
  4694  051E  2CB9               	goto	l5899
  4695                           
  4696                           ;APDS9960.c: 65:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  4697  051F  3011               	movlw	17
  4698  0520  0020               	movlb	0	; select bank0
  4699  0521  00B0               	movwf	??_initialize
  4700  0522  0830               	movf	??_initialize,w
  4701  0523  00A6               	movwf	wireWriteDataByte@val
  4702  0524  308C               	movlw	140
  4703  0525  318B  23F7  3184   	fcall	_wireWriteDataByte
  4704  0528  0020               	movlb	0	; select bank0
  4705  0529  0826               	movf	?_wireWriteDataByte,w
  4706  052A  0427               	iorwf	?_wireWriteDataByte+1,w
  4707  052B  1903               	btfsc	3,2
  4708  052C  2CB9               	goto	l5899
  4709                           
  4710                           ;APDS9960.c: 70:     if( !wireWriteDataByte(0x90, 0x01) ) {
  4711  052D  01A6               	clrf	wireWriteDataByte@val
  4712  052E  0AA6               	incf	wireWriteDataByte@val,f
  4713  052F  3090               	movlw	144
  4714  0530  318B  23F7  3184   	fcall	_wireWriteDataByte
  4715  0533  0020               	movlb	0	; select bank0
  4716  0534  0826               	movf	?_wireWriteDataByte,w
  4717  0535  0427               	iorwf	?_wireWriteDataByte+1,w
  4718  0536  1903               	btfsc	3,2
  4719  0537  2CB9               	goto	l5899
  4720                           
  4721                           ;APDS9960.c: 73:     if( !wireWriteDataByte(0x9F, 0) ) {
  4722  0538  01A6               	clrf	wireWriteDataByte@val
  4723  0539  309F               	movlw	159
  4724  053A  318B  23F7  3184   	fcall	_wireWriteDataByte
  4725  053D  0020               	movlb	0	; select bank0
  4726  053E  0826               	movf	?_wireWriteDataByte,w
  4727  053F  0427               	iorwf	?_wireWriteDataByte+1,w
  4728  0540  1903               	btfsc	3,2
  4729  0541  2CB9               	goto	l5899
  4730                           
  4731                           ;APDS9960.c: 77:     if( !setGestureEnterThresh(40) ) {
  4732  0542  3028               	movlw	40
  4733  0543  318B  2396  3184   	fcall	_setGestureEnterThresh
  4734  0546  3A00               	xorlw	0
  4735  0547  1903               	btfsc	3,2
  4736  0548  2CB9               	goto	l5899
  4737                           
  4738                           ;APDS9960.c: 81:     if( !setGestureExitThresh(30) ) {
  4739  0549  301E               	movlw	30
  4740  054A  318B  23A9  3184   	fcall	_setGestureExitThresh
  4741  054D  3A00               	xorlw	0
  4742  054E  1903               	btfsc	3,2
  4743  054F  2CB9               	goto	l5899
  4744                           
  4745                           ;APDS9960.c: 84:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  4746  0550  3040               	movlw	64
  4747  0551  0020               	movlb	0	; select bank0
  4748  0552  00B0               	movwf	??_initialize
  4749  0553  0830               	movf	??_initialize,w
  4750  0554  00A6               	movwf	wireWriteDataByte@val
  4751  0555  30A2               	movlw	162
  4752  0556  318B  23F7  3184   	fcall	_wireWriteDataByte
  4753  0559  0020               	movlb	0	; select bank0
  4754  055A  0826               	movf	?_wireWriteDataByte,w
  4755  055B  0427               	iorwf	?_wireWriteDataByte+1,w
  4756  055C  1903               	btfsc	3,2
  4757  055D  2CB9               	goto	l5899
  4758                           
  4759                           ;APDS9960.c: 87:     if( !setGestureGain(2) ) {
  4760  055E  3002               	movlw	2
  4761  055F  318E  2659  3184   	fcall	_setGestureGain
  4762  0562  3A00               	xorlw	0
  4763  0563  1903               	btfsc	3,2
  4764  0564  2CB9               	goto	l5899
  4765                           
  4766                           ;APDS9960.c: 90:     if( !setGestureLEDDrive(0) ) {
  4767  0565  3000               	movlw	0
  4768  0566  318E  268B  3184   	fcall	_setGestureLEDDrive
  4769  0569  3A00               	xorlw	0
  4770  056A  1903               	btfsc	3,2
  4771  056B  2CB9               	goto	l5899
  4772                           
  4773                           ;APDS9960.c: 94:     if( !setGestureWaitTime(1) ) {
  4774  056C  3001               	movlw	1
  4775  056D  318C  24D9  3184   	fcall	_setGestureWaitTime
  4776  0570  3A00               	xorlw	0
  4777  0571  1903               	btfsc	3,2
  4778  0572  2CB9               	goto	l5899
  4779                           
  4780                           ;APDS9960.c: 97:     if( !wireWriteDataByte(0xA4, 0) ) {
  4781  0573  0020               	movlb	0	; select bank0
  4782  0574  01A6               	clrf	wireWriteDataByte@val
  4783  0575  30A4               	movlw	164
  4784  0576  318B  23F7  3184   	fcall	_wireWriteDataByte
  4785  0579  0020               	movlb	0	; select bank0
  4786  057A  0826               	movf	?_wireWriteDataByte,w
  4787  057B  0427               	iorwf	?_wireWriteDataByte+1,w
  4788  057C  1903               	btfsc	3,2
  4789  057D  2CB9               	goto	l5899
  4790                           
  4791                           ;APDS9960.c: 100:     if( !wireWriteDataByte(0xA5, 0) ) {
  4792  057E  01A6               	clrf	wireWriteDataByte@val
  4793  057F  30A5               	movlw	165
  4794  0580  318B  23F7  3184   	fcall	_wireWriteDataByte
  4795  0583  0020               	movlb	0	; select bank0
  4796  0584  0826               	movf	?_wireWriteDataByte,w
  4797  0585  0427               	iorwf	?_wireWriteDataByte+1,w
  4798  0586  1903               	btfsc	3,2
  4799  0587  2CB9               	goto	l5899
  4800                           
  4801                           ;APDS9960.c: 103:     if( !wireWriteDataByte(0xA7, 0) ) {
  4802  0588  01A6               	clrf	wireWriteDataByte@val
  4803  0589  30A7               	movlw	167
  4804  058A  318B  23F7  3184   	fcall	_wireWriteDataByte
  4805  058D  0020               	movlb	0	; select bank0
  4806  058E  0826               	movf	?_wireWriteDataByte,w
  4807  058F  0427               	iorwf	?_wireWriteDataByte+1,w
  4808  0590  1903               	btfsc	3,2
  4809  0591  2CB9               	goto	l5899
  4810                           
  4811                           ;APDS9960.c: 106:     if( !wireWriteDataByte(0xA9, 0) ) {
  4812  0592  01A6               	clrf	wireWriteDataByte@val
  4813  0593  30A9               	movlw	169
  4814  0594  318B  23F7  3184   	fcall	_wireWriteDataByte
  4815  0597  0020               	movlb	0	; select bank0
  4816  0598  0826               	movf	?_wireWriteDataByte,w
  4817  0599  0427               	iorwf	?_wireWriteDataByte+1,w
  4818  059A  1903               	btfsc	3,2
  4819  059B  2CB9               	goto	l5899
  4820                           
  4821                           ;APDS9960.c: 109:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  4822  059C  30C9               	movlw	201
  4823  059D  00B0               	movwf	??_initialize
  4824  059E  0830               	movf	??_initialize,w
  4825  059F  00A6               	movwf	wireWriteDataByte@val
  4826  05A0  30A6               	movlw	166
  4827  05A1  318B  23F7  3184   	fcall	_wireWriteDataByte
  4828  05A4  0020               	movlb	0	; select bank0
  4829  05A5  0826               	movf	?_wireWriteDataByte,w
  4830  05A6  0427               	iorwf	?_wireWriteDataByte+1,w
  4831  05A7  1903               	btfsc	3,2
  4832  05A8  2CB9               	goto	l5899
  4833                           
  4834                           ;APDS9960.c: 112:     if( !wireWriteDataByte(0xAA, 0) ) {
  4835  05A9  01A6               	clrf	wireWriteDataByte@val
  4836  05AA  30AA               	movlw	170
  4837  05AB  318B  23F7  3184   	fcall	_wireWriteDataByte
  4838  05AE  0020               	movlb	0	; select bank0
  4839  05AF  0826               	movf	?_wireWriteDataByte,w
  4840  05B0  0427               	iorwf	?_wireWriteDataByte+1,w
  4841  05B1  1903               	btfsc	3,2
  4842  05B2  2CB9               	goto	l5899
  4843                           
  4844                           ;APDS9960.c: 115:     if( !setGestureIntEnable(0) ) {
  4845  05B3  3000               	movlw	0
  4846  05B4  318D  25CB  3184   	fcall	_setGestureIntEnable
  4847  05B7  3A00               	xorlw	0
  4848  05B8  1903               	btfsc	3,2
  4849  05B9  2CB9               	goto	l5899
  4850                           
  4851                           ;APDS9960.c: 119:     return 1;
  4852  05BA  3001               	movlw	1
  4853  05BB  0008               	return
  4854  05BC                     __end_of_initialize:	
  4855                           
  4856                           	psect	text2
  4857  0D77                     __ptext2:	
  4858 ;; *************** function _setProximityGain *****************
  4859 ;; Defined at:
  4860 ;;		line 191 in file "APDS9960.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  drive           1    wreg     unsigned char 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  drive           1   13[BANK0 ] unsigned char 
  4865 ;;  val             1   12[BANK0 ] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      _Bool 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, pclath, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;Total ram usage:        4 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    8
  4882 ;; This function calls:
  4883 ;;		_wireReadDataByte
  4884 ;;		_wireWriteDataByte
  4885 ;; This function is called by:
  4886 ;;		_initialize
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           
  4891                           ;psect for function _setProximityGain
  4892  0D77                     _setProximityGain:	
  4893                           
  4894                           ;incstack = 0
  4895                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  4896                           ;setProximityGain@drive stored from wreg
  4897  0D77  0020               	movlb	0	; select bank0
  4898  0D78  00AD               	movwf	setProximityGain@drive
  4899                           
  4900                           ;APDS9960.c: 191: _Bool setProximityGain(uint8_t drive);APDS9960.c: 192: {;APDS9960.c: 1
      +                          93:     uint8_t val;;APDS9960.c: 196:     val=wireReadDataByte(0x8F);
  4901  0D79  308F               	movlw	143
  4902  0D7A  318C  2468  318D   	fcall	_wireReadDataByte
  4903  0D7D  0020               	movlb	0	; select bank0
  4904  0D7E  00AA               	movwf	??_setProximityGain
  4905  0D7F  082A               	movf	??_setProximityGain,w
  4906  0D80  00AC               	movwf	setProximityGain@val
  4907                           
  4908                           ;APDS9960.c: 198:     drive &= 0b00000011;
  4909  0D81  3003               	movlw	3
  4910  0D82  00AA               	movwf	??_setProximityGain
  4911  0D83  082A               	movf	??_setProximityGain,w
  4912  0D84  05AD               	andwf	setProximityGain@drive,f
  4913                           
  4914                           ;APDS9960.c: 199:     drive = drive << 2;
  4915  0D85  082D               	movf	setProximityGain@drive,w
  4916  0D86  00AA               	movwf	??_setProximityGain
  4917  0D87  3001               	movlw	1
  4918  0D88                     u4985:	
  4919  0D88  35AA               	lslf	??_setProximityGain,f
  4920  0D89  3EFF               	addlw	-1
  4921  0D8A  1D03               	skipz
  4922  0D8B  2D88               	goto	u4985
  4923  0D8C  352A               	lslf	??_setProximityGain,w
  4924  0D8D  00AB               	movwf	??_setProximityGain+1
  4925  0D8E  082B               	movf	??_setProximityGain+1,w
  4926  0D8F  00AD               	movwf	setProximityGain@drive
  4927                           
  4928                           ;APDS9960.c: 200:     val &= 0b11110011;
  4929  0D90  30F3               	movlw	243
  4930  0D91  00AA               	movwf	??_setProximityGain
  4931  0D92  082A               	movf	??_setProximityGain,w
  4932  0D93  05AC               	andwf	setProximityGain@val,f
  4933                           
  4934                           ;APDS9960.c: 201:     val |= drive;
  4935  0D94  082D               	movf	setProximityGain@drive,w
  4936  0D95  00AA               	movwf	??_setProximityGain
  4937  0D96  082A               	movf	??_setProximityGain,w
  4938  0D97  04AC               	iorwf	setProximityGain@val,f
  4939                           
  4940                           ;APDS9960.c: 204:     if( !wireWriteDataByte(0x8F, val) ) {
  4941  0D98  082C               	movf	setProximityGain@val,w
  4942  0D99  00AA               	movwf	??_setProximityGain
  4943  0D9A  082A               	movf	??_setProximityGain,w
  4944  0D9B  00A6               	movwf	wireWriteDataByte@val
  4945  0D9C  308F               	movlw	143
  4946  0D9D  318B  23F7         	fcall	_wireWriteDataByte
  4947  0D9F  0008               	return
  4948  0DA0                     __end_of_setProximityGain:	
  4949                           
  4950                           	psect	text3
  4951  0BCF                     __ptext3:	
  4952 ;; *************** function _setProxIntLowThresh *****************
  4953 ;; Defined at:
  4954 ;;		line 233 in file "APDS9960.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  threshold       1    wreg     unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  threshold       1   11[BANK0 ] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      _Bool 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0, pclath, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;Total ram usage:        2 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    8
  4975 ;; This function calls:
  4976 ;;		_wireWriteDataByte
  4977 ;; This function is called by:
  4978 ;;		_initialize
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           
  4983                           ;psect for function _setProxIntLowThresh
  4984  0BCF                     _setProxIntLowThresh:	
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  4988                           ;setProxIntLowThresh@threshold stored from wreg
  4989  0BCF  0020               	movlb	0	; select bank0
  4990  0BD0  00AB               	movwf	setProxIntLowThresh@threshold
  4991                           
  4992                           ;APDS9960.c: 233: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 234: {;APDS99
      +                          60.c: 235:     if( !wireWriteDataByte(0x89, threshold) ) {
  4993  0BD1  082B               	movf	setProxIntLowThresh@threshold,w
  4994  0BD2  00AA               	movwf	??_setProxIntLowThresh
  4995  0BD3  082A               	movf	??_setProxIntLowThresh,w
  4996  0BD4  00A6               	movwf	wireWriteDataByte@val
  4997  0BD5  3089               	movlw	137
  4998  0BD6  318B  23F7  318B   	fcall	_wireWriteDataByte
  4999  0BD9  0020               	movlb	0	; select bank0
  5000  0BDA  0826               	movf	?_wireWriteDataByte,w
  5001  0BDB  0427               	iorwf	?_wireWriteDataByte+1,w
  5002  0BDC  1D03               	btfss	3,2
  5003  0BDD  2BE0               	goto	l5669
  5004                           
  5005                           ;APDS9960.c: 236:         return 0;
  5006  0BDE  3000               	movlw	0
  5007  0BDF  0008               	return
  5008  0BE0                     l5669:	
  5009                           
  5010                           ;APDS9960.c: 239:     return 1;
  5011  0BE0  3001               	movlw	1
  5012  0BE1  0008               	return
  5013  0BE2                     __end_of_setProxIntLowThresh:	
  5014                           
  5015                           	psect	text4
  5016  0BBC                     __ptext4:	
  5017 ;; *************** function _setProxIntHighThresh *****************
  5018 ;; Defined at:
  5019 ;;		line 243 in file "APDS9960.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  threshold       1    wreg     unsigned char 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  threshold       1   11[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      _Bool 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, pclath, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;Total ram usage:        2 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    8
  5040 ;; This function calls:
  5041 ;;		_wireWriteDataByte
  5042 ;; This function is called by:
  5043 ;;		_initialize
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _setProxIntHighThresh
  5049  0BBC                     _setProxIntHighThresh:	
  5050                           
  5051                           ;incstack = 0
  5052                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  5053                           ;setProxIntHighThresh@threshold stored from wreg
  5054  0BBC  0020               	movlb	0	; select bank0
  5055  0BBD  00AB               	movwf	setProxIntHighThresh@threshold
  5056                           
  5057                           ;APDS9960.c: 243: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 244: {;APDS9
      +                          960.c: 245:     if( !wireWriteDataByte(0x8B, threshold) ) {
  5058  0BBE  082B               	movf	setProxIntHighThresh@threshold,w
  5059  0BBF  00AA               	movwf	??_setProxIntHighThresh
  5060  0BC0  082A               	movf	??_setProxIntHighThresh,w
  5061  0BC1  00A6               	movwf	wireWriteDataByte@val
  5062  0BC2  308B               	movlw	139
  5063  0BC3  318B  23F7  318B   	fcall	_wireWriteDataByte
  5064  0BC6  0020               	movlb	0	; select bank0
  5065  0BC7  0826               	movf	?_wireWriteDataByte,w
  5066  0BC8  0427               	iorwf	?_wireWriteDataByte+1,w
  5067  0BC9  1D03               	btfss	3,2
  5068  0BCA  2BCD               	goto	l5679
  5069                           
  5070                           ;APDS9960.c: 246:         return 0;
  5071  0BCB  3000               	movlw	0
  5072  0BCC  0008               	return
  5073  0BCD                     l5679:	
  5074                           
  5075                           ;APDS9960.c: 249:     return 1;
  5076  0BCD  3001               	movlw	1
  5077  0BCE  0008               	return
  5078  0BCF                     __end_of_setProxIntHighThresh:	
  5079                           
  5080                           	psect	text5
  5081  0D27                     __ptext5:	
  5082 ;; *************** function _setLightIntLowThreshold *****************
  5083 ;; Defined at:
  5084 ;;		line 253 in file "APDS9960.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  threshold       2   10[BANK0 ] unsigned short 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  val_high        1   14[BANK0 ] unsigned char 
  5089 ;;  val_low         1   13[BANK0 ] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      _Bool 
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0, pclath, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5099 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;Total ram usage:        5 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    8
  5106 ;; This function calls:
  5107 ;;		_wireWriteDataByte
  5108 ;; This function is called by:
  5109 ;;		_initialize
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _setLightIntLowThreshold
  5115  0D27                     _setLightIntLowThreshold:	
  5116                           
  5117                           ;APDS9960.c: 253: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 254: {;A
      +                          PDS9960.c: 255:     uint8_t val_low;;APDS9960.c: 256:     uint8_t val_high;;APDS9960.c: 
      +                          259:     val_low = threshold & 0x00FF;
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  5121  0D27  0020               	movlb	0	; select bank0
  5122  0D28  082A               	movf	setLightIntLowThreshold@threshold,w
  5123  0D29  00AC               	movwf	??_setLightIntLowThreshold
  5124  0D2A  082C               	movf	??_setLightIntLowThreshold,w
  5125  0D2B  00AD               	movwf	setLightIntLowThreshold@val_low
  5126                           
  5127                           ;APDS9960.c: 260:     val_high = (threshold & 0xFF00) >> 8;
  5128  0D2C  082B               	movf	setLightIntLowThreshold@threshold+1,w
  5129  0D2D  00AC               	movwf	??_setLightIntLowThreshold
  5130  0D2E  082C               	movf	??_setLightIntLowThreshold,w
  5131  0D2F  00AE               	movwf	setLightIntLowThreshold@val_high
  5132                           
  5133                           ;APDS9960.c: 263:     if( !wireWriteDataByte(0x84, val_low) ) {
  5134  0D30  082D               	movf	setLightIntLowThreshold@val_low,w
  5135  0D31  00AC               	movwf	??_setLightIntLowThreshold
  5136  0D32  082C               	movf	??_setLightIntLowThreshold,w
  5137  0D33  00A6               	movwf	wireWriteDataByte@val
  5138  0D34  3084               	movlw	132
  5139  0D35  318B  23F7  318D   	fcall	_wireWriteDataByte
  5140  0D38  0020               	movlb	0	; select bank0
  5141  0D39  0826               	movf	?_wireWriteDataByte,w
  5142  0D3A  0427               	iorwf	?_wireWriteDataByte+1,w
  5143  0D3B  1D03               	btfss	3,2
  5144  0D3C  2D3F               	goto	l5693
  5145  0D3D                     l5689:	
  5146                           
  5147                           ;APDS9960.c: 264:         return 0;
  5148  0D3D  3000               	movlw	0
  5149  0D3E  0008               	return
  5150  0D3F                     l5693:	
  5151                           
  5152                           ;APDS9960.c: 268:     if( !wireWriteDataByte(0x85, val_high) ) {
  5153  0D3F  082E               	movf	setLightIntLowThreshold@val_high,w
  5154  0D40  00AC               	movwf	??_setLightIntLowThreshold
  5155  0D41  082C               	movf	??_setLightIntLowThreshold,w
  5156  0D42  00A6               	movwf	wireWriteDataByte@val
  5157  0D43  3085               	movlw	133
  5158  0D44  318B  23F7  318D   	fcall	_wireWriteDataByte
  5159  0D47  0020               	movlb	0	; select bank0
  5160  0D48  0826               	movf	?_wireWriteDataByte,w
  5161  0D49  0427               	iorwf	?_wireWriteDataByte+1,w
  5162  0D4A  1903               	btfsc	3,2
  5163  0D4B  2D3D               	goto	l5689
  5164                           
  5165                           ;APDS9960.c: 272:     return 1;
  5166  0D4C  3001               	movlw	1
  5167  0D4D  0008               	return
  5168  0D4E                     __end_of_setLightIntLowThreshold:	
  5169                           
  5170                           	psect	text6
  5171  0D00                     __ptext6:	
  5172 ;; *************** function _setLightIntHighThreshold *****************
  5173 ;; Defined at:
  5174 ;;		line 276 in file "APDS9960.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  threshold       2   10[BANK0 ] unsigned short 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  val_high        1   14[BANK0 ] unsigned char 
  5179 ;;  val_low         1   13[BANK0 ] unsigned char 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      _Bool 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5189 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;Total ram usage:        5 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    8
  5196 ;; This function calls:
  5197 ;;		_wireWriteDataByte
  5198 ;; This function is called by:
  5199 ;;		_initialize
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _setLightIntHighThreshold
  5205  0D00                     _setLightIntHighThreshold:	
  5206                           
  5207                           ;APDS9960.c: 276: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 277: {;
      +                          APDS9960.c: 278:     uint8_t val_low;;APDS9960.c: 279:     uint8_t val_high;;APDS9960.c:
      +                           282:     val_low = threshold & 0x00FF;
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  5211  0D00  0020               	movlb	0	; select bank0
  5212  0D01  082A               	movf	setLightIntHighThreshold@threshold,w
  5213  0D02  00AC               	movwf	??_setLightIntHighThreshold
  5214  0D03  082C               	movf	??_setLightIntHighThreshold,w
  5215  0D04  00AD               	movwf	setLightIntHighThreshold@val_low
  5216                           
  5217                           ;APDS9960.c: 283:     val_high = (threshold & 0xFF00) >> 8;
  5218  0D05  082B               	movf	setLightIntHighThreshold@threshold+1,w
  5219  0D06  00AC               	movwf	??_setLightIntHighThreshold
  5220  0D07  082C               	movf	??_setLightIntHighThreshold,w
  5221  0D08  00AE               	movwf	setLightIntHighThreshold@val_high
  5222                           
  5223                           ;APDS9960.c: 286:     if( !wireWriteDataByte(0x86, val_low) ) {
  5224  0D09  082D               	movf	setLightIntHighThreshold@val_low,w
  5225  0D0A  00AC               	movwf	??_setLightIntHighThreshold
  5226  0D0B  082C               	movf	??_setLightIntHighThreshold,w
  5227  0D0C  00A6               	movwf	wireWriteDataByte@val
  5228  0D0D  3086               	movlw	134
  5229  0D0E  318B  23F7  318D   	fcall	_wireWriteDataByte
  5230  0D11  0020               	movlb	0	; select bank0
  5231  0D12  0826               	movf	?_wireWriteDataByte,w
  5232  0D13  0427               	iorwf	?_wireWriteDataByte+1,w
  5233  0D14  1D03               	btfss	3,2
  5234  0D15  2D18               	goto	l5713
  5235  0D16                     l5709:	
  5236                           
  5237                           ;APDS9960.c: 287:         return 0;
  5238  0D16  3000               	movlw	0
  5239  0D17  0008               	return
  5240  0D18                     l5713:	
  5241                           
  5242                           ;APDS9960.c: 291:     if( !wireWriteDataByte(0x87, val_high) ) {
  5243  0D18  082E               	movf	setLightIntHighThreshold@val_high,w
  5244  0D19  00AC               	movwf	??_setLightIntHighThreshold
  5245  0D1A  082C               	movf	??_setLightIntHighThreshold,w
  5246  0D1B  00A6               	movwf	wireWriteDataByte@val
  5247  0D1C  3087               	movlw	135
  5248  0D1D  318B  23F7  318D   	fcall	_wireWriteDataByte
  5249  0D20  0020               	movlb	0	; select bank0
  5250  0D21  0826               	movf	?_wireWriteDataByte,w
  5251  0D22  0427               	iorwf	?_wireWriteDataByte+1,w
  5252  0D23  1903               	btfsc	3,2
  5253  0D24  2D16               	goto	l5709
  5254                           
  5255                           ;APDS9960.c: 295:     return 1;
  5256  0D25  3001               	movlw	1
  5257  0D26  0008               	return
  5258  0D27                     __end_of_setLightIntHighThreshold:	
  5259                           
  5260                           	psect	text7
  5261  0D4E                     __ptext7:	
  5262 ;; *************** function _setLEDDrive *****************
  5263 ;; Defined at:
  5264 ;;		line 169 in file "APDS9960.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  drive           1    wreg     unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  drive           1   13[BANK0 ] unsigned char 
  5269 ;;  val             1   12[BANK0 ] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      _Bool 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;Total ram usage:        4 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    8
  5286 ;; This function calls:
  5287 ;;		_wireReadDataByte
  5288 ;;		_wireWriteDataByte
  5289 ;; This function is called by:
  5290 ;;		_initialize
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           
  5295                           ;psect for function _setLEDDrive
  5296  0D4E                     _setLEDDrive:	
  5297                           
  5298                           ;incstack = 0
  5299                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5300                           ;setLEDDrive@drive stored from wreg
  5301  0D4E  0020               	movlb	0	; select bank0
  5302  0D4F  00AD               	movwf	setLEDDrive@drive
  5303                           
  5304                           ;APDS9960.c: 169: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 170: {;APDS9960.c: 171:  
      +                             uint8_t val;;APDS9960.c: 174:     val=wireReadDataByte(0x8F);
  5305  0D50  308F               	movlw	143
  5306  0D51  318C  2468  318D   	fcall	_wireReadDataByte
  5307  0D54  0020               	movlb	0	; select bank0
  5308  0D55  00AA               	movwf	??_setLEDDrive
  5309  0D56  082A               	movf	??_setLEDDrive,w
  5310  0D57  00AC               	movwf	setLEDDrive@val
  5311                           
  5312                           ;APDS9960.c: 177:     drive &= 0b00000011;
  5313  0D58  3003               	movlw	3
  5314  0D59  00AA               	movwf	??_setLEDDrive
  5315  0D5A  082A               	movf	??_setLEDDrive,w
  5316  0D5B  05AD               	andwf	setLEDDrive@drive,f
  5317                           
  5318                           ;APDS9960.c: 178:     drive = drive << 6;
  5319  0D5C  082D               	movf	setLEDDrive@drive,w
  5320  0D5D  00AA               	movwf	??_setLEDDrive
  5321  0D5E  3005               	movlw	5
  5322  0D5F                     u4975:	
  5323  0D5F  35AA               	lslf	??_setLEDDrive,f
  5324  0D60  3EFF               	addlw	-1
  5325  0D61  1D03               	skipz
  5326  0D62  2D5F               	goto	u4975
  5327  0D63  352A               	lslf	??_setLEDDrive,w
  5328  0D64  00AB               	movwf	??_setLEDDrive+1
  5329  0D65  082B               	movf	??_setLEDDrive+1,w
  5330  0D66  00AD               	movwf	setLEDDrive@drive
  5331                           
  5332                           ;APDS9960.c: 179:     val &= 0b00111111;
  5333  0D67  303F               	movlw	63
  5334  0D68  00AA               	movwf	??_setLEDDrive
  5335  0D69  082A               	movf	??_setLEDDrive,w
  5336  0D6A  05AC               	andwf	setLEDDrive@val,f
  5337                           
  5338                           ;APDS9960.c: 180:     val |= drive;
  5339  0D6B  082D               	movf	setLEDDrive@drive,w
  5340  0D6C  00AA               	movwf	??_setLEDDrive
  5341  0D6D  082A               	movf	??_setLEDDrive,w
  5342  0D6E  04AC               	iorwf	setLEDDrive@val,f
  5343                           
  5344                           ;APDS9960.c: 183:     if( !wireWriteDataByte(0x8F, val) ) {
  5345  0D6F  082C               	movf	setLEDDrive@val,w
  5346  0D70  00AA               	movwf	??_setLEDDrive
  5347  0D71  082A               	movf	??_setLEDDrive,w
  5348  0D72  00A6               	movwf	wireWriteDataByte@val
  5349  0D73  308F               	movlw	143
  5350  0D74  318B  23F7         	fcall	_wireWriteDataByte
  5351  0D76  0008               	return
  5352  0D77                     __end_of_setLEDDrive:	
  5353                           
  5354                           	psect	text8
  5355  0CD9                     __ptext8:	
  5356 ;; *************** function _setGestureWaitTime *****************
  5357 ;; Defined at:
  5358 ;;		line 365 in file "APDS9960.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  time            1    wreg     unsigned char 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  time            1   11[BANK0 ] unsigned char 
  5363 ;;  val             1   12[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      _Bool 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;Total ram usage:        3 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    8
  5380 ;; This function calls:
  5381 ;;		_wireReadDataByte
  5382 ;;		_wireWriteDataByte
  5383 ;; This function is called by:
  5384 ;;		_initialize
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           
  5389                           ;psect for function _setGestureWaitTime
  5390  0CD9                     _setGestureWaitTime:	
  5391                           
  5392                           ;incstack = 0
  5393                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  5394                           ;setGestureWaitTime@time stored from wreg
  5395  0CD9  0020               	movlb	0	; select bank0
  5396  0CDA  00AB               	movwf	setGestureWaitTime@time
  5397                           
  5398                           ;APDS9960.c: 365: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 366: {;APDS9960.c: 
      +                          367:     uint8_t val;;APDS9960.c: 370:     val = wireReadDataByte(0xA3);
  5399  0CDB  30A3               	movlw	163
  5400  0CDC  318C  2468  318C   	fcall	_wireReadDataByte
  5401  0CDF  0020               	movlb	0	; select bank0
  5402  0CE0  00AA               	movwf	??_setGestureWaitTime
  5403  0CE1  082A               	movf	??_setGestureWaitTime,w
  5404  0CE2  00AC               	movwf	setGestureWaitTime@val
  5405                           
  5406                           ;APDS9960.c: 373:     time &= 0b00000111;
  5407  0CE3  3007               	movlw	7
  5408  0CE4  00AA               	movwf	??_setGestureWaitTime
  5409  0CE5  082A               	movf	??_setGestureWaitTime,w
  5410  0CE6  05AB               	andwf	setGestureWaitTime@time,f
  5411                           
  5412                           ;APDS9960.c: 374:     val &= 0b11111000;
  5413  0CE7  30F8               	movlw	248
  5414  0CE8  00AA               	movwf	??_setGestureWaitTime
  5415  0CE9  082A               	movf	??_setGestureWaitTime,w
  5416  0CEA  05AC               	andwf	setGestureWaitTime@val,f
  5417                           
  5418                           ;APDS9960.c: 375:     val |= time;
  5419  0CEB  082B               	movf	setGestureWaitTime@time,w
  5420  0CEC  00AA               	movwf	??_setGestureWaitTime
  5421  0CED  082A               	movf	??_setGestureWaitTime,w
  5422  0CEE  04AC               	iorwf	setGestureWaitTime@val,f
  5423                           
  5424                           ;APDS9960.c: 378:     if( !wireWriteDataByte(0xA3, val) ) {
  5425  0CEF  082C               	movf	setGestureWaitTime@val,w
  5426  0CF0  00AA               	movwf	??_setGestureWaitTime
  5427  0CF1  082A               	movf	??_setGestureWaitTime,w
  5428  0CF2  00A6               	movwf	wireWriteDataByte@val
  5429  0CF3  30A3               	movlw	163
  5430  0CF4  318B  23F7  318C   	fcall	_wireWriteDataByte
  5431  0CF7  0020               	movlb	0	; select bank0
  5432  0CF8  0826               	movf	?_wireWriteDataByte,w
  5433  0CF9  0427               	iorwf	?_wireWriteDataByte+1,w
  5434  0CFA  1D03               	btfss	3,2
  5435  0CFB  2CFE               	goto	l5793
  5436                           
  5437                           ;APDS9960.c: 379:         return 0;
  5438  0CFC  3000               	movlw	0
  5439  0CFD  0008               	return
  5440  0CFE                     l5793:	
  5441                           
  5442                           ;APDS9960.c: 382:     return 1;
  5443  0CFE  3001               	movlw	1
  5444  0CFF  0008               	return
  5445  0D00                     __end_of_setGestureWaitTime:	
  5446                           
  5447                           	psect	text9
  5448  0E8B                     __ptext9:	
  5449 ;; *************** function _setGestureLEDDrive *****************
  5450 ;; Defined at:
  5451 ;;		line 342 in file "APDS9960.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  drive           1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  drive           1   13[BANK0 ] unsigned char 
  5456 ;;  val             1   12[BANK0 ] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  1    wreg      _Bool 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, pclath, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;Total ram usage:        4 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    8
  5473 ;; This function calls:
  5474 ;;		_wireReadDataByte
  5475 ;;		_wireWriteDataByte
  5476 ;; This function is called by:
  5477 ;;		_initialize
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function _setGestureLEDDrive
  5483  0E8B                     _setGestureLEDDrive:	
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5487                           ;setGestureLEDDrive@drive stored from wreg
  5488  0E8B  0020               	movlb	0	; select bank0
  5489  0E8C  00AD               	movwf	setGestureLEDDrive@drive
  5490                           
  5491                           ;APDS9960.c: 342: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 343: {;APDS9960.c:
      +                           344:     uint8_t val;;APDS9960.c: 347:     val = wireReadDataByte(0xA3);
  5492  0E8D  30A3               	movlw	163
  5493  0E8E  318C  2468  318E   	fcall	_wireReadDataByte
  5494  0E91  0020               	movlb	0	; select bank0
  5495  0E92  00AA               	movwf	??_setGestureLEDDrive
  5496  0E93  082A               	movf	??_setGestureLEDDrive,w
  5497  0E94  00AC               	movwf	setGestureLEDDrive@val
  5498                           
  5499                           ;APDS9960.c: 351:     drive &= 0b00000011;
  5500  0E95  3003               	movlw	3
  5501  0E96  00AA               	movwf	??_setGestureLEDDrive
  5502  0E97  082A               	movf	??_setGestureLEDDrive,w
  5503  0E98  05AD               	andwf	setGestureLEDDrive@drive,f
  5504                           
  5505                           ;APDS9960.c: 352:     drive = drive << 3;
  5506  0E99  082D               	movf	setGestureLEDDrive@drive,w
  5507  0E9A  00AA               	movwf	??_setGestureLEDDrive
  5508  0E9B  3002               	movlw	2
  5509  0E9C                     u5095:	
  5510  0E9C  35AA               	lslf	??_setGestureLEDDrive,f
  5511  0E9D  3EFF               	addlw	-1
  5512  0E9E  1D03               	skipz
  5513  0E9F  2E9C               	goto	u5095
  5514  0EA0  352A               	lslf	??_setGestureLEDDrive,w
  5515  0EA1  00AB               	movwf	??_setGestureLEDDrive+1
  5516  0EA2  082B               	movf	??_setGestureLEDDrive+1,w
  5517  0EA3  00AD               	movwf	setGestureLEDDrive@drive
  5518                           
  5519                           ;APDS9960.c: 353:     val &= 0b11100111;
  5520  0EA4  30E7               	movlw	231
  5521  0EA5  00AA               	movwf	??_setGestureLEDDrive
  5522  0EA6  082A               	movf	??_setGestureLEDDrive,w
  5523  0EA7  05AC               	andwf	setGestureLEDDrive@val,f
  5524                           
  5525                           ;APDS9960.c: 354:     val |= drive;
  5526  0EA8  082D               	movf	setGestureLEDDrive@drive,w
  5527  0EA9  00AA               	movwf	??_setGestureLEDDrive
  5528  0EAA  082A               	movf	??_setGestureLEDDrive,w
  5529  0EAB  04AC               	iorwf	setGestureLEDDrive@val,f
  5530                           
  5531                           ;APDS9960.c: 357:     if( !wireWriteDataByte(0xA3, val) ) {
  5532  0EAC  082C               	movf	setGestureLEDDrive@val,w
  5533  0EAD  00AA               	movwf	??_setGestureLEDDrive
  5534  0EAE  082A               	movf	??_setGestureLEDDrive,w
  5535  0EAF  00A6               	movwf	wireWriteDataByte@val
  5536  0EB0  30A3               	movlw	163
  5537  0EB1  318B  23F7  318E   	fcall	_wireWriteDataByte
  5538  0EB4  0020               	movlb	0	; select bank0
  5539  0EB5  0826               	movf	?_wireWriteDataByte,w
  5540  0EB6  0427               	iorwf	?_wireWriteDataByte+1,w
  5541  0EB7  1D03               	btfss	3,2
  5542  0EB8  2EBB               	goto	l5775
  5543                           
  5544                           ;APDS9960.c: 358:         return 0;
  5545  0EB9  3000               	movlw	0
  5546  0EBA  0008               	return
  5547  0EBB                     l5775:	
  5548                           
  5549                           ;APDS9960.c: 361:     return 1;
  5550  0EBB  3001               	movlw	1
  5551  0EBC  0008               	return
  5552  0EBD                     __end_of_setGestureLEDDrive:	
  5553                           
  5554                           	psect	text10
  5555  0E59                     __ptext10:	
  5556 ;; *************** function _setGestureGain *****************
  5557 ;; Defined at:
  5558 ;;		line 319 in file "APDS9960.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  gain            1    wreg     unsigned char 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  gain            1   13[BANK0 ] unsigned char 
  5563 ;;  val             1   12[BANK0 ] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      _Bool 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, pclath, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;Total ram usage:        4 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    8
  5580 ;; This function calls:
  5581 ;;		_wireReadDataByte
  5582 ;;		_wireWriteDataByte
  5583 ;; This function is called by:
  5584 ;;		_initialize
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function _setGestureGain
  5590  0E59                     _setGestureGain:	
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  5594                           ;setGestureGain@gain stored from wreg
  5595  0E59  0020               	movlb	0	; select bank0
  5596  0E5A  00AD               	movwf	setGestureGain@gain
  5597                           
  5598                           ;APDS9960.c: 319: _Bool setGestureGain(uint8_t gain);APDS9960.c: 320: {;APDS9960.c: 321:
      +                               uint8_t val;;APDS9960.c: 324:     val = wireReadDataByte(0xA3);
  5599  0E5B  30A3               	movlw	163
  5600  0E5C  318C  2468  318E   	fcall	_wireReadDataByte
  5601  0E5F  0020               	movlb	0	; select bank0
  5602  0E60  00AA               	movwf	??_setGestureGain
  5603  0E61  082A               	movf	??_setGestureGain,w
  5604  0E62  00AC               	movwf	setGestureGain@val
  5605                           
  5606                           ;APDS9960.c: 328:     gain &= 0b00000011;
  5607  0E63  3003               	movlw	3
  5608  0E64  00AA               	movwf	??_setGestureGain
  5609  0E65  082A               	movf	??_setGestureGain,w
  5610  0E66  05AD               	andwf	setGestureGain@gain,f
  5611                           
  5612                           ;APDS9960.c: 329:     gain = gain << 5;
  5613  0E67  082D               	movf	setGestureGain@gain,w
  5614  0E68  00AA               	movwf	??_setGestureGain
  5615  0E69  3004               	movlw	4
  5616  0E6A                     u5075:	
  5617  0E6A  35AA               	lslf	??_setGestureGain,f
  5618  0E6B  3EFF               	addlw	-1
  5619  0E6C  1D03               	skipz
  5620  0E6D  2E6A               	goto	u5075
  5621  0E6E  352A               	lslf	??_setGestureGain,w
  5622  0E6F  00AB               	movwf	??_setGestureGain+1
  5623  0E70  082B               	movf	??_setGestureGain+1,w
  5624  0E71  00AD               	movwf	setGestureGain@gain
  5625                           
  5626                           ;APDS9960.c: 330:     val &= 0b10011111;
  5627  0E72  309F               	movlw	159
  5628  0E73  00AA               	movwf	??_setGestureGain
  5629  0E74  082A               	movf	??_setGestureGain,w
  5630  0E75  05AC               	andwf	setGestureGain@val,f
  5631                           
  5632                           ;APDS9960.c: 331:     val |= gain;
  5633  0E76  082D               	movf	setGestureGain@gain,w
  5634  0E77  00AA               	movwf	??_setGestureGain
  5635  0E78  082A               	movf	??_setGestureGain,w
  5636  0E79  04AC               	iorwf	setGestureGain@val,f
  5637                           
  5638                           ;APDS9960.c: 334:     if( !wireWriteDataByte(0xA3, val) ) {
  5639  0E7A  082C               	movf	setGestureGain@val,w
  5640  0E7B  00AA               	movwf	??_setGestureGain
  5641  0E7C  082A               	movf	??_setGestureGain,w
  5642  0E7D  00A6               	movwf	wireWriteDataByte@val
  5643  0E7E  30A3               	movlw	163
  5644  0E7F  318B  23F7  318E   	fcall	_wireWriteDataByte
  5645  0E82  0020               	movlb	0	; select bank0
  5646  0E83  0826               	movf	?_wireWriteDataByte,w
  5647  0E84  0427               	iorwf	?_wireWriteDataByte+1,w
  5648  0E85  1D03               	btfss	3,2
  5649  0E86  2E89               	goto	l5757
  5650                           
  5651                           ;APDS9960.c: 335:         return 0;
  5652  0E87  3000               	movlw	0
  5653  0E88  0008               	return
  5654  0E89                     l5757:	
  5655                           
  5656                           ;APDS9960.c: 338:     return 1;
  5657  0E89  3001               	movlw	1
  5658  0E8A  0008               	return
  5659  0E8B                     __end_of_setGestureGain:	
  5660                           
  5661                           	psect	text11
  5662  0BA9                     __ptext11:	
  5663 ;; *************** function _setGestureExitThresh *****************
  5664 ;; Defined at:
  5665 ;;		line 309 in file "APDS9960.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  threshold       1    wreg     unsigned char 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  threshold       1   11[BANK0 ] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      _Bool 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0, pclath, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5682 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5683 ;;Total ram usage:        2 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    8
  5686 ;; This function calls:
  5687 ;;		_wireWriteDataByte
  5688 ;; This function is called by:
  5689 ;;		_initialize
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           
  5694                           ;psect for function _setGestureExitThresh
  5695  0BA9                     _setGestureExitThresh:	
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  5699                           ;setGestureExitThresh@threshold stored from wreg
  5700  0BA9  0020               	movlb	0	; select bank0
  5701  0BAA  00AB               	movwf	setGestureExitThresh@threshold
  5702                           
  5703                           ;APDS9960.c: 309: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 310: {;APDS9
      +                          960.c: 311:     if( !wireWriteDataByte(0xA1, threshold) ) {
  5704  0BAB  082B               	movf	setGestureExitThresh@threshold,w
  5705  0BAC  00AA               	movwf	??_setGestureExitThresh
  5706  0BAD  082A               	movf	??_setGestureExitThresh,w
  5707  0BAE  00A6               	movwf	wireWriteDataByte@val
  5708  0BAF  30A1               	movlw	161
  5709  0BB0  318B  23F7  318B   	fcall	_wireWriteDataByte
  5710  0BB3  0020               	movlb	0	; select bank0
  5711  0BB4  0826               	movf	?_wireWriteDataByte,w
  5712  0BB5  0427               	iorwf	?_wireWriteDataByte+1,w
  5713  0BB6  1D03               	btfss	3,2
  5714  0BB7  2BBA               	goto	l5739
  5715                           
  5716                           ;APDS9960.c: 312:         return 0;
  5717  0BB8  3000               	movlw	0
  5718  0BB9  0008               	return
  5719  0BBA                     l5739:	
  5720                           
  5721                           ;APDS9960.c: 315:     return 1;
  5722  0BBA  3001               	movlw	1
  5723  0BBB  0008               	return
  5724  0BBC                     __end_of_setGestureExitThresh:	
  5725                           
  5726                           	psect	text12
  5727  0B96                     __ptext12:	
  5728 ;; *************** function _setGestureEnterThresh *****************
  5729 ;; Defined at:
  5730 ;;		line 299 in file "APDS9960.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  threshold       1    wreg     unsigned char 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  threshold       1   11[BANK0 ] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      _Bool 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0, pclath, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;Total ram usage:        2 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    8
  5751 ;; This function calls:
  5752 ;;		_wireWriteDataByte
  5753 ;; This function is called by:
  5754 ;;		_initialize
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           
  5759                           ;psect for function _setGestureEnterThresh
  5760  0B96                     _setGestureEnterThresh:	
  5761                           
  5762                           ;incstack = 0
  5763                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  5764                           ;setGestureEnterThresh@threshold stored from wreg
  5765  0B96  0020               	movlb	0	; select bank0
  5766  0B97  00AB               	movwf	setGestureEnterThresh@threshold
  5767                           
  5768                           ;APDS9960.c: 299: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 300: {;APDS
      +                          9960.c: 301:     if( !wireWriteDataByte(0xA0, threshold) ) {
  5769  0B98  082B               	movf	setGestureEnterThresh@threshold,w
  5770  0B99  00AA               	movwf	??_setGestureEnterThresh
  5771  0B9A  082A               	movf	??_setGestureEnterThresh,w
  5772  0B9B  00A6               	movwf	wireWriteDataByte@val
  5773  0B9C  30A0               	movlw	160
  5774  0B9D  318B  23F7  318B   	fcall	_wireWriteDataByte
  5775  0BA0  0020               	movlb	0	; select bank0
  5776  0BA1  0826               	movf	?_wireWriteDataByte,w
  5777  0BA2  0427               	iorwf	?_wireWriteDataByte+1,w
  5778  0BA3  1D03               	btfss	3,2
  5779  0BA4  2BA7               	goto	l5729
  5780                           
  5781                           ;APDS9960.c: 302:         return 0;
  5782  0BA5  3000               	movlw	0
  5783  0BA6  0008               	return
  5784  0BA7                     l5729:	
  5785                           
  5786                           ;APDS9960.c: 305:     return 1;
  5787  0BA7  3001               	movlw	1
  5788  0BA8  0008               	return
  5789  0BA9                     __end_of_setGestureEnterThresh:	
  5790                           
  5791                           	psect	text13
  5792  0C4A                     __ptext13:	
  5793 ;; *************** function _setAmbientLightGain *****************
  5794 ;; Defined at:
  5795 ;;		line 212 in file "APDS9960.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;  drive           1    wreg     unsigned char 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  drive           1   11[BANK0 ] unsigned char 
  5800 ;;  val             1   12[BANK0 ] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      _Bool 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, pclath, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;Total ram usage:        3 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    8
  5817 ;; This function calls:
  5818 ;;		_wireReadDataByte
  5819 ;;		_wireWriteDataByte
  5820 ;; This function is called by:
  5821 ;;		_initialize
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _setAmbientLightGain
  5827  0C4A                     _setAmbientLightGain:	
  5828                           
  5829                           ;incstack = 0
  5830                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  5831                           ;setAmbientLightGain@drive stored from wreg
  5832  0C4A  0020               	movlb	0	; select bank0
  5833  0C4B  00AB               	movwf	setAmbientLightGain@drive
  5834                           
  5835                           ;APDS9960.c: 212: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 213: {;APDS9960.c
      +                          : 214:     uint8_t val;;APDS9960.c: 217:     val= wireReadDataByte(0x8F);
  5836  0C4C  308F               	movlw	143
  5837  0C4D  318C  2468  318C   	fcall	_wireReadDataByte
  5838  0C50  0020               	movlb	0	; select bank0
  5839  0C51  00AA               	movwf	??_setAmbientLightGain
  5840  0C52  082A               	movf	??_setAmbientLightGain,w
  5841  0C53  00AC               	movwf	setAmbientLightGain@val
  5842                           
  5843                           ;APDS9960.c: 220:     drive &= 0b00000011;
  5844  0C54  3003               	movlw	3
  5845  0C55  00AA               	movwf	??_setAmbientLightGain
  5846  0C56  082A               	movf	??_setAmbientLightGain,w
  5847  0C57  05AB               	andwf	setAmbientLightGain@drive,f
  5848                           
  5849                           ;APDS9960.c: 221:     val &= 0b11111100;
  5850  0C58  30FC               	movlw	252
  5851  0C59  00AA               	movwf	??_setAmbientLightGain
  5852  0C5A  082A               	movf	??_setAmbientLightGain,w
  5853  0C5B  05AC               	andwf	setAmbientLightGain@val,f
  5854                           
  5855                           ;APDS9960.c: 222:     val |= drive;
  5856  0C5C  082B               	movf	setAmbientLightGain@drive,w
  5857  0C5D  00AA               	movwf	??_setAmbientLightGain
  5858  0C5E  082A               	movf	??_setAmbientLightGain,w
  5859  0C5F  04AC               	iorwf	setAmbientLightGain@val,f
  5860                           
  5861                           ;APDS9960.c: 225:     if( !wireWriteDataByte(0x8F, val) ) {
  5862  0C60  082C               	movf	setAmbientLightGain@val,w
  5863  0C61  00AA               	movwf	??_setAmbientLightGain
  5864  0C62  082A               	movf	??_setAmbientLightGain,w
  5865  0C63  00A6               	movwf	wireWriteDataByte@val
  5866  0C64  308F               	movlw	143
  5867  0C65  318B  23F7         	fcall	_wireWriteDataByte
  5868  0C67  0008               	return
  5869  0C68                     __end_of_setAmbientLightGain:	
  5870                           
  5871                           	psect	text14
  5872  0B47                     __ptext14:	
  5873 ;; *************** function _i2c1_driver_open *****************
  5874 ;; Defined at:
  5875 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg, status,2
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:        0 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    5
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_initialize
  5900 ;;		_i2c_open
  5901 ;;		_InitI2C
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           
  5906                           ;psect for function _i2c1_driver_open
  5907  0B47                     _i2c1_driver_open:	
  5908                           
  5909                           ;incstack = 0
  5910                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  5911  0B47  0024               	movlb	4	; select bank4
  5912  0B48  1A95               	btfsc	21,5	;volatile
  5913  0B49  0008               	return
  5914  0B4A  0194               	clrf	20	;volatile
  5915  0B4B  3028               	movlw	40
  5916  0B4C  0095               	movwf	21	;volatile
  5917  0B4D  0196               	clrf	22	;volatile
  5918  0B4E  3003               	movlw	3
  5919  0B4F  0092               	movwf	18	;volatile
  5920  0B50  0008               	return
  5921  0B51                     __end_of_i2c1_driver_open:	
  5922                           
  5923                           	psect	text15
  5924  0F2C                     __ptext15:	
  5925 ;; *************** function _handleGesture *****************
  5926 ;; Defined at:
  5927 ;;		line 154 in file "main.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;Total ram usage:        2 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:   10
  5948 ;; This function calls:
  5949 ;;		_LEDs_SetLow
  5950 ;;		_isGestureAvailable
  5951 ;;		_readGesture
  5952 ;; This function is called by:
  5953 ;;		_main
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _handleGesture
  5959  0F2C                     _handleGesture:	
  5960                           
  5961                           ;main.c: 155:     if (isGestureAvailable()){
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5965  0F2C  318B  2383  318F   	fcall	_isGestureAvailable
  5966  0F2F  3A00               	xorlw	0
  5967  0F30  1903               	skipnz
  5968  0F31  0008               	return
  5969  0F32  2F58               	goto	l6125
  5970  0F33                     l6099:	
  5971                           
  5972                           ;main.c: 158:                 LEDs_SetLow();
  5973  0F33  318A  22FC  318F   	fcall	_LEDs_SetLow
  5974  0F36  0022               	movlb	2	; select bank2
  5975  0F37  168E               	bsf	14,5	;volatile
  5976  0F38                     l6103:	
  5977                           
  5978                           ;main.c: 160:                 _delay((unsigned long)((1000)*(1000000/4000.0)));
  5979  0F38  3002               	movlw	2
  5980  0F39  0020               	movlb	0	; select bank0
  5981  0F3A  00DC               	movwf	??_handleGesture+1
  5982  0F3B  3045               	movlw	69
  5983  0F3C  00DB               	movwf	??_handleGesture
  5984  0F3D  30A9               	movlw	169
  5985  0F3E                     u5597:	
  5986  0F3E  0B89               	decfsz	9,f
  5987  0F3F  2F3E               	goto	u5597
  5988  0F40  0BDB               	decfsz	??_handleGesture,f
  5989  0F41  2F3E               	goto	u5597
  5990  0F42  0BDC               	decfsz	??_handleGesture+1,f
  5991  0F43  2F3E               	goto	u5597
  5992  0F44  3200               	nop2
  5993                           
  5994                           ;main.c: 161:                 break;
  5995  0F45  0008               	return
  5996  0F46                     l6105:	
  5997                           
  5998                           ;main.c: 163:                 LEDs_SetLow();
  5999  0F46  318A  22FC  318F   	fcall	_LEDs_SetLow
  6000  0F49  0022               	movlb	2	; select bank2
  6001  0F4A  150C               	bsf	12,2	;volatile
  6002  0F4B  2F38               	goto	l6103
  6003  0F4C                     l6111:	
  6004                           
  6005                           ;main.c: 168:                 LEDs_SetLow();
  6006  0F4C  318A  22FC  318F   	fcall	_LEDs_SetLow
  6007  0F4F  0022               	movlb	2	; select bank2
  6008  0F50  148C               	bsf	12,1	;volatile
  6009  0F51  2F38               	goto	l6103
  6010  0F52                     l6117:	
  6011                           
  6012                           ;main.c: 173:                 LEDs_SetLow();
  6013  0F52  318A  22FC  318F   	fcall	_LEDs_SetLow
  6014  0F55  0022               	movlb	2	; select bank2
  6015  0F56  168C               	bsf	12,5	;volatile
  6016  0F57  2F38               	goto	l6103
  6017  0F58                     l6125:	
  6018  0F58  3185  25BC  318F   	fcall	_readGesture
  6019                           
  6020                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6021                           ; Switch size 1, requested type "simple"
  6022                           ; Number of cases is 1, Range of values is 0 to 0
  6023                           ; switch strategies available:
  6024                           ; Name         Instructions Cycles
  6025                           ; simple_byte            4     3 (average)
  6026                           ; direct_byte            8     6 (fixed)
  6027                           ; jumptable            260     6 (fixed)
  6028                           ;	Chosen strategy is simple_byte
  6029  0F5B  0020               	movlb	0	; select bank0
  6030  0F5C  0850               	movf	?_readGesture+1,w
  6031  0F5D  3A00               	xorlw	0	; case 0
  6032  0F5E  1903               	skipnz
  6033  0F5F  2F61               	goto	l6331
  6034  0F60  2F6F               	goto	l619
  6035  0F61                     l6331:	
  6036                           
  6037                           ; Switch size 1, requested type "simple"
  6038                           ; Number of cases is 4, Range of values is 1 to 4
  6039                           ; switch strategies available:
  6040                           ; Name         Instructions Cycles
  6041                           ; simple_byte           13     7 (average)
  6042                           ; direct_byte           17     9 (fixed)
  6043                           ; jumptable            263     9 (fixed)
  6044                           ;	Chosen strategy is simple_byte
  6045  0F61  084F               	movf	?_readGesture,w
  6046  0F62  3A01               	xorlw	1	; case 1
  6047  0F63  1903               	skipnz
  6048  0F64  2F4C               	goto	l6111
  6049  0F65  3A03               	xorlw	3	; case 2
  6050  0F66  1903               	skipnz
  6051  0F67  2F52               	goto	l6117
  6052  0F68  3A01               	xorlw	1	; case 3
  6053  0F69  1903               	skipnz
  6054  0F6A  2F33               	goto	l6099
  6055  0F6B  3A07               	xorlw	7	; case 4
  6056  0F6C  1903               	skipnz
  6057  0F6D  2F46               	goto	l6105
  6058  0F6E  2F6F               	goto	l619
  6059  0F6F                     l619:	
  6060  0F6F  0008               	return
  6061  0F70                     __end_of_handleGesture:	
  6062                           
  6063                           	psect	text16
  6064  05BC                     __ptext16:	
  6065 ;; *************** function _readGesture *****************
  6066 ;; Defined at:
  6067 ;;		line 555 in file "APDS9960.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  6072 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  6073 ;;  i               2   57[BANK0 ] int 
  6074 ;;  bytes_read      2   54[BANK0 ] int 
  6075 ;;  motion          2   51[BANK0 ] int 
  6076 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  6077 ;;  gstatus         1   53[BANK0 ] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  2   47[BANK0 ] int 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;Total ram usage:      140 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    9
  6094 ;; This function calls:
  6095 ;;		_decodeGesture
  6096 ;;		_getMode
  6097 ;;		_isGestureAvailable
  6098 ;;		_processGestureData
  6099 ;;		_resetGestureParameters
  6100 ;;		_wireReadDataBlock
  6101 ;;		_wireReadDataByte
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;;		_handleGesture
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function _readGesture
  6110  05BC                     _readGesture:	
  6111                           
  6112                           ;APDS9960.c: 558:     int bytes_read = 0;
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6116  05BC  0020               	movlb	0	; select bank0
  6117  05BD  01D6               	clrf	readGesture@bytes_read
  6118  05BE  01D7               	clrf	readGesture@bytes_read+1
  6119                           
  6120                           ;APDS9960.c: 559:     uint8_t fifo_data[64];;APDS9960.c: 560:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 561:     uint8_t gstatus;;APDS9960.c: 562:     int motion;;APDS9960.c: 563
      +                          :     int i;;APDS9960.c: 566:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  6121  05BF  318B  2383  3185   	fcall	_isGestureAvailable
  6122  05C2  3A00               	xorlw	0
  6123  05C3  1903               	skipnz
  6124  05C4  2DCB               	goto	l5571
  6125  05C5  318B  233E  3185   	fcall	_getMode
  6126  05C8  3941               	andlw	65
  6127  05C9  1D03               	btfss	3,2
  6128  05CA  2E80               	goto	l5575
  6129  05CB                     l5571:	
  6130                           
  6131                           ;APDS9960.c: 567:         return DIR_NONE;
  6132  05CB  0020               	movlb	0	; select bank0
  6133  05CC  01CF               	clrf	?_readGesture
  6134  05CD  01D0               	clrf	?_readGesture+1
  6135  05CE  0008               	return
  6136  05CF                     l5581:	
  6137                           ;APDS9960.c: 568:     }
  6138                           
  6139                           
  6140                           ;APDS9960.c: 583:         {;APDS9960.c: 585:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  6141  05CF  30AE               	movlw	174
  6142  05D0  318C  2468  3185   	fcall	_wireReadDataByte
  6143  05D3  0020               	movlb	0	; select bank0
  6144  05D4  00D1               	movwf	??_readGesture
  6145  05D5  0851               	movf	??_readGesture,w
  6146  05D6  00D8               	movwf	readGesture@fifo_level
  6147                           
  6148                           ;APDS9960.c: 589:             if( fifo_level > 0) {
  6149  05D7  0858               	movf	readGesture@fifo_level,w
  6150  05D8  1903               	btfsc	3,2
  6151  05D9  2E80               	goto	l5575
  6152                           
  6153                           ;APDS9960.c: 591:               if(fifo_level < 17)
  6154  05DA  3011               	movlw	17
  6155  05DB  0258               	subwf	readGesture@fifo_level,w
  6156  05DC  1803               	skipnc
  6157  05DD  2DE2               	goto	l5589
  6158                           
  6159                           ;APDS9960.c: 592:               {;APDS9960.c: 593:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6160  05DE  3020               	movlw	low readGesture@fifo_data
  6161  05DF  00A6               	movwf	wireReadDataBlock@val
  6162  05E0  3001               	movlw	high readGesture@fifo_data
  6163  05E1  2DE5               	goto	L1
  6164  05E2                     l5589:	
  6165                           ;APDS9960.c: 596:               } else
  6166                           
  6167                           
  6168                           ;APDS9960.c: 597:               {;APDS9960.c: 598:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6169  05E2  30A0               	movlw	low readGesture@fifo_data2
  6170  05E3  00A6               	movwf	wireReadDataBlock@val
  6171  05E4  3000               	movlw	high readGesture@fifo_data2
  6172  05E5                     L1:	
  6173  05E5  00A7               	movwf	wireReadDataBlock@val+1
  6174  05E6  0858               	movf	readGesture@fifo_level,w
  6175  05E7  00D1               	movwf	??_readGesture
  6176  05E8  01D2               	clrf	??_readGesture+1
  6177  05E9  35D1               	lslf	??_readGesture,f
  6178  05EA  0DD2               	rlf	??_readGesture+1,f
  6179  05EB  35D1               	lslf	??_readGesture,f
  6180  05EC  0DD2               	rlf	??_readGesture+1,f
  6181  05ED  0851               	movf	??_readGesture,w
  6182  05EE  00A8               	movwf	wireReadDataBlock@len
  6183  05EF  0852               	movf	??_readGesture+1,w
  6184  05F0  00A9               	movwf	wireReadDataBlock@len+1
  6185  05F1  30FC               	movlw	252
  6186  05F2  318F  27B6  3185   	fcall	_wireReadDataBlock
  6187  05F5  0020               	movlb	0	; select bank0
  6188  05F6  0827               	movf	?_wireReadDataBlock+1,w
  6189  05F7  00D7               	movwf	readGesture@bytes_read+1
  6190  05F8  0826               	movf	?_wireReadDataBlock,w
  6191  05F9  00D6               	movwf	readGesture@bytes_read
  6192                           
  6193                           ;APDS9960.c: 604:                 if( bytes_read == -1 )
  6194  05FA  0A56               	incf	readGesture@bytes_read,w
  6195  05FB  1D03               	skipz
  6196  05FC  2E05               	goto	l5597
  6197  05FD  0A57               	incf	readGesture@bytes_read+1,w
  6198  05FE  1D03               	btfss	3,2
  6199  05FF  2E05               	goto	l5597
  6200                           
  6201                           ;APDS9960.c: 605:                 {;APDS9960.c: 606:                     return 0xFF;
  6202  0600  30FF               	movlw	255
  6203  0601  00CF               	movwf	?_readGesture
  6204  0602  3000               	movlw	0
  6205  0603  00D0               	movwf	?_readGesture+1
  6206  0604  0008               	return
  6207  0605                     l5597:	
  6208                           
  6209                           ;APDS9960.c: 611:                 if( bytes_read >= 4 )
  6210  0605  0857               	movf	readGesture@bytes_read+1,w
  6211  0606  3A80               	xorlw	128
  6212  0607  00D1               	movwf	??_readGesture
  6213  0608  3080               	movlw	128
  6214  0609  0251               	subwf	??_readGesture,w
  6215  060A  1D03               	skipz
  6216  060B  2E0E               	goto	u4945
  6217  060C  3004               	movlw	4
  6218  060D  0256               	subwf	readGesture@bytes_read,w
  6219  060E                     u4945:	
  6220  060E  1C03               	skipc
  6221  060F  2E80               	goto	l5575
  6222                           
  6223                           ;APDS9960.c: 612:                 {;APDS9960.c: 614:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  6224  0610  0020               	movlb	0	; select bank0
  6225  0611  01D9               	clrf	readGesture@i
  6226  0612  01DA               	clrf	readGesture@i+1
  6227  0613                     l5609:	
  6228  0613  085A               	movf	readGesture@i+1,w
  6229  0614  3A80               	xorlw	128
  6230  0615  00D1               	movwf	??_readGesture
  6231  0616  0857               	movf	readGesture@bytes_read+1,w
  6232  0617  3A80               	xorlw	128
  6233  0618  0251               	subwf	??_readGesture,w
  6234  0619  1D03               	skipz
  6235  061A  2E1D               	goto	u4955
  6236  061B  0856               	movf	readGesture@bytes_read,w
  6237  061C  0259               	subwf	readGesture@i,w
  6238  061D                     u4955:	
  6239  061D  1803               	btfsc	3,0
  6240  061E  2E74               	goto	l5611
  6241                           
  6242                           ;APDS9960.c: 615:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  6243  061F  0020               	movlb	0	; select bank0
  6244  0620  0859               	movf	readGesture@i,w
  6245  0621  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6246  0622  0086               	movwf	6
  6247  0623  3001               	movlw	1	; select bank2/3
  6248  0624  0087               	movwf	7
  6249  0625  0801               	movf	1,w
  6250  0626  00D1               	movwf	??_readGesture
  6251  0627  0024               	movlb	4	; select bank4
  6252  0628  0860               	movf	(_gesture_data_^(0+512)+64),w
  6253  0629  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6254  062A  0086               	movwf	6
  6255  062B  3002               	movlw	2	; select bank4/5
  6256  062C  0087               	movwf	7
  6257  062D  0020               	movlb	0	; select bank0
  6258  062E  0851               	movf	??_readGesture,w
  6259  062F  0081               	movwf	1
  6260                           
  6261                           ;APDS9960.c: 617:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  6262  0630  0859               	movf	readGesture@i,w
  6263  0631  3E01               	addlw	1
  6264  0632  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6265  0633  0086               	movwf	6
  6266  0634  3001               	movlw	1	; select bank2/3
  6267  0635  0087               	movwf	7
  6268  0636  0801               	movf	1,w
  6269  0637  00D1               	movwf	??_readGesture
  6270  0638  0024               	movlb	4	; select bank4
  6271  0639  0860               	movf	(_gesture_data_^(0+512)+64),w
  6272  063A  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6273  063B  0086               	movwf	6
  6274  063C  3002               	movlw	2	; select bank4/5
  6275  063D  0087               	movwf	7
  6276  063E  0020               	movlb	0	; select bank0
  6277  063F  0851               	movf	??_readGesture,w
  6278  0640  0081               	movwf	1
  6279                           
  6280                           ;APDS9960.c: 619:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  6281  0641  0859               	movf	readGesture@i,w
  6282  0642  3E02               	addlw	2
  6283  0643  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6284  0644  0086               	movwf	6
  6285  0645  3001               	movlw	1	; select bank2/3
  6286  0646  0087               	movwf	7
  6287  0647  0801               	movf	1,w
  6288  0648  00D1               	movwf	??_readGesture
  6289  0649  0024               	movlb	4	; select bank4
  6290  064A  0860               	movf	(_gesture_data_^(0+512)+64),w
  6291  064B  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6292  064C  0086               	movwf	6
  6293  064D  3002               	movlw	2	; select bank4/5
  6294  064E  0087               	movwf	7
  6295  064F  0020               	movlb	0	; select bank0
  6296  0650  0851               	movf	??_readGesture,w
  6297  0651  0081               	movwf	1
  6298                           
  6299                           ;APDS9960.c: 621:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  6300  0652  0859               	movf	readGesture@i,w
  6301  0653  3E03               	addlw	3
  6302  0654  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6303  0655  0086               	movwf	6
  6304  0656  3001               	movlw	1	; select bank2/3
  6305  0657  0087               	movwf	7
  6306  0658  0801               	movf	1,w
  6307  0659  00D1               	movwf	??_readGesture
  6308  065A  0024               	movlb	4	; select bank4
  6309  065B  0860               	movf	(_gesture_data_^(0+512)+64),w
  6310  065C  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6311  065D  0086               	movwf	6
  6312  065E  3002               	movlw	2	; select bank4/5
  6313  065F  0087               	movwf	7
  6314  0660  0020               	movlb	0	; select bank0
  6315  0661  0851               	movf	??_readGesture,w
  6316  0662  0081               	movwf	1
  6317                           
  6318                           ;APDS9960.c: 623:                         gesture_data_.index++;
  6319  0663  3001               	movlw	1
  6320  0664  00D1               	movwf	??_readGesture
  6321  0665  0851               	movf	??_readGesture,w
  6322  0666  0024               	movlb	4	; select bank4
  6323  0667  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  6324                           
  6325                           ;APDS9960.c: 624:                         gesture_data_.total_gestures++;
  6326  0668  3001               	movlw	1
  6327  0669  0020               	movlb	0	; select bank0
  6328  066A  00D1               	movwf	??_readGesture
  6329  066B  0851               	movf	??_readGesture,w
  6330  066C  0024               	movlb	4	; select bank4
  6331  066D  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  6332                           
  6333                           ;APDS9960.c: 625:                     }
  6334  066E  3004               	movlw	4
  6335  066F  0020               	movlb	0	; select bank0
  6336  0670  07D9               	addwf	readGesture@i,f
  6337  0671  3000               	movlw	0
  6338  0672  3DDA               	addwfc	readGesture@i+1,f
  6339  0673  2E13               	goto	l5609
  6340  0674                     l5611:	
  6341                           
  6342                           ;APDS9960.c: 628:                     if( processGestureData() )
  6343  0674  3180  204D  3185   	fcall	_processGestureData
  6344  0677  3A00               	xorlw	0
  6345  0678  1903               	skipnz
  6346  0679  2E7D               	goto	l5615
  6347                           
  6348                           ;APDS9960.c: 629:                     {;APDS9960.c: 631:                         if( dec
      +                          odeGesture() ) {
  6349  067A  3183  2318  3185   	fcall	_decodeGesture
  6350  067D                     l5615:	
  6351                           
  6352                           ;APDS9960.c: 637:                     gesture_data_.index = 0;
  6353  067D  0024               	movlb	4	; select bank4
  6354  067E  01E0               	clrf	(_gesture_data_^(0+512)+64)
  6355                           
  6356                           ;APDS9960.c: 638:                     gesture_data_.total_gestures = 0;
  6357  067F  01E1               	clrf	(_gesture_data_^(0+512)+65)
  6358  0680                     l5575:	
  6359                           
  6360                           ;APDS9960.c: 574:         _delay((unsigned long)((30)*(1000000/4000.0)));
  6361  0680  300A               	movlw	10
  6362  0681  0020               	movlb	0	; select bank0
  6363  0682  00D1               	movwf	??_readGesture
  6364  0683  30BC               	movlw	188
  6365  0684                     u5607:	
  6366  0684  0B89               	decfsz	9,f
  6367  0685  2E84               	goto	u5607
  6368  0686  0BD1               	decfsz	??_readGesture,f
  6369  0687  2E84               	goto	u5607
  6370  0688  0000               	nop
  6371                           
  6372                           ;APDS9960.c: 577:         gstatus = wireReadDataByte(0xAF);
  6373  0689  30AF               	movlw	175
  6374  068A  318C  2468  3185   	fcall	_wireReadDataByte
  6375  068D  0020               	movlb	0	; select bank0
  6376  068E  00D1               	movwf	??_readGesture
  6377  068F  0851               	movf	??_readGesture,w
  6378  0690  00D5               	movwf	readGesture@gstatus
  6379                           
  6380                           ;APDS9960.c: 582:         if( (gstatus & 0b00000001) == 0b00000001 )
  6381  0691  1855               	btfsc	readGesture@gstatus,0
  6382  0692  2DCF               	goto	l5581
  6383                           
  6384                           ;APDS9960.c: 644:             _delay((unsigned long)((30)*(1000000/4000.0)));
  6385  0693  300A               	movlw	10
  6386  0694  0020               	movlb	0	; select bank0
  6387  0695  00D1               	movwf	??_readGesture
  6388  0696  30BC               	movlw	188
  6389  0697                     u5617:	
  6390  0697  0B89               	decfsz	9,f
  6391  0698  2E97               	goto	u5617
  6392  0699  0BD1               	decfsz	??_readGesture,f
  6393  069A  2E97               	goto	u5617
  6394  069B  0000               	nop
  6395                           
  6396                           ;APDS9960.c: 645:             decodeGesture();
  6397  069C  3183  2318  3185   	fcall	_decodeGesture
  6398                           
  6399                           ;APDS9960.c: 646:             motion = gesture_motion_;
  6400  069F  0020               	movlb	0	; select bank0
  6401  06A0  085E               	movf	_gesture_motion_+1,w
  6402  06A1  00D4               	movwf	readGesture@motion+1
  6403  06A2  085D               	movf	_gesture_motion_,w
  6404  06A3  00D3               	movwf	readGesture@motion
  6405                           
  6406                           ;APDS9960.c: 648:             resetGestureParameters();
  6407  06A4  318B  23E2         	fcall	_resetGestureParameters
  6408                           
  6409                           ;APDS9960.c: 650:             return motion;
  6410  06A6  0020               	movlb	0	; select bank0
  6411  06A7  0854               	movf	readGesture@motion+1,w
  6412  06A8  00D0               	movwf	?_readGesture+1
  6413  06A9  0853               	movf	readGesture@motion,w
  6414  06AA  00CF               	movwf	?_readGesture
  6415  06AB  0008               	return
  6416  06AC                     __end_of_readGesture:	
  6417                           
  6418                           	psect	text17
  6419  0FB6                     __ptext17:	
  6420 ;; *************** function _wireReadDataBlock *****************
  6421 ;; Defined at:
  6422 ;;		line 846 in file "APDS9960.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  reg             1    wreg     unsigned char 
  6425 ;;  val             2    6[BANK0 ] PTR unsigned char 
  6426 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  6427 ;;  len             2    8[BANK0 ] unsigned int 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  reg             1   15[BANK0 ] unsigned char 
  6430 ;;  j               1   16[BANK0 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  2    6[BANK0 ] int 
  6433 ;; Registers used:
  6434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:       11 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    7
  6447 ;; This function calls:
  6448 ;;		_I2C_ReStart
  6449 ;;		_I2C_Read_Byte
  6450 ;;		_I2C_Send_NACK
  6451 ;;		_I2C_Start
  6452 ;;		_I2C_Stop
  6453 ;;		_I2C_Write_Byte
  6454 ;; This function is called by:
  6455 ;;		_readGesture
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           
  6460                           ;psect for function _wireReadDataBlock
  6461  0FB6                     _wireReadDataBlock:	
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6465                           ;wireReadDataBlock@reg stored from wreg
  6466  0FB6  0020               	movlb	0	; select bank0
  6467  0FB7  00AF               	movwf	wireReadDataBlock@reg
  6468                           
  6469                           ;APDS9960.c: 850:     I2C_Start();
  6470  0FB8  318A  22A1  318F   	fcall	_I2C_Start
  6471                           
  6472                           ;APDS9960.c: 851:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  6473  0FBB  3072               	movlw	114
  6474  0FBC  318C  2412  318F   	fcall	_I2C_Write_Byte
  6475                           
  6476                           ;APDS9960.c: 853:     I2C_Write_Byte(reg);
  6477  0FBF  0020               	movlb	0	; select bank0
  6478  0FC0  082F               	movf	wireReadDataBlock@reg,w
  6479  0FC1  318C  2412  318F   	fcall	_I2C_Write_Byte
  6480                           
  6481                           ;APDS9960.c: 855:     for(j= 0; j < len ; j++)
  6482  0FC4  0020               	movlb	0	; select bank0
  6483  0FC5  01B0               	clrf	wireReadDataBlock@j
  6484  0FC6                     l5219:	
  6485  0FC6  0830               	movf	wireReadDataBlock@j,w
  6486  0FC7  00AA               	movwf	??_wireReadDataBlock
  6487  0FC8  01AB               	clrf	??_wireReadDataBlock+1
  6488  0FC9  0829               	movf	wireReadDataBlock@len+1,w
  6489  0FCA  022B               	subwf	??_wireReadDataBlock+1,w
  6490  0FCB  1D03               	skipz
  6491  0FCC  2FCF               	goto	u4125
  6492  0FCD  0828               	movf	wireReadDataBlock@len,w
  6493  0FCE  022A               	subwf	??_wireReadDataBlock,w
  6494  0FCF                     u4125:	
  6495  0FCF  1803               	btfsc	3,0
  6496  0FD0  2FF5               	goto	l5221
  6497                           
  6498                           ;APDS9960.c: 856:     {;APDS9960.c: 858:       I2C_ReStart();
  6499  0FD1  318A  2292  318F   	fcall	_I2C_ReStart
  6500                           
  6501                           ;APDS9960.c: 859:       I2C_Write_Byte((0x39 << 1) | 0x01);
  6502  0FD4  3073               	movlw	115
  6503  0FD5  318C  2412  318F   	fcall	_I2C_Write_Byte
  6504                           
  6505                           ;APDS9960.c: 860:       val[j]=I2C_Read_Byte();
  6506  0FD8  318B  2351  318F   	fcall	_I2C_Read_Byte
  6507  0FDB  0020               	movlb	0	; select bank0
  6508  0FDC  00AA               	movwf	??_wireReadDataBlock
  6509  0FDD  0830               	movf	wireReadDataBlock@j,w
  6510  0FDE  00AB               	movwf	??_wireReadDataBlock+1
  6511  0FDF  01AC               	clrf	??_wireReadDataBlock+2
  6512  0FE0  082B               	movf	??_wireReadDataBlock+1,w
  6513  0FE1  0726               	addwf	wireReadDataBlock@val,w
  6514  0FE2  00AD               	movwf	??_wireReadDataBlock+3
  6515  0FE3  082C               	movf	??_wireReadDataBlock+2,w
  6516  0FE4  3D27               	addwfc	wireReadDataBlock@val+1,w
  6517  0FE5  00AE               	movwf	??_wireReadDataBlock+4
  6518  0FE6  082D               	movf	??_wireReadDataBlock+3,w
  6519  0FE7  0086               	movwf	6
  6520  0FE8  082E               	movf	??_wireReadDataBlock+4,w
  6521  0FE9  0087               	movwf	7
  6522  0FEA  082A               	movf	??_wireReadDataBlock,w
  6523  0FEB  0081               	movwf	1
  6524                           
  6525                           ;APDS9960.c: 861:       I2C_Send_NACK();
  6526  0FEC  318A  229B  318F   	fcall	_I2C_Send_NACK
  6527                           
  6528                           ;APDS9960.c: 863:     }
  6529  0FEF  3001               	movlw	1
  6530  0FF0  0020               	movlb	0	; select bank0
  6531  0FF1  00AA               	movwf	??_wireReadDataBlock
  6532  0FF2  082A               	movf	??_wireReadDataBlock,w
  6533  0FF3  07B0               	addwf	wireReadDataBlock@j,f
  6534  0FF4  2FC6               	goto	l5219
  6535  0FF5                     l5221:	
  6536                           
  6537                           ;APDS9960.c: 865:     I2C_Stop();
  6538  0FF5  318A  22A7         	fcall	_I2C_Stop
  6539                           
  6540                           ;APDS9960.c: 866:     return (int)j;
  6541  0FF7  0020               	movlb	0	; select bank0
  6542  0FF8  0830               	movf	wireReadDataBlock@j,w
  6543  0FF9  00AA               	movwf	??_wireReadDataBlock
  6544  0FFA  01AB               	clrf	??_wireReadDataBlock+1
  6545  0FFB  082A               	movf	??_wireReadDataBlock,w
  6546  0FFC  00A6               	movwf	?_wireReadDataBlock
  6547  0FFD  082B               	movf	??_wireReadDataBlock+1,w
  6548  0FFE  00A7               	movwf	?_wireReadDataBlock+1
  6549  0FFF  0008               	return
  6550  1000                     __end_of_wireReadDataBlock:	
  6551                           
  6552                           	psect	text18
  6553  004D                     __ptext18:	
  6554 ;; *************** function _processGestureData *****************
  6555 ;; Defined at:
  6556 ;;		line 656 in file "APDS9960.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  i               2   45[BANK0 ] int 
  6561 ;;  lr_delta        2   43[BANK0 ] int 
  6562 ;;  ud_delta        2   41[BANK0 ] int 
  6563 ;;  lr_ratio_las    2   23[BANK0 ] int 
  6564 ;;  ud_ratio_las    2   21[BANK0 ] int 
  6565 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  6566 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  6567 ;;  r_first         1   40[BANK0 ] unsigned char 
  6568 ;;  l_first         1   39[BANK0 ] unsigned char 
  6569 ;;  d_first         1   38[BANK0 ] unsigned char 
  6570 ;;  u_first         1   37[BANK0 ] unsigned char 
  6571 ;;  r_last          1   36[BANK0 ] unsigned char 
  6572 ;;  l_last          1   35[BANK0 ] unsigned char 
  6573 ;;  d_last          1   34[BANK0 ] unsigned char 
  6574 ;;  u_last          1   33[BANK0 ] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      _Bool 
  6577 ;; Registers used:
  6578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;Total ram usage:       32 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    6
  6591 ;; This function calls:
  6592 ;;		___awdiv
  6593 ;;		___wmul
  6594 ;; This function is called by:
  6595 ;;		_readGesture
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _processGestureData
  6601  004D                     _processGestureData:	
  6602                           
  6603                           ;APDS9960.c: 658:     uint8_t u_first = 0;
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6607  004D  0020               	movlb	0	; select bank0
  6608  004E  01C5               	clrf	processGestureData@u_first
  6609                           
  6610                           ;APDS9960.c: 659:     uint8_t d_first = 0;
  6611  004F  01C6               	clrf	processGestureData@d_first
  6612                           
  6613                           ;APDS9960.c: 660:     uint8_t l_first = 0;
  6614  0050  01C7               	clrf	processGestureData@l_first
  6615                           
  6616                           ;APDS9960.c: 661:     uint8_t r_first = 0;
  6617  0051  01C8               	clrf	processGestureData@r_first
  6618                           
  6619                           ;APDS9960.c: 662:     uint8_t u_last = 0;
  6620  0052  01C1               	clrf	processGestureData@u_last
  6621                           
  6622                           ;APDS9960.c: 663:     uint8_t d_last = 0;
  6623  0053  01C2               	clrf	processGestureData@d_last
  6624                           
  6625                           ;APDS9960.c: 664:     uint8_t l_last = 0;
  6626  0054  01C3               	clrf	processGestureData@l_last
  6627                           
  6628                           ;APDS9960.c: 665:     uint8_t r_last = 0;
  6629  0055  01C4               	clrf	processGestureData@r_last
  6630                           
  6631                           ;APDS9960.c: 666:     int ud_ratio_first;;APDS9960.c: 667:     int lr_ratio_first;;APDS9
      +                          960.c: 668:     int ud_ratio_last;;APDS9960.c: 669:     int lr_ratio_last;;APDS9960.c: 6
      +                          70:     int ud_delta;;APDS9960.c: 671:     int lr_delta;;APDS9960.c: 672:     int i;;APD
      +                          S9960.c: 675:     if( gesture_data_.total_gestures <= 4 ) {
  6632  0056  3005               	movlw	5
  6633  0057  0024               	movlb	4	; select bank4
  6634  0058  0261               	subwf	(_gesture_data_^(0+512)+65),w
  6635  0059  1803               	skipnc
  6636  005A  285D               	goto	l5235
  6637  005B                     l5231:	
  6638                           
  6639                           ;APDS9960.c: 676:         return 0;
  6640  005B  3000               	movlw	0
  6641  005C  0008               	return
  6642  005D                     l5235:	
  6643                           
  6644                           ;APDS9960.c: 680:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  6645  005D  3021               	movlw	33
  6646  005E  0261               	subwf	(_gesture_data_^(0+512)+65),w
  6647  005F  1803               	skipnc
  6648  0060  2927               	goto	l5285
  6649  0061  0861               	movf	(_gesture_data_^(0+512)+65),w
  6650  0062  1903               	btfsc	3,2
  6651  0063  2927               	goto	l5285
  6652                           
  6653                           ;APDS9960.c: 681: ;APDS9960.c: 684:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  6654  0064  0020               	movlb	0	; select bank0
  6655  0065  01CD               	clrf	processGestureData@i
  6656  0066  01CE               	clrf	processGestureData@i+1
  6657  0067  286C               	goto	l860
  6658  0068                     l5251:	
  6659                           ;APDS9960.c: 694:                 break;
  6660                           
  6661                           
  6662                           ;APDS9960.c: 696:         }
  6663  0068  3001               	movlw	1
  6664  0069  07CD               	addwf	processGestureData@i,f
  6665  006A  3000               	movlw	0
  6666  006B  3DCE               	addwfc	processGestureData@i+1,f
  6667  006C                     l860:	
  6668  006C  084E               	movf	processGestureData@i+1,w
  6669  006D  3A80               	xorlw	128
  6670  006E  00AF               	movwf	??_processGestureData
  6671  006F  3080               	movlw	128
  6672  0070  022F               	subwf	??_processGestureData,w
  6673  0071  1D03               	skipz
  6674  0072  2877               	goto	u4205
  6675  0073  0024               	movlb	4	; select bank4
  6676  0074  0861               	movf	(_gesture_data_^(0+512)+65),w
  6677  0075  0020               	movlb	0	; select bank0
  6678  0076  024D               	subwf	processGestureData@i,w
  6679  0077                     u4205:	
  6680  0077  1803               	btfsc	3,0
  6681  0078  28C2               	goto	l5253
  6682                           
  6683                           ;APDS9960.c: 685:             if( (gesture_data_.u_data[i] > 10) &&
  6684  0079  0020               	movlb	0	; select bank0
  6685  007A  084D               	movf	processGestureData@i,w
  6686  007B  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6687  007C  0086               	movwf	6
  6688  007D  3002               	movlw	2	; select bank4/5
  6689  007E  0087               	movwf	7
  6690  007F  300B               	movlw	11
  6691  0080  0201               	subwf	1,w
  6692  0081  1C03               	skipc
  6693  0082  2868               	goto	l5251
  6694  0083  084D               	movf	processGestureData@i,w
  6695  0084  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6696  0085  0086               	movwf	6
  6697  0086  3002               	movlw	2	; select bank4/5
  6698  0087  0087               	movwf	7
  6699  0088  300B               	movlw	11
  6700  0089  0201               	subwf	1,w
  6701  008A  1C03               	skipc
  6702  008B  2868               	goto	l5251
  6703  008C  084D               	movf	processGestureData@i,w
  6704  008D  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6705  008E  0086               	movwf	6
  6706  008F  3002               	movlw	2	; select bank4/5
  6707  0090  0087               	movwf	7
  6708  0091  300B               	movlw	11
  6709  0092  0201               	subwf	1,w
  6710  0093  1C03               	skipc
  6711  0094  2868               	goto	l5251
  6712  0095  084D               	movf	processGestureData@i,w
  6713  0096  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6714  0097  0086               	movwf	6
  6715  0098  3002               	movlw	2	; select bank4/5
  6716  0099  0087               	movwf	7
  6717  009A  300B               	movlw	11
  6718  009B  0201               	subwf	1,w
  6719  009C  1C03               	skipc
  6720  009D  2868               	goto	l5251
  6721                           
  6722                           ;APDS9960.c: 688:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 690:   
      +                                        u_first = gesture_data_.u_data[i];
  6723  009E  084D               	movf	processGestureData@i,w
  6724  009F  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6725  00A0  0086               	movwf	6
  6726  00A1  3002               	movlw	2	; select bank4/5
  6727  00A2  0087               	movwf	7
  6728  00A3  0801               	movf	1,w
  6729  00A4  00AF               	movwf	??_processGestureData
  6730  00A5  082F               	movf	??_processGestureData,w
  6731  00A6  00C5               	movwf	processGestureData@u_first
  6732                           
  6733                           ;APDS9960.c: 691:                 d_first = gesture_data_.d_data[i];
  6734  00A7  084D               	movf	processGestureData@i,w
  6735  00A8  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6736  00A9  0086               	movwf	6
  6737  00AA  3002               	movlw	2	; select bank4/5
  6738  00AB  0087               	movwf	7
  6739  00AC  0801               	movf	1,w
  6740  00AD  00AF               	movwf	??_processGestureData
  6741  00AE  082F               	movf	??_processGestureData,w
  6742  00AF  00C6               	movwf	processGestureData@d_first
  6743                           
  6744                           ;APDS9960.c: 692:                 l_first = gesture_data_.l_data[i];
  6745  00B0  084D               	movf	processGestureData@i,w
  6746  00B1  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6747  00B2  0086               	movwf	6
  6748  00B3  3002               	movlw	2	; select bank4/5
  6749  00B4  0087               	movwf	7
  6750  00B5  0801               	movf	1,w
  6751  00B6  00AF               	movwf	??_processGestureData
  6752  00B7  082F               	movf	??_processGestureData,w
  6753  00B8  00C7               	movwf	processGestureData@l_first
  6754                           
  6755                           ;APDS9960.c: 693:                 r_first = gesture_data_.r_data[i];
  6756  00B9  084D               	movf	processGestureData@i,w
  6757  00BA  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6758  00BB  0086               	movwf	6
  6759  00BC  3002               	movlw	2	; select bank4/5
  6760  00BD  0087               	movwf	7
  6761  00BE  0801               	movf	1,w
  6762  00BF  00AF               	movwf	??_processGestureData
  6763  00C0  082F               	movf	??_processGestureData,w
  6764  00C1  00C8               	movwf	processGestureData@r_first
  6765  00C2                     l5253:	
  6766                           
  6767                           ;APDS9960.c: 699:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  6768  00C2  0020               	movlb	0	; select bank0
  6769  00C3  0845               	movf	processGestureData@u_first,w
  6770  00C4  1903               	btfsc	3,2
  6771  00C5  285B               	goto	l5231
  6772  00C6  0846               	movf	processGestureData@d_first,w
  6773  00C7  1903               	btfsc	3,2
  6774  00C8  285B               	goto	l5231
  6775  00C9  0847               	movf	processGestureData@l_first,w
  6776  00CA  1903               	btfsc	3,2
  6777  00CB  285B               	goto	l5231
  6778  00CC  0848               	movf	processGestureData@r_first,w
  6779  00CD  1903               	btfsc	3,2
  6780  00CE  285B               	goto	l5231
  6781                           
  6782                           ;APDS9960.c: 705:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  6783  00CF  0024               	movlb	4	; select bank4
  6784  00D0  0861               	movf	(_gesture_data_^(0+512)+65),w
  6785  00D1  3EFF               	addlw	255
  6786  00D2  0020               	movlb	0	; select bank0
  6787  00D3  00CD               	movwf	processGestureData@i
  6788  00D4  30FF               	movlw	255
  6789  00D5  1803               	skipnc
  6790  00D6  3000               	movlw	0
  6791  00D7  00CE               	movwf	processGestureData@i+1
  6792                           
  6793                           ;APDS9960.c: 716:                 break;
  6794  00D8  28DD               	goto	l5267
  6795  00D9                     l5281:	
  6796                           
  6797                           ;APDS9960.c: 718:         }
  6798  00D9  30FF               	movlw	255
  6799  00DA  07CD               	addwf	processGestureData@i,f
  6800  00DB  30FF               	movlw	255
  6801  00DC  3DCE               	addwfc	processGestureData@i+1,f
  6802  00DD                     l5267:	
  6803  00DD  1BCE               	btfsc	processGestureData@i+1,7
  6804  00DE  2927               	goto	l5285
  6805                           
  6806                           ;APDS9960.c: 707:             if( (gesture_data_.u_data[i] > 10) &&
  6807  00DF  084D               	movf	processGestureData@i,w
  6808  00E0  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6809  00E1  0086               	movwf	6
  6810  00E2  3002               	movlw	2	; select bank4/5
  6811  00E3  0087               	movwf	7
  6812  00E4  300B               	movlw	11
  6813  00E5  0201               	subwf	1,w
  6814  00E6  1C03               	skipc
  6815  00E7  28D9               	goto	l5281
  6816  00E8  084D               	movf	processGestureData@i,w
  6817  00E9  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6818  00EA  0086               	movwf	6
  6819  00EB  3002               	movlw	2	; select bank4/5
  6820  00EC  0087               	movwf	7
  6821  00ED  300B               	movlw	11
  6822  00EE  0201               	subwf	1,w
  6823  00EF  1C03               	skipc
  6824  00F0  28D9               	goto	l5281
  6825  00F1  084D               	movf	processGestureData@i,w
  6826  00F2  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6827  00F3  0086               	movwf	6
  6828  00F4  3002               	movlw	2	; select bank4/5
  6829  00F5  0087               	movwf	7
  6830  00F6  300B               	movlw	11
  6831  00F7  0201               	subwf	1,w
  6832  00F8  1C03               	skipc
  6833  00F9  28D9               	goto	l5281
  6834  00FA  084D               	movf	processGestureData@i,w
  6835  00FB  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6836  00FC  0086               	movwf	6
  6837  00FD  3002               	movlw	2	; select bank4/5
  6838  00FE  0087               	movwf	7
  6839  00FF  300B               	movlw	11
  6840  0100  0201               	subwf	1,w
  6841  0101  1C03               	skipc
  6842  0102  28D9               	goto	l5281
  6843                           
  6844                           ;APDS9960.c: 710:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 712:   
      +                                        u_last = gesture_data_.u_data[i];
  6845  0103  084D               	movf	processGestureData@i,w
  6846  0104  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6847  0105  0086               	movwf	6
  6848  0106  3002               	movlw	2	; select bank4/5
  6849  0107  0087               	movwf	7
  6850  0108  0801               	movf	1,w
  6851  0109  00AF               	movwf	??_processGestureData
  6852  010A  082F               	movf	??_processGestureData,w
  6853  010B  00C1               	movwf	processGestureData@u_last
  6854                           
  6855                           ;APDS9960.c: 713:                 d_last = gesture_data_.d_data[i];
  6856  010C  084D               	movf	processGestureData@i,w
  6857  010D  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6858  010E  0086               	movwf	6
  6859  010F  3002               	movlw	2	; select bank4/5
  6860  0110  0087               	movwf	7
  6861  0111  0801               	movf	1,w
  6862  0112  00AF               	movwf	??_processGestureData
  6863  0113  082F               	movf	??_processGestureData,w
  6864  0114  00C2               	movwf	processGestureData@d_last
  6865                           
  6866                           ;APDS9960.c: 714:                 l_last = gesture_data_.l_data[i];
  6867  0115  084D               	movf	processGestureData@i,w
  6868  0116  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6869  0117  0086               	movwf	6
  6870  0118  3002               	movlw	2	; select bank4/5
  6871  0119  0087               	movwf	7
  6872  011A  0801               	movf	1,w
  6873  011B  00AF               	movwf	??_processGestureData
  6874  011C  082F               	movf	??_processGestureData,w
  6875  011D  00C3               	movwf	processGestureData@l_last
  6876                           
  6877                           ;APDS9960.c: 715:                 r_last = gesture_data_.r_data[i];
  6878  011E  084D               	movf	processGestureData@i,w
  6879  011F  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6880  0120  0086               	movwf	6
  6881  0121  3002               	movlw	2	; select bank4/5
  6882  0122  0087               	movwf	7
  6883  0123  0801               	movf	1,w
  6884  0124  00AF               	movwf	??_processGestureData
  6885  0125  082F               	movf	??_processGestureData,w
  6886  0126  00C4               	movwf	processGestureData@r_last
  6887  0127                     l5285:	
  6888                           
  6889                           ;APDS9960.c: 722:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  6890  0127  0020               	movlb	0	; select bank0
  6891  0128  0845               	movf	processGestureData@u_first,w
  6892  0129  0746               	addwf	processGestureData@d_first,w
  6893  012A  00A6               	movwf	___awdiv@divisor
  6894  012B  01A7               	clrf	___awdiv@divisor+1
  6895  012C  0DA7               	rlf	___awdiv@divisor+1,f
  6896  012D  0846               	movf	processGestureData@d_first,w
  6897  012E  0245               	subwf	processGestureData@u_first,w
  6898  012F  00A0               	movwf	___wmul@multiplier
  6899  0130  01A1               	clrf	___wmul@multiplier+1
  6900  0131  1C03               	skipc
  6901  0132  03A1               	decf	___wmul@multiplier+1,f
  6902  0133  3064               	movlw	100
  6903  0134  00A2               	movwf	___wmul@multiplicand
  6904  0135  3000               	movlw	0
  6905  0136  00A3               	movwf	___wmul@multiplicand+1
  6906  0137  318C  242E  3180   	fcall	___wmul
  6907  013A  0020               	movlb	0	; select bank0
  6908  013B  0821               	movf	?___wmul+1,w
  6909  013C  00A9               	movwf	___awdiv@dividend+1
  6910  013D  0820               	movf	?___wmul,w
  6911  013E  00A8               	movwf	___awdiv@dividend
  6912  013F  3187  2710  3180   	fcall	___awdiv
  6913  0142  0020               	movlb	0	; select bank0
  6914  0143  0827               	movf	?___awdiv+1,w
  6915  0144  00B2               	movwf	processGestureData@ud_ratio_first+1
  6916  0145  0826               	movf	?___awdiv,w
  6917  0146  00B1               	movwf	processGestureData@ud_ratio_first
  6918                           
  6919                           ;APDS9960.c: 723:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  6920  0147  0847               	movf	processGestureData@l_first,w
  6921  0148  0748               	addwf	processGestureData@r_first,w
  6922  0149  00A6               	movwf	___awdiv@divisor
  6923  014A  01A7               	clrf	___awdiv@divisor+1
  6924  014B  0DA7               	rlf	___awdiv@divisor+1,f
  6925  014C  0848               	movf	processGestureData@r_first,w
  6926  014D  0247               	subwf	processGestureData@l_first,w
  6927  014E  00A0               	movwf	___wmul@multiplier
  6928  014F  01A1               	clrf	___wmul@multiplier+1
  6929  0150  1C03               	skipc
  6930  0151  03A1               	decf	___wmul@multiplier+1,f
  6931  0152  3064               	movlw	100
  6932  0153  00A2               	movwf	___wmul@multiplicand
  6933  0154  3000               	movlw	0
  6934  0155  00A3               	movwf	___wmul@multiplicand+1
  6935  0156  318C  242E  3180   	fcall	___wmul
  6936  0159  0020               	movlb	0	; select bank0
  6937  015A  0821               	movf	?___wmul+1,w
  6938  015B  00A9               	movwf	___awdiv@dividend+1
  6939  015C  0820               	movf	?___wmul,w
  6940  015D  00A8               	movwf	___awdiv@dividend
  6941  015E  3187  2710  3180   	fcall	___awdiv
  6942  0161  0020               	movlb	0	; select bank0
  6943  0162  0827               	movf	?___awdiv+1,w
  6944  0163  00B4               	movwf	processGestureData@lr_ratio_first+1
  6945  0164  0826               	movf	?___awdiv,w
  6946  0165  00B3               	movwf	processGestureData@lr_ratio_first
  6947                           
  6948                           ;APDS9960.c: 724:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  6949  0166  0841               	movf	processGestureData@u_last,w
  6950  0167  0742               	addwf	processGestureData@d_last,w
  6951  0168  00A6               	movwf	___awdiv@divisor
  6952  0169  01A7               	clrf	___awdiv@divisor+1
  6953  016A  0DA7               	rlf	___awdiv@divisor+1,f
  6954  016B  0842               	movf	processGestureData@d_last,w
  6955  016C  0241               	subwf	processGestureData@u_last,w
  6956  016D  00A0               	movwf	___wmul@multiplier
  6957  016E  01A1               	clrf	___wmul@multiplier+1
  6958  016F  1C03               	skipc
  6959  0170  03A1               	decf	___wmul@multiplier+1,f
  6960  0171  3064               	movlw	100
  6961  0172  00A2               	movwf	___wmul@multiplicand
  6962  0173  3000               	movlw	0
  6963  0174  00A3               	movwf	___wmul@multiplicand+1
  6964  0175  318C  242E  3180   	fcall	___wmul
  6965  0178  0020               	movlb	0	; select bank0
  6966  0179  0821               	movf	?___wmul+1,w
  6967  017A  00A9               	movwf	___awdiv@dividend+1
  6968  017B  0820               	movf	?___wmul,w
  6969  017C  00A8               	movwf	___awdiv@dividend
  6970  017D  3187  2710  3180   	fcall	___awdiv
  6971  0180  0020               	movlb	0	; select bank0
  6972  0181  0827               	movf	?___awdiv+1,w
  6973  0182  00B6               	movwf	processGestureData@ud_ratio_last+1
  6974  0183  0826               	movf	?___awdiv,w
  6975  0184  00B5               	movwf	processGestureData@ud_ratio_last
  6976                           
  6977                           ;APDS9960.c: 725:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  6978  0185  0843               	movf	processGestureData@l_last,w
  6979  0186  0744               	addwf	processGestureData@r_last,w
  6980  0187  00A6               	movwf	___awdiv@divisor
  6981  0188  01A7               	clrf	___awdiv@divisor+1
  6982  0189  0DA7               	rlf	___awdiv@divisor+1,f
  6983  018A  0844               	movf	processGestureData@r_last,w
  6984  018B  0243               	subwf	processGestureData@l_last,w
  6985  018C  00A0               	movwf	___wmul@multiplier
  6986  018D  01A1               	clrf	___wmul@multiplier+1
  6987  018E  1C03               	skipc
  6988  018F  03A1               	decf	___wmul@multiplier+1,f
  6989  0190  3064               	movlw	100
  6990  0191  00A2               	movwf	___wmul@multiplicand
  6991  0192  3000               	movlw	0
  6992  0193  00A3               	movwf	___wmul@multiplicand+1
  6993  0194  318C  242E  3180   	fcall	___wmul
  6994  0197  0020               	movlb	0	; select bank0
  6995  0198  0821               	movf	?___wmul+1,w
  6996  0199  00A9               	movwf	___awdiv@dividend+1
  6997  019A  0820               	movf	?___wmul,w
  6998  019B  00A8               	movwf	___awdiv@dividend
  6999  019C  3187  2710  3180   	fcall	___awdiv
  7000  019F  0020               	movlb	0	; select bank0
  7001  01A0  0827               	movf	?___awdiv+1,w
  7002  01A1  00B8               	movwf	processGestureData@lr_ratio_last+1
  7003  01A2  0826               	movf	?___awdiv,w
  7004  01A3  00B7               	movwf	processGestureData@lr_ratio_last
  7005                           
  7006                           ;APDS9960.c: 728:     ud_delta = ud_ratio_last - ud_ratio_first;
  7007  01A4  0831               	movf	processGestureData@ud_ratio_first,w
  7008  01A5  0235               	subwf	processGestureData@ud_ratio_last,w
  7009  01A6  00C9               	movwf	processGestureData@ud_delta
  7010  01A7  0832               	movf	processGestureData@ud_ratio_first+1,w
  7011  01A8  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  7012  01A9  00CA               	movwf	processGestureData@ud_delta+1
  7013                           
  7014                           ;APDS9960.c: 729:     lr_delta = lr_ratio_last - lr_ratio_first;
  7015  01AA  0833               	movf	processGestureData@lr_ratio_first,w
  7016  01AB  0237               	subwf	processGestureData@lr_ratio_last,w
  7017  01AC  00CB               	movwf	processGestureData@lr_delta
  7018  01AD  0834               	movf	processGestureData@lr_ratio_first+1,w
  7019  01AE  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  7020  01AF  00CC               	movwf	processGestureData@lr_delta+1
  7021                           
  7022                           ;APDS9960.c: 732:     gesture_ud_delta_ += ud_delta;
  7023  01B0  0849               	movf	processGestureData@ud_delta,w
  7024  01B1  07EB               	addwf	_gesture_ud_delta_,f
  7025  01B2  084A               	movf	processGestureData@ud_delta+1,w
  7026  01B3  3DEC               	addwfc	_gesture_ud_delta_+1,f
  7027                           
  7028                           ;APDS9960.c: 733:     gesture_lr_delta_ += lr_delta;
  7029  01B4  084B               	movf	processGestureData@lr_delta,w
  7030  01B5  07E9               	addwf	_gesture_lr_delta_,f
  7031  01B6  084C               	movf	processGestureData@lr_delta+1,w
  7032  01B7  3DEA               	addwfc	_gesture_lr_delta_+1,f
  7033                           
  7034                           ;APDS9960.c: 736:     if( gesture_ud_delta_ >= 50 ) {
  7035  01B8  086C               	movf	_gesture_ud_delta_+1,w
  7036  01B9  3A80               	xorlw	128
  7037  01BA  00AF               	movwf	??_processGestureData
  7038  01BB  3080               	movlw	128
  7039  01BC  022F               	subwf	??_processGestureData,w
  7040  01BD  1D03               	skipz
  7041  01BE  29C1               	goto	u4305
  7042  01BF  3032               	movlw	50
  7043  01C0  026B               	subwf	_gesture_ud_delta_,w
  7044  01C1                     u4305:	
  7045  01C1  1C03               	skipc
  7046  01C2  29C8               	goto	l5299
  7047                           
  7048                           ;APDS9960.c: 737:         gesture_ud_count_ = 1;
  7049  01C3  3001               	movlw	1
  7050  01C4  0020               	movlb	0	; select bank0
  7051  01C5  00E7               	movwf	_gesture_ud_count_
  7052  01C6  3000               	movlw	0
  7053  01C7  29D8               	goto	L2
  7054  01C8                     l5299:	
  7055                           ;APDS9960.c: 738:     } else if( gesture_ud_delta_ <= -50 ) {
  7056                           
  7057  01C8  0020               	movlb	0	; select bank0
  7058  01C9  086C               	movf	_gesture_ud_delta_+1,w
  7059  01CA  3A80               	xorlw	128
  7060  01CB  00AF               	movwf	??_processGestureData
  7061  01CC  307F               	movlw	127
  7062  01CD  022F               	subwf	??_processGestureData,w
  7063  01CE  1D03               	skipz
  7064  01CF  29D2               	goto	u4315
  7065  01D0  30CF               	movlw	207
  7066  01D1  026B               	subwf	_gesture_ud_delta_,w
  7067  01D2                     u4315:	
  7068  01D2  1803               	skipnc
  7069  01D3  29DA               	goto	l5303
  7070                           
  7071                           ;APDS9960.c: 739:         gesture_ud_count_ = -1;
  7072  01D4  30FF               	movlw	255
  7073  01D5  0020               	movlb	0	; select bank0
  7074  01D6  00E7               	movwf	_gesture_ud_count_
  7075  01D7  30FF               	movlw	255
  7076  01D8                     L2:	
  7077  01D8  00E8               	movwf	_gesture_ud_count_+1
  7078                           
  7079                           ;APDS9960.c: 740:     } else {
  7080  01D9  29DD               	goto	l5305
  7081  01DA                     l5303:	
  7082                           
  7083                           ;APDS9960.c: 741:         gesture_ud_count_ = 0;
  7084  01DA  0020               	movlb	0	; select bank0
  7085  01DB  01E7               	clrf	_gesture_ud_count_
  7086  01DC  01E8               	clrf	_gesture_ud_count_+1
  7087  01DD                     l5305:	
  7088                           
  7089                           ;APDS9960.c: 745:     if( gesture_lr_delta_ >= 50 ) {
  7090  01DD  086A               	movf	_gesture_lr_delta_+1,w
  7091  01DE  3A80               	xorlw	128
  7092  01DF  00AF               	movwf	??_processGestureData
  7093  01E0  3080               	movlw	128
  7094  01E1  022F               	subwf	??_processGestureData,w
  7095  01E2  1D03               	skipz
  7096  01E3  29E6               	goto	u4325
  7097  01E4  3032               	movlw	50
  7098  01E5  0269               	subwf	_gesture_lr_delta_,w
  7099  01E6                     u4325:	
  7100  01E6  1C03               	skipc
  7101  01E7  29ED               	goto	l5309
  7102                           
  7103                           ;APDS9960.c: 746:         gesture_lr_count_ = 1;
  7104  01E8  3001               	movlw	1
  7105  01E9  0020               	movlb	0	; select bank0
  7106  01EA  00E5               	movwf	_gesture_lr_count_
  7107  01EB  3000               	movlw	0
  7108  01EC  29FD               	goto	L3
  7109  01ED                     l5309:	
  7110                           ;APDS9960.c: 747:     } else if( gesture_lr_delta_ <= -50 ) {
  7111                           
  7112  01ED  0020               	movlb	0	; select bank0
  7113  01EE  086A               	movf	_gesture_lr_delta_+1,w
  7114  01EF  3A80               	xorlw	128
  7115  01F0  00AF               	movwf	??_processGestureData
  7116  01F1  307F               	movlw	127
  7117  01F2  022F               	subwf	??_processGestureData,w
  7118  01F3  1D03               	skipz
  7119  01F4  29F7               	goto	u4335
  7120  01F5  30CF               	movlw	207
  7121  01F6  0269               	subwf	_gesture_lr_delta_,w
  7122  01F7                     u4335:	
  7123  01F7  1803               	skipnc
  7124  01F8  29FF               	goto	l5313
  7125                           
  7126                           ;APDS9960.c: 748:         gesture_lr_count_ = -1;
  7127  01F9  30FF               	movlw	255
  7128  01FA  0020               	movlb	0	; select bank0
  7129  01FB  00E5               	movwf	_gesture_lr_count_
  7130  01FC  30FF               	movlw	255
  7131  01FD                     L3:	
  7132  01FD  00E6               	movwf	_gesture_lr_count_+1
  7133                           
  7134                           ;APDS9960.c: 749:     } else {
  7135  01FE  2A02               	goto	l5315
  7136  01FF                     l5313:	
  7137                           
  7138                           ;APDS9960.c: 750:         gesture_lr_count_ = 0;
  7139  01FF  0020               	movlb	0	; select bank0
  7140  0200  01E5               	clrf	_gesture_lr_count_
  7141  0201  01E6               	clrf	_gesture_lr_count_+1
  7142  0202                     l5315:	
  7143                           
  7144                           ;APDS9960.c: 754:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  7145  0202  0867               	movf	_gesture_ud_count_,w
  7146  0203  0468               	iorwf	_gesture_ud_count_+1,w
  7147  0204  1D03               	btfss	3,2
  7148  0205  2AA5               	goto	l5359
  7149  0206  0865               	movf	_gesture_lr_count_,w
  7150  0207  0466               	iorwf	_gesture_lr_count_+1,w
  7151  0208  1D03               	btfss	3,2
  7152  0209  2AA5               	goto	l5359
  7153                           
  7154                           ;APDS9960.c: 755:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7155  020A  084A               	movf	processGestureData@ud_delta+1,w
  7156  020B  3A80               	xorlw	128
  7157  020C  00AF               	movwf	??_processGestureData
  7158  020D  3080               	movlw	128
  7159  020E  022F               	subwf	??_processGestureData,w
  7160  020F  1D03               	skipz
  7161  0210  2A13               	goto	u4365
  7162  0211  3001               	movlw	1
  7163  0212  0249               	subwf	processGestureData@ud_delta,w
  7164  0213                     u4365:	
  7165  0213  1803               	skipnc
  7166  0214  2A22               	goto	l5323
  7167  0215  0020               	movlb	0	; select bank0
  7168  0216  0949               	comf	processGestureData@ud_delta,w
  7169  0217  00AF               	movwf	??_processGestureData
  7170  0218  094A               	comf	processGestureData@ud_delta+1,w
  7171  0219  00B0               	movwf	??_processGestureData+1
  7172  021A  0AAF               	incf	??_processGestureData,f
  7173  021B  1903               	skipnz
  7174  021C  0AB0               	incf	??_processGestureData+1,f
  7175  021D  082F               	movf	??_processGestureData,w
  7176  021E  00B9               	movwf	_processGestureData$1272
  7177  021F  0830               	movf	??_processGestureData+1,w
  7178  0220  00BA               	movwf	_processGestureData$1272+1
  7179  0221  2A27               	goto	l883
  7180  0222                     l5323:	
  7181  0222  0020               	movlb	0	; select bank0
  7182  0223  084A               	movf	processGestureData@ud_delta+1,w
  7183  0224  00BA               	movwf	_processGestureData$1272+1
  7184  0225  0849               	movf	processGestureData@ud_delta,w
  7185  0226  00B9               	movwf	_processGestureData$1272
  7186  0227                     l883:	
  7187  0227  083A               	movf	_processGestureData$1272+1,w
  7188  0228  3A80               	xorlw	128
  7189  0229  00AF               	movwf	??_processGestureData
  7190  022A  3080               	movlw	128
  7191  022B  022F               	subwf	??_processGestureData,w
  7192  022C  1D03               	skipz
  7193  022D  2A30               	goto	u4375
  7194  022E  3014               	movlw	20
  7195  022F  0239               	subwf	_processGestureData$1272,w
  7196  0230                     u4375:	
  7197  0230  1803               	skipnc
  7198  0231  285B               	goto	l5231
  7199  0232  0020               	movlb	0	; select bank0
  7200  0233  084C               	movf	processGestureData@lr_delta+1,w
  7201  0234  3A80               	xorlw	128
  7202  0235  00AF               	movwf	??_processGestureData
  7203  0236  3080               	movlw	128
  7204  0237  022F               	subwf	??_processGestureData,w
  7205  0238  1D03               	skipz
  7206  0239  2A3C               	goto	u4385
  7207  023A  3001               	movlw	1
  7208  023B  024B               	subwf	processGestureData@lr_delta,w
  7209  023C                     u4385:	
  7210  023C  1803               	skipnc
  7211  023D  2A4B               	goto	l5329
  7212  023E  0020               	movlb	0	; select bank0
  7213  023F  094B               	comf	processGestureData@lr_delta,w
  7214  0240  00AF               	movwf	??_processGestureData
  7215  0241  094C               	comf	processGestureData@lr_delta+1,w
  7216  0242  00B0               	movwf	??_processGestureData+1
  7217  0243  0AAF               	incf	??_processGestureData,f
  7218  0244  1903               	skipnz
  7219  0245  0AB0               	incf	??_processGestureData+1,f
  7220  0246  082F               	movf	??_processGestureData,w
  7221  0247  00BB               	movwf	_processGestureData$1273
  7222  0248  0830               	movf	??_processGestureData+1,w
  7223  0249  00BC               	movwf	_processGestureData$1273+1
  7224  024A  2A50               	goto	l887
  7225  024B                     l5329:	
  7226  024B  0020               	movlb	0	; select bank0
  7227  024C  084C               	movf	processGestureData@lr_delta+1,w
  7228  024D  00BC               	movwf	_processGestureData$1273+1
  7229  024E  084B               	movf	processGestureData@lr_delta,w
  7230  024F  00BB               	movwf	_processGestureData$1273
  7231  0250                     l887:	
  7232  0250  083C               	movf	_processGestureData$1273+1,w
  7233  0251  3A80               	xorlw	128
  7234  0252  00AF               	movwf	??_processGestureData
  7235  0253  3080               	movlw	128
  7236  0254  022F               	subwf	??_processGestureData,w
  7237  0255  1D03               	skipz
  7238  0256  2A59               	goto	u4395
  7239  0257  3014               	movlw	20
  7240  0258  023B               	subwf	_processGestureData$1273,w
  7241  0259                     u4395:	
  7242  0259  1803               	skipnc
  7243  025A  285B               	goto	l5231
  7244                           
  7245                           ;APDS9960.c: 756: ;APDS9960.c: 758:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7246  025B  0020               	movlb	0	; select bank0
  7247  025C  0849               	movf	processGestureData@ud_delta,w
  7248  025D  044A               	iorwf	processGestureData@ud_delta+1,w
  7249  025E  1D03               	btfss	3,2
  7250  025F  2A69               	goto	l5337
  7251  0260  084B               	movf	processGestureData@lr_delta,w
  7252  0261  044C               	iorwf	processGestureData@lr_delta+1,w
  7253  0262  1D03               	btfss	3,2
  7254  0263  2A69               	goto	l5337
  7255                           
  7256                           ;APDS9960.c: 759:                 gesture_near_count_++;
  7257  0264  3001               	movlw	1
  7258  0265  07E3               	addwf	_gesture_near_count_,f
  7259  0266  3000               	movlw	0
  7260  0267  3DE4               	addwfc	_gesture_near_count_+1,f
  7261                           
  7262                           ;APDS9960.c: 760:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  7263  0268  2A75               	goto	l889
  7264  0269                     l5337:	
  7265  0269  0849               	movf	processGestureData@ud_delta,w
  7266  026A  044A               	iorwf	processGestureData@ud_delta+1,w
  7267  026B  1D03               	btfss	3,2
  7268  026C  2A71               	goto	l5341
  7269  026D  084B               	movf	processGestureData@lr_delta,w
  7270  026E  044C               	iorwf	processGestureData@lr_delta+1,w
  7271  026F  1903               	btfsc	3,2
  7272  0270  2A75               	goto	l889
  7273  0271                     l5341:	
  7274                           
  7275                           ;APDS9960.c: 761:                 gesture_far_count_++;
  7276  0271  3001               	movlw	1
  7277  0272  07E1               	addwf	_gesture_far_count_,f
  7278  0273  3000               	movlw	0
  7279  0274  3DE2               	addwfc	_gesture_far_count_+1,f
  7280  0275                     l889:	
  7281                           
  7282                           ;APDS9960.c: 764:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  7283  0275  0864               	movf	_gesture_near_count_+1,w
  7284  0276  3A80               	xorlw	128
  7285  0277  00AF               	movwf	??_processGestureData
  7286  0278  3080               	movlw	128
  7287  0279  022F               	subwf	??_processGestureData,w
  7288  027A  1D03               	skipz
  7289  027B  2A7E               	goto	u4445
  7290  027C  300A               	movlw	10
  7291  027D  0263               	subwf	_gesture_near_count_,w
  7292  027E                     u4445:	
  7293  027E  1C03               	skipc
  7294  027F  285B               	goto	l5231
  7295  0280  0020               	movlb	0	; select bank0
  7296  0281  0862               	movf	_gesture_far_count_+1,w
  7297  0282  3A80               	xorlw	128
  7298  0283  00AF               	movwf	??_processGestureData
  7299  0284  3080               	movlw	128
  7300  0285  022F               	subwf	??_processGestureData,w
  7301  0286  1D03               	skipz
  7302  0287  2A8A               	goto	u4455
  7303  0288  3002               	movlw	2
  7304  0289  0261               	subwf	_gesture_far_count_,w
  7305  028A                     u4455:	
  7306  028A  1C03               	skipc
  7307  028B  285B               	goto	l5231
  7308                           
  7309                           ;APDS9960.c: 765:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  7310  028C  0020               	movlb	0	; select bank0
  7311  028D  0849               	movf	processGestureData@ud_delta,w
  7312  028E  044A               	iorwf	processGestureData@ud_delta+1,w
  7313  028F  1D03               	btfss	3,2
  7314  0290  2A97               	goto	l5351
  7315  0291  084B               	movf	processGestureData@lr_delta,w
  7316  0292  044C               	iorwf	processGestureData@lr_delta+1,w
  7317  0293  1D03               	btfss	3,2
  7318  0294  2A97               	goto	l5351
  7319                           
  7320                           ;APDS9960.c: 766:                     gesture_state_ = NEAR_STATE;
  7321  0295  3001               	movlw	1
  7322  0296  2AA0               	goto	L4
  7323  0297                     l5351:	
  7324                           ;APDS9960.c: 767:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  7325                           
  7326  0297  0849               	movf	processGestureData@ud_delta,w
  7327  0298  044A               	iorwf	processGestureData@ud_delta+1,w
  7328  0299  1903               	btfsc	3,2
  7329  029A  2AA3               	goto	l895
  7330  029B  084B               	movf	processGestureData@lr_delta,w
  7331  029C  044C               	iorwf	processGestureData@lr_delta+1,w
  7332  029D  1903               	btfsc	3,2
  7333  029E  2AA3               	goto	l895
  7334                           
  7335                           ;APDS9960.c: 768:                     gesture_state_ = FAR_STATE;
  7336  029F  3002               	movlw	2
  7337  02A0                     L4:	
  7338  02A0  00DF               	movwf	_gesture_state_
  7339  02A1  3000               	movlw	0
  7340  02A2  00E0               	movwf	_gesture_state_+1
  7341  02A3                     l895:	
  7342                           
  7343                           ;APDS9960.c: 770:                 return 1;
  7344  02A3  3001               	movlw	1
  7345  02A4  0008               	return
  7346  02A5                     l5359:	
  7347                           
  7348                           ;APDS9960.c: 774:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7349  02A5  084A               	movf	processGestureData@ud_delta+1,w
  7350  02A6  3A80               	xorlw	128
  7351  02A7  00AF               	movwf	??_processGestureData
  7352  02A8  3080               	movlw	128
  7353  02A9  022F               	subwf	??_processGestureData,w
  7354  02AA  1D03               	skipz
  7355  02AB  2AAE               	goto	u4505
  7356  02AC  3001               	movlw	1
  7357  02AD  0249               	subwf	processGestureData@ud_delta,w
  7358  02AE                     u4505:	
  7359  02AE  1803               	skipnc
  7360  02AF  2ABD               	goto	l5363
  7361  02B0  0020               	movlb	0	; select bank0
  7362  02B1  0949               	comf	processGestureData@ud_delta,w
  7363  02B2  00AF               	movwf	??_processGestureData
  7364  02B3  094A               	comf	processGestureData@ud_delta+1,w
  7365  02B4  00B0               	movwf	??_processGestureData+1
  7366  02B5  0AAF               	incf	??_processGestureData,f
  7367  02B6  1903               	skipnz
  7368  02B7  0AB0               	incf	??_processGestureData+1,f
  7369  02B8  082F               	movf	??_processGestureData,w
  7370  02B9  00BD               	movwf	_processGestureData$1274
  7371  02BA  0830               	movf	??_processGestureData+1,w
  7372  02BB  00BE               	movwf	_processGestureData$1274+1
  7373  02BC  2AC2               	goto	l902
  7374  02BD                     l5363:	
  7375  02BD  0020               	movlb	0	; select bank0
  7376  02BE  084A               	movf	processGestureData@ud_delta+1,w
  7377  02BF  00BE               	movwf	_processGestureData$1274+1
  7378  02C0  0849               	movf	processGestureData@ud_delta,w
  7379  02C1  00BD               	movwf	_processGestureData$1274
  7380  02C2                     l902:	
  7381  02C2  083E               	movf	_processGestureData$1274+1,w
  7382  02C3  3A80               	xorlw	128
  7383  02C4  00AF               	movwf	??_processGestureData
  7384  02C5  3080               	movlw	128
  7385  02C6  022F               	subwf	??_processGestureData,w
  7386  02C7  1D03               	skipz
  7387  02C8  2ACB               	goto	u4515
  7388  02C9  3014               	movlw	20
  7389  02CA  023D               	subwf	_processGestureData$1274,w
  7390  02CB                     u4515:	
  7391  02CB  1803               	skipnc
  7392  02CC  285B               	goto	l5231
  7393  02CD  0020               	movlb	0	; select bank0
  7394  02CE  084C               	movf	processGestureData@lr_delta+1,w
  7395  02CF  3A80               	xorlw	128
  7396  02D0  00AF               	movwf	??_processGestureData
  7397  02D1  3080               	movlw	128
  7398  02D2  022F               	subwf	??_processGestureData,w
  7399  02D3  1D03               	skipz
  7400  02D4  2AD7               	goto	u4525
  7401  02D5  3001               	movlw	1
  7402  02D6  024B               	subwf	processGestureData@lr_delta,w
  7403  02D7                     u4525:	
  7404  02D7  1803               	skipnc
  7405  02D8  2AE6               	goto	l5369
  7406  02D9  0020               	movlb	0	; select bank0
  7407  02DA  094B               	comf	processGestureData@lr_delta,w
  7408  02DB  00AF               	movwf	??_processGestureData
  7409  02DC  094C               	comf	processGestureData@lr_delta+1,w
  7410  02DD  00B0               	movwf	??_processGestureData+1
  7411  02DE  0AAF               	incf	??_processGestureData,f
  7412  02DF  1903               	skipnz
  7413  02E0  0AB0               	incf	??_processGestureData+1,f
  7414  02E1  082F               	movf	??_processGestureData,w
  7415  02E2  00BF               	movwf	_processGestureData$1275
  7416  02E3  0830               	movf	??_processGestureData+1,w
  7417  02E4  00C0               	movwf	_processGestureData$1275+1
  7418  02E5  2AEB               	goto	l906
  7419  02E6                     l5369:	
  7420  02E6  0020               	movlb	0	; select bank0
  7421  02E7  084C               	movf	processGestureData@lr_delta+1,w
  7422  02E8  00C0               	movwf	_processGestureData$1275+1
  7423  02E9  084B               	movf	processGestureData@lr_delta,w
  7424  02EA  00BF               	movwf	_processGestureData$1275
  7425  02EB                     l906:	
  7426  02EB  0840               	movf	_processGestureData$1275+1,w
  7427  02EC  3A80               	xorlw	128
  7428  02ED  00AF               	movwf	??_processGestureData
  7429  02EE  3080               	movlw	128
  7430  02EF  022F               	subwf	??_processGestureData,w
  7431  02F0  1D03               	skipz
  7432  02F1  2AF4               	goto	u4535
  7433  02F2  3014               	movlw	20
  7434  02F3  023F               	subwf	_processGestureData$1275,w
  7435  02F4                     u4535:	
  7436  02F4  1803               	skipnc
  7437  02F5  285B               	goto	l5231
  7438                           
  7439                           ;APDS9960.c: 775: ;APDS9960.c: 777:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7440  02F6  0020               	movlb	0	; select bank0
  7441  02F7  0849               	movf	processGestureData@ud_delta,w
  7442  02F8  044A               	iorwf	processGestureData@ud_delta+1,w
  7443  02F9  1D03               	btfss	3,2
  7444  02FA  2B03               	goto	l907
  7445  02FB  084B               	movf	processGestureData@lr_delta,w
  7446  02FC  044C               	iorwf	processGestureData@lr_delta+1,w
  7447  02FD  1D03               	btfss	3,2
  7448  02FE  2B03               	goto	l907
  7449                           
  7450                           ;APDS9960.c: 778:                 gesture_near_count_++;
  7451  02FF  3001               	movlw	1
  7452  0300  07E3               	addwf	_gesture_near_count_,f
  7453  0301  3000               	movlw	0
  7454  0302  3DE4               	addwfc	_gesture_near_count_+1,f
  7455  0303                     l907:	
  7456                           ;APDS9960.c: 779:             }
  7457                           
  7458                           
  7459                           ;APDS9960.c: 781:             if( gesture_near_count_ >= 10 ) {
  7460  0303  0864               	movf	_gesture_near_count_+1,w
  7461  0304  3A80               	xorlw	128
  7462  0305  00AF               	movwf	??_processGestureData
  7463  0306  3080               	movlw	128
  7464  0307  022F               	subwf	??_processGestureData,w
  7465  0308  1D03               	skipz
  7466  0309  2B0C               	goto	u4565
  7467  030A  300A               	movlw	10
  7468  030B  0263               	subwf	_gesture_near_count_,w
  7469  030C                     u4565:	
  7470  030C  1C03               	skipc
  7471  030D  285B               	goto	l5231
  7472                           
  7473                           ;APDS9960.c: 782:                 gesture_ud_count_ = 0;
  7474  030E  0020               	movlb	0	; select bank0
  7475  030F  01E7               	clrf	_gesture_ud_count_
  7476  0310  01E8               	clrf	_gesture_ud_count_+1
  7477                           
  7478                           ;APDS9960.c: 783:                 gesture_lr_count_ = 0;
  7479  0311  01E5               	clrf	_gesture_lr_count_
  7480  0312  01E6               	clrf	_gesture_lr_count_+1
  7481                           
  7482                           ;APDS9960.c: 784:                 gesture_ud_delta_ = 0;
  7483  0313  01EB               	clrf	_gesture_ud_delta_
  7484  0314  01EC               	clrf	_gesture_ud_delta_+1
  7485                           
  7486                           ;APDS9960.c: 785:                 gesture_lr_delta_ = 0;
  7487  0315  01E9               	clrf	_gesture_lr_delta_
  7488  0316  01EA               	clrf	_gesture_lr_delta_+1
  7489  0317  285B               	goto	l5231
  7490  0318                     __end_of_processGestureData:	
  7491                           
  7492                           	psect	text19
  7493  0C2E                     __ptext19:	
  7494 ;; *************** function ___wmul *****************
  7495 ;; Defined at:
  7496 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7499 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  product         2    4[BANK0 ] unsigned int 
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  2    0[BANK0 ] unsigned int 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;Total ram usage:        6 bytes
  7516 ;; Hardware stack levels used:    1
  7517 ;; Hardware stack levels required when called:    5
  7518 ;; This function calls:
  7519 ;;		Nothing
  7520 ;; This function is called by:
  7521 ;;		_processGestureData
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           
  7526                           ;psect for function ___wmul
  7527  0C2E                     ___wmul:	
  7528                           
  7529                           ;incstack = 0
  7530                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7531  0C2E  0020               	movlb	0	; select bank0
  7532  0C2F  01A4               	clrf	___wmul@product
  7533  0C30  01A5               	clrf	___wmul@product+1
  7534  0C31                     l5087:	
  7535  0C31  1C20               	btfss	___wmul@multiplier,0
  7536  0C32  2C37               	goto	l1195
  7537  0C33  0822               	movf	___wmul@multiplicand,w
  7538  0C34  07A4               	addwf	___wmul@product,f
  7539  0C35  0823               	movf	___wmul@multiplicand+1,w
  7540  0C36  3DA5               	addwfc	___wmul@product+1,f
  7541  0C37                     l1195:	
  7542  0C37  3001               	movlw	1
  7543  0C38                     u3905:	
  7544  0C38  35A2               	lslf	___wmul@multiplicand,f
  7545  0C39  0DA3               	rlf	___wmul@multiplicand+1,f
  7546  0C3A  0B89               	decfsz	9,f
  7547  0C3B  2C38               	goto	u3905
  7548  0C3C  3001               	movlw	1
  7549  0C3D                     u3915:	
  7550  0C3D  36A1               	lsrf	___wmul@multiplier+1,f
  7551  0C3E  0CA0               	rrf	___wmul@multiplier,f
  7552  0C3F  0B89               	decfsz	9,f
  7553  0C40  2C3D               	goto	u3915
  7554  0C41  0820               	movf	___wmul@multiplier,w
  7555  0C42  0421               	iorwf	___wmul@multiplier+1,w
  7556  0C43  1D03               	btfss	3,2
  7557  0C44  2C31               	goto	l5087
  7558  0C45  0825               	movf	___wmul@product+1,w
  7559  0C46  00A1               	movwf	?___wmul+1
  7560  0C47  0824               	movf	___wmul@product,w
  7561  0C48  00A0               	movwf	?___wmul
  7562  0C49  0008               	return
  7563  0C4A                     __end_of___wmul:	
  7564                           
  7565                           	psect	text20
  7566  0710                     __ptext20:	
  7567 ;; *************** function ___awdiv *****************
  7568 ;; Defined at:
  7569 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  divisor         2    6[BANK0 ] int 
  7572 ;;  dividend        2    8[BANK0 ] int 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  quotient        2   13[BANK0 ] int 
  7575 ;;  sign            1   12[BANK0 ] unsigned char 
  7576 ;;  counter         1   11[BANK0 ] unsigned char 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  2    6[BANK0 ] int 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;Total ram usage:        9 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    5
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_processGestureData
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           
  7601                           ;psect for function ___awdiv
  7602  0710                     ___awdiv:	
  7603                           
  7604                           ;incstack = 0
  7605                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7606  0710  0020               	movlb	0	; select bank0
  7607  0711  01AC               	clrf	___awdiv@sign
  7608  0712  1FA7               	btfss	___awdiv@divisor+1,7
  7609  0713  2F1B               	goto	l5107
  7610  0714  09A6               	comf	___awdiv@divisor,f
  7611  0715  09A7               	comf	___awdiv@divisor+1,f
  7612  0716  0AA6               	incf	___awdiv@divisor,f
  7613  0717  1903               	skipnz
  7614  0718  0AA7               	incf	___awdiv@divisor+1,f
  7615  0719  01AC               	clrf	___awdiv@sign
  7616  071A  0AAC               	incf	___awdiv@sign,f
  7617  071B                     l5107:	
  7618  071B  1FA9               	btfss	___awdiv@dividend+1,7
  7619  071C  2F26               	goto	l5113
  7620  071D  09A8               	comf	___awdiv@dividend,f
  7621  071E  09A9               	comf	___awdiv@dividend+1,f
  7622  071F  0AA8               	incf	___awdiv@dividend,f
  7623  0720  1903               	skipnz
  7624  0721  0AA9               	incf	___awdiv@dividend+1,f
  7625  0722  3001               	movlw	1
  7626  0723  00AA               	movwf	??___awdiv
  7627  0724  082A               	movf	??___awdiv,w
  7628  0725  06AC               	xorwf	___awdiv@sign,f
  7629  0726                     l5113:	
  7630  0726  01AD               	clrf	___awdiv@quotient
  7631  0727  01AE               	clrf	___awdiv@quotient+1
  7632  0728  0826               	movf	___awdiv@divisor,w
  7633  0729  0427               	iorwf	___awdiv@divisor+1,w
  7634  072A  1903               	btfsc	3,2
  7635  072B  2F55               	goto	l5135
  7636  072C  01AB               	clrf	___awdiv@counter
  7637  072D  0AAB               	incf	___awdiv@counter,f
  7638  072E                     l5123:	
  7639  072E  1BA7               	btfsc	___awdiv@divisor+1,7
  7640  072F  2F3A               	goto	l5125
  7641  0730  3001               	movlw	1
  7642  0731                     u3965:	
  7643  0731  35A6               	lslf	___awdiv@divisor,f
  7644  0732  0DA7               	rlf	___awdiv@divisor+1,f
  7645  0733  0B89               	decfsz	9,f
  7646  0734  2F31               	goto	u3965
  7647  0735  3001               	movlw	1
  7648  0736  00AA               	movwf	??___awdiv
  7649  0737  082A               	movf	??___awdiv,w
  7650  0738  07AB               	addwf	___awdiv@counter,f
  7651  0739  2F2E               	goto	l5123
  7652  073A                     l5125:	
  7653  073A  3001               	movlw	1
  7654  073B                     u3985:	
  7655  073B  35AD               	lslf	___awdiv@quotient,f
  7656  073C  0DAE               	rlf	___awdiv@quotient+1,f
  7657  073D  0B89               	decfsz	9,f
  7658  073E  2F3B               	goto	u3985
  7659  073F  0827               	movf	___awdiv@divisor+1,w
  7660  0740  0229               	subwf	___awdiv@dividend+1,w
  7661  0741  1D03               	skipz
  7662  0742  2F45               	goto	u3995
  7663  0743  0826               	movf	___awdiv@divisor,w
  7664  0744  0228               	subwf	___awdiv@dividend,w
  7665  0745                     u3995:	
  7666  0745  1C03               	skipc
  7667  0746  2F4C               	goto	l5131
  7668  0747  0826               	movf	___awdiv@divisor,w
  7669  0748  02A8               	subwf	___awdiv@dividend,f
  7670  0749  0827               	movf	___awdiv@divisor+1,w
  7671  074A  3BA9               	subwfb	___awdiv@dividend+1,f
  7672  074B  142D               	bsf	___awdiv@quotient,0
  7673  074C                     l5131:	
  7674  074C  3001               	movlw	1
  7675  074D                     u4005:	
  7676  074D  36A7               	lsrf	___awdiv@divisor+1,f
  7677  074E  0CA6               	rrf	___awdiv@divisor,f
  7678  074F  0B89               	decfsz	9,f
  7679  0750  2F4D               	goto	u4005
  7680  0751  3001               	movlw	1
  7681  0752  02AB               	subwf	___awdiv@counter,f
  7682  0753  1D03               	btfss	3,2
  7683  0754  2F3A               	goto	l5125
  7684  0755                     l5135:	
  7685  0755  082C               	movf	___awdiv@sign,w
  7686  0756  1903               	btfsc	3,2
  7687  0757  2F5D               	goto	l5139
  7688  0758  09AD               	comf	___awdiv@quotient,f
  7689  0759  09AE               	comf	___awdiv@quotient+1,f
  7690  075A  0AAD               	incf	___awdiv@quotient,f
  7691  075B  1903               	skipnz
  7692  075C  0AAE               	incf	___awdiv@quotient+1,f
  7693  075D                     l5139:	
  7694  075D  082E               	movf	___awdiv@quotient+1,w
  7695  075E  00A7               	movwf	?___awdiv+1
  7696  075F  082D               	movf	___awdiv@quotient,w
  7697  0760  00A6               	movwf	?___awdiv
  7698  0761  0008               	return
  7699  0762                     __end_of___awdiv:	
  7700                           
  7701                           	psect	text21
  7702  0B83                     __ptext21:	
  7703 ;; *************** function _isGestureAvailable *****************
  7704 ;; Defined at:
  7705 ;;		line 536 in file "APDS9960.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;		None
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  val             1   10[BANK0 ] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      _Bool 
  7712 ;; Registers used:
  7713 ;;		wreg, status,2, status,0, pclath, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;Total ram usage:        2 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    8
  7726 ;; This function calls:
  7727 ;;		_wireReadDataByte
  7728 ;; This function is called by:
  7729 ;;		_main
  7730 ;;		_handleGesture
  7731 ;;		_readGesture
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           
  7736                           ;psect for function _isGestureAvailable
  7737  0B83                     _isGestureAvailable:	
  7738                           
  7739                           ;APDS9960.c: 538:     uint8_t val;;APDS9960.c: 541:     val=wireReadDataByte(0xAF);
  7740                           
  7741                           ;incstack = 0
  7742                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  7743  0B83  30AF               	movlw	175
  7744  0B84  318C  2468  318B   	fcall	_wireReadDataByte
  7745  0B87  0020               	movlb	0	; select bank0
  7746  0B88  00A9               	movwf	??_isGestureAvailable
  7747  0B89  0829               	movf	??_isGestureAvailable,w
  7748  0B8A  00AA               	movwf	isGestureAvailable@val
  7749                           
  7750                           ;APDS9960.c: 544:     val &= 0b00000001;
  7751  0B8B  3001               	movlw	1
  7752  0B8C  00A9               	movwf	??_isGestureAvailable
  7753  0B8D  0829               	movf	??_isGestureAvailable,w
  7754  0B8E  05AA               	andwf	isGestureAvailable@val,f
  7755                           
  7756                           ;APDS9960.c: 547:     if( val == 1) {
  7757  0B8F  032A               	decf	isGestureAvailable@val,w
  7758  0B90  1D03               	btfss	3,2
  7759  0B91  2B94               	goto	l5157
  7760                           
  7761                           ;APDS9960.c: 548:         return 1;
  7762  0B92  3001               	movlw	1
  7763  0B93  0008               	return
  7764  0B94                     l5157:	
  7765                           
  7766                           ;APDS9960.c: 550:         return 0;
  7767  0B94  3000               	movlw	0
  7768  0B95  0008               	return
  7769  0B96                     __end_of_isGestureAvailable:	
  7770                           
  7771                           	psect	text22
  7772  0318                     __ptext22:	
  7773 ;; *************** function _decodeGesture *****************
  7774 ;; Defined at:
  7775 ;;		line 794 in file "APDS9960.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;		None
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;		None
  7780 ;; Return value:  Size  Location     Type
  7781 ;;                  1    wreg      _Bool 
  7782 ;; Registers used:
  7783 ;;		wreg, status,2, status,0
  7784 ;; Tracked objects:
  7785 ;;		On entry : 0/0
  7786 ;;		On exit  : 0/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;Total ram usage:       18 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    5
  7796 ;; This function calls:
  7797 ;;		Nothing
  7798 ;; This function is called by:
  7799 ;;		_readGesture
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           
  7804                           ;psect for function _decodeGesture
  7805  0318                     _decodeGesture:	
  7806                           
  7807                           ;APDS9960.c: 797:     if( gesture_state_ == NEAR_STATE ) {
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  7811  0318  0020               	movlb	0	; select bank0
  7812  0319  035F               	decf	_gesture_state_,w
  7813  031A  0460               	iorwf	_gesture_state_+1,w
  7814  031B  1D03               	btfss	3,2
  7815  031C  2B23               	goto	l5391
  7816                           
  7817                           ;APDS9960.c: 798:         gesture_motion_ = DIR_NEAR;
  7818  031D  3005               	movlw	5
  7819  031E  00DD               	movwf	_gesture_motion_
  7820  031F  3000               	movlw	0
  7821  0320  00DE               	movwf	_gesture_motion_+1
  7822                           
  7823                           ;APDS9960.c: 799:         return 1;
  7824  0321  3001               	movlw	1
  7825  0322  0008               	return
  7826  0323                     l5391:	
  7827  0323  3002               	movlw	2
  7828  0324  065F               	xorwf	_gesture_state_,w
  7829  0325  0460               	iorwf	_gesture_state_+1,w
  7830  0326  1D03               	btfss	3,2
  7831  0327  2B2E               	goto	l5397
  7832                           
  7833                           ;APDS9960.c: 801:         gesture_motion_ = DIR_FAR;
  7834  0328  3006               	movlw	6
  7835  0329  00DD               	movwf	_gesture_motion_
  7836  032A  3000               	movlw	0
  7837  032B  00DE               	movwf	_gesture_motion_+1
  7838                           
  7839                           ;APDS9960.c: 802:         return 1;
  7840  032C  3001               	movlw	1
  7841  032D  0008               	return
  7842  032E                     l5397:	
  7843                           
  7844                           ;APDS9960.c: 806:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  7845  032E  0A67               	incf	_gesture_ud_count_,w
  7846  032F  1D03               	skipz
  7847  0330  2B3A               	goto	l5403
  7848  0331  0A68               	incf	_gesture_ud_count_+1,w
  7849  0332  1D03               	btfss	3,2
  7850  0333  2B3A               	goto	l5403
  7851  0334  0865               	movf	_gesture_lr_count_,w
  7852  0335  0466               	iorwf	_gesture_lr_count_+1,w
  7853  0336  1D03               	btfss	3,2
  7854  0337  2B3A               	goto	l5403
  7855  0338                     l5401:	
  7856                           
  7857                           ;APDS9960.c: 807:         gesture_motion_ = DIR_UP;
  7858  0338  3003               	movlw	3
  7859  0339  2B59               	goto	L7
  7860  033A                     l5403:	
  7861                           ;APDS9960.c: 808:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  7862                           
  7863  033A  0367               	decf	_gesture_ud_count_,w
  7864  033B  0468               	iorwf	_gesture_ud_count_+1,w
  7865  033C  1D03               	btfss	3,2
  7866  033D  2B44               	goto	l5409
  7867  033E  0865               	movf	_gesture_lr_count_,w
  7868  033F  0466               	iorwf	_gesture_lr_count_+1,w
  7869  0340  1D03               	btfss	3,2
  7870  0341  2B44               	goto	l5409
  7871  0342                     l5407:	
  7872                           
  7873                           ;APDS9960.c: 809:         gesture_motion_ = DIR_DOWN;
  7874  0342  3004               	movlw	4
  7875  0343  2B59               	goto	L7
  7876  0344                     l5409:	
  7877                           ;APDS9960.c: 810:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  7878                           
  7879  0344  0867               	movf	_gesture_ud_count_,w
  7880  0345  0468               	iorwf	_gesture_ud_count_+1,w
  7881  0346  1D03               	btfss	3,2
  7882  0347  2B4E               	goto	l5415
  7883  0348  0365               	decf	_gesture_lr_count_,w
  7884  0349  0466               	iorwf	_gesture_lr_count_+1,w
  7885  034A  1D03               	btfss	3,2
  7886  034B  2B4E               	goto	l5415
  7887  034C                     l5413:	
  7888                           
  7889                           ;APDS9960.c: 811:         gesture_motion_ = DIR_RIGHT;
  7890  034C  3002               	movlw	2
  7891  034D  2B59               	goto	L7
  7892  034E                     l5415:	
  7893                           ;APDS9960.c: 812:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  7894                           
  7895  034E  0867               	movf	_gesture_ud_count_,w
  7896  034F  0468               	iorwf	_gesture_ud_count_+1,w
  7897  0350  1D03               	btfss	3,2
  7898  0351  2B5E               	goto	l5421
  7899  0352  0A65               	incf	_gesture_lr_count_,w
  7900  0353  1D03               	skipz
  7901  0354  2B5E               	goto	l5421
  7902  0355  0A66               	incf	_gesture_lr_count_+1,w
  7903  0356  1D03               	btfss	3,2
  7904  0357  2B5E               	goto	l5421
  7905  0358                     l5419:	
  7906                           
  7907                           ;APDS9960.c: 813:         gesture_motion_ = DIR_LEFT;
  7908  0358  3001               	movlw	1
  7909  0359                     L7:	
  7910  0359  0020               	movlb	0	; select bank0
  7911  035A  00DD               	movwf	_gesture_motion_
  7912  035B  3000               	movlw	0
  7913  035C  00DE               	movwf	_gesture_motion_+1
  7914                           
  7915                           ;APDS9960.c: 814:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  7916  035D  2CA4               	goto	l5497
  7917  035E                     l5421:	
  7918  035E  0A67               	incf	_gesture_ud_count_,w
  7919  035F  1D03               	skipz
  7920  0360  2BAF               	goto	l5439
  7921  0361  0A68               	incf	_gesture_ud_count_+1,w
  7922  0362  1D03               	btfss	3,2
  7923  0363  2BAF               	goto	l5439
  7924  0364  0365               	decf	_gesture_lr_count_,w
  7925  0365  0466               	iorwf	_gesture_lr_count_+1,w
  7926  0366  1D03               	btfss	3,2
  7927  0367  2BAF               	goto	l5439
  7928                           
  7929                           ;APDS9960.c: 815:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  7930  0368  086C               	movf	_gesture_ud_delta_+1,w
  7931  0369  3A80               	xorlw	128
  7932  036A  00A0               	movwf	??_decodeGesture
  7933  036B  3080               	movlw	128
  7934  036C  0220               	subwf	??_decodeGesture,w
  7935  036D  1D03               	skipz
  7936  036E  2B71               	goto	u4695
  7937  036F  3001               	movlw	1
  7938  0370  026B               	subwf	_gesture_ud_delta_,w
  7939  0371                     u4695:	
  7940  0371  1803               	skipnc
  7941  0372  2B80               	goto	l5429
  7942  0373  0020               	movlb	0	; select bank0
  7943  0374  096B               	comf	_gesture_ud_delta_,w
  7944  0375  00A0               	movwf	??_decodeGesture
  7945  0376  096C               	comf	_gesture_ud_delta_+1,w
  7946  0377  00A1               	movwf	??_decodeGesture+1
  7947  0378  0AA0               	incf	??_decodeGesture,f
  7948  0379  1903               	skipnz
  7949  037A  0AA1               	incf	??_decodeGesture+1,f
  7950  037B  0820               	movf	??_decodeGesture,w
  7951  037C  00A2               	movwf	_decodeGesture$1277
  7952  037D  0821               	movf	??_decodeGesture+1,w
  7953  037E  00A3               	movwf	_decodeGesture$1277+1
  7954  037F  2B85               	goto	l928
  7955  0380                     l5429:	
  7956  0380  0020               	movlb	0	; select bank0
  7957  0381  086C               	movf	_gesture_ud_delta_+1,w
  7958  0382  00A3               	movwf	_decodeGesture$1277+1
  7959  0383  086B               	movf	_gesture_ud_delta_,w
  7960  0384  00A2               	movwf	_decodeGesture$1277
  7961  0385                     l928:	
  7962  0385  086A               	movf	_gesture_lr_delta_+1,w
  7963  0386  3A80               	xorlw	128
  7964  0387  00A0               	movwf	??_decodeGesture
  7965  0388  3080               	movlw	128
  7966  0389  0220               	subwf	??_decodeGesture,w
  7967  038A  1D03               	skipz
  7968  038B  2B8E               	goto	u4705
  7969  038C  3001               	movlw	1
  7970  038D  0269               	subwf	_gesture_lr_delta_,w
  7971  038E                     u4705:	
  7972  038E  1803               	skipnc
  7973  038F  2B9D               	goto	l5433
  7974  0390  0020               	movlb	0	; select bank0
  7975  0391  0969               	comf	_gesture_lr_delta_,w
  7976  0392  00A0               	movwf	??_decodeGesture
  7977  0393  096A               	comf	_gesture_lr_delta_+1,w
  7978  0394  00A1               	movwf	??_decodeGesture+1
  7979  0395  0AA0               	incf	??_decodeGesture,f
  7980  0396  1903               	skipnz
  7981  0397  0AA1               	incf	??_decodeGesture+1,f
  7982  0398  0820               	movf	??_decodeGesture,w
  7983  0399  00A4               	movwf	_decodeGesture$1278
  7984  039A  0821               	movf	??_decodeGesture+1,w
  7985  039B  00A5               	movwf	_decodeGesture$1278+1
  7986  039C  2BA2               	goto	l932
  7987  039D                     l5433:	
  7988  039D  0020               	movlb	0	; select bank0
  7989  039E  086A               	movf	_gesture_lr_delta_+1,w
  7990  039F  00A5               	movwf	_decodeGesture$1278+1
  7991  03A0  0869               	movf	_gesture_lr_delta_,w
  7992  03A1  00A4               	movwf	_decodeGesture$1278
  7993  03A2                     l932:	
  7994  03A2  0825               	movf	_decodeGesture$1278+1,w
  7995  03A3  3A80               	xorlw	128
  7996  03A4  00A0               	movwf	??_decodeGesture
  7997  03A5  0823               	movf	_decodeGesture$1277+1,w
  7998  03A6  3A80               	xorlw	128
  7999  03A7  0220               	subwf	??_decodeGesture,w
  8000  03A8  1D03               	skipz
  8001  03A9  2BAC               	goto	u4715
  8002  03AA  0822               	movf	_decodeGesture$1277,w
  8003  03AB  0224               	subwf	_decodeGesture$1278,w
  8004  03AC                     u4715:	
  8005  03AC  1C03               	btfss	3,0
  8006  03AD  2B38               	goto	l5401
  8007  03AE  2B4C               	goto	l5413
  8008  03AF                     l5439:	
  8009  03AF  0367               	decf	_gesture_ud_count_,w
  8010  03B0  0468               	iorwf	_gesture_ud_count_+1,w
  8011  03B1  1D03               	btfss	3,2
  8012  03B2  2C00               	goto	l5457
  8013  03B3  0A65               	incf	_gesture_lr_count_,w
  8014  03B4  1D03               	skipz
  8015  03B5  2C00               	goto	l5457
  8016  03B6  0A66               	incf	_gesture_lr_count_+1,w
  8017  03B7  1D03               	btfss	3,2
  8018  03B8  2C00               	goto	l5457
  8019                           
  8020                           ;APDS9960.c: 821:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8021  03B9  086C               	movf	_gesture_ud_delta_+1,w
  8022  03BA  3A80               	xorlw	128
  8023  03BB  00A0               	movwf	??_decodeGesture
  8024  03BC  3080               	movlw	128
  8025  03BD  0220               	subwf	??_decodeGesture,w
  8026  03BE  1D03               	skipz
  8027  03BF  2BC2               	goto	u4745
  8028  03C0  3001               	movlw	1
  8029  03C1  026B               	subwf	_gesture_ud_delta_,w
  8030  03C2                     u4745:	
  8031  03C2  1803               	skipnc
  8032  03C3  2BD1               	goto	l5447
  8033  03C4  0020               	movlb	0	; select bank0
  8034  03C5  096B               	comf	_gesture_ud_delta_,w
  8035  03C6  00A0               	movwf	??_decodeGesture
  8036  03C7  096C               	comf	_gesture_ud_delta_+1,w
  8037  03C8  00A1               	movwf	??_decodeGesture+1
  8038  03C9  0AA0               	incf	??_decodeGesture,f
  8039  03CA  1903               	skipnz
  8040  03CB  0AA1               	incf	??_decodeGesture+1,f
  8041  03CC  0820               	movf	??_decodeGesture,w
  8042  03CD  00A6               	movwf	_decodeGesture$1279
  8043  03CE  0821               	movf	??_decodeGesture+1,w
  8044  03CF  00A7               	movwf	_decodeGesture$1279+1
  8045  03D0  2BD6               	goto	l940
  8046  03D1                     l5447:	
  8047  03D1  0020               	movlb	0	; select bank0
  8048  03D2  086C               	movf	_gesture_ud_delta_+1,w
  8049  03D3  00A7               	movwf	_decodeGesture$1279+1
  8050  03D4  086B               	movf	_gesture_ud_delta_,w
  8051  03D5  00A6               	movwf	_decodeGesture$1279
  8052  03D6                     l940:	
  8053  03D6  086A               	movf	_gesture_lr_delta_+1,w
  8054  03D7  3A80               	xorlw	128
  8055  03D8  00A0               	movwf	??_decodeGesture
  8056  03D9  3080               	movlw	128
  8057  03DA  0220               	subwf	??_decodeGesture,w
  8058  03DB  1D03               	skipz
  8059  03DC  2BDF               	goto	u4755
  8060  03DD  3001               	movlw	1
  8061  03DE  0269               	subwf	_gesture_lr_delta_,w
  8062  03DF                     u4755:	
  8063  03DF  1803               	skipnc
  8064  03E0  2BEE               	goto	l5451
  8065  03E1  0020               	movlb	0	; select bank0
  8066  03E2  0969               	comf	_gesture_lr_delta_,w
  8067  03E3  00A0               	movwf	??_decodeGesture
  8068  03E4  096A               	comf	_gesture_lr_delta_+1,w
  8069  03E5  00A1               	movwf	??_decodeGesture+1
  8070  03E6  0AA0               	incf	??_decodeGesture,f
  8071  03E7  1903               	skipnz
  8072  03E8  0AA1               	incf	??_decodeGesture+1,f
  8073  03E9  0820               	movf	??_decodeGesture,w
  8074  03EA  00A8               	movwf	_decodeGesture$1280
  8075  03EB  0821               	movf	??_decodeGesture+1,w
  8076  03EC  00A9               	movwf	_decodeGesture$1280+1
  8077  03ED  2BF3               	goto	l944
  8078  03EE                     l5451:	
  8079  03EE  0020               	movlb	0	; select bank0
  8080  03EF  086A               	movf	_gesture_lr_delta_+1,w
  8081  03F0  00A9               	movwf	_decodeGesture$1280+1
  8082  03F1  0869               	movf	_gesture_lr_delta_,w
  8083  03F2  00A8               	movwf	_decodeGesture$1280
  8084  03F3                     l944:	
  8085  03F3  0829               	movf	_decodeGesture$1280+1,w
  8086  03F4  3A80               	xorlw	128
  8087  03F5  00A0               	movwf	??_decodeGesture
  8088  03F6  0827               	movf	_decodeGesture$1279+1,w
  8089  03F7  3A80               	xorlw	128
  8090  03F8  0220               	subwf	??_decodeGesture,w
  8091  03F9  1D03               	skipz
  8092  03FA  2BFD               	goto	u4765
  8093  03FB  0826               	movf	_decodeGesture$1279,w
  8094  03FC  0228               	subwf	_decodeGesture$1280,w
  8095  03FD                     u4765:	
  8096  03FD  1C03               	btfss	3,0
  8097  03FE  2B42               	goto	l5407
  8098  03FF  2B58               	goto	l5419
  8099  0400                     l5457:	
  8100  0400  0A67               	incf	_gesture_ud_count_,w
  8101  0401  1D03               	skipz
  8102  0402  2C53               	goto	l5475
  8103  0403  0A68               	incf	_gesture_ud_count_+1,w
  8104  0404  1D03               	btfss	3,2
  8105  0405  2C53               	goto	l5475
  8106  0406  0A65               	incf	_gesture_lr_count_,w
  8107  0407  1D03               	skipz
  8108  0408  2C53               	goto	l5475
  8109  0409  0A66               	incf	_gesture_lr_count_+1,w
  8110  040A  1D03               	btfss	3,2
  8111  040B  2C53               	goto	l5475
  8112                           
  8113                           ;APDS9960.c: 827:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8114  040C  086C               	movf	_gesture_ud_delta_+1,w
  8115  040D  3A80               	xorlw	128
  8116  040E  00A0               	movwf	??_decodeGesture
  8117  040F  3080               	movlw	128
  8118  0410  0220               	subwf	??_decodeGesture,w
  8119  0411  1D03               	skipz
  8120  0412  2C15               	goto	u4795
  8121  0413  3001               	movlw	1
  8122  0414  026B               	subwf	_gesture_ud_delta_,w
  8123  0415                     u4795:	
  8124  0415  1803               	skipnc
  8125  0416  2C24               	goto	l5465
  8126  0417  0020               	movlb	0	; select bank0
  8127  0418  096B               	comf	_gesture_ud_delta_,w
  8128  0419  00A0               	movwf	??_decodeGesture
  8129  041A  096C               	comf	_gesture_ud_delta_+1,w
  8130  041B  00A1               	movwf	??_decodeGesture+1
  8131  041C  0AA0               	incf	??_decodeGesture,f
  8132  041D  1903               	skipnz
  8133  041E  0AA1               	incf	??_decodeGesture+1,f
  8134  041F  0820               	movf	??_decodeGesture,w
  8135  0420  00AA               	movwf	_decodeGesture$1281
  8136  0421  0821               	movf	??_decodeGesture+1,w
  8137  0422  00AB               	movwf	_decodeGesture$1281+1
  8138  0423  2C29               	goto	l952
  8139  0424                     l5465:	
  8140  0424  0020               	movlb	0	; select bank0
  8141  0425  086C               	movf	_gesture_ud_delta_+1,w
  8142  0426  00AB               	movwf	_decodeGesture$1281+1
  8143  0427  086B               	movf	_gesture_ud_delta_,w
  8144  0428  00AA               	movwf	_decodeGesture$1281
  8145  0429                     l952:	
  8146  0429  086A               	movf	_gesture_lr_delta_+1,w
  8147  042A  3A80               	xorlw	128
  8148  042B  00A0               	movwf	??_decodeGesture
  8149  042C  3080               	movlw	128
  8150  042D  0220               	subwf	??_decodeGesture,w
  8151  042E  1D03               	skipz
  8152  042F  2C32               	goto	u4805
  8153  0430  3001               	movlw	1
  8154  0431  0269               	subwf	_gesture_lr_delta_,w
  8155  0432                     u4805:	
  8156  0432  1803               	skipnc
  8157  0433  2C41               	goto	l5469
  8158  0434  0020               	movlb	0	; select bank0
  8159  0435  0969               	comf	_gesture_lr_delta_,w
  8160  0436  00A0               	movwf	??_decodeGesture
  8161  0437  096A               	comf	_gesture_lr_delta_+1,w
  8162  0438  00A1               	movwf	??_decodeGesture+1
  8163  0439  0AA0               	incf	??_decodeGesture,f
  8164  043A  1903               	skipnz
  8165  043B  0AA1               	incf	??_decodeGesture+1,f
  8166  043C  0820               	movf	??_decodeGesture,w
  8167  043D  00AC               	movwf	_decodeGesture$1282
  8168  043E  0821               	movf	??_decodeGesture+1,w
  8169  043F  00AD               	movwf	_decodeGesture$1282+1
  8170  0440  2C46               	goto	l956
  8171  0441                     l5469:	
  8172  0441  0020               	movlb	0	; select bank0
  8173  0442  086A               	movf	_gesture_lr_delta_+1,w
  8174  0443  00AD               	movwf	_decodeGesture$1282+1
  8175  0444  0869               	movf	_gesture_lr_delta_,w
  8176  0445  00AC               	movwf	_decodeGesture$1282
  8177  0446                     l956:	
  8178  0446  082D               	movf	_decodeGesture$1282+1,w
  8179  0447  3A80               	xorlw	128
  8180  0448  00A0               	movwf	??_decodeGesture
  8181  0449  082B               	movf	_decodeGesture$1281+1,w
  8182  044A  3A80               	xorlw	128
  8183  044B  0220               	subwf	??_decodeGesture,w
  8184  044C  1D03               	skipz
  8185  044D  2C50               	goto	u4815
  8186  044E  082A               	movf	_decodeGesture$1281,w
  8187  044F  022C               	subwf	_decodeGesture$1282,w
  8188  0450                     u4815:	
  8189  0450  1C03               	btfss	3,0
  8190  0451  2B38               	goto	l5401
  8191  0452  2B58               	goto	l5419
  8192  0453                     l5475:	
  8193  0453  0367               	decf	_gesture_ud_count_,w
  8194  0454  0468               	iorwf	_gesture_ud_count_+1,w
  8195  0455  1D03               	btfss	3,2
  8196  0456  2CA2               	goto	l5493
  8197  0457  0365               	decf	_gesture_lr_count_,w
  8198  0458  0466               	iorwf	_gesture_lr_count_+1,w
  8199  0459  1D03               	btfss	3,2
  8200  045A  2CA2               	goto	l5493
  8201                           
  8202                           ;APDS9960.c: 833:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8203  045B  086C               	movf	_gesture_ud_delta_+1,w
  8204  045C  3A80               	xorlw	128
  8205  045D  00A0               	movwf	??_decodeGesture
  8206  045E  3080               	movlw	128
  8207  045F  0220               	subwf	??_decodeGesture,w
  8208  0460  1D03               	skipz
  8209  0461  2C64               	goto	u4845
  8210  0462  3001               	movlw	1
  8211  0463  026B               	subwf	_gesture_ud_delta_,w
  8212  0464                     u4845:	
  8213  0464  1803               	skipnc
  8214  0465  2C73               	goto	l5483
  8215  0466  0020               	movlb	0	; select bank0
  8216  0467  096B               	comf	_gesture_ud_delta_,w
  8217  0468  00A0               	movwf	??_decodeGesture
  8218  0469  096C               	comf	_gesture_ud_delta_+1,w
  8219  046A  00A1               	movwf	??_decodeGesture+1
  8220  046B  0AA0               	incf	??_decodeGesture,f
  8221  046C  1903               	skipnz
  8222  046D  0AA1               	incf	??_decodeGesture+1,f
  8223  046E  0820               	movf	??_decodeGesture,w
  8224  046F  00AE               	movwf	_decodeGesture$1283
  8225  0470  0821               	movf	??_decodeGesture+1,w
  8226  0471  00AF               	movwf	_decodeGesture$1283+1
  8227  0472  2C78               	goto	l964
  8228  0473                     l5483:	
  8229  0473  0020               	movlb	0	; select bank0
  8230  0474  086C               	movf	_gesture_ud_delta_+1,w
  8231  0475  00AF               	movwf	_decodeGesture$1283+1
  8232  0476  086B               	movf	_gesture_ud_delta_,w
  8233  0477  00AE               	movwf	_decodeGesture$1283
  8234  0478                     l964:	
  8235  0478  086A               	movf	_gesture_lr_delta_+1,w
  8236  0479  3A80               	xorlw	128
  8237  047A  00A0               	movwf	??_decodeGesture
  8238  047B  3080               	movlw	128
  8239  047C  0220               	subwf	??_decodeGesture,w
  8240  047D  1D03               	skipz
  8241  047E  2C81               	goto	u4855
  8242  047F  3001               	movlw	1
  8243  0480  0269               	subwf	_gesture_lr_delta_,w
  8244  0481                     u4855:	
  8245  0481  1803               	skipnc
  8246  0482  2C90               	goto	l5487
  8247  0483  0020               	movlb	0	; select bank0
  8248  0484  0969               	comf	_gesture_lr_delta_,w
  8249  0485  00A0               	movwf	??_decodeGesture
  8250  0486  096A               	comf	_gesture_lr_delta_+1,w
  8251  0487  00A1               	movwf	??_decodeGesture+1
  8252  0488  0AA0               	incf	??_decodeGesture,f
  8253  0489  1903               	skipnz
  8254  048A  0AA1               	incf	??_decodeGesture+1,f
  8255  048B  0820               	movf	??_decodeGesture,w
  8256  048C  00B0               	movwf	_decodeGesture$1284
  8257  048D  0821               	movf	??_decodeGesture+1,w
  8258  048E  00B1               	movwf	_decodeGesture$1284+1
  8259  048F  2C95               	goto	l968
  8260  0490                     l5487:	
  8261  0490  0020               	movlb	0	; select bank0
  8262  0491  086A               	movf	_gesture_lr_delta_+1,w
  8263  0492  00B1               	movwf	_decodeGesture$1284+1
  8264  0493  0869               	movf	_gesture_lr_delta_,w
  8265  0494  00B0               	movwf	_decodeGesture$1284
  8266  0495                     l968:	
  8267  0495  0831               	movf	_decodeGesture$1284+1,w
  8268  0496  3A80               	xorlw	128
  8269  0497  00A0               	movwf	??_decodeGesture
  8270  0498  082F               	movf	_decodeGesture$1283+1,w
  8271  0499  3A80               	xorlw	128
  8272  049A  0220               	subwf	??_decodeGesture,w
  8273  049B  1D03               	skipz
  8274  049C  2C9F               	goto	u4865
  8275  049D  082E               	movf	_decodeGesture$1283,w
  8276  049E  0230               	subwf	_decodeGesture$1284,w
  8277  049F                     u4865:	
  8278  049F  1C03               	btfss	3,0
  8279  04A0  2B42               	goto	l5407
  8280  04A1  2B4C               	goto	l5413
  8281  04A2                     l5493:	
  8282                           
  8283                           ;APDS9960.c: 839:         return 0;
  8284  04A2  3000               	movlw	0
  8285  04A3  0008               	return
  8286  04A4                     l5497:	
  8287                           
  8288                           ;APDS9960.c: 842:     return 1;
  8289  04A4  3001               	movlw	1
  8290  04A5  0008               	return
  8291  04A6                     __end_of_decodeGesture:	
  8292                           
  8293                           	psect	text23
  8294  0AFC                     __ptext23:	
  8295 ;; *************** function _LEDs_SetLow *****************
  8296 ;; Defined at:
  8297 ;;		line 148 in file "main.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;		None
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;		None
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      void 
  8304 ;; Registers used:
  8305 ;;		None
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;Total ram usage:        0 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    5
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_handleGesture
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           
  8326                           ;psect for function _LEDs_SetLow
  8327  0AFC                     _LEDs_SetLow:	
  8328                           
  8329                           ;incstack = 0
  8330                           ; Regs used in _LEDs_SetLow: []
  8331                           ;main.c: 149:     do { LATCbits.LATC5 = 0; } while(0);
  8332  0AFC  0022               	movlb	2	; select bank2
  8333  0AFD  128E               	bcf	14,5	;volatile
  8334                           
  8335                           ;main.c: 150:     do { LATAbits.LATA2 = 0; } while(0);
  8336  0AFE  110C               	bcf	12,2	;volatile
  8337                           
  8338                           ;main.c: 151:     do { LATAbits.LATA1 = 0; } while(0);
  8339  0AFF  108C               	bcf	12,1	;volatile
  8340                           
  8341                           ;main.c: 152:     do { LATAbits.LATA5 = 0; } while(0);
  8342  0B00  128C               	bcf	12,5	;volatile
  8343  0B01  0008               	return
  8344  0B02                     __end_of_LEDs_SetLow:	
  8345                           
  8346                           	psect	text24
  8347  06AC                     __ptext24:	
  8348 ;; *************** function _enableGestureSensor *****************
  8349 ;; Defined at:
  8350 ;;		line 408 in file "APDS9960.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  interrupts      1    wreg     _Bool 
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  interrupts      1   17[BANK0 ] _Bool 
  8355 ;; Return value:  Size  Location     Type
  8356 ;;                  1    wreg      _Bool 
  8357 ;; Registers used:
  8358 ;;		wreg, status,2, status,0, pclath, cstack
  8359 ;; Tracked objects:
  8360 ;;		On entry : 0/0
  8361 ;;		On exit  : 0/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;Total ram usage:        2 bytes
  8369 ;; Hardware stack levels used:    1
  8370 ;; Hardware stack levels required when called:   11
  8371 ;; This function calls:
  8372 ;;		_enablePower
  8373 ;;		_resetGestureParameters
  8374 ;;		_setGestureIntEnable
  8375 ;;		_setGestureMode
  8376 ;;		_setLEDBoost
  8377 ;;		_setMode
  8378 ;;		_wireWriteDataByte
  8379 ;; This function is called by:
  8380 ;;		_main
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           
  8385                           ;psect for function _enableGestureSensor
  8386  06AC                     _enableGestureSensor:	
  8387                           
  8388                           ;incstack = 0
  8389                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  8390                           ;enableGestureSensor@interrupts stored from wreg
  8391  06AC  0020               	movlb	0	; select bank0
  8392  06AD  00B1               	movwf	enableGestureSensor@interrupts
  8393                           
  8394                           ;APDS9960.c: 408: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 409: {;APDS9
      +                          960.c: 417:     resetGestureParameters();
  8395  06AE  318B  23E2  3186   	fcall	_resetGestureParameters
  8396                           
  8397                           ;APDS9960.c: 418:     if( !wireWriteDataByte(0x83, 0xFF) ) {
  8398  06B1  30FF               	movlw	255
  8399  06B2  0020               	movlb	0	; select bank0
  8400  06B3  00B0               	movwf	??_enableGestureSensor
  8401  06B4  0830               	movf	??_enableGestureSensor,w
  8402  06B5  00A6               	movwf	wireWriteDataByte@val
  8403  06B6  3083               	movlw	131
  8404  06B7  318B  23F7  3186   	fcall	_wireWriteDataByte
  8405  06BA  0020               	movlb	0	; select bank0
  8406  06BB  0826               	movf	?_wireWriteDataByte,w
  8407  06BC  0427               	iorwf	?_wireWriteDataByte+1,w
  8408  06BD  1903               	btfsc	3,2
  8409  06BE  2EC2               	goto	l6031
  8410  06BF  2EC4               	goto	l6035
  8411  06C0                     l6049:	
  8412                           
  8413                           ;APDS9960.c: 428:         if( !setGestureIntEnable(1) ) {
  8414  06C0  3001               	movlw	1
  8415  06C1  2EDD               	goto	L8
  8416  06C2                     l6031:	
  8417                           
  8418                           ;APDS9960.c: 419:         return 0;
  8419  06C2  3000               	movlw	0
  8420  06C3  0008               	return
  8421  06C4                     l6035:	
  8422                           
  8423                           ;APDS9960.c: 421:     if( !wireWriteDataByte(0x8E, 0x89) ) {
  8424  06C4  3089               	movlw	137
  8425  06C5  00B0               	movwf	??_enableGestureSensor
  8426  06C6  0830               	movf	??_enableGestureSensor,w
  8427  06C7  00A6               	movwf	wireWriteDataByte@val
  8428  06C8  308E               	movlw	142
  8429  06C9  318B  23F7  3186   	fcall	_wireWriteDataByte
  8430  06CC  0020               	movlb	0	; select bank0
  8431  06CD  0826               	movf	?_wireWriteDataByte,w
  8432  06CE  0427               	iorwf	?_wireWriteDataByte+1,w
  8433  06CF  1903               	btfsc	3,2
  8434  06D0  2EC2               	goto	l6031
  8435                           
  8436                           ;APDS9960.c: 424:     if( !setLEDBoost(3) ) {
  8437  06D1  3003               	movlw	3
  8438  06D2  318E  2627  3186   	fcall	_setLEDBoost
  8439  06D5  3A00               	xorlw	0
  8440  06D6  1903               	btfsc	3,2
  8441  06D7  2EC2               	goto	l6031
  8442                           
  8443                           ;APDS9960.c: 427:     if( interrupts ) {
  8444  06D8  0020               	movlb	0	; select bank0
  8445  06D9  0831               	movf	enableGestureSensor@interrupts,w
  8446  06DA  1D03               	btfss	3,2
  8447  06DB  2EC0               	goto	l6049
  8448                           
  8449                           ;APDS9960.c: 432:         if( !setGestureIntEnable(0) ) {
  8450  06DC  3000               	movlw	0
  8451  06DD                     L8:	
  8452  06DD  318D  25CB  3186   	fcall	_setGestureIntEnable
  8453  06E0  3A00               	xorlw	0
  8454  06E1  1903               	btfsc	3,2
  8455  06E2  2EC2               	goto	l6031
  8456                           
  8457                           ;APDS9960.c: 436:     if( !setGestureMode(1) ) {
  8458  06E3  3001               	movlw	1
  8459  06E4  318C  24B2  3186   	fcall	_setGestureMode
  8460  06E7  3A00               	xorlw	0
  8461  06E8  1903               	btfsc	3,2
  8462  06E9  2EC2               	goto	l6031
  8463                           
  8464                           ;APDS9960.c: 439:     if( !enablePower() ){
  8465  06EA  318B  2375  3186   	fcall	_enablePower
  8466  06ED  3A00               	xorlw	0
  8467  06EE  1903               	btfsc	3,2
  8468  06EF  2EC2               	goto	l6031
  8469                           
  8470                           ;APDS9960.c: 442:     if( !setMode(3, 1) ) {
  8471  06F0  0020               	movlb	0	; select bank0
  8472  06F1  01AB               	clrf	setMode@enable
  8473  06F2  0AAB               	incf	setMode@enable,f
  8474  06F3  3003               	movlw	3
  8475  06F4  3187  2762  3186   	fcall	_setMode
  8476  06F7  3A00               	xorlw	0
  8477  06F8  1903               	btfsc	3,2
  8478  06F9  2EC2               	goto	l6031
  8479                           
  8480                           ;APDS9960.c: 445:     if( !setMode(2, 1) ) {
  8481  06FA  0020               	movlb	0	; select bank0
  8482  06FB  01AB               	clrf	setMode@enable
  8483  06FC  0AAB               	incf	setMode@enable,f
  8484  06FD  3002               	movlw	2
  8485  06FE  3187  2762  3186   	fcall	_setMode
  8486  0701  3A00               	xorlw	0
  8487  0702  1903               	btfsc	3,2
  8488  0703  2EC2               	goto	l6031
  8489                           
  8490                           ;APDS9960.c: 448:     if( !setMode(6, 1) ) {
  8491  0704  0020               	movlb	0	; select bank0
  8492  0705  01AB               	clrf	setMode@enable
  8493  0706  0AAB               	incf	setMode@enable,f
  8494  0707  3006               	movlw	6
  8495  0708  3187  2762  3186   	fcall	_setMode
  8496  070B  3A00               	xorlw	0
  8497  070C  1903               	btfsc	3,2
  8498  070D  2EC2               	goto	l6031
  8499                           
  8500                           ;APDS9960.c: 452:     return 1;
  8501  070E  3001               	movlw	1
  8502  070F  0008               	return
  8503  0710                     __end_of_enableGestureSensor:	
  8504                           
  8505                           	psect	text25
  8506  0E27                     __ptext25:	
  8507 ;; *************** function _setLEDBoost *****************
  8508 ;; Defined at:
  8509 ;;		line 483 in file "APDS9960.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  boost           1    wreg     unsigned char 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  boost           1   13[BANK0 ] unsigned char 
  8514 ;;  val             1   12[BANK0 ] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  1    wreg      _Bool 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0, pclath, cstack
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;Total ram usage:        4 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    8
  8531 ;; This function calls:
  8532 ;;		_wireReadDataByte
  8533 ;;		_wireWriteDataByte
  8534 ;; This function is called by:
  8535 ;;		_enableGestureSensor
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function _setLEDBoost
  8541  0E27                     _setLEDBoost:	
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  8545                           ;setLEDBoost@boost stored from wreg
  8546  0E27  0020               	movlb	0	; select bank0
  8547  0E28  00AD               	movwf	setLEDBoost@boost
  8548                           
  8549                           ;APDS9960.c: 483: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 484: {;APDS9960.c: 485:  
      +                             uint8_t val;;APDS9960.c: 488:     val=wireReadDataByte(0x90);
  8550  0E29  3090               	movlw	144
  8551  0E2A  318C  2468  318E   	fcall	_wireReadDataByte
  8552  0E2D  0020               	movlb	0	; select bank0
  8553  0E2E  00AA               	movwf	??_setLEDBoost
  8554  0E2F  082A               	movf	??_setLEDBoost,w
  8555  0E30  00AC               	movwf	setLEDBoost@val
  8556                           
  8557                           ;APDS9960.c: 491:     boost &= 0b00000011;
  8558  0E31  3003               	movlw	3
  8559  0E32  00AA               	movwf	??_setLEDBoost
  8560  0E33  082A               	movf	??_setLEDBoost,w
  8561  0E34  05AD               	andwf	setLEDBoost@boost,f
  8562                           
  8563                           ;APDS9960.c: 492:     boost = boost << 4;
  8564  0E35  082D               	movf	setLEDBoost@boost,w
  8565  0E36  00AA               	movwf	??_setLEDBoost
  8566  0E37  3003               	movlw	3
  8567  0E38                     u5135:	
  8568  0E38  35AA               	lslf	??_setLEDBoost,f
  8569  0E39  3EFF               	addlw	-1
  8570  0E3A  1D03               	skipz
  8571  0E3B  2E38               	goto	u5135
  8572  0E3C  352A               	lslf	??_setLEDBoost,w
  8573  0E3D  00AB               	movwf	??_setLEDBoost+1
  8574  0E3E  082B               	movf	??_setLEDBoost+1,w
  8575  0E3F  00AD               	movwf	setLEDBoost@boost
  8576                           
  8577                           ;APDS9960.c: 493:     val &= 0b11001111;
  8578  0E40  30CF               	movlw	207
  8579  0E41  00AA               	movwf	??_setLEDBoost
  8580  0E42  082A               	movf	??_setLEDBoost,w
  8581  0E43  05AC               	andwf	setLEDBoost@val,f
  8582                           
  8583                           ;APDS9960.c: 494:     val |= boost;
  8584  0E44  082D               	movf	setLEDBoost@boost,w
  8585  0E45  00AA               	movwf	??_setLEDBoost
  8586  0E46  082A               	movf	??_setLEDBoost,w
  8587  0E47  04AC               	iorwf	setLEDBoost@val,f
  8588                           
  8589                           ;APDS9960.c: 497:     if( !wireWriteDataByte(0x90, val) ) {
  8590  0E48  082C               	movf	setLEDBoost@val,w
  8591  0E49  00AA               	movwf	??_setLEDBoost
  8592  0E4A  082A               	movf	??_setLEDBoost,w
  8593  0E4B  00A6               	movwf	wireWriteDataByte@val
  8594  0E4C  3090               	movlw	144
  8595  0E4D  318B  23F7  318E   	fcall	_wireWriteDataByte
  8596  0E50  0020               	movlb	0	; select bank0
  8597  0E51  0826               	movf	?_wireWriteDataByte,w
  8598  0E52  0427               	iorwf	?_wireWriteDataByte+1,w
  8599  0E53  1D03               	btfss	3,2
  8600  0E54  2E57               	goto	l5829
  8601                           
  8602                           ;APDS9960.c: 498:         return 0;
  8603  0E55  3000               	movlw	0
  8604  0E56  0008               	return
  8605  0E57                     l5829:	
  8606                           
  8607                           ;APDS9960.c: 501:     return 1;
  8608  0E57  3001               	movlw	1
  8609  0E58  0008               	return
  8610  0E59                     __end_of_setLEDBoost:	
  8611                           
  8612                           	psect	text26
  8613  0CB2                     __ptext26:	
  8614 ;; *************** function _setGestureMode *****************
  8615 ;; Defined at:
  8616 ;;		line 505 in file "APDS9960.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  mode            1    wreg     unsigned char 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  mode            1   11[BANK0 ] unsigned char 
  8621 ;;  val             1   12[BANK0 ] unsigned char 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  1    wreg      _Bool 
  8624 ;; Registers used:
  8625 ;;		wreg, status,2, status,0, pclath, cstack
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;Total ram usage:        3 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; Hardware stack levels required when called:    8
  8638 ;; This function calls:
  8639 ;;		_wireReadDataByte
  8640 ;;		_wireWriteDataByte
  8641 ;; This function is called by:
  8642 ;;		_enableGestureSensor
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function _setGestureMode
  8648  0CB2                     _setGestureMode:	
  8649                           
  8650                           ;incstack = 0
  8651                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  8652                           ;setGestureMode@mode stored from wreg
  8653  0CB2  0020               	movlb	0	; select bank0
  8654  0CB3  00AB               	movwf	setGestureMode@mode
  8655                           
  8656                           ;APDS9960.c: 505: _Bool setGestureMode(uint8_t mode);APDS9960.c: 506: {;APDS9960.c: 507:
      +                               uint8_t val;;APDS9960.c: 510:     val = wireReadDataByte(0xAB);
  8657  0CB4  30AB               	movlw	171
  8658  0CB5  318C  2468  318C   	fcall	_wireReadDataByte
  8659  0CB8  0020               	movlb	0	; select bank0
  8660  0CB9  00AA               	movwf	??_setGestureMode
  8661  0CBA  082A               	movf	??_setGestureMode,w
  8662  0CBB  00AC               	movwf	setGestureMode@val
  8663                           
  8664                           ;APDS9960.c: 513:     mode &= 0b00000001;
  8665  0CBC  3001               	movlw	1
  8666  0CBD  00AA               	movwf	??_setGestureMode
  8667  0CBE  082A               	movf	??_setGestureMode,w
  8668  0CBF  05AB               	andwf	setGestureMode@mode,f
  8669                           
  8670                           ;APDS9960.c: 514:     val &= 0b11111110;
  8671  0CC0  30FE               	movlw	254
  8672  0CC1  00AA               	movwf	??_setGestureMode
  8673  0CC2  082A               	movf	??_setGestureMode,w
  8674  0CC3  05AC               	andwf	setGestureMode@val,f
  8675                           
  8676                           ;APDS9960.c: 515:     val |= mode;
  8677  0CC4  082B               	movf	setGestureMode@mode,w
  8678  0CC5  00AA               	movwf	??_setGestureMode
  8679  0CC6  082A               	movf	??_setGestureMode,w
  8680  0CC7  04AC               	iorwf	setGestureMode@val,f
  8681                           
  8682                           ;APDS9960.c: 518:     if( !wireWriteDataByte(0xAB, val) ) {
  8683  0CC8  082C               	movf	setGestureMode@val,w
  8684  0CC9  00AA               	movwf	??_setGestureMode
  8685  0CCA  082A               	movf	??_setGestureMode,w
  8686  0CCB  00A6               	movwf	wireWriteDataByte@val
  8687  0CCC  30AB               	movlw	171
  8688  0CCD  318B  23F7  318C   	fcall	_wireWriteDataByte
  8689  0CD0  0020               	movlb	0	; select bank0
  8690  0CD1  0826               	movf	?_wireWriteDataByte,w
  8691  0CD2  0427               	iorwf	?_wireWriteDataByte+1,w
  8692  0CD3  1D03               	btfss	3,2
  8693  0CD4  2CD7               	goto	l5847
  8694                           
  8695                           ;APDS9960.c: 519:         return 0;
  8696  0CD5  3000               	movlw	0
  8697  0CD6  0008               	return
  8698  0CD7                     l5847:	
  8699                           
  8700                           ;APDS9960.c: 522:     return 1;
  8701  0CD7  3001               	movlw	1
  8702  0CD8  0008               	return
  8703  0CD9                     __end_of_setGestureMode:	
  8704                           
  8705                           	psect	text27
  8706  0DCB                     __ptext27:	
  8707 ;; *************** function _setGestureIntEnable *****************
  8708 ;; Defined at:
  8709 ;;		line 386 in file "APDS9960.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  enable          1    wreg     unsigned char 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  enable          1   12[BANK0 ] unsigned char 
  8714 ;;  val             1   11[BANK0 ] unsigned char 
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  1    wreg      _Bool 
  8717 ;; Registers used:
  8718 ;;		wreg, status,2, status,0, pclath, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;Total ram usage:        3 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:    8
  8731 ;; This function calls:
  8732 ;;		_wireReadDataByte
  8733 ;;		_wireWriteDataByte
  8734 ;; This function is called by:
  8735 ;;		_initialize
  8736 ;;		_enableGestureSensor
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _setGestureIntEnable
  8742  0DCB                     _setGestureIntEnable:	
  8743                           
  8744                           ;incstack = 0
  8745                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  8746                           ;setGestureIntEnable@enable stored from wreg
  8747  0DCB  0020               	movlb	0	; select bank0
  8748  0DCC  00AC               	movwf	setGestureIntEnable@enable
  8749                           
  8750                           ;APDS9960.c: 386: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 387: {;APDS9960.
      +                          c: 388:     uint8_t val;;APDS9960.c: 391:     val = wireReadDataByte(0xAB);
  8751  0DCD  30AB               	movlw	171
  8752  0DCE  318C  2468  318D   	fcall	_wireReadDataByte
  8753  0DD1  0020               	movlb	0	; select bank0
  8754  0DD2  00AA               	movwf	??_setGestureIntEnable
  8755  0DD3  082A               	movf	??_setGestureIntEnable,w
  8756  0DD4  00AB               	movwf	setGestureIntEnable@val
  8757                           
  8758                           ;APDS9960.c: 394:     enable &= 0b00000001;
  8759  0DD5  3001               	movlw	1
  8760  0DD6  00AA               	movwf	??_setGestureIntEnable
  8761  0DD7  082A               	movf	??_setGestureIntEnable,w
  8762  0DD8  05AC               	andwf	setGestureIntEnable@enable,f
  8763                           
  8764                           ;APDS9960.c: 395:     enable = enable << 1;
  8765  0DD9  352C               	lslf	setGestureIntEnable@enable,w
  8766  0DDA  00AA               	movwf	??_setGestureIntEnable
  8767  0DDB  082A               	movf	??_setGestureIntEnable,w
  8768  0DDC  00AC               	movwf	setGestureIntEnable@enable
  8769                           
  8770                           ;APDS9960.c: 396:     val &= 0b11111101;
  8771  0DDD  30FD               	movlw	253
  8772  0DDE  00AA               	movwf	??_setGestureIntEnable
  8773  0DDF  082A               	movf	??_setGestureIntEnable,w
  8774  0DE0  05AB               	andwf	setGestureIntEnable@val,f
  8775                           
  8776                           ;APDS9960.c: 397:     val |= enable;
  8777  0DE1  082C               	movf	setGestureIntEnable@enable,w
  8778  0DE2  00AA               	movwf	??_setGestureIntEnable
  8779  0DE3  082A               	movf	??_setGestureIntEnable,w
  8780  0DE4  04AB               	iorwf	setGestureIntEnable@val,f
  8781                           
  8782                           ;APDS9960.c: 400:     if( !wireWriteDataByte(0xAB, val) ) {
  8783  0DE5  082B               	movf	setGestureIntEnable@val,w
  8784  0DE6  00AA               	movwf	??_setGestureIntEnable
  8785  0DE7  082A               	movf	??_setGestureIntEnable,w
  8786  0DE8  00A6               	movwf	wireWriteDataByte@val
  8787  0DE9  30AB               	movlw	171
  8788  0DEA  318B  23F7  318D   	fcall	_wireWriteDataByte
  8789  0DED  0020               	movlb	0	; select bank0
  8790  0DEE  0826               	movf	?_wireWriteDataByte,w
  8791  0DEF  0427               	iorwf	?_wireWriteDataByte+1,w
  8792  0DF0  1D03               	btfss	3,2
  8793  0DF1  2DF4               	goto	l5811
  8794                           
  8795                           ;APDS9960.c: 401:         return 0;
  8796  0DF2  3000               	movlw	0
  8797  0DF3  0008               	return
  8798  0DF4                     l5811:	
  8799                           
  8800                           ;APDS9960.c: 404:     return 1;
  8801  0DF4  3001               	movlw	1
  8802  0DF5  0008               	return
  8803  0DF6                     __end_of_setGestureIntEnable:	
  8804                           
  8805                           	psect	text28
  8806  0BE2                     __ptext28:	
  8807 ;; *************** function _resetGestureParameters *****************
  8808 ;; Defined at:
  8809 ;;		line 456 in file "APDS9960.c"
  8810 ;; Parameters:    Size  Location     Type
  8811 ;;		None
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;		None
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  1    wreg      void 
  8816 ;; Registers used:
  8817 ;;		status,2
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;Total ram usage:        0 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    5
  8830 ;; This function calls:
  8831 ;;		Nothing
  8832 ;; This function is called by:
  8833 ;;		_enableGestureSensor
  8834 ;;		_readGesture
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function _resetGestureParameters
  8840  0BE2                     _resetGestureParameters:	
  8841                           
  8842                           ;APDS9960.c: 459:     gesture_data_.index = 0;
  8843                           
  8844                           ;incstack = 0
  8845                           ; Regs used in _resetGestureParameters: [status,2]
  8846  0BE2  0024               	movlb	4	; select bank4
  8847  0BE3  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8848                           
  8849                           ;APDS9960.c: 460:     gesture_data_.total_gestures = 0;
  8850  0BE4  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8851                           
  8852                           ;APDS9960.c: 462:     gesture_ud_delta_ = 0;
  8853  0BE5  0020               	movlb	0	; select bank0
  8854  0BE6  01EB               	clrf	_gesture_ud_delta_
  8855  0BE7  01EC               	clrf	_gesture_ud_delta_+1
  8856                           
  8857                           ;APDS9960.c: 463:     gesture_lr_delta_ = 0;
  8858  0BE8  01E9               	clrf	_gesture_lr_delta_
  8859  0BE9  01EA               	clrf	_gesture_lr_delta_+1
  8860                           
  8861                           ;APDS9960.c: 465:     gesture_ud_count_ = 0;
  8862  0BEA  01E7               	clrf	_gesture_ud_count_
  8863  0BEB  01E8               	clrf	_gesture_ud_count_+1
  8864                           
  8865                           ;APDS9960.c: 466:     gesture_lr_count_ = 0;
  8866  0BEC  01E5               	clrf	_gesture_lr_count_
  8867  0BED  01E6               	clrf	_gesture_lr_count_+1
  8868                           
  8869                           ;APDS9960.c: 468:     gesture_near_count_ = 0;
  8870  0BEE  01E3               	clrf	_gesture_near_count_
  8871  0BEF  01E4               	clrf	_gesture_near_count_+1
  8872                           
  8873                           ;APDS9960.c: 469:     gesture_far_count_ = 0;
  8874  0BF0  01E1               	clrf	_gesture_far_count_
  8875  0BF1  01E2               	clrf	_gesture_far_count_+1
  8876                           
  8877                           ;APDS9960.c: 471:     gesture_state_ = 0;
  8878  0BF2  01DF               	clrf	_gesture_state_
  8879  0BF3  01E0               	clrf	_gesture_state_+1
  8880                           
  8881                           ;APDS9960.c: 472:     gesture_motion_ = DIR_NONE;
  8882  0BF4  01DD               	clrf	_gesture_motion_
  8883  0BF5  01DE               	clrf	_gesture_motion_+1
  8884  0BF6  0008               	return
  8885  0BF7                     __end_of_resetGestureParameters:	
  8886                           
  8887                           	psect	text29
  8888  0B75                     __ptext29:	
  8889 ;; *************** function _enablePower *****************
  8890 ;; Defined at:
  8891 ;;		line 526 in file "APDS9960.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      _Bool 
  8898 ;; Registers used:
  8899 ;;		wreg, status,2, status,0, pclath, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;Total ram usage:        0 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:   10
  8912 ;; This function calls:
  8913 ;;		_setMode
  8914 ;; This function is called by:
  8915 ;;		_enableGestureSensor
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           
  8920                           ;psect for function _enablePower
  8921  0B75                     _enablePower:	
  8922                           
  8923                           ;APDS9960.c: 528:     if( !setMode(0, 1) ) {
  8924                           
  8925                           ;incstack = 0
  8926                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  8927  0B75  0020               	movlb	0	; select bank0
  8928  0B76  01AB               	clrf	setMode@enable
  8929  0B77  0AAB               	incf	setMode@enable,f
  8930  0B78  3000               	movlw	0
  8931  0B79  3187  2762  318B   	fcall	_setMode
  8932  0B7C  3A00               	xorlw	0
  8933  0B7D  1D03               	skipz
  8934  0B7E  2B81               	goto	l5857
  8935                           
  8936                           ;APDS9960.c: 529:         return 0;
  8937  0B7F  3000               	movlw	0
  8938  0B80  0008               	return
  8939  0B81                     l5857:	
  8940                           
  8941                           ;APDS9960.c: 532:     return 1;
  8942  0B81  3001               	movlw	1
  8943  0B82  0008               	return
  8944  0B83                     __end_of_enablePower:	
  8945                           
  8946                           	psect	text30
  8947  0762                     __ptext30:	
  8948 ;; *************** function _setMode *****************
  8949 ;; Defined at:
  8950 ;;		line 123 in file "APDS9960.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  mode            1    wreg     unsigned char 
  8953 ;;  enable          1   11[BANK0 ] unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  mode            1   15[BANK0 ] unsigned char 
  8956 ;;  reg_val         1   14[BANK0 ] unsigned char 
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      _Bool 
  8959 ;; Registers used:
  8960 ;;		wreg, status,2, status,0, pclath, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8966 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;Total ram usage:        5 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    9
  8973 ;; This function calls:
  8974 ;;		_getMode
  8975 ;;		_wireWriteDataByte
  8976 ;; This function is called by:
  8977 ;;		_initialize
  8978 ;;		_enableGestureSensor
  8979 ;;		_enablePower
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           
  8984                           ;psect for function _setMode
  8985  0762                     _setMode:	
  8986                           
  8987                           ;incstack = 0
  8988                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  8989                           ;setMode@mode stored from wreg
  8990  0762  0020               	movlb	0	; select bank0
  8991  0763  00AF               	movwf	setMode@mode
  8992                           
  8993                           ;APDS9960.c: 123: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 124: {;APDS996
      +                          0.c: 125:     uint8_t reg_val;;APDS9960.c: 128:     reg_val = getMode();
  8994  0764  318B  233E  3187   	fcall	_getMode
  8995  0767  0020               	movlb	0	; select bank0
  8996  0768  00AC               	movwf	??_setMode
  8997  0769  082C               	movf	??_setMode,w
  8998  076A  00AE               	movwf	setMode@reg_val
  8999                           
  9000                           ;APDS9960.c: 129:     if( reg_val == 0xFF ) {
  9001  076B  0A2E               	incf	setMode@reg_val,w
  9002  076C  1D03               	btfss	3,2
  9003  076D  2F70               	goto	l5169
  9004  076E                     l5165:	
  9005                           
  9006                           ;APDS9960.c: 130:         return 0;
  9007  076E  3000               	movlw	0
  9008  076F  0008               	return
  9009  0770                     l5169:	
  9010                           
  9011                           ;APDS9960.c: 134:     enable = enable & 0x01;
  9012  0770  082B               	movf	setMode@enable,w
  9013  0771  3901               	andlw	1
  9014  0772  00AC               	movwf	??_setMode
  9015  0773  082C               	movf	??_setMode,w
  9016  0774  00AB               	movwf	setMode@enable
  9017                           
  9018                           ;APDS9960.c: 135:     if( mode >= 0 && mode <= 6 ) {
  9019  0775  3007               	movlw	7
  9020  0776  022F               	subwf	setMode@mode,w
  9021  0777  1803               	skipnc
  9022  0778  2F95               	goto	l5179
  9023                           
  9024                           ;APDS9960.c: 136:         if (enable) {
  9025  0779  082B               	movf	setMode@enable,w
  9026  077A  1903               	btfsc	3,2
  9027  077B  2F88               	goto	l5177
  9028                           
  9029                           ;APDS9960.c: 137:             reg_val |= (1 << mode);
  9030  077C  3001               	movlw	1
  9031  077D  00AC               	movwf	??_setMode
  9032  077E  0A2F               	incf	setMode@mode,w
  9033  077F  2F81               	goto	u4074
  9034  0780                     u4075:	
  9035  0780  35AC               	lslf	??_setMode,f
  9036  0781                     u4074:	
  9037  0781  0B89               	decfsz	9,f
  9038  0782  2F80               	goto	u4075
  9039  0783  082C               	movf	??_setMode,w
  9040  0784  00AD               	movwf	??_setMode+1
  9041  0785  082D               	movf	??_setMode+1,w
  9042  0786  04AE               	iorwf	setMode@reg_val,f
  9043                           
  9044                           ;APDS9960.c: 138:         } else {
  9045  0787  2FA2               	goto	l5187
  9046  0788                     l5177:	
  9047                           
  9048                           ;APDS9960.c: 139:             reg_val &= ~(1 << mode);
  9049  0788  3001               	movlw	1
  9050  0789  00AC               	movwf	??_setMode
  9051  078A  0A2F               	incf	setMode@mode,w
  9052  078B  2F8D               	goto	u4084
  9053  078C                     u4085:	
  9054  078C  35AC               	lslf	??_setMode,f
  9055  078D                     u4084:	
  9056  078D  0B89               	decfsz	9,f
  9057  078E  2F8C               	goto	u4085
  9058  078F  082C               	movf	??_setMode,w
  9059  0790  3AFF               	xorlw	255
  9060  0791  00AD               	movwf	??_setMode+1
  9061  0792  082D               	movf	??_setMode+1,w
  9062  0793  05AE               	andwf	setMode@reg_val,f
  9063  0794  2FA2               	goto	l5187
  9064  0795                     l5179:	
  9065  0795  3007               	movlw	7
  9066  0796  062F               	xorwf	setMode@mode,w
  9067  0797  1D03               	btfss	3,2
  9068  0798  2FA2               	goto	l5187
  9069                           
  9070                           ;APDS9960.c: 142:         if (enable) {
  9071  0799  082B               	movf	setMode@enable,w
  9072  079A  1903               	btfsc	3,2
  9073  079B  2FA1               	goto	l5185
  9074                           
  9075                           ;APDS9960.c: 143:             reg_val = 0x7F;
  9076  079C  307F               	movlw	127
  9077  079D  00AC               	movwf	??_setMode
  9078  079E  082C               	movf	??_setMode,w
  9079  079F  00AE               	movwf	setMode@reg_val
  9080                           
  9081                           ;APDS9960.c: 144:         } else {
  9082  07A0  2FA2               	goto	l5187
  9083  07A1                     l5185:	
  9084                           
  9085                           ;APDS9960.c: 145:             reg_val = 0x00;
  9086  07A1  01AE               	clrf	setMode@reg_val
  9087  07A2                     l5187:	
  9088                           
  9089                           ;APDS9960.c: 150:     if( !wireWriteDataByte(0x80, reg_val) ) {
  9090  07A2  082E               	movf	setMode@reg_val,w
  9091  07A3  00AC               	movwf	??_setMode
  9092  07A4  082C               	movf	??_setMode,w
  9093  07A5  00A6               	movwf	wireWriteDataByte@val
  9094  07A6  3080               	movlw	128
  9095  07A7  318B  23F7  3187   	fcall	_wireWriteDataByte
  9096  07AA  0020               	movlb	0	; select bank0
  9097  07AB  0826               	movf	?_wireWriteDataByte,w
  9098  07AC  0427               	iorwf	?_wireWriteDataByte+1,w
  9099  07AD  1903               	btfsc	3,2
  9100  07AE  2F6E               	goto	l5165
  9101                           
  9102                           ;APDS9960.c: 154:     return 1;
  9103  07AF  3001               	movlw	1
  9104  07B0  0008               	return
  9105  07B1                     __end_of_setMode:	
  9106                           
  9107                           	psect	text31
  9108  0BF7                     __ptext31:	
  9109 ;; *************** function _wireWriteDataByte *****************
  9110 ;; Defined at:
  9111 ;;		line 870 in file "APDS9960.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;  reg             1    wreg     unsigned char 
  9114 ;;  val             1    6[BANK0 ] unsigned char 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;  reg             1    9[BANK0 ] unsigned char 
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  2    6[BANK0 ] int 
  9119 ;; Registers used:
  9120 ;;		wreg, status,2, status,0, pclath, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9126 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;Total ram usage:        4 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    7
  9133 ;; This function calls:
  9134 ;;		_I2C_Start
  9135 ;;		_I2C_Stop
  9136 ;;		_I2C_Write_Byte
  9137 ;; This function is called by:
  9138 ;;		_initialize
  9139 ;;		_setMode
  9140 ;;		_setLEDDrive
  9141 ;;		_setProximityGain
  9142 ;;		_setAmbientLightGain
  9143 ;;		_setProxIntLowThresh
  9144 ;;		_setProxIntHighThresh
  9145 ;;		_setLightIntLowThreshold
  9146 ;;		_setLightIntHighThreshold
  9147 ;;		_setGestureEnterThresh
  9148 ;;		_setGestureExitThresh
  9149 ;;		_setGestureGain
  9150 ;;		_setGestureLEDDrive
  9151 ;;		_setGestureWaitTime
  9152 ;;		_setGestureIntEnable
  9153 ;;		_enableGestureSensor
  9154 ;;		_setLEDBoost
  9155 ;;		_setGestureMode
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           
  9160                           ;psect for function _wireWriteDataByte
  9161  0BF7                     _wireWriteDataByte:	
  9162                           
  9163                           ;incstack = 0
  9164                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
  9165                           ;wireWriteDataByte@reg stored from wreg
  9166  0BF7  0020               	movlb	0	; select bank0
  9167  0BF8  00A9               	movwf	wireWriteDataByte@reg
  9168                           
  9169                           ;APDS9960.c: 870: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 871: {;APDS9960.c: 881:     I2C_Start();
  9170  0BF9  318A  22A1  318B   	fcall	_I2C_Start
  9171                           
  9172                           ;APDS9960.c: 882:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  9173  0BFC  3072               	movlw	114
  9174  0BFD  318C  2412  318B   	fcall	_I2C_Write_Byte
  9175                           
  9176                           ;APDS9960.c: 883:     I2C_Write_Byte(reg);
  9177  0C00  0020               	movlb	0	; select bank0
  9178  0C01  0829               	movf	wireWriteDataByte@reg,w
  9179  0C02  318C  2412  318B   	fcall	_I2C_Write_Byte
  9180                           
  9181                           ;APDS9960.c: 884:     I2C_Write_Byte(val);
  9182  0C05  0020               	movlb	0	; select bank0
  9183  0C06  0826               	movf	wireWriteDataByte@val,w
  9184  0C07  318C  2412  318B   	fcall	_I2C_Write_Byte
  9185                           
  9186                           ;APDS9960.c: 885:     I2C_Stop();
  9187  0C0A  318A  22A7         	fcall	_I2C_Stop
  9188                           
  9189                           ;APDS9960.c: 888:     return 1;
  9190  0C0C  3001               	movlw	1
  9191  0C0D  0020               	movlb	0	; select bank0
  9192  0C0E  00A6               	movwf	?_wireWriteDataByte
  9193  0C0F  3000               	movlw	0
  9194  0C10  00A7               	movwf	?_wireWriteDataByte+1
  9195  0C11  0008               	return
  9196  0C12                     __end_of_wireWriteDataByte:	
  9197                           
  9198                           	psect	text32
  9199  0B3E                     __ptext32:	
  9200 ;; *************** function _getMode *****************
  9201 ;; Defined at:
  9202 ;;		line 158 in file "APDS9960.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;		None
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;  enable_value    1   10[BANK0 ] unsigned char 
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      unsigned char 
  9209 ;; Registers used:
  9210 ;;		wreg, status,2, status,0, pclath, cstack
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;Total ram usage:        2 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; Hardware stack levels required when called:    8
  9223 ;; This function calls:
  9224 ;;		_wireReadDataByte
  9225 ;; This function is called by:
  9226 ;;		_setMode
  9227 ;;		_readGesture
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _getMode
  9233  0B3E                     _getMode:	
  9234                           
  9235                           ;APDS9960.c: 160:     uint8_t enable_value;;APDS9960.c: 163:     enable_value = wireRead
      +                          DataByte(0x80);
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
  9239  0B3E  3080               	movlw	128
  9240  0B3F  318C  2468         	fcall	_wireReadDataByte
  9241  0B41  0020               	movlb	0	; select bank0
  9242  0B42  00A9               	movwf	??_getMode
  9243  0B43  0829               	movf	??_getMode,w
  9244  0B44  00AA               	movwf	getMode@enable_value
  9245                           
  9246                           ;APDS9960.c: 165:     return enable_value;
  9247  0B45  082A               	movf	getMode@enable_value,w
  9248  0B46  0008               	return
  9249  0B47                     __end_of_getMode:	
  9250                           
  9251                           	psect	text33
  9252  0C68                     __ptext33:	
  9253 ;; *************** function _wireReadDataByte *****************
  9254 ;; Defined at:
  9255 ;;		line 892 in file "APDS9960.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  reg             1    wreg     unsigned char 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  reg             1    7[BANK0 ] unsigned char 
  9260 ;;  val             1    8[BANK0 ] unsigned char 
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      unsigned char 
  9263 ;; Registers used:
  9264 ;;		wreg, status,2, status,0, pclath, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        3 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    7
  9277 ;; This function calls:
  9278 ;;		_I2C_ReStart
  9279 ;;		_I2C_Read_Byte
  9280 ;;		_I2C_Send_NACK
  9281 ;;		_I2C_Start
  9282 ;;		_I2C_Stop
  9283 ;;		_I2C_Write_Byte
  9284 ;; This function is called by:
  9285 ;;		_initialize
  9286 ;;		_getMode
  9287 ;;		_setLEDDrive
  9288 ;;		_setProximityGain
  9289 ;;		_setAmbientLightGain
  9290 ;;		_setGestureGain
  9291 ;;		_setGestureLEDDrive
  9292 ;;		_setGestureWaitTime
  9293 ;;		_setGestureIntEnable
  9294 ;;		_setLEDBoost
  9295 ;;		_setGestureMode
  9296 ;;		_isGestureAvailable
  9297 ;;		_readGesture
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function _wireReadDataByte
  9303  0C68                     _wireReadDataByte:	
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
  9307                           ;wireReadDataByte@reg stored from wreg
  9308  0C68  0020               	movlb	0	; select bank0
  9309  0C69  00A7               	movwf	wireReadDataByte@reg
  9310                           
  9311                           ;APDS9960.c: 892:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 893: {;
      +                          APDS9960.c: 907:     unsigned char val;;APDS9960.c: 908:     I2C_Start();
  9312  0C6A  318A  22A1  318C   	fcall	_I2C_Start
  9313                           
  9314                           ;APDS9960.c: 909:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  9315  0C6D  3072               	movlw	114
  9316  0C6E  318C  2412  318C   	fcall	_I2C_Write_Byte
  9317                           
  9318                           ;APDS9960.c: 910:     I2C_Write_Byte(reg);
  9319  0C71  0020               	movlb	0	; select bank0
  9320  0C72  0827               	movf	wireReadDataByte@reg,w
  9321  0C73  318C  2412  318C   	fcall	_I2C_Write_Byte
  9322                           
  9323                           ;APDS9960.c: 911:     I2C_ReStart();
  9324  0C76  318A  2292  318C   	fcall	_I2C_ReStart
  9325                           
  9326                           ;APDS9960.c: 913:     I2C_Write_Byte((0x39 << 1) | 0x01);
  9327  0C79  3073               	movlw	115
  9328  0C7A  318C  2412  318C   	fcall	_I2C_Write_Byte
  9329                           
  9330                           ;APDS9960.c: 914:     val=I2C_Read_Byte();
  9331  0C7D  318B  2351  318C   	fcall	_I2C_Read_Byte
  9332  0C80  0020               	movlb	0	; select bank0
  9333  0C81  00A6               	movwf	??_wireReadDataByte
  9334  0C82  0826               	movf	??_wireReadDataByte,w
  9335  0C83  00A8               	movwf	wireReadDataByte@val
  9336                           
  9337                           ;APDS9960.c: 915:     I2C_Send_NACK();
  9338  0C84  318A  229B  318C   	fcall	_I2C_Send_NACK
  9339                           
  9340                           ;APDS9960.c: 916:     I2C_Stop();
  9341  0C87  318A  22A7         	fcall	_I2C_Stop
  9342                           
  9343                           ;APDS9960.c: 918:     return val;
  9344  0C89  0020               	movlb	0	; select bank0
  9345  0C8A  0828               	movf	wireReadDataByte@val,w
  9346  0C8B  0008               	return
  9347  0C8C                     __end_of_wireReadDataByte:	
  9348                           
  9349                           	psect	text34
  9350  0C12                     __ptext34:	
  9351 ;; *************** function _I2C_Write_Byte *****************
  9352 ;; Defined at:
  9353 ;;		line 75 in file "i2c.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;  Byte            1    wreg     unsigned char 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  Byte            1    3[BANK0 ] unsigned char 
  9358 ;;  count           2    4[BANK0 ] unsigned int 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  1    wreg      void 
  9361 ;; Registers used:
  9362 ;;		wreg, status,2, status,0, pclath, cstack
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;Total ram usage:        5 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    6
  9375 ;; This function calls:
  9376 ;;		_i2c1_driver_TXData
  9377 ;; This function is called by:
  9378 ;;		_wireReadDataBlock
  9379 ;;		_wireWriteDataByte
  9380 ;;		_wireReadDataByte
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           
  9385                           ;psect for function _I2C_Write_Byte
  9386  0C12                     _I2C_Write_Byte:	
  9387                           
  9388                           ;incstack = 0
  9389                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  9390                           ;I2C_Write_Byte@Byte stored from wreg
  9391  0C12  0020               	movlb	0	; select bank0
  9392  0C13  00A3               	movwf	I2C_Write_Byte@Byte
  9393                           
  9394                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
  9395  0C14  0823               	movf	I2C_Write_Byte@Byte,w
  9396  0C15  318A  22F6  318C   	fcall	_i2c1_driver_TXData
  9397                           
  9398                           ;i2c.c: 83:     unsigned int count = 0;
  9399  0C18  0020               	movlb	0	; select bank0
  9400  0C19  01A4               	clrf	I2C_Write_Byte@count
  9401  0C1A  01A5               	clrf	I2C_Write_Byte@count+1
  9402  0C1B                     l1031:	
  9403                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
  9404                           
  9405  0C1B  0024               	movlb	4	; select bank4
  9406  0C1C  1B16               	btfsc	22,6	;volatile
  9407  0C1D  2C1B               	goto	l1031
  9408  0C1E                     l5035:	
  9409  0C1E  0020               	movlb	0	; select bank0
  9410  0C1F  0825               	movf	I2C_Write_Byte@count+1,w
  9411  0C20  00A2               	movwf	??_I2C_Write_Byte+1
  9412  0C21  0824               	movf	I2C_Write_Byte@count,w
  9413  0C22  00A1               	movwf	??_I2C_Write_Byte
  9414  0C23  0AA4               	incf	I2C_Write_Byte@count,f
  9415  0C24  1903               	skipnz
  9416  0C25  0AA5               	incf	I2C_Write_Byte@count+1,f
  9417  0C26  3000               	movlw	0
  9418  0C27  0222               	subwf	??_I2C_Write_Byte+1,w
  9419  0C28  3005               	movlw	5
  9420  0C29  1903               	skipnz
  9421  0C2A  0221               	subwf	??_I2C_Write_Byte,w
  9422  0C2B  1803               	btfsc	3,0
  9423  0C2C  0008               	return
  9424  0C2D  2C1E               	goto	l5035
  9425  0C2E                     __end_of_I2C_Write_Byte:	
  9426                           
  9427                           	psect	text35
  9428  0AF6                     __ptext35:	
  9429 ;; *************** function _i2c1_driver_TXData *****************
  9430 ;; Defined at:
  9431 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;  d               1    wreg     unsigned char 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  d               1    0[BANK0 ] unsigned char 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      void 
  9438 ;; Registers used:
  9439 ;;		wreg
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;Total ram usage:        1 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    5
  9452 ;; This function calls:
  9453 ;;		Nothing
  9454 ;; This function is called by:
  9455 ;;		_I2C_Write_Byte
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           
  9460                           ;psect for function _i2c1_driver_TXData
  9461  0AF6                     _i2c1_driver_TXData:	
  9462                           
  9463                           ;incstack = 0
  9464                           ; Regs used in _i2c1_driver_TXData: [wreg]
  9465                           ;i2c1_driver_TXData@d stored from wreg
  9466  0AF6  0020               	movlb	0	; select bank0
  9467  0AF7  00A0               	movwf	i2c1_driver_TXData@d
  9468                           
  9469                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
  9470  0AF8  0820               	movf	i2c1_driver_TXData@d,w
  9471  0AF9  0024               	movlb	4	; select bank4
  9472  0AFA  0091               	movwf	17	;volatile
  9473  0AFB  0008               	return
  9474  0AFC                     __end_of_i2c1_driver_TXData:	
  9475                           
  9476                           	psect	text36
  9477  0AA7                     __ptext36:	
  9478 ;; *************** function _I2C_Stop *****************
  9479 ;; Defined at:
  9480 ;;		line 50 in file "i2c.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      void 
  9487 ;; Registers used:
  9488 ;;		status,2, status,0, pclath, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    6
  9501 ;; This function calls:
  9502 ;;		_i2c1_driver_stop
  9503 ;; This function is called by:
  9504 ;;		_wireReadDataBlock
  9505 ;;		_wireWriteDataByte
  9506 ;;		_wireReadDataByte
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _I2C_Stop
  9512  0AA7                     _I2C_Stop:	
  9513                           
  9514                           ;i2c.c: 52:  i2c1_driver_stop();
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
  9518  0AA7  318A  22A4         	fcall	_i2c1_driver_stop
  9519  0AA9  0008               	return
  9520  0AAA                     __end_of_I2C_Stop:	
  9521                           
  9522                           	psect	text37
  9523  0AA4                     __ptext37:	
  9524 ;; *************** function _i2c1_driver_stop *****************
  9525 ;; Defined at:
  9526 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;		None
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;		None
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      void 
  9533 ;; Registers used:
  9534 ;;		None
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;Total ram usage:        0 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    5
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_I2C_Stop
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           
  9555                           ;psect for function _i2c1_driver_stop
  9556  0AA4                     _i2c1_driver_stop:	
  9557                           
  9558                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
  9559                           
  9560                           ;incstack = 0
  9561                           ; Regs used in _i2c1_driver_stop: []
  9562  0AA4  0024               	movlb	4	; select bank4
  9563  0AA5  1516               	bsf	22,2	;volatile
  9564  0AA6  0008               	return
  9565  0AA7                     __end_of_i2c1_driver_stop:	
  9566                           
  9567                           	psect	text38
  9568  0AA1                     __ptext38:	
  9569 ;; *************** function _I2C_Start *****************
  9570 ;; Defined at:
  9571 ;;		line 35 in file "i2c.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      void 
  9578 ;; Registers used:
  9579 ;;		status,2, status,0, pclath, cstack
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        0 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    6
  9592 ;; This function calls:
  9593 ;;		_i2c1_driver_start
  9594 ;; This function is called by:
  9595 ;;		_wireReadDataBlock
  9596 ;;		_wireWriteDataByte
  9597 ;;		_wireReadDataByte
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           
  9602                           ;psect for function _I2C_Start
  9603  0AA1                     _I2C_Start:	
  9604                           
  9605                           ;i2c.c: 37:  i2c1_driver_start();
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
  9609  0AA1  318A  229E         	fcall	_i2c1_driver_start
  9610  0AA3  0008               	return
  9611  0AA4                     __end_of_I2C_Start:	
  9612                           
  9613                           	psect	text39
  9614  0A9E                     __ptext39:	
  9615 ;; *************** function _i2c1_driver_start *****************
  9616 ;; Defined at:
  9617 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;		None
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		None
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;Total ram usage:        0 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    5
  9638 ;; This function calls:
  9639 ;;		Nothing
  9640 ;; This function is called by:
  9641 ;;		_I2C_Start
  9642 ;;		_i2c_masterOperation
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _i2c1_driver_start
  9648  0A9E                     _i2c1_driver_start:	
  9649                           
  9650                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _i2c1_driver_start: []
  9654  0A9E  0024               	movlb	4	; select bank4
  9655  0A9F  1416               	bsf	22,0	;volatile
  9656  0AA0  0008               	return
  9657  0AA1                     __end_of_i2c1_driver_start:	
  9658                           
  9659                           	psect	text40
  9660  0A9B                     __ptext40:	
  9661 ;; *************** function _I2C_Send_NACK *****************
  9662 ;; Defined at:
  9663 ;;		line 66 in file "i2c.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;		None
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;		None
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  1    wreg      void 
  9670 ;; Registers used:
  9671 ;;		status,2, status,0, pclath, cstack
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;Total ram usage:        0 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:    6
  9684 ;; This function calls:
  9685 ;;		_i2c1_driver_sendNACK
  9686 ;; This function is called by:
  9687 ;;		_wireReadDataBlock
  9688 ;;		_wireReadDataByte
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _I2C_Send_NACK
  9694  0A9B                     _I2C_Send_NACK:	
  9695                           
  9696                           ;i2c.c: 68:     i2c1_driver_sendNACK();
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
  9700  0A9B  318A  22D6         	fcall	_i2c1_driver_sendNACK
  9701  0A9D  0008               	return
  9702  0A9E                     __end_of_I2C_Send_NACK:	
  9703                           
  9704                           	psect	text41
  9705  0AD6                     __ptext41:	
  9706 ;; *************** function _i2c1_driver_sendNACK *****************
  9707 ;; Defined at:
  9708 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;		None
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		None
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;Total ram usage:        0 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    5
  9729 ;; This function calls:
  9730 ;;		Nothing
  9731 ;; This function is called by:
  9732 ;;		_I2C_Send_NACK
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           
  9737                           ;psect for function _i2c1_driver_sendNACK
  9738  0AD6                     _i2c1_driver_sendNACK:	
  9739                           
  9740                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
  9741                           
  9742                           ;incstack = 0
  9743                           ; Regs used in _i2c1_driver_sendNACK: []
  9744  0AD6  0024               	movlb	4	; select bank4
  9745  0AD7  1696               	bsf	22,5	;volatile
  9746                           
  9747                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
  9748  0AD8  1616               	bsf	22,4	;volatile
  9749  0AD9  0008               	return
  9750  0ADA                     __end_of_i2c1_driver_sendNACK:	
  9751                           
  9752                           	psect	text42
  9753  0B51                     __ptext42:	
  9754 ;; *************** function _I2C_Read_Byte *****************
  9755 ;; Defined at:
  9756 ;;		line 115 in file "i2c.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;		None
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;		None
  9761 ;; Return value:  Size  Location     Type
  9762 ;;                  1    wreg      unsigned char 
  9763 ;; Registers used:
  9764 ;;		wreg, status,2, status,0, pclath, cstack
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;Total ram usage:        0 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    6
  9777 ;; This function calls:
  9778 ;;		_i2c1_driver_getRXData
  9779 ;;		_i2c1_driver_isBufferFull
  9780 ;;		_i2c1_driver_startRX
  9781 ;; This function is called by:
  9782 ;;		_wireReadDataBlock
  9783 ;;		_wireReadDataByte
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           
  9788                           ;psect for function _I2C_Read_Byte
  9789  0B51                     _I2C_Read_Byte:	
  9790                           
  9791                           ;i2c.c: 117:     i2c1_driver_startRX();
  9792                           
  9793                           ;incstack = 0
  9794                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  9795  0B51  318A  2298  318B   	fcall	_i2c1_driver_startRX
  9796  0B54                     l5041:	
  9797                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
  9798                           
  9799                           
  9800                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
  9801  0B54  318B  2316  318B   	fcall	_i2c1_driver_isBufferFull
  9802  0B57  1C03               	btfss	3,0
  9803  0B58  2B54               	goto	l5041
  9804                           
  9805                           ;i2c.c: 137:   return i2c1_driver_getRXData();
  9806  0B59  318A  2295         	fcall	_i2c1_driver_getRXData
  9807  0B5B  0008               	return
  9808  0B5C                     __end_of_I2C_Read_Byte:	
  9809                           
  9810                           	psect	text43
  9811  0A98                     __ptext43:	
  9812 ;; *************** function _i2c1_driver_startRX *****************
  9813 ;; Defined at:
  9814 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;		None
  9817 ;; Auto vars:     Size  Location     Type
  9818 ;;		None
  9819 ;; Return value:  Size  Location     Type
  9820 ;;                  1    wreg      void 
  9821 ;; Registers used:
  9822 ;;		None
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;Total ram usage:        0 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    5
  9835 ;; This function calls:
  9836 ;;		Nothing
  9837 ;; This function is called by:
  9838 ;;		_I2C_Read_Byte
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _i2c1_driver_startRX
  9844  0A98                     _i2c1_driver_startRX:	
  9845                           
  9846                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
  9847                           
  9848                           ;incstack = 0
  9849                           ; Regs used in _i2c1_driver_startRX: []
  9850  0A98  0024               	movlb	4	; select bank4
  9851  0A99  1596               	bsf	22,3	;volatile
  9852  0A9A  0008               	return
  9853  0A9B                     __end_of_i2c1_driver_startRX:	
  9854                           
  9855                           	psect	text44
  9856  0B16                     __ptext44:	
  9857 ;; *************** function _i2c1_driver_isBufferFull *****************
  9858 ;; Defined at:
  9859 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;		None
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;		None
  9864 ;; Return value:  Size  Location     Type
  9865 ;;		None               void
  9866 ;; Registers used:
  9867 ;;		wreg, status,2, status,0
  9868 ;; Tracked objects:
  9869 ;;		On entry : 0/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;Total ram usage:        1 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:    5
  9880 ;; This function calls:
  9881 ;;		Nothing
  9882 ;; This function is called by:
  9883 ;;		_I2C_Read_Byte
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           
  9888                           ;psect for function _i2c1_driver_isBufferFull
  9889  0B16                     _i2c1_driver_isBufferFull:	
  9890                           
  9891                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
  9892                           
  9893                           ;incstack = 0
  9894                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
  9895  0B16  0024               	movlb	4	; select bank4
  9896  0B17  0814               	movf	20,w	;volatile
  9897  0B18  3901               	andlw	1
  9898  0B19  0020               	movlb	0	; select bank0
  9899  0B1A  00A0               	movwf	??_i2c1_driver_isBufferFull
  9900  0B1B  0C20               	rrf	??_i2c1_driver_isBufferFull,w
  9901  0B1C  0008               	return
  9902  0B1D                     __end_of_i2c1_driver_isBufferFull:	
  9903                           
  9904                           	psect	text45
  9905  0A95                     __ptext45:	
  9906 ;; *************** function _i2c1_driver_getRXData *****************
  9907 ;; Defined at:
  9908 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      unsigned char 
  9915 ;; Registers used:
  9916 ;;		wreg
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        0 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    5
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_I2C_Read_Byte
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _i2c1_driver_getRXData
  9938  0A95                     _i2c1_driver_getRXData:	
  9939                           
  9940                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in _i2c1_driver_getRXData: [wreg]
  9944  0A95  0024               	movlb	4	; select bank4
  9945  0A96  0811               	movf	17,w	;volatile
  9946  0A97  0008               	return
  9947  0A98                     __end_of_i2c1_driver_getRXData:	
  9948                           
  9949                           	psect	text46
  9950  0A92                     __ptext46:	
  9951 ;; *************** function _I2C_ReStart *****************
  9952 ;; Defined at:
  9953 ;;		line 43 in file "i2c.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;		None
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  1    wreg      void 
  9960 ;; Registers used:
  9961 ;;		status,2, status,0, pclath, cstack
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;Total ram usage:        0 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    6
  9974 ;; This function calls:
  9975 ;;		_i2c1_driver_restart
  9976 ;; This function is called by:
  9977 ;;		_wireReadDataBlock
  9978 ;;		_wireReadDataByte
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _I2C_ReStart
  9984  0A92                     _I2C_ReStart:	
  9985                           
  9986                           ;i2c.c: 45:  i2c1_driver_restart();
  9987                           
  9988                           ;incstack = 0
  9989                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
  9990  0A92  318A  228F         	fcall	_i2c1_driver_restart
  9991  0A94  0008               	return
  9992  0A95                     __end_of_I2C_ReStart:	
  9993                           
  9994                           	psect	text47
  9995  0A8F                     __ptext47:	
  9996 ;; *************** function _i2c1_driver_restart *****************
  9997 ;; Defined at:
  9998 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;		None
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  1    wreg      void 
 10005 ;; Registers used:
 10006 ;;		None
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;Total ram usage:        0 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    5
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_I2C_ReStart
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           
 10027                           ;psect for function _i2c1_driver_restart
 10028  0A8F                     _i2c1_driver_restart:	
 10029                           
 10030                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 10031                           
 10032                           ;incstack = 0
 10033                           ; Regs used in _i2c1_driver_restart: []
 10034  0A8F  0024               	movlb	4	; select bank4
 10035  0A90  1496               	bsf	22,1	;volatile
 10036  0A91  0008               	return
 10037  0A92                     __end_of_i2c1_driver_restart:	
 10038                           
 10039                           	psect	text48
 10040  0B5C                     __ptext48:	
 10041 ;; *************** function _SYSTEM_Initialize *****************
 10042 ;; Defined at:
 10043 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;		None
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      void 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0, pclath, cstack
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;Total ram usage:        0 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    7
 10064 ;; This function calls:
 10065 ;;		_OSCILLATOR_Initialize
 10066 ;;		_PIN_MANAGER_Initialize
 10067 ;;		_PMD_Initialize
 10068 ;;		_WDT_Initialize
 10069 ;; This function is called by:
 10070 ;;		_main
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           
 10075                           ;psect for function _SYSTEM_Initialize
 10076  0B5C                     _SYSTEM_Initialize:	
 10077                           
 10078                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 10079                           
 10080                           ;incstack = 0
 10081                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10082  0B5C  318B  232D  318B   	fcall	_PMD_Initialize
 10083                           
 10084                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 10085  0B5F  318E  26F1  318B   	fcall	_PIN_MANAGER_Initialize
 10086                           
 10087                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 10088  0B62  318B  2335  318B   	fcall	_OSCILLATOR_Initialize
 10089                           
 10090                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 10091  0B65  318A  22D2         	fcall	_WDT_Initialize
 10092  0B67  0008               	return
 10093  0B68                     __end_of_SYSTEM_Initialize:	
 10094                           
 10095                           	psect	text49
 10096  0AD2                     __ptext49:	
 10097 ;; *************** function _WDT_Initialize *****************
 10098 ;; Defined at:
 10099 ;;		line 73 in file "mcc_generated_files/mcc.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;		None
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  1    wreg      void 
 10106 ;; Registers used:
 10107 ;;		wreg
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;Total ram usage:        0 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    5
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_SYSTEM_Initialize
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function _WDT_Initialize
 10129  0AD2                     _WDT_Initialize:	
 10130                           
 10131                           ;mcc_generated_files/mcc.c: 76:     WDTCON = 0x16;
 10132                           
 10133                           ;incstack = 0
 10134                           ; Regs used in _WDT_Initialize: [wreg]
 10135  0AD2  3016               	movlw	22
 10136  0AD3  0021               	movlb	1	; select bank1
 10137  0AD4  0097               	movwf	23	;volatile
 10138  0AD5  0008               	return
 10139  0AD6                     __end_of_WDT_Initialize:	
 10140                           
 10141                           	psect	text50
 10142  0B2D                     __ptext50:	
 10143 ;; *************** function _PMD_Initialize *****************
 10144 ;; Defined at:
 10145 ;;		line 79 in file "mcc_generated_files/mcc.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		status,2
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;Total ram usage:        0 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    5
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_SYSTEM_Initialize
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           
 10174                           ;psect for function _PMD_Initialize
 10175  0B2D                     _PMD_Initialize:	
 10176                           
 10177                           ;mcc_generated_files/mcc.c: 82:     PMD0 = 0x00;
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in _PMD_Initialize: [status,2]
 10181  0B2D  0032               	movlb	18	; select bank18
 10182  0B2E  0191               	clrf	17	;volatile
 10183                           
 10184                           ;mcc_generated_files/mcc.c: 84:     PMD1 = 0x00;
 10185  0B2F  0192               	clrf	18	;volatile
 10186                           
 10187                           ;mcc_generated_files/mcc.c: 86:     PMD2 = 0x00;
 10188  0B30  0193               	clrf	19	;volatile
 10189                           
 10190                           ;mcc_generated_files/mcc.c: 88:     PMD3 = 0x00;
 10191  0B31  0194               	clrf	20	;volatile
 10192                           
 10193                           ;mcc_generated_files/mcc.c: 90:     PMD4 = 0x00;
 10194  0B32  0195               	clrf	21	;volatile
 10195                           
 10196                           ;mcc_generated_files/mcc.c: 92:     PMD5 = 0x00;
 10197  0B33  0196               	clrf	22	;volatile
 10198  0B34  0008               	return
 10199  0B35                     __end_of_PMD_Initialize:	
 10200                           
 10201                           	psect	text51
 10202  0EF1                     __ptext51:	
 10203 ;; *************** function _PIN_MANAGER_Initialize *****************
 10204 ;; Defined at:
 10205 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;		None
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;		None
 10210 ;; Return value:  Size  Location     Type
 10211 ;;                  1    wreg      void 
 10212 ;; Registers used:
 10213 ;;		wreg, status,2, status,0, pclath, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;Total ram usage:        0 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    6
 10226 ;; This function calls:
 10227 ;;		_IOCCF1_SetInterruptHandler
 10228 ;; This function is called by:
 10229 ;;		_SYSTEM_Initialize
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _PIN_MANAGER_Initialize
 10235  0EF1                     _PIN_MANAGER_Initialize:	
 10236                           
 10237                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10241  0EF1  0022               	movlb	2	; select bank2
 10242  0EF2  018C               	clrf	12	;volatile
 10243                           
 10244                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 10245  0EF3  018D               	clrf	13	;volatile
 10246                           
 10247                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 10248  0EF4  018E               	clrf	14	;volatile
 10249                           
 10250                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x11;
 10251  0EF5  3011               	movlw	17
 10252  0EF6  0021               	movlb	1	; select bank1
 10253  0EF7  008C               	movwf	12	;volatile
 10254                           
 10255                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xF0;
 10256  0EF8  30F0               	movlw	240
 10257  0EF9  008D               	movwf	13	;volatile
 10258                           
 10259                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0xDF;
 10260  0EFA  30DF               	movlw	223
 10261  0EFB  008E               	movwf	14	;volatile
 10262                           
 10263                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xDD;
 10264  0EFC  30DD               	movlw	221
 10265  0EFD  0023               	movlb	3	; select bank3
 10266  0EFE  008E               	movwf	14	;volatile
 10267                           
 10268                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x50;
 10269  0EFF  3050               	movlw	80
 10270  0F00  008D               	movwf	13	;volatile
 10271                           
 10272                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x11;
 10273  0F01  3011               	movlw	17
 10274  0F02  008C               	movwf	12	;volatile
 10275                           
 10276                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 10277  0F03  0024               	movlb	4	; select bank4
 10278  0F04  018D               	clrf	13	;volatile
 10279                           
 10280                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 10281  0F05  018C               	clrf	12	;volatile
 10282                           
 10283                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x02;
 10284  0F06  3002               	movlw	2
 10285  0F07  008E               	movwf	14	;volatile
 10286                           
 10287                           ;mcc_generated_files/pin_manager.c: 90:     ODCONA = 0x00;
 10288  0F08  0025               	movlb	5	; select bank5
 10289  0F09  018C               	clrf	12	;volatile
 10290                           
 10291                           ;mcc_generated_files/pin_manager.c: 91:     ODCONB = 0x00;
 10292  0F0A  018D               	clrf	13	;volatile
 10293                           
 10294                           ;mcc_generated_files/pin_manager.c: 92:     ODCONC = 0x00;
 10295  0F0B  018E               	clrf	14	;volatile
 10296                           
 10297                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONA = 0x37;
 10298  0F0C  3037               	movlw	55
 10299  0F0D  0026               	movlb	6	; select bank6
 10300  0F0E  008C               	movwf	12	;volatile
 10301                           
 10302                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONB = 0xF0;
 10303  0F0F  30F0               	movlw	240
 10304  0F10  008D               	movwf	13	;volatile
 10305                           
 10306                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONC = 0xFF;
 10307  0F11  30FF               	movlw	255
 10308  0F12  008E               	movwf	14	;volatile
 10309                           
 10310                           ;mcc_generated_files/pin_manager.c: 106:     IOCCFbits.IOCCF1 = 0;
 10311  0F13  0027               	movlb	7	; select bank7
 10312  0F14  1099               	bcf	25,1	;volatile
 10313                           
 10314                           ;mcc_generated_files/pin_manager.c: 108:     IOCCNbits.IOCCN1 = 0;
 10315  0F15  1098               	bcf	24,1	;volatile
 10316                           
 10317                           ;mcc_generated_files/pin_manager.c: 110:     IOCCPbits.IOCCP1 = 1;
 10318  0F16  1497               	bsf	23,1	;volatile
 10319                           
 10320                           ;mcc_generated_files/pin_manager.c: 115:     IOCCF1_SetInterruptHandler(IOCCF1_DefaultIn
      +                          terruptHandler);
 10321  0F17  3073               	movlw	low _IOCCF1_DefaultInterruptHandler
 10322  0F18  0020               	movlb	0	; select bank0
 10323  0F19  00A0               	movwf	IOCCF1_SetInterruptHandler@InterruptHandler
 10324  0F1A  300A               	movlw	high _IOCCF1_DefaultInterruptHandler
 10325  0F1B  00A1               	movwf	IOCCF1_SetInterruptHandler@InterruptHandler+1
 10326  0F1C  318A  22F0         	fcall	_IOCCF1_SetInterruptHandler
 10327                           
 10328                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
 10329  0F1E  0021               	movlb	1	; select bank1
 10330  0F1F  1610               	bsf	16,4	;volatile
 10331                           
 10332                           ;mcc_generated_files/pin_manager.c: 121:     SSP1CLKPPS = 0x0F;
 10333  0F20  300F               	movlw	15
 10334  0F21  003C               	movlb	28	; select bank28
 10335  0F22  00A0               	movwf	32	;volatile
 10336                           
 10337                           ;mcc_generated_files/pin_manager.c: 122:     RB7PPS = 0x18;
 10338  0F23  3018               	movlw	24
 10339  0F24  003D               	movlb	29	; select bank29
 10340  0F25  009F               	movwf	31	;volatile
 10341                           
 10342                           ;mcc_generated_files/pin_manager.c: 123:     RB5PPS = 0x19;
 10343  0F26  3019               	movlw	25
 10344  0F27  009D               	movwf	29	;volatile
 10345                           
 10346                           ;mcc_generated_files/pin_manager.c: 124:     SSP1DATPPS = 0x0D;
 10347  0F28  300D               	movlw	13
 10348  0F29  003C               	movlb	28	; select bank28
 10349  0F2A  00A1               	movwf	33	;volatile
 10350  0F2B  0008               	return
 10351  0F2C                     __end_of_PIN_MANAGER_Initialize:	
 10352                           
 10353                           	psect	text52
 10354  0AF0                     __ptext52:	
 10355 ;; *************** function _IOCCF1_SetInterruptHandler *****************
 10356 ;; Defined at:
 10357 ;;		line 154 in file "mcc_generated_files/pin_manager.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 10360 ;;		 -> GestureInterruptHandler(1), IOCCF1_DefaultInterruptHandler(1), 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  1    wreg      void 
 10365 ;; Registers used:
 10366 ;;		wreg
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        2 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    5
 10379 ;; This function calls:
 10380 ;;		Nothing
 10381 ;; This function is called by:
 10382 ;;		_PIN_MANAGER_Initialize
 10383 ;;		_main
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           
 10388                           ;psect for function _IOCCF1_SetInterruptHandler
 10389  0AF0                     _IOCCF1_SetInterruptHandler:	
 10390                           
 10391                           ;mcc_generated_files/pin_manager.c: 155:     IOCCF1_InterruptHandler = InterruptHandler;
 10392                           
 10393                           ;incstack = 0
 10394                           ; Regs used in _IOCCF1_SetInterruptHandler: [wreg]
 10395  0AF0  0020               	movlb	0	; select bank0
 10396  0AF1  0821               	movf	IOCCF1_SetInterruptHandler@InterruptHandler+1,w
 10397  0AF2  00EF               	movwf	_IOCCF1_InterruptHandler+1
 10398  0AF3  0820               	movf	IOCCF1_SetInterruptHandler@InterruptHandler,w
 10399  0AF4  00EE               	movwf	_IOCCF1_InterruptHandler
 10400  0AF5  0008               	return
 10401  0AF6                     __end_of_IOCCF1_SetInterruptHandler:	
 10402                           
 10403                           	psect	text53
 10404  0B35                     __ptext53:	
 10405 ;; *************** function _OSCILLATOR_Initialize *****************
 10406 ;; Defined at:
 10407 ;;		line 59 in file "mcc_generated_files/mcc.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;		None
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;		None
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, status,2
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;Total ram usage:        0 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    5
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		_SYSTEM_Initialize
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _OSCILLATOR_Initialize
 10437  0B35                     _OSCILLATOR_Initialize:	
 10438                           
 10439                           ;mcc_generated_files/mcc.c: 62:     OSCCON1 = 0x62;
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10443  0B35  3062               	movlw	98
 10444  0B36  0032               	movlb	18	; select bank18
 10445  0B37  0099               	movwf	25	;volatile
 10446                           
 10447                           ;mcc_generated_files/mcc.c: 64:     OSCCON3 = 0x00;
 10448  0B38  019B               	clrf	27	;volatile
 10449                           
 10450                           ;mcc_generated_files/mcc.c: 66:     OSCEN = 0x00;
 10451  0B39  019D               	clrf	29	;volatile
 10452                           
 10453                           ;mcc_generated_files/mcc.c: 68:     OSCFRQ = 0x03;
 10454  0B3A  3003               	movlw	3
 10455  0B3B  009F               	movwf	31	;volatile
 10456                           
 10457                           ;mcc_generated_files/mcc.c: 70:     OSCTUNE = 0x00;
 10458  0B3C  019E               	clrf	30	;volatile
 10459  0B3D  0008               	return
 10460  0B3E                     __end_of_OSCILLATOR_Initialize:	
 10461                           
 10462                           	psect	intentry
 10463  0004                     __pintentry:	
 10464 ;; *************** function _INTERRUPT_InterruptManager *****************
 10465 ;; Defined at:
 10466 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10467 ;; Parameters:    Size  Location     Type
 10468 ;;		None
 10469 ;; Auto vars:     Size  Location     Type
 10470 ;;		None
 10471 ;; Return value:  Size  Location     Type
 10472 ;;                  1    wreg      void 
 10473 ;; Registers used:
 10474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10475 ;; Tracked objects:
 10476 ;;		On entry : 0/0
 10477 ;;		On exit  : 0/0
 10478 ;;		Unchanged: 0/0
 10479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;Total ram usage:        0 bytes
 10485 ;; Hardware stack levels used:    1
 10486 ;; Hardware stack levels required when called:    4
 10487 ;; This function calls:
 10488 ;;		Absolute function
 10489 ;;		_PIN_MANAGER_IOC
 10490 ;;		_i2c_ISR
 10491 ;;		_i2c_busCollisionISR
 10492 ;; This function is called by:
 10493 ;;		Interrupt level 1
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497  0004                     _INTERRUPT_InterruptManager:	
 10498                           
 10499                           ;incstack = 0
 10500  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10501                           
 10502                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10503  0005  3180               	pagesel	$
 10504                           
 10505                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 10506  0006  0021               	movlb	1	; select bank1
 10507  0007  1E10               	btfss	16,4	;volatile
 10508  0008  2810               	goto	i1l245
 10509  0009  0020               	movlb	0	; select bank0
 10510  000A  1E10               	btfss	16,4	;volatile
 10511  000B  2810               	goto	i1l245
 10512                           
 10513                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 10514  000C  318A  22E4  3180   	fcall	_PIN_MANAGER_IOC
 10515                           
 10516                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 10517  000F  2829               	goto	i1l253
 10518  0010                     i1l245:	
 10519                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 10520                           
 10521  0010  1F0B               	btfss	11,6	;volatile
 10522  0011  2829               	goto	i1l253
 10523                           
 10524                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 10525  0012  0021               	movlb	1	; select bank1
 10526  0013  1D11               	btfss	17,2	;volatile
 10527  0014  281E               	goto	i1l248
 10528  0015  0020               	movlb	0	; select bank0
 10529  0016  1D11               	btfss	17,2	;volatile
 10530  0017  281E               	goto	i1l248
 10531                           
 10532                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 10533  0018  0879               	movf	_i2c1_driver_busCollisionISR+1,w
 10534  0019  008A               	movwf	10
 10535  001A  0878               	movf	_i2c1_driver_busCollisionISR,w
 10536  001B  000A               	callw
 10537  001C  3180               	pagesel	$
 10538                           
 10539                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 10540  001D  2829               	goto	i1l253
 10541  001E                     i1l248:	
 10542                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 10543                           
 10544  001E  0021               	movlb	1	; select bank1
 10545  001F  1D91               	btfss	17,3	;volatile
 10546  0020  2829               	goto	i1l253
 10547  0021  0020               	movlb	0	; select bank0
 10548  0022  1D91               	btfss	17,3	;volatile
 10549  0023  2829               	goto	i1l253
 10550                           
 10551                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 10552  0024  0877               	movf	_i2c1_driver_i2cISR+1,w
 10553  0025  008A               	movwf	10
 10554  0026  0876               	movf	_i2c1_driver_i2cISR,w
 10555  0027  000A               	callw
 10556  0028  3180               	pagesel	$
 10557  0029                     i1l253:	
 10558                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 10559                           
 10560                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 10561                           
 10562  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10563  002A  0009               	retfie
 10564  002B                     __end_of_INTERRUPT_InterruptManager:	
 10565                           
 10566                           	psect	text55
 10567  0A8C                     __ptext55:	
 10568 ;; *************** function _i2c_busCollisionISR *****************
 10569 ;; Defined at:
 10570 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		status,2, status,0, pclath, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;Total ram usage:        0 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    1
 10591 ;; This function calls:
 10592 ;;		_i2c1_driver_clearBusCollision
 10593 ;; This function is called by:
 10594 ;;		_i2c_open
 10595 ;;		_INTERRUPT_InterruptManager
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           
 10600                           ;psect for function _i2c_busCollisionISR
 10601  0A8C                     _i2c_busCollisionISR:	
 10602                           
 10603                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 10604                           
 10605                           ;incstack = 0
 10606                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 10607  0A8C  318A  2289         	fcall	_i2c1_driver_clearBusCollision
 10608  0A8E  0008               	return
 10609  0A8F                     __end_of_i2c_busCollisionISR:	
 10610                           
 10611                           	psect	text56
 10612  0A89                     __ptext56:	
 10613 ;; *************** function _i2c1_driver_clearBusCollision *****************
 10614 ;; Defined at:
 10615 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      void 
 10622 ;; Registers used:
 10623 ;;		None
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_i2c_busCollisionISR
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _i2c1_driver_clearBusCollision
 10644  0A89                     _i2c1_driver_clearBusCollision:	
 10645                           
 10646                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in _i2c1_driver_clearBusCollision: []
 10650  0A89  0020               	movlb	0	; select bank0
 10651  0A8A  1111               	bcf	17,2	;volatile
 10652  0A8B  0008               	return
 10653  0A8C                     __end_of_i2c1_driver_clearBusCollision:	
 10654                           
 10655                           	psect	text57
 10656  0C8C                     __ptext57:	
 10657 ;; *************** function _i2c_ISR *****************
 10658 ;; Defined at:
 10659 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;		None
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;		None
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  1    wreg      void 
 10666 ;; Registers used:
 10667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        3 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    3
 10680 ;; This function calls:
 10681 ;;		_do_I2C_DO_ACK
 10682 ;;		_do_I2C_DO_ADDRESS_NACK
 10683 ;;		_do_I2C_DO_NACK_RESTART
 10684 ;;		_do_I2C_DO_NACK_STOP
 10685 ;;		_do_I2C_IDLE
 10686 ;;		_do_I2C_RCEN
 10687 ;;		_do_I2C_RESET
 10688 ;;		_do_I2C_RX
 10689 ;;		_do_I2C_SEND_ADR_READ
 10690 ;;		_do_I2C_SEND_ADR_WRITE
 10691 ;;		_do_I2C_SEND_RESTART
 10692 ;;		_do_I2C_SEND_RESTART_READ
 10693 ;;		_do_I2C_SEND_RESTART_WRITE
 10694 ;;		_do_I2C_SEND_STOP
 10695 ;;		_do_I2C_TX
 10696 ;;		_do_I2C_TX_EMPTY
 10697 ;;		_i2c1_driver_isNACK
 10698 ;;		_mssp1_clearIRQ
 10699 ;; This function is called by:
 10700 ;;		_i2c_open
 10701 ;;		_i2c_poller
 10702 ;;		_INTERRUPT_InterruptManager
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           
 10707                           ;psect for function _i2c_ISR
 10708  0C8C                     _i2c_ISR:	
 10709                           
 10710                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 10711                           
 10712                           ;incstack = 0
 10713                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10714  0C8C  318A  2286  318C   	fcall	_mssp1_clearIRQ
 10715                           
 10716                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 10717  0C8F  0023               	movlb	3	; select bank3
 10718  0C90  1DA0               	btfss	_i2c_status^(0+384),3
 10719  0C91  2C9C               	goto	i1l4467
 10720  0C92  318B  231D  318C   	fcall	_i2c1_driver_isNACK
 10721  0C95  1C03               	btfss	3,0
 10722  0C96  2C9C               	goto	i1l4467
 10723                           
 10724                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 10725  0C97  300F               	movlw	15
 10726  0C98  00F3               	movwf	??_i2c_ISR
 10727  0C99  0873               	movf	??_i2c_ISR,w
 10728  0C9A  0023               	movlb	3	; select bank3
 10729  0C9B  00A9               	movwf	(_i2c_status^(0+384)+9)
 10730  0C9C                     i1l4467:	
 10731                           
 10732                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 10733  0C9C  0023               	movlb	3	; select bank3
 10734  0C9D  0829               	movf	(_i2c_status^(0+384)+9),w
 10735  0C9E  00F3               	movwf	??_i2c_ISR
 10736  0C9F  01F4               	clrf	??_i2c_ISR+1
 10737  0CA0  35F3               	lslf	??_i2c_ISR,f
 10738  0CA1  0DF4               	rlf	??_i2c_ISR+1,f
 10739  0CA2  3000               	movlw	low (_fsmStateTable| (0+32768))
 10740  0CA3  0773               	addwf	??_i2c_ISR,w
 10741  0CA4  0084               	movwf	4
 10742  0CA5  3090               	movlw	high (_fsmStateTable| (0+32768))
 10743  0CA6  3D74               	addwfc	??_i2c_ISR+1,w
 10744  0CA7  0085               	movwf	5
 10745  0CA8  3F01               	moviw [1]fsr0
 10746  0CA9  008A               	movwf	10
 10747  0CAA  3F00               	moviw [0]fsr0
 10748  0CAB  000A               	callw
 10749  0CAC  318C               	pagesel	$
 10750  0CAD  00F5               	movwf	??_i2c_ISR+2
 10751  0CAE  0875               	movf	??_i2c_ISR+2,w
 10752  0CAF  0023               	movlb	3	; select bank3
 10753  0CB0  00A9               	movwf	(_i2c_status^(0+384)+9)
 10754  0CB1  0008               	return
 10755  0CB2                     __end_of_i2c_ISR:	
 10756                           
 10757                           	psect	text58
 10758  0A86                     __ptext58:	
 10759 ;; *************** function _mssp1_clearIRQ *****************
 10760 ;; Defined at:
 10761 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      void 
 10768 ;; Registers used:
 10769 ;;		None
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        0 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_i2c_ISR
 10785 ;;		_i2c_open
 10786 ;;		_i2c_close
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           
 10791                           ;psect for function _mssp1_clearIRQ
 10792  0A86                     _mssp1_clearIRQ:	
 10793                           
 10794                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 10795                           
 10796                           ;incstack = 0
 10797                           ; Regs used in _mssp1_clearIRQ: []
 10798  0A86  0020               	movlb	0	; select bank0
 10799  0A87  1191               	bcf	17,3	;volatile
 10800  0A88  0008               	return
 10801  0A89                     __end_of_mssp1_clearIRQ:	
 10802                           
 10803                           	psect	text59
 10804  0F70                     __ptext59:	
 10805 ;; *************** function _do_I2C_RX *****************
 10806 ;; Defined at:
 10807 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 10808 ;; Parameters:    Size  Location     Type
 10809 ;;		None
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;		None
 10812 ;; Return value:  Size  Location     Type
 10813 ;;                  1    wreg      enum E7120
 10814 ;; Registers used:
 10815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : 0/0
 10818 ;;		On exit  : 0/0
 10819 ;;		Unchanged: 0/0
 10820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;Total ram usage:        3 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    2
 10828 ;; This function calls:
 10829 ;;		_do_I2C_DO_NACK_RESTART
 10830 ;;		_do_I2C_DO_NACK_STOP
 10831 ;;		_i2c1_driver_sendACK
 10832 ;;		_returnReset
 10833 ;;		_returnStop
 10834 ;;		i1_i2c1_driver_getRXData
 10835 ;; This function is called by:
 10836 ;;		_i2c_ISR
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function _do_I2C_RX
 10842  0F70                     _do_I2C_RX:	
 10843                           
 10844                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 10845                           
 10846                           ;incstack = 0
 10847                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10848  0F70  318A  2280  318F   	fcall	i1_i2c1_driver_getRXData
 10849  0F73  00F0               	movwf	??_do_I2C_RX
 10850  0F74  0023               	movlb	3	; select bank3
 10851  0F75  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 10852  0F76  0086               	movwf	6
 10853  0F77  0187               	clrf	7
 10854  0F78  0870               	movf	??_do_I2C_RX,w
 10855  0F79  0081               	movwf	1
 10856  0F7A  3001               	movlw	1
 10857  0F7B  00F0               	movwf	??_do_I2C_RX
 10858  0F7C  0870               	movf	??_do_I2C_RX,w
 10859  0F7D  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 10860                           
 10861                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 10862  0F7E  3001               	movlw	1
 10863  0F7F  02A3               	subwf	(_i2c_status^(0+384)+3),f
 10864  0F80  3000               	movlw	0
 10865  0F81  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 10866  0F82  0823               	movf	(_i2c_status^(0+384)+3),w
 10867  0F83  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 10868  0F84  1903               	btfsc	3,2
 10869  0F85  2F8A               	goto	i1l173
 10870                           
 10871                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 10872  0F86  318A  22AE         	fcall	_i2c1_driver_sendACK
 10873                           
 10874                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 10875  0F88  3005               	movlw	5
 10876  0F89  0008               	return
 10877  0F8A                     i1l173:	
 10878                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 10879                           
 10880                           
 10881                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 10882  0F8A  1520               	bsf	_i2c_status^(0+384),2
 10883                           
 10884                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 10885  0F8B  2F92               	goto	i1l4051
 10886  0F8C                     i1l4041:	
 10887                           
 10888                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 10889  0F8C  318A  22CE         	fcall	_do_I2C_DO_NACK_RESTART
 10890  0F8E  0008               	return
 10891  0F8F                     i1l4045:	
 10892                           
 10893                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 10894  0F8F  318A  22CA         	fcall	_do_I2C_DO_NACK_STOP
 10895  0F91  0008               	return
 10896  0F92                     i1l4051:	
 10897  0F92  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 10898  0F93  00F0               	movwf	??_do_I2C_RX
 10899  0F94  0870               	movf	??_do_I2C_RX,w
 10900  0F95  00F0               	movwf	returnReset@p
 10901  0F96  300B               	movlw	11
 10902  0F97  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 10903  0F98  0086               	movwf	6
 10904  0F99  3001               	movlw	1	; select bank3/4
 10905  0F9A  0087               	movwf	7
 10906  0F9B  3F41               	moviw [1]fsr1
 10907  0F9C  008A               	movwf	10
 10908  0F9D  3F40               	moviw [0]fsr1
 10909  0F9E  000A               	callw
 10910  0F9F  318F               	pagesel	$
 10911  0FA0  00F1               	movwf	??_do_I2C_RX+1
 10912  0FA1  01F2               	clrf	??_do_I2C_RX+2
 10913                           
 10914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10915                           ; Switch size 1, requested type "simple"
 10916                           ; Number of cases is 1, Range of values is 0 to 0
 10917                           ; switch strategies available:
 10918                           ; Name         Instructions Cycles
 10919                           ; simple_byte            4     3 (average)
 10920                           ; direct_byte            8     6 (fixed)
 10921                           ; jumptable            260     6 (fixed)
 10922                           ;	Chosen strategy is simple_byte
 10923  0FA2  0872               	movf	??_do_I2C_RX+2,w
 10924  0FA3  3A00               	xorlw	0	; case 0
 10925  0FA4  1903               	skipnz
 10926  0FA5  2FA7               	goto	i1l6333
 10927  0FA6  2F8F               	goto	i1l4045
 10928  0FA7                     i1l6333:	
 10929                           
 10930                           ; Switch size 1, requested type "simple"
 10931                           ; Number of cases is 4, Range of values is 1 to 4
 10932                           ; switch strategies available:
 10933                           ; Name         Instructions Cycles
 10934                           ; simple_byte           13     7 (average)
 10935                           ; direct_byte           17     9 (fixed)
 10936                           ; jumptable            263     9 (fixed)
 10937                           ;	Chosen strategy is simple_byte
 10938  0FA7  0871               	movf	??_do_I2C_RX+1,w
 10939  0FA8  3A01               	xorlw	1	; case 1
 10940  0FA9  1903               	skipnz
 10941  0FAA  2F8F               	goto	i1l4045
 10942  0FAB  3A03               	xorlw	3	; case 2
 10943  0FAC  1903               	skipnz
 10944  0FAD  2F8C               	goto	i1l4041
 10945  0FAE  3A01               	xorlw	1	; case 3
 10946  0FAF  1903               	skipnz
 10947  0FB0  2F8C               	goto	i1l4041
 10948  0FB1  3A07               	xorlw	7	; case 4
 10949  0FB2  1903               	skipnz
 10950  0FB3  2F8F               	goto	i1l4045
 10951  0FB4  2F8F               	goto	i1l4045
 10952  0FB5  0008               	return
 10953  0FB6                     __end_of_do_I2C_RX:	
 10954                           
 10955                           	psect	text60
 10956  07B1                     __ptext60:	
 10957 ;; *************** function _do_I2C_TX *****************
 10958 ;; Defined at:
 10959 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;		None
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      enum E7120
 10966 ;; Registers used:
 10967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;Total ram usage:        3 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    2
 10980 ;; This function calls:
 10981 ;;		_do_I2C_SEND_RESTART_READ
 10982 ;;		_do_I2C_SEND_RESTART_WRITE
 10983 ;;		_do_I2C_SEND_STOP
 10984 ;;		_i2c1_driver_isNACK
 10985 ;;		_returnReset
 10986 ;;		_returnStop
 10987 ;;		i1_i2c1_driver_TXData
 10988 ;; This function is called by:
 10989 ;;		_i2c_ISR
 10990 ;; This function uses a non-reentrant model
 10991 ;;
 10992                           
 10993                           
 10994                           ;psect for function _do_I2C_TX
 10995  07B1                     _do_I2C_TX:	
 10996                           
 10997                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11001  07B1  318B  231D  3187   	fcall	_i2c1_driver_isNACK
 11002  07B4  1803               	btfsc	3,0
 11003  07B5  2FC0               	goto	i1l4011
 11004  07B6  2FE4               	goto	i1l157
 11005  07B7                     i1l3997:	
 11006                           
 11007                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 11008  07B7  318A  22B6         	fcall	_do_I2C_SEND_RESTART_READ
 11009  07B9  0008               	return
 11010  07BA                     i1l4001:	
 11011                           
 11012                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 11013  07BA  318A  22BA         	fcall	_do_I2C_SEND_RESTART_WRITE
 11014  07BC  0008               	return
 11015  07BD                     i1l4005:	
 11016                           
 11017                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 11018  07BD  318A  22C2         	fcall	_do_I2C_SEND_STOP
 11019  07BF  0008               	return
 11020  07C0                     i1l4011:	
 11021  07C0  0023               	movlb	3	; select bank3
 11022  07C1  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 11023  07C2  00F0               	movwf	??_do_I2C_TX
 11024  07C3  0870               	movf	??_do_I2C_TX,w
 11025  07C4  00F0               	movwf	returnReset@p
 11026  07C5  3011               	movlw	17
 11027  07C6  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11028  07C7  0086               	movwf	6
 11029  07C8  3001               	movlw	1	; select bank3/4
 11030  07C9  0087               	movwf	7
 11031  07CA  3F41               	moviw [1]fsr1
 11032  07CB  008A               	movwf	10
 11033  07CC  3F40               	moviw [0]fsr1
 11034  07CD  000A               	callw
 11035  07CE  3187               	pagesel	$
 11036  07CF  00F1               	movwf	??_do_I2C_TX+1
 11037  07D0  01F2               	clrf	??_do_I2C_TX+2
 11038                           
 11039                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11040                           ; Switch size 1, requested type "simple"
 11041                           ; Number of cases is 1, Range of values is 0 to 0
 11042                           ; switch strategies available:
 11043                           ; Name         Instructions Cycles
 11044                           ; simple_byte            4     3 (average)
 11045                           ; direct_byte            8     6 (fixed)
 11046                           ; jumptable            260     6 (fixed)
 11047                           ;	Chosen strategy is simple_byte
 11048  07D1  0872               	movf	??_do_I2C_TX+2,w
 11049  07D2  3A00               	xorlw	0	; case 0
 11050  07D3  1903               	skipnz
 11051  07D4  2FD6               	goto	i1l6335
 11052  07D5  2FBD               	goto	i1l4005
 11053  07D6                     i1l6335:	
 11054                           
 11055                           ; Switch size 1, requested type "simple"
 11056                           ; Number of cases is 4, Range of values is 1 to 4
 11057                           ; switch strategies available:
 11058                           ; Name         Instructions Cycles
 11059                           ; simple_byte           13     7 (average)
 11060                           ; direct_byte           17     9 (fixed)
 11061                           ; jumptable            263     9 (fixed)
 11062                           ;	Chosen strategy is simple_byte
 11063  07D6  0871               	movf	??_do_I2C_TX+1,w
 11064  07D7  3A01               	xorlw	1	; case 1
 11065  07D8  1903               	skipnz
 11066  07D9  2FBD               	goto	i1l4005
 11067  07DA  3A03               	xorlw	3	; case 2
 11068  07DB  1903               	skipnz
 11069  07DC  2FB7               	goto	i1l3997
 11070  07DD  3A01               	xorlw	1	; case 3
 11071  07DE  1903               	skipnz
 11072  07DF  2FBA               	goto	i1l4001
 11073  07E0  3A07               	xorlw	7	; case 4
 11074  07E1  1903               	skipnz
 11075  07E2  2FBD               	goto	i1l4005
 11076  07E3  2FBD               	goto	i1l4005
 11077  07E4                     i1l157:	
 11078                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 11079                           
 11080                           
 11081                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 11082  07E4  0023               	movlb	3	; select bank3
 11083  07E5  11A0               	bcf	_i2c_status^(0+384),3
 11084                           
 11085                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 11086  07E6  3002               	movlw	2
 11087  07E7  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11088  07E8  0086               	movwf	6
 11089  07E9  3001               	movlw	1	; select bank3/4
 11090  07EA  0087               	movwf	7
 11091  07EB  3F40               	moviw [0]fsr1
 11092  07EC  0084               	movwf	4
 11093  07ED  0185               	clrf	5
 11094  07EE  0A81               	incf	1,f
 11095  07EF  0800               	movf	0,w
 11096  07F0  318A  22DA  3187   	fcall	i1_i2c1_driver_TXData
 11097                           
 11098                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 11099  07F3  3001               	movlw	1
 11100  07F4  0023               	movlb	3	; select bank3
 11101  07F5  02A3               	subwf	(_i2c_status^(0+384)+3),f
 11102  07F6  3000               	movlw	0
 11103  07F7  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 11104  07F8  0823               	movf	(_i2c_status^(0+384)+3),w
 11105  07F9  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 11106  07FA  1D03               	btfss	3,2
 11107  07FB  2FFE               	goto	i1l4019
 11108  07FC  3006               	movlw	6
 11109  07FD  0008               	return
 11110  07FE                     i1l4019:	
 11111  07FE  3003               	movlw	3
 11112  07FF  0008               	return
 11113  0800                     __end_of_do_I2C_TX:	
 11114                           
 11115                           	psect	text61
 11116  0DA0                     __ptext61:	
 11117 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 11118 ;; Defined at:
 11119 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      enum E7120
 11126 ;; Registers used:
 11127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11135 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;Total ram usage:        3 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    2
 11140 ;; This function calls:
 11141 ;;		_do_I2C_SEND_RESTART
 11142 ;;		_do_I2C_SEND_STOP
 11143 ;;		_returnReset
 11144 ;;		_returnStop
 11145 ;; This function is called by:
 11146 ;;		_i2c_ISR
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           
 11151                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 11152  0DA0                     _do_I2C_DO_ADDRESS_NACK:	
 11153                           
 11154                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 11155                           
 11156                           ;incstack = 0
 11157                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11158  0DA0  0023               	movlb	3	; select bank3
 11159  0DA1  11A0               	bcf	_i2c_status^(0+384),3
 11160                           
 11161                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 11162  0DA2  3002               	movlw	2
 11163  0DA3  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 11164  0DA4  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 11165  0DA5  00AA               	movwf	(_i2c_status^(0+384)+10)
 11166                           
 11167                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 11168  0DA6  2DAD               	goto	i1l3985
 11169  0DA7                     i1l3975:	
 11170                           
 11171                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 11172  0DA7  318A  22BE         	fcall	_do_I2C_SEND_RESTART
 11173  0DA9  0008               	return
 11174  0DAA                     i1l3979:	
 11175                           
 11176                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 11177  0DAA  318A  22C2         	fcall	_do_I2C_SEND_STOP
 11178  0DAC  0008               	return
 11179  0DAD                     i1l3985:	
 11180  0DAD  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 11181  0DAE  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 11182  0DAF  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 11183  0DB0  00F0               	movwf	returnReset@p
 11184  0DB1  300F               	movlw	15
 11185  0DB2  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11186  0DB3  0086               	movwf	6
 11187  0DB4  3001               	movlw	1	; select bank3/4
 11188  0DB5  0087               	movwf	7
 11189  0DB6  3F41               	moviw [1]fsr1
 11190  0DB7  008A               	movwf	10
 11191  0DB8  3F40               	moviw [0]fsr1
 11192  0DB9  000A               	callw
 11193  0DBA  318D               	pagesel	$
 11194  0DBB  00F1               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 11195  0DBC  01F2               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 11196                           
 11197                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11198                           ; Switch size 1, requested type "simple"
 11199                           ; Number of cases is 1, Range of values is 0 to 0
 11200                           ; switch strategies available:
 11201                           ; Name         Instructions Cycles
 11202                           ; simple_byte            4     3 (average)
 11203                           ; direct_byte            8     6 (fixed)
 11204                           ; jumptable            260     6 (fixed)
 11205                           ;	Chosen strategy is simple_byte
 11206  0DBD  0872               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 11207  0DBE  3A00               	xorlw	0	; case 0
 11208  0DBF  1903               	skipnz
 11209  0DC0  2DC2               	goto	i1l6337
 11210  0DC1  2DAA               	goto	i1l3979
 11211  0DC2                     i1l6337:	
 11212                           
 11213                           ; Switch size 1, requested type "simple"
 11214                           ; Number of cases is 2, Range of values is 2 to 3
 11215                           ; switch strategies available:
 11216                           ; Name         Instructions Cycles
 11217                           ; simple_byte            7     4 (average)
 11218                           ; direct_byte           13     9 (fixed)
 11219                           ; jumptable            263     9 (fixed)
 11220                           ;	Chosen strategy is simple_byte
 11221  0DC2  0871               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 11222  0DC3  3A02               	xorlw	2	; case 2
 11223  0DC4  1903               	skipnz
 11224  0DC5  2DA7               	goto	i1l3975
 11225  0DC6  3A01               	xorlw	1	; case 3
 11226  0DC7  1903               	skipnz
 11227  0DC8  2DA7               	goto	i1l3975
 11228  0DC9  2DAA               	goto	i1l3979
 11229  0DCA  0008               	return
 11230  0DCB                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 11231                           
 11232                           	psect	text62
 11233  0ACE                     __ptext62:	
 11234 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 11235 ;; Defined at:
 11236 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;		None
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;		None
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      enum E7120
 11243 ;; Registers used:
 11244 ;;		wreg, status,2, status,0, pclath, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;Total ram usage:        0 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    1
 11257 ;; This function calls:
 11258 ;;		i1_i2c1_driver_sendNACK
 11259 ;; This function is called by:
 11260 ;;		_do_I2C_RX
 11261 ;;		_i2c_ISR
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           
 11266                           ;psect for function _do_I2C_DO_NACK_RESTART
 11267  0ACE                     _do_I2C_DO_NACK_RESTART:	
 11268                           
 11269                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 11270                           
 11271                           ;incstack = 0
 11272                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11273  0ACE  318A  22B2         	fcall	i1_i2c1_driver_sendNACK
 11274                           
 11275                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 11276  0AD0  3009               	movlw	9
 11277  0AD1  0008               	return
 11278  0AD2                     __end_of_do_I2C_DO_NACK_RESTART:	
 11279                           
 11280                           	psect	text63
 11281  0ACA                     __ptext63:	
 11282 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 11283 ;; Defined at:
 11284 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;		None
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;		None
 11289 ;; Return value:  Size  Location     Type
 11290 ;;                  1    wreg      enum E7120
 11291 ;; Registers used:
 11292 ;;		wreg, status,2, status,0, pclath, cstack
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;Total ram usage:        0 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    1
 11305 ;; This function calls:
 11306 ;;		i1_i2c1_driver_sendNACK
 11307 ;; This function is called by:
 11308 ;;		_do_I2C_RX
 11309 ;;		_i2c_ISR
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           
 11314                           ;psect for function _do_I2C_DO_NACK_STOP
 11315  0ACA                     _do_I2C_DO_NACK_STOP:	
 11316                           
 11317                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 11318                           
 11319                           ;incstack = 0
 11320                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11321  0ACA  318A  22B2         	fcall	i1_i2c1_driver_sendNACK
 11322                           
 11323                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 11324  0ACC  300A               	movlw	10
 11325  0ACD  0008               	return
 11326  0ACE                     __end_of_do_I2C_DO_NACK_STOP:	
 11327                           
 11328                           	psect	text64
 11329  0AC6                     __ptext64:	
 11330 ;; *************** function _do_I2C_DO_ACK *****************
 11331 ;; Defined at:
 11332 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;		None
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;		None
 11337 ;; Return value:  Size  Location     Type
 11338 ;;                  1    wreg      enum E7120
 11339 ;; Registers used:
 11340 ;;		wreg, status,2, status,0, pclath, cstack
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : 0/0
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;Total ram usage:        0 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    1
 11353 ;; This function calls:
 11354 ;;		_i2c1_driver_sendACK
 11355 ;; This function is called by:
 11356 ;;		_i2c_ISR
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360                           
 11361                           ;psect for function _do_I2C_DO_ACK
 11362  0AC6                     _do_I2C_DO_ACK:	
 11363                           
 11364                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 11365                           
 11366                           ;incstack = 0
 11367                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 11368  0AC6  318A  22AE         	fcall	_i2c1_driver_sendACK
 11369                           
 11370                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 11371  0AC8  3005               	movlw	5
 11372  0AC9  0008               	return
 11373  0ACA                     __end_of_do_I2C_DO_ACK:	
 11374                           
 11375                           	psect	text65
 11376  0AEA                     __ptext65:	
 11377 ;; *************** function _do_I2C_RCEN *****************
 11378 ;; Defined at:
 11379 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;		None
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;		None
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  1    wreg      enum E7120
 11386 ;; Registers used:
 11387 ;;		wreg, status,2, status,0, pclath, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11397 ;;Total ram usage:        0 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:    1
 11400 ;; This function calls:
 11401 ;;		i1_i2c1_driver_startRX
 11402 ;; This function is called by:
 11403 ;;		_i2c_ISR
 11404 ;; This function uses a non-reentrant model
 11405 ;;
 11406                           
 11407                           
 11408                           ;psect for function _do_I2C_RCEN
 11409  0AEA                     _do_I2C_RCEN:	
 11410                           
 11411                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 11415  0AEA  0023               	movlb	3	; select bank3
 11416  0AEB  11A0               	bcf	_i2c_status^(0+384),3
 11417                           
 11418                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 11419  0AEC  318A  227D         	fcall	i1_i2c1_driver_startRX
 11420                           
 11421                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 11422  0AEE  3004               	movlw	4
 11423  0AEF  0008               	return
 11424  0AF0                     __end_of_do_I2C_RCEN:	
 11425                           
 11426                           	psect	text66
 11427  0B0F                     __ptext66:	
 11428 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 11429 ;; Defined at:
 11430 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 11431 ;; Parameters:    Size  Location     Type
 11432 ;;		None
 11433 ;; Auto vars:     Size  Location     Type
 11434 ;;		None
 11435 ;; Return value:  Size  Location     Type
 11436 ;;                  1    wreg      enum E7120
 11437 ;; Registers used:
 11438 ;;		wreg, status,2, status,0, pclath, cstack
 11439 ;; Tracked objects:
 11440 ;;		On entry : 0/0
 11441 ;;		On exit  : 0/0
 11442 ;;		Unchanged: 0/0
 11443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;Total ram usage:        0 bytes
 11449 ;; Hardware stack levels used:    1
 11450 ;; Hardware stack levels required when called:    1
 11451 ;; This function calls:
 11452 ;;		i1_i2c1_driver_TXData
 11453 ;; This function is called by:
 11454 ;;		_i2c_ISR
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _do_I2C_SEND_ADR_WRITE
 11460  0B0F                     _do_I2C_SEND_ADR_WRITE:	
 11461                           
 11462                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11466  0B0F  0023               	movlb	3	; select bank3
 11467  0B10  15A0               	bsf	_i2c_status^(0+384),3
 11468                           
 11469                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 11470  0B11  3521               	lslf	(_i2c_status^(0+384)+1),w
 11471  0B12  318A  22DA         	fcall	i1_i2c1_driver_TXData
 11472                           
 11473                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 11474  0B14  3003               	movlw	3
 11475  0B15  0008               	return
 11476  0B16                     __end_of_do_I2C_SEND_ADR_WRITE:	
 11477                           
 11478                           	psect	text67
 11479  0B25                     __ptext67:	
 11480 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 11481 ;; Defined at:
 11482 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 11483 ;; Parameters:    Size  Location     Type
 11484 ;;		None
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;		None
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      enum E7120
 11489 ;; Registers used:
 11490 ;;		wreg, status,2, status,0, pclath, cstack
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;Total ram usage:        0 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; Hardware stack levels required when called:    1
 11503 ;; This function calls:
 11504 ;;		i1_i2c1_driver_TXData
 11505 ;; This function is called by:
 11506 ;;		_i2c_ISR
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           
 11511                           ;psect for function _do_I2C_SEND_ADR_READ
 11512  0B25                     _do_I2C_SEND_ADR_READ:	
 11513                           
 11514                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 11518  0B25  0023               	movlb	3	; select bank3
 11519  0B26  15A0               	bsf	_i2c_status^(0+384),3
 11520                           
 11521                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 11522  0B27  1403               	setc
 11523  0B28  0D21               	rlf	(_i2c_status^(0+384)+1),w
 11524  0B29  318A  22DA         	fcall	i1_i2c1_driver_TXData
 11525                           
 11526                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 11527  0B2B  3005               	movlw	5
 11528  0B2C  0008               	return
 11529  0B2D                     __end_of_do_I2C_SEND_ADR_READ:	
 11530                           
 11531                           	psect	text68
 11532  0AC2                     __ptext68:	
 11533 ;; *************** function _do_I2C_SEND_STOP *****************
 11534 ;; Defined at:
 11535 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 11536 ;; Parameters:    Size  Location     Type
 11537 ;;		None
 11538 ;; Auto vars:     Size  Location     Type
 11539 ;;		None
 11540 ;; Return value:  Size  Location     Type
 11541 ;;                  1    wreg      enum E7120
 11542 ;; Registers used:
 11543 ;;		wreg, status,2, status,0, pclath, cstack
 11544 ;; Tracked objects:
 11545 ;;		On entry : 0/0
 11546 ;;		On exit  : 0/0
 11547 ;;		Unchanged: 0/0
 11548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;Total ram usage:        0 bytes
 11554 ;; Hardware stack levels used:    1
 11555 ;; Hardware stack levels required when called:    1
 11556 ;; This function calls:
 11557 ;;		i1_i2c1_driver_stop
 11558 ;; This function is called by:
 11559 ;;		_do_I2C_DO_ADDRESS_NACK
 11560 ;;		_do_I2C_TX
 11561 ;;		_do_I2C_TX_EMPTY
 11562 ;;		_i2c_ISR
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           
 11567                           ;psect for function _do_I2C_SEND_STOP
 11568  0AC2                     _do_I2C_SEND_STOP:	
 11569                           
 11570                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 11571                           
 11572                           ;incstack = 0
 11573                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11574  0AC2  318A  227A         	fcall	i1_i2c1_driver_stop
 11575                           
 11576                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 11577  0AC4  3000               	movlw	0
 11578  0AC5  0008               	return
 11579  0AC6                     __end_of_do_I2C_SEND_STOP:	
 11580                           
 11581                           	psect	text69
 11582  0ABE                     __ptext69:	
 11583 ;; *************** function _do_I2C_SEND_RESTART *****************
 11584 ;; Defined at:
 11585 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;		None
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;		None
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      enum E7120
 11592 ;; Registers used:
 11593 ;;		wreg, status,2, status,0, pclath, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;Total ram usage:        0 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:    1
 11606 ;; This function calls:
 11607 ;;		i1_i2c1_driver_restart
 11608 ;; This function is called by:
 11609 ;;		_do_I2C_DO_ADDRESS_NACK
 11610 ;;		_do_I2C_TX_EMPTY
 11611 ;;		_i2c_ISR
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           
 11616                           ;psect for function _do_I2C_SEND_RESTART
 11617  0ABE                     _do_I2C_SEND_RESTART:	
 11618                           
 11619                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 11620                           
 11621                           ;incstack = 0
 11622                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11623  0ABE  318A  2277         	fcall	i1_i2c1_driver_restart
 11624                           
 11625                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 11626  0AC0  3001               	movlw	1
 11627  0AC1  0008               	return
 11628  0AC2                     __end_of_do_I2C_SEND_RESTART:	
 11629                           
 11630                           	psect	text70
 11631  0ABA                     __ptext70:	
 11632 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 11633 ;; Defined at:
 11634 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;		None
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;		None
 11639 ;; Return value:  Size  Location     Type
 11640 ;;                  1    wreg      enum E7120
 11641 ;; Registers used:
 11642 ;;		wreg, status,2, status,0, pclath, cstack
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;Total ram usage:        0 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    1
 11655 ;; This function calls:
 11656 ;;		i1_i2c1_driver_restart
 11657 ;; This function is called by:
 11658 ;;		_do_I2C_TX
 11659 ;;		_i2c_ISR
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           
 11664                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 11665  0ABA                     _do_I2C_SEND_RESTART_WRITE:	
 11666                           
 11667                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 11668                           
 11669                           ;incstack = 0
 11670                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11671  0ABA  318A  2277         	fcall	i1_i2c1_driver_restart
 11672                           
 11673                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 11674  0ABC  3002               	movlw	2
 11675  0ABD  0008               	return
 11676  0ABE                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 11677                           
 11678                           	psect	text71
 11679  0AB6                     __ptext71:	
 11680 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 11681 ;; Defined at:
 11682 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;		None
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;		None
 11687 ;; Return value:  Size  Location     Type
 11688 ;;                  1    wreg      enum E7120
 11689 ;; Registers used:
 11690 ;;		wreg, status,2, status,0, pclath, cstack
 11691 ;; Tracked objects:
 11692 ;;		On entry : 0/0
 11693 ;;		On exit  : 0/0
 11694 ;;		Unchanged: 0/0
 11695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;Total ram usage:        0 bytes
 11701 ;; Hardware stack levels used:    1
 11702 ;; Hardware stack levels required when called:    1
 11703 ;; This function calls:
 11704 ;;		i1_i2c1_driver_restart
 11705 ;; This function is called by:
 11706 ;;		_do_I2C_TX
 11707 ;;		_i2c_ISR
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711                           
 11712                           ;psect for function _do_I2C_SEND_RESTART_READ
 11713  0AB6                     _do_I2C_SEND_RESTART_READ:	
 11714                           
 11715                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 11716                           
 11717                           ;incstack = 0
 11718                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11719  0AB6  318A  2277         	fcall	i1_i2c1_driver_restart
 11720                           
 11721                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 11722  0AB8  3001               	movlw	1
 11723  0AB9  0008               	return
 11724  0ABA                     __end_of_do_I2C_SEND_RESTART_READ:	
 11725                           
 11726                           	psect	text72
 11727  0ADF                     __ptext72:	
 11728 ;; *************** function _do_I2C_IDLE *****************
 11729 ;; Defined at:
 11730 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;		None
 11733 ;; Auto vars:     Size  Location     Type
 11734 ;;		None
 11735 ;; Return value:  Size  Location     Type
 11736 ;;                  1    wreg      enum E7120
 11737 ;; Registers used:
 11738 ;;		wreg, status,2
 11739 ;; Tracked objects:
 11740 ;;		On entry : 0/0
 11741 ;;		On exit  : 0/0
 11742 ;;		Unchanged: 0/0
 11743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;Total ram usage:        0 bytes
 11749 ;; Hardware stack levels used:    1
 11750 ;; This function calls:
 11751 ;;		Nothing
 11752 ;; This function is called by:
 11753 ;;		_i2c_ISR
 11754 ;; This function uses a non-reentrant model
 11755 ;;
 11756                           
 11757                           
 11758                           ;psect for function _do_I2C_IDLE
 11759  0ADF                     _do_I2C_IDLE:	
 11760                           
 11761                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 11762                           
 11763                           ;incstack = 0
 11764                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 11765  0ADF  0023               	movlb	3	; select bank3
 11766  0AE0  1020               	bcf	_i2c_status^(0+384),0
 11767                           
 11768                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 11769  0AE1  01AA               	clrf	(_i2c_status^(0+384)+10)
 11770                           
 11771                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 11772  0AE2  300E               	movlw	14
 11773  0AE3  0008               	return
 11774  0AE4                     __end_of_do_I2C_IDLE:	
 11775                           
 11776                           	psect	text73
 11777  0B08                     __ptext73:	
 11778 ;; *************** function _do_I2C_RESET *****************
 11779 ;; Defined at:
 11780 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;		None
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;		None
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      enum E7120
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0, pclath, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;Total ram usage:        0 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    1
 11801 ;; This function calls:
 11802 ;;		_i2c1_driver_resetBus
 11803 ;; This function is called by:
 11804 ;;		_i2c_ISR
 11805 ;; This function uses a non-reentrant model
 11806 ;;
 11807                           
 11808                           
 11809                           ;psect for function _do_I2C_RESET
 11810  0B08                     _do_I2C_RESET:	
 11811                           
 11812                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 11813                           
 11814                           ;incstack = 0
 11815                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 11816  0B08  318A  2274         	fcall	_i2c1_driver_resetBus
 11817                           
 11818                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 11819  0B0A  0023               	movlb	3	; select bank3
 11820  0B0B  1020               	bcf	_i2c_status^(0+384),0
 11821                           
 11822                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 11823  0B0C  01AA               	clrf	(_i2c_status^(0+384)+10)
 11824                           
 11825                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 11826  0B0D  300E               	movlw	14
 11827  0B0E  0008               	return
 11828  0B0F                     __end_of_do_I2C_RESET:	
 11829                           
 11830                           	psect	text74
 11831  0DF6                     __ptext74:	
 11832 ;; *************** function _do_I2C_TX_EMPTY *****************
 11833 ;; Defined at:
 11834 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;		None
 11837 ;; Auto vars:     Size  Location     Type
 11838 ;;		None
 11839 ;; Return value:  Size  Location     Type
 11840 ;;                  1    wreg      enum E7120
 11841 ;; Registers used:
 11842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11843 ;; Tracked objects:
 11844 ;;		On entry : 0/0
 11845 ;;		On exit  : 0/0
 11846 ;;		Unchanged: 0/0
 11847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;Total ram usage:        3 bytes
 11853 ;; Hardware stack levels used:    1
 11854 ;; Hardware stack levels required when called:    2
 11855 ;; This function calls:
 11856 ;;		_do_I2C_SEND_RESTART
 11857 ;;		_do_I2C_SEND_STOP
 11858 ;;		_mssp1_setIRQ
 11859 ;;		_returnReset
 11860 ;;		_returnStop
 11861 ;; This function is called by:
 11862 ;;		_i2c_ISR
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _do_I2C_TX_EMPTY
 11868  0DF6                     _do_I2C_TX_EMPTY:	
 11869                           
 11870                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 11871                           
 11872                           ;incstack = 0
 11873                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11874  0DF6  0023               	movlb	3	; select bank3
 11875  0DF7  1520               	bsf	_i2c_status^(0+384),2
 11876                           
 11877                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 11878  0DF8  2E03               	goto	i1l4077
 11879  0DF9                     i1l4061:	
 11880                           
 11881                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 11882  0DF9  318A  22BE         	fcall	_do_I2C_SEND_RESTART
 11883  0DFB  0008               	return
 11884  0DFC                     i1l4065:	
 11885                           
 11886                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 11887  0DFC  318A  2283         	fcall	_mssp1_setIRQ
 11888                           
 11889                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 11890  0DFE  3003               	movlw	3
 11891  0DFF  0008               	return
 11892  0E00                     i1l4071:	
 11893                           
 11894                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 11895  0E00  318A  22C2         	fcall	_do_I2C_SEND_STOP
 11896  0E02  0008               	return
 11897  0E03                     i1l4077:	
 11898  0E03  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 11899  0E04  00F0               	movwf	??_do_I2C_TX_EMPTY
 11900  0E05  0870               	movf	??_do_I2C_TX_EMPTY,w
 11901  0E06  00F0               	movwf	returnReset@p
 11902  0E07  300B               	movlw	11
 11903  0E08  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11904  0E09  0086               	movwf	6
 11905  0E0A  3001               	movlw	1	; select bank3/4
 11906  0E0B  0087               	movwf	7
 11907  0E0C  3F41               	moviw [1]fsr1
 11908  0E0D  008A               	movwf	10
 11909  0E0E  3F40               	moviw [0]fsr1
 11910  0E0F  000A               	callw
 11911  0E10  318D               	pagesel	$
 11912  0E11  00F1               	movwf	??_do_I2C_TX_EMPTY+1
 11913  0E12  01F2               	clrf	??_do_I2C_TX_EMPTY+2
 11914                           
 11915                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11916                           ; Switch size 1, requested type "simple"
 11917                           ; Number of cases is 1, Range of values is 0 to 0
 11918                           ; switch strategies available:
 11919                           ; Name         Instructions Cycles
 11920                           ; simple_byte            4     3 (average)
 11921                           ; direct_byte            8     6 (fixed)
 11922                           ; jumptable            260     6 (fixed)
 11923                           ;	Chosen strategy is simple_byte
 11924  0E13  0872               	movf	??_do_I2C_TX_EMPTY+2,w
 11925  0E14  3A00               	xorlw	0	; case 0
 11926  0E15  1903               	skipnz
 11927  0E16  2E18               	goto	i1l6339
 11928  0E17  2E00               	goto	i1l4071
 11929  0E18                     i1l6339:	
 11930                           
 11931                           ; Switch size 1, requested type "simple"
 11932                           ; Number of cases is 4, Range of values is 1 to 4
 11933                           ; switch strategies available:
 11934                           ; Name         Instructions Cycles
 11935                           ; simple_byte           13     7 (average)
 11936                           ; direct_byte           17     9 (fixed)
 11937                           ; jumptable            263     9 (fixed)
 11938                           ;	Chosen strategy is simple_byte
 11939  0E18  0871               	movf	??_do_I2C_TX_EMPTY+1,w
 11940  0E19  3A01               	xorlw	1	; case 1
 11941  0E1A  1903               	skipnz
 11942  0E1B  2E00               	goto	i1l4071
 11943  0E1C  3A03               	xorlw	3	; case 2
 11944  0E1D  1903               	skipnz
 11945  0E1E  2DF9               	goto	i1l4061
 11946  0E1F  3A01               	xorlw	1	; case 3
 11947  0E20  1903               	skipnz
 11948  0E21  2DF9               	goto	i1l4061
 11949  0E22  3A07               	xorlw	7	; case 4
 11950  0E23  1903               	skipnz
 11951  0E24  2DFC               	goto	i1l4065
 11952  0E25  2E00               	goto	i1l4071
 11953  0E26  0008               	return
 11954  0E27                     __end_of_do_I2C_TX_EMPTY:	
 11955                           
 11956                           	psect	text75
 11957  0A83                     __ptext75:	
 11958 ;; *************** function _mssp1_setIRQ *****************
 11959 ;; Defined at:
 11960 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 11961 ;; Parameters:    Size  Location     Type
 11962 ;;		None
 11963 ;; Auto vars:     Size  Location     Type
 11964 ;;		None
 11965 ;; Return value:  Size  Location     Type
 11966 ;;                  1    wreg      void 
 11967 ;; Registers used:
 11968 ;;		None
 11969 ;; Tracked objects:
 11970 ;;		On entry : 0/0
 11971 ;;		On exit  : 0/0
 11972 ;;		Unchanged: 0/0
 11973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;Total ram usage:        0 bytes
 11979 ;; Hardware stack levels used:    1
 11980 ;; This function calls:
 11981 ;;		Nothing
 11982 ;; This function is called by:
 11983 ;;		_do_I2C_TX_EMPTY
 11984 ;; This function uses a non-reentrant model
 11985 ;;
 11986                           
 11987                           
 11988                           ;psect for function _mssp1_setIRQ
 11989  0A83                     _mssp1_setIRQ:	
 11990                           
 11991                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 11992                           
 11993                           ;incstack = 0
 11994                           ; Regs used in _mssp1_setIRQ: []
 11995  0A83  0020               	movlb	0	; select bank0
 11996  0A84  1591               	bsf	17,3	;volatile
 11997  0A85  0008               	return
 11998  0A86                     __end_of_mssp1_setIRQ:	
 11999                           
 12000                           	psect	text76
 12001  0B1D                     __ptext76:	
 12002 ;; *************** function _i2c1_driver_isNACK *****************
 12003 ;; Defined at:
 12004 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;		None
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;		None
 12009 ;; Return value:  Size  Location     Type
 12010 ;;		None               void
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;Total ram usage:        1 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; This function calls:
 12025 ;;		Nothing
 12026 ;; This function is called by:
 12027 ;;		_do_I2C_TX
 12028 ;;		_i2c_ISR
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           
 12033                           ;psect for function _i2c1_driver_isNACK
 12034  0B1D                     _i2c1_driver_isNACK:	
 12035                           
 12036                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 12040  0B1D  0024               	movlb	4	; select bank4
 12041  0B1E  0E16               	swapf	22,w	;volatile
 12042  0B1F  0C89               	rrf	9,f
 12043  0B20  0C89               	rrf	9,f
 12044  0B21  3901               	andlw	1
 12045  0B22  00F0               	movwf	??_i2c1_driver_isNACK
 12046  0B23  0C70               	rrf	??_i2c1_driver_isNACK,w
 12047  0B24  0008               	return
 12048  0B25                     __end_of_i2c1_driver_isNACK:	
 12049                           
 12050                           	psect	text77
 12051  0ADA                     __ptext77:	
 12052 ;; *************** function i1_i2c1_driver_TXData *****************
 12053 ;; Defined at:
 12054 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  d               1    wreg     unsigned char 
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;  d               1    0[COMMON] unsigned char 
 12059 ;; Return value:  Size  Location     Type
 12060 ;;                  1    wreg      void 
 12061 ;; Registers used:
 12062 ;;		wreg
 12063 ;; Tracked objects:
 12064 ;;		On entry : 0/0
 12065 ;;		On exit  : 0/0
 12066 ;;		Unchanged: 0/0
 12067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;Total ram usage:        1 bytes
 12073 ;; Hardware stack levels used:    1
 12074 ;; This function calls:
 12075 ;;		Nothing
 12076 ;; This function is called by:
 12077 ;;		_do_I2C_SEND_ADR_READ
 12078 ;;		_do_I2C_SEND_ADR_WRITE
 12079 ;;		_do_I2C_TX
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           
 12084                           ;psect for function i1_i2c1_driver_TXData
 12085  0ADA                     i1_i2c1_driver_TXData:	
 12086                           
 12087                           ;incstack = 0
 12088                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 12089                           ;i1i2c1_driver_TXData@d stored from wreg
 12090  0ADA  00F0               	movwf	i1i2c1_driver_TXData@d
 12091                           
 12092                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 12093  0ADB  0870               	movf	i1i2c1_driver_TXData@d,w
 12094  0ADC  0024               	movlb	4	; select bank4
 12095  0ADD  0091               	movwf	17	;volatile
 12096  0ADE  0008               	return
 12097  0ADF                     __end_ofi1_i2c1_driver_TXData:	
 12098                           
 12099                           	psect	text78
 12100  0A80                     __ptext78:	
 12101 ;; *************** function i1_i2c1_driver_getRXData *****************
 12102 ;; Defined at:
 12103 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12104 ;; Parameters:    Size  Location     Type
 12105 ;;		None
 12106 ;; Auto vars:     Size  Location     Type
 12107 ;;		None
 12108 ;; Return value:  Size  Location     Type
 12109 ;;                  1    wreg      unsigned char 
 12110 ;; Registers used:
 12111 ;;		wreg
 12112 ;; Tracked objects:
 12113 ;;		On entry : 0/0
 12114 ;;		On exit  : 0/0
 12115 ;;		Unchanged: 0/0
 12116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;Total ram usage:        0 bytes
 12122 ;; Hardware stack levels used:    1
 12123 ;; This function calls:
 12124 ;;		Nothing
 12125 ;; This function is called by:
 12126 ;;		_do_I2C_RX
 12127 ;; This function uses a non-reentrant model
 12128 ;;
 12129                           
 12130                           
 12131                           ;psect for function i1_i2c1_driver_getRXData
 12132  0A80                     i1_i2c1_driver_getRXData:	
 12133                           
 12134                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 12138  0A80  0024               	movlb	4	; select bank4
 12139  0A81  0811               	movf	17,w	;volatile
 12140  0A82  0008               	return
 12141  0A83                     __end_ofi1_i2c1_driver_getRXData:	
 12142                           
 12143                           	psect	text79
 12144  0AB2                     __ptext79:	
 12145 ;; *************** function i1_i2c1_driver_sendNACK *****************
 12146 ;; Defined at:
 12147 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12148 ;; Parameters:    Size  Location     Type
 12149 ;;		None
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;		None
 12152 ;; Return value:  Size  Location     Type
 12153 ;;                  1    wreg      void 
 12154 ;; Registers used:
 12155 ;;		None
 12156 ;; Tracked objects:
 12157 ;;		On entry : 0/0
 12158 ;;		On exit  : 0/0
 12159 ;;		Unchanged: 0/0
 12160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;Total ram usage:        0 bytes
 12166 ;; Hardware stack levels used:    1
 12167 ;; This function calls:
 12168 ;;		Nothing
 12169 ;; This function is called by:
 12170 ;;		_do_I2C_DO_NACK_STOP
 12171 ;;		_do_I2C_DO_NACK_RESTART
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           
 12176                           ;psect for function i1_i2c1_driver_sendNACK
 12177  0AB2                     i1_i2c1_driver_sendNACK:	
 12178                           
 12179                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 12180                           
 12181                           ;incstack = 0
 12182                           ; Regs used in i1_i2c1_driver_sendNACK: []
 12183  0AB2  0024               	movlb	4	; select bank4
 12184  0AB3  1696               	bsf	22,5	;volatile
 12185                           
 12186                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 12187  0AB4  1616               	bsf	22,4	;volatile
 12188  0AB5  0008               	return
 12189  0AB6                     __end_ofi1_i2c1_driver_sendNACK:	
 12190                           
 12191                           	psect	text80
 12192  0A74                     __ptext80:	
 12193 ;; *************** function _i2c1_driver_resetBus *****************
 12194 ;; Defined at:
 12195 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;		None
 12198 ;; Auto vars:     Size  Location     Type
 12199 ;;		None
 12200 ;; Return value:  Size  Location     Type
 12201 ;;                  1    wreg      void 
 12202 ;; Registers used:
 12203 ;;		None
 12204 ;; Tracked objects:
 12205 ;;		On entry : 0/0
 12206 ;;		On exit  : 0/0
 12207 ;;		Unchanged: 0/0
 12208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;Total ram usage:        0 bytes
 12214 ;; Hardware stack levels used:    1
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		_do_I2C_RESET
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function _i2c1_driver_resetBus
 12224  0A74                     _i2c1_driver_resetBus:	
 12225                           
 12226                           ;incstack = 0
 12227                           ; Regs used in _i2c1_driver_resetBus: []
 12228  0A74  0008               	return
 12229  0A75                     __end_of_i2c1_driver_resetBus:	
 12230                           
 12231                           	psect	text81
 12232  0A7D                     __ptext81:	
 12233 ;; *************** function i1_i2c1_driver_startRX *****************
 12234 ;; Defined at:
 12235 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;		None
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;		None
 12240 ;; Return value:  Size  Location     Type
 12241 ;;                  1    wreg      void 
 12242 ;; Registers used:
 12243 ;;		None
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;Total ram usage:        0 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; This function calls:
 12256 ;;		Nothing
 12257 ;; This function is called by:
 12258 ;;		_do_I2C_RCEN
 12259 ;; This function uses a non-reentrant model
 12260 ;;
 12261                           
 12262                           
 12263                           ;psect for function i1_i2c1_driver_startRX
 12264  0A7D                     i1_i2c1_driver_startRX:	
 12265                           
 12266                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 12267                           
 12268                           ;incstack = 0
 12269                           ; Regs used in i1_i2c1_driver_startRX: []
 12270  0A7D  0024               	movlb	4	; select bank4
 12271  0A7E  1596               	bsf	22,3	;volatile
 12272  0A7F  0008               	return
 12273  0A80                     __end_ofi1_i2c1_driver_startRX:	
 12274                           
 12275                           	psect	text82
 12276  0002                     __ptext82:	
 12277 ;; *************** function _returnReset *****************
 12278 ;; Defined at:
 12279 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 12280 ;; Parameters:    Size  Location     Type
 12281 ;;  p               1    0[COMMON] PTR void 
 12282 ;;		 -> NULL(0), 
 12283 ;; Auto vars:     Size  Location     Type
 12284 ;;		None
 12285 ;; Return value:  Size  Location     Type
 12286 ;;                  1    wreg      enum E6966
 12287 ;; Registers used:
 12288 ;;		wreg
 12289 ;; Tracked objects:
 12290 ;;		On entry : 0/0
 12291 ;;		On exit  : 0/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12294 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;Total ram usage:        1 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; This function calls:
 12301 ;;		Nothing
 12302 ;; This function is called by:
 12303 ;;		_i2c_open
 12304 ;;		_do_I2C_DO_ADDRESS_NACK
 12305 ;;		_do_I2C_TX
 12306 ;;		_do_I2C_RX
 12307 ;;		_do_I2C_TX_EMPTY
 12308 ;; This function uses a non-reentrant model
 12309 ;;
 12310                           
 12311                           
 12312                           ;psect for function _returnReset
 12313  0002                     _returnReset:	
 12314                           
 12315                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 12316                           
 12317                           ;incstack = 0
 12318                           ; Regs used in _returnReset: [wreg]
 12319  0002  3005               	movlw	5
 12320  0003  0008               	return
 12321  0004                     __end_of_returnReset:	
 12322                           
 12323                           	psect	text83
 12324  0A75                     __ptext83:	
 12325 ;; *************** function _returnStop *****************
 12326 ;; Defined at:
 12327 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;  p               1    0[COMMON] PTR void 
 12330 ;;		 -> NULL(0), 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;		None
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      enum E6966
 12335 ;; Registers used:
 12336 ;;		wreg
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12342 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;Total ram usage:        1 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_i2c_open
 12352 ;;		_setCallBack
 12353 ;;		_do_I2C_DO_ADDRESS_NACK
 12354 ;;		_do_I2C_TX
 12355 ;;		_do_I2C_RX
 12356 ;;		_do_I2C_TX_EMPTY
 12357 ;; This function uses a non-reentrant model
 12358 ;;
 12359                           
 12360                           
 12361                           ;psect for function _returnStop
 12362  0A75                     _returnStop:	
 12363                           
 12364                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 12365                           
 12366                           ;incstack = 0
 12367                           ; Regs used in _returnStop: [wreg]
 12368  0A75  3001               	movlw	1
 12369  0A76  0008               	return
 12370  0A77                     __end_of_returnStop:	
 12371                           
 12372                           	psect	text84
 12373  0A7A                     __ptext84:	
 12374 ;; *************** function i1_i2c1_driver_stop *****************
 12375 ;; Defined at:
 12376 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;		None
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      void 
 12383 ;; Registers used:
 12384 ;;		None
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:        0 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; This function calls:
 12397 ;;		Nothing
 12398 ;; This function is called by:
 12399 ;;		_do_I2C_SEND_STOP
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           
 12404                           ;psect for function i1_i2c1_driver_stop
 12405  0A7A                     i1_i2c1_driver_stop:	
 12406                           
 12407                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 12408                           
 12409                           ;incstack = 0
 12410                           ; Regs used in i1_i2c1_driver_stop: []
 12411  0A7A  0024               	movlb	4	; select bank4
 12412  0A7B  1516               	bsf	22,2	;volatile
 12413  0A7C  0008               	return
 12414  0A7D                     __end_ofi1_i2c1_driver_stop:	
 12415                           
 12416                           	psect	text85
 12417  0A77                     __ptext85:	
 12418 ;; *************** function i1_i2c1_driver_restart *****************
 12419 ;; Defined at:
 12420 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12421 ;; Parameters:    Size  Location     Type
 12422 ;;		None
 12423 ;; Auto vars:     Size  Location     Type
 12424 ;;		None
 12425 ;; Return value:  Size  Location     Type
 12426 ;;                  1    wreg      void 
 12427 ;; Registers used:
 12428 ;;		None
 12429 ;; Tracked objects:
 12430 ;;		On entry : 0/0
 12431 ;;		On exit  : 0/0
 12432 ;;		Unchanged: 0/0
 12433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;Total ram usage:        0 bytes
 12439 ;; Hardware stack levels used:    1
 12440 ;; This function calls:
 12441 ;;		Nothing
 12442 ;; This function is called by:
 12443 ;;		_do_I2C_SEND_RESTART_READ
 12444 ;;		_do_I2C_SEND_RESTART_WRITE
 12445 ;;		_do_I2C_SEND_RESTART
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           
 12450                           ;psect for function i1_i2c1_driver_restart
 12451  0A77                     i1_i2c1_driver_restart:	
 12452                           
 12453                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12454                           
 12455                           ;incstack = 0
 12456                           ; Regs used in i1_i2c1_driver_restart: []
 12457  0A77  0024               	movlb	4	; select bank4
 12458  0A78  1496               	bsf	22,1	;volatile
 12459  0A79  0008               	return
 12460  0A7A                     __end_ofi1_i2c1_driver_restart:	
 12461                           
 12462                           	psect	text86
 12463  0AAE                     __ptext86:	
 12464 ;; *************** function _i2c1_driver_sendACK *****************
 12465 ;; Defined at:
 12466 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;		None
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;		None
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		None
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;Total ram usage:        0 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; This function calls:
 12487 ;;		Nothing
 12488 ;; This function is called by:
 12489 ;;		_do_I2C_DO_ACK
 12490 ;;		_do_I2C_RX
 12491 ;;		_I2C_Send_ACK
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           
 12496                           ;psect for function _i2c1_driver_sendACK
 12497  0AAE                     _i2c1_driver_sendACK:	
 12498                           
 12499                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 12500                           
 12501                           ;incstack = 0
 12502                           ; Regs used in _i2c1_driver_sendACK: []
 12503  0AAE  0024               	movlb	4	; select bank4
 12504  0AAF  1296               	bcf	22,5	;volatile
 12505                           
 12506                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 12507  0AB0  1616               	bsf	22,4	;volatile
 12508  0AB1  0008               	return
 12509  0AB2                     __end_of_i2c1_driver_sendACK:	
 12510                           
 12511                           	psect	text87
 12512  0AE4                     __ptext87:	
 12513 ;; *************** function _PIN_MANAGER_IOC *****************
 12514 ;; Defined at:
 12515 ;;		line 127 in file "mcc_generated_files/pin_manager.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;		None
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;		None
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      void 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2, status,0, pclath, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;Total ram usage:        0 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    2
 12536 ;; This function calls:
 12537 ;;		_IOCCF1_ISR
 12538 ;; This function is called by:
 12539 ;;		_INTERRUPT_InterruptManager
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           
 12544                           ;psect for function _PIN_MANAGER_IOC
 12545  0AE4                     _PIN_MANAGER_IOC:	
 12546                           
 12547                           ;mcc_generated_files/pin_manager.c: 130:     if(IOCCFbits.IOCCF1 == 1)
 12548                           
 12549                           ;incstack = 0
 12550                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 12551  0AE4  0027               	movlb	7	; select bank7
 12552  0AE5  1C99               	btfss	25,1	;volatile
 12553  0AE6  0008               	return
 12554                           
 12555                           ;mcc_generated_files/pin_manager.c: 131:     {;mcc_generated_files/pin_manager.c: 132:  
      +                                 IOCCF1_ISR();
 12556  0AE7  318B  2368         	fcall	_IOCCF1_ISR
 12557  0AE9  0008               	return
 12558  0AEA                     __end_of_PIN_MANAGER_IOC:	
 12559                           
 12560                           	psect	text88
 12561  0B68                     __ptext88:	
 12562 ;; *************** function _IOCCF1_ISR *****************
 12563 ;; Defined at:
 12564 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 12565 ;; Parameters:    Size  Location     Type
 12566 ;;		None
 12567 ;; Auto vars:     Size  Location     Type
 12568 ;;		None
 12569 ;; Return value:  Size  Location     Type
 12570 ;;                  1    wreg      void 
 12571 ;; Registers used:
 12572 ;;		wreg, status,2, status,0, pclath, cstack
 12573 ;; Tracked objects:
 12574 ;;		On entry : 0/0
 12575 ;;		On exit  : 0/0
 12576 ;;		Unchanged: 0/0
 12577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12582 ;;Total ram usage:        0 bytes
 12583 ;; Hardware stack levels used:    1
 12584 ;; Hardware stack levels required when called:    1
 12585 ;; This function calls:
 12586 ;;		Absolute function
 12587 ;;		_GestureInterruptHandler
 12588 ;;		_IOCCF1_DefaultInterruptHandler
 12589 ;; This function is called by:
 12590 ;;		_PIN_MANAGER_IOC
 12591 ;; This function uses a non-reentrant model
 12592 ;;
 12593                           
 12594                           
 12595                           ;psect for function _IOCCF1_ISR
 12596  0B68                     _IOCCF1_ISR:	
 12597                           
 12598                           ;mcc_generated_files/pin_manager.c: 144:     if(IOCCF1_InterruptHandler)
 12599                           
 12600                           ;incstack = 0
 12601                           ; Regs used in _IOCCF1_ISR: [wreg+status,2+status,0+pclath+cstack]
 12602  0B68  0020               	movlb	0	; select bank0
 12603  0B69  086E               	movf	_IOCCF1_InterruptHandler,w
 12604  0B6A  046F               	iorwf	_IOCCF1_InterruptHandler+1,w
 12605  0B6B  1903               	btfsc	3,2
 12606  0B6C  2B72               	goto	i1l4141
 12607                           
 12608                           ;mcc_generated_files/pin_manager.c: 145:     {;mcc_generated_files/pin_manager.c: 146:  
      +                                 IOCCF1_InterruptHandler();
 12609  0B6D  086F               	movf	_IOCCF1_InterruptHandler+1,w
 12610  0B6E  008A               	movwf	10
 12611  0B6F  086E               	movf	_IOCCF1_InterruptHandler,w
 12612  0B70  000A               	callw
 12613  0B71  318B               	pagesel	$
 12614  0B72                     i1l4141:	
 12615                           
 12616                           ;mcc_generated_files/pin_manager.c: 148:     IOCCFbits.IOCCF1 = 0;
 12617  0B72  0027               	movlb	7	; select bank7
 12618  0B73  1099               	bcf	25,1	;volatile
 12619  0B74  0008               	return
 12620  0B75                     __end_of_IOCCF1_ISR:	
 12621                           
 12622                           	psect	text89
 12623  0AAA                     __ptext89:	
 12624 ;; *************** function _GestureInterruptHandler *****************
 12625 ;; Defined at:
 12626 ;;		line 54 in file "main.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;		None
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;		None
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      void 
 12633 ;; Registers used:
 12634 ;;		None
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;Total ram usage:        0 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; This function calls:
 12647 ;;		Nothing
 12648 ;; This function is called by:
 12649 ;;		_main
 12650 ;;		_IOCCF1_ISR
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _GestureInterruptHandler
 12656  0AAA                     _GestureInterruptHandler:	
 12657                           
 12658                           ;main.c: 55:     handleGestureFlag = 1;
 12659                           
 12660                           ;incstack = 0
 12661                           ; Regs used in _GestureInterruptHandler: []
 12662  0AAA  0020               	movlb	0	; select bank0
 12663  0AAB  01ED               	clrf	_handleGestureFlag
 12664  0AAC  0AED               	incf	_handleGestureFlag,f
 12665  0AAD  0008               	return
 12666  0AAE                     __end_of_GestureInterruptHandler:	
 12667                           
 12668                           	psect	text90
 12669  0A73                     __ptext90:	
 12670 ;; *************** function _IOCCF1_DefaultInterruptHandler *****************
 12671 ;; Defined at:
 12672 ;;		line 161 in file "mcc_generated_files/pin_manager.c"
 12673 ;; Parameters:    Size  Location     Type
 12674 ;;		None
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;		None
 12677 ;; Return value:  Size  Location     Type
 12678 ;;                  1    wreg      void 
 12679 ;; Registers used:
 12680 ;;		None
 12681 ;; Tracked objects:
 12682 ;;		On entry : 0/0
 12683 ;;		On exit  : 0/0
 12684 ;;		Unchanged: 0/0
 12685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;Total ram usage:        0 bytes
 12691 ;; Hardware stack levels used:    1
 12692 ;; This function calls:
 12693 ;;		Nothing
 12694 ;; This function is called by:
 12695 ;;		_PIN_MANAGER_Initialize
 12696 ;;		_IOCCF1_ISR
 12697 ;; This function uses a non-reentrant model
 12698 ;;
 12699                           
 12700                           
 12701                           ;psect for function _IOCCF1_DefaultInterruptHandler
 12702  0A73                     _IOCCF1_DefaultInterruptHandler:	
 12703                           
 12704                           ;incstack = 0
 12705                           ; Regs used in _IOCCF1_DefaultInterruptHandler: []
 12706  0A73  0008               	return
 12707  0A74                     __end_of_IOCCF1_DefaultInterruptHandler:	
 12708  007E                     btemp	set	126	;btemp
 12709  007E                     int$flags	set	126
 12710  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         119
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     61      80
    BANK1            80     66      66
    BANK2            80     64      64
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2093	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    IOCCF1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> GestureInterruptHandler(), IOCCF1_DefaultInterruptHandler(), 

    IOCCF1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> GestureInterruptHandler(), IOCCF1_DefaultInterruptHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _PIN_MANAGER_Initialize->_IOCCF1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readGesture
    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_readGesture
    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   93389
                                             64 BANK1      2     2      0
         _IOCCF1_SetInterruptHandler
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
                        _readGesture
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        2     2      0    7684
                                             59 BANK0      2     2      0
                        _LEDs_SetLow
                 _isGestureAvailable
                        _readGesture
 ---------------------------------------------------------------------------------
 (1) _readGesture                                        140   138      2    7486
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _processGestureData                                  32    32      0    5314
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1846
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _LEDs_SetLow                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     211
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
         _IOCCF1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF1_SetInterruptHandler                           2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF1_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCCF1_ISR                                          0     0      0       0
                   Absolute function *
            _GestureInterruptHandler *
     _IOCCF1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _IOCCF1_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _GestureInterruptHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOCCF1_SetInterruptHandler
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF1_SetInterruptHandler
     _PMD_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _LEDs_SetLow
     _isGestureAvailable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _readGesture
     _decodeGesture
     _getMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _isGestureAvailable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _processGestureData
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _resetGestureParameters
     _wireReadDataBlock
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
     _IOCCF1_ISR
       Absolute function(Fake) *
       _GestureInterruptHandler *
       _IOCCF1_DefaultInterruptHandler *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      42       7       82.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 30 13:12:30 2019

                              returnReset@p 0070                       ?_setGestureExitThresh 0070  
                        __size_of_I2C_Start 0003                                 __CFG_CP$OFF 0000  
                              ___awdiv@sign 002C                        __size_of_do_I2C_IDLE 0005  
                       _do_I2C_SEND_RESTART 0ABE                        __size_of_do_I2C_RCEN 0006  
                       ___wmul@multiplicand 0022                                 __CFG_LVP$ON 0000  
                                       l619 0F6F                                         l902 02C2  
                                       l906 02EB                                         l907 0303  
          processGestureData@ud_ratio_first 0031                                         l940 03D6  
                                       l932 03A2                                         l860 006C  
                                       l952 0429                                         l944 03F3  
                                       l928 0385                                         l883 0227  
                                       l964 0478                                         l956 0446  
                                       l895 02A3                                         l887 0250  
                                       l968 0495                                         l889 0275  
                              __CFG_CPD$OFF 0000                       __end_of_decodeGesture 04A6  
                      __size_of_I2C_ReStart 0003                     __size_of_PMD_Initialize 0008  
                        I2C_Write_Byte@Byte 0023                       __size_of_do_I2C_RESET 0007  
                                       wreg 0009                          i1_i2c1_driver_stop 0A7A  
                                      l1031 0C1B                                        l1195 0C37  
                                      l5041 0B54                                        l5113 0726  
                                      l5035 0C1E                                        l5131 074C  
                                      l5123 072E                                        l5107 071B  
                                      l5125 073A                                        l5221 0FF5  
                                      l6031 06C2                                        l5135 0755  
                                      l5303 01DA                                        l5231 005B  
                                      l6111 0F4C                                        l6103 0F38  
                                      l5401 0338                                        l5313 01FF  
                                      l5305 01DD                                        l6105 0F46  
                                      l6035 06C4                                        l5403 033A  
                                      l5139 075D                                        l5323 0222  
                                      l5315 0202                                        l5251 0068  
                                      l5235 005D                                        l5219 0FC6  
                                      l5165 076E                                        l5421 035E  
                                      l5413 034C                                        l5157 0B94  
                                      l5341 0271                                        l5309 01ED  
                                      l5253 00C2                                        l6117 0F52  
                                      l6125 0F58                                        l5415 034E  
                                      l5407 0342                                        l5087 0C31  
                                      l5351 0297                                        l5185 07A1  
                                      l5177 0788                                        l5169 0770  
                                      l6049 06C0                                        l5433 039D  
                                      l5409 0344                                        l5337 0269  
                                      l5329 024B                                        l5281 00D9  
                                      l5187 07A2                                        l5179 0795  
                                      l5451 03EE                                        l5419 0358  
                                      l5363 02BD                                        l5267 00DD  
                                      l5611 0674                                        l6331 0F61  
                                      l5429 0380                                        l5285 0127  
                                      l5447 03D1                                        l5439 03AF  
                                      l5391 0323                                        l5359 02A5  
                                      l5615 067D                                        l5465 0424  
                                      l5457 0400                                        l5369 02E6  
                                      l5609 0613                                        l5713 0D18  
                                      l6193 0EE5                                        l6185 0ED2  
                                      l5811 0DF4                                        l5483 0473  
                                      l5475 0453                                        l5299 01C8  
                                      l5571 05CB                                        l6099 0F33  
                                      l6187 0ED6                                        l5493 04A2  
                                      l5469 0441                                        l5397 032E  
                                      l5581 05CF                                        l5709 0D16  
                                      l5487 0490                                        l5575 0680  
                                      l5903 04BB                                        l5497 04A4  
                                      l5729 0BA7                                        l5739 0BBA  
                                      l5829 0E57                                        l5597 0605  
                                      l5589 05E2                                        l5757 0E89  
                                      l5693 0D3F                                        l5669 0BE0  
                                      l5847 0CD7                                        l5775 0EBB  
                                      l5679 0BCD                                        l5857 0B81  
                                      l5793 0CFE                                        l5689 0D3D  
                                      l5899 04B9                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u4005 074D                                        u4205 0077  
                                      u4125 0FCF                                        u4305 01C1  
                                      u4074 0781                                        u4075 0780  
                                      u4315 01D2                                        u4084 078D  
                                      u4085 078C                                        u4325 01E6  
                                      u5135 0E38                                        u4335 01F7  
                                      u4505 02AE                                        u4515 02CB  
                                      u5075 0E6A                                        _PMD0 0911  
                                      u4525 02D7                                        u4445 027E  
                                      u4365 0213                                        _PMD1 0912  
                                      _PMD2 0913                                        u4535 02F4  
                                      u4455 028A                                        u4375 0230  
                                      u5095 0E9C                                        _PMD3 0914  
                                      _PMD4 0915                                        u4705 038E  
                                      u3905 0C38                                        u4385 023C  
                                      _PMD5 0916                                        u4715 03AC  
                                      u3915 0C3D                                        u4395 0259  
                                      u4805 0432                                        u4565 030C  
                                      u4815 0450                                        u5607 0684  
                                      u4745 03C2                                        u5617 0697  
                                      u4755 03DF                                        u4845 0464  
                                      u4765 03FD                                        u3965 0731  
                                      u4855 0481                                        u4695 0371  
                                      u4865 049F                                        u3985 073B  
                                      u4945 060E                                        u4795 0415  
                                      u3995 0745                                        u4955 061D  
                                      u5587 0EE2                                        u5597 0F3E  
                      ?_do_I2C_SEND_RESTART 0070                                        u4975 0D5F  
                                      u4985 0D88                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
         __size_of_do_I2C_SEND_RESTART_READ 0004                         ?i1_i2c1_driver_stop 0070  
                 ?_do_I2C_SEND_RESTART_READ 0070                                        _main 0EBD  
                 __size_of_do_I2C_SEND_STOP 0004                      __size_of_do_I2C_DO_ACK 0004  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                       ??_setGestureIntEnable 002A  
                          __end_of_I2C_Stop 0AAA                               __CFG_BOREN$ON 0000  
                   i1_i2c1_driver_getRXData 0A80                       ?_do_I2C_SEND_ADR_READ 0070  
                             __CFG_BORV$LOW 0000             ??_i2c1_driver_clearBusCollision 0070  
                                      start 002B                         I2C_Write_Byte@count 0024  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                           __end_of_i2c_ISR 0CB2                    ??_do_I2C_DO_NACK_RESTART 0070  
                              ?_readGesture 004F                                _do_I2C_RESET 0B08  
            __size_of_OSCILLATOR_Initialize 0009                                ?_LEDs_SetLow 0070  
             __end_of_OSCILLATOR_Initialize 0B3E                         __size_of_IOCCF1_ISR 000D  
                      ??i1_i2c1_driver_stop 0070                    __end_of_i2c1_driver_open 0B51  
                                     ?_main 0070                             __end_of___awdiv 0762  
                  __end_of_i2c1_driver_stop 0AA7                               __CFG_WDTE$OFF 0000  
                           ___awdiv@divisor 0026                  __end_of_i2c1_driver_TXData 0AFC  
                            __CFG_DEBUG$OFF 0000                                       i1l157 07E4  
                                     i1l173 0F8A                                       i1l253 0029  
                                     i1l245 0010                                       i1l248 001E  
                              ?_setLEDBoost 0070                             ___awdiv@counter 002B  
                              ?_setLEDDrive 0070                              _setGestureGain 0E59  
                                     _OSCEN 091D                          wireReadDataBlock@j 0030  
                            _setGestureMode 0CB2                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
               __end_of_setProxIntLowThresh 0BE2                             __end_of_getMode 0B47  
                     isGestureAvailable@val 002A                     __end_of_PIN_MANAGER_IOC 0AEA  
                __end_of_i2c1_driver_isNACK 0B25                      __size_of_I2C_Read_Byte 000B  
                            _WDT_Initialize 0AD2                            _b_i2c_error_flag 007A  
              __end_of_setProxIntHighThresh 0BCF                  ?_do_I2C_SEND_RESTART_WRITE 0070  
                     ??_do_I2C_SEND_RESTART 0070                             __end_of_setMode 07B1  
                         __end_of_I2C_Start 0AA4                                       pclath 000A  
                   __size_of_mssp1_clearIRQ 0003                        i1_i2c1_driver_TXData 0ADA  
              __size_of_setAmbientLightGain 001E                      ?_do_I2C_SEND_ADR_WRITE 0070  
                    __size_of_I2C_Send_NACK 0003                                       status 0003  
                                     wtemp0 007E                    ?_setLightIntLowThreshold 002A  
                __end_of_setGestureLEDDrive 0EBD                       setGestureWaitTime@val 002C  
                             _fsmStateTable 1000                               _gesture_data_ 0220  
                           __initialization 002D                      ??_setGestureExitThresh 002A  
                processGestureData@lr_delta 004B                                  _i2c_status 01A0  
                              __end_of_main 0EF1                           _handleGestureFlag 006D  
                processGestureData@ud_delta 0049                 ?_INTERRUPT_InterruptManager 0070  
                    __end_of_setGestureGain 0E8B                   __size_of_setProximityGain 0029  
                    __end_of_setGestureMode 0CD9                               _do_I2C_DO_ACK 0AC6  
                                    ??_main 005D               __size_of_i2c1_driver_sendNACK 0004  
         __size_of_setLightIntHighThreshold 0027               __size_of_i2c1_driver_resetBus 0001  
                    __end_of_WDT_Initialize 0AD6                     ?_do_I2C_DO_ADDRESS_NACK 0070  
                 ?_setLightIntHighThreshold 002A           setLightIntHighThreshold@threshold 002A  
                      __size_of_enablePower 000E                ??_IOCCF1_SetInterruptHandler 0022  
                          ___awdiv@dividend 0028                          _processGestureData 004D  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                          __CFG_RSTOSC$HFINT1 0000  
              setProxIntLowThresh@threshold 002B                       ?i1_i2c1_driver_TXData 0070  
                                    _RB5PPS 0E9D                                      _RB7PPS 0E9F  
                                    i1l4001 07BA                                      _ODCONA 028C  
                                    _ODCONB 028D                                      i1l4011 07C0  
                                    _ODCONC 028E                                      i1l4005 07BD  
                                    i1l4041 0F8C                                      i1l4019 07FE  
                                    i1l4051 0F92                                      i1l4141 0B72  
                                    i1l4061 0DF9                                      i1l4045 0F8F  
                                    i1l4071 0E00                                      i1l4065 0DFC  
                                    i1l4077 0E03                                      i1l4467 0C9C  
                                    i1l6333 0FA7                                      i1l6335 07D6  
                                    i1l6337 0DC2                                      i1l6339 0E18  
                 ??i1_i2c1_driver_getRXData 0070                                      i1l3975 0DA7  
                                    i1l3985 0DAD                                      i1l3979 0DAA  
                                    i1l3997 07B7                            _wireReadDataByte 0C68  
                                    _OSCFRQ 091F                     ?_resetGestureParameters 0070  
                    ??_do_I2C_SEND_ADR_READ 0070                                      _WDTCON 0097  
                                 ??_i2c_ISR 0073                         ?_processGestureData 0070  
                         _gesture_lr_delta_ 0069                              __CFG_PWRTE$OFF 0000  
             setProxIntHighThresh@threshold 002B                           _gesture_lr_count_ 0065  
                       wireReadDataByte@reg 0027                       _i2c1_driver_getRXData 0A95  
                       wireReadDataByte@val 0028                           _gesture_ud_delta_ 006B  
               __end_of_do_I2C_DO_NACK_STOP 0ACE                               _I2C_Read_Byte 0B51  
                __end_of_isGestureAvailable 0B96                           _gesture_ud_count_ 0067  
                                    ___wmul 0C2E                                   ??___awdiv 002A  
     __end_of_i2c1_driver_clearBusCollision 0A8C      __size_of_i2c1_driver_clearBusCollision 0003  
             _i2c1_driver_clearBusCollision 0A89                  __end_of_setGestureWaitTime 0D00  
                            __CFG_STVREN$ON 0000             __size_of_do_I2C_DO_NACK_RESTART 0004  
                          ___awdiv@quotient 002D                              ?_do_I2C_DO_ACK 0070  
                           ?_setGestureGain 0070                               _I2C_Send_NACK 0A9B  
                                 ??_getMode 0029                             ?_setGestureMode 0070  
       __size_of_IOCCF1_SetInterruptHandler 0006                     ??_setGestureEnterThresh 002A  
                      ??_processGestureData 002F                 __end_of_i2c1_driver_sendACK 0AB2  
                            _PMD_Initialize 0B2D              __end_of_do_I2C_DO_ADDRESS_NACK 0DCB  
                                 ?_I2C_Stop 0070                                   ??_setMode 002C  
                           ?_WDT_Initialize 0070                 __end_of_i2c1_driver_restart 0A92  
                              ?_returnReset 0070                           readGesture@motion 0053  
               __end_of_i2c1_driver_startRX 0A9B                    ?_GestureInterruptHandler 0070  
IOCCF1_SetInterruptHandler@InterruptHandler 0020                            ?_PIN_MANAGER_IOC 0070  
                              ??_IOCCF1_ISR 0070              __end_of_resetGestureParameters 0BF7  
                         _SYSTEM_Initialize 0B5C                     __end_of__initialization 0049  
                          _do_I2C_SEND_STOP 0AC2                          __size_of_do_I2C_RX 0046  
                        __size_of_do_I2C_TX 004F                          ?_SYSTEM_Initialize 0070  
                    setGestureWaitTime@time 002B                    __size_of_do_I2C_TX_EMPTY 0031  
                            ?_I2C_Read_Byte 0070                              __pcstackCOMMON 0070  
                       ??_SYSTEM_Initialize 0022                       i1i2c1_driver_TXData@d 0070  
                      _setProxIntHighThresh 0BBC                              _gesture_state_ 005F  
                            ?_I2C_Send_NACK 0070                       i1_i2c1_driver_restart 0A77  
                    __end_of_PMD_Initialize 0B35                       i1_i2c1_driver_startRX 0A7D  
                        __end_of_IOCCF1_ISR 0B75                        __size_of_readGesture 00F0  
                     __end_of_handleGesture 0F70                        __size_of_LEDs_SetLow 0006  
         __size_of_i2c1_driver_isBufferFull 0007                                  ??_I2C_Stop 0020  
                 ?_i2c1_driver_isBufferFull 0070                          _gesture_far_count_ 0061  
                      __size_of_setLEDBoost 0032                        __size_of_setLEDDrive 0029  
                    _do_I2C_DO_NACK_RESTART 0ACE                      ??i1_i2c1_driver_TXData 0070  
                 __end_of_SYSTEM_Initialize 0B68                              _mssp1_clearIRQ 0A86  
                                __pbssBANK0 005D                                  __pbssBANK3 01A0  
                                __pbssBANK4 0220                        wireWriteDataByte@reg 0029  
                      wireWriteDataByte@val 0026                         getMode@enable_value 002A  
                  ??i1_i2c1_driver_sendNACK 0070                      ?_i2c1_driver_getRXData 0070  
              __size_of_i2c_busCollisionISR 0003                                  __pmaintext 0EBD  
                             ??_do_I2C_IDLE 0070                               ??_do_I2C_RCEN 0070  
                   setGestureLEDDrive@drive 002D                                     ?___wmul 0020  
                           __CFG_PPS1WAY$ON 0000                             ??_do_I2C_DO_ACK 0070  
              __size_of_enableGestureSensor 0064                                  __pintentry 0004  
                     ?_setProxIntHighThresh 0070                     __size_of_I2C_Write_Byte 001C  
                             ??_I2C_ReStart 0020                            _setProximityGain 0D77  
                               setMode@mode 002F                             ?_PMD_Initialize 0070  
                       _setAmbientLightGain 0C4A              ?_i2c1_driver_clearBusCollision 0070  
                         ?_i2c1_driver_open 0070                           __end_of_do_I2C_RX 0FB6  
                         __end_of_do_I2C_TX 0800                           ?_i2c1_driver_stop 0070  
           __end_of_GestureInterruptHandler 0AAE                           _wireReadDataBlock 0FB6  
                        ??_i2c1_driver_open 0020                          ??_i2c1_driver_stop 0020  
                                   _OSCCON1 0919                                     _OSCCON3 091B  
                             ?_mssp1_setIRQ 0070          __end_of_IOCCF1_SetInterruptHandler 0AF6  
                _IOCCF1_SetInterruptHandler 0AF0                                     _OSCTUNE 091E  
                      wireReadDataBlock@len 0028                        wireReadDataBlock@reg 002F  
                      wireReadDataBlock@val 0026                                     _SSP1ADD 0212  
                                   _SLRCONA 030C                                     _SLRCONB 030D  
                                   _SLRCONC 030E                                     _SSP1BUF 0211  
                    __end_of_mssp1_clearIRQ 0A89                          ?_wireReadDataBlock 0026  
                                   _SSP1MSK 0213                 __end_of_setGestureIntEnable 0DF6  
                   ??_do_I2C_SEND_ADR_WRITE 0070             processGestureData@lr_ratio_last 0037  
               ??_do_I2C_SEND_RESTART_WRITE 0070                                readGesture@i 0059  
                        _i2c1_driver_TXData 0AF6                        ?_setAmbientLightGain 0070  
                        _i2c1_driver_i2cISR 0076                         ??_wireReadDataBlock 002A  
                                   _i2c_ISR 0C8C                                   _I2C_Start 0AA1  
                           ??_I2C_Read_Byte 0021                               setMode@enable 002B  
                        _i2c1_driver_isNACK 0B1D                      __size_of_decodeGesture 018E  
                       ?_i2c1_driver_TXData 0070                             ??_I2C_Send_NACK 0020  
                                   ___awdiv 0710                             __size_of___wmul 001C  
                    ?i1_i2c1_driver_restart 0070                           ??_do_I2C_TX_EMPTY 0070  
                       ?_i2c1_driver_isNACK 0070                      ?i1_i2c1_driver_startRX 0070  
                  __end_of_wireReadDataByte 0C8C                                  _initialize 04A6  
                                   _getMode 0B3E            __size_of_setLightIntLowThreshold 0027  
                        _setGestureLEDDrive 0E8B                                     __ptext1 04A6  
                                   __ptext2 0D77                                     __ptext3 0BCF  
                                   __ptext4 0BBC                                     __ptext5 0D27  
                                   __ptext6 0D00                                     __ptext7 0D4E  
                                   __ptext8 0CD9                                     __ptext9 0E8B  
               __size_ofi1_i2c1_driver_stop 0003                         __end_of_do_I2C_IDLE 0AE4  
                 __end_of_wireReadDataBlock 1000                         __end_of_do_I2C_RCEN 0AF0  
                     _OSCILLATOR_Initialize 0B35                 __end_of_do_I2C_SEND_RESTART 0AC2  
                            ??_mssp1_setIRQ 0070                        ??_i2c1_driver_TXData 0020  
                                   _setMode 0762                    ??_PIN_MANAGER_Initialize 0022  
                                 _IOCCFbits 0399                         __end_of_I2C_ReStart 0A95  
                                 _IOCCNbits 0398                         ?_setGestureLEDDrive 0070  
                                 _IOCCPbits 0397                             ?_mssp1_clearIRQ 0070  
                  _do_I2C_SEND_RESTART_READ 0AB6                  __size_of_SYSTEM_Initialize 000C  
                                   clrloop0 0B03                        __size_of_returnReset 0002  
                      end_of_initialization 0049                        ??_i2c1_driver_isNACK 0070  
                     ??_setAmbientLightGain 002A                __size_of_setProxIntLowThresh 0013  
              __end_of_i2c1_driver_sendNACK 0ADA             __size_ofi1_i2c1_driver_sendNACK 0004  
                                ?_I2C_Start 0070               enableGestureSensor@interrupts 0031  
              __end_of_i2c1_driver_resetBus 0A75               setGestureExitThresh@threshold 002B  
                      ??_setGestureLEDDrive 002A                          readGesture@gstatus 0055  
                              initialize@id 0031                            ??_setGestureGain 002A  
                    ??_setProxIntHighThresh 002A                            ??_setGestureMode 002A  
                 _do_I2C_SEND_RESTART_WRITE 0ABA               __size_of_setGestureExitThresh 0013  
                          ??_WDT_Initialize 0020                           _wireWriteDataByte 0BF7  
                                _returnStop 0A75                    __end_of_do_I2C_SEND_STOP 0AC6  
                             ??_enablePower 0030                          ?_wireWriteDataByte 0026  
           setLightIntHighThreshold@val_low 002D              __size_of_setGestureEnterThresh 0013  
             __end_of_setGestureEnterThresh 0BA9                               _decodeGesture 0318  
                        _isGestureAvailable 0B83                          _setGestureWaitTime 0CD9  
                         __size_of_I2C_Stop 0003                                 returnStop@p 0070  
                       ??_wireWriteDataByte 0029                            __CFG_FEXTOSC$OFF 0000  
           processGestureData@ud_ratio_last 0035                         ?_isGestureAvailable 0070  
                       ?_setGestureWaitTime 0070               __size_of_do_I2C_SEND_ADR_READ 0008  
                     setProximityGain@drive 002D            __size_of_GestureInterruptHandler 0004  
          __end_of_i2c1_driver_isBufferFull 0B1D                                 _do_I2C_IDLE 0ADF  
                               _do_I2C_RCEN 0AEA                   __end_of_wireWriteDataByte 0C12  
                            _I2C_Write_Byte 0C12                        ??_isGestureAvailable 0029  
                            __end_of___wmul 0C4A                        ??_setGestureWaitTime 002A  
                               ?_initialize 0070                                 _I2C_ReStart 0A92  
                    i1_i2c1_driver_sendNACK 0AB2                      ?_OSCILLATOR_Initialize 0070  
                  _setLightIntHighThreshold 0D00                  __size_of_wireReadDataBlock 004A  
                           _gesture_motion_ 005D                __size_of_do_I2C_DO_NACK_STOP 0004  
               __size_of_processGestureData 02CB                              ?_decodeGesture 0070  
                   ?_do_I2C_DO_NACK_RESTART 0070                         start_initialization 002D  
                        setGestureGain@gain 002D                         _i2c_busCollisionISR 0A8C  
           __size_of_PIN_MANAGER_Initialize 003B                    ?i1_i2c1_driver_getRXData 0070  
          setLightIntHighThreshold@val_high 002E                         _enableGestureSensor 06AC  
                       __end_of_enablePower 0B83                __size_of_i2c1_driver_sendACK 0004  
                   ??_i2c1_driver_getRXData 0020                    __end_of_setProximityGain 0DA0  
              __size_of_i2c1_driver_restart 0003                    processGestureData@d_last 0042  
              __size_of_i2c1_driver_startRX 0003                    processGestureData@l_last 0043  
                               ??_I2C_Start 0020                    processGestureData@r_last 0044  
                  __size_of_PIN_MANAGER_IOC 0006                    processGestureData@u_last 0041  
                   _processGestureData$1272 0039                     _processGestureData$1273 003B  
                   _processGestureData$1274 003D                     _processGestureData$1275 003F  
                      ?_i2c_busCollisionISR 0070                            __CFG_LPBOREN$OFF 0000  
                      __end_of_mssp1_setIRQ 0A86                      __end_of_I2C_Write_Byte 0C2E  
                          ??_PMD_Initialize 0020             setLightIntLowThreshold@val_high 002E  
                                  ??___wmul 0024                        ?_enableGestureSensor 0070  
                             ??_readGesture 0051                               ?_do_I2C_RESET 0070  
                        setGestureMode@mode 002B                     _setLightIntLowThreshold 0D27  
                 setGestureIntEnable@enable 002C                               ??_LEDs_SetLow 0020  
                  setAmbientLightGain@drive 002B                                 ?_returnStop 0070  
            __end_of_do_I2C_DO_NACK_RESTART 0AD2                               ??_setLEDBoost 002A  
                             ??_setLEDDrive 002A                        _i2c1_driver_sendNACK 0AD6  
                    setGestureIntEnable@val 002B                                 __pbssCOMMON 0076  
                                 ___latbits 0002                        _i2c1_driver_resetBus 0A74  
                             __pcstackBANK0 0020                               __pcstackBANK1 00A0  
                             __pcstackBANK2 0120                                   _do_I2C_RX 0F70  
                                 _do_I2C_TX 07B1                 ?_IOCCF1_SetInterruptHandler 0020  
            __size_of_do_I2C_SEND_ADR_WRITE 0007               __size_ofi1_i2c1_driver_TXData 0005  
             __end_of_do_I2C_SEND_ADR_WRITE 0B16                       readGesture@fifo_data2 00A0  
                 __size_of_i2c1_driver_open 000A                       readGesture@fifo_level 0058  
                 __size_of_i2c1_driver_stop 0003                                    ?_i2c_ISR 0070  
                       __size_of_initialize 0116                             _do_I2C_TX_EMPTY 0DF6  
                                 __pnvBANK0 006E                      __size_of_handleGesture 0044  
                     ??_i2c_busCollisionISR 0070                       __end_of_fsmStateTable 1020  
                    _PIN_MANAGER_Initialize 0EF1                     ??i1_i2c1_driver_restart 0070  
                   ??i1_i2c1_driver_startRX 0070                             ?_I2C_Write_Byte 0070  
                     ??_enableGestureSensor 0030                              ??_do_I2C_RESET 0070  
                                  ?___awdiv 0026                  __size_of_wireWriteDataByte 001B  
                  ??_do_I2C_DO_ADDRESS_NACK 0070                 _i2c1_driver_busCollisionISR 0078  
                       _setProxIntLowThresh 0BCF                       __end_of_do_I2C_DO_ACK 0ACA  
              ??_INTERRUPT_InterruptManager 0076                    _i2c1_driver_isBufferFull 0B16  
                                  ?_getMode 0070                             ??_decodeGesture 0020  
                         ?_wireReadDataByte 0070                  ??_do_I2C_SEND_RESTART_READ 0070  
                     ?_i2c1_driver_sendNACK 0070             __end_ofi1_i2c1_driver_getRXData 0A83  
                          ??_mssp1_clearIRQ 0070            ??_IOCCF1_DefaultInterruptHandler 0070  
           ?_IOCCF1_DefaultInterruptHandler 0070                                 _enablePower 0B75  
                        ??_wireReadDataByte 0026                         __end_of_readGesture 06AC  
                     ?_i2c1_driver_resetBus 0070          __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                                  _I2C_Stop 0AA7                    ??_resetGestureParameters 0020  
                                  ?_setMode 002B                         __end_of_LEDs_SetLow 0B02  
                                ?_do_I2C_RX 0070                                  ?_do_I2C_TX 0070  
                         _i2c1_driver_start 0A9E                         __end_of_setLEDBoost 0E59  
                       __end_of_setLEDDrive 0D77                        ?_setProxIntLowThresh 0070  
                     readGesture@bytes_read 0056                          ?_i2c1_driver_start 0070  
                            ___wmul@product 0024                                    _LATAbits 010C  
                                  _LATCbits 010E                         __size_of_returnStop 0002  
                                 clear_ram0 0B02                                    _PIE0bits 0090  
                                  _PIE1bits 0091                __size_of_setGestureIntEnable 002B  
                   _GestureInterruptHandler 0AAA                         _gesture_near_count_ 0063  
                       ??_i2c1_driver_start 0020         __size_of_INTERRUPT_InterruptManager 0027  
                                  _PIR0bits 0010                                    _PIR1bits 0011  
                     __end_of_I2C_Read_Byte 0B5C                   ??_setLightIntLowThreshold 002C  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                            setLEDBoost@val 002C                                    _SSP1STAT 0214  
                __end_ofi1_i2c1_driver_stop 0A7D                           ??_PIN_MANAGER_IOC 0070  
                     __end_of_I2C_Send_NACK 0A9E                              setLEDDrive@val 002C  
          processGestureData@lr_ratio_first 0033                           ___wmul@multiplier 0020  
                         ?_do_I2C_SEND_STOP 0070                   processGestureData@d_first 0046  
                             _handleGesture 0F2C                   __end_of_i2c1_driver_start 0AA1  
                             ??_returnReset 0071                          ??_do_I2C_SEND_STOP 0070  
               __size_of_i2c1_driver_TXData 0006                 __end_of_setAmbientLightGain 0C68  
                 processGestureData@l_first 0047           __end_of_do_I2C_SEND_RESTART_WRITE 0ABE  
                   __end_of_do_I2C_TX_EMPTY 0E27                __end_of_setGestureExitThresh 0BBC  
                 processGestureData@r_first 0048                   processGestureData@u_first 0045  
                     ??_setProxIntLowThresh 002A                __size_of_do_I2C_SEND_RESTART 0004  
               __size_of_i2c1_driver_isNACK 0008                           setGestureGain@val 002C  
                     __size_of_mssp1_setIRQ 0003                         _do_I2C_DO_NACK_STOP 0ACA  
                          __size_of_i2c_ISR 0026                  ??_setLightIntHighThreshold 002C  
               __size_of_setGestureLEDDrive 0032                              setMode@reg_val 002E  
            setLightIntLowThreshold@val_low 002D                                ?_do_I2C_IDLE 0070  
                              ?_do_I2C_RCEN 0070                           setGestureMode@val 002C  
                   ?i1_i2c1_driver_sendNACK 0070                     ??_OSCILLATOR_Initialize 0020  
                       _i2c1_driver_sendACK 0AAE                            __size_of___awdiv 0052  
             __size_of_setProxIntHighThresh 0013                                 _readGesture 05BC  
           __size_of_do_I2C_DO_ADDRESS_NACK 002B                         i2c1_driver_TXData@d 0020  
                    ??_i2c1_driver_sendNACK 0020                                ??_initialize 0030  
                               _LEDs_SetLow 0AFC                                ?_I2C_ReStart 0070  
                       _i2c1_driver_restart 0A8F            setLightIntLowThreshold@threshold 002A  
                      ?_do_I2C_DO_NACK_STOP 0070                         _i2c1_driver_startRX 0A98  
                            ?_handleGesture 0070                __end_of_do_I2C_SEND_ADR_READ 0B2D  
                          __size_of_getMode 0009                      ??_i2c1_driver_resetBus 0070  
                      readGesture@fifo_data 0120                                 _setLEDBoost 0E27  
                               _setLEDDrive 0D4E             __size_of_resetGestureParameters 0015  
                              _mssp1_setIRQ 0A83             __end_of_setLightIntLowThreshold 0D4E  
                               ??_do_I2C_RX 0070                                 ??_do_I2C_TX 0070  
                     setGestureLEDDrive@val 002C                            __size_of_setMode 004F  
                                  __ptext10 0E59                                    __ptext11 0BA9  
                                  __ptext20 0710                                    __ptext12 0B96  
                                  __ptext21 0B83                                    __ptext13 0C4A  
                                  __ptext30 0762                                    __ptext22 0318  
                                  __ptext14 0B47                                    __ptext31 0BF7  
                                  __ptext23 0AFC                                    __ptext15 0F2C  
                                  __ptext40 0A9B                                    __ptext32 0B3E  
                                  __ptext24 06AC                                    __ptext16 05BC  
                                  __ptext41 0AD6                                    __ptext33 0C68  
                                  __ptext25 0E27                                    __ptext17 0FB6  
                                  __ptext50 0B2D                                    __ptext42 0B51  
                                  __ptext34 0C12                                    __ptext26 0CB2  
                                  __ptext18 004D                                    __ptext51 0EF1  
                                  __ptext43 0A98                                    __ptext35 0AF6  
                                  __ptext27 0DCB                                    __ptext19 0C2E  
                                  __ptext60 07B1                                    __ptext52 0AF0  
                                  __ptext44 0B16                                    __ptext36 0AA7  
                                  __ptext28 0BE2                                    __ptext61 0DA0  
                                  __ptext53 0B35                                    __ptext45 0A95  
                                  __ptext37 0AA4                                    __ptext29 0B75  
                                  __ptext70 0ABA                                    __ptext62 0ACE  
                                  __ptext46 0A92                                    __ptext38 0AA1  
                                  __ptext71 0AB6                                    __ptext63 0ACA  
                                  __ptext55 0A8C                                    __ptext47 0A8F  
                                  __ptext39 0A9E                                    __ptext80 0A74  
                                  __ptext72 0ADF                                    __ptext64 0AC6  
                                  __ptext56 0A89                                    __ptext48 0B5C  
                                  __ptext81 0A7D                                    __ptext73 0B08  
                                  __ptext65 0AEA                                    __ptext57 0C8C  
                                  __ptext49 0AD2                                    __ptext90 0A73  
                                  __ptext82 0002                                    __ptext74 0DF6  
                                  __ptext66 0B0F                                    __ptext58 0A86  
                                  __ptext83 0A75                                    __ptext75 0A83  
                                  __ptext67 0B25                                    __ptext59 0F70  
                                  __ptext84 0A7A                                    __ptext76 0B1D  
                                  __ptext68 0AC2                                    __ptext85 0A77  
                                  __ptext77 0ADA                                    __ptext69 0ABE  
                                  __ptext86 0AAE                                    __ptext78 0A80  
                                  __ptext87 0AE4                                    __ptext79 0AB2  
                                  __ptext88 0B68                                    __ptext89 0AAA  
                     _setGestureEnterThresh 0B96                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216              setGestureEnterThresh@threshold 002B  
                      ?_i2c1_driver_sendACK 0070                        __end_of_do_I2C_RESET 0B0F  
                                _IOCCF1_ISR 0B68                        ?_i2c1_driver_restart 0070  
                       __end_of_returnReset 0004                   ??_GestureInterruptHandler 0070  
                          _i2c1_driver_open 0B47                            _i2c1_driver_stop 0AA4  
                             __size_of_main 0034                        ?_i2c1_driver_startRX 0070  
                         ?_setProximityGain 0070              __size_of_i2c1_driver_getRXData 0003  
             __end_of_i2c1_driver_getRXData 0A98                          __end_of_initialize 05BC  
                        ??_setProximityGain 002A            __size_ofi1_i2c1_driver_getRXData 0003  
                        _decodeGesture$1280 0028                          _decodeGesture$1281 002A  
                        _decodeGesture$1282 002C                          _decodeGesture$1283 002E  
                        _decodeGesture$1284 0030                          _decodeGesture$1277 0022  
                        _decodeGesture$1278 0024                          _decodeGesture$1279 0026  
            __end_ofi1_i2c1_driver_sendNACK 0AB6                                    int$flags 007E  
        __end_of_INTERRUPT_InterruptManager 002B                  _INTERRUPT_InterruptManager 0004  
                              _SSP1STATbits 0214                 __size_of_isGestureAvailable 0013  
                       setProximityGain@val 002C            __end_of_do_I2C_SEND_RESTART_READ 0ABA  
               __size_of_setGestureWaitTime 0027                  __end_of_processGestureData 0318  
                              ??_returnStop 0071                       ??_do_I2C_DO_NACK_STOP 0070  
                   __size_of_setGestureGain 0032                                  _INTCONbits 000B  
                   __size_of_setGestureMode 0027                  __size_of_i2c1_driver_start 0003  
                    setAmbientLightGain@val 002C                       ??_i2c1_driver_sendACK 0070  
                          ?_do_I2C_TX_EMPTY 0070                     __size_of_WDT_Initialize 0004  
                    _do_I2C_DO_ADDRESS_NACK 0DA0                                    intlevel1 0000  
                     ??_i2c1_driver_restart 0020                       ??_i2c1_driver_startRX 0020  
                   ?_PIN_MANAGER_Initialize 0070                            ??_I2C_Write_Byte 0021  
                         __CFG_CLKOUTEN$OFF 0000                          __end_of_returnStop 0A77  
                    _resetGestureParameters 0BE2                  ??_i2c1_driver_isBufferFull 0020  
            __size_ofi1_i2c1_driver_restart 0003               __end_ofi1_i2c1_driver_restart 0A7A  
            __size_ofi1_i2c1_driver_startRX 0003                __end_ofi1_i2c1_driver_TXData 0ADF  
             __end_ofi1_i2c1_driver_startRX 0A80                        _setGestureExitThresh 0BA9  
                           ??_handleGesture 005B                               __pstringtext1 1000  
                                _SSP1DATPPS 0E21                                ?_enablePower 0070  
                                _SSP1CLKPPS 0E20                         _setGestureIntEnable 0DCB  
                          setLEDBoost@boost 002D                      ?_setGestureEnterThresh 0070  
                               _returnReset 0002                                 ?_IOCCF1_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0F2C                 __end_of_i2c_busCollisionISR 0A8F  
                 __size_of_wireReadDataByte 0024      __end_of_IOCCF1_DefaultInterruptHandler 0A74  
   __size_of_IOCCF1_DefaultInterruptHandler 0001              _IOCCF1_DefaultInterruptHandler 0A73  
                          setLEDDrive@drive 002D                         processGestureData@i 004D  
                           _PIN_MANAGER_IOC 0AE4                 __end_of_enableGestureSensor 0710  
                     _do_I2C_SEND_ADR_WRITE 0B0F                        ?_setGestureIntEnable 0070  
                      _do_I2C_SEND_ADR_READ 0B25                     _IOCCF1_InterruptHandler 006E  
          __end_of_setLightIntHighThreshold 0D27  
