

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 10 08:38:56 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2
    36                           	psect	text4,local,class=CODE,merge=1,delta=2
    37                           	psect	text5,local,class=CODE,merge=1,delta=2
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	psect	text24,local,class=CODE,merge=1,delta=2
    57                           	psect	text25,local,class=CODE,merge=1,delta=2
    58                           	psect	text26,local,class=CODE,merge=1,delta=2
    59                           	psect	text27,local,class=CODE,merge=1,delta=2
    60                           	psect	text28,local,class=CODE,merge=1,delta=2
    61                           	psect	text29,local,class=CODE,merge=1,delta=2
    62                           	psect	text30,local,class=CODE,merge=1,delta=2
    63                           	psect	text31,local,class=CODE,merge=1,delta=2
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text35,local,class=CODE,merge=1,delta=2
    68                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text37,local,class=CODE,merge=1,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text39,local,class=CODE,merge=1,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2
    78                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text57,local,class=CODE,merge=1,delta=2
    90                           	psect	text58,local,class=CODE,merge=1,delta=2
    91                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    94                           	psect	text62,local,class=CODE,merge=1,delta=2
    95                           	psect	text63,local,class=CODE,merge=1,delta=2
    96                           	psect	text64,local,class=CODE,merge=1,delta=2
    97                           	psect	text65,local,class=CODE,merge=1,delta=2
    98                           	psect	text66,local,class=CODE,merge=1,delta=2
    99                           	psect	text67,local,class=CODE,merge=1,delta=2
   100                           	psect	text68,local,class=CODE,merge=1,delta=2
   101                           	psect	text69,local,class=CODE,merge=1,delta=2
   102                           	psect	text70,local,class=CODE,merge=1,delta=2
   103                           	psect	text71,local,class=CODE,merge=1,delta=2
   104                           	psect	text72,local,class=CODE,merge=1,delta=2
   105                           	psect	text73,local,class=CODE,merge=1,delta=2
   106                           	psect	text74,local,class=CODE,merge=1,delta=2
   107                           	psect	text75,local,class=CODE,merge=1,delta=2
   108                           	psect	text76,local,class=CODE,merge=1,delta=2
   109                           	psect	text77,local,class=CODE,merge=1,delta=2
   110                           	psect	text78,local,class=CODE,merge=1,delta=2
   111                           	psect	text79,local,class=CODE,merge=1,delta=2
   112                           	psect	text80,local,class=CODE,merge=1,delta=2
   113                           	psect	text81,local,class=CODE,merge=1,delta=2
   114                           	psect	text82,local,class=CODE,merge=1,delta=2,group=2
   115                           	psect	text83,local,class=CODE,merge=1,delta=2
   116                           	psect	text84,local,class=CODE,merge=1,delta=2
   117                           	psect	text85,local,class=CODE,merge=1,delta=2
   118                           	psect	text86,local,class=CODE,merge=1,delta=2
   119                           	psect	text87,local,class=CODE,merge=1,delta=2
   120                           	psect	text88,local,class=CODE,merge=1,delta=2
   121                           	psect	intentry,global,class=CODE,delta=2
   122                           	psect	text90,local,class=CODE,merge=1,delta=2
   123                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text92,local,class=CODE,merge=1,delta=2
   125                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text94,local,class=CODE,merge=1,delta=2
   127                           	psect	text95,local,class=CODE,merge=1,delta=2
   128                           	psect	text96,local,class=CODE,merge=1,delta=2
   129                           	psect	text97,local,class=CODE,merge=1,delta=2
   130                           	psect	text98,local,class=CODE,merge=1,delta=2
   131                           	psect	text99,local,class=CODE,merge=1,delta=2
   132                           	psect	text100,local,class=CODE,merge=1,delta=2
   133                           	psect	text101,local,class=CODE,merge=1,delta=2
   134                           	psect	text102,local,class=CODE,merge=1,delta=2
   135                           	psect	text103,local,class=CODE,merge=1,delta=2
   136                           	psect	text104,local,class=CODE,merge=1,delta=2
   137                           	psect	text105,local,class=CODE,merge=1,delta=2
   138                           	psect	text106,local,class=CODE,merge=1,delta=2
   139                           	psect	text107,local,class=CODE,merge=1,delta=2
   140                           	psect	text108,local,class=CODE,merge=1,delta=2
   141                           	psect	text109,local,class=CODE,merge=1,delta=2
   142                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text117,local,class=CODE,merge=1,delta=2
   150                           	psect	text118,local,class=CODE,merge=1,delta=2
   151                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text122,local,class=CODE,merge=1,delta=2
   155                           	psect	text123,local,class=CODE,merge=1,delta=2
   156                           	psect	text124,local,class=CODE,merge=1,delta=2
   157                           	psect	text125,local,class=CODE,merge=1,delta=2
   158                           	psect	text126,local,class=CODE,merge=1,delta=2
   159                           	psect	text127,local,class=CODE,merge=1,delta=2
   160                           	psect	text128,local,class=CODE,merge=1,delta=2
   161                           	dabs	1,0x7E,2
   162  0000                     
   163                           ; Version 2.05
   164                           ; Generated 20/12/2018 GMT
   165                           ; 
   166                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   167                           ; All rights reserved.
   168                           ; 
   169                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   170                           ; 
   171                           ; Redistribution and use in source and binary forms, with or without modification, are
   172                           ; permitted provided that the following conditions are met:
   173                           ; 
   174                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   175                           ;        conditions and the following disclaimer.
   176                           ; 
   177                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   178                           ;        of conditions and the following disclaimer in the documentation and/or other
   179                           ;        materials provided with the distribution.
   180                           ; 
   181                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   182                           ;        software without specific prior written permission.
   183                           ; 
   184                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   185                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   186                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   187                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   188                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   189                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   190                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   191                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   192                           ; 
   193                           ; 
   194                           ; Code-generator required, PIC16F18345 Definitions
   195                           ; 
   196                           ; SFR Addresses
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0008                     	;# 
   206  0009                     	;# 
   207  000A                     	;# 
   208  000B                     	;# 
   209  000C                     	;# 
   210  000D                     	;# 
   211  000E                     	;# 
   212  0010                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0013                     	;# 
   216  0014                     	;# 
   217  0015                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  0019                     	;# 
   225  001A                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001D                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0094                     	;# 
   239  0097                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  018E                     	;# 
   261  0197                     	;# 
   262  0199                     	;# 
   263  0199                     	;# 
   264  0199                     	;# 
   265  019A                     	;# 
   266  019A                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019C                     	;# 
   274  019C                     	;# 
   275  019C                     	;# 
   276  019D                     	;# 
   277  019D                     	;# 
   278  019D                     	;# 
   279  019E                     	;# 
   280  019E                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  019F                     	;# 
   284  019F                     	;# 
   285  019F                     	;# 
   286  019F                     	;# 
   287  020C                     	;# 
   288  020D                     	;# 
   289  020E                     	;# 
   290  0211                     	;# 
   291  0211                     	;# 
   292  0212                     	;# 
   293  0212                     	;# 
   294  0213                     	;# 
   295  0213                     	;# 
   296  0214                     	;# 
   297  0214                     	;# 
   298  0215                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0219                     	;# 
   307  021A                     	;# 
   308  021B                     	;# 
   309  021C                     	;# 
   310  021D                     	;# 
   311  021D                     	;# 
   312  021E                     	;# 
   313  021F                     	;# 
   314  028C                     	;# 
   315  028D                     	;# 
   316  028E                     	;# 
   317  0291                     	;# 
   318  0291                     	;# 
   319  0292                     	;# 
   320  0293                     	;# 
   321  0294                     	;# 
   322  0295                     	;# 
   323  0295                     	;# 
   324  0296                     	;# 
   325  0297                     	;# 
   326  0298                     	;# 
   327  029F                     	;# 
   328  030C                     	;# 
   329  030D                     	;# 
   330  030E                     	;# 
   331  0311                     	;# 
   332  0311                     	;# 
   333  0312                     	;# 
   334  0313                     	;# 
   335  0314                     	;# 
   336  0315                     	;# 
   337  0315                     	;# 
   338  0316                     	;# 
   339  0317                     	;# 
   340  0318                     	;# 
   341  038C                     	;# 
   342  038D                     	;# 
   343  038E                     	;# 
   344  0391                     	;# 
   345  0392                     	;# 
   346  0393                     	;# 
   347  0394                     	;# 
   348  0395                     	;# 
   349  0396                     	;# 
   350  0397                     	;# 
   351  0398                     	;# 
   352  0399                     	;# 
   353  039A                     	;# 
   354  039C                     	;# 
   355  039D                     	;# 
   356  039E                     	;# 
   357  039F                     	;# 
   358  0411                     	;# 
   359  0411                     	;# 
   360  0412                     	;# 
   361  0413                     	;# 
   362  0414                     	;# 
   363  0415                     	;# 
   364  0416                     	;# 
   365  0417                     	;# 
   366  0418                     	;# 
   367  0418                     	;# 
   368  0419                     	;# 
   369  041A                     	;# 
   370  041B                     	;# 
   371  041C                     	;# 
   372  041D                     	;# 
   373  041E                     	;# 
   374  041F                     	;# 
   375  0498                     	;# 
   376  0498                     	;# 
   377  0499                     	;# 
   378  049A                     	;# 
   379  049B                     	;# 
   380  049B                     	;# 
   381  049C                     	;# 
   382  049D                     	;# 
   383  049E                     	;# 
   384  049F                     	;# 
   385  0617                     	;# 
   386  0618                     	;# 
   387  0619                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  061C                     	;# 
   393  061F                     	;# 
   394  0691                     	;# 
   395  0692                     	;# 
   396  0693                     	;# 
   397  0694                     	;# 
   398  0695                     	;# 
   399  0696                     	;# 
   400  0697                     	;# 
   401  0698                     	;# 
   402  0699                     	;# 
   403  0711                     	;# 
   404  0712                     	;# 
   405  0713                     	;# 
   406  0714                     	;# 
   407  0715                     	;# 
   408  0716                     	;# 
   409  0717                     	;# 
   410  0718                     	;# 
   411  0719                     	;# 
   412  0891                     	;# 
   413  0891                     	;# 
   414  0891                     	;# 
   415  0891                     	;# 
   416  0891                     	;# 
   417  0891                     	;# 
   418  0892                     	;# 
   419  0892                     	;# 
   420  0892                     	;# 
   421  0893                     	;# 
   422  0893                     	;# 
   423  0893                     	;# 
   424  0893                     	;# 
   425  0893                     	;# 
   426  0893                     	;# 
   427  0894                     	;# 
   428  0894                     	;# 
   429  0894                     	;# 
   430  0895                     	;# 
   431  0895                     	;# 
   432  0895                     	;# 
   433  0896                     	;# 
   434  0896                     	;# 
   435  0896                     	;# 
   436  089B                     	;# 
   437  0911                     	;# 
   438  0912                     	;# 
   439  0913                     	;# 
   440  0914                     	;# 
   441  0915                     	;# 
   442  0916                     	;# 
   443  0918                     	;# 
   444  0919                     	;# 
   445  091A                     	;# 
   446  091B                     	;# 
   447  091C                     	;# 
   448  091D                     	;# 
   449  091E                     	;# 
   450  091F                     	;# 
   451  0E0F                     	;# 
   452  0E10                     	;# 
   453  0E11                     	;# 
   454  0E12                     	;# 
   455  0E13                     	;# 
   456  0E14                     	;# 
   457  0E15                     	;# 
   458  0E16                     	;# 
   459  0E17                     	;# 
   460  0E18                     	;# 
   461  0E19                     	;# 
   462  0E1A                     	;# 
   463  0E1B                     	;# 
   464  0E1C                     	;# 
   465  0E1D                     	;# 
   466  0E1E                     	;# 
   467  0E1F                     	;# 
   468  0E20                     	;# 
   469  0E21                     	;# 
   470  0E22                     	;# 
   471  0E24                     	;# 
   472  0E25                     	;# 
   473  0E28                     	;# 
   474  0E29                     	;# 
   475  0E2A                     	;# 
   476  0E2B                     	;# 
   477  0E2C                     	;# 
   478  0E2D                     	;# 
   479  0E2E                     	;# 
   480  0E2F                     	;# 
   481  0E90                     	;# 
   482  0E91                     	;# 
   483  0E92                     	;# 
   484  0E94                     	;# 
   485  0E95                     	;# 
   486  0E9C                     	;# 
   487  0E9D                     	;# 
   488  0E9E                     	;# 
   489  0E9F                     	;# 
   490  0EA0                     	;# 
   491  0EA1                     	;# 
   492  0EA2                     	;# 
   493  0EA3                     	;# 
   494  0EA4                     	;# 
   495  0EA5                     	;# 
   496  0EA6                     	;# 
   497  0EA7                     	;# 
   498  0F0F                     	;# 
   499  0F10                     	;# 
   500  0F11                     	;# 
   501  0F12                     	;# 
   502  0F13                     	;# 
   503  0F14                     	;# 
   504  0F15                     	;# 
   505  0F16                     	;# 
   506  0F17                     	;# 
   507  0F18                     	;# 
   508  0F19                     	;# 
   509  0F1A                     	;# 
   510  0F1B                     	;# 
   511  0F1C                     	;# 
   512  0F1D                     	;# 
   513  0F1E                     	;# 
   514  0F1F                     	;# 
   515  0F20                     	;# 
   516  0F21                     	;# 
   517  0F22                     	;# 
   518  0F23                     	;# 
   519  0F24                     	;# 
   520  0F25                     	;# 
   521  0F26                     	;# 
   522  0F27                     	;# 
   523  0F28                     	;# 
   524  0F29                     	;# 
   525  0F2A                     	;# 
   526  0F2B                     	;# 
   527  0F2C                     	;# 
   528  0F2D                     	;# 
   529  0F2E                     	;# 
   530  0F2F                     	;# 
   531  0F30                     	;# 
   532  0F31                     	;# 
   533  0F32                     	;# 
   534  0F33                     	;# 
   535  0F34                     	;# 
   536  0F35                     	;# 
   537  0F36                     	;# 
   538  0F37                     	;# 
   539  0FE4                     	;# 
   540  0FE5                     	;# 
   541  0FE6                     	;# 
   542  0FE7                     	;# 
   543  0FE8                     	;# 
   544  0FE9                     	;# 
   545  0FEA                     	;# 
   546  0FEB                     	;# 
   547  0FED                     	;# 
   548  0FEE                     	;# 
   549  0FEF                     	;# 
   550  0000                     	;# 
   551  0001                     	;# 
   552  0002                     	;# 
   553  0003                     	;# 
   554  0004                     	;# 
   555  0005                     	;# 
   556  0006                     	;# 
   557  0007                     	;# 
   558  0008                     	;# 
   559  0009                     	;# 
   560  000A                     	;# 
   561  000B                     	;# 
   562  000C                     	;# 
   563  000D                     	;# 
   564  000E                     	;# 
   565  0010                     	;# 
   566  0011                     	;# 
   567  0012                     	;# 
   568  0013                     	;# 
   569  0014                     	;# 
   570  0015                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  001D                     	;# 
   582  001E                     	;# 
   583  001F                     	;# 
   584  008C                     	;# 
   585  008D                     	;# 
   586  008E                     	;# 
   587  0090                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0094                     	;# 
   592  0097                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  009F                     	;# 
   599  010C                     	;# 
   600  010D                     	;# 
   601  010E                     	;# 
   602  0111                     	;# 
   603  0112                     	;# 
   604  0113                     	;# 
   605  0114                     	;# 
   606  0115                     	;# 
   607  0116                     	;# 
   608  0117                     	;# 
   609  0118                     	;# 
   610  0119                     	;# 
   611  018C                     	;# 
   612  018D                     	;# 
   613  018E                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  019A                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020D                     	;# 
   642  020E                     	;# 
   643  0211                     	;# 
   644  0211                     	;# 
   645  0212                     	;# 
   646  0212                     	;# 
   647  0213                     	;# 
   648  0213                     	;# 
   649  0214                     	;# 
   650  0214                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0219                     	;# 
   660  021A                     	;# 
   661  021B                     	;# 
   662  021C                     	;# 
   663  021D                     	;# 
   664  021D                     	;# 
   665  021E                     	;# 
   666  021F                     	;# 
   667  028C                     	;# 
   668  028D                     	;# 
   669  028E                     	;# 
   670  0291                     	;# 
   671  0291                     	;# 
   672  0292                     	;# 
   673  0293                     	;# 
   674  0294                     	;# 
   675  0295                     	;# 
   676  0295                     	;# 
   677  0296                     	;# 
   678  0297                     	;# 
   679  0298                     	;# 
   680  029F                     	;# 
   681  030C                     	;# 
   682  030D                     	;# 
   683  030E                     	;# 
   684  0311                     	;# 
   685  0311                     	;# 
   686  0312                     	;# 
   687  0313                     	;# 
   688  0314                     	;# 
   689  0315                     	;# 
   690  0315                     	;# 
   691  0316                     	;# 
   692  0317                     	;# 
   693  0318                     	;# 
   694  038C                     	;# 
   695  038D                     	;# 
   696  038E                     	;# 
   697  0391                     	;# 
   698  0392                     	;# 
   699  0393                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0397                     	;# 
   704  0398                     	;# 
   705  0399                     	;# 
   706  039A                     	;# 
   707  039C                     	;# 
   708  039D                     	;# 
   709  039E                     	;# 
   710  039F                     	;# 
   711  0411                     	;# 
   712  0411                     	;# 
   713  0412                     	;# 
   714  0413                     	;# 
   715  0414                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  0418                     	;# 
   720  0418                     	;# 
   721  0419                     	;# 
   722  041A                     	;# 
   723  041B                     	;# 
   724  041C                     	;# 
   725  041D                     	;# 
   726  041E                     	;# 
   727  041F                     	;# 
   728  0498                     	;# 
   729  0498                     	;# 
   730  0499                     	;# 
   731  049A                     	;# 
   732  049B                     	;# 
   733  049B                     	;# 
   734  049C                     	;# 
   735  049D                     	;# 
   736  049E                     	;# 
   737  049F                     	;# 
   738  0617                     	;# 
   739  0618                     	;# 
   740  0619                     	;# 
   741  0619                     	;# 
   742  061A                     	;# 
   743  061B                     	;# 
   744  061C                     	;# 
   745  061C                     	;# 
   746  061F                     	;# 
   747  0691                     	;# 
   748  0692                     	;# 
   749  0693                     	;# 
   750  0694                     	;# 
   751  0695                     	;# 
   752  0696                     	;# 
   753  0697                     	;# 
   754  0698                     	;# 
   755  0699                     	;# 
   756  0711                     	;# 
   757  0712                     	;# 
   758  0713                     	;# 
   759  0714                     	;# 
   760  0715                     	;# 
   761  0716                     	;# 
   762  0717                     	;# 
   763  0718                     	;# 
   764  0719                     	;# 
   765  0891                     	;# 
   766  0891                     	;# 
   767  0891                     	;# 
   768  0891                     	;# 
   769  0891                     	;# 
   770  0891                     	;# 
   771  0892                     	;# 
   772  0892                     	;# 
   773  0892                     	;# 
   774  0893                     	;# 
   775  0893                     	;# 
   776  0893                     	;# 
   777  0893                     	;# 
   778  0893                     	;# 
   779  0893                     	;# 
   780  0894                     	;# 
   781  0894                     	;# 
   782  0894                     	;# 
   783  0895                     	;# 
   784  0895                     	;# 
   785  0895                     	;# 
   786  0896                     	;# 
   787  0896                     	;# 
   788  0896                     	;# 
   789  089B                     	;# 
   790  0911                     	;# 
   791  0912                     	;# 
   792  0913                     	;# 
   793  0914                     	;# 
   794  0915                     	;# 
   795  0916                     	;# 
   796  0918                     	;# 
   797  0919                     	;# 
   798  091A                     	;# 
   799  091B                     	;# 
   800  091C                     	;# 
   801  091D                     	;# 
   802  091E                     	;# 
   803  091F                     	;# 
   804  0E0F                     	;# 
   805  0E10                     	;# 
   806  0E11                     	;# 
   807  0E12                     	;# 
   808  0E13                     	;# 
   809  0E14                     	;# 
   810  0E15                     	;# 
   811  0E16                     	;# 
   812  0E17                     	;# 
   813  0E18                     	;# 
   814  0E19                     	;# 
   815  0E1A                     	;# 
   816  0E1B                     	;# 
   817  0E1C                     	;# 
   818  0E1D                     	;# 
   819  0E1E                     	;# 
   820  0E1F                     	;# 
   821  0E20                     	;# 
   822  0E21                     	;# 
   823  0E22                     	;# 
   824  0E24                     	;# 
   825  0E25                     	;# 
   826  0E28                     	;# 
   827  0E29                     	;# 
   828  0E2A                     	;# 
   829  0E2B                     	;# 
   830  0E2C                     	;# 
   831  0E2D                     	;# 
   832  0E2E                     	;# 
   833  0E2F                     	;# 
   834  0E90                     	;# 
   835  0E91                     	;# 
   836  0E92                     	;# 
   837  0E94                     	;# 
   838  0E95                     	;# 
   839  0E9C                     	;# 
   840  0E9D                     	;# 
   841  0E9E                     	;# 
   842  0E9F                     	;# 
   843  0EA0                     	;# 
   844  0EA1                     	;# 
   845  0EA2                     	;# 
   846  0EA3                     	;# 
   847  0EA4                     	;# 
   848  0EA5                     	;# 
   849  0EA6                     	;# 
   850  0EA7                     	;# 
   851  0F0F                     	;# 
   852  0F10                     	;# 
   853  0F11                     	;# 
   854  0F12                     	;# 
   855  0F13                     	;# 
   856  0F14                     	;# 
   857  0F15                     	;# 
   858  0F16                     	;# 
   859  0F17                     	;# 
   860  0F18                     	;# 
   861  0F19                     	;# 
   862  0F1A                     	;# 
   863  0F1B                     	;# 
   864  0F1C                     	;# 
   865  0F1D                     	;# 
   866  0F1E                     	;# 
   867  0F1F                     	;# 
   868  0F20                     	;# 
   869  0F21                     	;# 
   870  0F22                     	;# 
   871  0F23                     	;# 
   872  0F24                     	;# 
   873  0F25                     	;# 
   874  0F26                     	;# 
   875  0F27                     	;# 
   876  0F28                     	;# 
   877  0F29                     	;# 
   878  0F2A                     	;# 
   879  0F2B                     	;# 
   880  0F2C                     	;# 
   881  0F2D                     	;# 
   882  0F2E                     	;# 
   883  0F2F                     	;# 
   884  0F30                     	;# 
   885  0F31                     	;# 
   886  0F32                     	;# 
   887  0F33                     	;# 
   888  0F34                     	;# 
   889  0F35                     	;# 
   890  0F36                     	;# 
   891  0F37                     	;# 
   892  0FE4                     	;# 
   893  0FE5                     	;# 
   894  0FE6                     	;# 
   895  0FE7                     	;# 
   896  0FE8                     	;# 
   897  0FE9                     	;# 
   898  0FEA                     	;# 
   899  0FEB                     	;# 
   900  0FED                     	;# 
   901  0FEE                     	;# 
   902  0FEF                     	;# 
   903  0000                     	;# 
   904  0001                     	;# 
   905  0002                     	;# 
   906  0003                     	;# 
   907  0004                     	;# 
   908  0005                     	;# 
   909  0006                     	;# 
   910  0007                     	;# 
   911  0008                     	;# 
   912  0009                     	;# 
   913  000A                     	;# 
   914  000B                     	;# 
   915  000C                     	;# 
   916  000D                     	;# 
   917  000E                     	;# 
   918  0010                     	;# 
   919  0011                     	;# 
   920  0012                     	;# 
   921  0013                     	;# 
   922  0014                     	;# 
   923  0015                     	;# 
   924  0015                     	;# 
   925  0016                     	;# 
   926  0016                     	;# 
   927  0017                     	;# 
   928  0018                     	;# 
   929  0019                     	;# 
   930  0019                     	;# 
   931  001A                     	;# 
   932  001B                     	;# 
   933  001C                     	;# 
   934  001D                     	;# 
   935  001E                     	;# 
   936  001F                     	;# 
   937  008C                     	;# 
   938  008D                     	;# 
   939  008E                     	;# 
   940  0090                     	;# 
   941  0091                     	;# 
   942  0092                     	;# 
   943  0093                     	;# 
   944  0094                     	;# 
   945  0097                     	;# 
   946  009B                     	;# 
   947  009B                     	;# 
   948  009C                     	;# 
   949  009D                     	;# 
   950  009E                     	;# 
   951  009F                     	;# 
   952  010C                     	;# 
   953  010D                     	;# 
   954  010E                     	;# 
   955  0111                     	;# 
   956  0112                     	;# 
   957  0113                     	;# 
   958  0114                     	;# 
   959  0115                     	;# 
   960  0116                     	;# 
   961  0117                     	;# 
   962  0118                     	;# 
   963  0119                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0197                     	;# 
   968  0199                     	;# 
   969  0199                     	;# 
   970  0199                     	;# 
   971  019A                     	;# 
   972  019A                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019C                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019D                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019E                     	;# 
   987  019E                     	;# 
   988  019F                     	;# 
   989  019F                     	;# 
   990  019F                     	;# 
   991  019F                     	;# 
   992  019F                     	;# 
   993  020C                     	;# 
   994  020D                     	;# 
   995  020E                     	;# 
   996  0211                     	;# 
   997  0211                     	;# 
   998  0212                     	;# 
   999  0212                     	;# 
  1000  0213                     	;# 
  1001  0213                     	;# 
  1002  0214                     	;# 
  1003  0214                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0215                     	;# 
  1007  0215                     	;# 
  1008  0216                     	;# 
  1009  0216                     	;# 
  1010  0217                     	;# 
  1011  0217                     	;# 
  1012  0219                     	;# 
  1013  021A                     	;# 
  1014  021B                     	;# 
  1015  021C                     	;# 
  1016  021D                     	;# 
  1017  021D                     	;# 
  1018  021E                     	;# 
  1019  021F                     	;# 
  1020  028C                     	;# 
  1021  028D                     	;# 
  1022  028E                     	;# 
  1023  0291                     	;# 
  1024  0291                     	;# 
  1025  0292                     	;# 
  1026  0293                     	;# 
  1027  0294                     	;# 
  1028  0295                     	;# 
  1029  0295                     	;# 
  1030  0296                     	;# 
  1031  0297                     	;# 
  1032  0298                     	;# 
  1033  029F                     	;# 
  1034  030C                     	;# 
  1035  030D                     	;# 
  1036  030E                     	;# 
  1037  0311                     	;# 
  1038  0311                     	;# 
  1039  0312                     	;# 
  1040  0313                     	;# 
  1041  0314                     	;# 
  1042  0315                     	;# 
  1043  0315                     	;# 
  1044  0316                     	;# 
  1045  0317                     	;# 
  1046  0318                     	;# 
  1047  038C                     	;# 
  1048  038D                     	;# 
  1049  038E                     	;# 
  1050  0391                     	;# 
  1051  0392                     	;# 
  1052  0393                     	;# 
  1053  0394                     	;# 
  1054  0395                     	;# 
  1055  0396                     	;# 
  1056  0397                     	;# 
  1057  0398                     	;# 
  1058  0399                     	;# 
  1059  039A                     	;# 
  1060  039C                     	;# 
  1061  039D                     	;# 
  1062  039E                     	;# 
  1063  039F                     	;# 
  1064  0411                     	;# 
  1065  0411                     	;# 
  1066  0412                     	;# 
  1067  0413                     	;# 
  1068  0414                     	;# 
  1069  0415                     	;# 
  1070  0416                     	;# 
  1071  0417                     	;# 
  1072  0418                     	;# 
  1073  0418                     	;# 
  1074  0419                     	;# 
  1075  041A                     	;# 
  1076  041B                     	;# 
  1077  041C                     	;# 
  1078  041D                     	;# 
  1079  041E                     	;# 
  1080  041F                     	;# 
  1081  0498                     	;# 
  1082  0498                     	;# 
  1083  0499                     	;# 
  1084  049A                     	;# 
  1085  049B                     	;# 
  1086  049B                     	;# 
  1087  049C                     	;# 
  1088  049D                     	;# 
  1089  049E                     	;# 
  1090  049F                     	;# 
  1091  0617                     	;# 
  1092  0618                     	;# 
  1093  0619                     	;# 
  1094  0619                     	;# 
  1095  061A                     	;# 
  1096  061B                     	;# 
  1097  061C                     	;# 
  1098  061C                     	;# 
  1099  061F                     	;# 
  1100  0691                     	;# 
  1101  0692                     	;# 
  1102  0693                     	;# 
  1103  0694                     	;# 
  1104  0695                     	;# 
  1105  0696                     	;# 
  1106  0697                     	;# 
  1107  0698                     	;# 
  1108  0699                     	;# 
  1109  0711                     	;# 
  1110  0712                     	;# 
  1111  0713                     	;# 
  1112  0714                     	;# 
  1113  0715                     	;# 
  1114  0716                     	;# 
  1115  0717                     	;# 
  1116  0718                     	;# 
  1117  0719                     	;# 
  1118  0891                     	;# 
  1119  0891                     	;# 
  1120  0891                     	;# 
  1121  0891                     	;# 
  1122  0891                     	;# 
  1123  0891                     	;# 
  1124  0892                     	;# 
  1125  0892                     	;# 
  1126  0892                     	;# 
  1127  0893                     	;# 
  1128  0893                     	;# 
  1129  0893                     	;# 
  1130  0893                     	;# 
  1131  0893                     	;# 
  1132  0893                     	;# 
  1133  0894                     	;# 
  1134  0894                     	;# 
  1135  0894                     	;# 
  1136  0895                     	;# 
  1137  0895                     	;# 
  1138  0895                     	;# 
  1139  0896                     	;# 
  1140  0896                     	;# 
  1141  0896                     	;# 
  1142  089B                     	;# 
  1143  0911                     	;# 
  1144  0912                     	;# 
  1145  0913                     	;# 
  1146  0914                     	;# 
  1147  0915                     	;# 
  1148  0916                     	;# 
  1149  0918                     	;# 
  1150  0919                     	;# 
  1151  091A                     	;# 
  1152  091B                     	;# 
  1153  091C                     	;# 
  1154  091D                     	;# 
  1155  091E                     	;# 
  1156  091F                     	;# 
  1157  0E0F                     	;# 
  1158  0E10                     	;# 
  1159  0E11                     	;# 
  1160  0E12                     	;# 
  1161  0E13                     	;# 
  1162  0E14                     	;# 
  1163  0E15                     	;# 
  1164  0E16                     	;# 
  1165  0E17                     	;# 
  1166  0E18                     	;# 
  1167  0E19                     	;# 
  1168  0E1A                     	;# 
  1169  0E1B                     	;# 
  1170  0E1C                     	;# 
  1171  0E1D                     	;# 
  1172  0E1E                     	;# 
  1173  0E1F                     	;# 
  1174  0E20                     	;# 
  1175  0E21                     	;# 
  1176  0E22                     	;# 
  1177  0E24                     	;# 
  1178  0E25                     	;# 
  1179  0E28                     	;# 
  1180  0E29                     	;# 
  1181  0E2A                     	;# 
  1182  0E2B                     	;# 
  1183  0E2C                     	;# 
  1184  0E2D                     	;# 
  1185  0E2E                     	;# 
  1186  0E2F                     	;# 
  1187  0E90                     	;# 
  1188  0E91                     	;# 
  1189  0E92                     	;# 
  1190  0E94                     	;# 
  1191  0E95                     	;# 
  1192  0E9C                     	;# 
  1193  0E9D                     	;# 
  1194  0E9E                     	;# 
  1195  0E9F                     	;# 
  1196  0EA0                     	;# 
  1197  0EA1                     	;# 
  1198  0EA2                     	;# 
  1199  0EA3                     	;# 
  1200  0EA4                     	;# 
  1201  0EA5                     	;# 
  1202  0EA6                     	;# 
  1203  0EA7                     	;# 
  1204  0F0F                     	;# 
  1205  0F10                     	;# 
  1206  0F11                     	;# 
  1207  0F12                     	;# 
  1208  0F13                     	;# 
  1209  0F14                     	;# 
  1210  0F15                     	;# 
  1211  0F16                     	;# 
  1212  0F17                     	;# 
  1213  0F18                     	;# 
  1214  0F19                     	;# 
  1215  0F1A                     	;# 
  1216  0F1B                     	;# 
  1217  0F1C                     	;# 
  1218  0F1D                     	;# 
  1219  0F1E                     	;# 
  1220  0F1F                     	;# 
  1221  0F20                     	;# 
  1222  0F21                     	;# 
  1223  0F22                     	;# 
  1224  0F23                     	;# 
  1225  0F24                     	;# 
  1226  0F25                     	;# 
  1227  0F26                     	;# 
  1228  0F27                     	;# 
  1229  0F28                     	;# 
  1230  0F29                     	;# 
  1231  0F2A                     	;# 
  1232  0F2B                     	;# 
  1233  0F2C                     	;# 
  1234  0F2D                     	;# 
  1235  0F2E                     	;# 
  1236  0F2F                     	;# 
  1237  0F30                     	;# 
  1238  0F31                     	;# 
  1239  0F32                     	;# 
  1240  0F33                     	;# 
  1241  0F34                     	;# 
  1242  0F35                     	;# 
  1243  0F36                     	;# 
  1244  0F37                     	;# 
  1245  0FE4                     	;# 
  1246  0FE5                     	;# 
  1247  0FE6                     	;# 
  1248  0FE7                     	;# 
  1249  0FE8                     	;# 
  1250  0FE9                     	;# 
  1251  0FEA                     	;# 
  1252  0FEB                     	;# 
  1253  0FED                     	;# 
  1254  0FEE                     	;# 
  1255  0FEF                     	;# 
  1256  0000                     	;# 
  1257  0001                     	;# 
  1258  0002                     	;# 
  1259  0003                     	;# 
  1260  0004                     	;# 
  1261  0005                     	;# 
  1262  0006                     	;# 
  1263  0007                     	;# 
  1264  0008                     	;# 
  1265  0009                     	;# 
  1266  000A                     	;# 
  1267  000B                     	;# 
  1268  000C                     	;# 
  1269  000D                     	;# 
  1270  000E                     	;# 
  1271  0010                     	;# 
  1272  0011                     	;# 
  1273  0012                     	;# 
  1274  0013                     	;# 
  1275  0014                     	;# 
  1276  0015                     	;# 
  1277  0015                     	;# 
  1278  0016                     	;# 
  1279  0016                     	;# 
  1280  0017                     	;# 
  1281  0018                     	;# 
  1282  0019                     	;# 
  1283  0019                     	;# 
  1284  001A                     	;# 
  1285  001B                     	;# 
  1286  001C                     	;# 
  1287  001D                     	;# 
  1288  001E                     	;# 
  1289  001F                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  0090                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0093                     	;# 
  1297  0094                     	;# 
  1298  0097                     	;# 
  1299  009B                     	;# 
  1300  009B                     	;# 
  1301  009C                     	;# 
  1302  009D                     	;# 
  1303  009E                     	;# 
  1304  009F                     	;# 
  1305  010C                     	;# 
  1306  010D                     	;# 
  1307  010E                     	;# 
  1308  0111                     	;# 
  1309  0112                     	;# 
  1310  0113                     	;# 
  1311  0114                     	;# 
  1312  0115                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  0118                     	;# 
  1316  0119                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0197                     	;# 
  1321  0199                     	;# 
  1322  0199                     	;# 
  1323  0199                     	;# 
  1324  019A                     	;# 
  1325  019A                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019D                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019E                     	;# 
  1340  019E                     	;# 
  1341  019F                     	;# 
  1342  019F                     	;# 
  1343  019F                     	;# 
  1344  019F                     	;# 
  1345  019F                     	;# 
  1346  020C                     	;# 
  1347  020D                     	;# 
  1348  020E                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0219                     	;# 
  1366  021A                     	;# 
  1367  021B                     	;# 
  1368  021C                     	;# 
  1369  021D                     	;# 
  1370  021D                     	;# 
  1371  021E                     	;# 
  1372  021F                     	;# 
  1373  028C                     	;# 
  1374  028D                     	;# 
  1375  028E                     	;# 
  1376  0291                     	;# 
  1377  0291                     	;# 
  1378  0292                     	;# 
  1379  0293                     	;# 
  1380  0294                     	;# 
  1381  0295                     	;# 
  1382  0295                     	;# 
  1383  0296                     	;# 
  1384  0297                     	;# 
  1385  0298                     	;# 
  1386  029F                     	;# 
  1387  030C                     	;# 
  1388  030D                     	;# 
  1389  030E                     	;# 
  1390  0311                     	;# 
  1391  0311                     	;# 
  1392  0312                     	;# 
  1393  0313                     	;# 
  1394  0314                     	;# 
  1395  0315                     	;# 
  1396  0315                     	;# 
  1397  0316                     	;# 
  1398  0317                     	;# 
  1399  0318                     	;# 
  1400  038C                     	;# 
  1401  038D                     	;# 
  1402  038E                     	;# 
  1403  0391                     	;# 
  1404  0392                     	;# 
  1405  0393                     	;# 
  1406  0394                     	;# 
  1407  0395                     	;# 
  1408  0396                     	;# 
  1409  0397                     	;# 
  1410  0398                     	;# 
  1411  0399                     	;# 
  1412  039A                     	;# 
  1413  039C                     	;# 
  1414  039D                     	;# 
  1415  039E                     	;# 
  1416  039F                     	;# 
  1417  0411                     	;# 
  1418  0411                     	;# 
  1419  0412                     	;# 
  1420  0413                     	;# 
  1421  0414                     	;# 
  1422  0415                     	;# 
  1423  0416                     	;# 
  1424  0417                     	;# 
  1425  0418                     	;# 
  1426  0418                     	;# 
  1427  0419                     	;# 
  1428  041A                     	;# 
  1429  041B                     	;# 
  1430  041C                     	;# 
  1431  041D                     	;# 
  1432  041E                     	;# 
  1433  041F                     	;# 
  1434  0498                     	;# 
  1435  0498                     	;# 
  1436  0499                     	;# 
  1437  049A                     	;# 
  1438  049B                     	;# 
  1439  049B                     	;# 
  1440  049C                     	;# 
  1441  049D                     	;# 
  1442  049E                     	;# 
  1443  049F                     	;# 
  1444  0617                     	;# 
  1445  0618                     	;# 
  1446  0619                     	;# 
  1447  0619                     	;# 
  1448  061A                     	;# 
  1449  061B                     	;# 
  1450  061C                     	;# 
  1451  061C                     	;# 
  1452  061F                     	;# 
  1453  0691                     	;# 
  1454  0692                     	;# 
  1455  0693                     	;# 
  1456  0694                     	;# 
  1457  0695                     	;# 
  1458  0696                     	;# 
  1459  0697                     	;# 
  1460  0698                     	;# 
  1461  0699                     	;# 
  1462  0711                     	;# 
  1463  0712                     	;# 
  1464  0713                     	;# 
  1465  0714                     	;# 
  1466  0715                     	;# 
  1467  0716                     	;# 
  1468  0717                     	;# 
  1469  0718                     	;# 
  1470  0719                     	;# 
  1471  0891                     	;# 
  1472  0891                     	;# 
  1473  0891                     	;# 
  1474  0891                     	;# 
  1475  0891                     	;# 
  1476  0891                     	;# 
  1477  0892                     	;# 
  1478  0892                     	;# 
  1479  0892                     	;# 
  1480  0893                     	;# 
  1481  0893                     	;# 
  1482  0893                     	;# 
  1483  0893                     	;# 
  1484  0893                     	;# 
  1485  0893                     	;# 
  1486  0894                     	;# 
  1487  0894                     	;# 
  1488  0894                     	;# 
  1489  0895                     	;# 
  1490  0895                     	;# 
  1491  0895                     	;# 
  1492  0896                     	;# 
  1493  0896                     	;# 
  1494  0896                     	;# 
  1495  089B                     	;# 
  1496  0911                     	;# 
  1497  0912                     	;# 
  1498  0913                     	;# 
  1499  0914                     	;# 
  1500  0915                     	;# 
  1501  0916                     	;# 
  1502  0918                     	;# 
  1503  0919                     	;# 
  1504  091A                     	;# 
  1505  091B                     	;# 
  1506  091C                     	;# 
  1507  091D                     	;# 
  1508  091E                     	;# 
  1509  091F                     	;# 
  1510  0E0F                     	;# 
  1511  0E10                     	;# 
  1512  0E11                     	;# 
  1513  0E12                     	;# 
  1514  0E13                     	;# 
  1515  0E14                     	;# 
  1516  0E15                     	;# 
  1517  0E16                     	;# 
  1518  0E17                     	;# 
  1519  0E18                     	;# 
  1520  0E19                     	;# 
  1521  0E1A                     	;# 
  1522  0E1B                     	;# 
  1523  0E1C                     	;# 
  1524  0E1D                     	;# 
  1525  0E1E                     	;# 
  1526  0E1F                     	;# 
  1527  0E20                     	;# 
  1528  0E21                     	;# 
  1529  0E22                     	;# 
  1530  0E24                     	;# 
  1531  0E25                     	;# 
  1532  0E28                     	;# 
  1533  0E29                     	;# 
  1534  0E2A                     	;# 
  1535  0E2B                     	;# 
  1536  0E2C                     	;# 
  1537  0E2D                     	;# 
  1538  0E2E                     	;# 
  1539  0E2F                     	;# 
  1540  0E90                     	;# 
  1541  0E91                     	;# 
  1542  0E92                     	;# 
  1543  0E94                     	;# 
  1544  0E95                     	;# 
  1545  0E9C                     	;# 
  1546  0E9D                     	;# 
  1547  0E9E                     	;# 
  1548  0E9F                     	;# 
  1549  0EA0                     	;# 
  1550  0EA1                     	;# 
  1551  0EA2                     	;# 
  1552  0EA3                     	;# 
  1553  0EA4                     	;# 
  1554  0EA5                     	;# 
  1555  0EA6                     	;# 
  1556  0EA7                     	;# 
  1557  0F0F                     	;# 
  1558  0F10                     	;# 
  1559  0F11                     	;# 
  1560  0F12                     	;# 
  1561  0F13                     	;# 
  1562  0F14                     	;# 
  1563  0F15                     	;# 
  1564  0F16                     	;# 
  1565  0F17                     	;# 
  1566  0F18                     	;# 
  1567  0F19                     	;# 
  1568  0F1A                     	;# 
  1569  0F1B                     	;# 
  1570  0F1C                     	;# 
  1571  0F1D                     	;# 
  1572  0F1E                     	;# 
  1573  0F1F                     	;# 
  1574  0F20                     	;# 
  1575  0F21                     	;# 
  1576  0F22                     	;# 
  1577  0F23                     	;# 
  1578  0F24                     	;# 
  1579  0F25                     	;# 
  1580  0F26                     	;# 
  1581  0F27                     	;# 
  1582  0F28                     	;# 
  1583  0F29                     	;# 
  1584  0F2A                     	;# 
  1585  0F2B                     	;# 
  1586  0F2C                     	;# 
  1587  0F2D                     	;# 
  1588  0F2E                     	;# 
  1589  0F2F                     	;# 
  1590  0F30                     	;# 
  1591  0F31                     	;# 
  1592  0F32                     	;# 
  1593  0F33                     	;# 
  1594  0F34                     	;# 
  1595  0F35                     	;# 
  1596  0F36                     	;# 
  1597  0F37                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0013                     	;# 
  1628  0014                     	;# 
  1629  0015                     	;# 
  1630  0015                     	;# 
  1631  0016                     	;# 
  1632  0016                     	;# 
  1633  0017                     	;# 
  1634  0018                     	;# 
  1635  0019                     	;# 
  1636  0019                     	;# 
  1637  001A                     	;# 
  1638  001B                     	;# 
  1639  001C                     	;# 
  1640  001D                     	;# 
  1641  001E                     	;# 
  1642  001F                     	;# 
  1643  008C                     	;# 
  1644  008D                     	;# 
  1645  008E                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0092                     	;# 
  1649  0093                     	;# 
  1650  0094                     	;# 
  1651  0097                     	;# 
  1652  009B                     	;# 
  1653  009B                     	;# 
  1654  009C                     	;# 
  1655  009D                     	;# 
  1656  009E                     	;# 
  1657  009F                     	;# 
  1658  010C                     	;# 
  1659  010D                     	;# 
  1660  010E                     	;# 
  1661  0111                     	;# 
  1662  0112                     	;# 
  1663  0113                     	;# 
  1664  0114                     	;# 
  1665  0115                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  0118                     	;# 
  1669  0119                     	;# 
  1670  018C                     	;# 
  1671  018D                     	;# 
  1672  018E                     	;# 
  1673  0197                     	;# 
  1674  0199                     	;# 
  1675  0199                     	;# 
  1676  0199                     	;# 
  1677  019A                     	;# 
  1678  019A                     	;# 
  1679  019A                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019C                     	;# 
  1686  019C                     	;# 
  1687  019C                     	;# 
  1688  019D                     	;# 
  1689  019D                     	;# 
  1690  019D                     	;# 
  1691  019E                     	;# 
  1692  019E                     	;# 
  1693  019E                     	;# 
  1694  019F                     	;# 
  1695  019F                     	;# 
  1696  019F                     	;# 
  1697  019F                     	;# 
  1698  019F                     	;# 
  1699  020C                     	;# 
  1700  020D                     	;# 
  1701  020E                     	;# 
  1702  0211                     	;# 
  1703  0211                     	;# 
  1704  0212                     	;# 
  1705  0212                     	;# 
  1706  0213                     	;# 
  1707  0213                     	;# 
  1708  0214                     	;# 
  1709  0214                     	;# 
  1710  0215                     	;# 
  1711  0215                     	;# 
  1712  0215                     	;# 
  1713  0215                     	;# 
  1714  0216                     	;# 
  1715  0216                     	;# 
  1716  0217                     	;# 
  1717  0217                     	;# 
  1718  0219                     	;# 
  1719  021A                     	;# 
  1720  021B                     	;# 
  1721  021C                     	;# 
  1722  021D                     	;# 
  1723  021D                     	;# 
  1724  021E                     	;# 
  1725  021F                     	;# 
  1726  028C                     	;# 
  1727  028D                     	;# 
  1728  028E                     	;# 
  1729  0291                     	;# 
  1730  0291                     	;# 
  1731  0292                     	;# 
  1732  0293                     	;# 
  1733  0294                     	;# 
  1734  0295                     	;# 
  1735  0295                     	;# 
  1736  0296                     	;# 
  1737  0297                     	;# 
  1738  0298                     	;# 
  1739  029F                     	;# 
  1740  030C                     	;# 
  1741  030D                     	;# 
  1742  030E                     	;# 
  1743  0311                     	;# 
  1744  0311                     	;# 
  1745  0312                     	;# 
  1746  0313                     	;# 
  1747  0314                     	;# 
  1748  0315                     	;# 
  1749  0315                     	;# 
  1750  0316                     	;# 
  1751  0317                     	;# 
  1752  0318                     	;# 
  1753  038C                     	;# 
  1754  038D                     	;# 
  1755  038E                     	;# 
  1756  0391                     	;# 
  1757  0392                     	;# 
  1758  0393                     	;# 
  1759  0394                     	;# 
  1760  0395                     	;# 
  1761  0396                     	;# 
  1762  0397                     	;# 
  1763  0398                     	;# 
  1764  0399                     	;# 
  1765  039A                     	;# 
  1766  039C                     	;# 
  1767  039D                     	;# 
  1768  039E                     	;# 
  1769  039F                     	;# 
  1770  0411                     	;# 
  1771  0411                     	;# 
  1772  0412                     	;# 
  1773  0413                     	;# 
  1774  0414                     	;# 
  1775  0415                     	;# 
  1776  0416                     	;# 
  1777  0417                     	;# 
  1778  0418                     	;# 
  1779  0418                     	;# 
  1780  0419                     	;# 
  1781  041A                     	;# 
  1782  041B                     	;# 
  1783  041C                     	;# 
  1784  041D                     	;# 
  1785  041E                     	;# 
  1786  041F                     	;# 
  1787  0498                     	;# 
  1788  0498                     	;# 
  1789  0499                     	;# 
  1790  049A                     	;# 
  1791  049B                     	;# 
  1792  049B                     	;# 
  1793  049C                     	;# 
  1794  049D                     	;# 
  1795  049E                     	;# 
  1796  049F                     	;# 
  1797  0617                     	;# 
  1798  0618                     	;# 
  1799  0619                     	;# 
  1800  0619                     	;# 
  1801  061A                     	;# 
  1802  061B                     	;# 
  1803  061C                     	;# 
  1804  061C                     	;# 
  1805  061F                     	;# 
  1806  0691                     	;# 
  1807  0692                     	;# 
  1808  0693                     	;# 
  1809  0694                     	;# 
  1810  0695                     	;# 
  1811  0696                     	;# 
  1812  0697                     	;# 
  1813  0698                     	;# 
  1814  0699                     	;# 
  1815  0711                     	;# 
  1816  0712                     	;# 
  1817  0713                     	;# 
  1818  0714                     	;# 
  1819  0715                     	;# 
  1820  0716                     	;# 
  1821  0717                     	;# 
  1822  0718                     	;# 
  1823  0719                     	;# 
  1824  0891                     	;# 
  1825  0891                     	;# 
  1826  0891                     	;# 
  1827  0891                     	;# 
  1828  0891                     	;# 
  1829  0891                     	;# 
  1830  0892                     	;# 
  1831  0892                     	;# 
  1832  0892                     	;# 
  1833  0893                     	;# 
  1834  0893                     	;# 
  1835  0893                     	;# 
  1836  0893                     	;# 
  1837  0893                     	;# 
  1838  0893                     	;# 
  1839  0894                     	;# 
  1840  0894                     	;# 
  1841  0894                     	;# 
  1842  0895                     	;# 
  1843  0895                     	;# 
  1844  0895                     	;# 
  1845  0896                     	;# 
  1846  0896                     	;# 
  1847  0896                     	;# 
  1848  089B                     	;# 
  1849  0911                     	;# 
  1850  0912                     	;# 
  1851  0913                     	;# 
  1852  0914                     	;# 
  1853  0915                     	;# 
  1854  0916                     	;# 
  1855  0918                     	;# 
  1856  0919                     	;# 
  1857  091A                     	;# 
  1858  091B                     	;# 
  1859  091C                     	;# 
  1860  091D                     	;# 
  1861  091E                     	;# 
  1862  091F                     	;# 
  1863  0E0F                     	;# 
  1864  0E10                     	;# 
  1865  0E11                     	;# 
  1866  0E12                     	;# 
  1867  0E13                     	;# 
  1868  0E14                     	;# 
  1869  0E15                     	;# 
  1870  0E16                     	;# 
  1871  0E17                     	;# 
  1872  0E18                     	;# 
  1873  0E19                     	;# 
  1874  0E1A                     	;# 
  1875  0E1B                     	;# 
  1876  0E1C                     	;# 
  1877  0E1D                     	;# 
  1878  0E1E                     	;# 
  1879  0E1F                     	;# 
  1880  0E20                     	;# 
  1881  0E21                     	;# 
  1882  0E22                     	;# 
  1883  0E24                     	;# 
  1884  0E25                     	;# 
  1885  0E28                     	;# 
  1886  0E29                     	;# 
  1887  0E2A                     	;# 
  1888  0E2B                     	;# 
  1889  0E2C                     	;# 
  1890  0E2D                     	;# 
  1891  0E2E                     	;# 
  1892  0E2F                     	;# 
  1893  0E90                     	;# 
  1894  0E91                     	;# 
  1895  0E92                     	;# 
  1896  0E94                     	;# 
  1897  0E95                     	;# 
  1898  0E9C                     	;# 
  1899  0E9D                     	;# 
  1900  0E9E                     	;# 
  1901  0E9F                     	;# 
  1902  0EA0                     	;# 
  1903  0EA1                     	;# 
  1904  0EA2                     	;# 
  1905  0EA3                     	;# 
  1906  0EA4                     	;# 
  1907  0EA5                     	;# 
  1908  0EA6                     	;# 
  1909  0EA7                     	;# 
  1910  0F0F                     	;# 
  1911  0F10                     	;# 
  1912  0F11                     	;# 
  1913  0F12                     	;# 
  1914  0F13                     	;# 
  1915  0F14                     	;# 
  1916  0F15                     	;# 
  1917  0F16                     	;# 
  1918  0F17                     	;# 
  1919  0F18                     	;# 
  1920  0F19                     	;# 
  1921  0F1A                     	;# 
  1922  0F1B                     	;# 
  1923  0F1C                     	;# 
  1924  0F1D                     	;# 
  1925  0F1E                     	;# 
  1926  0F1F                     	;# 
  1927  0F20                     	;# 
  1928  0F21                     	;# 
  1929  0F22                     	;# 
  1930  0F23                     	;# 
  1931  0F24                     	;# 
  1932  0F25                     	;# 
  1933  0F26                     	;# 
  1934  0F27                     	;# 
  1935  0F28                     	;# 
  1936  0F29                     	;# 
  1937  0F2A                     	;# 
  1938  0F2B                     	;# 
  1939  0F2C                     	;# 
  1940  0F2D                     	;# 
  1941  0F2E                     	;# 
  1942  0F2F                     	;# 
  1943  0F30                     	;# 
  1944  0F31                     	;# 
  1945  0F32                     	;# 
  1946  0F33                     	;# 
  1947  0F34                     	;# 
  1948  0F35                     	;# 
  1949  0F36                     	;# 
  1950  0F37                     	;# 
  1951  0FE4                     	;# 
  1952  0FE5                     	;# 
  1953  0FE6                     	;# 
  1954  0FE7                     	;# 
  1955  0FE8                     	;# 
  1956  0FE9                     	;# 
  1957  0FEA                     	;# 
  1958  0FEB                     	;# 
  1959  0FED                     	;# 
  1960  0FEE                     	;# 
  1961  0FEF                     	;# 
  1962  0000                     	;# 
  1963  0001                     	;# 
  1964  0002                     	;# 
  1965  0003                     	;# 
  1966  0004                     	;# 
  1967  0005                     	;# 
  1968  0006                     	;# 
  1969  0007                     	;# 
  1970  0008                     	;# 
  1971  0009                     	;# 
  1972  000A                     	;# 
  1973  000B                     	;# 
  1974  000C                     	;# 
  1975  000D                     	;# 
  1976  000E                     	;# 
  1977  0010                     	;# 
  1978  0011                     	;# 
  1979  0012                     	;# 
  1980  0013                     	;# 
  1981  0014                     	;# 
  1982  0015                     	;# 
  1983  0015                     	;# 
  1984  0016                     	;# 
  1985  0016                     	;# 
  1986  0017                     	;# 
  1987  0018                     	;# 
  1988  0019                     	;# 
  1989  0019                     	;# 
  1990  001A                     	;# 
  1991  001B                     	;# 
  1992  001C                     	;# 
  1993  001D                     	;# 
  1994  001E                     	;# 
  1995  001F                     	;# 
  1996  008C                     	;# 
  1997  008D                     	;# 
  1998  008E                     	;# 
  1999  0090                     	;# 
  2000  0091                     	;# 
  2001  0092                     	;# 
  2002  0093                     	;# 
  2003  0094                     	;# 
  2004  0097                     	;# 
  2005  009B                     	;# 
  2006  009B                     	;# 
  2007  009C                     	;# 
  2008  009D                     	;# 
  2009  009E                     	;# 
  2010  009F                     	;# 
  2011  010C                     	;# 
  2012  010D                     	;# 
  2013  010E                     	;# 
  2014  0111                     	;# 
  2015  0112                     	;# 
  2016  0113                     	;# 
  2017  0114                     	;# 
  2018  0115                     	;# 
  2019  0116                     	;# 
  2020  0117                     	;# 
  2021  0118                     	;# 
  2022  0119                     	;# 
  2023  018C                     	;# 
  2024  018D                     	;# 
  2025  018E                     	;# 
  2026  0197                     	;# 
  2027  0199                     	;# 
  2028  0199                     	;# 
  2029  0199                     	;# 
  2030  019A                     	;# 
  2031  019A                     	;# 
  2032  019A                     	;# 
  2033  019B                     	;# 
  2034  019B                     	;# 
  2035  019B                     	;# 
  2036  019B                     	;# 
  2037  019B                     	;# 
  2038  019C                     	;# 
  2039  019C                     	;# 
  2040  019C                     	;# 
  2041  019D                     	;# 
  2042  019D                     	;# 
  2043  019D                     	;# 
  2044  019E                     	;# 
  2045  019E                     	;# 
  2046  019E                     	;# 
  2047  019F                     	;# 
  2048  019F                     	;# 
  2049  019F                     	;# 
  2050  019F                     	;# 
  2051  019F                     	;# 
  2052  020C                     	;# 
  2053  020D                     	;# 
  2054  020E                     	;# 
  2055  0211                     	;# 
  2056  0211                     	;# 
  2057  0212                     	;# 
  2058  0212                     	;# 
  2059  0213                     	;# 
  2060  0213                     	;# 
  2061  0214                     	;# 
  2062  0214                     	;# 
  2063  0215                     	;# 
  2064  0215                     	;# 
  2065  0215                     	;# 
  2066  0215                     	;# 
  2067  0216                     	;# 
  2068  0216                     	;# 
  2069  0217                     	;# 
  2070  0217                     	;# 
  2071  0219                     	;# 
  2072  021A                     	;# 
  2073  021B                     	;# 
  2074  021C                     	;# 
  2075  021D                     	;# 
  2076  021D                     	;# 
  2077  021E                     	;# 
  2078  021F                     	;# 
  2079  028C                     	;# 
  2080  028D                     	;# 
  2081  028E                     	;# 
  2082  0291                     	;# 
  2083  0291                     	;# 
  2084  0292                     	;# 
  2085  0293                     	;# 
  2086  0294                     	;# 
  2087  0295                     	;# 
  2088  0295                     	;# 
  2089  0296                     	;# 
  2090  0297                     	;# 
  2091  0298                     	;# 
  2092  029F                     	;# 
  2093  030C                     	;# 
  2094  030D                     	;# 
  2095  030E                     	;# 
  2096  0311                     	;# 
  2097  0311                     	;# 
  2098  0312                     	;# 
  2099  0313                     	;# 
  2100  0314                     	;# 
  2101  0315                     	;# 
  2102  0315                     	;# 
  2103  0316                     	;# 
  2104  0317                     	;# 
  2105  0318                     	;# 
  2106  038C                     	;# 
  2107  038D                     	;# 
  2108  038E                     	;# 
  2109  0391                     	;# 
  2110  0392                     	;# 
  2111  0393                     	;# 
  2112  0394                     	;# 
  2113  0395                     	;# 
  2114  0396                     	;# 
  2115  0397                     	;# 
  2116  0398                     	;# 
  2117  0399                     	;# 
  2118  039A                     	;# 
  2119  039C                     	;# 
  2120  039D                     	;# 
  2121  039E                     	;# 
  2122  039F                     	;# 
  2123  0411                     	;# 
  2124  0411                     	;# 
  2125  0412                     	;# 
  2126  0413                     	;# 
  2127  0414                     	;# 
  2128  0415                     	;# 
  2129  0416                     	;# 
  2130  0417                     	;# 
  2131  0418                     	;# 
  2132  0418                     	;# 
  2133  0419                     	;# 
  2134  041A                     	;# 
  2135  041B                     	;# 
  2136  041C                     	;# 
  2137  041D                     	;# 
  2138  041E                     	;# 
  2139  041F                     	;# 
  2140  0498                     	;# 
  2141  0498                     	;# 
  2142  0499                     	;# 
  2143  049A                     	;# 
  2144  049B                     	;# 
  2145  049B                     	;# 
  2146  049C                     	;# 
  2147  049D                     	;# 
  2148  049E                     	;# 
  2149  049F                     	;# 
  2150  0617                     	;# 
  2151  0618                     	;# 
  2152  0619                     	;# 
  2153  0619                     	;# 
  2154  061A                     	;# 
  2155  061B                     	;# 
  2156  061C                     	;# 
  2157  061C                     	;# 
  2158  061F                     	;# 
  2159  0691                     	;# 
  2160  0692                     	;# 
  2161  0693                     	;# 
  2162  0694                     	;# 
  2163  0695                     	;# 
  2164  0696                     	;# 
  2165  0697                     	;# 
  2166  0698                     	;# 
  2167  0699                     	;# 
  2168  0711                     	;# 
  2169  0712                     	;# 
  2170  0713                     	;# 
  2171  0714                     	;# 
  2172  0715                     	;# 
  2173  0716                     	;# 
  2174  0717                     	;# 
  2175  0718                     	;# 
  2176  0719                     	;# 
  2177  0891                     	;# 
  2178  0891                     	;# 
  2179  0891                     	;# 
  2180  0891                     	;# 
  2181  0891                     	;# 
  2182  0891                     	;# 
  2183  0892                     	;# 
  2184  0892                     	;# 
  2185  0892                     	;# 
  2186  0893                     	;# 
  2187  0893                     	;# 
  2188  0893                     	;# 
  2189  0893                     	;# 
  2190  0893                     	;# 
  2191  0893                     	;# 
  2192  0894                     	;# 
  2193  0894                     	;# 
  2194  0894                     	;# 
  2195  0895                     	;# 
  2196  0895                     	;# 
  2197  0895                     	;# 
  2198  0896                     	;# 
  2199  0896                     	;# 
  2200  0896                     	;# 
  2201  089B                     	;# 
  2202  0911                     	;# 
  2203  0912                     	;# 
  2204  0913                     	;# 
  2205  0914                     	;# 
  2206  0915                     	;# 
  2207  0916                     	;# 
  2208  0918                     	;# 
  2209  0919                     	;# 
  2210  091A                     	;# 
  2211  091B                     	;# 
  2212  091C                     	;# 
  2213  091D                     	;# 
  2214  091E                     	;# 
  2215  091F                     	;# 
  2216  0E0F                     	;# 
  2217  0E10                     	;# 
  2218  0E11                     	;# 
  2219  0E12                     	;# 
  2220  0E13                     	;# 
  2221  0E14                     	;# 
  2222  0E15                     	;# 
  2223  0E16                     	;# 
  2224  0E17                     	;# 
  2225  0E18                     	;# 
  2226  0E19                     	;# 
  2227  0E1A                     	;# 
  2228  0E1B                     	;# 
  2229  0E1C                     	;# 
  2230  0E1D                     	;# 
  2231  0E1E                     	;# 
  2232  0E1F                     	;# 
  2233  0E20                     	;# 
  2234  0E21                     	;# 
  2235  0E22                     	;# 
  2236  0E24                     	;# 
  2237  0E25                     	;# 
  2238  0E28                     	;# 
  2239  0E29                     	;# 
  2240  0E2A                     	;# 
  2241  0E2B                     	;# 
  2242  0E2C                     	;# 
  2243  0E2D                     	;# 
  2244  0E2E                     	;# 
  2245  0E2F                     	;# 
  2246  0E90                     	;# 
  2247  0E91                     	;# 
  2248  0E92                     	;# 
  2249  0E94                     	;# 
  2250  0E95                     	;# 
  2251  0E9C                     	;# 
  2252  0E9D                     	;# 
  2253  0E9E                     	;# 
  2254  0E9F                     	;# 
  2255  0EA0                     	;# 
  2256  0EA1                     	;# 
  2257  0EA2                     	;# 
  2258  0EA3                     	;# 
  2259  0EA4                     	;# 
  2260  0EA5                     	;# 
  2261  0EA6                     	;# 
  2262  0EA7                     	;# 
  2263  0F0F                     	;# 
  2264  0F10                     	;# 
  2265  0F11                     	;# 
  2266  0F12                     	;# 
  2267  0F13                     	;# 
  2268  0F14                     	;# 
  2269  0F15                     	;# 
  2270  0F16                     	;# 
  2271  0F17                     	;# 
  2272  0F18                     	;# 
  2273  0F19                     	;# 
  2274  0F1A                     	;# 
  2275  0F1B                     	;# 
  2276  0F1C                     	;# 
  2277  0F1D                     	;# 
  2278  0F1E                     	;# 
  2279  0F1F                     	;# 
  2280  0F20                     	;# 
  2281  0F21                     	;# 
  2282  0F22                     	;# 
  2283  0F23                     	;# 
  2284  0F24                     	;# 
  2285  0F25                     	;# 
  2286  0F26                     	;# 
  2287  0F27                     	;# 
  2288  0F28                     	;# 
  2289  0F29                     	;# 
  2290  0F2A                     	;# 
  2291  0F2B                     	;# 
  2292  0F2C                     	;# 
  2293  0F2D                     	;# 
  2294  0F2E                     	;# 
  2295  0F2F                     	;# 
  2296  0F30                     	;# 
  2297  0F31                     	;# 
  2298  0F32                     	;# 
  2299  0F33                     	;# 
  2300  0F34                     	;# 
  2301  0F35                     	;# 
  2302  0F36                     	;# 
  2303  0F37                     	;# 
  2304  0FE4                     	;# 
  2305  0FE5                     	;# 
  2306  0FE6                     	;# 
  2307  0FE7                     	;# 
  2308  0FE8                     	;# 
  2309  0FE9                     	;# 
  2310  0FEA                     	;# 
  2311  0FEB                     	;# 
  2312  0FED                     	;# 
  2313  0FEE                     	;# 
  2314  0FEF                     	;# 
  2315  0000                     	;# 
  2316  0001                     	;# 
  2317  0002                     	;# 
  2318  0003                     	;# 
  2319  0004                     	;# 
  2320  0005                     	;# 
  2321  0006                     	;# 
  2322  0007                     	;# 
  2323  0008                     	;# 
  2324  0009                     	;# 
  2325  000A                     	;# 
  2326  000B                     	;# 
  2327  000C                     	;# 
  2328  000D                     	;# 
  2329  000E                     	;# 
  2330  0010                     	;# 
  2331  0011                     	;# 
  2332  0012                     	;# 
  2333  0013                     	;# 
  2334  0014                     	;# 
  2335  0015                     	;# 
  2336  0015                     	;# 
  2337  0016                     	;# 
  2338  0016                     	;# 
  2339  0017                     	;# 
  2340  0018                     	;# 
  2341  0019                     	;# 
  2342  0019                     	;# 
  2343  001A                     	;# 
  2344  001B                     	;# 
  2345  001C                     	;# 
  2346  001D                     	;# 
  2347  001E                     	;# 
  2348  001F                     	;# 
  2349  008C                     	;# 
  2350  008D                     	;# 
  2351  008E                     	;# 
  2352  0090                     	;# 
  2353  0091                     	;# 
  2354  0092                     	;# 
  2355  0093                     	;# 
  2356  0094                     	;# 
  2357  0097                     	;# 
  2358  009B                     	;# 
  2359  009B                     	;# 
  2360  009C                     	;# 
  2361  009D                     	;# 
  2362  009E                     	;# 
  2363  009F                     	;# 
  2364  010C                     	;# 
  2365  010D                     	;# 
  2366  010E                     	;# 
  2367  0111                     	;# 
  2368  0112                     	;# 
  2369  0113                     	;# 
  2370  0114                     	;# 
  2371  0115                     	;# 
  2372  0116                     	;# 
  2373  0117                     	;# 
  2374  0118                     	;# 
  2375  0119                     	;# 
  2376  018C                     	;# 
  2377  018D                     	;# 
  2378  018E                     	;# 
  2379  0197                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  0199                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019A                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019B                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019C                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019D                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019E                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  019F                     	;# 
  2403  019F                     	;# 
  2404  019F                     	;# 
  2405  020C                     	;# 
  2406  020D                     	;# 
  2407  020E                     	;# 
  2408  0211                     	;# 
  2409  0211                     	;# 
  2410  0212                     	;# 
  2411  0212                     	;# 
  2412  0213                     	;# 
  2413  0213                     	;# 
  2414  0214                     	;# 
  2415  0214                     	;# 
  2416  0215                     	;# 
  2417  0215                     	;# 
  2418  0215                     	;# 
  2419  0215                     	;# 
  2420  0216                     	;# 
  2421  0216                     	;# 
  2422  0217                     	;# 
  2423  0217                     	;# 
  2424  0219                     	;# 
  2425  021A                     	;# 
  2426  021B                     	;# 
  2427  021C                     	;# 
  2428  021D                     	;# 
  2429  021D                     	;# 
  2430  021E                     	;# 
  2431  021F                     	;# 
  2432  028C                     	;# 
  2433  028D                     	;# 
  2434  028E                     	;# 
  2435  0291                     	;# 
  2436  0291                     	;# 
  2437  0292                     	;# 
  2438  0293                     	;# 
  2439  0294                     	;# 
  2440  0295                     	;# 
  2441  0295                     	;# 
  2442  0296                     	;# 
  2443  0297                     	;# 
  2444  0298                     	;# 
  2445  029F                     	;# 
  2446  030C                     	;# 
  2447  030D                     	;# 
  2448  030E                     	;# 
  2449  0311                     	;# 
  2450  0311                     	;# 
  2451  0312                     	;# 
  2452  0313                     	;# 
  2453  0314                     	;# 
  2454  0315                     	;# 
  2455  0315                     	;# 
  2456  0316                     	;# 
  2457  0317                     	;# 
  2458  0318                     	;# 
  2459  038C                     	;# 
  2460  038D                     	;# 
  2461  038E                     	;# 
  2462  0391                     	;# 
  2463  0392                     	;# 
  2464  0393                     	;# 
  2465  0394                     	;# 
  2466  0395                     	;# 
  2467  0396                     	;# 
  2468  0397                     	;# 
  2469  0398                     	;# 
  2470  0399                     	;# 
  2471  039A                     	;# 
  2472  039C                     	;# 
  2473  039D                     	;# 
  2474  039E                     	;# 
  2475  039F                     	;# 
  2476  0411                     	;# 
  2477  0411                     	;# 
  2478  0412                     	;# 
  2479  0413                     	;# 
  2480  0414                     	;# 
  2481  0415                     	;# 
  2482  0416                     	;# 
  2483  0417                     	;# 
  2484  0418                     	;# 
  2485  0418                     	;# 
  2486  0419                     	;# 
  2487  041A                     	;# 
  2488  041B                     	;# 
  2489  041C                     	;# 
  2490  041D                     	;# 
  2491  041E                     	;# 
  2492  041F                     	;# 
  2493  0498                     	;# 
  2494  0498                     	;# 
  2495  0499                     	;# 
  2496  049A                     	;# 
  2497  049B                     	;# 
  2498  049B                     	;# 
  2499  049C                     	;# 
  2500  049D                     	;# 
  2501  049E                     	;# 
  2502  049F                     	;# 
  2503  0617                     	;# 
  2504  0618                     	;# 
  2505  0619                     	;# 
  2506  0619                     	;# 
  2507  061A                     	;# 
  2508  061B                     	;# 
  2509  061C                     	;# 
  2510  061C                     	;# 
  2511  061F                     	;# 
  2512  0691                     	;# 
  2513  0692                     	;# 
  2514  0693                     	;# 
  2515  0694                     	;# 
  2516  0695                     	;# 
  2517  0696                     	;# 
  2518  0697                     	;# 
  2519  0698                     	;# 
  2520  0699                     	;# 
  2521  0711                     	;# 
  2522  0712                     	;# 
  2523  0713                     	;# 
  2524  0714                     	;# 
  2525  0715                     	;# 
  2526  0716                     	;# 
  2527  0717                     	;# 
  2528  0718                     	;# 
  2529  0719                     	;# 
  2530  0891                     	;# 
  2531  0891                     	;# 
  2532  0891                     	;# 
  2533  0891                     	;# 
  2534  0891                     	;# 
  2535  0891                     	;# 
  2536  0892                     	;# 
  2537  0892                     	;# 
  2538  0892                     	;# 
  2539  0893                     	;# 
  2540  0893                     	;# 
  2541  0893                     	;# 
  2542  0893                     	;# 
  2543  0893                     	;# 
  2544  0893                     	;# 
  2545  0894                     	;# 
  2546  0894                     	;# 
  2547  0894                     	;# 
  2548  0895                     	;# 
  2549  0895                     	;# 
  2550  0895                     	;# 
  2551  0896                     	;# 
  2552  0896                     	;# 
  2553  0896                     	;# 
  2554  089B                     	;# 
  2555  0911                     	;# 
  2556  0912                     	;# 
  2557  0913                     	;# 
  2558  0914                     	;# 
  2559  0915                     	;# 
  2560  0916                     	;# 
  2561  0918                     	;# 
  2562  0919                     	;# 
  2563  091A                     	;# 
  2564  091B                     	;# 
  2565  091C                     	;# 
  2566  091D                     	;# 
  2567  091E                     	;# 
  2568  091F                     	;# 
  2569  0E0F                     	;# 
  2570  0E10                     	;# 
  2571  0E11                     	;# 
  2572  0E12                     	;# 
  2573  0E13                     	;# 
  2574  0E14                     	;# 
  2575  0E15                     	;# 
  2576  0E16                     	;# 
  2577  0E17                     	;# 
  2578  0E18                     	;# 
  2579  0E19                     	;# 
  2580  0E1A                     	;# 
  2581  0E1B                     	;# 
  2582  0E1C                     	;# 
  2583  0E1D                     	;# 
  2584  0E1E                     	;# 
  2585  0E1F                     	;# 
  2586  0E20                     	;# 
  2587  0E21                     	;# 
  2588  0E22                     	;# 
  2589  0E24                     	;# 
  2590  0E25                     	;# 
  2591  0E28                     	;# 
  2592  0E29                     	;# 
  2593  0E2A                     	;# 
  2594  0E2B                     	;# 
  2595  0E2C                     	;# 
  2596  0E2D                     	;# 
  2597  0E2E                     	;# 
  2598  0E2F                     	;# 
  2599  0E90                     	;# 
  2600  0E91                     	;# 
  2601  0E92                     	;# 
  2602  0E94                     	;# 
  2603  0E95                     	;# 
  2604  0E9C                     	;# 
  2605  0E9D                     	;# 
  2606  0E9E                     	;# 
  2607  0E9F                     	;# 
  2608  0EA0                     	;# 
  2609  0EA1                     	;# 
  2610  0EA2                     	;# 
  2611  0EA3                     	;# 
  2612  0EA4                     	;# 
  2613  0EA5                     	;# 
  2614  0EA6                     	;# 
  2615  0EA7                     	;# 
  2616  0F0F                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F28                     	;# 
  2642  0F29                     	;# 
  2643  0F2A                     	;# 
  2644  0F2B                     	;# 
  2645  0F2C                     	;# 
  2646  0F2D                     	;# 
  2647  0F2E                     	;# 
  2648  0F2F                     	;# 
  2649  0F30                     	;# 
  2650  0F31                     	;# 
  2651  0F32                     	;# 
  2652  0F33                     	;# 
  2653  0F34                     	;# 
  2654  0F35                     	;# 
  2655  0F36                     	;# 
  2656  0F37                     	;# 
  2657  0FE4                     	;# 
  2658  0FE5                     	;# 
  2659  0FE6                     	;# 
  2660  0FE7                     	;# 
  2661  0FE8                     	;# 
  2662  0FE9                     	;# 
  2663  0FEA                     	;# 
  2664  0FEB                     	;# 
  2665  0FED                     	;# 
  2666  0FEE                     	;# 
  2667  0FEF                     	;# 
  2668  0000                     	;# 
  2669  0001                     	;# 
  2670  0002                     	;# 
  2671  0003                     	;# 
  2672  0004                     	;# 
  2673  0005                     	;# 
  2674  0006                     	;# 
  2675  0007                     	;# 
  2676  0008                     	;# 
  2677  0009                     	;# 
  2678  000A                     	;# 
  2679  000B                     	;# 
  2680  000C                     	;# 
  2681  000D                     	;# 
  2682  000E                     	;# 
  2683  0010                     	;# 
  2684  0011                     	;# 
  2685  0012                     	;# 
  2686  0013                     	;# 
  2687  0014                     	;# 
  2688  0015                     	;# 
  2689  0015                     	;# 
  2690  0016                     	;# 
  2691  0016                     	;# 
  2692  0017                     	;# 
  2693  0018                     	;# 
  2694  0019                     	;# 
  2695  0019                     	;# 
  2696  001A                     	;# 
  2697  001B                     	;# 
  2698  001C                     	;# 
  2699  001D                     	;# 
  2700  001E                     	;# 
  2701  001F                     	;# 
  2702  008C                     	;# 
  2703  008D                     	;# 
  2704  008E                     	;# 
  2705  0090                     	;# 
  2706  0091                     	;# 
  2707  0092                     	;# 
  2708  0093                     	;# 
  2709  0094                     	;# 
  2710  0097                     	;# 
  2711  009B                     	;# 
  2712  009B                     	;# 
  2713  009C                     	;# 
  2714  009D                     	;# 
  2715  009E                     	;# 
  2716  009F                     	;# 
  2717  010C                     	;# 
  2718  010D                     	;# 
  2719  010E                     	;# 
  2720  0111                     	;# 
  2721  0112                     	;# 
  2722  0113                     	;# 
  2723  0114                     	;# 
  2724  0115                     	;# 
  2725  0116                     	;# 
  2726  0117                     	;# 
  2727  0118                     	;# 
  2728  0119                     	;# 
  2729  018C                     	;# 
  2730  018D                     	;# 
  2731  018E                     	;# 
  2732  0197                     	;# 
  2733  0199                     	;# 
  2734  0199                     	;# 
  2735  0199                     	;# 
  2736  019A                     	;# 
  2737  019A                     	;# 
  2738  019A                     	;# 
  2739  019B                     	;# 
  2740  019B                     	;# 
  2741  019B                     	;# 
  2742  019B                     	;# 
  2743  019B                     	;# 
  2744  019C                     	;# 
  2745  019C                     	;# 
  2746  019C                     	;# 
  2747  019D                     	;# 
  2748  019D                     	;# 
  2749  019D                     	;# 
  2750  019E                     	;# 
  2751  019E                     	;# 
  2752  019E                     	;# 
  2753  019F                     	;# 
  2754  019F                     	;# 
  2755  019F                     	;# 
  2756  019F                     	;# 
  2757  019F                     	;# 
  2758  020C                     	;# 
  2759  020D                     	;# 
  2760  020E                     	;# 
  2761  0211                     	;# 
  2762  0211                     	;# 
  2763  0212                     	;# 
  2764  0212                     	;# 
  2765  0213                     	;# 
  2766  0213                     	;# 
  2767  0214                     	;# 
  2768  0214                     	;# 
  2769  0215                     	;# 
  2770  0215                     	;# 
  2771  0215                     	;# 
  2772  0215                     	;# 
  2773  0216                     	;# 
  2774  0216                     	;# 
  2775  0217                     	;# 
  2776  0217                     	;# 
  2777  0219                     	;# 
  2778  021A                     	;# 
  2779  021B                     	;# 
  2780  021C                     	;# 
  2781  021D                     	;# 
  2782  021D                     	;# 
  2783  021E                     	;# 
  2784  021F                     	;# 
  2785  028C                     	;# 
  2786  028D                     	;# 
  2787  028E                     	;# 
  2788  0291                     	;# 
  2789  0291                     	;# 
  2790  0292                     	;# 
  2791  0293                     	;# 
  2792  0294                     	;# 
  2793  0295                     	;# 
  2794  0295                     	;# 
  2795  0296                     	;# 
  2796  0297                     	;# 
  2797  0298                     	;# 
  2798  029F                     	;# 
  2799  030C                     	;# 
  2800  030D                     	;# 
  2801  030E                     	;# 
  2802  0311                     	;# 
  2803  0311                     	;# 
  2804  0312                     	;# 
  2805  0313                     	;# 
  2806  0314                     	;# 
  2807  0315                     	;# 
  2808  0315                     	;# 
  2809  0316                     	;# 
  2810  0317                     	;# 
  2811  0318                     	;# 
  2812  038C                     	;# 
  2813  038D                     	;# 
  2814  038E                     	;# 
  2815  0391                     	;# 
  2816  0392                     	;# 
  2817  0393                     	;# 
  2818  0394                     	;# 
  2819  0395                     	;# 
  2820  0396                     	;# 
  2821  0397                     	;# 
  2822  0398                     	;# 
  2823  0399                     	;# 
  2824  039A                     	;# 
  2825  039C                     	;# 
  2826  039D                     	;# 
  2827  039E                     	;# 
  2828  039F                     	;# 
  2829  0411                     	;# 
  2830  0411                     	;# 
  2831  0412                     	;# 
  2832  0413                     	;# 
  2833  0414                     	;# 
  2834  0415                     	;# 
  2835  0416                     	;# 
  2836  0417                     	;# 
  2837  0418                     	;# 
  2838  0418                     	;# 
  2839  0419                     	;# 
  2840  041A                     	;# 
  2841  041B                     	;# 
  2842  041C                     	;# 
  2843  041D                     	;# 
  2844  041E                     	;# 
  2845  041F                     	;# 
  2846  0498                     	;# 
  2847  0498                     	;# 
  2848  0499                     	;# 
  2849  049A                     	;# 
  2850  049B                     	;# 
  2851  049B                     	;# 
  2852  049C                     	;# 
  2853  049D                     	;# 
  2854  049E                     	;# 
  2855  049F                     	;# 
  2856  0617                     	;# 
  2857  0618                     	;# 
  2858  0619                     	;# 
  2859  0619                     	;# 
  2860  061A                     	;# 
  2861  061B                     	;# 
  2862  061C                     	;# 
  2863  061C                     	;# 
  2864  061F                     	;# 
  2865  0691                     	;# 
  2866  0692                     	;# 
  2867  0693                     	;# 
  2868  0694                     	;# 
  2869  0695                     	;# 
  2870  0696                     	;# 
  2871  0697                     	;# 
  2872  0698                     	;# 
  2873  0699                     	;# 
  2874  0711                     	;# 
  2875  0712                     	;# 
  2876  0713                     	;# 
  2877  0714                     	;# 
  2878  0715                     	;# 
  2879  0716                     	;# 
  2880  0717                     	;# 
  2881  0718                     	;# 
  2882  0719                     	;# 
  2883  0891                     	;# 
  2884  0891                     	;# 
  2885  0891                     	;# 
  2886  0891                     	;# 
  2887  0891                     	;# 
  2888  0891                     	;# 
  2889  0892                     	;# 
  2890  0892                     	;# 
  2891  0892                     	;# 
  2892  0893                     	;# 
  2893  0893                     	;# 
  2894  0893                     	;# 
  2895  0893                     	;# 
  2896  0893                     	;# 
  2897  0893                     	;# 
  2898  0894                     	;# 
  2899  0894                     	;# 
  2900  0894                     	;# 
  2901  0895                     	;# 
  2902  0895                     	;# 
  2903  0895                     	;# 
  2904  0896                     	;# 
  2905  0896                     	;# 
  2906  0896                     	;# 
  2907  089B                     	;# 
  2908  0911                     	;# 
  2909  0912                     	;# 
  2910  0913                     	;# 
  2911  0914                     	;# 
  2912  0915                     	;# 
  2913  0916                     	;# 
  2914  0918                     	;# 
  2915  0919                     	;# 
  2916  091A                     	;# 
  2917  091B                     	;# 
  2918  091C                     	;# 
  2919  091D                     	;# 
  2920  091E                     	;# 
  2921  091F                     	;# 
  2922  0E0F                     	;# 
  2923  0E10                     	;# 
  2924  0E11                     	;# 
  2925  0E12                     	;# 
  2926  0E13                     	;# 
  2927  0E14                     	;# 
  2928  0E15                     	;# 
  2929  0E16                     	;# 
  2930  0E17                     	;# 
  2931  0E18                     	;# 
  2932  0E19                     	;# 
  2933  0E1A                     	;# 
  2934  0E1B                     	;# 
  2935  0E1C                     	;# 
  2936  0E1D                     	;# 
  2937  0E1E                     	;# 
  2938  0E1F                     	;# 
  2939  0E20                     	;# 
  2940  0E21                     	;# 
  2941  0E22                     	;# 
  2942  0E24                     	;# 
  2943  0E25                     	;# 
  2944  0E28                     	;# 
  2945  0E29                     	;# 
  2946  0E2A                     	;# 
  2947  0E2B                     	;# 
  2948  0E2C                     	;# 
  2949  0E2D                     	;# 
  2950  0E2E                     	;# 
  2951  0E2F                     	;# 
  2952  0E90                     	;# 
  2953  0E91                     	;# 
  2954  0E92                     	;# 
  2955  0E94                     	;# 
  2956  0E95                     	;# 
  2957  0E9C                     	;# 
  2958  0E9D                     	;# 
  2959  0E9E                     	;# 
  2960  0E9F                     	;# 
  2961  0EA0                     	;# 
  2962  0EA1                     	;# 
  2963  0EA2                     	;# 
  2964  0EA3                     	;# 
  2965  0EA4                     	;# 
  2966  0EA5                     	;# 
  2967  0EA6                     	;# 
  2968  0EA7                     	;# 
  2969  0F0F                     	;# 
  2970  0F10                     	;# 
  2971  0F11                     	;# 
  2972  0F12                     	;# 
  2973  0F13                     	;# 
  2974  0F14                     	;# 
  2975  0F15                     	;# 
  2976  0F16                     	;# 
  2977  0F17                     	;# 
  2978  0F18                     	;# 
  2979  0F19                     	;# 
  2980  0F1A                     	;# 
  2981  0F1B                     	;# 
  2982  0F1C                     	;# 
  2983  0F1D                     	;# 
  2984  0F1E                     	;# 
  2985  0F1F                     	;# 
  2986  0F20                     	;# 
  2987  0F21                     	;# 
  2988  0F22                     	;# 
  2989  0F23                     	;# 
  2990  0F24                     	;# 
  2991  0F25                     	;# 
  2992  0F26                     	;# 
  2993  0F27                     	;# 
  2994  0F28                     	;# 
  2995  0F29                     	;# 
  2996  0F2A                     	;# 
  2997  0F2B                     	;# 
  2998  0F2C                     	;# 
  2999  0F2D                     	;# 
  3000  0F2E                     	;# 
  3001  0F2F                     	;# 
  3002  0F30                     	;# 
  3003  0F31                     	;# 
  3004  0F32                     	;# 
  3005  0F33                     	;# 
  3006  0F34                     	;# 
  3007  0F35                     	;# 
  3008  0F36                     	;# 
  3009  0F37                     	;# 
  3010  0FE4                     	;# 
  3011  0FE5                     	;# 
  3012  0FE6                     	;# 
  3013  0FE7                     	;# 
  3014  0FE8                     	;# 
  3015  0FE9                     	;# 
  3016  0FEA                     	;# 
  3017  0FEB                     	;# 
  3018  0FED                     	;# 
  3019  0FEE                     	;# 
  3020  0FEF                     	;# 
  3021  0000                     	;# 
  3022  0001                     	;# 
  3023  0002                     	;# 
  3024  0003                     	;# 
  3025  0004                     	;# 
  3026  0005                     	;# 
  3027  0006                     	;# 
  3028  0007                     	;# 
  3029  0008                     	;# 
  3030  0009                     	;# 
  3031  000A                     	;# 
  3032  000B                     	;# 
  3033  000C                     	;# 
  3034  000D                     	;# 
  3035  000E                     	;# 
  3036  0010                     	;# 
  3037  0011                     	;# 
  3038  0012                     	;# 
  3039  0013                     	;# 
  3040  0014                     	;# 
  3041  0015                     	;# 
  3042  0015                     	;# 
  3043  0016                     	;# 
  3044  0016                     	;# 
  3045  0017                     	;# 
  3046  0018                     	;# 
  3047  0019                     	;# 
  3048  0019                     	;# 
  3049  001A                     	;# 
  3050  001B                     	;# 
  3051  001C                     	;# 
  3052  001D                     	;# 
  3053  001E                     	;# 
  3054  001F                     	;# 
  3055  008C                     	;# 
  3056  008D                     	;# 
  3057  008E                     	;# 
  3058  0090                     	;# 
  3059  0091                     	;# 
  3060  0092                     	;# 
  3061  0093                     	;# 
  3062  0094                     	;# 
  3063  0097                     	;# 
  3064  009B                     	;# 
  3065  009B                     	;# 
  3066  009C                     	;# 
  3067  009D                     	;# 
  3068  009E                     	;# 
  3069  009F                     	;# 
  3070  010C                     	;# 
  3071  010D                     	;# 
  3072  010E                     	;# 
  3073  0111                     	;# 
  3074  0112                     	;# 
  3075  0113                     	;# 
  3076  0114                     	;# 
  3077  0115                     	;# 
  3078  0116                     	;# 
  3079  0117                     	;# 
  3080  0118                     	;# 
  3081  0119                     	;# 
  3082  018C                     	;# 
  3083  018D                     	;# 
  3084  018E                     	;# 
  3085  0197                     	;# 
  3086  0199                     	;# 
  3087  0199                     	;# 
  3088  0199                     	;# 
  3089  019A                     	;# 
  3090  019A                     	;# 
  3091  019A                     	;# 
  3092  019B                     	;# 
  3093  019B                     	;# 
  3094  019B                     	;# 
  3095  019B                     	;# 
  3096  019B                     	;# 
  3097  019C                     	;# 
  3098  019C                     	;# 
  3099  019C                     	;# 
  3100  019D                     	;# 
  3101  019D                     	;# 
  3102  019D                     	;# 
  3103  019E                     	;# 
  3104  019E                     	;# 
  3105  019E                     	;# 
  3106  019F                     	;# 
  3107  019F                     	;# 
  3108  019F                     	;# 
  3109  019F                     	;# 
  3110  019F                     	;# 
  3111  020C                     	;# 
  3112  020D                     	;# 
  3113  020E                     	;# 
  3114  0211                     	;# 
  3115  0211                     	;# 
  3116  0212                     	;# 
  3117  0212                     	;# 
  3118  0213                     	;# 
  3119  0213                     	;# 
  3120  0214                     	;# 
  3121  0214                     	;# 
  3122  0215                     	;# 
  3123  0215                     	;# 
  3124  0215                     	;# 
  3125  0215                     	;# 
  3126  0216                     	;# 
  3127  0216                     	;# 
  3128  0217                     	;# 
  3129  0217                     	;# 
  3130  0219                     	;# 
  3131  021A                     	;# 
  3132  021B                     	;# 
  3133  021C                     	;# 
  3134  021D                     	;# 
  3135  021D                     	;# 
  3136  021E                     	;# 
  3137  021F                     	;# 
  3138  028C                     	;# 
  3139  028D                     	;# 
  3140  028E                     	;# 
  3141  0291                     	;# 
  3142  0291                     	;# 
  3143  0292                     	;# 
  3144  0293                     	;# 
  3145  0294                     	;# 
  3146  0295                     	;# 
  3147  0295                     	;# 
  3148  0296                     	;# 
  3149  0297                     	;# 
  3150  0298                     	;# 
  3151  029F                     	;# 
  3152  030C                     	;# 
  3153  030D                     	;# 
  3154  030E                     	;# 
  3155  0311                     	;# 
  3156  0311                     	;# 
  3157  0312                     	;# 
  3158  0313                     	;# 
  3159  0314                     	;# 
  3160  0315                     	;# 
  3161  0315                     	;# 
  3162  0316                     	;# 
  3163  0317                     	;# 
  3164  0318                     	;# 
  3165  038C                     	;# 
  3166  038D                     	;# 
  3167  038E                     	;# 
  3168  0391                     	;# 
  3169  0392                     	;# 
  3170  0393                     	;# 
  3171  0394                     	;# 
  3172  0395                     	;# 
  3173  0396                     	;# 
  3174  0397                     	;# 
  3175  0398                     	;# 
  3176  0399                     	;# 
  3177  039A                     	;# 
  3178  039C                     	;# 
  3179  039D                     	;# 
  3180  039E                     	;# 
  3181  039F                     	;# 
  3182  0411                     	;# 
  3183  0411                     	;# 
  3184  0412                     	;# 
  3185  0413                     	;# 
  3186  0414                     	;# 
  3187  0415                     	;# 
  3188  0416                     	;# 
  3189  0417                     	;# 
  3190  0418                     	;# 
  3191  0418                     	;# 
  3192  0419                     	;# 
  3193  041A                     	;# 
  3194  041B                     	;# 
  3195  041C                     	;# 
  3196  041D                     	;# 
  3197  041E                     	;# 
  3198  041F                     	;# 
  3199  0498                     	;# 
  3200  0498                     	;# 
  3201  0499                     	;# 
  3202  049A                     	;# 
  3203  049B                     	;# 
  3204  049B                     	;# 
  3205  049C                     	;# 
  3206  049D                     	;# 
  3207  049E                     	;# 
  3208  049F                     	;# 
  3209  0617                     	;# 
  3210  0618                     	;# 
  3211  0619                     	;# 
  3212  0619                     	;# 
  3213  061A                     	;# 
  3214  061B                     	;# 
  3215  061C                     	;# 
  3216  061C                     	;# 
  3217  061F                     	;# 
  3218  0691                     	;# 
  3219  0692                     	;# 
  3220  0693                     	;# 
  3221  0694                     	;# 
  3222  0695                     	;# 
  3223  0696                     	;# 
  3224  0697                     	;# 
  3225  0698                     	;# 
  3226  0699                     	;# 
  3227  0711                     	;# 
  3228  0712                     	;# 
  3229  0713                     	;# 
  3230  0714                     	;# 
  3231  0715                     	;# 
  3232  0716                     	;# 
  3233  0717                     	;# 
  3234  0718                     	;# 
  3235  0719                     	;# 
  3236  0891                     	;# 
  3237  0891                     	;# 
  3238  0891                     	;# 
  3239  0891                     	;# 
  3240  0891                     	;# 
  3241  0891                     	;# 
  3242  0892                     	;# 
  3243  0892                     	;# 
  3244  0892                     	;# 
  3245  0893                     	;# 
  3246  0893                     	;# 
  3247  0893                     	;# 
  3248  0893                     	;# 
  3249  0893                     	;# 
  3250  0893                     	;# 
  3251  0894                     	;# 
  3252  0894                     	;# 
  3253  0894                     	;# 
  3254  0895                     	;# 
  3255  0895                     	;# 
  3256  0895                     	;# 
  3257  0896                     	;# 
  3258  0896                     	;# 
  3259  0896                     	;# 
  3260  089B                     	;# 
  3261  0911                     	;# 
  3262  0912                     	;# 
  3263  0913                     	;# 
  3264  0914                     	;# 
  3265  0915                     	;# 
  3266  0916                     	;# 
  3267  0918                     	;# 
  3268  0919                     	;# 
  3269  091A                     	;# 
  3270  091B                     	;# 
  3271  091C                     	;# 
  3272  091D                     	;# 
  3273  091E                     	;# 
  3274  091F                     	;# 
  3275  0E0F                     	;# 
  3276  0E10                     	;# 
  3277  0E11                     	;# 
  3278  0E12                     	;# 
  3279  0E13                     	;# 
  3280  0E14                     	;# 
  3281  0E15                     	;# 
  3282  0E16                     	;# 
  3283  0E17                     	;# 
  3284  0E18                     	;# 
  3285  0E19                     	;# 
  3286  0E1A                     	;# 
  3287  0E1B                     	;# 
  3288  0E1C                     	;# 
  3289  0E1D                     	;# 
  3290  0E1E                     	;# 
  3291  0E1F                     	;# 
  3292  0E20                     	;# 
  3293  0E21                     	;# 
  3294  0E22                     	;# 
  3295  0E24                     	;# 
  3296  0E25                     	;# 
  3297  0E28                     	;# 
  3298  0E29                     	;# 
  3299  0E2A                     	;# 
  3300  0E2B                     	;# 
  3301  0E2C                     	;# 
  3302  0E2D                     	;# 
  3303  0E2E                     	;# 
  3304  0E2F                     	;# 
  3305  0E90                     	;# 
  3306  0E91                     	;# 
  3307  0E92                     	;# 
  3308  0E94                     	;# 
  3309  0E95                     	;# 
  3310  0E9C                     	;# 
  3311  0E9D                     	;# 
  3312  0E9E                     	;# 
  3313  0E9F                     	;# 
  3314  0EA0                     	;# 
  3315  0EA1                     	;# 
  3316  0EA2                     	;# 
  3317  0EA3                     	;# 
  3318  0EA4                     	;# 
  3319  0EA5                     	;# 
  3320  0EA6                     	;# 
  3321  0EA7                     	;# 
  3322  0F0F                     	;# 
  3323  0F10                     	;# 
  3324  0F11                     	;# 
  3325  0F12                     	;# 
  3326  0F13                     	;# 
  3327  0F14                     	;# 
  3328  0F15                     	;# 
  3329  0F16                     	;# 
  3330  0F17                     	;# 
  3331  0F18                     	;# 
  3332  0F19                     	;# 
  3333  0F1A                     	;# 
  3334  0F1B                     	;# 
  3335  0F1C                     	;# 
  3336  0F1D                     	;# 
  3337  0F1E                     	;# 
  3338  0F1F                     	;# 
  3339  0F20                     	;# 
  3340  0F21                     	;# 
  3341  0F22                     	;# 
  3342  0F23                     	;# 
  3343  0F24                     	;# 
  3344  0F25                     	;# 
  3345  0F26                     	;# 
  3346  0F27                     	;# 
  3347  0F28                     	;# 
  3348  0F29                     	;# 
  3349  0F2A                     	;# 
  3350  0F2B                     	;# 
  3351  0F2C                     	;# 
  3352  0F2D                     	;# 
  3353  0F2E                     	;# 
  3354  0F2F                     	;# 
  3355  0F30                     	;# 
  3356  0F31                     	;# 
  3357  0F32                     	;# 
  3358  0F33                     	;# 
  3359  0F34                     	;# 
  3360  0F35                     	;# 
  3361  0F36                     	;# 
  3362  0F37                     	;# 
  3363  0FE4                     	;# 
  3364  0FE5                     	;# 
  3365  0FE6                     	;# 
  3366  0FE7                     	;# 
  3367  0FE8                     	;# 
  3368  0FE9                     	;# 
  3369  0FEA                     	;# 
  3370  0FEB                     	;# 
  3371  0FED                     	;# 
  3372  0FEE                     	;# 
  3373  0FEF                     	;# 
  3374  0000                     	;# 
  3375  0001                     	;# 
  3376  0002                     	;# 
  3377  0003                     	;# 
  3378  0004                     	;# 
  3379  0005                     	;# 
  3380  0006                     	;# 
  3381  0007                     	;# 
  3382  0008                     	;# 
  3383  0009                     	;# 
  3384  000A                     	;# 
  3385  000B                     	;# 
  3386  000C                     	;# 
  3387  000D                     	;# 
  3388  000E                     	;# 
  3389  0010                     	;# 
  3390  0011                     	;# 
  3391  0012                     	;# 
  3392  0013                     	;# 
  3393  0014                     	;# 
  3394  0015                     	;# 
  3395  0015                     	;# 
  3396  0016                     	;# 
  3397  0016                     	;# 
  3398  0017                     	;# 
  3399  0018                     	;# 
  3400  0019                     	;# 
  3401  0019                     	;# 
  3402  001A                     	;# 
  3403  001B                     	;# 
  3404  001C                     	;# 
  3405  001D                     	;# 
  3406  001E                     	;# 
  3407  001F                     	;# 
  3408  008C                     	;# 
  3409  008D                     	;# 
  3410  008E                     	;# 
  3411  0090                     	;# 
  3412  0091                     	;# 
  3413  0092                     	;# 
  3414  0093                     	;# 
  3415  0094                     	;# 
  3416  0097                     	;# 
  3417  009B                     	;# 
  3418  009B                     	;# 
  3419  009C                     	;# 
  3420  009D                     	;# 
  3421  009E                     	;# 
  3422  009F                     	;# 
  3423  010C                     	;# 
  3424  010D                     	;# 
  3425  010E                     	;# 
  3426  0111                     	;# 
  3427  0112                     	;# 
  3428  0113                     	;# 
  3429  0114                     	;# 
  3430  0115                     	;# 
  3431  0116                     	;# 
  3432  0117                     	;# 
  3433  0118                     	;# 
  3434  0119                     	;# 
  3435  018C                     	;# 
  3436  018D                     	;# 
  3437  018E                     	;# 
  3438  0197                     	;# 
  3439  0199                     	;# 
  3440  0199                     	;# 
  3441  0199                     	;# 
  3442  019A                     	;# 
  3443  019A                     	;# 
  3444  019A                     	;# 
  3445  019B                     	;# 
  3446  019B                     	;# 
  3447  019B                     	;# 
  3448  019B                     	;# 
  3449  019B                     	;# 
  3450  019C                     	;# 
  3451  019C                     	;# 
  3452  019C                     	;# 
  3453  019D                     	;# 
  3454  019D                     	;# 
  3455  019D                     	;# 
  3456  019E                     	;# 
  3457  019E                     	;# 
  3458  019E                     	;# 
  3459  019F                     	;# 
  3460  019F                     	;# 
  3461  019F                     	;# 
  3462  019F                     	;# 
  3463  019F                     	;# 
  3464  020C                     	;# 
  3465  020D                     	;# 
  3466  020E                     	;# 
  3467  0211                     	;# 
  3468  0211                     	;# 
  3469  0212                     	;# 
  3470  0212                     	;# 
  3471  0213                     	;# 
  3472  0213                     	;# 
  3473  0214                     	;# 
  3474  0214                     	;# 
  3475  0215                     	;# 
  3476  0215                     	;# 
  3477  0215                     	;# 
  3478  0215                     	;# 
  3479  0216                     	;# 
  3480  0216                     	;# 
  3481  0217                     	;# 
  3482  0217                     	;# 
  3483  0219                     	;# 
  3484  021A                     	;# 
  3485  021B                     	;# 
  3486  021C                     	;# 
  3487  021D                     	;# 
  3488  021D                     	;# 
  3489  021E                     	;# 
  3490  021F                     	;# 
  3491  028C                     	;# 
  3492  028D                     	;# 
  3493  028E                     	;# 
  3494  0291                     	;# 
  3495  0291                     	;# 
  3496  0292                     	;# 
  3497  0293                     	;# 
  3498  0294                     	;# 
  3499  0295                     	;# 
  3500  0295                     	;# 
  3501  0296                     	;# 
  3502  0297                     	;# 
  3503  0298                     	;# 
  3504  029F                     	;# 
  3505  030C                     	;# 
  3506  030D                     	;# 
  3507  030E                     	;# 
  3508  0311                     	;# 
  3509  0311                     	;# 
  3510  0312                     	;# 
  3511  0313                     	;# 
  3512  0314                     	;# 
  3513  0315                     	;# 
  3514  0315                     	;# 
  3515  0316                     	;# 
  3516  0317                     	;# 
  3517  0318                     	;# 
  3518  038C                     	;# 
  3519  038D                     	;# 
  3520  038E                     	;# 
  3521  0391                     	;# 
  3522  0392                     	;# 
  3523  0393                     	;# 
  3524  0394                     	;# 
  3525  0395                     	;# 
  3526  0396                     	;# 
  3527  0397                     	;# 
  3528  0398                     	;# 
  3529  0399                     	;# 
  3530  039A                     	;# 
  3531  039C                     	;# 
  3532  039D                     	;# 
  3533  039E                     	;# 
  3534  039F                     	;# 
  3535  0411                     	;# 
  3536  0411                     	;# 
  3537  0412                     	;# 
  3538  0413                     	;# 
  3539  0414                     	;# 
  3540  0415                     	;# 
  3541  0416                     	;# 
  3542  0417                     	;# 
  3543  0418                     	;# 
  3544  0418                     	;# 
  3545  0419                     	;# 
  3546  041A                     	;# 
  3547  041B                     	;# 
  3548  041C                     	;# 
  3549  041D                     	;# 
  3550  041E                     	;# 
  3551  041F                     	;# 
  3552  0498                     	;# 
  3553  0498                     	;# 
  3554  0499                     	;# 
  3555  049A                     	;# 
  3556  049B                     	;# 
  3557  049B                     	;# 
  3558  049C                     	;# 
  3559  049D                     	;# 
  3560  049E                     	;# 
  3561  049F                     	;# 
  3562  0617                     	;# 
  3563  0618                     	;# 
  3564  0619                     	;# 
  3565  0619                     	;# 
  3566  061A                     	;# 
  3567  061B                     	;# 
  3568  061C                     	;# 
  3569  061C                     	;# 
  3570  061F                     	;# 
  3571  0691                     	;# 
  3572  0692                     	;# 
  3573  0693                     	;# 
  3574  0694                     	;# 
  3575  0695                     	;# 
  3576  0696                     	;# 
  3577  0697                     	;# 
  3578  0698                     	;# 
  3579  0699                     	;# 
  3580  0711                     	;# 
  3581  0712                     	;# 
  3582  0713                     	;# 
  3583  0714                     	;# 
  3584  0715                     	;# 
  3585  0716                     	;# 
  3586  0717                     	;# 
  3587  0718                     	;# 
  3588  0719                     	;# 
  3589  0891                     	;# 
  3590  0891                     	;# 
  3591  0891                     	;# 
  3592  0891                     	;# 
  3593  0891                     	;# 
  3594  0891                     	;# 
  3595  0892                     	;# 
  3596  0892                     	;# 
  3597  0892                     	;# 
  3598  0893                     	;# 
  3599  0893                     	;# 
  3600  0893                     	;# 
  3601  0893                     	;# 
  3602  0893                     	;# 
  3603  0893                     	;# 
  3604  0894                     	;# 
  3605  0894                     	;# 
  3606  0894                     	;# 
  3607  0895                     	;# 
  3608  0895                     	;# 
  3609  0895                     	;# 
  3610  0896                     	;# 
  3611  0896                     	;# 
  3612  0896                     	;# 
  3613  089B                     	;# 
  3614  0911                     	;# 
  3615  0912                     	;# 
  3616  0913                     	;# 
  3617  0914                     	;# 
  3618  0915                     	;# 
  3619  0916                     	;# 
  3620  0918                     	;# 
  3621  0919                     	;# 
  3622  091A                     	;# 
  3623  091B                     	;# 
  3624  091C                     	;# 
  3625  091D                     	;# 
  3626  091E                     	;# 
  3627  091F                     	;# 
  3628  0E0F                     	;# 
  3629  0E10                     	;# 
  3630  0E11                     	;# 
  3631  0E12                     	;# 
  3632  0E13                     	;# 
  3633  0E14                     	;# 
  3634  0E15                     	;# 
  3635  0E16                     	;# 
  3636  0E17                     	;# 
  3637  0E18                     	;# 
  3638  0E19                     	;# 
  3639  0E1A                     	;# 
  3640  0E1B                     	;# 
  3641  0E1C                     	;# 
  3642  0E1D                     	;# 
  3643  0E1E                     	;# 
  3644  0E1F                     	;# 
  3645  0E20                     	;# 
  3646  0E21                     	;# 
  3647  0E22                     	;# 
  3648  0E24                     	;# 
  3649  0E25                     	;# 
  3650  0E28                     	;# 
  3651  0E29                     	;# 
  3652  0E2A                     	;# 
  3653  0E2B                     	;# 
  3654  0E2C                     	;# 
  3655  0E2D                     	;# 
  3656  0E2E                     	;# 
  3657  0E2F                     	;# 
  3658  0E90                     	;# 
  3659  0E91                     	;# 
  3660  0E92                     	;# 
  3661  0E94                     	;# 
  3662  0E95                     	;# 
  3663  0E9C                     	;# 
  3664  0E9D                     	;# 
  3665  0E9E                     	;# 
  3666  0E9F                     	;# 
  3667  0EA0                     	;# 
  3668  0EA1                     	;# 
  3669  0EA2                     	;# 
  3670  0EA3                     	;# 
  3671  0EA4                     	;# 
  3672  0EA5                     	;# 
  3673  0EA6                     	;# 
  3674  0EA7                     	;# 
  3675  0F0F                     	;# 
  3676  0F10                     	;# 
  3677  0F11                     	;# 
  3678  0F12                     	;# 
  3679  0F13                     	;# 
  3680  0F14                     	;# 
  3681  0F15                     	;# 
  3682  0F16                     	;# 
  3683  0F17                     	;# 
  3684  0F18                     	;# 
  3685  0F19                     	;# 
  3686  0F1A                     	;# 
  3687  0F1B                     	;# 
  3688  0F1C                     	;# 
  3689  0F1D                     	;# 
  3690  0F1E                     	;# 
  3691  0F1F                     	;# 
  3692  0F20                     	;# 
  3693  0F21                     	;# 
  3694  0F22                     	;# 
  3695  0F23                     	;# 
  3696  0F24                     	;# 
  3697  0F25                     	;# 
  3698  0F26                     	;# 
  3699  0F27                     	;# 
  3700  0F28                     	;# 
  3701  0F29                     	;# 
  3702  0F2A                     	;# 
  3703  0F2B                     	;# 
  3704  0F2C                     	;# 
  3705  0F2D                     	;# 
  3706  0F2E                     	;# 
  3707  0F2F                     	;# 
  3708  0F30                     	;# 
  3709  0F31                     	;# 
  3710  0F32                     	;# 
  3711  0F33                     	;# 
  3712  0F34                     	;# 
  3713  0F35                     	;# 
  3714  0F36                     	;# 
  3715  0F37                     	;# 
  3716  0FE4                     	;# 
  3717  0FE5                     	;# 
  3718  0FE6                     	;# 
  3719  0FE7                     	;# 
  3720  0FE8                     	;# 
  3721  0FE9                     	;# 
  3722  0FEA                     	;# 
  3723  0FEB                     	;# 
  3724  0FED                     	;# 
  3725  0FEE                     	;# 
  3726  0FEF                     	;# 
  3727  0000                     	;# 
  3728  0001                     	;# 
  3729  0002                     	;# 
  3730  0003                     	;# 
  3731  0004                     	;# 
  3732  0005                     	;# 
  3733  0006                     	;# 
  3734  0007                     	;# 
  3735  0008                     	;# 
  3736  0009                     	;# 
  3737  000A                     	;# 
  3738  000B                     	;# 
  3739  000C                     	;# 
  3740  000D                     	;# 
  3741  000E                     	;# 
  3742  0010                     	;# 
  3743  0011                     	;# 
  3744  0012                     	;# 
  3745  0013                     	;# 
  3746  0014                     	;# 
  3747  0015                     	;# 
  3748  0015                     	;# 
  3749  0016                     	;# 
  3750  0016                     	;# 
  3751  0017                     	;# 
  3752  0018                     	;# 
  3753  0019                     	;# 
  3754  0019                     	;# 
  3755  001A                     	;# 
  3756  001B                     	;# 
  3757  001C                     	;# 
  3758  001D                     	;# 
  3759  001E                     	;# 
  3760  001F                     	;# 
  3761  008C                     	;# 
  3762  008D                     	;# 
  3763  008E                     	;# 
  3764  0090                     	;# 
  3765  0091                     	;# 
  3766  0092                     	;# 
  3767  0093                     	;# 
  3768  0094                     	;# 
  3769  0097                     	;# 
  3770  009B                     	;# 
  3771  009B                     	;# 
  3772  009C                     	;# 
  3773  009D                     	;# 
  3774  009E                     	;# 
  3775  009F                     	;# 
  3776  010C                     	;# 
  3777  010D                     	;# 
  3778  010E                     	;# 
  3779  0111                     	;# 
  3780  0112                     	;# 
  3781  0113                     	;# 
  3782  0114                     	;# 
  3783  0115                     	;# 
  3784  0116                     	;# 
  3785  0117                     	;# 
  3786  0118                     	;# 
  3787  0119                     	;# 
  3788  018C                     	;# 
  3789  018D                     	;# 
  3790  018E                     	;# 
  3791  0197                     	;# 
  3792  0199                     	;# 
  3793  0199                     	;# 
  3794  0199                     	;# 
  3795  019A                     	;# 
  3796  019A                     	;# 
  3797  019A                     	;# 
  3798  019B                     	;# 
  3799  019B                     	;# 
  3800  019B                     	;# 
  3801  019B                     	;# 
  3802  019B                     	;# 
  3803  019C                     	;# 
  3804  019C                     	;# 
  3805  019C                     	;# 
  3806  019D                     	;# 
  3807  019D                     	;# 
  3808  019D                     	;# 
  3809  019E                     	;# 
  3810  019E                     	;# 
  3811  019E                     	;# 
  3812  019F                     	;# 
  3813  019F                     	;# 
  3814  019F                     	;# 
  3815  019F                     	;# 
  3816  019F                     	;# 
  3817  020C                     	;# 
  3818  020D                     	;# 
  3819  020E                     	;# 
  3820  0211                     	;# 
  3821  0211                     	;# 
  3822  0212                     	;# 
  3823  0212                     	;# 
  3824  0213                     	;# 
  3825  0213                     	;# 
  3826  0214                     	;# 
  3827  0214                     	;# 
  3828  0215                     	;# 
  3829  0215                     	;# 
  3830  0215                     	;# 
  3831  0215                     	;# 
  3832  0216                     	;# 
  3833  0216                     	;# 
  3834  0217                     	;# 
  3835  0217                     	;# 
  3836  0219                     	;# 
  3837  021A                     	;# 
  3838  021B                     	;# 
  3839  021C                     	;# 
  3840  021D                     	;# 
  3841  021D                     	;# 
  3842  021E                     	;# 
  3843  021F                     	;# 
  3844  028C                     	;# 
  3845  028D                     	;# 
  3846  028E                     	;# 
  3847  0291                     	;# 
  3848  0291                     	;# 
  3849  0292                     	;# 
  3850  0293                     	;# 
  3851  0294                     	;# 
  3852  0295                     	;# 
  3853  0295                     	;# 
  3854  0296                     	;# 
  3855  0297                     	;# 
  3856  0298                     	;# 
  3857  029F                     	;# 
  3858  030C                     	;# 
  3859  030D                     	;# 
  3860  030E                     	;# 
  3861  0311                     	;# 
  3862  0311                     	;# 
  3863  0312                     	;# 
  3864  0313                     	;# 
  3865  0314                     	;# 
  3866  0315                     	;# 
  3867  0315                     	;# 
  3868  0316                     	;# 
  3869  0317                     	;# 
  3870  0318                     	;# 
  3871  038C                     	;# 
  3872  038D                     	;# 
  3873  038E                     	;# 
  3874  0391                     	;# 
  3875  0392                     	;# 
  3876  0393                     	;# 
  3877  0394                     	;# 
  3878  0395                     	;# 
  3879  0396                     	;# 
  3880  0397                     	;# 
  3881  0398                     	;# 
  3882  0399                     	;# 
  3883  039A                     	;# 
  3884  039C                     	;# 
  3885  039D                     	;# 
  3886  039E                     	;# 
  3887  039F                     	;# 
  3888  0411                     	;# 
  3889  0411                     	;# 
  3890  0412                     	;# 
  3891  0413                     	;# 
  3892  0414                     	;# 
  3893  0415                     	;# 
  3894  0416                     	;# 
  3895  0417                     	;# 
  3896  0418                     	;# 
  3897  0418                     	;# 
  3898  0419                     	;# 
  3899  041A                     	;# 
  3900  041B                     	;# 
  3901  041C                     	;# 
  3902  041D                     	;# 
  3903  041E                     	;# 
  3904  041F                     	;# 
  3905  0498                     	;# 
  3906  0498                     	;# 
  3907  0499                     	;# 
  3908  049A                     	;# 
  3909  049B                     	;# 
  3910  049B                     	;# 
  3911  049C                     	;# 
  3912  049D                     	;# 
  3913  049E                     	;# 
  3914  049F                     	;# 
  3915  0617                     	;# 
  3916  0618                     	;# 
  3917  0619                     	;# 
  3918  0619                     	;# 
  3919  061A                     	;# 
  3920  061B                     	;# 
  3921  061C                     	;# 
  3922  061C                     	;# 
  3923  061F                     	;# 
  3924  0691                     	;# 
  3925  0692                     	;# 
  3926  0693                     	;# 
  3927  0694                     	;# 
  3928  0695                     	;# 
  3929  0696                     	;# 
  3930  0697                     	;# 
  3931  0698                     	;# 
  3932  0699                     	;# 
  3933  0711                     	;# 
  3934  0712                     	;# 
  3935  0713                     	;# 
  3936  0714                     	;# 
  3937  0715                     	;# 
  3938  0716                     	;# 
  3939  0717                     	;# 
  3940  0718                     	;# 
  3941  0719                     	;# 
  3942  0891                     	;# 
  3943  0891                     	;# 
  3944  0891                     	;# 
  3945  0891                     	;# 
  3946  0891                     	;# 
  3947  0891                     	;# 
  3948  0892                     	;# 
  3949  0892                     	;# 
  3950  0892                     	;# 
  3951  0893                     	;# 
  3952  0893                     	;# 
  3953  0893                     	;# 
  3954  0893                     	;# 
  3955  0893                     	;# 
  3956  0893                     	;# 
  3957  0894                     	;# 
  3958  0894                     	;# 
  3959  0894                     	;# 
  3960  0895                     	;# 
  3961  0895                     	;# 
  3962  0895                     	;# 
  3963  0896                     	;# 
  3964  0896                     	;# 
  3965  0896                     	;# 
  3966  089B                     	;# 
  3967  0911                     	;# 
  3968  0912                     	;# 
  3969  0913                     	;# 
  3970  0914                     	;# 
  3971  0915                     	;# 
  3972  0916                     	;# 
  3973  0918                     	;# 
  3974  0919                     	;# 
  3975  091A                     	;# 
  3976  091B                     	;# 
  3977  091C                     	;# 
  3978  091D                     	;# 
  3979  091E                     	;# 
  3980  091F                     	;# 
  3981  0E0F                     	;# 
  3982  0E10                     	;# 
  3983  0E11                     	;# 
  3984  0E12                     	;# 
  3985  0E13                     	;# 
  3986  0E14                     	;# 
  3987  0E15                     	;# 
  3988  0E16                     	;# 
  3989  0E17                     	;# 
  3990  0E18                     	;# 
  3991  0E19                     	;# 
  3992  0E1A                     	;# 
  3993  0E1B                     	;# 
  3994  0E1C                     	;# 
  3995  0E1D                     	;# 
  3996  0E1E                     	;# 
  3997  0E1F                     	;# 
  3998  0E20                     	;# 
  3999  0E21                     	;# 
  4000  0E22                     	;# 
  4001  0E24                     	;# 
  4002  0E25                     	;# 
  4003  0E28                     	;# 
  4004  0E29                     	;# 
  4005  0E2A                     	;# 
  4006  0E2B                     	;# 
  4007  0E2C                     	;# 
  4008  0E2D                     	;# 
  4009  0E2E                     	;# 
  4010  0E2F                     	;# 
  4011  0E90                     	;# 
  4012  0E91                     	;# 
  4013  0E92                     	;# 
  4014  0E94                     	;# 
  4015  0E95                     	;# 
  4016  0E9C                     	;# 
  4017  0E9D                     	;# 
  4018  0E9E                     	;# 
  4019  0E9F                     	;# 
  4020  0EA0                     	;# 
  4021  0EA1                     	;# 
  4022  0EA2                     	;# 
  4023  0EA3                     	;# 
  4024  0EA4                     	;# 
  4025  0EA5                     	;# 
  4026  0EA6                     	;# 
  4027  0EA7                     	;# 
  4028  0F0F                     	;# 
  4029  0F10                     	;# 
  4030  0F11                     	;# 
  4031  0F12                     	;# 
  4032  0F13                     	;# 
  4033  0F14                     	;# 
  4034  0F15                     	;# 
  4035  0F16                     	;# 
  4036  0F17                     	;# 
  4037  0F18                     	;# 
  4038  0F19                     	;# 
  4039  0F1A                     	;# 
  4040  0F1B                     	;# 
  4041  0F1C                     	;# 
  4042  0F1D                     	;# 
  4043  0F1E                     	;# 
  4044  0F1F                     	;# 
  4045  0F20                     	;# 
  4046  0F21                     	;# 
  4047  0F22                     	;# 
  4048  0F23                     	;# 
  4049  0F24                     	;# 
  4050  0F25                     	;# 
  4051  0F26                     	;# 
  4052  0F27                     	;# 
  4053  0F28                     	;# 
  4054  0F29                     	;# 
  4055  0F2A                     	;# 
  4056  0F2B                     	;# 
  4057  0F2C                     	;# 
  4058  0F2D                     	;# 
  4059  0F2E                     	;# 
  4060  0F2F                     	;# 
  4061  0F30                     	;# 
  4062  0F31                     	;# 
  4063  0F32                     	;# 
  4064  0F33                     	;# 
  4065  0F34                     	;# 
  4066  0F35                     	;# 
  4067  0F36                     	;# 
  4068  0F37                     	;# 
  4069  0FE4                     	;# 
  4070  0FE5                     	;# 
  4071  0FE6                     	;# 
  4072  0FE7                     	;# 
  4073  0FE8                     	;# 
  4074  0FE9                     	;# 
  4075  0FEA                     	;# 
  4076  0FEB                     	;# 
  4077  0FED                     	;# 
  4078  0FEE                     	;# 
  4079  0FEF                     	;# 
  4080  0000                     	;# 
  4081  0001                     	;# 
  4082  0002                     	;# 
  4083  0003                     	;# 
  4084  0004                     	;# 
  4085  0005                     	;# 
  4086  0006                     	;# 
  4087  0007                     	;# 
  4088  0008                     	;# 
  4089  0009                     	;# 
  4090  000A                     	;# 
  4091  000B                     	;# 
  4092  000C                     	;# 
  4093  000D                     	;# 
  4094  000E                     	;# 
  4095  0010                     	;# 
  4096  0011                     	;# 
  4097  0012                     	;# 
  4098  0013                     	;# 
  4099  0014                     	;# 
  4100  0015                     	;# 
  4101  0015                     	;# 
  4102  0016                     	;# 
  4103  0016                     	;# 
  4104  0017                     	;# 
  4105  0018                     	;# 
  4106  0019                     	;# 
  4107  0019                     	;# 
  4108  001A                     	;# 
  4109  001B                     	;# 
  4110  001C                     	;# 
  4111  001D                     	;# 
  4112  001E                     	;# 
  4113  001F                     	;# 
  4114  008C                     	;# 
  4115  008D                     	;# 
  4116  008E                     	;# 
  4117  0090                     	;# 
  4118  0091                     	;# 
  4119  0092                     	;# 
  4120  0093                     	;# 
  4121  0094                     	;# 
  4122  0097                     	;# 
  4123  009B                     	;# 
  4124  009B                     	;# 
  4125  009C                     	;# 
  4126  009D                     	;# 
  4127  009E                     	;# 
  4128  009F                     	;# 
  4129  010C                     	;# 
  4130  010D                     	;# 
  4131  010E                     	;# 
  4132  0111                     	;# 
  4133  0112                     	;# 
  4134  0113                     	;# 
  4135  0114                     	;# 
  4136  0115                     	;# 
  4137  0116                     	;# 
  4138  0117                     	;# 
  4139  0118                     	;# 
  4140  0119                     	;# 
  4141  018C                     	;# 
  4142  018D                     	;# 
  4143  018E                     	;# 
  4144  0197                     	;# 
  4145  0199                     	;# 
  4146  0199                     	;# 
  4147  0199                     	;# 
  4148  019A                     	;# 
  4149  019A                     	;# 
  4150  019A                     	;# 
  4151  019B                     	;# 
  4152  019B                     	;# 
  4153  019B                     	;# 
  4154  019B                     	;# 
  4155  019B                     	;# 
  4156  019C                     	;# 
  4157  019C                     	;# 
  4158  019C                     	;# 
  4159  019D                     	;# 
  4160  019D                     	;# 
  4161  019D                     	;# 
  4162  019E                     	;# 
  4163  019E                     	;# 
  4164  019E                     	;# 
  4165  019F                     	;# 
  4166  019F                     	;# 
  4167  019F                     	;# 
  4168  019F                     	;# 
  4169  019F                     	;# 
  4170  020C                     	;# 
  4171  020D                     	;# 
  4172  020E                     	;# 
  4173  0211                     	;# 
  4174  0211                     	;# 
  4175  0212                     	;# 
  4176  0212                     	;# 
  4177  0213                     	;# 
  4178  0213                     	;# 
  4179  0214                     	;# 
  4180  0214                     	;# 
  4181  0215                     	;# 
  4182  0215                     	;# 
  4183  0215                     	;# 
  4184  0215                     	;# 
  4185  0216                     	;# 
  4186  0216                     	;# 
  4187  0217                     	;# 
  4188  0217                     	;# 
  4189  0219                     	;# 
  4190  021A                     	;# 
  4191  021B                     	;# 
  4192  021C                     	;# 
  4193  021D                     	;# 
  4194  021D                     	;# 
  4195  021E                     	;# 
  4196  021F                     	;# 
  4197  028C                     	;# 
  4198  028D                     	;# 
  4199  028E                     	;# 
  4200  0291                     	;# 
  4201  0291                     	;# 
  4202  0292                     	;# 
  4203  0293                     	;# 
  4204  0294                     	;# 
  4205  0295                     	;# 
  4206  0295                     	;# 
  4207  0296                     	;# 
  4208  0297                     	;# 
  4209  0298                     	;# 
  4210  029F                     	;# 
  4211  030C                     	;# 
  4212  030D                     	;# 
  4213  030E                     	;# 
  4214  0311                     	;# 
  4215  0311                     	;# 
  4216  0312                     	;# 
  4217  0313                     	;# 
  4218  0314                     	;# 
  4219  0315                     	;# 
  4220  0315                     	;# 
  4221  0316                     	;# 
  4222  0317                     	;# 
  4223  0318                     	;# 
  4224  038C                     	;# 
  4225  038D                     	;# 
  4226  038E                     	;# 
  4227  0391                     	;# 
  4228  0392                     	;# 
  4229  0393                     	;# 
  4230  0394                     	;# 
  4231  0395                     	;# 
  4232  0396                     	;# 
  4233  0397                     	;# 
  4234  0398                     	;# 
  4235  0399                     	;# 
  4236  039A                     	;# 
  4237  039C                     	;# 
  4238  039D                     	;# 
  4239  039E                     	;# 
  4240  039F                     	;# 
  4241  0411                     	;# 
  4242  0411                     	;# 
  4243  0412                     	;# 
  4244  0413                     	;# 
  4245  0414                     	;# 
  4246  0415                     	;# 
  4247  0416                     	;# 
  4248  0417                     	;# 
  4249  0418                     	;# 
  4250  0418                     	;# 
  4251  0419                     	;# 
  4252  041A                     	;# 
  4253  041B                     	;# 
  4254  041C                     	;# 
  4255  041D                     	;# 
  4256  041E                     	;# 
  4257  041F                     	;# 
  4258  0498                     	;# 
  4259  0498                     	;# 
  4260  0499                     	;# 
  4261  049A                     	;# 
  4262  049B                     	;# 
  4263  049B                     	;# 
  4264  049C                     	;# 
  4265  049D                     	;# 
  4266  049E                     	;# 
  4267  049F                     	;# 
  4268  0617                     	;# 
  4269  0618                     	;# 
  4270  0619                     	;# 
  4271  0619                     	;# 
  4272  061A                     	;# 
  4273  061B                     	;# 
  4274  061C                     	;# 
  4275  061C                     	;# 
  4276  061F                     	;# 
  4277  0691                     	;# 
  4278  0692                     	;# 
  4279  0693                     	;# 
  4280  0694                     	;# 
  4281  0695                     	;# 
  4282  0696                     	;# 
  4283  0697                     	;# 
  4284  0698                     	;# 
  4285  0699                     	;# 
  4286  0711                     	;# 
  4287  0712                     	;# 
  4288  0713                     	;# 
  4289  0714                     	;# 
  4290  0715                     	;# 
  4291  0716                     	;# 
  4292  0717                     	;# 
  4293  0718                     	;# 
  4294  0719                     	;# 
  4295  0891                     	;# 
  4296  0891                     	;# 
  4297  0891                     	;# 
  4298  0891                     	;# 
  4299  0891                     	;# 
  4300  0891                     	;# 
  4301  0892                     	;# 
  4302  0892                     	;# 
  4303  0892                     	;# 
  4304  0893                     	;# 
  4305  0893                     	;# 
  4306  0893                     	;# 
  4307  0893                     	;# 
  4308  0893                     	;# 
  4309  0893                     	;# 
  4310  0894                     	;# 
  4311  0894                     	;# 
  4312  0894                     	;# 
  4313  0895                     	;# 
  4314  0895                     	;# 
  4315  0895                     	;# 
  4316  0896                     	;# 
  4317  0896                     	;# 
  4318  0896                     	;# 
  4319  089B                     	;# 
  4320  0911                     	;# 
  4321  0912                     	;# 
  4322  0913                     	;# 
  4323  0914                     	;# 
  4324  0915                     	;# 
  4325  0916                     	;# 
  4326  0918                     	;# 
  4327  0919                     	;# 
  4328  091A                     	;# 
  4329  091B                     	;# 
  4330  091C                     	;# 
  4331  091D                     	;# 
  4332  091E                     	;# 
  4333  091F                     	;# 
  4334  0E0F                     	;# 
  4335  0E10                     	;# 
  4336  0E11                     	;# 
  4337  0E12                     	;# 
  4338  0E13                     	;# 
  4339  0E14                     	;# 
  4340  0E15                     	;# 
  4341  0E16                     	;# 
  4342  0E17                     	;# 
  4343  0E18                     	;# 
  4344  0E19                     	;# 
  4345  0E1A                     	;# 
  4346  0E1B                     	;# 
  4347  0E1C                     	;# 
  4348  0E1D                     	;# 
  4349  0E1E                     	;# 
  4350  0E1F                     	;# 
  4351  0E20                     	;# 
  4352  0E21                     	;# 
  4353  0E22                     	;# 
  4354  0E24                     	;# 
  4355  0E25                     	;# 
  4356  0E28                     	;# 
  4357  0E29                     	;# 
  4358  0E2A                     	;# 
  4359  0E2B                     	;# 
  4360  0E2C                     	;# 
  4361  0E2D                     	;# 
  4362  0E2E                     	;# 
  4363  0E2F                     	;# 
  4364  0E90                     	;# 
  4365  0E91                     	;# 
  4366  0E92                     	;# 
  4367  0E94                     	;# 
  4368  0E95                     	;# 
  4369  0E9C                     	;# 
  4370  0E9D                     	;# 
  4371  0E9E                     	;# 
  4372  0E9F                     	;# 
  4373  0EA0                     	;# 
  4374  0EA1                     	;# 
  4375  0EA2                     	;# 
  4376  0EA3                     	;# 
  4377  0EA4                     	;# 
  4378  0EA5                     	;# 
  4379  0EA6                     	;# 
  4380  0EA7                     	;# 
  4381  0F0F                     	;# 
  4382  0F10                     	;# 
  4383  0F11                     	;# 
  4384  0F12                     	;# 
  4385  0F13                     	;# 
  4386  0F14                     	;# 
  4387  0F15                     	;# 
  4388  0F16                     	;# 
  4389  0F17                     	;# 
  4390  0F18                     	;# 
  4391  0F19                     	;# 
  4392  0F1A                     	;# 
  4393  0F1B                     	;# 
  4394  0F1C                     	;# 
  4395  0F1D                     	;# 
  4396  0F1E                     	;# 
  4397  0F1F                     	;# 
  4398  0F20                     	;# 
  4399  0F21                     	;# 
  4400  0F22                     	;# 
  4401  0F23                     	;# 
  4402  0F24                     	;# 
  4403  0F25                     	;# 
  4404  0F26                     	;# 
  4405  0F27                     	;# 
  4406  0F28                     	;# 
  4407  0F29                     	;# 
  4408  0F2A                     	;# 
  4409  0F2B                     	;# 
  4410  0F2C                     	;# 
  4411  0F2D                     	;# 
  4412  0F2E                     	;# 
  4413  0F2F                     	;# 
  4414  0F30                     	;# 
  4415  0F31                     	;# 
  4416  0F32                     	;# 
  4417  0F33                     	;# 
  4418  0F34                     	;# 
  4419  0F35                     	;# 
  4420  0F36                     	;# 
  4421  0F37                     	;# 
  4422  0FE4                     	;# 
  4423  0FE5                     	;# 
  4424  0FE6                     	;# 
  4425  0FE7                     	;# 
  4426  0FE8                     	;# 
  4427  0FE9                     	;# 
  4428  0FEA                     	;# 
  4429  0FEB                     	;# 
  4430  0FED                     	;# 
  4431  0FEE                     	;# 
  4432  0FEF                     	;# 
  4433  0000                     	;# 
  4434  0001                     	;# 
  4435  0002                     	;# 
  4436  0003                     	;# 
  4437  0004                     	;# 
  4438  0005                     	;# 
  4439  0006                     	;# 
  4440  0007                     	;# 
  4441  0008                     	;# 
  4442  0009                     	;# 
  4443  000A                     	;# 
  4444  000B                     	;# 
  4445  000C                     	;# 
  4446  000D                     	;# 
  4447  000E                     	;# 
  4448  0010                     	;# 
  4449  0011                     	;# 
  4450  0012                     	;# 
  4451  0013                     	;# 
  4452  0014                     	;# 
  4453  0015                     	;# 
  4454  0015                     	;# 
  4455  0016                     	;# 
  4456  0016                     	;# 
  4457  0017                     	;# 
  4458  0018                     	;# 
  4459  0019                     	;# 
  4460  0019                     	;# 
  4461  001A                     	;# 
  4462  001B                     	;# 
  4463  001C                     	;# 
  4464  001D                     	;# 
  4465  001E                     	;# 
  4466  001F                     	;# 
  4467  008C                     	;# 
  4468  008D                     	;# 
  4469  008E                     	;# 
  4470  0090                     	;# 
  4471  0091                     	;# 
  4472  0092                     	;# 
  4473  0093                     	;# 
  4474  0094                     	;# 
  4475  0097                     	;# 
  4476  009B                     	;# 
  4477  009B                     	;# 
  4478  009C                     	;# 
  4479  009D                     	;# 
  4480  009E                     	;# 
  4481  009F                     	;# 
  4482  010C                     	;# 
  4483  010D                     	;# 
  4484  010E                     	;# 
  4485  0111                     	;# 
  4486  0112                     	;# 
  4487  0113                     	;# 
  4488  0114                     	;# 
  4489  0115                     	;# 
  4490  0116                     	;# 
  4491  0117                     	;# 
  4492  0118                     	;# 
  4493  0119                     	;# 
  4494  018C                     	;# 
  4495  018D                     	;# 
  4496  018E                     	;# 
  4497  0197                     	;# 
  4498  0199                     	;# 
  4499  0199                     	;# 
  4500  0199                     	;# 
  4501  019A                     	;# 
  4502  019A                     	;# 
  4503  019A                     	;# 
  4504  019B                     	;# 
  4505  019B                     	;# 
  4506  019B                     	;# 
  4507  019B                     	;# 
  4508  019B                     	;# 
  4509  019C                     	;# 
  4510  019C                     	;# 
  4511  019C                     	;# 
  4512  019D                     	;# 
  4513  019D                     	;# 
  4514  019D                     	;# 
  4515  019E                     	;# 
  4516  019E                     	;# 
  4517  019E                     	;# 
  4518  019F                     	;# 
  4519  019F                     	;# 
  4520  019F                     	;# 
  4521  019F                     	;# 
  4522  019F                     	;# 
  4523  020C                     	;# 
  4524  020D                     	;# 
  4525  020E                     	;# 
  4526  0211                     	;# 
  4527  0211                     	;# 
  4528  0212                     	;# 
  4529  0212                     	;# 
  4530  0213                     	;# 
  4531  0213                     	;# 
  4532  0214                     	;# 
  4533  0214                     	;# 
  4534  0215                     	;# 
  4535  0215                     	;# 
  4536  0215                     	;# 
  4537  0215                     	;# 
  4538  0216                     	;# 
  4539  0216                     	;# 
  4540  0217                     	;# 
  4541  0217                     	;# 
  4542  0219                     	;# 
  4543  021A                     	;# 
  4544  021B                     	;# 
  4545  021C                     	;# 
  4546  021D                     	;# 
  4547  021D                     	;# 
  4548  021E                     	;# 
  4549  021F                     	;# 
  4550  028C                     	;# 
  4551  028D                     	;# 
  4552  028E                     	;# 
  4553  0291                     	;# 
  4554  0291                     	;# 
  4555  0292                     	;# 
  4556  0293                     	;# 
  4557  0294                     	;# 
  4558  0295                     	;# 
  4559  0295                     	;# 
  4560  0296                     	;# 
  4561  0297                     	;# 
  4562  0298                     	;# 
  4563  029F                     	;# 
  4564  030C                     	;# 
  4565  030D                     	;# 
  4566  030E                     	;# 
  4567  0311                     	;# 
  4568  0311                     	;# 
  4569  0312                     	;# 
  4570  0313                     	;# 
  4571  0314                     	;# 
  4572  0315                     	;# 
  4573  0315                     	;# 
  4574  0316                     	;# 
  4575  0317                     	;# 
  4576  0318                     	;# 
  4577  038C                     	;# 
  4578  038D                     	;# 
  4579  038E                     	;# 
  4580  0391                     	;# 
  4581  0392                     	;# 
  4582  0393                     	;# 
  4583  0394                     	;# 
  4584  0395                     	;# 
  4585  0396                     	;# 
  4586  0397                     	;# 
  4587  0398                     	;# 
  4588  0399                     	;# 
  4589  039A                     	;# 
  4590  039C                     	;# 
  4591  039D                     	;# 
  4592  039E                     	;# 
  4593  039F                     	;# 
  4594  0411                     	;# 
  4595  0411                     	;# 
  4596  0412                     	;# 
  4597  0413                     	;# 
  4598  0414                     	;# 
  4599  0415                     	;# 
  4600  0416                     	;# 
  4601  0417                     	;# 
  4602  0418                     	;# 
  4603  0418                     	;# 
  4604  0419                     	;# 
  4605  041A                     	;# 
  4606  041B                     	;# 
  4607  041C                     	;# 
  4608  041D                     	;# 
  4609  041E                     	;# 
  4610  041F                     	;# 
  4611  0498                     	;# 
  4612  0498                     	;# 
  4613  0499                     	;# 
  4614  049A                     	;# 
  4615  049B                     	;# 
  4616  049B                     	;# 
  4617  049C                     	;# 
  4618  049D                     	;# 
  4619  049E                     	;# 
  4620  049F                     	;# 
  4621  0617                     	;# 
  4622  0618                     	;# 
  4623  0619                     	;# 
  4624  0619                     	;# 
  4625  061A                     	;# 
  4626  061B                     	;# 
  4627  061C                     	;# 
  4628  061C                     	;# 
  4629  061F                     	;# 
  4630  0691                     	;# 
  4631  0692                     	;# 
  4632  0693                     	;# 
  4633  0694                     	;# 
  4634  0695                     	;# 
  4635  0696                     	;# 
  4636  0697                     	;# 
  4637  0698                     	;# 
  4638  0699                     	;# 
  4639  0711                     	;# 
  4640  0712                     	;# 
  4641  0713                     	;# 
  4642  0714                     	;# 
  4643  0715                     	;# 
  4644  0716                     	;# 
  4645  0717                     	;# 
  4646  0718                     	;# 
  4647  0719                     	;# 
  4648  0891                     	;# 
  4649  0891                     	;# 
  4650  0891                     	;# 
  4651  0891                     	;# 
  4652  0891                     	;# 
  4653  0891                     	;# 
  4654  0892                     	;# 
  4655  0892                     	;# 
  4656  0892                     	;# 
  4657  0893                     	;# 
  4658  0893                     	;# 
  4659  0893                     	;# 
  4660  0893                     	;# 
  4661  0893                     	;# 
  4662  0893                     	;# 
  4663  0894                     	;# 
  4664  0894                     	;# 
  4665  0894                     	;# 
  4666  0895                     	;# 
  4667  0895                     	;# 
  4668  0895                     	;# 
  4669  0896                     	;# 
  4670  0896                     	;# 
  4671  0896                     	;# 
  4672  089B                     	;# 
  4673  0911                     	;# 
  4674  0912                     	;# 
  4675  0913                     	;# 
  4676  0914                     	;# 
  4677  0915                     	;# 
  4678  0916                     	;# 
  4679  0918                     	;# 
  4680  0919                     	;# 
  4681  091A                     	;# 
  4682  091B                     	;# 
  4683  091C                     	;# 
  4684  091D                     	;# 
  4685  091E                     	;# 
  4686  091F                     	;# 
  4687  0E0F                     	;# 
  4688  0E10                     	;# 
  4689  0E11                     	;# 
  4690  0E12                     	;# 
  4691  0E13                     	;# 
  4692  0E14                     	;# 
  4693  0E15                     	;# 
  4694  0E16                     	;# 
  4695  0E17                     	;# 
  4696  0E18                     	;# 
  4697  0E19                     	;# 
  4698  0E1A                     	;# 
  4699  0E1B                     	;# 
  4700  0E1C                     	;# 
  4701  0E1D                     	;# 
  4702  0E1E                     	;# 
  4703  0E1F                     	;# 
  4704  0E20                     	;# 
  4705  0E21                     	;# 
  4706  0E22                     	;# 
  4707  0E24                     	;# 
  4708  0E25                     	;# 
  4709  0E28                     	;# 
  4710  0E29                     	;# 
  4711  0E2A                     	;# 
  4712  0E2B                     	;# 
  4713  0E2C                     	;# 
  4714  0E2D                     	;# 
  4715  0E2E                     	;# 
  4716  0E2F                     	;# 
  4717  0E90                     	;# 
  4718  0E91                     	;# 
  4719  0E92                     	;# 
  4720  0E94                     	;# 
  4721  0E95                     	;# 
  4722  0E9C                     	;# 
  4723  0E9D                     	;# 
  4724  0E9E                     	;# 
  4725  0E9F                     	;# 
  4726  0EA0                     	;# 
  4727  0EA1                     	;# 
  4728  0EA2                     	;# 
  4729  0EA3                     	;# 
  4730  0EA4                     	;# 
  4731  0EA5                     	;# 
  4732  0EA6                     	;# 
  4733  0EA7                     	;# 
  4734  0F0F                     	;# 
  4735  0F10                     	;# 
  4736  0F11                     	;# 
  4737  0F12                     	;# 
  4738  0F13                     	;# 
  4739  0F14                     	;# 
  4740  0F15                     	;# 
  4741  0F16                     	;# 
  4742  0F17                     	;# 
  4743  0F18                     	;# 
  4744  0F19                     	;# 
  4745  0F1A                     	;# 
  4746  0F1B                     	;# 
  4747  0F1C                     	;# 
  4748  0F1D                     	;# 
  4749  0F1E                     	;# 
  4750  0F1F                     	;# 
  4751  0F20                     	;# 
  4752  0F21                     	;# 
  4753  0F22                     	;# 
  4754  0F23                     	;# 
  4755  0F24                     	;# 
  4756  0F25                     	;# 
  4757  0F26                     	;# 
  4758  0F27                     	;# 
  4759  0F28                     	;# 
  4760  0F29                     	;# 
  4761  0F2A                     	;# 
  4762  0F2B                     	;# 
  4763  0F2C                     	;# 
  4764  0F2D                     	;# 
  4765  0F2E                     	;# 
  4766  0F2F                     	;# 
  4767  0F30                     	;# 
  4768  0F31                     	;# 
  4769  0F32                     	;# 
  4770  0F33                     	;# 
  4771  0F34                     	;# 
  4772  0F35                     	;# 
  4773  0F36                     	;# 
  4774  0F37                     	;# 
  4775  0FE4                     	;# 
  4776  0FE5                     	;# 
  4777  0FE6                     	;# 
  4778  0FE7                     	;# 
  4779  0FE8                     	;# 
  4780  0FE9                     	;# 
  4781  0FEA                     	;# 
  4782  0FEB                     	;# 
  4783  0FED                     	;# 
  4784  0FEE                     	;# 
  4785  0FEF                     	;# 
  4786  0000                     	;# 
  4787  0001                     	;# 
  4788  0002                     	;# 
  4789  0003                     	;# 
  4790  0004                     	;# 
  4791  0005                     	;# 
  4792  0006                     	;# 
  4793  0007                     	;# 
  4794  0008                     	;# 
  4795  0009                     	;# 
  4796  000A                     	;# 
  4797  000B                     	;# 
  4798  000C                     	;# 
  4799  000D                     	;# 
  4800  000E                     	;# 
  4801  0010                     	;# 
  4802  0011                     	;# 
  4803  0012                     	;# 
  4804  0013                     	;# 
  4805  0014                     	;# 
  4806  0015                     	;# 
  4807  0015                     	;# 
  4808  0016                     	;# 
  4809  0016                     	;# 
  4810  0017                     	;# 
  4811  0018                     	;# 
  4812  0019                     	;# 
  4813  0019                     	;# 
  4814  001A                     	;# 
  4815  001B                     	;# 
  4816  001C                     	;# 
  4817  001D                     	;# 
  4818  001E                     	;# 
  4819  001F                     	;# 
  4820  008C                     	;# 
  4821  008D                     	;# 
  4822  008E                     	;# 
  4823  0090                     	;# 
  4824  0091                     	;# 
  4825  0092                     	;# 
  4826  0093                     	;# 
  4827  0094                     	;# 
  4828  0097                     	;# 
  4829  009B                     	;# 
  4830  009B                     	;# 
  4831  009C                     	;# 
  4832  009D                     	;# 
  4833  009E                     	;# 
  4834  009F                     	;# 
  4835  010C                     	;# 
  4836  010D                     	;# 
  4837  010E                     	;# 
  4838  0111                     	;# 
  4839  0112                     	;# 
  4840  0113                     	;# 
  4841  0114                     	;# 
  4842  0115                     	;# 
  4843  0116                     	;# 
  4844  0117                     	;# 
  4845  0118                     	;# 
  4846  0119                     	;# 
  4847  018C                     	;# 
  4848  018D                     	;# 
  4849  018E                     	;# 
  4850  0197                     	;# 
  4851  0199                     	;# 
  4852  0199                     	;# 
  4853  0199                     	;# 
  4854  019A                     	;# 
  4855  019A                     	;# 
  4856  019A                     	;# 
  4857  019B                     	;# 
  4858  019B                     	;# 
  4859  019B                     	;# 
  4860  019B                     	;# 
  4861  019B                     	;# 
  4862  019C                     	;# 
  4863  019C                     	;# 
  4864  019C                     	;# 
  4865  019D                     	;# 
  4866  019D                     	;# 
  4867  019D                     	;# 
  4868  019E                     	;# 
  4869  019E                     	;# 
  4870  019E                     	;# 
  4871  019F                     	;# 
  4872  019F                     	;# 
  4873  019F                     	;# 
  4874  019F                     	;# 
  4875  019F                     	;# 
  4876  020C                     	;# 
  4877  020D                     	;# 
  4878  020E                     	;# 
  4879  0211                     	;# 
  4880  0211                     	;# 
  4881  0212                     	;# 
  4882  0212                     	;# 
  4883  0213                     	;# 
  4884  0213                     	;# 
  4885  0214                     	;# 
  4886  0214                     	;# 
  4887  0215                     	;# 
  4888  0215                     	;# 
  4889  0215                     	;# 
  4890  0215                     	;# 
  4891  0216                     	;# 
  4892  0216                     	;# 
  4893  0217                     	;# 
  4894  0217                     	;# 
  4895  0219                     	;# 
  4896  021A                     	;# 
  4897  021B                     	;# 
  4898  021C                     	;# 
  4899  021D                     	;# 
  4900  021D                     	;# 
  4901  021E                     	;# 
  4902  021F                     	;# 
  4903  028C                     	;# 
  4904  028D                     	;# 
  4905  028E                     	;# 
  4906  0291                     	;# 
  4907  0291                     	;# 
  4908  0292                     	;# 
  4909  0293                     	;# 
  4910  0294                     	;# 
  4911  0295                     	;# 
  4912  0295                     	;# 
  4913  0296                     	;# 
  4914  0297                     	;# 
  4915  0298                     	;# 
  4916  029F                     	;# 
  4917  030C                     	;# 
  4918  030D                     	;# 
  4919  030E                     	;# 
  4920  0311                     	;# 
  4921  0311                     	;# 
  4922  0312                     	;# 
  4923  0313                     	;# 
  4924  0314                     	;# 
  4925  0315                     	;# 
  4926  0315                     	;# 
  4927  0316                     	;# 
  4928  0317                     	;# 
  4929  0318                     	;# 
  4930  038C                     	;# 
  4931  038D                     	;# 
  4932  038E                     	;# 
  4933  0391                     	;# 
  4934  0392                     	;# 
  4935  0393                     	;# 
  4936  0394                     	;# 
  4937  0395                     	;# 
  4938  0396                     	;# 
  4939  0397                     	;# 
  4940  0398                     	;# 
  4941  0399                     	;# 
  4942  039A                     	;# 
  4943  039C                     	;# 
  4944  039D                     	;# 
  4945  039E                     	;# 
  4946  039F                     	;# 
  4947  0411                     	;# 
  4948  0411                     	;# 
  4949  0412                     	;# 
  4950  0413                     	;# 
  4951  0414                     	;# 
  4952  0415                     	;# 
  4953  0416                     	;# 
  4954  0417                     	;# 
  4955  0418                     	;# 
  4956  0418                     	;# 
  4957  0419                     	;# 
  4958  041A                     	;# 
  4959  041B                     	;# 
  4960  041C                     	;# 
  4961  041D                     	;# 
  4962  041E                     	;# 
  4963  041F                     	;# 
  4964  0498                     	;# 
  4965  0498                     	;# 
  4966  0499                     	;# 
  4967  049A                     	;# 
  4968  049B                     	;# 
  4969  049B                     	;# 
  4970  049C                     	;# 
  4971  049D                     	;# 
  4972  049E                     	;# 
  4973  049F                     	;# 
  4974  0617                     	;# 
  4975  0618                     	;# 
  4976  0619                     	;# 
  4977  0619                     	;# 
  4978  061A                     	;# 
  4979  061B                     	;# 
  4980  061C                     	;# 
  4981  061C                     	;# 
  4982  061F                     	;# 
  4983  0691                     	;# 
  4984  0692                     	;# 
  4985  0693                     	;# 
  4986  0694                     	;# 
  4987  0695                     	;# 
  4988  0696                     	;# 
  4989  0697                     	;# 
  4990  0698                     	;# 
  4991  0699                     	;# 
  4992  0711                     	;# 
  4993  0712                     	;# 
  4994  0713                     	;# 
  4995  0714                     	;# 
  4996  0715                     	;# 
  4997  0716                     	;# 
  4998  0717                     	;# 
  4999  0718                     	;# 
  5000  0719                     	;# 
  5001  0891                     	;# 
  5002  0891                     	;# 
  5003  0891                     	;# 
  5004  0891                     	;# 
  5005  0891                     	;# 
  5006  0891                     	;# 
  5007  0892                     	;# 
  5008  0892                     	;# 
  5009  0892                     	;# 
  5010  0893                     	;# 
  5011  0893                     	;# 
  5012  0893                     	;# 
  5013  0893                     	;# 
  5014  0893                     	;# 
  5015  0893                     	;# 
  5016  0894                     	;# 
  5017  0894                     	;# 
  5018  0894                     	;# 
  5019  0895                     	;# 
  5020  0895                     	;# 
  5021  0895                     	;# 
  5022  0896                     	;# 
  5023  0896                     	;# 
  5024  0896                     	;# 
  5025  089B                     	;# 
  5026  0911                     	;# 
  5027  0912                     	;# 
  5028  0913                     	;# 
  5029  0914                     	;# 
  5030  0915                     	;# 
  5031  0916                     	;# 
  5032  0918                     	;# 
  5033  0919                     	;# 
  5034  091A                     	;# 
  5035  091B                     	;# 
  5036  091C                     	;# 
  5037  091D                     	;# 
  5038  091E                     	;# 
  5039  091F                     	;# 
  5040  0E0F                     	;# 
  5041  0E10                     	;# 
  5042  0E11                     	;# 
  5043  0E12                     	;# 
  5044  0E13                     	;# 
  5045  0E14                     	;# 
  5046  0E15                     	;# 
  5047  0E16                     	;# 
  5048  0E17                     	;# 
  5049  0E18                     	;# 
  5050  0E19                     	;# 
  5051  0E1A                     	;# 
  5052  0E1B                     	;# 
  5053  0E1C                     	;# 
  5054  0E1D                     	;# 
  5055  0E1E                     	;# 
  5056  0E1F                     	;# 
  5057  0E20                     	;# 
  5058  0E21                     	;# 
  5059  0E22                     	;# 
  5060  0E24                     	;# 
  5061  0E25                     	;# 
  5062  0E28                     	;# 
  5063  0E29                     	;# 
  5064  0E2A                     	;# 
  5065  0E2B                     	;# 
  5066  0E2C                     	;# 
  5067  0E2D                     	;# 
  5068  0E2E                     	;# 
  5069  0E2F                     	;# 
  5070  0E90                     	;# 
  5071  0E91                     	;# 
  5072  0E92                     	;# 
  5073  0E94                     	;# 
  5074  0E95                     	;# 
  5075  0E9C                     	;# 
  5076  0E9D                     	;# 
  5077  0E9E                     	;# 
  5078  0E9F                     	;# 
  5079  0EA0                     	;# 
  5080  0EA1                     	;# 
  5081  0EA2                     	;# 
  5082  0EA3                     	;# 
  5083  0EA4                     	;# 
  5084  0EA5                     	;# 
  5085  0EA6                     	;# 
  5086  0EA7                     	;# 
  5087  0F0F                     	;# 
  5088  0F10                     	;# 
  5089  0F11                     	;# 
  5090  0F12                     	;# 
  5091  0F13                     	;# 
  5092  0F14                     	;# 
  5093  0F15                     	;# 
  5094  0F16                     	;# 
  5095  0F17                     	;# 
  5096  0F18                     	;# 
  5097  0F19                     	;# 
  5098  0F1A                     	;# 
  5099  0F1B                     	;# 
  5100  0F1C                     	;# 
  5101  0F1D                     	;# 
  5102  0F1E                     	;# 
  5103  0F1F                     	;# 
  5104  0F20                     	;# 
  5105  0F21                     	;# 
  5106  0F22                     	;# 
  5107  0F23                     	;# 
  5108  0F24                     	;# 
  5109  0F25                     	;# 
  5110  0F26                     	;# 
  5111  0F27                     	;# 
  5112  0F28                     	;# 
  5113  0F29                     	;# 
  5114  0F2A                     	;# 
  5115  0F2B                     	;# 
  5116  0F2C                     	;# 
  5117  0F2D                     	;# 
  5118  0F2E                     	;# 
  5119  0F2F                     	;# 
  5120  0F30                     	;# 
  5121  0F31                     	;# 
  5122  0F32                     	;# 
  5123  0F33                     	;# 
  5124  0F34                     	;# 
  5125  0F35                     	;# 
  5126  0F36                     	;# 
  5127  0F37                     	;# 
  5128  0FE4                     	;# 
  5129  0FE5                     	;# 
  5130  0FE6                     	;# 
  5131  0FE7                     	;# 
  5132  0FE8                     	;# 
  5133  0FE9                     	;# 
  5134  0FEA                     	;# 
  5135  0FEB                     	;# 
  5136  0FED                     	;# 
  5137  0FEE                     	;# 
  5138  0FEF                     	;# 
  5139                           
  5140                           	psect	idataBANK1
  5141  10CF                     __pidataBANK1:	
  5142                           
  5143                           ;initializer for _on
  5144  10CF  3401               	retlw	1
  5145                           
  5146                           	psect	idataBANK2
  5147  0002                     __pidataBANK2:	
  5148                           
  5149                           ;initializer for _gestureToggle
  5150  0002  3401               	retlw	1
  5151                           
  5152                           ;initializer for _start
  5153  0003  3401               	retlw	1
  5154                           
  5155                           	psect	idataBANK3
  5156  11B2                     __pidataBANK3:	
  5157                           
  5158                           ;initializer for _names
  5159  11B2  343D               	retlw	low (STR_1| (0+32768))
  5160  11B3  3498               	retlw	high (STR_1| (0+32768))
  5161  11B4  3430               	retlw	low (STR_2| (0+32768))
  5162  11B5  3498               	retlw	high (STR_2| (0+32768))
  5163  11B6  3420               	retlw	low (STR_3| (0+32768))
  5164  11B7  3498               	retlw	high (STR_3| (0+32768))
  5165  11B8  3449               	retlw	low (STR_4| (0+32768))
  5166  11B9  3498               	retlw	high (STR_4| (0+32768))
  5167                           
  5168                           	psect	stringtext1
  5169  1800                     __pstringtext1:	
  5170  1800                     _fsmStateTable:	
  5171  1800  3443               	retlw	low _do_I2C_IDLE
  5172  1801  3411               	retlw	high _do_I2C_IDLE
  5173  1802  348A               	retlw	low _do_I2C_SEND_ADR_READ
  5174  1803  3411               	retlw	high _do_I2C_SEND_ADR_READ
  5175  1804  346D               	retlw	low _do_I2C_SEND_ADR_WRITE
  5176  1805  3411               	retlw	high _do_I2C_SEND_ADR_WRITE
  5177  1806  34BF               	retlw	low _do_I2C_TX
  5178  1807  3408               	retlw	high _do_I2C_TX
  5179  1808  34BA               	retlw	low _do_I2C_RX
  5180  1809  3417               	retlw	high _do_I2C_RX
  5181  180A  3448               	retlw	low _do_I2C_RCEN
  5182  180B  3411               	retlw	high _do_I2C_RCEN
  5183  180C  34DB               	retlw	low _do_I2C_TX_EMPTY
  5184  180D  3415               	retlw	high _do_I2C_TX_EMPTY
  5185  180E  3416               	retlw	low _do_I2C_SEND_RESTART_READ
  5186  180F  3411               	retlw	high _do_I2C_SEND_RESTART_READ
  5187  1810  341A               	retlw	low _do_I2C_SEND_RESTART_WRITE
  5188  1811  3411               	retlw	high _do_I2C_SEND_RESTART_WRITE
  5189  1812  341E               	retlw	low _do_I2C_SEND_RESTART
  5190  1813  3411               	retlw	high _do_I2C_SEND_RESTART
  5191  1814  3422               	retlw	low _do_I2C_SEND_STOP
  5192  1815  3411               	retlw	high _do_I2C_SEND_STOP
  5193  1816  3426               	retlw	low _do_I2C_DO_ACK
  5194  1817  3411               	retlw	high _do_I2C_DO_ACK
  5195  1818  342A               	retlw	low _do_I2C_DO_NACK_STOP
  5196  1819  3411               	retlw	high _do_I2C_DO_NACK_STOP
  5197  181A  342E               	retlw	low _do_I2C_DO_NACK_RESTART
  5198  181B  3411               	retlw	high _do_I2C_DO_NACK_RESTART
  5199  181C  3466               	retlw	low _do_I2C_RESET
  5200  181D  3411               	retlw	high _do_I2C_RESET
  5201  181E  3485               	retlw	low _do_I2C_DO_ADDRESS_NACK
  5202  181F  3415               	retlw	high _do_I2C_DO_ADDRESS_NACK
  5203  1820                     __end_of_fsmStateTable:	
  5204                           
  5205                           	psect	nvBANK3
  5206  01EB                     __pnvBANK3:	
  5207  01EB                     _EUSART_RxDefaultInterruptHandler:	
  5208  01EB                     	ds	2
  5209  01ED                     _EUSART_TxDefaultInterruptHandler:	
  5210  01ED                     	ds	2
  5211  01EF                     _eusartTxBufferRemaining:	
  5212  01EF                     	ds	1
  5213                           
  5214                           	psect	nvBANK4
  5215  0264                     __pnvBANK4:	
  5216  0264                     _EUSART_ErrorHandler:	
  5217  0264                     	ds	2
  5218  0266                     _EUSART_OverrunErrorHandler:	
  5219  0266                     	ds	2
  5220  0268                     _EUSART_FramingErrorHandler:	
  5221  0268                     	ds	2
  5222  000E                     _PORTCbits	set	14
  5223  001F                     _T2CONbits	set	31
  5224  001F                     _T2CON	set	31
  5225  001D                     _TMR2	set	29
  5226  001E                     _PR2	set	30
  5227  0011                     _PIR1bits	set	17
  5228  000B                     _INTCONbits	set	11
  5229  0010                     _PIR0bits	set	16
  5230  009D                     _ADCON0bits	set	157
  5231  009C                     _ADRESH	set	156
  5232  009B                     _ADRESL	set	155
  5233  009F                     _ADACT	set	159
  5234  009E                     _ADCON1	set	158
  5235  009D                     _ADCON0	set	157
  5236  008E                     _TRISC	set	142
  5237  008D                     _TRISB	set	141
  5238  008C                     _TRISA	set	140
  5239  0097                     _WDTCON	set	151
  5240  0091                     _PIE1bits	set	145
  5241  0090                     _PIE0bits	set	144
  5242  010E                     _LATCbits	set	270
  5243  010E                     _LATC	set	270
  5244  010D                     _LATB	set	269
  5245  010C                     _LATA	set	268
  5246  019A                     _TXREG1	set	410
  5247  019E                     _TXSTA1bits	set	414
  5248  0199                     _RC1REG	set	409
  5249  019D                     _RC1STAbits	set	413
  5250  019A                     _TX1REG	set	410
  5251  019E                     _TX1STAbits	set	414
  5252  019C                     _SP1BRGH	set	412
  5253  019B                     _SP1BRGL	set	411
  5254  019E                     _TX1STA	set	414
  5255  019D                     _RC1STA	set	413
  5256  019F                     _BAUD1CON	set	415
  5257  018C                     _ANSELA	set	396
  5258  018D                     _ANSELB	set	397
  5259  018E                     _ANSELC	set	398
  5260  021C                     _SSP2STATbits	set	540
  5261  0219                     _SSP2BUF	set	537
  5262  021D                     _SSP2CON1bits	set	541
  5263  021A                     _SSP2ADD	set	538
  5264  021D                     _SSP2CON1	set	541
  5265  021C                     _SSP2STAT	set	540
  5266  0214                     _SSP1STATbits	set	532
  5267  0213                     _SSP1MSK	set	531
  5268  0211                     _SSP1BUF	set	529
  5269  0216                     _SSP1CON2bits	set	534
  5270  0212                     _SSP1ADD	set	530
  5271  0216                     _SSP1CON2	set	534
  5272  0215                     _SSP1CON1	set	533
  5273  0214                     _SSP1STAT	set	532
  5274  0215                     _SSP1CON1bits	set	533
  5275  020E                     _WPUC	set	526
  5276  020C                     _WPUA	set	524
  5277  020D                     _WPUB	set	525
  5278  0293                     _CCP1CONbits	set	659
  5279  029F                     _CCPTMRSbits	set	671
  5280  0291                     _CCPR1L	set	657
  5281  0292                     _CCPR1H	set	658
  5282  0293                     _CCP1CON	set	659
  5283  028E                     _ODCONC	set	654
  5284  028D                     _ODCONB	set	653
  5285  028C                     _ODCONA	set	652
  5286  030E                     _SLRCONC	set	782
  5287  030D                     _SLRCONB	set	781
  5288  030C                     _SLRCONA	set	780
  5289  0916                     _PMD5	set	2326
  5290  0915                     _PMD4	set	2325
  5291  0914                     _PMD3	set	2324
  5292  0913                     _PMD2	set	2323
  5293  0912                     _PMD1	set	2322
  5294  0911                     _PMD0	set	2321
  5295  091E                     _OSCTUNE	set	2334
  5296  091F                     _OSCFRQ	set	2335
  5297  091D                     _OSCEN	set	2333
  5298  091B                     _OSCCON3	set	2331
  5299  0919                     _OSCCON1	set	2329
  5300  0E1D                     _SSP2CLKPPS	set	3613
  5301  0E21                     _SSP1DATPPS	set	3617
  5302  0E20                     _SSP1CLKPPS	set	3616
  5303  0E1E                     _SSP2DATPPS	set	3614
  5304  0E24                     _RXPPS	set	3620
  5305  0EA6                     _RC6PPS	set	3750
  5306  0EA5                     _RC5PPS	set	3749
  5307  0EA2                     _RC2PPS	set	3746
  5308  0E9D                     _RB5PPS	set	3741
  5309  0E9F                     _RB7PPS	set	3743
  5310  0E9E                     _RB6PPS	set	3742
  5311                           
  5312                           	psect	stringtext2
  5313  1820                     __pstringtext2:	
  5314  1820                     STR_3:	
  5315  1820  3441               	retlw	65	;'A'
  5316  1821  346C               	retlw	108	;'l'
  5317  1822  3465               	retlw	101	;'e'
  5318  1823  3478               	retlw	120	;'x'
  5319  1824  3461               	retlw	97	;'a'
  5320  1825  346E               	retlw	110	;'n'
  5321  1826  3464               	retlw	100	;'d'
  5322  1827  3472               	retlw	114	;'r'
  5323  1828  3461               	retlw	97	;'a'
  5324  1829  3420               	retlw	32	;' '
  5325  182A  3446               	retlw	70	;'F'
  5326  182B  3479               	retlw	121	;'y'
  5327  182C  3466               	retlw	102	;'f'
  5328  182D  3466               	retlw	102	;'f'
  5329  182E  3465               	retlw	101	;'e'
  5330  182F  3400               	retlw	0
  5331                           
  5332                           	psect	stringtext3
  5333  1830                     __pstringtext3:	
  5334  1830                     STR_2:	
  5335  1830  344E               	retlw	78	;'N'
  5336  1831  346F               	retlw	111	;'o'
  5337  1832  3465               	retlw	101	;'e'
  5338  1833  346C               	retlw	108	;'l'
  5339  1834  346C               	retlw	108	;'l'
  5340  1835  3465               	retlw	101	;'e'
  5341  1836  3420               	retlw	32	;' '
  5342  1837  3443               	retlw	67	;'C'
  5343  1838  3472               	retlw	114	;'r'
  5344  1839  3461               	retlw	97	;'a'
  5345  183A  346E               	retlw	110	;'n'
  5346  183B  3465               	retlw	101	;'e'
  5347  183C  3400               	retlw	0
  5348                           
  5349                           	psect	stringtext4
  5350  183D                     __pstringtext4:	
  5351  183D                     STR_1:	
  5352  183D  344A               	retlw	74	;'J'
  5353  183E  3475               	retlw	117	;'u'
  5354  183F  3473               	retlw	115	;'s'
  5355  1840  3474               	retlw	116	;'t'
  5356  1841  3469               	retlw	105	;'i'
  5357  1842  346E               	retlw	110	;'n'
  5358  1843  3420               	retlw	32	;' '
  5359  1844  3443               	retlw	67	;'C'
  5360  1845  3468               	retlw	104	;'h'
  5361  1846  3461               	retlw	97	;'a'
  5362  1847  346E               	retlw	110	;'n'
  5363  1848  3400               	retlw	0
  5364                           
  5365                           	psect	stringtext5
  5366  1849                     __pstringtext5:	
  5367  1849                     STR_4:	
  5368  1849  344A               	retlw	74	;'J'
  5369  184A  3465               	retlw	101	;'e'
  5370  184B  3466               	retlw	102	;'f'
  5371  184C  3466               	retlw	102	;'f'
  5372  184D  3420               	retlw	32	;' '
  5373  184E  3447               	retlw	71	;'G'
  5374  184F  3465               	retlw	101	;'e'
  5375  1850  3469               	retlw	105	;'i'
  5376  1851  3473               	retlw	115	;'s'
  5377  1852  3473               	retlw	115	;'s'
  5378  1853  3400               	retlw	0
  5379                           
  5380                           	psect	stringtext6
  5381  1854                     __pstringtext6:	
  5382  1854                     STR_5:	
  5383  1854  3425               	retlw	37	;'%'
  5384  1855  3464               	retlw	100	;'d'
  5385  1856  3400               	retlw	0
  5386                           
  5387                           	psect	stringtext7
  5388  0000                     __pstringtext7:	
  5389  1854                     
  5390                           ; #config settings
  5391  0000                     
  5392                           	psect	cinit
  5393  0049                     start_initialization:	
  5394  0049                     __initialization:	
  5395                           
  5396                           ; Initialize objects allocated to BANK1
  5397  0049  0021               	movlb	1	; select bank1
  5398  004A  3190  20CF  3180   	fcall	__pidataBANK1	;fetch initializer
  5399  004D  00EF               	movwf	__pdataBANK1& (0+127)
  5400                           
  5401                           ; Initialize objects allocated to BANK2
  5402  004E  0022               	movlb	2	; select bank2
  5403  004F  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  5404  0052  00EE               	movwf	__pdataBANK2& (0+127)
  5405  0053  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  5406  0056  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  5407                           
  5408                           ; Initialize objects allocated to BANK3
  5409  0057  30B2               	movlw	low __pidataBANK3
  5410  0058  0084               	movwf	4
  5411  0059  3091               	movlw	(high __pidataBANK3)| (0+128)
  5412  005A  0085               	movwf	5
  5413  005B  30E3               	movlw	low __pdataBANK3
  5414  005C  0086               	movwf	6
  5415  005D  3001               	movlw	high __pdataBANK3
  5416  005E  0087               	movwf	7
  5417  005F  3008               	movlw	8
  5418  0060  3191  2160  3180   	fcall	init_ram
  5419                           
  5420                           ; Clear objects allocated to COMMON
  5421  0063  01F0               	clrf	__pbssCOMMON& (0+127)
  5422  0064  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5423  0065  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5424  0066  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5425  0067  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5426  0068  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5427                           
  5428                           ; Clear objects allocated to BANK1
  5429  0069  30E6               	movlw	low __pbssBANK1
  5430  006A  0084               	movwf	4
  5431  006B  3000               	movlw	high __pbssBANK1
  5432  006C  0085               	movwf	5
  5433  006D  3009               	movlw	9
  5434  006E  3191  215A  3180   	fcall	clear_ram0
  5435                           
  5436                           ; Clear objects allocated to BANK2
  5437  0071  3060               	movlw	low __pbssBANK2
  5438  0072  0084               	movwf	4
  5439  0073  3001               	movlw	high __pbssBANK2
  5440  0074  0085               	movwf	5
  5441  0075  300E               	movlw	14
  5442  0076  3191  215A  3180   	fcall	clear_ram0
  5443                           
  5444                           ; Clear objects allocated to BANK3
  5445  0079  30A0               	movlw	low __pbssBANK3
  5446  007A  0084               	movwf	4
  5447  007B  3001               	movlw	high __pbssBANK3
  5448  007C  0085               	movwf	5
  5449  007D  3043               	movlw	67
  5450  007E  3191  215A  3180   	fcall	clear_ram0
  5451                           
  5452                           ; Clear objects allocated to BANK4
  5453  0081  3020               	movlw	low __pbssBANK4
  5454  0082  0084               	movwf	4
  5455  0083  3002               	movlw	high __pbssBANK4
  5456  0084  0085               	movwf	5
  5457  0085  3044               	movlw	68
  5458  0086  3191  215A  3180   	fcall	clear_ram0
  5459                           
  5460                           ; Clear objects allocated to BANK5
  5461  0089  30A0               	movlw	low __pbssBANK5
  5462  008A  0084               	movwf	4
  5463  008B  3002               	movlw	high __pbssBANK5
  5464  008C  0085               	movwf	5
  5465  008D  3020               	movlw	32
  5466  008E  3191  215A         	fcall	clear_ram0
  5467  0090                     end_of_initialization:	
  5468                           ;End of C runtime variable initialization code
  5469                           
  5470  0090                     __end_of__initialization:	
  5471  0090  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5472  0091  0020               	movlb	0
  5473  0092  318A  2A52         	ljmp	_main	;jump to C main() function
  5474                           
  5475                           	psect	bssCOMMON
  5476  0070                     __pbssCOMMON:	
  5477  0070                     _gesture_lr_delta_:	
  5478  0070                     	ds	2
  5479  0072                     _gesture_ud_delta_:	
  5480  0072                     	ds	2
  5481  0074                     _eusartRxTail:	
  5482  0074                     	ds	1
  5483  0075                     _eusartRxHead:	
  5484  0075                     	ds	1
  5485                           
  5486                           	psect	bssBANK1
  5487  00E6                     __pbssBANK1:	
  5488  00E6                     _name:	
  5489  00E6                     	ds	2
  5490  00E8                     _gesture_lr_count_:	
  5491  00E8                     	ds	2
  5492  00EA                     _gesture_ud_count_:	
  5493  00EA                     	ds	2
  5494  00EC                     _eusartRxCount:	
  5495  00EC                     	ds	1
  5496  00ED                     _eusartTxTail:	
  5497  00ED                     	ds	1
  5498  00EE                     _eusartTxHead:	
  5499  00EE                     	ds	1
  5500                           
  5501                           	psect	dataBANK1
  5502  00EF                     __pdataBANK1:	
  5503  00EF                     _on:	
  5504  00EF                     	ds	1
  5505                           
  5506                           	psect	bssBANK2
  5507  0160                     __pbssBANK2:	
  5508  0160                     _prec:	
  5509  0160                     	ds	2
  5510  0162                     _flags:	
  5511  0162                     	ds	2
  5512  0164                     _brightness:	
  5513  0164                     	ds	2
  5514  0166                     _gesture_near_count_:	
  5515  0166                     	ds	2
  5516  0168                     _b_i2c_error_flag:	
  5517  0168                     	ds	1
  5518  0169                     _prox:	
  5519  0169                     	ds	1
  5520  016A                     _adcResult:	
  5521  016A                     	ds	1
  5522  016B                     _printed:	
  5523  016B                     	ds	1
  5524  016C                     _handleGestureFlag:	
  5525  016C                     	ds	1
  5526  016D                     _eusartRxLastError:	
  5527  016D                     	ds	1
  5528                           
  5529                           	psect	dataBANK2
  5530  016E                     __pdataBANK2:	
  5531  016E                     _gestureToggle:	
  5532  016E                     	ds	1
  5533  016F                     _start:	
  5534  016F                     	ds	1
  5535                           
  5536                           	psect	bssBANK3
  5537  01A0                     __pbssBANK3:	
  5538  01A0                     _i2c_status:	
  5539  01A0                     	ds	29
  5540  01BD                     _eusartRxStatusBuffer:	
  5541  01BD                     	ds	8
  5542  01C5                     _eusartRxBuffer:	
  5543  01C5                     	ds	8
  5544  01CD                     _eusartTxBuffer:	
  5545  01CD                     	ds	8
  5546  01D5                     _nout:	
  5547  01D5                     	ds	2
  5548  01D7                     _width:	
  5549  01D7                     	ds	2
  5550  01D9                     _gesture_motion_:	
  5551  01D9                     	ds	2
  5552  01DB                     _gesture_state_:	
  5553  01DB                     	ds	2
  5554  01DD                     _gesture_far_count_:	
  5555  01DD                     	ds	2
  5556  01DF                     _i2c1_driver_i2cISR:	
  5557  01DF                     	ds	2
  5558  01E1                     _i2c1_driver_busCollisionISR:	
  5559  01E1                     	ds	2
  5560                           
  5561                           	psect	dataBANK3
  5562  01E3                     __pdataBANK3:	
  5563  01E3                     _names:	
  5564  01E3                     	ds	8
  5565                           
  5566                           	psect	bssBANK4
  5567  0220                     __pbssBANK4:	
  5568  0220                     _gesture_data_:	
  5569  0220                     	ds	68
  5570                           
  5571                           	psect	bssBANK5
  5572  02A0                     __pbssBANK5:	
  5573  02A0                     _dbuf:	
  5574  02A0                     	ds	32
  5575                           
  5576                           	psect	inittext
  5577  1160                     init_ram:	
  5578  1160  00FE               	movwf	126
  5579  1161                     initloop:	
  5580  1161  0012               	moviw fsr0++
  5581  1162  001E               	movwi fsr1++
  5582  1163  0BFE               	decfsz	126,f
  5583  1164  2961               	goto	initloop
  5584  1165  3400               	retlw	0
  5585                           
  5586                           	psect	clrtext
  5587  115A                     clear_ram0:	
  5588                           ;	Called with FSR0 containing the base address, and
  5589                           ;	WREG with the size to clear
  5590                           
  5591  115A  0064               	clrwdt	;clear the watchdog before getting into this loop
  5592  115B                     clrloop0:	
  5593  115B  0180               	clrf	0	;clear RAM location pointed to by FSR
  5594  115C  3101               	addfsr 0,1
  5595  115D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5596  115E  295B               	goto	clrloop0	;have we reached the end yet?
  5597  115F  3400               	retlw	0	;all done for this memory range, return
  5598                           
  5599                           	psect	cstackBANK2
  5600  0120                     __pcstackBANK2:	
  5601  0120                     readGesture@fifo_data:	
  5602                           
  5603                           ; 64 bytes @ 0x0
  5604  0120                     	ds	64
  5605                           
  5606                           	psect	cstackBANK1
  5607  00A0                     __pcstackBANK1:	
  5608  00A0                     vfprintf@fp:	
  5609  00A0                     readGesture@fifo_data2:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612                           
  5613                           ; 64 bytes @ 0x0
  5614  00A0                     	ds	1
  5615  00A1                     vfprintf@cfmt:	
  5616                           
  5617                           ; 2 bytes @ 0x1
  5618  00A1                     	ds	2
  5619  00A3                     ?_sprintf:	
  5620  00A3                     sprintf@fmt:	
  5621                           ; 2 bytes @ 0x3
  5622                           
  5623                           
  5624                           ; 2 bytes @ 0x3
  5625  00A3                     	ds	6
  5626  00A9                     sprintf@ap:	
  5627                           
  5628                           ; 1 bytes @ 0x9
  5629  00A9                     	ds	1
  5630  00AA                     sprintf@s:	
  5631                           
  5632                           ; 1 bytes @ 0xA
  5633  00AA                     	ds	1
  5634  00AB                     sprintf@f:	
  5635                           
  5636                           ; 5 bytes @ 0xB
  5637  00AB                     	ds	5
  5638  00B0                     ??_UART_Byte:	
  5639                           
  5640                           ; 1 bytes @ 0x10
  5641  00B0                     	ds	2
  5642  00B2                     UART_Byte@bits:	
  5643                           
  5644                           ; 7 bytes @ 0x12
  5645  00B2                     	ds	7
  5646  00B9                     UART_Byte@onStr:	
  5647                           
  5648                           ; 1 bytes @ 0x19
  5649  00B9                     	ds	1
  5650  00BA                     UART_Byte@proxStr:	
  5651                           
  5652                           ; 1 bytes @ 0x1A
  5653  00BA                     	ds	1
  5654  00BB                     UART_Byte@profileStr:	
  5655                           
  5656                           ; 1 bytes @ 0x1B
  5657  00BB                     	ds	1
  5658  00BC                     UART_Byte@brightStr:	
  5659                           
  5660                           ; 1 bytes @ 0x1C
  5661  00BC                     	ds	36
  5662  00E0                     ??_main:	
  5663                           
  5664                           ; 1 bytes @ 0x40
  5665  00E0                     	ds	5
  5666  00E5                     main@startSystem:	
  5667                           
  5668                           ; 1 bytes @ 0x45
  5669  00E5                     	ds	1
  5670                           
  5671                           	psect	cstackCOMMON
  5672  0076                     __pcstackCOMMON:	
  5673  0076                     ?_i2c1_driver_open:	
  5674  0076                     ?_i2c1_driver_isNACK:	
  5675                           ; 1 bit 
  5676                           
  5677  0076                     ?_i2c1_driver_isBufferFull:	
  5678                           ; 1 bit 
  5679                           
  5680  0076                     ?_returnStop:	
  5681                           ; 1 bit 
  5682                           
  5683  0076                     ?_returnReset:	
  5684                           ; 1 bytes @ 0x0
  5685                           
  5686  0076                     ?_mssp1_clearIRQ:	
  5687                           ; 1 bytes @ 0x0
  5688                           
  5689  0076                     ??_mssp1_clearIRQ:	
  5690                           ; 1 bytes @ 0x0
  5691                           
  5692  0076                     ?_i2c_busCollisionISR:	
  5693                           ; 1 bytes @ 0x0
  5694                           
  5695  0076                     ??_i2c_busCollisionISR:	
  5696                           ; 1 bytes @ 0x0
  5697                           
  5698  0076                     ?_i2c_ISR:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  0076                     ?_i2c1_driver_start:	
  5702                           ; 1 bytes @ 0x0
  5703                           
  5704  0076                     ?_i2c1_driver_resetBus:	
  5705                           ; 1 bytes @ 0x0
  5706                           
  5707  0076                     ??_i2c1_driver_resetBus:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  0076                     ?_i2c1_driver_restart:	
  5711                           ; 1 bytes @ 0x0
  5712                           
  5713  0076                     ?_i2c1_driver_stop:	
  5714                           ; 1 bytes @ 0x0
  5715                           
  5716  0076                     ?_i2c1_driver_TXData:	
  5717                           ; 1 bytes @ 0x0
  5718                           
  5719  0076                     ?_i2c1_driver_startRX:	
  5720                           ; 1 bytes @ 0x0
  5721                           
  5722  0076                     ?_i2c1_driver_sendACK:	
  5723                           ; 1 bytes @ 0x0
  5724                           
  5725  0076                     ??_i2c1_driver_sendACK:	
  5726                           ; 1 bytes @ 0x0
  5727                           
  5728  0076                     ?_i2c1_driver_sendNACK:	
  5729                           ; 1 bytes @ 0x0
  5730                           
  5731  0076                     ??_i2c1_driver_isNACK:	
  5732                           ; 1 bytes @ 0x0
  5733                           
  5734  0076                     ?_i2c1_driver_getRXData:	
  5735                           ; 1 bytes @ 0x0
  5736                           
  5737  0076                     ?_mssp1_setIRQ:	
  5738                           ; 1 bytes @ 0x0
  5739                           
  5740  0076                     ??_mssp1_setIRQ:	
  5741                           ; 1 bytes @ 0x0
  5742                           
  5743  0076                     ?_i2c1_driver_clearBusCollision:	
  5744                           ; 1 bytes @ 0x0
  5745                           
  5746  0076                     ??_i2c1_driver_clearBusCollision:	
  5747                           ; 1 bytes @ 0x0
  5748                           
  5749  0076                     ?_PIN_MANAGER_IOC:	
  5750                           ; 1 bytes @ 0x0
  5751                           
  5752  0076                     ??_PIN_MANAGER_IOC:	
  5753                           ; 1 bytes @ 0x0
  5754                           
  5755  0076                     ?_PMD_Initialize:	
  5756                           ; 1 bytes @ 0x0
  5757                           
  5758  0076                     ?_PIN_MANAGER_Initialize:	
  5759                           ; 1 bytes @ 0x0
  5760                           
  5761  0076                     ?_OSCILLATOR_Initialize:	
  5762                           ; 1 bytes @ 0x0
  5763                           
  5764  0076                     ?_WDT_Initialize:	
  5765                           ; 1 bytes @ 0x0
  5766                           
  5767  0076                     ?_SPI2_Initialize:	
  5768                           ; 1 bytes @ 0x0
  5769                           
  5770  0076                     ?_PWM1_Initialize:	
  5771                           ; 1 bytes @ 0x0
  5772                           
  5773  0076                     ?_ADC_Initialize:	
  5774                           ; 1 bytes @ 0x0
  5775                           
  5776  0076                     ?_TMR2_Initialize:	
  5777                           ; 1 bytes @ 0x0
  5778                           
  5779  0076                     ?_EUSART_Initialize:	
  5780                           ; 1 bytes @ 0x0
  5781                           
  5782  0076                     ?_EUSART_Receive_ISR:	
  5783                           ; 1 bytes @ 0x0
  5784                           
  5785  0076                     ?_EUSART_Transmit_ISR:	
  5786                           ; 1 bytes @ 0x0
  5787                           
  5788  0076                     ??_EUSART_Transmit_ISR:	
  5789                           ; 1 bytes @ 0x0
  5790                           
  5791  0076                     ?_EUSART_DefaultFramingErrorHandler:	
  5792                           ; 1 bytes @ 0x0
  5793                           
  5794  0076                     ??_EUSART_DefaultFramingErrorHandler:	
  5795                           ; 1 bytes @ 0x0
  5796                           
  5797  0076                     ?_EUSART_DefaultOverrunErrorHandler:	
  5798                           ; 1 bytes @ 0x0
  5799                           
  5800  0076                     ??_EUSART_DefaultOverrunErrorHandler:	
  5801                           ; 1 bytes @ 0x0
  5802                           
  5803  0076                     ?_EUSART_DefaultErrorHandler:	
  5804                           ; 1 bytes @ 0x0
  5805                           
  5806  0076                     ?_EUSART_RxDataHandler:	
  5807                           ; 1 bytes @ 0x0
  5808                           
  5809  0076                     ??_EUSART_RxDataHandler:	
  5810                           ; 1 bytes @ 0x0
  5811                           
  5812  0076                     ?_Display_Clear:	
  5813                           ; 1 bytes @ 0x0
  5814                           
  5815  0076                     ?_On_Off:	
  5816                           ; 1 bytes @ 0x0
  5817                           
  5818  0076                     ?_PIR_Sensor:	
  5819                           ; 1 bytes @ 0x0
  5820                           
  5821  0076                     ?_initialize:	
  5822                           ; 1 bytes @ 0x0
  5823                           
  5824  0076                     ?_enableGestureSensor:	
  5825                           ; 1 bytes @ 0x0
  5826                           
  5827  0076                     ?_UART_Byte:	
  5828                           ; 1 bytes @ 0x0
  5829                           
  5830  0076                     ?_Get_ADC:	
  5831                           ; 1 bytes @ 0x0
  5832                           
  5833  0076                     ?_isGestureAvailable:	
  5834                           ; 1 bytes @ 0x0
  5835                           
  5836  0076                     ?_handleGesture:	
  5837                           ; 1 bytes @ 0x0
  5838                           
  5839  0076                     ?_PWM_Output_Enable:	
  5840                           ; 1 bytes @ 0x0
  5841                           
  5842  0076                     ?_PWM_Output_Disable:	
  5843                           ; 1 bytes @ 0x0
  5844                           
  5845  0076                     ?_Toggle:	
  5846                           ; 1 bytes @ 0x0
  5847                           
  5848  0076                     ?_wireReadDataByte:	
  5849                           ; 1 bytes @ 0x0
  5850                           
  5851  0076                     ?_setLEDDrive:	
  5852                           ; 1 bytes @ 0x0
  5853                           
  5854  0076                     ?_setProximityGain:	
  5855                           ; 1 bytes @ 0x0
  5856                           
  5857  0076                     ?_setAmbientLightGain:	
  5858                           ; 1 bytes @ 0x0
  5859                           
  5860  0076                     ?_setProxIntLowThresh:	
  5861                           ; 1 bytes @ 0x0
  5862                           
  5863  0076                     ?_setProxIntHighThresh:	
  5864                           ; 1 bytes @ 0x0
  5865                           
  5866  0076                     ?_setGestureEnterThresh:	
  5867                           ; 1 bytes @ 0x0
  5868                           
  5869  0076                     ?_setGestureExitThresh:	
  5870                           ; 1 bytes @ 0x0
  5871                           
  5872  0076                     ?_setGestureGain:	
  5873                           ; 1 bytes @ 0x0
  5874                           
  5875  0076                     ?_setGestureLEDDrive:	
  5876                           ; 1 bytes @ 0x0
  5877                           
  5878  0076                     ?_setGestureWaitTime:	
  5879                           ; 1 bytes @ 0x0
  5880                           
  5881  0076                     ?_setGestureIntEnable:	
  5882                           ; 1 bytes @ 0x0
  5883                           
  5884  0076                     ?_getMode:	
  5885                           ; 1 bytes @ 0x0
  5886                           
  5887  0076                     ?_resetGestureParameters:	
  5888                           ; 1 bytes @ 0x0
  5889                           
  5890  0076                     ?_setLEDBoost:	
  5891                           ; 1 bytes @ 0x0
  5892                           
  5893  0076                     ?_setGestureMode:	
  5894                           ; 1 bytes @ 0x0
  5895                           
  5896  0076                     ?_enablePower:	
  5897                           ; 1 bytes @ 0x0
  5898                           
  5899  0076                     ?_processGestureData:	
  5900                           ; 1 bytes @ 0x0
  5901                           
  5902  0076                     ?_decodeGesture:	
  5903                           ; 1 bytes @ 0x0
  5904                           
  5905  0076                     ?_I2C_Start:	
  5906                           ; 1 bytes @ 0x0
  5907                           
  5908  0076                     ?_I2C_Write_Byte:	
  5909                           ; 1 bytes @ 0x0
  5910                           
  5911  0076                     ?_I2C_ReStart:	
  5912                           ; 1 bytes @ 0x0
  5913                           
  5914  0076                     ?_I2C_Read_Byte:	
  5915                           ; 1 bytes @ 0x0
  5916                           
  5917  0076                     ?_I2C_Send_NACK:	
  5918                           ; 1 bytes @ 0x0
  5919                           
  5920  0076                     ?_I2C_Stop:	
  5921                           ; 1 bytes @ 0x0
  5922                           
  5923  0076                     ?_do_I2C_RESET:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0076                     ??_do_I2C_RESET:	
  5927                           ; 1 bytes @ 0x0
  5928                           
  5929  0076                     ?_do_I2C_IDLE:	
  5930                           ; 1 bytes @ 0x0
  5931                           
  5932  0076                     ??_do_I2C_IDLE:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0076                     ?_do_I2C_SEND_RESTART:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0076                     ??_do_I2C_SEND_RESTART:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0076                     ?_do_I2C_SEND_STOP:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0076                     ??_do_I2C_SEND_STOP:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0076                     ?_do_I2C_SEND_ADR_READ:	
  5960                           ; 1 bytes @ 0x0
  5961                           
  5962  0076                     ??_do_I2C_SEND_ADR_READ:	
  5963                           ; 1 bytes @ 0x0
  5964                           
  5965  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5966                           ; 1 bytes @ 0x0
  5967                           
  5968  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0076                     ?_do_I2C_RCEN:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0076                     ??_do_I2C_RCEN:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0076                     ?_do_I2C_DO_ACK:	
  5978                           ; 1 bytes @ 0x0
  5979                           
  5980  0076                     ??_do_I2C_DO_ACK:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0076                     ?_do_I2C_DO_NACK_STOP:	
  5984                           ; 1 bytes @ 0x0
  5985                           
  5986  0076                     ??_do_I2C_DO_NACK_STOP:	
  5987                           ; 1 bytes @ 0x0
  5988                           
  5989  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5990                           ; 1 bytes @ 0x0
  5991                           
  5992  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5993                           ; 1 bytes @ 0x0
  5994                           
  5995  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5996                           ; 1 bytes @ 0x0
  5997                           
  5998  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5999                           ; 1 bytes @ 0x0
  6000                           
  6001  0076                     ?_do_I2C_TX:	
  6002                           ; 1 bytes @ 0x0
  6003                           
  6004  0076                     ??_do_I2C_TX:	
  6005                           ; 1 bytes @ 0x0
  6006                           
  6007  0076                     ?_do_I2C_RX:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0076                     ??_do_I2C_RX:	
  6011                           ; 1 bytes @ 0x0
  6012                           
  6013  0076                     ?_do_I2C_TX_EMPTY:	
  6014                           ; 1 bytes @ 0x0
  6015                           
  6016  0076                     ??_do_I2C_TX_EMPTY:	
  6017                           ; 1 bytes @ 0x0
  6018                           
  6019  0076                     ?_INTERRUPT_InterruptManager:	
  6020                           ; 1 bytes @ 0x0
  6021                           
  6022  0076                     ?_SYSTEM_Initialize:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0076                     ?_SPI2_Exchange8bit:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0076                     ?_EUSART_Write:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0076                     ?_putch:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0076                     ?_main:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0076                     ?_SPI_Write:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0076                     ?i1_i2c1_driver_restart:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0076                     ??i1_i2c1_driver_restart:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0076                     ?i1_i2c1_driver_stop:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0076                     ??i1_i2c1_driver_stop:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  0076                     ?i1_i2c1_driver_startRX:	
  6053                           ; 1 bytes @ 0x0
  6054                           
  6055  0076                     ??i1_i2c1_driver_startRX:	
  6056                           ; 1 bytes @ 0x0
  6057                           
  6058  0076                     ?i1_i2c1_driver_getRXData:	
  6059                           ; 1 bytes @ 0x0
  6060                           
  6061  0076                     ??i1_i2c1_driver_getRXData:	
  6062                           ; 1 bytes @ 0x0
  6063                           
  6064  0076                     ?i1_i2c1_driver_TXData:	
  6065                           ; 1 bytes @ 0x0
  6066                           
  6067  0076                     ??i1_i2c1_driver_TXData:	
  6068                           ; 1 bytes @ 0x0
  6069                           
  6070  0076                     ?i1_i2c1_driver_sendNACK:	
  6071                           ; 1 bytes @ 0x0
  6072                           
  6073  0076                     ??i1_i2c1_driver_sendNACK:	
  6074                           ; 1 bytes @ 0x0
  6075                           
  6076  0076                     returnStop@p:	
  6077                           ; 1 bytes @ 0x0
  6078                           
  6079  0076                     returnReset@p:	
  6080                           ; 1 bytes @ 0x0
  6081                           
  6082  0076                     i1i2c1_driver_TXData@d:	
  6083                           ; 1 bytes @ 0x0
  6084                           
  6085                           
  6086                           ; 1 bytes @ 0x0
  6087  0076                     	ds	1
  6088  0077                     ??_returnStop:	
  6089  0077                     ??_returnReset:	
  6090                           ; 1 bytes @ 0x1
  6091                           
  6092  0077                     ??_EUSART_Receive_ISR:	
  6093                           ; 1 bytes @ 0x1
  6094                           
  6095  0077                     ??_EUSART_DefaultErrorHandler:	
  6096                           ; 1 bytes @ 0x1
  6097                           
  6098                           
  6099                           ; 1 bytes @ 0x1
  6100  0077                     	ds	2
  6101  0079                     ??_i2c_ISR:	
  6102                           
  6103                           ; 1 bytes @ 0x3
  6104  0079                     	ds	3
  6105  007C                     ??_INTERRUPT_InterruptManager:	
  6106                           
  6107                           	psect	cstackBANK0
  6108  0020                     __pcstackBANK0:	
  6109                           ; 1 bytes @ 0x6
  6110                           
  6111  0020                     ??_i2c1_driver_open:	
  6112  0020                     ??_i2c1_driver_start:	
  6113                           ; 1 bytes @ 0x0
  6114                           
  6115  0020                     ??_i2c1_driver_restart:	
  6116                           ; 1 bytes @ 0x0
  6117                           
  6118  0020                     ??_i2c1_driver_stop:	
  6119                           ; 1 bytes @ 0x0
  6120                           
  6121  0020                     ??_i2c1_driver_TXData:	
  6122                           ; 1 bytes @ 0x0
  6123                           
  6124  0020                     ??_i2c1_driver_startRX:	
  6125                           ; 1 bytes @ 0x0
  6126                           
  6127  0020                     ??_i2c1_driver_sendNACK:	
  6128                           ; 1 bytes @ 0x0
  6129                           
  6130  0020                     ??_i2c1_driver_getRXData:	
  6131                           ; 1 bytes @ 0x0
  6132                           
  6133  0020                     ??_PMD_Initialize:	
  6134                           ; 1 bytes @ 0x0
  6135                           
  6136  0020                     ??_PIN_MANAGER_Initialize:	
  6137                           ; 1 bytes @ 0x0
  6138                           
  6139  0020                     ??_OSCILLATOR_Initialize:	
  6140                           ; 1 bytes @ 0x0
  6141                           
  6142  0020                     ??_WDT_Initialize:	
  6143                           ; 1 bytes @ 0x0
  6144                           
  6145  0020                     ??_SPI2_Initialize:	
  6146                           ; 1 bytes @ 0x0
  6147                           
  6148  0020                     ??_PWM1_Initialize:	
  6149                           ; 1 bytes @ 0x0
  6150                           
  6151  0020                     ??_ADC_Initialize:	
  6152                           ; 1 bytes @ 0x0
  6153                           
  6154  0020                     ??_TMR2_Initialize:	
  6155                           ; 1 bytes @ 0x0
  6156                           
  6157  0020                     ?_EUSART_SetRxInterruptHandler:	
  6158                           ; 1 bytes @ 0x0
  6159                           
  6160  0020                     ?_EUSART_SetTxInterruptHandler:	
  6161                           ; 1 bytes @ 0x0
  6162                           
  6163  0020                     ?_EUSART_SetFramingErrorHandler:	
  6164                           ; 1 bytes @ 0x0
  6165                           
  6166  0020                     ?_EUSART_SetOverrunErrorHandler:	
  6167                           ; 1 bytes @ 0x0
  6168                           
  6169  0020                     ?_EUSART_SetErrorHandler:	
  6170                           ; 1 bytes @ 0x0
  6171                           
  6172  0020                     ??_PIR_Sensor:	
  6173                           ; 1 bytes @ 0x0
  6174                           
  6175  0020                     ??_PWM_Output_Enable:	
  6176                           ; 1 bytes @ 0x0
  6177                           
  6178  0020                     ??_PWM_Output_Disable:	
  6179                           ; 1 bytes @ 0x0
  6180                           
  6181  0020                     ??_Toggle:	
  6182                           ; 1 bytes @ 0x0
  6183                           
  6184  0020                     ??_resetGestureParameters:	
  6185                           ; 1 bytes @ 0x0
  6186                           
  6187  0020                     ??_decodeGesture:	
  6188                           ; 1 bytes @ 0x0
  6189                           
  6190  0020                     ??_I2C_Start:	
  6191                           ; 1 bytes @ 0x0
  6192                           
  6193  0020                     ??_I2C_ReStart:	
  6194                           ; 1 bytes @ 0x0
  6195                           
  6196  0020                     ??_I2C_Send_NACK:	
  6197                           ; 1 bytes @ 0x0
  6198                           
  6199  0020                     ??_I2C_Stop:	
  6200                           ; 1 bytes @ 0x0
  6201                           
  6202  0020                     ??_i2c1_driver_isBufferFull:	
  6203                           ; 1 bytes @ 0x0
  6204                           
  6205  0020                     ??_SPI2_Exchange8bit:	
  6206                           ; 1 bytes @ 0x0
  6207                           
  6208  0020                     ??_EUSART_Write:	
  6209                           ; 1 bytes @ 0x0
  6210                           
  6211  0020                     ?_strlen:	
  6212                           ; 1 bytes @ 0x0
  6213                           
  6214  0020                     ?_ADC_GetConversion:	
  6215                           ; 2 bytes @ 0x0
  6216                           
  6217  0020                     ?___wmul:	
  6218                           ; 2 bytes @ 0x0
  6219                           
  6220  0020                     ?___aodiv:	
  6221                           ; 2 bytes @ 0x0
  6222                           
  6223  0020                     ?___aomod:	
  6224                           ; 8 bytes @ 0x0
  6225                           
  6226  0020                     i2c1_driver_TXData@d:	
  6227                           ; 8 bytes @ 0x0
  6228                           
  6229  0020                     SPI2_Exchange8bit@data:	
  6230                           ; 1 bytes @ 0x0
  6231                           
  6232  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6233                           ; 1 bytes @ 0x0
  6234                           
  6235  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6236                           ; 2 bytes @ 0x0
  6237                           
  6238  0020                     EUSART_SetErrorHandler@interruptHandler:	
  6239                           ; 2 bytes @ 0x0
  6240                           
  6241  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  6242                           ; 2 bytes @ 0x0
  6243                           
  6244  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6245                           ; 2 bytes @ 0x0
  6246                           
  6247  0020                     ___wmul@multiplier:	
  6248                           ; 2 bytes @ 0x0
  6249                           
  6250  0020                     strlen@s:	
  6251                           ; 2 bytes @ 0x0
  6252                           
  6253  0020                     ___aodiv@divisor:	
  6254                           ; 2 bytes @ 0x0
  6255                           
  6256  0020                     ___aomod@divisor:	
  6257                           ; 8 bytes @ 0x0
  6258                           
  6259                           
  6260                           ; 8 bytes @ 0x0
  6261  0020                     	ds	1
  6262  0021                     ??_I2C_Write_Byte:	
  6263  0021                     ??_I2C_Read_Byte:	
  6264                           ; 1 bytes @ 0x1
  6265                           
  6266  0021                     ??_SPI_Write:	
  6267                           ; 1 bytes @ 0x1
  6268                           
  6269  0021                     EUSART_Write@txData:	
  6270                           ; 1 bytes @ 0x1
  6271                           
  6272                           
  6273                           ; 1 bytes @ 0x1
  6274  0021                     	ds	1
  6275  0022                     ??_EUSART_Initialize:	
  6276  0022                     ??_EUSART_SetRxInterruptHandler:	
  6277                           ; 1 bytes @ 0x2
  6278                           
  6279  0022                     ??_EUSART_SetTxInterruptHandler:	
  6280                           ; 1 bytes @ 0x2
  6281                           
  6282  0022                     ??_EUSART_SetFramingErrorHandler:	
  6283                           ; 1 bytes @ 0x2
  6284                           
  6285  0022                     ??_EUSART_SetOverrunErrorHandler:	
  6286                           ; 1 bytes @ 0x2
  6287                           
  6288  0022                     ??_EUSART_SetErrorHandler:	
  6289                           ; 1 bytes @ 0x2
  6290                           
  6291  0022                     ??_strlen:	
  6292                           ; 1 bytes @ 0x2
  6293                           
  6294  0022                     ??_ADC_GetConversion:	
  6295                           ; 1 bytes @ 0x2
  6296                           
  6297  0022                     ??_putch:	
  6298                           ; 1 bytes @ 0x2
  6299                           
  6300  0022                     putch@txData:	
  6301                           ; 1 bytes @ 0x2
  6302                           
  6303  0022                     SPI_Write@incoming:	
  6304                           ; 1 bytes @ 0x2
  6305                           
  6306  0022                     _decodeGesture$1845:	
  6307                           ; 1 bytes @ 0x2
  6308                           
  6309  0022                     ___wmul@multiplicand:	
  6310                           ; 2 bytes @ 0x2
  6311                           
  6312                           
  6313                           ; 2 bytes @ 0x2
  6314  0022                     	ds	1
  6315  0023                     ??_Display_Clear:	
  6316  0023                     ??_SYSTEM_Initialize:	
  6317                           ; 1 bytes @ 0x3
  6318                           
  6319  0023                     ?_fputc:	
  6320                           ; 1 bytes @ 0x3
  6321                           
  6322  0023                     ADC_GetConversion@channel:	
  6323                           ; 2 bytes @ 0x3
  6324                           
  6325  0023                     I2C_Write_Byte@Byte:	
  6326                           ; 1 bytes @ 0x3
  6327                           
  6328  0023                     fputc@c:	
  6329                           ; 1 bytes @ 0x3
  6330                           
  6331  0023                     strlen@a:	
  6332                           ; 2 bytes @ 0x3
  6333                           
  6334                           
  6335                           ; 2 bytes @ 0x3
  6336  0023                     	ds	1
  6337  0024                     ??_On_Off:	
  6338  0024                     ??___wmul:	
  6339                           ; 1 bytes @ 0x4
  6340                           
  6341  0024                     _decodeGesture$1846:	
  6342                           ; 1 bytes @ 0x4
  6343                           
  6344  0024                     I2C_Write_Byte@count:	
  6345                           ; 2 bytes @ 0x4
  6346                           
  6347  0024                     ___wmul@product:	
  6348                           ; 2 bytes @ 0x4
  6349                           
  6350                           
  6351                           ; 2 bytes @ 0x4
  6352  0024                     	ds	1
  6353  0025                     ?_Display_Name:	
  6354  0025                     ?_strcpy:	
  6355                           ; 1 bytes @ 0x5
  6356                           
  6357  0025                     fputc@fp:	
  6358                           ; 1 bytes @ 0x5
  6359                           
  6360  0025                     strcpy@src:	
  6361                           ; 1 bytes @ 0x5
  6362                           
  6363  0025                     Display_Name@string1:	
  6364                           ; 1 bytes @ 0x5
  6365                           
  6366                           
  6367                           ; 2 bytes @ 0x5
  6368  0025                     	ds	1
  6369  0026                     ??_strcpy:	
  6370  0026                     ??_wireReadDataByte:	
  6371                           ; 1 bytes @ 0x6
  6372                           
  6373  0026                     ??_fputc:	
  6374                           ; 1 bytes @ 0x6
  6375                           
  6376  0026                     ?_wireWriteDataByte:	
  6377                           ; 1 bytes @ 0x6
  6378                           
  6379  0026                     ?_wireReadDataBlock:	
  6380                           ; 2 bytes @ 0x6
  6381                           
  6382  0026                     ?___awdiv:	
  6383                           ; 2 bytes @ 0x6
  6384                           
  6385  0026                     wireWriteDataByte@val:	
  6386                           ; 2 bytes @ 0x6
  6387                           
  6388  0026                     _decodeGesture$1847:	
  6389                           ; 1 bytes @ 0x6
  6390                           
  6391  0026                     wireReadDataBlock@val:	
  6392                           ; 2 bytes @ 0x6
  6393                           
  6394  0026                     ___awdiv@divisor:	
  6395                           ; 2 bytes @ 0x6
  6396                           
  6397                           
  6398                           ; 2 bytes @ 0x6
  6399  0026                     	ds	1
  6400  0027                     ??_Display_Name:	
  6401  0027                     wireReadDataByte@reg:	
  6402                           ; 1 bytes @ 0x7
  6403                           
  6404  0027                     strcpy@s:	
  6405                           ; 1 bytes @ 0x7
  6406                           
  6407  0027                     On_Off@val:	
  6408                           ; 1 bytes @ 0x7
  6409                           
  6410                           
  6411                           ; 2 bytes @ 0x7
  6412  0027                     	ds	1
  6413  0028                     wireReadDataByte@val:	
  6414  0028                     strcpy@d:	
  6415                           ; 1 bytes @ 0x8
  6416                           
  6417  0028                     Display_Name@length:	
  6418                           ; 1 bytes @ 0x8
  6419                           
  6420  0028                     _decodeGesture$1848:	
  6421                           ; 2 bytes @ 0x8
  6422                           
  6423  0028                     wireReadDataBlock@len:	
  6424                           ; 2 bytes @ 0x8
  6425                           
  6426  0028                     ___awdiv@dividend:	
  6427                           ; 2 bytes @ 0x8
  6428                           
  6429  0028                     ___aodiv@dividend:	
  6430                           ; 2 bytes @ 0x8
  6431                           
  6432  0028                     ___aomod@dividend:	
  6433                           ; 8 bytes @ 0x8
  6434                           
  6435                           
  6436                           ; 8 bytes @ 0x8
  6437  0028                     	ds	1
  6438  0029                     ??_isGestureAvailable:	
  6439  0029                     ??_wireWriteDataByte:	
  6440                           ; 1 bytes @ 0x9
  6441                           
  6442  0029                     ??_getMode:	
  6443                           ; 1 bytes @ 0x9
  6444                           
  6445  0029                     wireWriteDataByte@reg:	
  6446                           ; 1 bytes @ 0x9
  6447                           
  6448  0029                     strcpy@dest:	
  6449                           ; 1 bytes @ 0x9
  6450                           
  6451                           
  6452                           ; 1 bytes @ 0x9
  6453  0029                     	ds	1
  6454  002A                     ?_strcat:	
  6455  002A                     ??_setLEDDrive:	
  6456                           ; 1 bytes @ 0xA
  6457                           
  6458  002A                     ??_setProximityGain:	
  6459                           ; 1 bytes @ 0xA
  6460                           
  6461  002A                     ??_setAmbientLightGain:	
  6462                           ; 1 bytes @ 0xA
  6463                           
  6464  002A                     ??_setProxIntLowThresh:	
  6465                           ; 1 bytes @ 0xA
  6466                           
  6467  002A                     ??_setProxIntHighThresh:	
  6468                           ; 1 bytes @ 0xA
  6469                           
  6470  002A                     ?_setLightIntLowThreshold:	
  6471                           ; 1 bytes @ 0xA
  6472                           
  6473  002A                     ?_setLightIntHighThreshold:	
  6474                           ; 1 bytes @ 0xA
  6475                           
  6476  002A                     ??_setGestureEnterThresh:	
  6477                           ; 1 bytes @ 0xA
  6478                           
  6479  002A                     ??_setGestureExitThresh:	
  6480                           ; 1 bytes @ 0xA
  6481                           
  6482  002A                     ??_setGestureGain:	
  6483                           ; 1 bytes @ 0xA
  6484                           
  6485  002A                     ??_setGestureLEDDrive:	
  6486                           ; 1 bytes @ 0xA
  6487                           
  6488  002A                     ??_setGestureWaitTime:	
  6489                           ; 1 bytes @ 0xA
  6490                           
  6491  002A                     ??_setGestureIntEnable:	
  6492                           ; 1 bytes @ 0xA
  6493                           
  6494  002A                     ??_setLEDBoost:	
  6495                           ; 1 bytes @ 0xA
  6496                           
  6497  002A                     ??_setGestureMode:	
  6498                           ; 1 bytes @ 0xA
  6499                           
  6500  002A                     ??_wireReadDataBlock:	
  6501                           ; 1 bytes @ 0xA
  6502                           
  6503  002A                     ??___awdiv:	
  6504                           ; 1 bytes @ 0xA
  6505                           
  6506  002A                     getMode@enable_value:	
  6507                           ; 1 bytes @ 0xA
  6508                           
  6509  002A                     isGestureAvailable@val:	
  6510                           ; 1 bytes @ 0xA
  6511                           
  6512  002A                     strcat@src:	
  6513                           ; 1 bytes @ 0xA
  6514                           
  6515  002A                     Display_Name@i:	
  6516                           ; 1 bytes @ 0xA
  6517                           
  6518  002A                     setLightIntLowThreshold@threshold:	
  6519                           ; 2 bytes @ 0xA
  6520                           
  6521  002A                     setLightIntHighThreshold@threshold:	
  6522                           ; 2 bytes @ 0xA
  6523                           
  6524  002A                     _decodeGesture$1849:	
  6525                           ; 2 bytes @ 0xA
  6526                           
  6527                           
  6528                           ; 2 bytes @ 0xA
  6529  002A                     	ds	1
  6530  002B                     ??_strcat:	
  6531  002B                     ?_setMode:	
  6532                           ; 1 bytes @ 0xB
  6533                           
  6534  002B                     ?_fputs:	
  6535                           ; 1 bytes @ 0xB
  6536                           
  6537  002B                     setMode@enable:	
  6538                           ; 2 bytes @ 0xB
  6539                           
  6540  002B                     setAmbientLightGain@drive:	
  6541                           ; 1 bytes @ 0xB
  6542                           
  6543  002B                     setProxIntLowThresh@threshold:	
  6544                           ; 1 bytes @ 0xB
  6545                           
  6546  002B                     setProxIntHighThresh@threshold:	
  6547                           ; 1 bytes @ 0xB
  6548                           
  6549  002B                     setGestureEnterThresh@threshold:	
  6550                           ; 1 bytes @ 0xB
  6551                           
  6552  002B                     setGestureExitThresh@threshold:	
  6553                           ; 1 bytes @ 0xB
  6554                           
  6555  002B                     setGestureWaitTime@time:	
  6556                           ; 1 bytes @ 0xB
  6557                           
  6558  002B                     setGestureIntEnable@val:	
  6559                           ; 1 bytes @ 0xB
  6560                           
  6561  002B                     setGestureMode@mode:	
  6562                           ; 1 bytes @ 0xB
  6563                           
  6564  002B                     ___awdiv@counter:	
  6565                           ; 1 bytes @ 0xB
  6566                           
  6567  002B                     fputs@fp:	
  6568                           ; 1 bytes @ 0xB
  6569                           
  6570                           
  6571                           ; 1 bytes @ 0xB
  6572  002B                     	ds	1
  6573  002C                     ??_Get_ADC:	
  6574  002C                     ??_setMode:	
  6575                           ; 1 bytes @ 0xC
  6576                           
  6577  002C                     ??_setLightIntLowThreshold:	
  6578                           ; 1 bytes @ 0xC
  6579                           
  6580  002C                     ??_setLightIntHighThreshold:	
  6581                           ; 1 bytes @ 0xC
  6582                           
  6583  002C                     ??_fputs:	
  6584                           ; 1 bytes @ 0xC
  6585                           
  6586  002C                     setLEDDrive@val:	
  6587                           ; 1 bytes @ 0xC
  6588                           
  6589  002C                     setProximityGain@val:	
  6590                           ; 1 bytes @ 0xC
  6591                           
  6592  002C                     setAmbientLightGain@val:	
  6593                           ; 1 bytes @ 0xC
  6594                           
  6595  002C                     setGestureGain@val:	
  6596                           ; 1 bytes @ 0xC
  6597                           
  6598  002C                     setGestureLEDDrive@val:	
  6599                           ; 1 bytes @ 0xC
  6600                           
  6601  002C                     setGestureWaitTime@val:	
  6602                           ; 1 bytes @ 0xC
  6603                           
  6604  002C                     setGestureIntEnable@enable:	
  6605                           ; 1 bytes @ 0xC
  6606                           
  6607  002C                     setLEDBoost@val:	
  6608                           ; 1 bytes @ 0xC
  6609                           
  6610  002C                     setGestureMode@val:	
  6611                           ; 1 bytes @ 0xC
  6612                           
  6613  002C                     ___awdiv@sign:	
  6614                           ; 1 bytes @ 0xC
  6615                           
  6616  002C                     _decodeGesture$1850:	
  6617                           ; 1 bytes @ 0xC
  6618                           
  6619                           
  6620                           ; 2 bytes @ 0xC
  6621  002C                     	ds	1
  6622  002D                     setLEDDrive@drive:	
  6623  002D                     setProximityGain@drive:	
  6624                           ; 1 bytes @ 0xD
  6625                           
  6626  002D                     setLightIntLowThreshold@val_low:	
  6627                           ; 1 bytes @ 0xD
  6628                           
  6629  002D                     setLightIntHighThreshold@val_low:	
  6630                           ; 1 bytes @ 0xD
  6631                           
  6632  002D                     setGestureGain@gain:	
  6633                           ; 1 bytes @ 0xD
  6634                           
  6635  002D                     setGestureLEDDrive@drive:	
  6636                           ; 1 bytes @ 0xD
  6637                           
  6638  002D                     setLEDBoost@boost:	
  6639                           ; 1 bytes @ 0xD
  6640                           
  6641  002D                     ___awdiv@quotient:	
  6642                           ; 1 bytes @ 0xD
  6643                           
  6644                           
  6645                           ; 2 bytes @ 0xD
  6646  002D                     	ds	1
  6647  002E                     setMode@reg_val:	
  6648  002E                     setLightIntLowThreshold@val_high:	
  6649                           ; 1 bytes @ 0xE
  6650                           
  6651  002E                     setLightIntHighThreshold@val_high:	
  6652                           ; 1 bytes @ 0xE
  6653                           
  6654  002E                     strcat@dest:	
  6655                           ; 1 bytes @ 0xE
  6656                           
  6657  002E                     _decodeGesture$1851:	
  6658                           ; 1 bytes @ 0xE
  6659                           
  6660                           
  6661                           ; 2 bytes @ 0xE
  6662  002E                     	ds	1
  6663  002F                     ??_processGestureData:	
  6664  002F                     setMode@mode:	
  6665                           ; 1 bytes @ 0xF
  6666                           
  6667  002F                     wireReadDataBlock@reg:	
  6668                           ; 1 bytes @ 0xF
  6669                           
  6670  002F                     fputs@c:	
  6671                           ; 1 bytes @ 0xF
  6672                           
  6673  002F                     Get_ADC@val:	
  6674                           ; 1 bytes @ 0xF
  6675                           
  6676                           
  6677                           ; 2 bytes @ 0xF
  6678  002F                     	ds	1
  6679  0030                     ??_initialize:	
  6680  0030                     ??_enableGestureSensor:	
  6681                           ; 1 bytes @ 0x10
  6682                           
  6683  0030                     ??_enablePower:	
  6684                           ; 1 bytes @ 0x10
  6685                           
  6686  0030                     ??___aodiv:	
  6687                           ; 1 bytes @ 0x10
  6688                           
  6689  0030                     ??___aomod:	
  6690                           ; 1 bytes @ 0x10
  6691                           
  6692  0030                     wireReadDataBlock@j:	
  6693                           ; 1 bytes @ 0x10
  6694                           
  6695  0030                     _decodeGesture$1852:	
  6696                           ; 1 bytes @ 0x10
  6697                           
  6698  0030                     fputs@i:	
  6699                           ; 2 bytes @ 0x10
  6700                           
  6701                           
  6702                           ; 2 bytes @ 0x10
  6703  0030                     	ds	1
  6704  0031                     initialize@id:	
  6705  0031                     enableGestureSensor@interrupts:	
  6706                           ; 1 bytes @ 0x11
  6707                           
  6708  0031                     ___aodiv@counter:	
  6709                           ; 1 bytes @ 0x11
  6710                           
  6711  0031                     ___aomod@counter:	
  6712                           ; 1 bytes @ 0x11
  6713                           
  6714  0031                     processGestureData@ud_ratio_first:	
  6715                           ; 1 bytes @ 0x11
  6716                           
  6717                           
  6718                           ; 2 bytes @ 0x11
  6719  0031                     	ds	1
  6720  0032                     ___aodiv@sign:	
  6721  0032                     ___aomod@sign:	
  6722                           ; 1 bytes @ 0x12
  6723                           
  6724  0032                     fputs@s:	
  6725                           ; 1 bytes @ 0x12
  6726                           
  6727                           
  6728                           ; 1 bytes @ 0x12
  6729  0032                     	ds	1
  6730  0033                     ?_abs:	
  6731  0033                     ?_pad:	
  6732                           ; 2 bytes @ 0x13
  6733                           
  6734  0033                     pad@buf:	
  6735                           ; 2 bytes @ 0x13
  6736                           
  6737  0033                     processGestureData@lr_ratio_first:	
  6738                           ; 1 bytes @ 0x13
  6739                           
  6740  0033                     abs@a:	
  6741                           ; 2 bytes @ 0x13
  6742                           
  6743  0033                     ___aodiv@quotient:	
  6744                           ; 2 bytes @ 0x13
  6745                           
  6746                           
  6747                           ; 8 bytes @ 0x13
  6748  0033                     	ds	1
  6749  0034                     pad@p:	
  6750                           
  6751                           ; 2 bytes @ 0x14
  6752  0034                     	ds	1
  6753  0035                     ??_abs:	
  6754  0035                     processGestureData@ud_ratio_last:	
  6755                           ; 1 bytes @ 0x15
  6756                           
  6757                           
  6758                           ; 2 bytes @ 0x15
  6759  0035                     	ds	1
  6760  0036                     ??_pad:	
  6761                           
  6762                           ; 1 bytes @ 0x16
  6763  0036                     	ds	1
  6764  0037                     processGestureData@lr_ratio_last:	
  6765  0037                     pad@i:	
  6766                           ; 2 bytes @ 0x17
  6767                           
  6768                           
  6769                           ; 2 bytes @ 0x17
  6770  0037                     	ds	2
  6771  0039                     _processGestureData$1840:	
  6772  0039                     pad@w:	
  6773                           ; 2 bytes @ 0x19
  6774                           
  6775                           
  6776                           ; 2 bytes @ 0x19
  6777  0039                     	ds	2
  6778  003B                     pad@fp:	
  6779  003B                     _processGestureData$1841:	
  6780                           ; 1 bytes @ 0x1B
  6781                           
  6782                           
  6783                           ; 2 bytes @ 0x1B
  6784  003B                     	ds	1
  6785  003C                     ?_dtoa:	
  6786  003C                     dtoa@d:	
  6787                           ; 2 bytes @ 0x1C
  6788                           
  6789                           
  6790                           ; 8 bytes @ 0x1C
  6791  003C                     	ds	1
  6792  003D                     _processGestureData$1842:	
  6793                           
  6794                           ; 2 bytes @ 0x1D
  6795  003D                     	ds	2
  6796  003F                     _processGestureData$1843:	
  6797                           
  6798                           ; 2 bytes @ 0x1F
  6799  003F                     	ds	2
  6800  0041                     processGestureData@u_last:	
  6801                           
  6802                           ; 1 bytes @ 0x21
  6803  0041                     	ds	1
  6804  0042                     processGestureData@d_last:	
  6805                           
  6806                           ; 1 bytes @ 0x22
  6807  0042                     	ds	1
  6808  0043                     processGestureData@l_last:	
  6809                           
  6810                           ; 1 bytes @ 0x23
  6811  0043                     	ds	1
  6812  0044                     ??_dtoa:	
  6813  0044                     processGestureData@r_last:	
  6814                           ; 1 bytes @ 0x24
  6815                           
  6816                           
  6817                           ; 1 bytes @ 0x24
  6818  0044                     	ds	1
  6819  0045                     processGestureData@u_first:	
  6820                           
  6821                           ; 1 bytes @ 0x25
  6822  0045                     	ds	1
  6823  0046                     processGestureData@d_first:	
  6824                           
  6825                           ; 1 bytes @ 0x26
  6826  0046                     	ds	1
  6827  0047                     processGestureData@l_first:	
  6828  0047                     dtoa@fp:	
  6829                           ; 1 bytes @ 0x27
  6830                           
  6831                           
  6832                           ; 1 bytes @ 0x27
  6833  0047                     	ds	1
  6834  0048                     processGestureData@r_first:	
  6835  0048                     _dtoa$2117:	
  6836                           ; 1 bytes @ 0x28
  6837                           
  6838                           
  6839                           ; 2 bytes @ 0x28
  6840  0048                     	ds	1
  6841  0049                     processGestureData@ud_delta:	
  6842                           
  6843                           ; 2 bytes @ 0x29
  6844  0049                     	ds	1
  6845  004A                     dtoa@p:	
  6846                           
  6847                           ; 2 bytes @ 0x2A
  6848  004A                     	ds	1
  6849  004B                     processGestureData@lr_delta:	
  6850                           
  6851                           ; 2 bytes @ 0x2B
  6852  004B                     	ds	1
  6853  004C                     dtoa@w:	
  6854                           
  6855                           ; 2 bytes @ 0x2C
  6856  004C                     	ds	1
  6857  004D                     processGestureData@i:	
  6858                           
  6859                           ; 2 bytes @ 0x2D
  6860  004D                     	ds	1
  6861  004E                     dtoa@s:	
  6862                           
  6863                           ; 2 bytes @ 0x2E
  6864  004E                     	ds	1
  6865  004F                     ?_readGesture:	
  6866                           
  6867                           ; 2 bytes @ 0x2F
  6868  004F                     	ds	1
  6869  0050                     dtoa@n:	
  6870                           
  6871                           ; 8 bytes @ 0x30
  6872  0050                     	ds	1
  6873  0051                     ??_readGesture:	
  6874                           
  6875                           ; 1 bytes @ 0x31
  6876  0051                     	ds	2
  6877  0053                     readGesture@motion:	
  6878                           
  6879                           ; 2 bytes @ 0x33
  6880  0053                     	ds	2
  6881  0055                     readGesture@gstatus:	
  6882                           
  6883                           ; 1 bytes @ 0x35
  6884  0055                     	ds	1
  6885  0056                     readGesture@bytes_read:	
  6886                           
  6887                           ; 2 bytes @ 0x36
  6888  0056                     	ds	2
  6889  0058                     readGesture@fifo_level:	
  6890  0058                     dtoa@i:	
  6891                           ; 1 bytes @ 0x38
  6892                           
  6893                           
  6894                           ; 2 bytes @ 0x38
  6895  0058                     	ds	1
  6896  0059                     readGesture@i:	
  6897                           
  6898                           ; 2 bytes @ 0x39
  6899  0059                     	ds	1
  6900  005A                     ?_vfpfcnvrt:	
  6901  005A                     vfpfcnvrt@fmt:	
  6902                           ; 2 bytes @ 0x3A
  6903                           
  6904                           
  6905                           ; 1 bytes @ 0x3A
  6906  005A                     	ds	1
  6907  005B                     ??_handleGesture:	
  6908  005B                     vfpfcnvrt@ap:	
  6909                           ; 1 bytes @ 0x3B
  6910                           
  6911                           
  6912                           ; 1 bytes @ 0x3B
  6913  005B                     	ds	1
  6914  005C                     ??_vfpfcnvrt:	
  6915                           
  6916                           ; 1 bytes @ 0x3C
  6917  005C                     	ds	5
  6918  0061                     vfpfcnvrt@ll:	
  6919                           
  6920                           ; 8 bytes @ 0x41
  6921  0061                     	ds	8
  6922  0069                     vfpfcnvrt@fp:	
  6923                           
  6924                           ; 1 bytes @ 0x49
  6925  0069                     	ds	1
  6926  006A                     ?_vfprintf:	
  6927  006A                     vfprintf@fmt:	
  6928                           ; 2 bytes @ 0x4A
  6929                           
  6930                           
  6931                           ; 2 bytes @ 0x4A
  6932  006A                     	ds	2
  6933  006C                     vfprintf@ap:	
  6934                           
  6935                           ; 1 bytes @ 0x4C
  6936  006C                     	ds	1
  6937  006D                     ??_vfprintf:	
  6938                           
  6939                           ; 1 bytes @ 0x4D
  6940  006D                     	ds	2
  6941  006F                     ??_sprintf:	
  6942                           
  6943                           ; 1 bytes @ 0x4F
  6944  006F                     	ds	1
  6945                           
  6946                           	psect	maintext
  6947  0A52                     __pmaintext:	
  6948 ;;
  6949 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6950 ;;
  6951 ;; *************** function _main *****************
  6952 ;; Defined at:
  6953 ;;		line 93 in file "main.c"
  6954 ;; Parameters:    Size  Location     Type
  6955 ;;		None
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  temp            2    0        int 
  6958 ;;  count           2    0        unsigned int 
  6959 ;;  startSystem     1   69[BANK1 ] _Bool 
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  1    wreg      void 
  6962 ;; Registers used:
  6963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6964 ;; Tracked objects:
  6965 ;;		On entry : B1F/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;Total ram usage:        6 bytes
  6974 ;; Hardware stack levels required when called:   15
  6975 ;; This function calls:
  6976 ;;		_Display_Clear
  6977 ;;		_Display_Name
  6978 ;;		_Get_ADC
  6979 ;;		_On_Off
  6980 ;;		_PIR_Sensor
  6981 ;;		_SYSTEM_Initialize
  6982 ;;		_UART_Byte
  6983 ;;		_enableGestureSensor
  6984 ;;		_handleGesture
  6985 ;;		_initialize
  6986 ;;		_isGestureAvailable
  6987 ;; This function is called by:
  6988 ;;		Startup code after reset
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           
  6993                           ;psect for function _main
  6994  0A52                     _main:	
  6995                           
  6996                           ;main.c: 96:     SYSTEM_Initialize();
  6997                           
  6998                           ;incstack = 0
  6999                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7000  0A52  3193  2357  318A   	fcall	_SYSTEM_Initialize
  7001                           
  7002                           ;main.c: 102:     (INTCONbits.GIE = 1);
  7003  0A55  178B               	bsf	11,7	;volatile
  7004                           
  7005                           ;main.c: 105:     (INTCONbits.PEIE = 1);
  7006  0A56  170B               	bsf	11,6	;volatile
  7007                           
  7008                           ;main.c: 107:     Display_Clear();
  7009  0A57  3192  2243  318A   	fcall	_Display_Clear
  7010  0A5A                     l8365:	
  7011                           ;main.c: 109:     while(On_Off() != 1);
  7012                           
  7013  0A5A  3197  277D  318A   	fcall	_On_Off
  7014  0A5D  3A01               	xorlw	1
  7015  0A5E  1D03               	skipz
  7016  0A5F  2A5A               	goto	l8365
  7017                           
  7018                           ;main.c: 110:     if(PIR_Sensor()) {
  7019  0A60  3192  220E  318A   	fcall	_PIR_Sensor
  7020  0A63  3A00               	xorlw	0
  7021  0A64  1903               	skipnz
  7022  0A65  2A6D               	goto	l936
  7023                           
  7024                           ;main.c: 111:         initialize();
  7025  0A66  3186  2652  318A   	fcall	_initialize
  7026                           
  7027                           ;main.c: 112:         enableGestureSensor(0);
  7028  0A69  3000               	movlw	0
  7029  0A6A  318A  22A6  318A   	fcall	_enableGestureSensor
  7030  0A6D                     l936:	
  7031                           ;main.c: 114:     _Bool startSystem;;main.c: 115:     int temp;;main.c: 116:     while (
      +                          1)
  7032                           
  7033                           ;main.c: 113:     }
  7034                           
  7035                           
  7036                           ;main.c: 117:     {;main.c: 118:         On_Off();
  7037  0A6D  3197  277D  318A   	fcall	_On_Off
  7038                           
  7039                           ;main.c: 119:         UART_Byte();
  7040  0A70  318B  2302  318A   	fcall	_UART_Byte
  7041                           
  7042                           ;main.c: 120:         if(on) {
  7043  0A73  0021               	movlb	1	; select bank1
  7044  0A74  086F               	movf	_on^(0+128),w
  7045  0A75  1903               	btfsc	3,2
  7046  0A76  2A6D               	goto	l936
  7047                           
  7048                           ;main.c: 121:             startSystem = PIR_Sensor();
  7049  0A77  3192  220E  318A   	fcall	_PIR_Sensor
  7050  0A7A  0021               	movlb	1	; select bank1
  7051  0A7B  00E0               	movwf	??_main^(0+128)
  7052  0A7C  0860               	movf	??_main^(0+128),w
  7053  0A7D  00E5               	movwf	main@startSystem^(0+128)
  7054                           
  7055                           ;main.c: 122:             if(startSystem) {
  7056  0A7E  0865               	movf	main@startSystem^(0+128),w
  7057  0A7F  1903               	btfsc	3,2
  7058  0A80  2A6D               	goto	l936
  7059                           
  7060                           ;main.c: 124:                 if(start == 1) {
  7061  0A81  0022               	movlb	2	; select bank2
  7062  0A82  036F               	decf	_start^(0+256),w
  7063  0A83  1D03               	btfss	3,2
  7064  0A84  2A95               	goto	l8387
  7065                           
  7066                           ;main.c: 125:                     Display_Name(names[name]);
  7067  0A85  0021               	movlb	1	; select bank1
  7068  0A86  3566               	lslf	_name^(0+128),w
  7069  0A87  3EE3               	addlw	(low (_names| (0+256)))& (0+255)
  7070  0A88  0086               	movwf	6
  7071  0A89  3001               	movlw	1	; select bank3/4
  7072  0A8A  0087               	movwf	7
  7073  0A8B  3F40               	moviw [0]fsr1
  7074  0A8C  0020               	movlb	0	; select bank0
  7075  0A8D  00A5               	movwf	Display_Name@string1
  7076  0A8E  3F41               	moviw [1]fsr1
  7077  0A8F  00A6               	movwf	Display_Name@string1+1
  7078  0A90  3189  215D  318A   	fcall	_Display_Name
  7079                           
  7080                           ;main.c: 126:                     start = 0;
  7081  0A93  0022               	movlb	2	; select bank2
  7082  0A94  01EF               	clrf	_start^(0+256)
  7083  0A95                     l8387:	
  7084                           
  7085                           ;main.c: 128:                 Get_ADC();
  7086  0A95  318E  2613  318A   	fcall	_Get_ADC
  7087                           
  7088                           ;main.c: 130:                 if(gestureToggle == 1) {
  7089  0A98  0022               	movlb	2	; select bank2
  7090  0A99  036E               	decf	_gestureToggle^(0+256),w
  7091  0A9A  1D03               	btfss	3,2
  7092  0A9B  2A6D               	goto	l936
  7093                           
  7094                           ;main.c: 131:                     if( isGestureAvailable()){
  7095  0A9C  3192  2254  318A   	fcall	_isGestureAvailable
  7096  0A9F  3A00               	xorlw	0
  7097  0AA0  1903               	skipnz
  7098  0AA1  2A6D               	goto	l936
  7099                           
  7100                           ;main.c: 132:                         handleGesture();
  7101  0AA2  3187  2761  318A   	fcall	_handleGesture
  7102  0AA5  2A6D               	goto	l936
  7103  0AA6                     __end_of_main:	
  7104                           
  7105                           	psect	text1
  7106  0652                     __ptext1:	
  7107 ;; *************** function _initialize *****************
  7108 ;; Defined at:
  7109 ;;		line 20 in file "APDS9960.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  id              1   17[BANK0 ] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      _Bool 
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0, pclath, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;Total ram usage:        2 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:   10
  7130 ;; This function calls:
  7131 ;;		_i2c1_driver_open
  7132 ;;		_setAmbientLightGain
  7133 ;;		_setGestureEnterThresh
  7134 ;;		_setGestureExitThresh
  7135 ;;		_setGestureGain
  7136 ;;		_setGestureIntEnable
  7137 ;;		_setGestureLEDDrive
  7138 ;;		_setGestureWaitTime
  7139 ;;		_setLEDDrive
  7140 ;;		_setLightIntHighThreshold
  7141 ;;		_setLightIntLowThreshold
  7142 ;;		_setMode
  7143 ;;		_setProxIntHighThresh
  7144 ;;		_setProxIntLowThresh
  7145 ;;		_setProximityGain
  7146 ;;		_wireReadDataByte
  7147 ;;		_wireWriteDataByte
  7148 ;; This function is called by:
  7149 ;;		_main
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           
  7154                           ;psect for function _initialize
  7155  0652                     _initialize:	
  7156                           
  7157                           ;APDS9960.c: 25:     i2c1_driver_open();
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  7161  0652  3191  21F9  3186   	fcall	_i2c1_driver_open
  7162                           
  7163                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  7164  0655  3092               	movlw	146
  7165  0656  3194  2427  3186   	fcall	_wireReadDataByte
  7166  0659  0020               	movlb	0	; select bank0
  7167  065A  00B0               	movwf	??_initialize
  7168  065B  0830               	movf	??_initialize,w
  7169  065C  00B1               	movwf	initialize@id
  7170                           
  7171                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  7172  065D  30AB               	movlw	171
  7173  065E  0631               	xorwf	initialize@id,w
  7174  065F  1903               	btfsc	3,2
  7175  0660  2E65               	goto	l8057
  7176  0661  309C               	movlw	156
  7177  0662  0631               	xorwf	initialize@id,w
  7178  0663  1D03               	btfss	3,2
  7179  0664  0008               	return
  7180  0665                     l8057:	
  7181                           
  7182                           ;APDS9960.c: 39:     setMode(7, 0);
  7183  0665  01AB               	clrf	setMode@enable
  7184  0666  3007               	movlw	7
  7185  0667  3189  210E  3186   	fcall	_setMode
  7186                           
  7187                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  7188  066A  30DB               	movlw	219
  7189  066B  0020               	movlb	0	; select bank0
  7190  066C  00B0               	movwf	??_initialize
  7191  066D  0830               	movf	??_initialize,w
  7192  066E  00A6               	movwf	wireWriteDataByte@val
  7193  066F  3081               	movlw	129
  7194  0670  3187  27E5  3186   	fcall	_wireWriteDataByte
  7195                           
  7196                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  7197  0673  30F6               	movlw	246
  7198  0674  0020               	movlb	0	; select bank0
  7199  0675  00B0               	movwf	??_initialize
  7200  0676  0830               	movf	??_initialize,w
  7201  0677  00A6               	movwf	wireWriteDataByte@val
  7202  0678  3083               	movlw	131
  7203  0679  3187  27E5  3186   	fcall	_wireWriteDataByte
  7204                           
  7205                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  7206  067C  3087               	movlw	135
  7207  067D  0020               	movlb	0	; select bank0
  7208  067E  00B0               	movwf	??_initialize
  7209  067F  0830               	movf	??_initialize,w
  7210  0680  00A6               	movwf	wireWriteDataByte@val
  7211  0681  308E               	movlw	142
  7212  0682  3187  27E5  3186   	fcall	_wireWriteDataByte
  7213                           
  7214                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  7215  0685  0020               	movlb	0	; select bank0
  7216  0686  01A6               	clrf	wireWriteDataByte@val
  7217  0687  309D               	movlw	157
  7218  0688  3187  27E5  3186   	fcall	_wireWriteDataByte
  7219                           
  7220                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  7221  068B  0020               	movlb	0	; select bank0
  7222  068C  01A6               	clrf	wireWriteDataByte@val
  7223  068D  309E               	movlw	158
  7224  068E  3187  27E5  3186   	fcall	_wireWriteDataByte
  7225                           
  7226                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  7227  0691  3060               	movlw	96
  7228  0692  0020               	movlb	0	; select bank0
  7229  0693  00B0               	movwf	??_initialize
  7230  0694  0830               	movf	??_initialize,w
  7231  0695  00A6               	movwf	wireWriteDataByte@val
  7232  0696  308D               	movlw	141
  7233  0697  3187  27E5  3186   	fcall	_wireWriteDataByte
  7234                           
  7235                           ;APDS9960.c: 47:     setLEDDrive(0);
  7236  069A  3000               	movlw	0
  7237  069B  3195  2533  3186   	fcall	_setLEDDrive
  7238                           
  7239                           ;APDS9960.c: 48:     setProximityGain(2);
  7240  069E  3002               	movlw	2
  7241  069F  3195  255C  3186   	fcall	_setProximityGain
  7242                           
  7243                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  7244  06A2  3001               	movlw	1
  7245  06A3  3193  23C8  3186   	fcall	_setAmbientLightGain
  7246                           
  7247                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  7248  06A6  3000               	movlw	0
  7249  06A7  3192  22A0  3186   	fcall	_setProxIntLowThresh
  7250  06AA  3A00               	xorlw	0
  7251  06AB  1903               	btfsc	3,2
  7252  06AC  0008               	return
  7253                           
  7254                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  7255  06AD  3032               	movlw	50
  7256  06AE  3192  228D  3186   	fcall	_setProxIntHighThresh
  7257  06B1  3A00               	xorlw	0
  7258  06B2  1903               	btfsc	3,2
  7259  06B3  0008               	return
  7260                           
  7261                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  7262  06B4  30FF               	movlw	255
  7263  06B5  0020               	movlb	0	; select bank0
  7264  06B6  00AA               	movwf	setLightIntLowThreshold@threshold
  7265  06B7  30FF               	movlw	255
  7266  06B8  00AB               	movwf	setLightIntLowThreshold@threshold+1
  7267  06B9  3195  250C  3186   	fcall	_setLightIntLowThreshold
  7268  06BC  3A00               	xorlw	0
  7269  06BD  1903               	btfsc	3,2
  7270  06BE  0008               	return
  7271                           
  7272                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  7273  06BF  3000               	movlw	0
  7274  06C0  0020               	movlb	0	; select bank0
  7275  06C1  00AA               	movwf	setLightIntHighThreshold@threshold
  7276  06C2  00AB               	movwf	setLightIntHighThreshold@threshold+1
  7277  06C3  3194  24E5  3186   	fcall	_setLightIntHighThreshold
  7278  06C6  3A00               	xorlw	0
  7279  06C7  1903               	btfsc	3,2
  7280  06C8  0008               	return
  7281                           
  7282                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  7283  06C9  3011               	movlw	17
  7284  06CA  0020               	movlb	0	; select bank0
  7285  06CB  00B0               	movwf	??_initialize
  7286  06CC  0830               	movf	??_initialize,w
  7287  06CD  00A6               	movwf	wireWriteDataByte@val
  7288  06CE  308C               	movlw	140
  7289  06CF  3187  27E5  3186   	fcall	_wireWriteDataByte
  7290  06D2  0020               	movlb	0	; select bank0
  7291  06D3  0826               	movf	?_wireWriteDataByte,w
  7292  06D4  0427               	iorwf	?_wireWriteDataByte+1,w
  7293  06D5  1903               	btfsc	3,2
  7294  06D6  0008               	return
  7295                           
  7296                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  7297  06D7  01A6               	clrf	wireWriteDataByte@val
  7298  06D8  0AA6               	incf	wireWriteDataByte@val,f
  7299  06D9  3090               	movlw	144
  7300  06DA  3187  27E5  3186   	fcall	_wireWriteDataByte
  7301  06DD  0020               	movlb	0	; select bank0
  7302  06DE  0826               	movf	?_wireWriteDataByte,w
  7303  06DF  0427               	iorwf	?_wireWriteDataByte+1,w
  7304  06E0  1903               	btfsc	3,2
  7305  06E1  0008               	return
  7306                           
  7307                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  7308  06E2  01A6               	clrf	wireWriteDataByte@val
  7309  06E3  309F               	movlw	159
  7310  06E4  3187  27E5  3186   	fcall	_wireWriteDataByte
  7311  06E7  0020               	movlb	0	; select bank0
  7312  06E8  0826               	movf	?_wireWriteDataByte,w
  7313  06E9  0427               	iorwf	?_wireWriteDataByte+1,w
  7314  06EA  1903               	btfsc	3,2
  7315  06EB  0008               	return
  7316                           
  7317                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  7318  06EC  3028               	movlw	40
  7319  06ED  3192  2267  3186   	fcall	_setGestureEnterThresh
  7320  06F0  3A00               	xorlw	0
  7321  06F1  1903               	btfsc	3,2
  7322  06F2  0008               	return
  7323                           
  7324                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  7325  06F3  301E               	movlw	30
  7326  06F4  3192  227A  3186   	fcall	_setGestureExitThresh
  7327  06F7  3A00               	xorlw	0
  7328  06F8  1903               	btfsc	3,2
  7329  06F9  0008               	return
  7330                           
  7331                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  7332  06FA  3040               	movlw	64
  7333  06FB  0020               	movlb	0	; select bank0
  7334  06FC  00B0               	movwf	??_initialize
  7335  06FD  0830               	movf	??_initialize,w
  7336  06FE  00A6               	movwf	wireWriteDataByte@val
  7337  06FF  30A2               	movlw	162
  7338  0700  3187  27E5  3186   	fcall	_wireWriteDataByte
  7339  0703  0020               	movlb	0	; select bank0
  7340  0704  0826               	movf	?_wireWriteDataByte,w
  7341  0705  0427               	iorwf	?_wireWriteDataByte+1,w
  7342  0706  1903               	btfsc	3,2
  7343  0707  0008               	return
  7344                           
  7345                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  7346  0708  3002               	movlw	2
  7347  0709  3196  263E  3186   	fcall	_setGestureGain
  7348  070C  3A00               	xorlw	0
  7349  070D  1903               	btfsc	3,2
  7350  070E  0008               	return
  7351                           
  7352                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  7353  070F  3000               	movlw	0
  7354  0710  3196  2670  3186   	fcall	_setGestureLEDDrive
  7355  0713  3A00               	xorlw	0
  7356  0714  1903               	btfsc	3,2
  7357  0715  0008               	return
  7358                           
  7359                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  7360  0716  3001               	movlw	1
  7361  0717  3194  24BE  3186   	fcall	_setGestureWaitTime
  7362  071A  3A00               	xorlw	0
  7363  071B  1903               	btfsc	3,2
  7364  071C  0008               	return
  7365                           
  7366                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  7367  071D  0020               	movlb	0	; select bank0
  7368  071E  01A6               	clrf	wireWriteDataByte@val
  7369  071F  30A4               	movlw	164
  7370  0720  3187  27E5  3186   	fcall	_wireWriteDataByte
  7371  0723  0020               	movlb	0	; select bank0
  7372  0724  0826               	movf	?_wireWriteDataByte,w
  7373  0725  0427               	iorwf	?_wireWriteDataByte+1,w
  7374  0726  1903               	btfsc	3,2
  7375  0727  0008               	return
  7376                           
  7377                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  7378  0728  01A6               	clrf	wireWriteDataByte@val
  7379  0729  30A5               	movlw	165
  7380  072A  3187  27E5  3186   	fcall	_wireWriteDataByte
  7381  072D  0020               	movlb	0	; select bank0
  7382  072E  0826               	movf	?_wireWriteDataByte,w
  7383  072F  0427               	iorwf	?_wireWriteDataByte+1,w
  7384  0730  1903               	btfsc	3,2
  7385  0731  0008               	return
  7386                           
  7387                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  7388  0732  01A6               	clrf	wireWriteDataByte@val
  7389  0733  30A7               	movlw	167
  7390  0734  3187  27E5  3186   	fcall	_wireWriteDataByte
  7391  0737  0020               	movlb	0	; select bank0
  7392  0738  0826               	movf	?_wireWriteDataByte,w
  7393  0739  0427               	iorwf	?_wireWriteDataByte+1,w
  7394  073A  1903               	btfsc	3,2
  7395  073B  0008               	return
  7396                           
  7397                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  7398  073C  01A6               	clrf	wireWriteDataByte@val
  7399  073D  30A9               	movlw	169
  7400  073E  3187  27E5  3186   	fcall	_wireWriteDataByte
  7401  0741  0020               	movlb	0	; select bank0
  7402  0742  0826               	movf	?_wireWriteDataByte,w
  7403  0743  0427               	iorwf	?_wireWriteDataByte+1,w
  7404  0744  1903               	btfsc	3,2
  7405  0745  0008               	return
  7406                           
  7407                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  7408  0746  30C9               	movlw	201
  7409  0747  00B0               	movwf	??_initialize
  7410  0748  0830               	movf	??_initialize,w
  7411  0749  00A6               	movwf	wireWriteDataByte@val
  7412  074A  30A6               	movlw	166
  7413  074B  3187  27E5  3186   	fcall	_wireWriteDataByte
  7414  074E  0020               	movlb	0	; select bank0
  7415  074F  0826               	movf	?_wireWriteDataByte,w
  7416  0750  0427               	iorwf	?_wireWriteDataByte+1,w
  7417  0751  1903               	btfsc	3,2
  7418  0752  0008               	return
  7419                           
  7420                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  7421  0753  01A6               	clrf	wireWriteDataByte@val
  7422  0754  30AA               	movlw	170
  7423  0755  3187  27E5  3186   	fcall	_wireWriteDataByte
  7424  0758  0020               	movlb	0	; select bank0
  7425  0759  0826               	movf	?_wireWriteDataByte,w
  7426  075A  0427               	iorwf	?_wireWriteDataByte+1,w
  7427  075B  1903               	btfsc	3,2
  7428  075C  0008               	return
  7429                           
  7430                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  7431  075D  3000               	movlw	0
  7432  075E  3195  25B0         	fcall	_setGestureIntEnable
  7433  0760  0008               	return
  7434  0761                     __end_of_initialize:	
  7435                           
  7436                           	psect	text2
  7437  155C                     __ptext2:	
  7438 ;; *************** function _setProximityGain *****************
  7439 ;; Defined at:
  7440 ;;		line 192 in file "APDS9960.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  drive           1    wreg     unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  drive           1   13[BANK0 ] unsigned char 
  7445 ;;  val             1   12[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  1    wreg      _Bool 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0, pclath, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;Total ram usage:        4 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    8
  7462 ;; This function calls:
  7463 ;;		_wireReadDataByte
  7464 ;;		_wireWriteDataByte
  7465 ;; This function is called by:
  7466 ;;		_initialize
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           
  7471                           ;psect for function _setProximityGain
  7472  155C                     _setProximityGain:	
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  7476                           ;setProximityGain@drive stored from wreg
  7477  155C  0020               	movlb	0	; select bank0
  7478  155D  00AD               	movwf	setProximityGain@drive
  7479                           
  7480                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  7481  155E  308F               	movlw	143
  7482  155F  3194  2427  3195   	fcall	_wireReadDataByte
  7483  1562  0020               	movlb	0	; select bank0
  7484  1563  00AA               	movwf	??_setProximityGain
  7485  1564  082A               	movf	??_setProximityGain,w
  7486  1565  00AC               	movwf	setProximityGain@val
  7487                           
  7488                           ;APDS9960.c: 199:     drive &= 0b00000011;
  7489  1566  3003               	movlw	3
  7490  1567  00AA               	movwf	??_setProximityGain
  7491  1568  082A               	movf	??_setProximityGain,w
  7492  1569  05AD               	andwf	setProximityGain@drive,f
  7493                           
  7494                           ;APDS9960.c: 200:     drive = drive << 2;
  7495  156A  082D               	movf	setProximityGain@drive,w
  7496  156B  00AA               	movwf	??_setProximityGain
  7497  156C  3001               	movlw	1
  7498  156D                     u7575:	
  7499  156D  35AA               	lslf	??_setProximityGain,f
  7500  156E  3EFF               	addlw	-1
  7501  156F  1D03               	skipz
  7502  1570  2D6D               	goto	u7575
  7503  1571  352A               	lslf	??_setProximityGain,w
  7504  1572  00AB               	movwf	??_setProximityGain+1
  7505  1573  082B               	movf	??_setProximityGain+1,w
  7506  1574  00AD               	movwf	setProximityGain@drive
  7507                           
  7508                           ;APDS9960.c: 201:     val &= 0b11110011;
  7509  1575  30F3               	movlw	243
  7510  1576  00AA               	movwf	??_setProximityGain
  7511  1577  082A               	movf	??_setProximityGain,w
  7512  1578  05AC               	andwf	setProximityGain@val,f
  7513                           
  7514                           ;APDS9960.c: 202:     val |= drive;
  7515  1579  082D               	movf	setProximityGain@drive,w
  7516  157A  00AA               	movwf	??_setProximityGain
  7517  157B  082A               	movf	??_setProximityGain,w
  7518  157C  04AC               	iorwf	setProximityGain@val,f
  7519                           
  7520                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  7521  157D  082C               	movf	setProximityGain@val,w
  7522  157E  00AA               	movwf	??_setProximityGain
  7523  157F  082A               	movf	??_setProximityGain,w
  7524  1580  00A6               	movwf	wireWriteDataByte@val
  7525  1581  308F               	movlw	143
  7526  1582  3187  27E5         	fcall	_wireWriteDataByte
  7527  1584  0008               	return
  7528  1585                     __end_of_setProximityGain:	
  7529                           
  7530                           	psect	text3
  7531  12A0                     __ptext3:	
  7532 ;; *************** function _setProxIntLowThresh *****************
  7533 ;; Defined at:
  7534 ;;		line 234 in file "APDS9960.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  threshold       1    wreg     unsigned char 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;  threshold       1   11[BANK0 ] unsigned char 
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      _Bool 
  7541 ;; Registers used:
  7542 ;;		wreg, status,2, status,0, pclath, cstack
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;Total ram usage:        2 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; Hardware stack levels required when called:    8
  7555 ;; This function calls:
  7556 ;;		_wireWriteDataByte
  7557 ;; This function is called by:
  7558 ;;		_initialize
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           
  7563                           ;psect for function _setProxIntLowThresh
  7564  12A0                     _setProxIntLowThresh:	
  7565                           
  7566                           ;incstack = 0
  7567                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  7568                           ;setProxIntLowThresh@threshold stored from wreg
  7569  12A0  0020               	movlb	0	; select bank0
  7570  12A1  00AB               	movwf	setProxIntLowThresh@threshold
  7571                           
  7572                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  7573  12A2  082B               	movf	setProxIntLowThresh@threshold,w
  7574  12A3  00AA               	movwf	??_setProxIntLowThresh
  7575  12A4  082A               	movf	??_setProxIntLowThresh,w
  7576  12A5  00A6               	movwf	wireWriteDataByte@val
  7577  12A6  3089               	movlw	137
  7578  12A7  3187  27E5  3192   	fcall	_wireWriteDataByte
  7579  12AA  0020               	movlb	0	; select bank0
  7580  12AB  0826               	movf	?_wireWriteDataByte,w
  7581  12AC  0427               	iorwf	?_wireWriteDataByte+1,w
  7582  12AD  1D03               	btfss	3,2
  7583  12AE  2AB1               	goto	l7775
  7584                           
  7585                           ;APDS9960.c: 237:         return 0;
  7586  12AF  3000               	movlw	0
  7587  12B0  0008               	return
  7588  12B1                     l7775:	
  7589                           
  7590                           ;APDS9960.c: 240:     return 1;
  7591  12B1  3001               	movlw	1
  7592  12B2  0008               	return
  7593  12B3                     __end_of_setProxIntLowThresh:	
  7594                           
  7595                           	psect	text4
  7596  128D                     __ptext4:	
  7597 ;; *************** function _setProxIntHighThresh *****************
  7598 ;; Defined at:
  7599 ;;		line 244 in file "APDS9960.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  threshold       1    wreg     unsigned char 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  threshold       1   11[BANK0 ] unsigned char 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      _Bool 
  7606 ;; Registers used:
  7607 ;;		wreg, status,2, status,0, pclath, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;Total ram usage:        2 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:    8
  7620 ;; This function calls:
  7621 ;;		_wireWriteDataByte
  7622 ;; This function is called by:
  7623 ;;		_initialize
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           
  7628                           ;psect for function _setProxIntHighThresh
  7629  128D                     _setProxIntHighThresh:	
  7630                           
  7631                           ;incstack = 0
  7632                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  7633                           ;setProxIntHighThresh@threshold stored from wreg
  7634  128D  0020               	movlb	0	; select bank0
  7635  128E  00AB               	movwf	setProxIntHighThresh@threshold
  7636                           
  7637                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  7638  128F  082B               	movf	setProxIntHighThresh@threshold,w
  7639  1290  00AA               	movwf	??_setProxIntHighThresh
  7640  1291  082A               	movf	??_setProxIntHighThresh,w
  7641  1292  00A6               	movwf	wireWriteDataByte@val
  7642  1293  308B               	movlw	139
  7643  1294  3187  27E5  3192   	fcall	_wireWriteDataByte
  7644  1297  0020               	movlb	0	; select bank0
  7645  1298  0826               	movf	?_wireWriteDataByte,w
  7646  1299  0427               	iorwf	?_wireWriteDataByte+1,w
  7647  129A  1D03               	btfss	3,2
  7648  129B  2A9E               	goto	l7785
  7649                           
  7650                           ;APDS9960.c: 247:         return 0;
  7651  129C  3000               	movlw	0
  7652  129D  0008               	return
  7653  129E                     l7785:	
  7654                           
  7655                           ;APDS9960.c: 250:     return 1;
  7656  129E  3001               	movlw	1
  7657  129F  0008               	return
  7658  12A0                     __end_of_setProxIntHighThresh:	
  7659                           
  7660                           	psect	text5
  7661  150C                     __ptext5:	
  7662 ;; *************** function _setLightIntLowThreshold *****************
  7663 ;; Defined at:
  7664 ;;		line 254 in file "APDS9960.c"
  7665 ;; Parameters:    Size  Location     Type
  7666 ;;  threshold       2   10[BANK0 ] unsigned short 
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;  val_high        1   14[BANK0 ] unsigned char 
  7669 ;;  val_low         1   13[BANK0 ] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      _Bool 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:        5 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    8
  7686 ;; This function calls:
  7687 ;;		_wireWriteDataByte
  7688 ;; This function is called by:
  7689 ;;		_initialize
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           
  7694                           ;psect for function _setLightIntLowThreshold
  7695  150C                     _setLightIntLowThreshold:	
  7696                           
  7697                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  7698                           
  7699                           ;incstack = 0
  7700                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  7701  150C  0020               	movlb	0	; select bank0
  7702  150D  082A               	movf	setLightIntLowThreshold@threshold,w
  7703  150E  00AC               	movwf	??_setLightIntLowThreshold
  7704  150F  082C               	movf	??_setLightIntLowThreshold,w
  7705  1510  00AD               	movwf	setLightIntLowThreshold@val_low
  7706                           
  7707                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  7708  1511  082B               	movf	setLightIntLowThreshold@threshold+1,w
  7709  1512  00AC               	movwf	??_setLightIntLowThreshold
  7710  1513  082C               	movf	??_setLightIntLowThreshold,w
  7711  1514  00AE               	movwf	setLightIntLowThreshold@val_high
  7712                           
  7713                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  7714  1515  082D               	movf	setLightIntLowThreshold@val_low,w
  7715  1516  00AC               	movwf	??_setLightIntLowThreshold
  7716  1517  082C               	movf	??_setLightIntLowThreshold,w
  7717  1518  00A6               	movwf	wireWriteDataByte@val
  7718  1519  3084               	movlw	132
  7719  151A  3187  27E5  3195   	fcall	_wireWriteDataByte
  7720  151D  0020               	movlb	0	; select bank0
  7721  151E  0826               	movf	?_wireWriteDataByte,w
  7722  151F  0427               	iorwf	?_wireWriteDataByte+1,w
  7723  1520  1D03               	btfss	3,2
  7724  1521  2D24               	goto	l7799
  7725  1522                     l7795:	
  7726                           
  7727                           ;APDS9960.c: 265:         return 0;
  7728  1522  3000               	movlw	0
  7729  1523  0008               	return
  7730  1524                     l7799:	
  7731                           
  7732                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  7733  1524  082E               	movf	setLightIntLowThreshold@val_high,w
  7734  1525  00AC               	movwf	??_setLightIntLowThreshold
  7735  1526  082C               	movf	??_setLightIntLowThreshold,w
  7736  1527  00A6               	movwf	wireWriteDataByte@val
  7737  1528  3085               	movlw	133
  7738  1529  3187  27E5  3195   	fcall	_wireWriteDataByte
  7739  152C  0020               	movlb	0	; select bank0
  7740  152D  0826               	movf	?_wireWriteDataByte,w
  7741  152E  0427               	iorwf	?_wireWriteDataByte+1,w
  7742  152F  1903               	btfsc	3,2
  7743  1530  2D22               	goto	l7795
  7744                           
  7745                           ;APDS9960.c: 273:     return 1;
  7746  1531  3001               	movlw	1
  7747  1532  0008               	return
  7748  1533                     __end_of_setLightIntLowThreshold:	
  7749                           
  7750                           	psect	text6
  7751  14E5                     __ptext6:	
  7752 ;; *************** function _setLightIntHighThreshold *****************
  7753 ;; Defined at:
  7754 ;;		line 277 in file "APDS9960.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  threshold       2   10[BANK0 ] unsigned short 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  val_high        1   14[BANK0 ] unsigned char 
  7759 ;;  val_low         1   13[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  1    wreg      _Bool 
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0, pclath, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        5 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    8
  7776 ;; This function calls:
  7777 ;;		_wireWriteDataByte
  7778 ;; This function is called by:
  7779 ;;		_initialize
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _setLightIntHighThreshold
  7785  14E5                     _setLightIntHighThreshold:	
  7786                           
  7787                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  7791  14E5  0020               	movlb	0	; select bank0
  7792  14E6  082A               	movf	setLightIntHighThreshold@threshold,w
  7793  14E7  00AC               	movwf	??_setLightIntHighThreshold
  7794  14E8  082C               	movf	??_setLightIntHighThreshold,w
  7795  14E9  00AD               	movwf	setLightIntHighThreshold@val_low
  7796                           
  7797                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  7798  14EA  082B               	movf	setLightIntHighThreshold@threshold+1,w
  7799  14EB  00AC               	movwf	??_setLightIntHighThreshold
  7800  14EC  082C               	movf	??_setLightIntHighThreshold,w
  7801  14ED  00AE               	movwf	setLightIntHighThreshold@val_high
  7802                           
  7803                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  7804  14EE  082D               	movf	setLightIntHighThreshold@val_low,w
  7805  14EF  00AC               	movwf	??_setLightIntHighThreshold
  7806  14F0  082C               	movf	??_setLightIntHighThreshold,w
  7807  14F1  00A6               	movwf	wireWriteDataByte@val
  7808  14F2  3086               	movlw	134
  7809  14F3  3187  27E5  3194   	fcall	_wireWriteDataByte
  7810  14F6  0020               	movlb	0	; select bank0
  7811  14F7  0826               	movf	?_wireWriteDataByte,w
  7812  14F8  0427               	iorwf	?_wireWriteDataByte+1,w
  7813  14F9  1D03               	btfss	3,2
  7814  14FA  2CFD               	goto	l7819
  7815  14FB                     l7815:	
  7816                           
  7817                           ;APDS9960.c: 288:         return 0;
  7818  14FB  3000               	movlw	0
  7819  14FC  0008               	return
  7820  14FD                     l7819:	
  7821                           
  7822                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  7823  14FD  082E               	movf	setLightIntHighThreshold@val_high,w
  7824  14FE  00AC               	movwf	??_setLightIntHighThreshold
  7825  14FF  082C               	movf	??_setLightIntHighThreshold,w
  7826  1500  00A6               	movwf	wireWriteDataByte@val
  7827  1501  3087               	movlw	135
  7828  1502  3187  27E5  3194   	fcall	_wireWriteDataByte
  7829  1505  0020               	movlb	0	; select bank0
  7830  1506  0826               	movf	?_wireWriteDataByte,w
  7831  1507  0427               	iorwf	?_wireWriteDataByte+1,w
  7832  1508  1903               	btfsc	3,2
  7833  1509  2CFB               	goto	l7815
  7834                           
  7835                           ;APDS9960.c: 296:     return 1;
  7836  150A  3001               	movlw	1
  7837  150B  0008               	return
  7838  150C                     __end_of_setLightIntHighThreshold:	
  7839                           
  7840                           	psect	text7
  7841  1533                     __ptext7:	
  7842 ;; *************** function _setLEDDrive *****************
  7843 ;; Defined at:
  7844 ;;		line 170 in file "APDS9960.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;  drive           1    wreg     unsigned char 
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;  drive           1   13[BANK0 ] unsigned char 
  7849 ;;  val             1   12[BANK0 ] unsigned char 
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  1    wreg      _Bool 
  7852 ;; Registers used:
  7853 ;;		wreg, status,2, status,0, pclath, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;Total ram usage:        4 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    8
  7866 ;; This function calls:
  7867 ;;		_wireReadDataByte
  7868 ;;		_wireWriteDataByte
  7869 ;; This function is called by:
  7870 ;;		_initialize
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           
  7875                           ;psect for function _setLEDDrive
  7876  1533                     _setLEDDrive:	
  7877                           
  7878                           ;incstack = 0
  7879                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7880                           ;setLEDDrive@drive stored from wreg
  7881  1533  0020               	movlb	0	; select bank0
  7882  1534  00AD               	movwf	setLEDDrive@drive
  7883                           
  7884                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7885  1535  308F               	movlw	143
  7886  1536  3194  2427  3195   	fcall	_wireReadDataByte
  7887  1539  0020               	movlb	0	; select bank0
  7888  153A  00AA               	movwf	??_setLEDDrive
  7889  153B  082A               	movf	??_setLEDDrive,w
  7890  153C  00AC               	movwf	setLEDDrive@val
  7891                           
  7892                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7893  153D  3003               	movlw	3
  7894  153E  00AA               	movwf	??_setLEDDrive
  7895  153F  082A               	movf	??_setLEDDrive,w
  7896  1540  05AD               	andwf	setLEDDrive@drive,f
  7897                           
  7898                           ;APDS9960.c: 179:     drive = drive << 6;
  7899  1541  082D               	movf	setLEDDrive@drive,w
  7900  1542  00AA               	movwf	??_setLEDDrive
  7901  1543  3005               	movlw	5
  7902  1544                     u7565:	
  7903  1544  35AA               	lslf	??_setLEDDrive,f
  7904  1545  3EFF               	addlw	-1
  7905  1546  1D03               	skipz
  7906  1547  2D44               	goto	u7565
  7907  1548  352A               	lslf	??_setLEDDrive,w
  7908  1549  00AB               	movwf	??_setLEDDrive+1
  7909  154A  082B               	movf	??_setLEDDrive+1,w
  7910  154B  00AD               	movwf	setLEDDrive@drive
  7911                           
  7912                           ;APDS9960.c: 180:     val &= 0b00111111;
  7913  154C  303F               	movlw	63
  7914  154D  00AA               	movwf	??_setLEDDrive
  7915  154E  082A               	movf	??_setLEDDrive,w
  7916  154F  05AC               	andwf	setLEDDrive@val,f
  7917                           
  7918                           ;APDS9960.c: 181:     val |= drive;
  7919  1550  082D               	movf	setLEDDrive@drive,w
  7920  1551  00AA               	movwf	??_setLEDDrive
  7921  1552  082A               	movf	??_setLEDDrive,w
  7922  1553  04AC               	iorwf	setLEDDrive@val,f
  7923                           
  7924                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7925  1554  082C               	movf	setLEDDrive@val,w
  7926  1555  00AA               	movwf	??_setLEDDrive
  7927  1556  082A               	movf	??_setLEDDrive,w
  7928  1557  00A6               	movwf	wireWriteDataByte@val
  7929  1558  308F               	movlw	143
  7930  1559  3187  27E5         	fcall	_wireWriteDataByte
  7931  155B  0008               	return
  7932  155C                     __end_of_setLEDDrive:	
  7933                           
  7934                           	psect	text8
  7935  14BE                     __ptext8:	
  7936 ;; *************** function _setGestureWaitTime *****************
  7937 ;; Defined at:
  7938 ;;		line 366 in file "APDS9960.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  time            1    wreg     unsigned char 
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;  time            1   11[BANK0 ] unsigned char 
  7943 ;;  val             1   12[BANK0 ] unsigned char 
  7944 ;; Return value:  Size  Location     Type
  7945 ;;                  1    wreg      _Bool 
  7946 ;; Registers used:
  7947 ;;		wreg, status,2, status,0, pclath, cstack
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;Total ram usage:        3 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; Hardware stack levels required when called:    8
  7960 ;; This function calls:
  7961 ;;		_wireReadDataByte
  7962 ;;		_wireWriteDataByte
  7963 ;; This function is called by:
  7964 ;;		_initialize
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           
  7969                           ;psect for function _setGestureWaitTime
  7970  14BE                     _setGestureWaitTime:	
  7971                           
  7972                           ;incstack = 0
  7973                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7974                           ;setGestureWaitTime@time stored from wreg
  7975  14BE  0020               	movlb	0	; select bank0
  7976  14BF  00AB               	movwf	setGestureWaitTime@time
  7977                           
  7978                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7979  14C0  30A3               	movlw	163
  7980  14C1  3194  2427  3194   	fcall	_wireReadDataByte
  7981  14C4  0020               	movlb	0	; select bank0
  7982  14C5  00AA               	movwf	??_setGestureWaitTime
  7983  14C6  082A               	movf	??_setGestureWaitTime,w
  7984  14C7  00AC               	movwf	setGestureWaitTime@val
  7985                           
  7986                           ;APDS9960.c: 374:     time &= 0b00000111;
  7987  14C8  3007               	movlw	7
  7988  14C9  00AA               	movwf	??_setGestureWaitTime
  7989  14CA  082A               	movf	??_setGestureWaitTime,w
  7990  14CB  05AB               	andwf	setGestureWaitTime@time,f
  7991                           
  7992                           ;APDS9960.c: 375:     val &= 0b11111000;
  7993  14CC  30F8               	movlw	248
  7994  14CD  00AA               	movwf	??_setGestureWaitTime
  7995  14CE  082A               	movf	??_setGestureWaitTime,w
  7996  14CF  05AC               	andwf	setGestureWaitTime@val,f
  7997                           
  7998                           ;APDS9960.c: 376:     val |= time;
  7999  14D0  082B               	movf	setGestureWaitTime@time,w
  8000  14D1  00AA               	movwf	??_setGestureWaitTime
  8001  14D2  082A               	movf	??_setGestureWaitTime,w
  8002  14D3  04AC               	iorwf	setGestureWaitTime@val,f
  8003                           
  8004                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  8005  14D4  082C               	movf	setGestureWaitTime@val,w
  8006  14D5  00AA               	movwf	??_setGestureWaitTime
  8007  14D6  082A               	movf	??_setGestureWaitTime,w
  8008  14D7  00A6               	movwf	wireWriteDataByte@val
  8009  14D8  30A3               	movlw	163
  8010  14D9  3187  27E5  3194   	fcall	_wireWriteDataByte
  8011  14DC  0020               	movlb	0	; select bank0
  8012  14DD  0826               	movf	?_wireWriteDataByte,w
  8013  14DE  0427               	iorwf	?_wireWriteDataByte+1,w
  8014  14DF  1D03               	btfss	3,2
  8015  14E0  2CE3               	goto	l7899
  8016                           
  8017                           ;APDS9960.c: 380:         return 0;
  8018  14E1  3000               	movlw	0
  8019  14E2  0008               	return
  8020  14E3                     l7899:	
  8021                           
  8022                           ;APDS9960.c: 383:     return 1;
  8023  14E3  3001               	movlw	1
  8024  14E4  0008               	return
  8025  14E5                     __end_of_setGestureWaitTime:	
  8026                           
  8027                           	psect	text9
  8028  1670                     __ptext9:	
  8029 ;; *************** function _setGestureLEDDrive *****************
  8030 ;; Defined at:
  8031 ;;		line 343 in file "APDS9960.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;  drive           1    wreg     unsigned char 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  drive           1   13[BANK0 ] unsigned char 
  8036 ;;  val             1   12[BANK0 ] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      _Bool 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;Total ram usage:        4 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    8
  8053 ;; This function calls:
  8054 ;;		_wireReadDataByte
  8055 ;;		_wireWriteDataByte
  8056 ;; This function is called by:
  8057 ;;		_initialize
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function _setGestureLEDDrive
  8063  1670                     _setGestureLEDDrive:	
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  8067                           ;setGestureLEDDrive@drive stored from wreg
  8068  1670  0020               	movlb	0	; select bank0
  8069  1671  00AD               	movwf	setGestureLEDDrive@drive
  8070                           
  8071                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  8072  1672  30A3               	movlw	163
  8073  1673  3194  2427  3196   	fcall	_wireReadDataByte
  8074  1676  0020               	movlb	0	; select bank0
  8075  1677  00AA               	movwf	??_setGestureLEDDrive
  8076  1678  082A               	movf	??_setGestureLEDDrive,w
  8077  1679  00AC               	movwf	setGestureLEDDrive@val
  8078                           
  8079                           ;APDS9960.c: 352:     drive &= 0b00000011;
  8080  167A  3003               	movlw	3
  8081  167B  00AA               	movwf	??_setGestureLEDDrive
  8082  167C  082A               	movf	??_setGestureLEDDrive,w
  8083  167D  05AD               	andwf	setGestureLEDDrive@drive,f
  8084                           
  8085                           ;APDS9960.c: 353:     drive = drive << 3;
  8086  167E  082D               	movf	setGestureLEDDrive@drive,w
  8087  167F  00AA               	movwf	??_setGestureLEDDrive
  8088  1680  3002               	movlw	2
  8089  1681                     u7685:	
  8090  1681  35AA               	lslf	??_setGestureLEDDrive,f
  8091  1682  3EFF               	addlw	-1
  8092  1683  1D03               	skipz
  8093  1684  2E81               	goto	u7685
  8094  1685  352A               	lslf	??_setGestureLEDDrive,w
  8095  1686  00AB               	movwf	??_setGestureLEDDrive+1
  8096  1687  082B               	movf	??_setGestureLEDDrive+1,w
  8097  1688  00AD               	movwf	setGestureLEDDrive@drive
  8098                           
  8099                           ;APDS9960.c: 354:     val &= 0b11100111;
  8100  1689  30E7               	movlw	231
  8101  168A  00AA               	movwf	??_setGestureLEDDrive
  8102  168B  082A               	movf	??_setGestureLEDDrive,w
  8103  168C  05AC               	andwf	setGestureLEDDrive@val,f
  8104                           
  8105                           ;APDS9960.c: 355:     val |= drive;
  8106  168D  082D               	movf	setGestureLEDDrive@drive,w
  8107  168E  00AA               	movwf	??_setGestureLEDDrive
  8108  168F  082A               	movf	??_setGestureLEDDrive,w
  8109  1690  04AC               	iorwf	setGestureLEDDrive@val,f
  8110                           
  8111                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  8112  1691  082C               	movf	setGestureLEDDrive@val,w
  8113  1692  00AA               	movwf	??_setGestureLEDDrive
  8114  1693  082A               	movf	??_setGestureLEDDrive,w
  8115  1694  00A6               	movwf	wireWriteDataByte@val
  8116  1695  30A3               	movlw	163
  8117  1696  3187  27E5  3196   	fcall	_wireWriteDataByte
  8118  1699  0020               	movlb	0	; select bank0
  8119  169A  0826               	movf	?_wireWriteDataByte,w
  8120  169B  0427               	iorwf	?_wireWriteDataByte+1,w
  8121  169C  1D03               	btfss	3,2
  8122  169D  2EA0               	goto	l7881
  8123                           
  8124                           ;APDS9960.c: 359:         return 0;
  8125  169E  3000               	movlw	0
  8126  169F  0008               	return
  8127  16A0                     l7881:	
  8128                           
  8129                           ;APDS9960.c: 362:     return 1;
  8130  16A0  3001               	movlw	1
  8131  16A1  0008               	return
  8132  16A2                     __end_of_setGestureLEDDrive:	
  8133                           
  8134                           	psect	text10
  8135  163E                     __ptext10:	
  8136 ;; *************** function _setGestureGain *****************
  8137 ;; Defined at:
  8138 ;;		line 320 in file "APDS9960.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  gain            1    wreg     unsigned char 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;  gain            1   13[BANK0 ] unsigned char 
  8143 ;;  val             1   12[BANK0 ] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      _Bool 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0, pclath, cstack
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;Total ram usage:        4 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    8
  8160 ;; This function calls:
  8161 ;;		_wireReadDataByte
  8162 ;;		_wireWriteDataByte
  8163 ;; This function is called by:
  8164 ;;		_initialize
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           
  8169                           ;psect for function _setGestureGain
  8170  163E                     _setGestureGain:	
  8171                           
  8172                           ;incstack = 0
  8173                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  8174                           ;setGestureGain@gain stored from wreg
  8175  163E  0020               	movlb	0	; select bank0
  8176  163F  00AD               	movwf	setGestureGain@gain
  8177                           
  8178                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  8179  1640  30A3               	movlw	163
  8180  1641  3194  2427  3196   	fcall	_wireReadDataByte
  8181  1644  0020               	movlb	0	; select bank0
  8182  1645  00AA               	movwf	??_setGestureGain
  8183  1646  082A               	movf	??_setGestureGain,w
  8184  1647  00AC               	movwf	setGestureGain@val
  8185                           
  8186                           ;APDS9960.c: 329:     gain &= 0b00000011;
  8187  1648  3003               	movlw	3
  8188  1649  00AA               	movwf	??_setGestureGain
  8189  164A  082A               	movf	??_setGestureGain,w
  8190  164B  05AD               	andwf	setGestureGain@gain,f
  8191                           
  8192                           ;APDS9960.c: 330:     gain = gain << 5;
  8193  164C  082D               	movf	setGestureGain@gain,w
  8194  164D  00AA               	movwf	??_setGestureGain
  8195  164E  3004               	movlw	4
  8196  164F                     u7665:	
  8197  164F  35AA               	lslf	??_setGestureGain,f
  8198  1650  3EFF               	addlw	-1
  8199  1651  1D03               	skipz
  8200  1652  2E4F               	goto	u7665
  8201  1653  352A               	lslf	??_setGestureGain,w
  8202  1654  00AB               	movwf	??_setGestureGain+1
  8203  1655  082B               	movf	??_setGestureGain+1,w
  8204  1656  00AD               	movwf	setGestureGain@gain
  8205                           
  8206                           ;APDS9960.c: 331:     val &= 0b10011111;
  8207  1657  309F               	movlw	159
  8208  1658  00AA               	movwf	??_setGestureGain
  8209  1659  082A               	movf	??_setGestureGain,w
  8210  165A  05AC               	andwf	setGestureGain@val,f
  8211                           
  8212                           ;APDS9960.c: 332:     val |= gain;
  8213  165B  082D               	movf	setGestureGain@gain,w
  8214  165C  00AA               	movwf	??_setGestureGain
  8215  165D  082A               	movf	??_setGestureGain,w
  8216  165E  04AC               	iorwf	setGestureGain@val,f
  8217                           
  8218                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  8219  165F  082C               	movf	setGestureGain@val,w
  8220  1660  00AA               	movwf	??_setGestureGain
  8221  1661  082A               	movf	??_setGestureGain,w
  8222  1662  00A6               	movwf	wireWriteDataByte@val
  8223  1663  30A3               	movlw	163
  8224  1664  3187  27E5  3196   	fcall	_wireWriteDataByte
  8225  1667  0020               	movlb	0	; select bank0
  8226  1668  0826               	movf	?_wireWriteDataByte,w
  8227  1669  0427               	iorwf	?_wireWriteDataByte+1,w
  8228  166A  1D03               	btfss	3,2
  8229  166B  2E6E               	goto	l7863
  8230                           
  8231                           ;APDS9960.c: 336:         return 0;
  8232  166C  3000               	movlw	0
  8233  166D  0008               	return
  8234  166E                     l7863:	
  8235                           
  8236                           ;APDS9960.c: 339:     return 1;
  8237  166E  3001               	movlw	1
  8238  166F  0008               	return
  8239  1670                     __end_of_setGestureGain:	
  8240                           
  8241                           	psect	text11
  8242  127A                     __ptext11:	
  8243 ;; *************** function _setGestureExitThresh *****************
  8244 ;; Defined at:
  8245 ;;		line 310 in file "APDS9960.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;  threshold       1    wreg     unsigned char 
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  threshold       1   11[BANK0 ] unsigned char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      _Bool 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0, pclath, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;Total ram usage:        2 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    8
  8266 ;; This function calls:
  8267 ;;		_wireWriteDataByte
  8268 ;; This function is called by:
  8269 ;;		_initialize
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function _setGestureExitThresh
  8275  127A                     _setGestureExitThresh:	
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  8279                           ;setGestureExitThresh@threshold stored from wreg
  8280  127A  0020               	movlb	0	; select bank0
  8281  127B  00AB               	movwf	setGestureExitThresh@threshold
  8282                           
  8283                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  8284  127C  082B               	movf	setGestureExitThresh@threshold,w
  8285  127D  00AA               	movwf	??_setGestureExitThresh
  8286  127E  082A               	movf	??_setGestureExitThresh,w
  8287  127F  00A6               	movwf	wireWriteDataByte@val
  8288  1280  30A1               	movlw	161
  8289  1281  3187  27E5  3192   	fcall	_wireWriteDataByte
  8290  1284  0020               	movlb	0	; select bank0
  8291  1285  0826               	movf	?_wireWriteDataByte,w
  8292  1286  0427               	iorwf	?_wireWriteDataByte+1,w
  8293  1287  1D03               	btfss	3,2
  8294  1288  2A8B               	goto	l7845
  8295                           
  8296                           ;APDS9960.c: 313:         return 0;
  8297  1289  3000               	movlw	0
  8298  128A  0008               	return
  8299  128B                     l7845:	
  8300                           
  8301                           ;APDS9960.c: 316:     return 1;
  8302  128B  3001               	movlw	1
  8303  128C  0008               	return
  8304  128D                     __end_of_setGestureExitThresh:	
  8305                           
  8306                           	psect	text12
  8307  1267                     __ptext12:	
  8308 ;; *************** function _setGestureEnterThresh *****************
  8309 ;; Defined at:
  8310 ;;		line 300 in file "APDS9960.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  threshold       1    wreg     unsigned char 
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;  threshold       1   11[BANK0 ] unsigned char 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  1    wreg      _Bool 
  8317 ;; Registers used:
  8318 ;;		wreg, status,2, status,0, pclath, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;Total ram usage:        2 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    8
  8331 ;; This function calls:
  8332 ;;		_wireWriteDataByte
  8333 ;; This function is called by:
  8334 ;;		_initialize
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _setGestureEnterThresh
  8340  1267                     _setGestureEnterThresh:	
  8341                           
  8342                           ;incstack = 0
  8343                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  8344                           ;setGestureEnterThresh@threshold stored from wreg
  8345  1267  0020               	movlb	0	; select bank0
  8346  1268  00AB               	movwf	setGestureEnterThresh@threshold
  8347                           
  8348                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  8349  1269  082B               	movf	setGestureEnterThresh@threshold,w
  8350  126A  00AA               	movwf	??_setGestureEnterThresh
  8351  126B  082A               	movf	??_setGestureEnterThresh,w
  8352  126C  00A6               	movwf	wireWriteDataByte@val
  8353  126D  30A0               	movlw	160
  8354  126E  3187  27E5  3192   	fcall	_wireWriteDataByte
  8355  1271  0020               	movlb	0	; select bank0
  8356  1272  0826               	movf	?_wireWriteDataByte,w
  8357  1273  0427               	iorwf	?_wireWriteDataByte+1,w
  8358  1274  1D03               	btfss	3,2
  8359  1275  2A78               	goto	l7835
  8360                           
  8361                           ;APDS9960.c: 303:         return 0;
  8362  1276  3000               	movlw	0
  8363  1277  0008               	return
  8364  1278                     l7835:	
  8365                           
  8366                           ;APDS9960.c: 306:     return 1;
  8367  1278  3001               	movlw	1
  8368  1279  0008               	return
  8369  127A                     __end_of_setGestureEnterThresh:	
  8370                           
  8371                           	psect	text13
  8372  13C8                     __ptext13:	
  8373 ;; *************** function _setAmbientLightGain *****************
  8374 ;; Defined at:
  8375 ;;		line 213 in file "APDS9960.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;  drive           1    wreg     unsigned char 
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  drive           1   11[BANK0 ] unsigned char 
  8380 ;;  val             1   12[BANK0 ] unsigned char 
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  1    wreg      _Bool 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0, pclath, cstack
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;Total ram usage:        3 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; Hardware stack levels required when called:    8
  8397 ;; This function calls:
  8398 ;;		_wireReadDataByte
  8399 ;;		_wireWriteDataByte
  8400 ;; This function is called by:
  8401 ;;		_initialize
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           
  8406                           ;psect for function _setAmbientLightGain
  8407  13C8                     _setAmbientLightGain:	
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  8411                           ;setAmbientLightGain@drive stored from wreg
  8412  13C8  0020               	movlb	0	; select bank0
  8413  13C9  00AB               	movwf	setAmbientLightGain@drive
  8414                           
  8415                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  8416  13CA  308F               	movlw	143
  8417  13CB  3194  2427  3193   	fcall	_wireReadDataByte
  8418  13CE  0020               	movlb	0	; select bank0
  8419  13CF  00AA               	movwf	??_setAmbientLightGain
  8420  13D0  082A               	movf	??_setAmbientLightGain,w
  8421  13D1  00AC               	movwf	setAmbientLightGain@val
  8422                           
  8423                           ;APDS9960.c: 221:     drive &= 0b00000011;
  8424  13D2  3003               	movlw	3
  8425  13D3  00AA               	movwf	??_setAmbientLightGain
  8426  13D4  082A               	movf	??_setAmbientLightGain,w
  8427  13D5  05AB               	andwf	setAmbientLightGain@drive,f
  8428                           
  8429                           ;APDS9960.c: 222:     val &= 0b11111100;
  8430  13D6  30FC               	movlw	252
  8431  13D7  00AA               	movwf	??_setAmbientLightGain
  8432  13D8  082A               	movf	??_setAmbientLightGain,w
  8433  13D9  05AC               	andwf	setAmbientLightGain@val,f
  8434                           
  8435                           ;APDS9960.c: 223:     val |= drive;
  8436  13DA  082B               	movf	setAmbientLightGain@drive,w
  8437  13DB  00AA               	movwf	??_setAmbientLightGain
  8438  13DC  082A               	movf	??_setAmbientLightGain,w
  8439  13DD  04AC               	iorwf	setAmbientLightGain@val,f
  8440                           
  8441                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  8442  13DE  082C               	movf	setAmbientLightGain@val,w
  8443  13DF  00AA               	movwf	??_setAmbientLightGain
  8444  13E0  082A               	movf	??_setAmbientLightGain,w
  8445  13E1  00A6               	movwf	wireWriteDataByte@val
  8446  13E2  308F               	movlw	143
  8447  13E3  3187  27E5         	fcall	_wireWriteDataByte
  8448  13E5  0008               	return
  8449  13E6                     __end_of_setAmbientLightGain:	
  8450                           
  8451                           	psect	text14
  8452  11F9                     __ptext14:	
  8453 ;; *************** function _i2c1_driver_open *****************
  8454 ;; Defined at:
  8455 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;		None
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;		None
  8460 ;; Return value:  Size  Location     Type
  8461 ;;		None               void
  8462 ;; Registers used:
  8463 ;;		wreg, status,2
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;Total ram usage:        0 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    5
  8476 ;; This function calls:
  8477 ;;		Nothing
  8478 ;; This function is called by:
  8479 ;;		_initialize
  8480 ;;		_i2c_open
  8481 ;;		_InitI2C
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           
  8486                           ;psect for function _i2c1_driver_open
  8487  11F9                     _i2c1_driver_open:	
  8488                           
  8489                           ;incstack = 0
  8490                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  8491  11F9  0024               	movlb	4	; select bank4
  8492  11FA  1A95               	btfsc	21,5	;volatile
  8493  11FB  0008               	return
  8494  11FC  0194               	clrf	20	;volatile
  8495  11FD  3028               	movlw	40
  8496  11FE  0095               	movwf	21	;volatile
  8497  11FF  0196               	clrf	22	;volatile
  8498  1200  3003               	movlw	3
  8499  1201  0092               	movwf	18	;volatile
  8500  1202  0008               	return
  8501  1203                     __end_of_i2c1_driver_open:	
  8502                           
  8503                           	psect	text15
  8504  0761                     __ptext15:	
  8505 ;; *************** function _handleGesture *****************
  8506 ;; Defined at:
  8507 ;;		line 141 in file "main.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;		None
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;		None
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1    wreg      void 
  8514 ;; Registers used:
  8515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;Total ram usage:        1 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:   10
  8528 ;; This function calls:
  8529 ;;		_Display_Name
  8530 ;;		_readGesture
  8531 ;; This function is called by:
  8532 ;;		_main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           
  8537                           ;psect for function _handleGesture
  8538  0761                     _handleGesture:	
  8539                           
  8540                           ;main.c: 142:     switch(readGesture()) {
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8544  0761  2FC5               	goto	l8277
  8545  0762                     l8245:	
  8546                           
  8547                           ;main.c: 144:             brightness++;
  8548  0762  3001               	movlw	1
  8549  0763  0022               	movlb	2	; select bank2
  8550  0764  07E4               	addwf	_brightness^(0+256),f
  8551  0765  3000               	movlw	0
  8552  0766  3DE5               	addwfc	(_brightness+1)^(0+256),f
  8553                           
  8554                           ;main.c: 145:             if(brightness > 7) {
  8555  0767  0865               	movf	(_brightness+1)^(0+256),w
  8556  0768  3A80               	xorlw	128
  8557  0769  0020               	movlb	0	; select bank0
  8558  076A  00DB               	movwf	??_handleGesture
  8559  076B  3080               	movlw	128
  8560  076C  025B               	subwf	??_handleGesture,w
  8561  076D  1D03               	skipz
  8562  076E  2F72               	goto	u8315
  8563  076F  3008               	movlw	8
  8564  0770  0022               	movlb	2	; select bank2
  8565  0771  0264               	subwf	_brightness^(0+256),w
  8566  0772                     u8315:	
  8567  0772  1C03               	skipc
  8568  0773  2FE2               	goto	l8279
  8569                           
  8570                           ;main.c: 146:                 brightness = 7;
  8571  0774  3007               	movlw	7
  8572  0775  0022               	movlb	2	; select bank2
  8573  0776  00E4               	movwf	_brightness^(0+256)
  8574  0777  3000               	movlw	0
  8575  0778  00E5               	movwf	(_brightness^(0+256)+1)
  8576  0779  2FE2               	goto	l8279
  8577  077A                     l8249:	
  8578                           
  8579                           ;main.c: 150:             brightness--;
  8580  077A  30FF               	movlw	255
  8581  077B  0022               	movlb	2	; select bank2
  8582  077C  07E4               	addwf	_brightness^(0+256),f
  8583  077D  30FF               	movlw	255
  8584  077E  3DE5               	addwfc	(_brightness+1)^(0+256),f
  8585                           
  8586                           ;main.c: 151:             if(brightness < 0) {
  8587  077F  1FE5               	btfss	(_brightness+1)^(0+256),7
  8588  0780  2FE2               	goto	l8279
  8589                           
  8590                           ;main.c: 152:                 brightness = 0;
  8591  0781  01E4               	clrf	_brightness^(0+256)
  8592  0782  01E5               	clrf	(_brightness+1)^(0+256)
  8593  0783  2FE2               	goto	l8279
  8594  0784                     l8255:	
  8595                           
  8596                           ;main.c: 156:             printed = 0;
  8597  0784  0022               	movlb	2	; select bank2
  8598  0785  01EB               	clrf	_printed^(0+256)
  8599                           
  8600                           ;main.c: 157:             name++;
  8601  0786  3001               	movlw	1
  8602  0787  0021               	movlb	1	; select bank1
  8603  0788  07E6               	addwf	_name^(0+128),f
  8604  0789  3000               	movlw	0
  8605  078A  3DE7               	addwfc	(_name+1)^(0+128),f
  8606                           
  8607                           ;main.c: 158:             if(name > 3) {
  8608  078B  0867               	movf	(_name+1)^(0+128),w
  8609  078C  3A80               	xorlw	128
  8610  078D  0020               	movlb	0	; select bank0
  8611  078E  00DB               	movwf	??_handleGesture
  8612  078F  3080               	movlw	128
  8613  0790  025B               	subwf	??_handleGesture,w
  8614  0791  1D03               	skipz
  8615  0792  2F96               	goto	u8335
  8616  0793  3004               	movlw	4
  8617  0794  0021               	movlb	1	; select bank1
  8618  0795  0266               	subwf	_name^(0+128),w
  8619  0796                     u8335:	
  8620  0796  1C03               	skipc
  8621  0797  2F9B               	goto	l8263
  8622                           
  8623                           ;main.c: 159:                 name = 0;
  8624  0798  0021               	movlb	1	; select bank1
  8625  0799  01E6               	clrf	_name^(0+128)
  8626  079A  01E7               	clrf	(_name+1)^(0+128)
  8627  079B                     l8263:	
  8628                           
  8629                           ;main.c: 161:             Display_Name(names[name]);
  8630  079B  0021               	movlb	1	; select bank1
  8631  079C  3566               	lslf	_name^(0+128),w
  8632  079D  3EE3               	addlw	(low (_names| (0+256)))& (0+255)
  8633  079E  0086               	movwf	6
  8634  079F  3001               	movlw	1	; select bank3/4
  8635  07A0  0087               	movwf	7
  8636  07A1  3F40               	moviw [0]fsr1
  8637  07A2  0020               	movlb	0	; select bank0
  8638  07A3  00A5               	movwf	Display_Name@string1
  8639  07A4  3F41               	moviw [1]fsr1
  8640  07A5  00A6               	movwf	Display_Name@string1+1
  8641  07A6  3189  215D  3187   	fcall	_Display_Name
  8642                           
  8643                           ;main.c: 162:             break;
  8644  07A9  2FE2               	goto	l8279
  8645  07AA                     l8265:	
  8646                           
  8647                           ;main.c: 164:             printed = 0;
  8648  07AA  0022               	movlb	2	; select bank2
  8649  07AB  01EB               	clrf	_printed^(0+256)
  8650                           
  8651                           ;main.c: 165:             --name;
  8652  07AC  30FF               	movlw	255
  8653  07AD  0021               	movlb	1	; select bank1
  8654  07AE  07E6               	addwf	_name^(0+128),f
  8655  07AF  30FF               	movlw	255
  8656  07B0  3DE7               	addwfc	(_name+1)^(0+128),f
  8657                           
  8658                           ;main.c: 166:             if(name < 0) {
  8659  07B1  1FE7               	btfss	(_name+1)^(0+128),7
  8660  07B2  2FB7               	goto	l8273
  8661                           
  8662                           ;main.c: 167:                 name = 3;
  8663  07B3  3003               	movlw	3
  8664  07B4  00E6               	movwf	_name^(0+128)
  8665  07B5  3000               	movlw	0
  8666  07B6  00E7               	movwf	(_name^(0+128)+1)
  8667  07B7                     l8273:	
  8668                           
  8669                           ;main.c: 169:             Display_Name(names[name]);
  8670  07B7  3566               	lslf	_name^(0+128),w
  8671  07B8  3EE3               	addlw	(low (_names| (0+256)))& (0+255)
  8672  07B9  0086               	movwf	6
  8673  07BA  3001               	movlw	1	; select bank3/4
  8674  07BB  0087               	movwf	7
  8675  07BC  3F40               	moviw [0]fsr1
  8676  07BD  0020               	movlb	0	; select bank0
  8677  07BE  00A5               	movwf	Display_Name@string1
  8678  07BF  3F41               	moviw [1]fsr1
  8679  07C0  00A6               	movwf	Display_Name@string1+1
  8680  07C1  3189  215D  3187   	fcall	_Display_Name
  8681                           
  8682                           ;main.c: 170:             break;
  8683  07C4  2FE2               	goto	l8279
  8684  07C5                     l8277:	
  8685  07C5  318D  2520  3187   	fcall	_readGesture
  8686                           
  8687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8688                           ; Switch size 1, requested type "simple"
  8689                           ; Number of cases is 1, Range of values is 0 to 0
  8690                           ; switch strategies available:
  8691                           ; Name         Instructions Cycles
  8692                           ; simple_byte            4     3 (average)
  8693                           ; direct_byte            8     6 (fixed)
  8694                           ; jumptable            260     6 (fixed)
  8695                           ;	Chosen strategy is simple_byte
  8696  07C8  0020               	movlb	0	; select bank0
  8697  07C9  0850               	movf	?_readGesture+1,w
  8698  07CA  3A00               	xorlw	0	; case 0
  8699  07CB  1903               	skipnz
  8700  07CC  2FCE               	goto	l8527
  8701  07CD  2FE2               	goto	l8279
  8702  07CE                     l8527:	
  8703                           
  8704                           ; Switch size 1, requested type "simple"
  8705                           ; Number of cases is 6, Range of values is 1 to 6
  8706                           ; switch strategies available:
  8707                           ; Name         Instructions Cycles
  8708                           ; simple_byte           19    10 (average)
  8709                           ; direct_byte           21     9 (fixed)
  8710                           ; jumptable            263     9 (fixed)
  8711                           ;	Chosen strategy is simple_byte
  8712  07CE  084F               	movf	?_readGesture,w
  8713  07CF  3A01               	xorlw	1	; case 1
  8714  07D0  1903               	skipnz
  8715  07D1  2F84               	goto	l8255
  8716  07D2  3A03               	xorlw	3	; case 2
  8717  07D3  1903               	skipnz
  8718  07D4  2FAA               	goto	l8265
  8719  07D5  3A01               	xorlw	1	; case 3
  8720  07D6  1903               	skipnz
  8721  07D7  2F62               	goto	l8245
  8722  07D8  3A07               	xorlw	7	; case 4
  8723  07D9  1903               	skipnz
  8724  07DA  2F7A               	goto	l8249
  8725  07DB  3A01               	xorlw	1	; case 5
  8726  07DC  1903               	skipnz
  8727  07DD  2FE2               	goto	l8279
  8728  07DE  3A03               	xorlw	3	; case 6
  8729  07DF  1903               	skipnz
  8730  07E0  2FE2               	goto	l8279
  8731  07E1  2FE2               	goto	l8279
  8732  07E2                     l8279:	
  8733                           
  8734                           ;main.c: 178:     printed = 0;
  8735  07E2  0022               	movlb	2	; select bank2
  8736  07E3  01EB               	clrf	_printed^(0+256)
  8737  07E4  0008               	return
  8738  07E5                     __end_of_handleGesture:	
  8739                           
  8740                           	psect	text16
  8741  0D20                     __ptext16:	
  8742 ;; *************** function _readGesture *****************
  8743 ;; Defined at:
  8744 ;;		line 556 in file "APDS9960.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;		None
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  8749 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  8750 ;;  i               2   57[BANK0 ] int 
  8751 ;;  bytes_read      2   54[BANK0 ] int 
  8752 ;;  motion          2   51[BANK0 ] int 
  8753 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  8754 ;;  gstatus         1   53[BANK0 ] unsigned char 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  2   47[BANK0 ] int 
  8757 ;; Registers used:
  8758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8764 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;Total ram usage:      140 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    9
  8771 ;; This function calls:
  8772 ;;		_decodeGesture
  8773 ;;		_getMode
  8774 ;;		_isGestureAvailable
  8775 ;;		_processGestureData
  8776 ;;		_resetGestureParameters
  8777 ;;		_wireReadDataBlock
  8778 ;;		_wireReadDataByte
  8779 ;; This function is called by:
  8780 ;;		_handleGesture
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           
  8785                           ;psect for function _readGesture
  8786  0D20                     _readGesture:	
  8787                           
  8788                           ;APDS9960.c: 559:     int bytes_read = 0;
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8792  0D20  0020               	movlb	0	; select bank0
  8793  0D21  01D6               	clrf	readGesture@bytes_read
  8794  0D22  01D7               	clrf	readGesture@bytes_read+1
  8795                           
  8796                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  8797  0D23  3192  2254  318D   	fcall	_isGestureAvailable
  8798  0D26  3A00               	xorlw	0
  8799  0D27  1903               	skipnz
  8800  0D28  2D2F               	goto	l7657
  8801  0D29  3191  21F0  318D   	fcall	_getMode
  8802  0D2C  3941               	andlw	65
  8803  0D2D  1D03               	btfss	3,2
  8804  0D2E  2DE4               	goto	l7661
  8805  0D2F                     l7657:	
  8806                           
  8807                           ;APDS9960.c: 568:         return DIR_NONE;
  8808  0D2F  0020               	movlb	0	; select bank0
  8809  0D30  01CF               	clrf	?_readGesture
  8810  0D31  01D0               	clrf	?_readGesture+1
  8811  0D32  0008               	return
  8812  0D33                     l7667:	
  8813                           ;APDS9960.c: 569:     }
  8814                           
  8815                           
  8816                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  8817  0D33  30AE               	movlw	174
  8818  0D34  3194  2427  318D   	fcall	_wireReadDataByte
  8819  0D37  0020               	movlb	0	; select bank0
  8820  0D38  00D1               	movwf	??_readGesture
  8821  0D39  0851               	movf	??_readGesture,w
  8822  0D3A  00D8               	movwf	readGesture@fifo_level
  8823                           
  8824                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  8825  0D3B  0858               	movf	readGesture@fifo_level,w
  8826  0D3C  1903               	btfsc	3,2
  8827  0D3D  2DE4               	goto	l7661
  8828                           
  8829                           ;APDS9960.c: 592:               if(fifo_level < 17)
  8830  0D3E  3011               	movlw	17
  8831  0D3F  0258               	subwf	readGesture@fifo_level,w
  8832  0D40  1803               	skipnc
  8833  0D41  2D46               	goto	l7675
  8834                           
  8835                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8836  0D42  3020               	movlw	low readGesture@fifo_data
  8837  0D43  00A6               	movwf	wireReadDataBlock@val
  8838  0D44  3001               	movlw	high readGesture@fifo_data
  8839  0D45  2D49               	goto	L1
  8840  0D46                     l7675:	
  8841                           ;APDS9960.c: 597:               } else
  8842                           
  8843                           
  8844                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8845  0D46  30A0               	movlw	low readGesture@fifo_data2
  8846  0D47  00A6               	movwf	wireReadDataBlock@val
  8847  0D48  3000               	movlw	high readGesture@fifo_data2
  8848  0D49                     L1:	
  8849  0D49  00A7               	movwf	wireReadDataBlock@val+1
  8850  0D4A  0858               	movf	readGesture@fifo_level,w
  8851  0D4B  00D1               	movwf	??_readGesture
  8852  0D4C  01D2               	clrf	??_readGesture+1
  8853  0D4D  35D1               	lslf	??_readGesture,f
  8854  0D4E  0DD2               	rlf	??_readGesture+1,f
  8855  0D4F  35D1               	lslf	??_readGesture,f
  8856  0D50  0DD2               	rlf	??_readGesture+1,f
  8857  0D51  0851               	movf	??_readGesture,w
  8858  0D52  00A8               	movwf	wireReadDataBlock@len
  8859  0D53  0852               	movf	??_readGesture+1,w
  8860  0D54  00A9               	movwf	wireReadDataBlock@len+1
  8861  0D55  30FC               	movlw	252
  8862  0D56  3188  2075  318D   	fcall	_wireReadDataBlock
  8863  0D59  0020               	movlb	0	; select bank0
  8864  0D5A  0827               	movf	?_wireReadDataBlock+1,w
  8865  0D5B  00D7               	movwf	readGesture@bytes_read+1
  8866  0D5C  0826               	movf	?_wireReadDataBlock,w
  8867  0D5D  00D6               	movwf	readGesture@bytes_read
  8868                           
  8869                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  8870  0D5E  0A56               	incf	readGesture@bytes_read,w
  8871  0D5F  1D03               	skipz
  8872  0D60  2D69               	goto	l7683
  8873  0D61  0A57               	incf	readGesture@bytes_read+1,w
  8874  0D62  1D03               	btfss	3,2
  8875  0D63  2D69               	goto	l7683
  8876                           
  8877                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  8878  0D64  30FF               	movlw	255
  8879  0D65  00CF               	movwf	?_readGesture
  8880  0D66  3000               	movlw	0
  8881  0D67  00D0               	movwf	?_readGesture+1
  8882  0D68  0008               	return
  8883  0D69                     l7683:	
  8884                           
  8885                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  8886  0D69  0857               	movf	readGesture@bytes_read+1,w
  8887  0D6A  3A80               	xorlw	128
  8888  0D6B  00D1               	movwf	??_readGesture
  8889  0D6C  3080               	movlw	128
  8890  0D6D  0251               	subwf	??_readGesture,w
  8891  0D6E  1D03               	skipz
  8892  0D6F  2D72               	goto	u7525
  8893  0D70  3004               	movlw	4
  8894  0D71  0256               	subwf	readGesture@bytes_read,w
  8895  0D72                     u7525:	
  8896  0D72  1C03               	skipc
  8897  0D73  2DE4               	goto	l7661
  8898                           
  8899                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  8900  0D74  0020               	movlb	0	; select bank0
  8901  0D75  01D9               	clrf	readGesture@i
  8902  0D76  01DA               	clrf	readGesture@i+1
  8903  0D77                     l7695:	
  8904  0D77  085A               	movf	readGesture@i+1,w
  8905  0D78  3A80               	xorlw	128
  8906  0D79  00D1               	movwf	??_readGesture
  8907  0D7A  0857               	movf	readGesture@bytes_read+1,w
  8908  0D7B  3A80               	xorlw	128
  8909  0D7C  0251               	subwf	??_readGesture,w
  8910  0D7D  1D03               	skipz
  8911  0D7E  2D81               	goto	u7535
  8912  0D7F  0856               	movf	readGesture@bytes_read,w
  8913  0D80  0259               	subwf	readGesture@i,w
  8914  0D81                     u7535:	
  8915  0D81  1803               	btfsc	3,0
  8916  0D82  2DD8               	goto	l7697
  8917                           
  8918                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  8919  0D83  0020               	movlb	0	; select bank0
  8920  0D84  0859               	movf	readGesture@i,w
  8921  0D85  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8922  0D86  0086               	movwf	6
  8923  0D87  3001               	movlw	1	; select bank2/3
  8924  0D88  0087               	movwf	7
  8925  0D89  0801               	movf	1,w
  8926  0D8A  00D1               	movwf	??_readGesture
  8927  0D8B  0024               	movlb	4	; select bank4
  8928  0D8C  0860               	movf	(_gesture_data_^(0+512)+64),w
  8929  0D8D  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8930  0D8E  0086               	movwf	6
  8931  0D8F  3002               	movlw	2	; select bank4/5
  8932  0D90  0087               	movwf	7
  8933  0D91  0020               	movlb	0	; select bank0
  8934  0D92  0851               	movf	??_readGesture,w
  8935  0D93  0081               	movwf	1
  8936                           
  8937                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8938  0D94  0859               	movf	readGesture@i,w
  8939  0D95  3E01               	addlw	1
  8940  0D96  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8941  0D97  0086               	movwf	6
  8942  0D98  3001               	movlw	1	; select bank2/3
  8943  0D99  0087               	movwf	7
  8944  0D9A  0801               	movf	1,w
  8945  0D9B  00D1               	movwf	??_readGesture
  8946  0D9C  0024               	movlb	4	; select bank4
  8947  0D9D  0860               	movf	(_gesture_data_^(0+512)+64),w
  8948  0D9E  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8949  0D9F  0086               	movwf	6
  8950  0DA0  3002               	movlw	2	; select bank4/5
  8951  0DA1  0087               	movwf	7
  8952  0DA2  0020               	movlb	0	; select bank0
  8953  0DA3  0851               	movf	??_readGesture,w
  8954  0DA4  0081               	movwf	1
  8955                           
  8956                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8957  0DA5  0859               	movf	readGesture@i,w
  8958  0DA6  3E02               	addlw	2
  8959  0DA7  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8960  0DA8  0086               	movwf	6
  8961  0DA9  3001               	movlw	1	; select bank2/3
  8962  0DAA  0087               	movwf	7
  8963  0DAB  0801               	movf	1,w
  8964  0DAC  00D1               	movwf	??_readGesture
  8965  0DAD  0024               	movlb	4	; select bank4
  8966  0DAE  0860               	movf	(_gesture_data_^(0+512)+64),w
  8967  0DAF  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8968  0DB0  0086               	movwf	6
  8969  0DB1  3002               	movlw	2	; select bank4/5
  8970  0DB2  0087               	movwf	7
  8971  0DB3  0020               	movlb	0	; select bank0
  8972  0DB4  0851               	movf	??_readGesture,w
  8973  0DB5  0081               	movwf	1
  8974                           
  8975                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8976  0DB6  0859               	movf	readGesture@i,w
  8977  0DB7  3E03               	addlw	3
  8978  0DB8  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8979  0DB9  0086               	movwf	6
  8980  0DBA  3001               	movlw	1	; select bank2/3
  8981  0DBB  0087               	movwf	7
  8982  0DBC  0801               	movf	1,w
  8983  0DBD  00D1               	movwf	??_readGesture
  8984  0DBE  0024               	movlb	4	; select bank4
  8985  0DBF  0860               	movf	(_gesture_data_^(0+512)+64),w
  8986  0DC0  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8987  0DC1  0086               	movwf	6
  8988  0DC2  3002               	movlw	2	; select bank4/5
  8989  0DC3  0087               	movwf	7
  8990  0DC4  0020               	movlb	0	; select bank0
  8991  0DC5  0851               	movf	??_readGesture,w
  8992  0DC6  0081               	movwf	1
  8993                           
  8994                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8995  0DC7  3001               	movlw	1
  8996  0DC8  00D1               	movwf	??_readGesture
  8997  0DC9  0851               	movf	??_readGesture,w
  8998  0DCA  0024               	movlb	4	; select bank4
  8999  0DCB  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  9000                           
  9001                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  9002  0DCC  3001               	movlw	1
  9003  0DCD  0020               	movlb	0	; select bank0
  9004  0DCE  00D1               	movwf	??_readGesture
  9005  0DCF  0851               	movf	??_readGesture,w
  9006  0DD0  0024               	movlb	4	; select bank4
  9007  0DD1  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  9008                           
  9009                           ;APDS9960.c: 626:                     }
  9010  0DD2  3004               	movlw	4
  9011  0DD3  0020               	movlb	0	; select bank0
  9012  0DD4  07D9               	addwf	readGesture@i,f
  9013  0DD5  3000               	movlw	0
  9014  0DD6  3DDA               	addwfc	readGesture@i+1,f
  9015  0DD7  2D77               	goto	l7695
  9016  0DD8                     l7697:	
  9017                           
  9018                           ;APDS9960.c: 629:                     if( processGestureData() )
  9019  0DD8  3180  2094  318D   	fcall	_processGestureData
  9020  0DDB  3A00               	xorlw	0
  9021  0DDC  1903               	skipnz
  9022  0DDD  2DE1               	goto	l7701
  9023                           
  9024                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  9025  0DDE  3183  236E  318D   	fcall	_decodeGesture
  9026  0DE1                     l7701:	
  9027                           
  9028                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  9029  0DE1  0024               	movlb	4	; select bank4
  9030  0DE2  01E0               	clrf	(_gesture_data_^(0+512)+64)
  9031                           
  9032                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  9033  0DE3  01E1               	clrf	(_gesture_data_^(0+512)+65)
  9034  0DE4                     l7661:	
  9035                           
  9036                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  9037  0DE4  3005               	movlw	5
  9038  0DE5  0020               	movlb	0	; select bank0
  9039  0DE6  00D1               	movwf	??_readGesture
  9040  0DE7  30DD               	movlw	221
  9041  0DE8                     u8497:	
  9042  0DE8  0B89               	decfsz	9,f
  9043  0DE9  2DE8               	goto	u8497
  9044  0DEA  0BD1               	decfsz	??_readGesture,f
  9045  0DEB  2DE8               	goto	u8497
  9046  0DEC  3200               	nop2
  9047                           
  9048                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  9049  0DED  30AF               	movlw	175
  9050  0DEE  3194  2427  318D   	fcall	_wireReadDataByte
  9051  0DF1  0020               	movlb	0	; select bank0
  9052  0DF2  00D1               	movwf	??_readGesture
  9053  0DF3  0851               	movf	??_readGesture,w
  9054  0DF4  00D5               	movwf	readGesture@gstatus
  9055                           
  9056                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  9057  0DF5  1855               	btfsc	readGesture@gstatus,0
  9058  0DF6  2D33               	goto	l7667
  9059                           
  9060                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  9061  0DF7  3005               	movlw	5
  9062  0DF8  0020               	movlb	0	; select bank0
  9063  0DF9  00D1               	movwf	??_readGesture
  9064  0DFA  30DD               	movlw	221
  9065  0DFB                     u8507:	
  9066  0DFB  0B89               	decfsz	9,f
  9067  0DFC  2DFB               	goto	u8507
  9068  0DFD  0BD1               	decfsz	??_readGesture,f
  9069  0DFE  2DFB               	goto	u8507
  9070  0DFF  3200               	nop2
  9071                           
  9072                           ;APDS9960.c: 646:             decodeGesture();
  9073  0E00  3183  236E  318D   	fcall	_decodeGesture
  9074                           
  9075                           ;APDS9960.c: 647:             motion = gesture_motion_;
  9076  0E03  0023               	movlb	3	; select bank3
  9077  0E04  085A               	movf	(_gesture_motion_+1)^(0+384),w
  9078  0E05  0020               	movlb	0	; select bank0
  9079  0E06  00D4               	movwf	readGesture@motion+1
  9080  0E07  0023               	movlb	3	; select bank3
  9081  0E08  0859               	movf	_gesture_motion_^(0+384),w
  9082  0E09  0020               	movlb	0	; select bank0
  9083  0E0A  00D3               	movwf	readGesture@motion
  9084                           
  9085                           ;APDS9960.c: 649:             resetGestureParameters();
  9086  0E0B  3192  22DF         	fcall	_resetGestureParameters
  9087                           
  9088                           ;APDS9960.c: 651:             return motion;
  9089  0E0D  0020               	movlb	0	; select bank0
  9090  0E0E  0854               	movf	readGesture@motion+1,w
  9091  0E0F  00D0               	movwf	?_readGesture+1
  9092  0E10  0853               	movf	readGesture@motion,w
  9093  0E11  00CF               	movwf	?_readGesture
  9094  0E12  0008               	return
  9095  0E13                     __end_of_readGesture:	
  9096                           
  9097                           	psect	text17
  9098  0875                     __ptext17:	
  9099 ;; *************** function _wireReadDataBlock *****************
  9100 ;; Defined at:
  9101 ;;		line 847 in file "APDS9960.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  reg             1    wreg     unsigned char 
  9104 ;;  val             2    6[BANK0 ] PTR unsigned char 
  9105 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  9106 ;;  len             2    8[BANK0 ] unsigned int 
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  reg             1   15[BANK0 ] unsigned char 
  9109 ;;  j               1   16[BANK0 ] unsigned char 
  9110 ;; Return value:  Size  Location     Type
  9111 ;;                  2    6[BANK0 ] int 
  9112 ;; Registers used:
  9113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9119 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;Total ram usage:       11 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    7
  9126 ;; This function calls:
  9127 ;;		_I2C_ReStart
  9128 ;;		_I2C_Read_Byte
  9129 ;;		_I2C_Send_NACK
  9130 ;;		_I2C_Start
  9131 ;;		_I2C_Stop
  9132 ;;		_I2C_Write_Byte
  9133 ;; This function is called by:
  9134 ;;		_readGesture
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           
  9139                           ;psect for function _wireReadDataBlock
  9140  0875                     _wireReadDataBlock:	
  9141                           
  9142                           ;incstack = 0
  9143                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9144                           ;wireReadDataBlock@reg stored from wreg
  9145  0875  0020               	movlb	0	; select bank0
  9146  0876  00AF               	movwf	wireReadDataBlock@reg
  9147                           
  9148                           ;APDS9960.c: 851:     I2C_Start();
  9149  0877  3191  2104  3188   	fcall	_I2C_Start
  9150                           
  9151                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  9152  087A  3072               	movlw	114
  9153  087B  3193  2372  3188   	fcall	_I2C_Write_Byte
  9154                           
  9155                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  9156  087E  0020               	movlb	0	; select bank0
  9157  087F  082F               	movf	wireReadDataBlock@reg,w
  9158  0880  3193  2372  3188   	fcall	_I2C_Write_Byte
  9159                           
  9160                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  9161  0883  0020               	movlb	0	; select bank0
  9162  0884  01B0               	clrf	wireReadDataBlock@j
  9163  0885                     l7199:	
  9164  0885  0830               	movf	wireReadDataBlock@j,w
  9165  0886  00AA               	movwf	??_wireReadDataBlock
  9166  0887  01AB               	clrf	??_wireReadDataBlock+1
  9167  0888  0829               	movf	wireReadDataBlock@len+1,w
  9168  0889  022B               	subwf	??_wireReadDataBlock+1,w
  9169  088A  1D03               	skipz
  9170  088B  288E               	goto	u6675
  9171  088C  0828               	movf	wireReadDataBlock@len,w
  9172  088D  022A               	subwf	??_wireReadDataBlock,w
  9173  088E                     u6675:	
  9174  088E  1803               	btfsc	3,0
  9175  088F  28B4               	goto	l7201
  9176                           
  9177                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  9178  0890  3190  20F5  3188   	fcall	_I2C_ReStart
  9179                           
  9180                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  9181  0893  3073               	movlw	115
  9182  0894  3193  2372  3188   	fcall	_I2C_Write_Byte
  9183                           
  9184                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  9185  0897  3192  2203  3188   	fcall	_I2C_Read_Byte
  9186  089A  0020               	movlb	0	; select bank0
  9187  089B  00AA               	movwf	??_wireReadDataBlock
  9188  089C  0830               	movf	wireReadDataBlock@j,w
  9189  089D  00AB               	movwf	??_wireReadDataBlock+1
  9190  089E  01AC               	clrf	??_wireReadDataBlock+2
  9191  089F  082B               	movf	??_wireReadDataBlock+1,w
  9192  08A0  0726               	addwf	wireReadDataBlock@val,w
  9193  08A1  00AD               	movwf	??_wireReadDataBlock+3
  9194  08A2  082C               	movf	??_wireReadDataBlock+2,w
  9195  08A3  3D27               	addwfc	wireReadDataBlock@val+1,w
  9196  08A4  00AE               	movwf	??_wireReadDataBlock+4
  9197  08A5  082D               	movf	??_wireReadDataBlock+3,w
  9198  08A6  0086               	movwf	6
  9199  08A7  082E               	movf	??_wireReadDataBlock+4,w
  9200  08A8  0087               	movwf	7
  9201  08A9  082A               	movf	??_wireReadDataBlock,w
  9202  08AA  0081               	movwf	1
  9203                           
  9204                           ;APDS9960.c: 862:       I2C_Send_NACK();
  9205  08AB  3190  20FE  3188   	fcall	_I2C_Send_NACK
  9206                           
  9207                           ;APDS9960.c: 864:     }
  9208  08AE  3001               	movlw	1
  9209  08AF  0020               	movlb	0	; select bank0
  9210  08B0  00AA               	movwf	??_wireReadDataBlock
  9211  08B1  082A               	movf	??_wireReadDataBlock,w
  9212  08B2  07B0               	addwf	wireReadDataBlock@j,f
  9213  08B3  2885               	goto	l7199
  9214  08B4                     l7201:	
  9215                           
  9216                           ;APDS9960.c: 866:     I2C_Stop();
  9217  08B4  3188  2000         	fcall	_I2C_Stop
  9218                           
  9219                           ;APDS9960.c: 867:     return (int)j;
  9220  08B6  0020               	movlb	0	; select bank0
  9221  08B7  0830               	movf	wireReadDataBlock@j,w
  9222  08B8  00AA               	movwf	??_wireReadDataBlock
  9223  08B9  01AB               	clrf	??_wireReadDataBlock+1
  9224  08BA  082A               	movf	??_wireReadDataBlock,w
  9225  08BB  00A6               	movwf	?_wireReadDataBlock
  9226  08BC  082B               	movf	??_wireReadDataBlock+1,w
  9227  08BD  00A7               	movwf	?_wireReadDataBlock+1
  9228  08BE  0008               	return
  9229  08BF                     __end_of_wireReadDataBlock:	
  9230                           
  9231                           	psect	text18
  9232  0094                     __ptext18:	
  9233 ;; *************** function _processGestureData *****************
  9234 ;; Defined at:
  9235 ;;		line 657 in file "APDS9960.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;		None
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  i               2   45[BANK0 ] int 
  9240 ;;  lr_delta        2   43[BANK0 ] int 
  9241 ;;  ud_delta        2   41[BANK0 ] int 
  9242 ;;  lr_ratio_las    2   23[BANK0 ] int 
  9243 ;;  ud_ratio_las    2   21[BANK0 ] int 
  9244 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  9245 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  9246 ;;  r_first         1   40[BANK0 ] unsigned char 
  9247 ;;  l_first         1   39[BANK0 ] unsigned char 
  9248 ;;  d_first         1   38[BANK0 ] unsigned char 
  9249 ;;  u_first         1   37[BANK0 ] unsigned char 
  9250 ;;  r_last          1   36[BANK0 ] unsigned char 
  9251 ;;  l_last          1   35[BANK0 ] unsigned char 
  9252 ;;  d_last          1   34[BANK0 ] unsigned char 
  9253 ;;  u_last          1   33[BANK0 ] unsigned char 
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      _Bool 
  9256 ;; Registers used:
  9257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;Total ram usage:       32 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    6
  9270 ;; This function calls:
  9271 ;;		___awdiv
  9272 ;;		___wmul
  9273 ;; This function is called by:
  9274 ;;		_readGesture
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _processGestureData
  9280  0094                     _processGestureData:	
  9281                           
  9282                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  9283                           
  9284                           ;incstack = 0
  9285                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9286  0094  0020               	movlb	0	; select bank0
  9287  0095  01C5               	clrf	processGestureData@u_first
  9288                           
  9289                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  9290  0096  01C6               	clrf	processGestureData@d_first
  9291                           
  9292                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  9293  0097  01C7               	clrf	processGestureData@l_first
  9294                           
  9295                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  9296  0098  01C8               	clrf	processGestureData@r_first
  9297                           
  9298                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  9299  0099  01C1               	clrf	processGestureData@u_last
  9300                           
  9301                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  9302  009A  01C2               	clrf	processGestureData@d_last
  9303                           
  9304                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  9305  009B  01C3               	clrf	processGestureData@l_last
  9306                           
  9307                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  9308  009C  01C4               	clrf	processGestureData@r_last
  9309                           
  9310                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  9311  009D  3005               	movlw	5
  9312  009E  0024               	movlb	4	; select bank4
  9313  009F  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9314  00A0  1803               	skipnc
  9315  00A1  28A4               	goto	l7215
  9316  00A2                     l7211:	
  9317                           
  9318                           ;APDS9960.c: 677:         return 0;
  9319  00A2  3000               	movlw	0
  9320  00A3  0008               	return
  9321  00A4                     l7215:	
  9322                           
  9323                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  9324  00A4  3021               	movlw	33
  9325  00A5  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9326  00A6  1803               	skipnc
  9327  00A7  296E               	goto	l7265
  9328  00A8  0861               	movf	(_gesture_data_^(0+512)+65),w
  9329  00A9  1903               	btfsc	3,2
  9330  00AA  296E               	goto	l7265
  9331                           
  9332                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  9333  00AB  0020               	movlb	0	; select bank0
  9334  00AC  01CD               	clrf	processGestureData@i
  9335  00AD  01CE               	clrf	processGestureData@i+1
  9336  00AE  28B3               	goto	l1265
  9337  00AF                     l7231:	
  9338                           ;APDS9960.c: 695:                 break;
  9339                           
  9340                           
  9341                           ;APDS9960.c: 697:         }
  9342  00AF  3001               	movlw	1
  9343  00B0  07CD               	addwf	processGestureData@i,f
  9344  00B1  3000               	movlw	0
  9345  00B2  3DCE               	addwfc	processGestureData@i+1,f
  9346  00B3                     l1265:	
  9347  00B3  084E               	movf	processGestureData@i+1,w
  9348  00B4  3A80               	xorlw	128
  9349  00B5  00AF               	movwf	??_processGestureData
  9350  00B6  3080               	movlw	128
  9351  00B7  022F               	subwf	??_processGestureData,w
  9352  00B8  1D03               	skipz
  9353  00B9  28BE               	goto	u6755
  9354  00BA  0024               	movlb	4	; select bank4
  9355  00BB  0861               	movf	(_gesture_data_^(0+512)+65),w
  9356  00BC  0020               	movlb	0	; select bank0
  9357  00BD  024D               	subwf	processGestureData@i,w
  9358  00BE                     u6755:	
  9359  00BE  1803               	btfsc	3,0
  9360  00BF  2909               	goto	l7233
  9361                           
  9362                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  9363  00C0  0020               	movlb	0	; select bank0
  9364  00C1  084D               	movf	processGestureData@i,w
  9365  00C2  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9366  00C3  0086               	movwf	6
  9367  00C4  3002               	movlw	2	; select bank4/5
  9368  00C5  0087               	movwf	7
  9369  00C6  300B               	movlw	11
  9370  00C7  0201               	subwf	1,w
  9371  00C8  1C03               	skipc
  9372  00C9  28AF               	goto	l7231
  9373  00CA  084D               	movf	processGestureData@i,w
  9374  00CB  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9375  00CC  0086               	movwf	6
  9376  00CD  3002               	movlw	2	; select bank4/5
  9377  00CE  0087               	movwf	7
  9378  00CF  300B               	movlw	11
  9379  00D0  0201               	subwf	1,w
  9380  00D1  1C03               	skipc
  9381  00D2  28AF               	goto	l7231
  9382  00D3  084D               	movf	processGestureData@i,w
  9383  00D4  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9384  00D5  0086               	movwf	6
  9385  00D6  3002               	movlw	2	; select bank4/5
  9386  00D7  0087               	movwf	7
  9387  00D8  300B               	movlw	11
  9388  00D9  0201               	subwf	1,w
  9389  00DA  1C03               	skipc
  9390  00DB  28AF               	goto	l7231
  9391  00DC  084D               	movf	processGestureData@i,w
  9392  00DD  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9393  00DE  0086               	movwf	6
  9394  00DF  3002               	movlw	2	; select bank4/5
  9395  00E0  0087               	movwf	7
  9396  00E1  300B               	movlw	11
  9397  00E2  0201               	subwf	1,w
  9398  00E3  1C03               	skipc
  9399  00E4  28AF               	goto	l7231
  9400                           
  9401                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  9402  00E5  084D               	movf	processGestureData@i,w
  9403  00E6  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9404  00E7  0086               	movwf	6
  9405  00E8  3002               	movlw	2	; select bank4/5
  9406  00E9  0087               	movwf	7
  9407  00EA  0801               	movf	1,w
  9408  00EB  00AF               	movwf	??_processGestureData
  9409  00EC  082F               	movf	??_processGestureData,w
  9410  00ED  00C5               	movwf	processGestureData@u_first
  9411                           
  9412                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  9413  00EE  084D               	movf	processGestureData@i,w
  9414  00EF  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9415  00F0  0086               	movwf	6
  9416  00F1  3002               	movlw	2	; select bank4/5
  9417  00F2  0087               	movwf	7
  9418  00F3  0801               	movf	1,w
  9419  00F4  00AF               	movwf	??_processGestureData
  9420  00F5  082F               	movf	??_processGestureData,w
  9421  00F6  00C6               	movwf	processGestureData@d_first
  9422                           
  9423                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  9424  00F7  084D               	movf	processGestureData@i,w
  9425  00F8  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9426  00F9  0086               	movwf	6
  9427  00FA  3002               	movlw	2	; select bank4/5
  9428  00FB  0087               	movwf	7
  9429  00FC  0801               	movf	1,w
  9430  00FD  00AF               	movwf	??_processGestureData
  9431  00FE  082F               	movf	??_processGestureData,w
  9432  00FF  00C7               	movwf	processGestureData@l_first
  9433                           
  9434                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  9435  0100  084D               	movf	processGestureData@i,w
  9436  0101  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9437  0102  0086               	movwf	6
  9438  0103  3002               	movlw	2	; select bank4/5
  9439  0104  0087               	movwf	7
  9440  0105  0801               	movf	1,w
  9441  0106  00AF               	movwf	??_processGestureData
  9442  0107  082F               	movf	??_processGestureData,w
  9443  0108  00C8               	movwf	processGestureData@r_first
  9444  0109                     l7233:	
  9445                           
  9446                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  9447  0109  0020               	movlb	0	; select bank0
  9448  010A  0845               	movf	processGestureData@u_first,w
  9449  010B  1903               	btfsc	3,2
  9450  010C  28A2               	goto	l7211
  9451  010D  0846               	movf	processGestureData@d_first,w
  9452  010E  1903               	btfsc	3,2
  9453  010F  28A2               	goto	l7211
  9454  0110  0847               	movf	processGestureData@l_first,w
  9455  0111  1903               	btfsc	3,2
  9456  0112  28A2               	goto	l7211
  9457  0113  0848               	movf	processGestureData@r_first,w
  9458  0114  1903               	btfsc	3,2
  9459  0115  28A2               	goto	l7211
  9460                           
  9461                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  9462  0116  0024               	movlb	4	; select bank4
  9463  0117  0861               	movf	(_gesture_data_^(0+512)+65),w
  9464  0118  3EFF               	addlw	255
  9465  0119  0020               	movlb	0	; select bank0
  9466  011A  00CD               	movwf	processGestureData@i
  9467  011B  30FF               	movlw	255
  9468  011C  1803               	skipnc
  9469  011D  3000               	movlw	0
  9470  011E  00CE               	movwf	processGestureData@i+1
  9471                           
  9472                           ;APDS9960.c: 717:                 break;
  9473  011F  2924               	goto	l7247
  9474  0120                     l7261:	
  9475                           
  9476                           ;APDS9960.c: 719:         }
  9477  0120  30FF               	movlw	255
  9478  0121  07CD               	addwf	processGestureData@i,f
  9479  0122  30FF               	movlw	255
  9480  0123  3DCE               	addwfc	processGestureData@i+1,f
  9481  0124                     l7247:	
  9482  0124  1BCE               	btfsc	processGestureData@i+1,7
  9483  0125  296E               	goto	l7265
  9484                           
  9485                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  9486  0126  084D               	movf	processGestureData@i,w
  9487  0127  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9488  0128  0086               	movwf	6
  9489  0129  3002               	movlw	2	; select bank4/5
  9490  012A  0087               	movwf	7
  9491  012B  300B               	movlw	11
  9492  012C  0201               	subwf	1,w
  9493  012D  1C03               	skipc
  9494  012E  2920               	goto	l7261
  9495  012F  084D               	movf	processGestureData@i,w
  9496  0130  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9497  0131  0086               	movwf	6
  9498  0132  3002               	movlw	2	; select bank4/5
  9499  0133  0087               	movwf	7
  9500  0134  300B               	movlw	11
  9501  0135  0201               	subwf	1,w
  9502  0136  1C03               	skipc
  9503  0137  2920               	goto	l7261
  9504  0138  084D               	movf	processGestureData@i,w
  9505  0139  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9506  013A  0086               	movwf	6
  9507  013B  3002               	movlw	2	; select bank4/5
  9508  013C  0087               	movwf	7
  9509  013D  300B               	movlw	11
  9510  013E  0201               	subwf	1,w
  9511  013F  1C03               	skipc
  9512  0140  2920               	goto	l7261
  9513  0141  084D               	movf	processGestureData@i,w
  9514  0142  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9515  0143  0086               	movwf	6
  9516  0144  3002               	movlw	2	; select bank4/5
  9517  0145  0087               	movwf	7
  9518  0146  300B               	movlw	11
  9519  0147  0201               	subwf	1,w
  9520  0148  1C03               	skipc
  9521  0149  2920               	goto	l7261
  9522                           
  9523                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  9524  014A  084D               	movf	processGestureData@i,w
  9525  014B  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9526  014C  0086               	movwf	6
  9527  014D  3002               	movlw	2	; select bank4/5
  9528  014E  0087               	movwf	7
  9529  014F  0801               	movf	1,w
  9530  0150  00AF               	movwf	??_processGestureData
  9531  0151  082F               	movf	??_processGestureData,w
  9532  0152  00C1               	movwf	processGestureData@u_last
  9533                           
  9534                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  9535  0153  084D               	movf	processGestureData@i,w
  9536  0154  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9537  0155  0086               	movwf	6
  9538  0156  3002               	movlw	2	; select bank4/5
  9539  0157  0087               	movwf	7
  9540  0158  0801               	movf	1,w
  9541  0159  00AF               	movwf	??_processGestureData
  9542  015A  082F               	movf	??_processGestureData,w
  9543  015B  00C2               	movwf	processGestureData@d_last
  9544                           
  9545                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  9546  015C  084D               	movf	processGestureData@i,w
  9547  015D  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9548  015E  0086               	movwf	6
  9549  015F  3002               	movlw	2	; select bank4/5
  9550  0160  0087               	movwf	7
  9551  0161  0801               	movf	1,w
  9552  0162  00AF               	movwf	??_processGestureData
  9553  0163  082F               	movf	??_processGestureData,w
  9554  0164  00C3               	movwf	processGestureData@l_last
  9555                           
  9556                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  9557  0165  084D               	movf	processGestureData@i,w
  9558  0166  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9559  0167  0086               	movwf	6
  9560  0168  3002               	movlw	2	; select bank4/5
  9561  0169  0087               	movwf	7
  9562  016A  0801               	movf	1,w
  9563  016B  00AF               	movwf	??_processGestureData
  9564  016C  082F               	movf	??_processGestureData,w
  9565  016D  00C4               	movwf	processGestureData@r_last
  9566  016E                     l7265:	
  9567                           
  9568                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  9569  016E  0020               	movlb	0	; select bank0
  9570  016F  0845               	movf	processGestureData@u_first,w
  9571  0170  0746               	addwf	processGestureData@d_first,w
  9572  0171  00A6               	movwf	___awdiv@divisor
  9573  0172  01A7               	clrf	___awdiv@divisor+1
  9574  0173  0DA7               	rlf	___awdiv@divisor+1,f
  9575  0174  0846               	movf	processGestureData@d_first,w
  9576  0175  0245               	subwf	processGestureData@u_first,w
  9577  0176  00A0               	movwf	___wmul@multiplier
  9578  0177  01A1               	clrf	___wmul@multiplier+1
  9579  0178  1C03               	skipc
  9580  0179  03A1               	decf	___wmul@multiplier+1,f
  9581  017A  3064               	movlw	100
  9582  017B  00A2               	movwf	___wmul@multiplicand
  9583  017C  3000               	movlw	0
  9584  017D  00A3               	movwf	___wmul@multiplicand+1
  9585  017E  3193  238E  3180   	fcall	___wmul
  9586  0181  0020               	movlb	0	; select bank0
  9587  0182  0821               	movf	?___wmul+1,w
  9588  0183  00A9               	movwf	___awdiv@dividend+1
  9589  0184  0820               	movf	?___wmul,w
  9590  0185  00A8               	movwf	___awdiv@dividend
  9591  0186  3189  21AD  3180   	fcall	___awdiv
  9592  0189  0020               	movlb	0	; select bank0
  9593  018A  0827               	movf	?___awdiv+1,w
  9594  018B  00B2               	movwf	processGestureData@ud_ratio_first+1
  9595  018C  0826               	movf	?___awdiv,w
  9596  018D  00B1               	movwf	processGestureData@ud_ratio_first
  9597                           
  9598                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  9599  018E  0847               	movf	processGestureData@l_first,w
  9600  018F  0748               	addwf	processGestureData@r_first,w
  9601  0190  00A6               	movwf	___awdiv@divisor
  9602  0191  01A7               	clrf	___awdiv@divisor+1
  9603  0192  0DA7               	rlf	___awdiv@divisor+1,f
  9604  0193  0848               	movf	processGestureData@r_first,w
  9605  0194  0247               	subwf	processGestureData@l_first,w
  9606  0195  00A0               	movwf	___wmul@multiplier
  9607  0196  01A1               	clrf	___wmul@multiplier+1
  9608  0197  1C03               	skipc
  9609  0198  03A1               	decf	___wmul@multiplier+1,f
  9610  0199  3064               	movlw	100
  9611  019A  00A2               	movwf	___wmul@multiplicand
  9612  019B  3000               	movlw	0
  9613  019C  00A3               	movwf	___wmul@multiplicand+1
  9614  019D  3193  238E  3180   	fcall	___wmul
  9615  01A0  0020               	movlb	0	; select bank0
  9616  01A1  0821               	movf	?___wmul+1,w
  9617  01A2  00A9               	movwf	___awdiv@dividend+1
  9618  01A3  0820               	movf	?___wmul,w
  9619  01A4  00A8               	movwf	___awdiv@dividend
  9620  01A5  3189  21AD  3180   	fcall	___awdiv
  9621  01A8  0020               	movlb	0	; select bank0
  9622  01A9  0827               	movf	?___awdiv+1,w
  9623  01AA  00B4               	movwf	processGestureData@lr_ratio_first+1
  9624  01AB  0826               	movf	?___awdiv,w
  9625  01AC  00B3               	movwf	processGestureData@lr_ratio_first
  9626                           
  9627                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  9628  01AD  0841               	movf	processGestureData@u_last,w
  9629  01AE  0742               	addwf	processGestureData@d_last,w
  9630  01AF  00A6               	movwf	___awdiv@divisor
  9631  01B0  01A7               	clrf	___awdiv@divisor+1
  9632  01B1  0DA7               	rlf	___awdiv@divisor+1,f
  9633  01B2  0842               	movf	processGestureData@d_last,w
  9634  01B3  0241               	subwf	processGestureData@u_last,w
  9635  01B4  00A0               	movwf	___wmul@multiplier
  9636  01B5  01A1               	clrf	___wmul@multiplier+1
  9637  01B6  1C03               	skipc
  9638  01B7  03A1               	decf	___wmul@multiplier+1,f
  9639  01B8  3064               	movlw	100
  9640  01B9  00A2               	movwf	___wmul@multiplicand
  9641  01BA  3000               	movlw	0
  9642  01BB  00A3               	movwf	___wmul@multiplicand+1
  9643  01BC  3193  238E  3180   	fcall	___wmul
  9644  01BF  0020               	movlb	0	; select bank0
  9645  01C0  0821               	movf	?___wmul+1,w
  9646  01C1  00A9               	movwf	___awdiv@dividend+1
  9647  01C2  0820               	movf	?___wmul,w
  9648  01C3  00A8               	movwf	___awdiv@dividend
  9649  01C4  3189  21AD  3180   	fcall	___awdiv
  9650  01C7  0020               	movlb	0	; select bank0
  9651  01C8  0827               	movf	?___awdiv+1,w
  9652  01C9  00B6               	movwf	processGestureData@ud_ratio_last+1
  9653  01CA  0826               	movf	?___awdiv,w
  9654  01CB  00B5               	movwf	processGestureData@ud_ratio_last
  9655                           
  9656                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  9657  01CC  0843               	movf	processGestureData@l_last,w
  9658  01CD  0744               	addwf	processGestureData@r_last,w
  9659  01CE  00A6               	movwf	___awdiv@divisor
  9660  01CF  01A7               	clrf	___awdiv@divisor+1
  9661  01D0  0DA7               	rlf	___awdiv@divisor+1,f
  9662  01D1  0844               	movf	processGestureData@r_last,w
  9663  01D2  0243               	subwf	processGestureData@l_last,w
  9664  01D3  00A0               	movwf	___wmul@multiplier
  9665  01D4  01A1               	clrf	___wmul@multiplier+1
  9666  01D5  1C03               	skipc
  9667  01D6  03A1               	decf	___wmul@multiplier+1,f
  9668  01D7  3064               	movlw	100
  9669  01D8  00A2               	movwf	___wmul@multiplicand
  9670  01D9  3000               	movlw	0
  9671  01DA  00A3               	movwf	___wmul@multiplicand+1
  9672  01DB  3193  238E  3180   	fcall	___wmul
  9673  01DE  0020               	movlb	0	; select bank0
  9674  01DF  0821               	movf	?___wmul+1,w
  9675  01E0  00A9               	movwf	___awdiv@dividend+1
  9676  01E1  0820               	movf	?___wmul,w
  9677  01E2  00A8               	movwf	___awdiv@dividend
  9678  01E3  3189  21AD  3180   	fcall	___awdiv
  9679  01E6  0020               	movlb	0	; select bank0
  9680  01E7  0827               	movf	?___awdiv+1,w
  9681  01E8  00B8               	movwf	processGestureData@lr_ratio_last+1
  9682  01E9  0826               	movf	?___awdiv,w
  9683  01EA  00B7               	movwf	processGestureData@lr_ratio_last
  9684                           
  9685                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  9686  01EB  0831               	movf	processGestureData@ud_ratio_first,w
  9687  01EC  0235               	subwf	processGestureData@ud_ratio_last,w
  9688  01ED  00C9               	movwf	processGestureData@ud_delta
  9689  01EE  0832               	movf	processGestureData@ud_ratio_first+1,w
  9690  01EF  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  9691  01F0  00CA               	movwf	processGestureData@ud_delta+1
  9692                           
  9693                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  9694  01F1  0833               	movf	processGestureData@lr_ratio_first,w
  9695  01F2  0237               	subwf	processGestureData@lr_ratio_last,w
  9696  01F3  00CB               	movwf	processGestureData@lr_delta
  9697  01F4  0834               	movf	processGestureData@lr_ratio_first+1,w
  9698  01F5  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  9699  01F6  00CC               	movwf	processGestureData@lr_delta+1
  9700                           
  9701                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  9702  01F7  0849               	movf	processGestureData@ud_delta,w
  9703  01F8  07F2               	addwf	_gesture_ud_delta_,f
  9704  01F9  084A               	movf	processGestureData@ud_delta+1,w
  9705  01FA  3DF3               	addwfc	_gesture_ud_delta_+1,f
  9706                           
  9707                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  9708  01FB  084B               	movf	processGestureData@lr_delta,w
  9709  01FC  07F0               	addwf	_gesture_lr_delta_,f
  9710  01FD  084C               	movf	processGestureData@lr_delta+1,w
  9711  01FE  3DF1               	addwfc	_gesture_lr_delta_+1,f
  9712                           
  9713                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  9714  01FF  0873               	movf	_gesture_ud_delta_+1,w
  9715  0200  3A80               	xorlw	128
  9716  0201  00AF               	movwf	??_processGestureData
  9717  0202  3080               	movlw	128
  9718  0203  022F               	subwf	??_processGestureData,w
  9719  0204  1D03               	skipz
  9720  0205  2A08               	goto	u6855
  9721  0206  3032               	movlw	50
  9722  0207  0272               	subwf	_gesture_ud_delta_,w
  9723  0208                     u6855:	
  9724  0208  1C03               	skipc
  9725  0209  2A0F               	goto	l7279
  9726                           
  9727                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  9728  020A  3001               	movlw	1
  9729  020B  0021               	movlb	1	; select bank1
  9730  020C  00EA               	movwf	_gesture_ud_count_^(0+128)
  9731  020D  3000               	movlw	0
  9732  020E  2A1F               	goto	L2
  9733  020F                     l7279:	
  9734                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  9735                           
  9736  020F  0873               	movf	_gesture_ud_delta_+1,w
  9737  0210  3A80               	xorlw	128
  9738  0211  0020               	movlb	0	; select bank0
  9739  0212  00AF               	movwf	??_processGestureData
  9740  0213  307F               	movlw	127
  9741  0214  022F               	subwf	??_processGestureData,w
  9742  0215  1D03               	skipz
  9743  0216  2A19               	goto	u6865
  9744  0217  30CF               	movlw	207
  9745  0218  0272               	subwf	_gesture_ud_delta_,w
  9746  0219                     u6865:	
  9747  0219  1803               	skipnc
  9748  021A  2A21               	goto	l7283
  9749                           
  9750                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  9751  021B  30FF               	movlw	255
  9752  021C  0021               	movlb	1	; select bank1
  9753  021D  00EA               	movwf	_gesture_ud_count_^(0+128)
  9754  021E  30FF               	movlw	255
  9755  021F                     L2:	
  9756  021F  00EB               	movwf	(_gesture_ud_count_^(0+128)+1)
  9757                           
  9758                           ;APDS9960.c: 741:     } else {
  9759  0220  2A24               	goto	l7285
  9760  0221                     l7283:	
  9761                           
  9762                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  9763  0221  0021               	movlb	1	; select bank1
  9764  0222  01EA               	clrf	_gesture_ud_count_^(0+128)
  9765  0223  01EB               	clrf	(_gesture_ud_count_+1)^(0+128)
  9766  0224                     l7285:	
  9767                           
  9768                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  9769  0224  0871               	movf	_gesture_lr_delta_+1,w
  9770  0225  3A80               	xorlw	128
  9771  0226  0020               	movlb	0	; select bank0
  9772  0227  00AF               	movwf	??_processGestureData
  9773  0228  3080               	movlw	128
  9774  0229  022F               	subwf	??_processGestureData,w
  9775  022A  1D03               	skipz
  9776  022B  2A2E               	goto	u6875
  9777  022C  3032               	movlw	50
  9778  022D  0270               	subwf	_gesture_lr_delta_,w
  9779  022E                     u6875:	
  9780  022E  1C03               	skipc
  9781  022F  2A35               	goto	l7289
  9782                           
  9783                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  9784  0230  3001               	movlw	1
  9785  0231  0021               	movlb	1	; select bank1
  9786  0232  00E8               	movwf	_gesture_lr_count_^(0+128)
  9787  0233  3000               	movlw	0
  9788  0234  2A45               	goto	L3
  9789  0235                     l7289:	
  9790                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  9791                           
  9792  0235  0871               	movf	_gesture_lr_delta_+1,w
  9793  0236  3A80               	xorlw	128
  9794  0237  0020               	movlb	0	; select bank0
  9795  0238  00AF               	movwf	??_processGestureData
  9796  0239  307F               	movlw	127
  9797  023A  022F               	subwf	??_processGestureData,w
  9798  023B  1D03               	skipz
  9799  023C  2A3F               	goto	u6885
  9800  023D  30CF               	movlw	207
  9801  023E  0270               	subwf	_gesture_lr_delta_,w
  9802  023F                     u6885:	
  9803  023F  1803               	skipnc
  9804  0240  2A47               	goto	l7293
  9805                           
  9806                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  9807  0241  30FF               	movlw	255
  9808  0242  0021               	movlb	1	; select bank1
  9809  0243  00E8               	movwf	_gesture_lr_count_^(0+128)
  9810  0244  30FF               	movlw	255
  9811  0245                     L3:	
  9812  0245  00E9               	movwf	(_gesture_lr_count_^(0+128)+1)
  9813                           
  9814                           ;APDS9960.c: 750:     } else {
  9815  0246  2A4A               	goto	l7295
  9816  0247                     l7293:	
  9817                           
  9818                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  9819  0247  0021               	movlb	1	; select bank1
  9820  0248  01E8               	clrf	_gesture_lr_count_^(0+128)
  9821  0249  01E9               	clrf	(_gesture_lr_count_+1)^(0+128)
  9822  024A                     l7295:	
  9823                           
  9824                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  9825  024A  086A               	movf	_gesture_ud_count_^(0+128),w
  9826  024B  046B               	iorwf	(_gesture_ud_count_+1)^(0+128),w
  9827  024C  1D03               	btfss	3,2
  9828  024D  2AF6               	goto	l7339
  9829  024E  0868               	movf	_gesture_lr_count_^(0+128),w
  9830  024F  0469               	iorwf	(_gesture_lr_count_+1)^(0+128),w
  9831  0250  1D03               	btfss	3,2
  9832  0251  2AF6               	goto	l7339
  9833                           
  9834                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9835  0252  0020               	movlb	0	; select bank0
  9836  0253  084A               	movf	processGestureData@ud_delta+1,w
  9837  0254  3A80               	xorlw	128
  9838  0255  00AF               	movwf	??_processGestureData
  9839  0256  3080               	movlw	128
  9840  0257  022F               	subwf	??_processGestureData,w
  9841  0258  1D03               	skipz
  9842  0259  2A5C               	goto	u6915
  9843  025A  3001               	movlw	1
  9844  025B  0249               	subwf	processGestureData@ud_delta,w
  9845  025C                     u6915:	
  9846  025C  1803               	skipnc
  9847  025D  2A6B               	goto	l7303
  9848  025E  0020               	movlb	0	; select bank0
  9849  025F  0949               	comf	processGestureData@ud_delta,w
  9850  0260  00AF               	movwf	??_processGestureData
  9851  0261  094A               	comf	processGestureData@ud_delta+1,w
  9852  0262  00B0               	movwf	??_processGestureData+1
  9853  0263  0AAF               	incf	??_processGestureData,f
  9854  0264  1903               	skipnz
  9855  0265  0AB0               	incf	??_processGestureData+1,f
  9856  0266  082F               	movf	??_processGestureData,w
  9857  0267  00B9               	movwf	_processGestureData$1840
  9858  0268  0830               	movf	??_processGestureData+1,w
  9859  0269  00BA               	movwf	_processGestureData$1840+1
  9860  026A  2A70               	goto	l1288
  9861  026B                     l7303:	
  9862  026B  0020               	movlb	0	; select bank0
  9863  026C  084A               	movf	processGestureData@ud_delta+1,w
  9864  026D  00BA               	movwf	_processGestureData$1840+1
  9865  026E  0849               	movf	processGestureData@ud_delta,w
  9866  026F  00B9               	movwf	_processGestureData$1840
  9867  0270                     l1288:	
  9868  0270  083A               	movf	_processGestureData$1840+1,w
  9869  0271  3A80               	xorlw	128
  9870  0272  00AF               	movwf	??_processGestureData
  9871  0273  3080               	movlw	128
  9872  0274  022F               	subwf	??_processGestureData,w
  9873  0275  1D03               	skipz
  9874  0276  2A79               	goto	u6925
  9875  0277  3014               	movlw	20
  9876  0278  0239               	subwf	_processGestureData$1840,w
  9877  0279                     u6925:	
  9878  0279  1803               	skipnc
  9879  027A  28A2               	goto	l7211
  9880  027B  0020               	movlb	0	; select bank0
  9881  027C  084C               	movf	processGestureData@lr_delta+1,w
  9882  027D  3A80               	xorlw	128
  9883  027E  00AF               	movwf	??_processGestureData
  9884  027F  3080               	movlw	128
  9885  0280  022F               	subwf	??_processGestureData,w
  9886  0281  1D03               	skipz
  9887  0282  2A85               	goto	u6935
  9888  0283  3001               	movlw	1
  9889  0284  024B               	subwf	processGestureData@lr_delta,w
  9890  0285                     u6935:	
  9891  0285  1803               	skipnc
  9892  0286  2A94               	goto	l7309
  9893  0287  0020               	movlb	0	; select bank0
  9894  0288  094B               	comf	processGestureData@lr_delta,w
  9895  0289  00AF               	movwf	??_processGestureData
  9896  028A  094C               	comf	processGestureData@lr_delta+1,w
  9897  028B  00B0               	movwf	??_processGestureData+1
  9898  028C  0AAF               	incf	??_processGestureData,f
  9899  028D  1903               	skipnz
  9900  028E  0AB0               	incf	??_processGestureData+1,f
  9901  028F  082F               	movf	??_processGestureData,w
  9902  0290  00BB               	movwf	_processGestureData$1841
  9903  0291  0830               	movf	??_processGestureData+1,w
  9904  0292  00BC               	movwf	_processGestureData$1841+1
  9905  0293  2A99               	goto	l1292
  9906  0294                     l7309:	
  9907  0294  0020               	movlb	0	; select bank0
  9908  0295  084C               	movf	processGestureData@lr_delta+1,w
  9909  0296  00BC               	movwf	_processGestureData$1841+1
  9910  0297  084B               	movf	processGestureData@lr_delta,w
  9911  0298  00BB               	movwf	_processGestureData$1841
  9912  0299                     l1292:	
  9913  0299  083C               	movf	_processGestureData$1841+1,w
  9914  029A  3A80               	xorlw	128
  9915  029B  00AF               	movwf	??_processGestureData
  9916  029C  3080               	movlw	128
  9917  029D  022F               	subwf	??_processGestureData,w
  9918  029E  1D03               	skipz
  9919  029F  2AA2               	goto	u6945
  9920  02A0  3014               	movlw	20
  9921  02A1  023B               	subwf	_processGestureData$1841,w
  9922  02A2                     u6945:	
  9923  02A2  1803               	skipnc
  9924  02A3  28A2               	goto	l7211
  9925                           
  9926                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9927  02A4  0020               	movlb	0	; select bank0
  9928  02A5  0849               	movf	processGestureData@ud_delta,w
  9929  02A6  044A               	iorwf	processGestureData@ud_delta+1,w
  9930  02A7  1D03               	btfss	3,2
  9931  02A8  2AB3               	goto	l7317
  9932  02A9  084B               	movf	processGestureData@lr_delta,w
  9933  02AA  044C               	iorwf	processGestureData@lr_delta+1,w
  9934  02AB  1D03               	btfss	3,2
  9935  02AC  2AB3               	goto	l7317
  9936                           
  9937                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9938  02AD  3001               	movlw	1
  9939  02AE  0022               	movlb	2	; select bank2
  9940  02AF  07E6               	addwf	_gesture_near_count_^(0+256),f
  9941  02B0  3000               	movlw	0
  9942  02B1  3DE7               	addwfc	(_gesture_near_count_+1)^(0+256),f
  9943                           
  9944                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9945  02B2  2AC0               	goto	l1294
  9946  02B3                     l7317:	
  9947  02B3  0849               	movf	processGestureData@ud_delta,w
  9948  02B4  044A               	iorwf	processGestureData@ud_delta+1,w
  9949  02B5  1D03               	btfss	3,2
  9950  02B6  2ABB               	goto	l7321
  9951  02B7  084B               	movf	processGestureData@lr_delta,w
  9952  02B8  044C               	iorwf	processGestureData@lr_delta+1,w
  9953  02B9  1903               	btfsc	3,2
  9954  02BA  2AC0               	goto	l1294
  9955  02BB                     l7321:	
  9956                           
  9957                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9958  02BB  3001               	movlw	1
  9959  02BC  0023               	movlb	3	; select bank3
  9960  02BD  07DD               	addwf	_gesture_far_count_^(0+384),f
  9961  02BE  3000               	movlw	0
  9962  02BF  3DDE               	addwfc	(_gesture_far_count_+1)^(0+384),f
  9963  02C0                     l1294:	
  9964                           
  9965                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9966  02C0  0022               	movlb	2	; select bank2
  9967  02C1  0867               	movf	(_gesture_near_count_+1)^(0+256),w
  9968  02C2  3A80               	xorlw	128
  9969  02C3  0020               	movlb	0	; select bank0
  9970  02C4  00AF               	movwf	??_processGestureData
  9971  02C5  3080               	movlw	128
  9972  02C6  022F               	subwf	??_processGestureData,w
  9973  02C7  1D03               	skipz
  9974  02C8  2ACC               	goto	u6995
  9975  02C9  300A               	movlw	10
  9976  02CA  0022               	movlb	2	; select bank2
  9977  02CB  0266               	subwf	_gesture_near_count_^(0+256),w
  9978  02CC                     u6995:	
  9979  02CC  1C03               	skipc
  9980  02CD  28A2               	goto	l7211
  9981  02CE  0023               	movlb	3	; select bank3
  9982  02CF  085E               	movf	(_gesture_far_count_+1)^(0+384),w
  9983  02D0  3A80               	xorlw	128
  9984  02D1  0020               	movlb	0	; select bank0
  9985  02D2  00AF               	movwf	??_processGestureData
  9986  02D3  3080               	movlw	128
  9987  02D4  022F               	subwf	??_processGestureData,w
  9988  02D5  1D03               	skipz
  9989  02D6  2ADA               	goto	u7005
  9990  02D7  3002               	movlw	2
  9991  02D8  0023               	movlb	3	; select bank3
  9992  02D9  025D               	subwf	_gesture_far_count_^(0+384),w
  9993  02DA                     u7005:	
  9994  02DA  1C03               	skipc
  9995  02DB  28A2               	goto	l7211
  9996                           
  9997                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9998  02DC  0020               	movlb	0	; select bank0
  9999  02DD  0849               	movf	processGestureData@ud_delta,w
 10000  02DE  044A               	iorwf	processGestureData@ud_delta+1,w
 10001  02DF  1D03               	btfss	3,2
 10002  02E0  2AE7               	goto	l7331
 10003  02E1  084B               	movf	processGestureData@lr_delta,w
 10004  02E2  044C               	iorwf	processGestureData@lr_delta+1,w
 10005  02E3  1D03               	btfss	3,2
 10006  02E4  2AE7               	goto	l7331
 10007                           
 10008                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
 10009  02E5  3001               	movlw	1
 10010  02E6  2AF0               	goto	L4
 10011  02E7                     l7331:	
 10012                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
 10013                           
 10014  02E7  0849               	movf	processGestureData@ud_delta,w
 10015  02E8  044A               	iorwf	processGestureData@ud_delta+1,w
 10016  02E9  1903               	btfsc	3,2
 10017  02EA  2AF4               	goto	l1300
 10018  02EB  084B               	movf	processGestureData@lr_delta,w
 10019  02EC  044C               	iorwf	processGestureData@lr_delta+1,w
 10020  02ED  1903               	btfsc	3,2
 10021  02EE  2AF4               	goto	l1300
 10022                           
 10023                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
 10024  02EF  3002               	movlw	2
 10025  02F0                     L4:	
 10026  02F0  0023               	movlb	3	; select bank3
 10027  02F1  00DB               	movwf	_gesture_state_^(0+384)
 10028  02F2  3000               	movlw	0
 10029  02F3  00DC               	movwf	(_gesture_state_^(0+384)+1)
 10030  02F4                     l1300:	
 10031                           
 10032                           ;APDS9960.c: 771:                 return 1;
 10033  02F4  3001               	movlw	1
 10034  02F5  0008               	return
 10035  02F6                     l7339:	
 10036                           
 10037                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
 10038  02F6  0020               	movlb	0	; select bank0
 10039  02F7  084A               	movf	processGestureData@ud_delta+1,w
 10040  02F8  3A80               	xorlw	128
 10041  02F9  00AF               	movwf	??_processGestureData
 10042  02FA  3080               	movlw	128
 10043  02FB  022F               	subwf	??_processGestureData,w
 10044  02FC  1D03               	skipz
 10045  02FD  2B00               	goto	u7055
 10046  02FE  3001               	movlw	1
 10047  02FF  0249               	subwf	processGestureData@ud_delta,w
 10048  0300                     u7055:	
 10049  0300  1803               	skipnc
 10050  0301  2B0F               	goto	l7343
 10051  0302  0020               	movlb	0	; select bank0
 10052  0303  0949               	comf	processGestureData@ud_delta,w
 10053  0304  00AF               	movwf	??_processGestureData
 10054  0305  094A               	comf	processGestureData@ud_delta+1,w
 10055  0306  00B0               	movwf	??_processGestureData+1
 10056  0307  0AAF               	incf	??_processGestureData,f
 10057  0308  1903               	skipnz
 10058  0309  0AB0               	incf	??_processGestureData+1,f
 10059  030A  082F               	movf	??_processGestureData,w
 10060  030B  00BD               	movwf	_processGestureData$1842
 10061  030C  0830               	movf	??_processGestureData+1,w
 10062  030D  00BE               	movwf	_processGestureData$1842+1
 10063  030E  2B14               	goto	l1307
 10064  030F                     l7343:	
 10065  030F  0020               	movlb	0	; select bank0
 10066  0310  084A               	movf	processGestureData@ud_delta+1,w
 10067  0311  00BE               	movwf	_processGestureData$1842+1
 10068  0312  0849               	movf	processGestureData@ud_delta,w
 10069  0313  00BD               	movwf	_processGestureData$1842
 10070  0314                     l1307:	
 10071  0314  083E               	movf	_processGestureData$1842+1,w
 10072  0315  3A80               	xorlw	128
 10073  0316  00AF               	movwf	??_processGestureData
 10074  0317  3080               	movlw	128
 10075  0318  022F               	subwf	??_processGestureData,w
 10076  0319  1D03               	skipz
 10077  031A  2B1D               	goto	u7065
 10078  031B  3014               	movlw	20
 10079  031C  023D               	subwf	_processGestureData$1842,w
 10080  031D                     u7065:	
 10081  031D  1803               	skipnc
 10082  031E  28A2               	goto	l7211
 10083  031F  0020               	movlb	0	; select bank0
 10084  0320  084C               	movf	processGestureData@lr_delta+1,w
 10085  0321  3A80               	xorlw	128
 10086  0322  00AF               	movwf	??_processGestureData
 10087  0323  3080               	movlw	128
 10088  0324  022F               	subwf	??_processGestureData,w
 10089  0325  1D03               	skipz
 10090  0326  2B29               	goto	u7075
 10091  0327  3001               	movlw	1
 10092  0328  024B               	subwf	processGestureData@lr_delta,w
 10093  0329                     u7075:	
 10094  0329  1803               	skipnc
 10095  032A  2B38               	goto	l7349
 10096  032B  0020               	movlb	0	; select bank0
 10097  032C  094B               	comf	processGestureData@lr_delta,w
 10098  032D  00AF               	movwf	??_processGestureData
 10099  032E  094C               	comf	processGestureData@lr_delta+1,w
 10100  032F  00B0               	movwf	??_processGestureData+1
 10101  0330  0AAF               	incf	??_processGestureData,f
 10102  0331  1903               	skipnz
 10103  0332  0AB0               	incf	??_processGestureData+1,f
 10104  0333  082F               	movf	??_processGestureData,w
 10105  0334  00BF               	movwf	_processGestureData$1843
 10106  0335  0830               	movf	??_processGestureData+1,w
 10107  0336  00C0               	movwf	_processGestureData$1843+1
 10108  0337  2B3D               	goto	l1311
 10109  0338                     l7349:	
 10110  0338  0020               	movlb	0	; select bank0
 10111  0339  084C               	movf	processGestureData@lr_delta+1,w
 10112  033A  00C0               	movwf	_processGestureData$1843+1
 10113  033B  084B               	movf	processGestureData@lr_delta,w
 10114  033C  00BF               	movwf	_processGestureData$1843
 10115  033D                     l1311:	
 10116  033D  0840               	movf	_processGestureData$1843+1,w
 10117  033E  3A80               	xorlw	128
 10118  033F  00AF               	movwf	??_processGestureData
 10119  0340  3080               	movlw	128
 10120  0341  022F               	subwf	??_processGestureData,w
 10121  0342  1D03               	skipz
 10122  0343  2B46               	goto	u7085
 10123  0344  3014               	movlw	20
 10124  0345  023F               	subwf	_processGestureData$1843,w
 10125  0346                     u7085:	
 10126  0346  1803               	skipnc
 10127  0347  28A2               	goto	l7211
 10128                           
 10129                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
 10130  0348  0020               	movlb	0	; select bank0
 10131  0349  0849               	movf	processGestureData@ud_delta,w
 10132  034A  044A               	iorwf	processGestureData@ud_delta+1,w
 10133  034B  1D03               	btfss	3,2
 10134  034C  2B56               	goto	l1312
 10135  034D  084B               	movf	processGestureData@lr_delta,w
 10136  034E  044C               	iorwf	processGestureData@lr_delta+1,w
 10137  034F  1D03               	btfss	3,2
 10138  0350  2B56               	goto	l1312
 10139                           
 10140                           ;APDS9960.c: 779:                 gesture_near_count_++;
 10141  0351  3001               	movlw	1
 10142  0352  0022               	movlb	2	; select bank2
 10143  0353  07E6               	addwf	_gesture_near_count_^(0+256),f
 10144  0354  3000               	movlw	0
 10145  0355  3DE7               	addwfc	(_gesture_near_count_+1)^(0+256),f
 10146  0356                     l1312:	
 10147                           ;APDS9960.c: 780:             }
 10148                           
 10149                           
 10150                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
 10151  0356  0022               	movlb	2	; select bank2
 10152  0357  0867               	movf	(_gesture_near_count_+1)^(0+256),w
 10153  0358  3A80               	xorlw	128
 10154  0359  0020               	movlb	0	; select bank0
 10155  035A  00AF               	movwf	??_processGestureData
 10156  035B  3080               	movlw	128
 10157  035C  022F               	subwf	??_processGestureData,w
 10158  035D  1D03               	skipz
 10159  035E  2B62               	goto	u7115
 10160  035F  300A               	movlw	10
 10161  0360  0022               	movlb	2	; select bank2
 10162  0361  0266               	subwf	_gesture_near_count_^(0+256),w
 10163  0362                     u7115:	
 10164  0362  1C03               	skipc
 10165  0363  28A2               	goto	l7211
 10166                           
 10167                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
 10168  0364  0021               	movlb	1	; select bank1
 10169  0365  01EA               	clrf	_gesture_ud_count_^(0+128)
 10170  0366  01EB               	clrf	(_gesture_ud_count_+1)^(0+128)
 10171                           
 10172                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
 10173  0367  01E8               	clrf	_gesture_lr_count_^(0+128)
 10174  0368  01E9               	clrf	(_gesture_lr_count_+1)^(0+128)
 10175                           
 10176                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
 10177  0369  01F2               	clrf	_gesture_ud_delta_
 10178  036A  01F3               	clrf	_gesture_ud_delta_+1
 10179                           
 10180                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
 10181  036B  01F0               	clrf	_gesture_lr_delta_
 10182  036C  01F1               	clrf	_gesture_lr_delta_+1
 10183  036D  28A2               	goto	l7211
 10184  036E                     __end_of_processGestureData:	
 10185                           
 10186                           	psect	text19
 10187  138E                     __ptext19:	
 10188 ;; *************** function ___wmul *****************
 10189 ;; Defined at:
 10190 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10193 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;  product         2    4[BANK0 ] unsigned int 
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  2    0[BANK0 ] unsigned int 
 10198 ;; Registers used:
 10199 ;;		wreg, status,2, status,0
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        6 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    5
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_processGestureData
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function ___wmul
 10221  138E                     ___wmul:	
 10222                           
 10223                           ;incstack = 0
 10224                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10225  138E  0020               	movlb	0	; select bank0
 10226  138F  01A4               	clrf	___wmul@product
 10227  1390  01A5               	clrf	___wmul@product+1
 10228  1391                     l7093:	
 10229  1391  1C20               	btfss	___wmul@multiplier,0
 10230  1392  2B97               	goto	l1676
 10231  1393  0822               	movf	___wmul@multiplicand,w
 10232  1394  07A4               	addwf	___wmul@product,f
 10233  1395  0823               	movf	___wmul@multiplicand+1,w
 10234  1396  3DA5               	addwfc	___wmul@product+1,f
 10235  1397                     l1676:	
 10236  1397  3001               	movlw	1
 10237  1398                     u6555:	
 10238  1398  35A2               	lslf	___wmul@multiplicand,f
 10239  1399  0DA3               	rlf	___wmul@multiplicand+1,f
 10240  139A  0B89               	decfsz	9,f
 10241  139B  2B98               	goto	u6555
 10242  139C  3001               	movlw	1
 10243  139D                     u6565:	
 10244  139D  36A1               	lsrf	___wmul@multiplier+1,f
 10245  139E  0CA0               	rrf	___wmul@multiplier,f
 10246  139F  0B89               	decfsz	9,f
 10247  13A0  2B9D               	goto	u6565
 10248  13A1  0820               	movf	___wmul@multiplier,w
 10249  13A2  0421               	iorwf	___wmul@multiplier+1,w
 10250  13A3  1D03               	btfss	3,2
 10251  13A4  2B91               	goto	l7093
 10252  13A5  0825               	movf	___wmul@product+1,w
 10253  13A6  00A1               	movwf	?___wmul+1
 10254  13A7  0824               	movf	___wmul@product,w
 10255  13A8  00A0               	movwf	?___wmul
 10256  13A9  0008               	return
 10257  13AA                     __end_of___wmul:	
 10258                           
 10259                           	psect	text20
 10260  09AD                     __ptext20:	
 10261 ;; *************** function ___awdiv *****************
 10262 ;; Defined at:
 10263 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;  divisor         2    6[BANK0 ] int 
 10266 ;;  dividend        2    8[BANK0 ] int 
 10267 ;; Auto vars:     Size  Location     Type
 10268 ;;  quotient        2   13[BANK0 ] int 
 10269 ;;  sign            1   12[BANK0 ] unsigned char 
 10270 ;;  counter         1   11[BANK0 ] unsigned char 
 10271 ;; Return value:  Size  Location     Type
 10272 ;;                  2    6[BANK0 ] int 
 10273 ;; Registers used:
 10274 ;;		wreg, status,2, status,0
 10275 ;; Tracked objects:
 10276 ;;		On entry : 0/0
 10277 ;;		On exit  : 0/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;Total ram usage:        9 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    5
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		_processGestureData
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           
 10295                           ;psect for function ___awdiv
 10296  09AD                     ___awdiv:	
 10297                           
 10298                           ;incstack = 0
 10299                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10300  09AD  0020               	movlb	0	; select bank0
 10301  09AE  01AC               	clrf	___awdiv@sign
 10302  09AF  1FA7               	btfss	___awdiv@divisor+1,7
 10303  09B0  29B8               	goto	l4885
 10304  09B1  09A6               	comf	___awdiv@divisor,f
 10305  09B2  09A7               	comf	___awdiv@divisor+1,f
 10306  09B3  0AA6               	incf	___awdiv@divisor,f
 10307  09B4  1903               	skipnz
 10308  09B5  0AA7               	incf	___awdiv@divisor+1,f
 10309  09B6  01AC               	clrf	___awdiv@sign
 10310  09B7  0AAC               	incf	___awdiv@sign,f
 10311  09B8                     l4885:	
 10312  09B8  1FA9               	btfss	___awdiv@dividend+1,7
 10313  09B9  29C3               	goto	l4891
 10314  09BA  09A8               	comf	___awdiv@dividend,f
 10315  09BB  09A9               	comf	___awdiv@dividend+1,f
 10316  09BC  0AA8               	incf	___awdiv@dividend,f
 10317  09BD  1903               	skipnz
 10318  09BE  0AA9               	incf	___awdiv@dividend+1,f
 10319  09BF  3001               	movlw	1
 10320  09C0  00AA               	movwf	??___awdiv
 10321  09C1  082A               	movf	??___awdiv,w
 10322  09C2  06AC               	xorwf	___awdiv@sign,f
 10323  09C3                     l4891:	
 10324  09C3  01AD               	clrf	___awdiv@quotient
 10325  09C4  01AE               	clrf	___awdiv@quotient+1
 10326  09C5  0826               	movf	___awdiv@divisor,w
 10327  09C6  0427               	iorwf	___awdiv@divisor+1,w
 10328  09C7  1903               	btfsc	3,2
 10329  09C8  29F2               	goto	l4913
 10330  09C9  01AB               	clrf	___awdiv@counter
 10331  09CA  0AAB               	incf	___awdiv@counter,f
 10332  09CB                     l4901:	
 10333  09CB  1BA7               	btfsc	___awdiv@divisor+1,7
 10334  09CC  29D7               	goto	l4903
 10335  09CD  3001               	movlw	1
 10336  09CE                     u3665:	
 10337  09CE  35A6               	lslf	___awdiv@divisor,f
 10338  09CF  0DA7               	rlf	___awdiv@divisor+1,f
 10339  09D0  0B89               	decfsz	9,f
 10340  09D1  29CE               	goto	u3665
 10341  09D2  3001               	movlw	1
 10342  09D3  00AA               	movwf	??___awdiv
 10343  09D4  082A               	movf	??___awdiv,w
 10344  09D5  07AB               	addwf	___awdiv@counter,f
 10345  09D6  29CB               	goto	l4901
 10346  09D7                     l4903:	
 10347  09D7  3001               	movlw	1
 10348  09D8                     u3685:	
 10349  09D8  35AD               	lslf	___awdiv@quotient,f
 10350  09D9  0DAE               	rlf	___awdiv@quotient+1,f
 10351  09DA  0B89               	decfsz	9,f
 10352  09DB  29D8               	goto	u3685
 10353  09DC  0827               	movf	___awdiv@divisor+1,w
 10354  09DD  0229               	subwf	___awdiv@dividend+1,w
 10355  09DE  1D03               	skipz
 10356  09DF  29E2               	goto	u3695
 10357  09E0  0826               	movf	___awdiv@divisor,w
 10358  09E1  0228               	subwf	___awdiv@dividend,w
 10359  09E2                     u3695:	
 10360  09E2  1C03               	skipc
 10361  09E3  29E9               	goto	l4909
 10362  09E4  0826               	movf	___awdiv@divisor,w
 10363  09E5  02A8               	subwf	___awdiv@dividend,f
 10364  09E6  0827               	movf	___awdiv@divisor+1,w
 10365  09E7  3BA9               	subwfb	___awdiv@dividend+1,f
 10366  09E8  142D               	bsf	___awdiv@quotient,0
 10367  09E9                     l4909:	
 10368  09E9  3001               	movlw	1
 10369  09EA                     u3705:	
 10370  09EA  36A7               	lsrf	___awdiv@divisor+1,f
 10371  09EB  0CA6               	rrf	___awdiv@divisor,f
 10372  09EC  0B89               	decfsz	9,f
 10373  09ED  29EA               	goto	u3705
 10374  09EE  3001               	movlw	1
 10375  09EF  02AB               	subwf	___awdiv@counter,f
 10376  09F0  1D03               	btfss	3,2
 10377  09F1  29D7               	goto	l4903
 10378  09F2                     l4913:	
 10379  09F2  082C               	movf	___awdiv@sign,w
 10380  09F3  1903               	btfsc	3,2
 10381  09F4  29FA               	goto	l4917
 10382  09F5  09AD               	comf	___awdiv@quotient,f
 10383  09F6  09AE               	comf	___awdiv@quotient+1,f
 10384  09F7  0AAD               	incf	___awdiv@quotient,f
 10385  09F8  1903               	skipnz
 10386  09F9  0AAE               	incf	___awdiv@quotient+1,f
 10387  09FA                     l4917:	
 10388  09FA  082E               	movf	___awdiv@quotient+1,w
 10389  09FB  00A7               	movwf	?___awdiv+1
 10390  09FC  082D               	movf	___awdiv@quotient,w
 10391  09FD  00A6               	movwf	?___awdiv
 10392  09FE  0008               	return
 10393  09FF                     __end_of___awdiv:	
 10394                           
 10395                           	psect	text21
 10396  1254                     __ptext21:	
 10397 ;; *************** function _isGestureAvailable *****************
 10398 ;; Defined at:
 10399 ;;		line 537 in file "APDS9960.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  val             1   10[BANK0 ] unsigned char 
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      _Bool 
 10406 ;; Registers used:
 10407 ;;		wreg, status,2, status,0, pclath, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;Total ram usage:        2 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    8
 10420 ;; This function calls:
 10421 ;;		_wireReadDataByte
 10422 ;; This function is called by:
 10423 ;;		_main
 10424 ;;		_readGesture
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           
 10429                           ;psect for function _isGestureAvailable
 10430  1254                     _isGestureAvailable:	
 10431                           
 10432                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
 10433                           
 10434                           ;incstack = 0
 10435                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
 10436  1254  30AF               	movlw	175
 10437  1255  3194  2427  3192   	fcall	_wireReadDataByte
 10438  1258  0020               	movlb	0	; select bank0
 10439  1259  00A9               	movwf	??_isGestureAvailable
 10440  125A  0829               	movf	??_isGestureAvailable,w
 10441  125B  00AA               	movwf	isGestureAvailable@val
 10442                           
 10443                           ;APDS9960.c: 545:     val &= 0b00000001;
 10444  125C  3001               	movlw	1
 10445  125D  00A9               	movwf	??_isGestureAvailable
 10446  125E  0829               	movf	??_isGestureAvailable,w
 10447  125F  05AA               	andwf	isGestureAvailable@val,f
 10448                           
 10449                           ;APDS9960.c: 548:     if( val == 1) {
 10450  1260  032A               	decf	isGestureAvailable@val,w
 10451  1261  1D03               	btfss	3,2
 10452  1262  2A65               	goto	l7127
 10453                           
 10454                           ;APDS9960.c: 549:         return 1;
 10455  1263  3001               	movlw	1
 10456  1264  0008               	return
 10457  1265                     l7127:	
 10458                           
 10459                           ;APDS9960.c: 551:         return 0;
 10460  1265  3000               	movlw	0
 10461  1266  0008               	return
 10462  1267                     __end_of_isGestureAvailable:	
 10463                           
 10464                           	psect	text22
 10465  036E                     __ptext22:	
 10466 ;; *************** function _decodeGesture *****************
 10467 ;; Defined at:
 10468 ;;		line 795 in file "APDS9960.c"
 10469 ;; Parameters:    Size  Location     Type
 10470 ;;		None
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;		None
 10473 ;; Return value:  Size  Location     Type
 10474 ;;                  1    wreg      _Bool 
 10475 ;; Registers used:
 10476 ;;		wreg, status,2, status,0
 10477 ;; Tracked objects:
 10478 ;;		On entry : 0/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;Total ram usage:       18 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:    5
 10489 ;; This function calls:
 10490 ;;		Nothing
 10491 ;; This function is called by:
 10492 ;;		_readGesture
 10493 ;; This function uses a non-reentrant model
 10494 ;;
 10495                           
 10496                           
 10497                           ;psect for function _decodeGesture
 10498  036E                     _decodeGesture:	
 10499                           
 10500                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
 10501                           
 10502                           ;incstack = 0
 10503                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
 10504  036E  0023               	movlb	3	; select bank3
 10505  036F  035B               	decf	_gesture_state_^(0+384),w
 10506  0370  045C               	iorwf	(_gesture_state_+1)^(0+384),w
 10507  0371  1D03               	btfss	3,2
 10508  0372  2B79               	goto	l7371
 10509                           
 10510                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
 10511  0373  3005               	movlw	5
 10512  0374  00D9               	movwf	_gesture_motion_^(0+384)
 10513  0375  3000               	movlw	0
 10514  0376  00DA               	movwf	(_gesture_motion_^(0+384)+1)
 10515                           
 10516                           ;APDS9960.c: 800:         return 1;
 10517  0377  3001               	movlw	1
 10518  0378  0008               	return
 10519  0379                     l7371:	
 10520  0379  3002               	movlw	2
 10521  037A  065B               	xorwf	_gesture_state_^(0+384),w
 10522  037B  045C               	iorwf	(_gesture_state_+1)^(0+384),w
 10523  037C  1D03               	btfss	3,2
 10524  037D  2B84               	goto	l7377
 10525                           
 10526                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
 10527  037E  3006               	movlw	6
 10528  037F  00D9               	movwf	_gesture_motion_^(0+384)
 10529  0380  3000               	movlw	0
 10530  0381  00DA               	movwf	(_gesture_motion_^(0+384)+1)
 10531                           
 10532                           ;APDS9960.c: 803:         return 1;
 10533  0382  3001               	movlw	1
 10534  0383  0008               	return
 10535  0384                     l7377:	
 10536                           
 10537                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
 10538  0384  0021               	movlb	1	; select bank1
 10539  0385  0A6A               	incf	_gesture_ud_count_^(0+128),w
 10540  0386  1D03               	skipz
 10541  0387  2B91               	goto	l7383
 10542  0388  0A6B               	incf	(_gesture_ud_count_+1)^(0+128),w
 10543  0389  1D03               	btfss	3,2
 10544  038A  2B91               	goto	l7383
 10545  038B  0868               	movf	_gesture_lr_count_^(0+128),w
 10546  038C  0469               	iorwf	(_gesture_lr_count_+1)^(0+128),w
 10547  038D  1D03               	btfss	3,2
 10548  038E  2B91               	goto	l7383
 10549  038F                     l7381:	
 10550                           
 10551                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
 10552  038F  3003               	movlw	3
 10553  0390  2BB0               	goto	L7
 10554  0391                     l7383:	
 10555                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
 10556                           
 10557  0391  036A               	decf	_gesture_ud_count_^(0+128),w
 10558  0392  046B               	iorwf	(_gesture_ud_count_+1)^(0+128),w
 10559  0393  1D03               	btfss	3,2
 10560  0394  2B9B               	goto	l7389
 10561  0395  0868               	movf	_gesture_lr_count_^(0+128),w
 10562  0396  0469               	iorwf	(_gesture_lr_count_+1)^(0+128),w
 10563  0397  1D03               	btfss	3,2
 10564  0398  2B9B               	goto	l7389
 10565  0399                     l7387:	
 10566                           
 10567                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
 10568  0399  3004               	movlw	4
 10569  039A  2BB0               	goto	L7
 10570  039B                     l7389:	
 10571                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
 10572                           
 10573  039B  086A               	movf	_gesture_ud_count_^(0+128),w
 10574  039C  046B               	iorwf	(_gesture_ud_count_+1)^(0+128),w
 10575  039D  1D03               	btfss	3,2
 10576  039E  2BA5               	goto	l7395
 10577  039F  0368               	decf	_gesture_lr_count_^(0+128),w
 10578  03A0  0469               	iorwf	(_gesture_lr_count_+1)^(0+128),w
 10579  03A1  1D03               	btfss	3,2
 10580  03A2  2BA5               	goto	l7395
 10581  03A3                     l7393:	
 10582                           
 10583                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
 10584  03A3  3002               	movlw	2
 10585  03A4  2BB0               	goto	L7
 10586  03A5                     l7395:	
 10587                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
 10588                           
 10589  03A5  086A               	movf	_gesture_ud_count_^(0+128),w
 10590  03A6  046B               	iorwf	(_gesture_ud_count_+1)^(0+128),w
 10591  03A7  1D03               	btfss	3,2
 10592  03A8  2BB5               	goto	l7401
 10593  03A9  0A68               	incf	_gesture_lr_count_^(0+128),w
 10594  03AA  1D03               	skipz
 10595  03AB  2BB5               	goto	l7401
 10596  03AC  0A69               	incf	(_gesture_lr_count_+1)^(0+128),w
 10597  03AD  1D03               	btfss	3,2
 10598  03AE  2BB5               	goto	l7401
 10599  03AF                     l7399:	
 10600                           
 10601                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
 10602  03AF  3001               	movlw	1
 10603  03B0                     L7:	
 10604  03B0  0023               	movlb	3	; select bank3
 10605  03B1  00D9               	movwf	_gesture_motion_^(0+384)
 10606  03B2  3000               	movlw	0
 10607  03B3  00DA               	movwf	(_gesture_motion_^(0+384)+1)
 10608                           
 10609                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
 10610  03B4  2CFF               	goto	l7477
 10611  03B5                     l7401:	
 10612  03B5  0A6A               	incf	_gesture_ud_count_^(0+128),w
 10613  03B6  1D03               	skipz
 10614  03B7  2C07               	goto	l7419
 10615  03B8  0A6B               	incf	(_gesture_ud_count_+1)^(0+128),w
 10616  03B9  1D03               	btfss	3,2
 10617  03BA  2C07               	goto	l7419
 10618  03BB  0368               	decf	_gesture_lr_count_^(0+128),w
 10619  03BC  0469               	iorwf	(_gesture_lr_count_+1)^(0+128),w
 10620  03BD  1D03               	btfss	3,2
 10621  03BE  2C07               	goto	l7419
 10622                           
 10623                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10624  03BF  0873               	movf	_gesture_ud_delta_+1,w
 10625  03C0  3A80               	xorlw	128
 10626  03C1  0020               	movlb	0	; select bank0
 10627  03C2  00A0               	movwf	??_decodeGesture
 10628  03C3  3080               	movlw	128
 10629  03C4  0220               	subwf	??_decodeGesture,w
 10630  03C5  1D03               	skipz
 10631  03C6  2BC9               	goto	u7245
 10632  03C7  3001               	movlw	1
 10633  03C8  0272               	subwf	_gesture_ud_delta_,w
 10634  03C9                     u7245:	
 10635  03C9  1803               	skipnc
 10636  03CA  2BD8               	goto	l7409
 10637  03CB  0972               	comf	_gesture_ud_delta_,w
 10638  03CC  0020               	movlb	0	; select bank0
 10639  03CD  00A0               	movwf	??_decodeGesture
 10640  03CE  0973               	comf	_gesture_ud_delta_+1,w
 10641  03CF  00A1               	movwf	??_decodeGesture+1
 10642  03D0  0AA0               	incf	??_decodeGesture,f
 10643  03D1  1903               	skipnz
 10644  03D2  0AA1               	incf	??_decodeGesture+1,f
 10645  03D3  0820               	movf	??_decodeGesture,w
 10646  03D4  00A2               	movwf	_decodeGesture$1845
 10647  03D5  0821               	movf	??_decodeGesture+1,w
 10648  03D6  00A3               	movwf	_decodeGesture$1845+1
 10649  03D7  2BDD               	goto	l1333
 10650  03D8                     l7409:	
 10651  03D8  0873               	movf	_gesture_ud_delta_+1,w
 10652  03D9  0020               	movlb	0	; select bank0
 10653  03DA  00A3               	movwf	_decodeGesture$1845+1
 10654  03DB  0872               	movf	_gesture_ud_delta_,w
 10655  03DC  00A2               	movwf	_decodeGesture$1845
 10656  03DD                     l1333:	
 10657  03DD  0871               	movf	_gesture_lr_delta_+1,w
 10658  03DE  3A80               	xorlw	128
 10659  03DF  00A0               	movwf	??_decodeGesture
 10660  03E0  3080               	movlw	128
 10661  03E1  0220               	subwf	??_decodeGesture,w
 10662  03E2  1D03               	skipz
 10663  03E3  2BE6               	goto	u7255
 10664  03E4  3001               	movlw	1
 10665  03E5  0270               	subwf	_gesture_lr_delta_,w
 10666  03E6                     u7255:	
 10667  03E6  1803               	skipnc
 10668  03E7  2BF5               	goto	l7413
 10669  03E8  0970               	comf	_gesture_lr_delta_,w
 10670  03E9  0020               	movlb	0	; select bank0
 10671  03EA  00A0               	movwf	??_decodeGesture
 10672  03EB  0971               	comf	_gesture_lr_delta_+1,w
 10673  03EC  00A1               	movwf	??_decodeGesture+1
 10674  03ED  0AA0               	incf	??_decodeGesture,f
 10675  03EE  1903               	skipnz
 10676  03EF  0AA1               	incf	??_decodeGesture+1,f
 10677  03F0  0820               	movf	??_decodeGesture,w
 10678  03F1  00A4               	movwf	_decodeGesture$1846
 10679  03F2  0821               	movf	??_decodeGesture+1,w
 10680  03F3  00A5               	movwf	_decodeGesture$1846+1
 10681  03F4  2BFA               	goto	l1337
 10682  03F5                     l7413:	
 10683  03F5  0871               	movf	_gesture_lr_delta_+1,w
 10684  03F6  0020               	movlb	0	; select bank0
 10685  03F7  00A5               	movwf	_decodeGesture$1846+1
 10686  03F8  0870               	movf	_gesture_lr_delta_,w
 10687  03F9  00A4               	movwf	_decodeGesture$1846
 10688  03FA                     l1337:	
 10689  03FA  0825               	movf	_decodeGesture$1846+1,w
 10690  03FB  3A80               	xorlw	128
 10691  03FC  00A0               	movwf	??_decodeGesture
 10692  03FD  0823               	movf	_decodeGesture$1845+1,w
 10693  03FE  3A80               	xorlw	128
 10694  03FF  0220               	subwf	??_decodeGesture,w
 10695  0400  1D03               	skipz
 10696  0401  2C04               	goto	u7265
 10697  0402  0822               	movf	_decodeGesture$1845,w
 10698  0403  0224               	subwf	_decodeGesture$1846,w
 10699  0404                     u7265:	
 10700  0404  1C03               	btfss	3,0
 10701  0405  2B8F               	goto	l7381
 10702  0406  2BA3               	goto	l7393
 10703  0407                     l7419:	
 10704  0407  036A               	decf	_gesture_ud_count_^(0+128),w
 10705  0408  046B               	iorwf	(_gesture_ud_count_+1)^(0+128),w
 10706  0409  1D03               	btfss	3,2
 10707  040A  2C59               	goto	l7437
 10708  040B  0A68               	incf	_gesture_lr_count_^(0+128),w
 10709  040C  1D03               	skipz
 10710  040D  2C59               	goto	l7437
 10711  040E  0A69               	incf	(_gesture_lr_count_+1)^(0+128),w
 10712  040F  1D03               	btfss	3,2
 10713  0410  2C59               	goto	l7437
 10714                           
 10715                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10716  0411  0873               	movf	_gesture_ud_delta_+1,w
 10717  0412  3A80               	xorlw	128
 10718  0413  0020               	movlb	0	; select bank0
 10719  0414  00A0               	movwf	??_decodeGesture
 10720  0415  3080               	movlw	128
 10721  0416  0220               	subwf	??_decodeGesture,w
 10722  0417  1D03               	skipz
 10723  0418  2C1B               	goto	u7295
 10724  0419  3001               	movlw	1
 10725  041A  0272               	subwf	_gesture_ud_delta_,w
 10726  041B                     u7295:	
 10727  041B  1803               	skipnc
 10728  041C  2C2A               	goto	l7427
 10729  041D  0972               	comf	_gesture_ud_delta_,w
 10730  041E  0020               	movlb	0	; select bank0
 10731  041F  00A0               	movwf	??_decodeGesture
 10732  0420  0973               	comf	_gesture_ud_delta_+1,w
 10733  0421  00A1               	movwf	??_decodeGesture+1
 10734  0422  0AA0               	incf	??_decodeGesture,f
 10735  0423  1903               	skipnz
 10736  0424  0AA1               	incf	??_decodeGesture+1,f
 10737  0425  0820               	movf	??_decodeGesture,w
 10738  0426  00A6               	movwf	_decodeGesture$1847
 10739  0427  0821               	movf	??_decodeGesture+1,w
 10740  0428  00A7               	movwf	_decodeGesture$1847+1
 10741  0429  2C2F               	goto	l1345
 10742  042A                     l7427:	
 10743  042A  0873               	movf	_gesture_ud_delta_+1,w
 10744  042B  0020               	movlb	0	; select bank0
 10745  042C  00A7               	movwf	_decodeGesture$1847+1
 10746  042D  0872               	movf	_gesture_ud_delta_,w
 10747  042E  00A6               	movwf	_decodeGesture$1847
 10748  042F                     l1345:	
 10749  042F  0871               	movf	_gesture_lr_delta_+1,w
 10750  0430  3A80               	xorlw	128
 10751  0431  00A0               	movwf	??_decodeGesture
 10752  0432  3080               	movlw	128
 10753  0433  0220               	subwf	??_decodeGesture,w
 10754  0434  1D03               	skipz
 10755  0435  2C38               	goto	u7305
 10756  0436  3001               	movlw	1
 10757  0437  0270               	subwf	_gesture_lr_delta_,w
 10758  0438                     u7305:	
 10759  0438  1803               	skipnc
 10760  0439  2C47               	goto	l7431
 10761  043A  0970               	comf	_gesture_lr_delta_,w
 10762  043B  0020               	movlb	0	; select bank0
 10763  043C  00A0               	movwf	??_decodeGesture
 10764  043D  0971               	comf	_gesture_lr_delta_+1,w
 10765  043E  00A1               	movwf	??_decodeGesture+1
 10766  043F  0AA0               	incf	??_decodeGesture,f
 10767  0440  1903               	skipnz
 10768  0441  0AA1               	incf	??_decodeGesture+1,f
 10769  0442  0820               	movf	??_decodeGesture,w
 10770  0443  00A8               	movwf	_decodeGesture$1848
 10771  0444  0821               	movf	??_decodeGesture+1,w
 10772  0445  00A9               	movwf	_decodeGesture$1848+1
 10773  0446  2C4C               	goto	l1349
 10774  0447                     l7431:	
 10775  0447  0871               	movf	_gesture_lr_delta_+1,w
 10776  0448  0020               	movlb	0	; select bank0
 10777  0449  00A9               	movwf	_decodeGesture$1848+1
 10778  044A  0870               	movf	_gesture_lr_delta_,w
 10779  044B  00A8               	movwf	_decodeGesture$1848
 10780  044C                     l1349:	
 10781  044C  0829               	movf	_decodeGesture$1848+1,w
 10782  044D  3A80               	xorlw	128
 10783  044E  00A0               	movwf	??_decodeGesture
 10784  044F  0827               	movf	_decodeGesture$1847+1,w
 10785  0450  3A80               	xorlw	128
 10786  0451  0220               	subwf	??_decodeGesture,w
 10787  0452  1D03               	skipz
 10788  0453  2C56               	goto	u7315
 10789  0454  0826               	movf	_decodeGesture$1847,w
 10790  0455  0228               	subwf	_decodeGesture$1848,w
 10791  0456                     u7315:	
 10792  0456  1C03               	btfss	3,0
 10793  0457  2B99               	goto	l7387
 10794  0458  2BAF               	goto	l7399
 10795  0459                     l7437:	
 10796  0459  0A6A               	incf	_gesture_ud_count_^(0+128),w
 10797  045A  1D03               	skipz
 10798  045B  2CAD               	goto	l7455
 10799  045C  0A6B               	incf	(_gesture_ud_count_+1)^(0+128),w
 10800  045D  1D03               	btfss	3,2
 10801  045E  2CAD               	goto	l7455
 10802  045F  0A68               	incf	_gesture_lr_count_^(0+128),w
 10803  0460  1D03               	skipz
 10804  0461  2CAD               	goto	l7455
 10805  0462  0A69               	incf	(_gesture_lr_count_+1)^(0+128),w
 10806  0463  1D03               	btfss	3,2
 10807  0464  2CAD               	goto	l7455
 10808                           
 10809                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10810  0465  0873               	movf	_gesture_ud_delta_+1,w
 10811  0466  3A80               	xorlw	128
 10812  0467  0020               	movlb	0	; select bank0
 10813  0468  00A0               	movwf	??_decodeGesture
 10814  0469  3080               	movlw	128
 10815  046A  0220               	subwf	??_decodeGesture,w
 10816  046B  1D03               	skipz
 10817  046C  2C6F               	goto	u7345
 10818  046D  3001               	movlw	1
 10819  046E  0272               	subwf	_gesture_ud_delta_,w
 10820  046F                     u7345:	
 10821  046F  1803               	skipnc
 10822  0470  2C7E               	goto	l7445
 10823  0471  0972               	comf	_gesture_ud_delta_,w
 10824  0472  0020               	movlb	0	; select bank0
 10825  0473  00A0               	movwf	??_decodeGesture
 10826  0474  0973               	comf	_gesture_ud_delta_+1,w
 10827  0475  00A1               	movwf	??_decodeGesture+1
 10828  0476  0AA0               	incf	??_decodeGesture,f
 10829  0477  1903               	skipnz
 10830  0478  0AA1               	incf	??_decodeGesture+1,f
 10831  0479  0820               	movf	??_decodeGesture,w
 10832  047A  00AA               	movwf	_decodeGesture$1849
 10833  047B  0821               	movf	??_decodeGesture+1,w
 10834  047C  00AB               	movwf	_decodeGesture$1849+1
 10835  047D  2C83               	goto	l1357
 10836  047E                     l7445:	
 10837  047E  0873               	movf	_gesture_ud_delta_+1,w
 10838  047F  0020               	movlb	0	; select bank0
 10839  0480  00AB               	movwf	_decodeGesture$1849+1
 10840  0481  0872               	movf	_gesture_ud_delta_,w
 10841  0482  00AA               	movwf	_decodeGesture$1849
 10842  0483                     l1357:	
 10843  0483  0871               	movf	_gesture_lr_delta_+1,w
 10844  0484  3A80               	xorlw	128
 10845  0485  00A0               	movwf	??_decodeGesture
 10846  0486  3080               	movlw	128
 10847  0487  0220               	subwf	??_decodeGesture,w
 10848  0488  1D03               	skipz
 10849  0489  2C8C               	goto	u7355
 10850  048A  3001               	movlw	1
 10851  048B  0270               	subwf	_gesture_lr_delta_,w
 10852  048C                     u7355:	
 10853  048C  1803               	skipnc
 10854  048D  2C9B               	goto	l7449
 10855  048E  0970               	comf	_gesture_lr_delta_,w
 10856  048F  0020               	movlb	0	; select bank0
 10857  0490  00A0               	movwf	??_decodeGesture
 10858  0491  0971               	comf	_gesture_lr_delta_+1,w
 10859  0492  00A1               	movwf	??_decodeGesture+1
 10860  0493  0AA0               	incf	??_decodeGesture,f
 10861  0494  1903               	skipnz
 10862  0495  0AA1               	incf	??_decodeGesture+1,f
 10863  0496  0820               	movf	??_decodeGesture,w
 10864  0497  00AC               	movwf	_decodeGesture$1850
 10865  0498  0821               	movf	??_decodeGesture+1,w
 10866  0499  00AD               	movwf	_decodeGesture$1850+1
 10867  049A  2CA0               	goto	l1361
 10868  049B                     l7449:	
 10869  049B  0871               	movf	_gesture_lr_delta_+1,w
 10870  049C  0020               	movlb	0	; select bank0
 10871  049D  00AD               	movwf	_decodeGesture$1850+1
 10872  049E  0870               	movf	_gesture_lr_delta_,w
 10873  049F  00AC               	movwf	_decodeGesture$1850
 10874  04A0                     l1361:	
 10875  04A0  082D               	movf	_decodeGesture$1850+1,w
 10876  04A1  3A80               	xorlw	128
 10877  04A2  00A0               	movwf	??_decodeGesture
 10878  04A3  082B               	movf	_decodeGesture$1849+1,w
 10879  04A4  3A80               	xorlw	128
 10880  04A5  0220               	subwf	??_decodeGesture,w
 10881  04A6  1D03               	skipz
 10882  04A7  2CAA               	goto	u7365
 10883  04A8  082A               	movf	_decodeGesture$1849,w
 10884  04A9  022C               	subwf	_decodeGesture$1850,w
 10885  04AA                     u7365:	
 10886  04AA  1C03               	btfss	3,0
 10887  04AB  2B8F               	goto	l7381
 10888  04AC  2BAF               	goto	l7399
 10889  04AD                     l7455:	
 10890  04AD  036A               	decf	_gesture_ud_count_^(0+128),w
 10891  04AE  046B               	iorwf	(_gesture_ud_count_+1)^(0+128),w
 10892  04AF  1D03               	btfss	3,2
 10893  04B0  2CFD               	goto	l7473
 10894  04B1  0368               	decf	_gesture_lr_count_^(0+128),w
 10895  04B2  0469               	iorwf	(_gesture_lr_count_+1)^(0+128),w
 10896  04B3  1D03               	btfss	3,2
 10897  04B4  2CFD               	goto	l7473
 10898                           
 10899                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10900  04B5  0873               	movf	_gesture_ud_delta_+1,w
 10901  04B6  3A80               	xorlw	128
 10902  04B7  0020               	movlb	0	; select bank0
 10903  04B8  00A0               	movwf	??_decodeGesture
 10904  04B9  3080               	movlw	128
 10905  04BA  0220               	subwf	??_decodeGesture,w
 10906  04BB  1D03               	skipz
 10907  04BC  2CBF               	goto	u7395
 10908  04BD  3001               	movlw	1
 10909  04BE  0272               	subwf	_gesture_ud_delta_,w
 10910  04BF                     u7395:	
 10911  04BF  1803               	skipnc
 10912  04C0  2CCE               	goto	l7463
 10913  04C1  0972               	comf	_gesture_ud_delta_,w
 10914  04C2  0020               	movlb	0	; select bank0
 10915  04C3  00A0               	movwf	??_decodeGesture
 10916  04C4  0973               	comf	_gesture_ud_delta_+1,w
 10917  04C5  00A1               	movwf	??_decodeGesture+1
 10918  04C6  0AA0               	incf	??_decodeGesture,f
 10919  04C7  1903               	skipnz
 10920  04C8  0AA1               	incf	??_decodeGesture+1,f
 10921  04C9  0820               	movf	??_decodeGesture,w
 10922  04CA  00AE               	movwf	_decodeGesture$1851
 10923  04CB  0821               	movf	??_decodeGesture+1,w
 10924  04CC  00AF               	movwf	_decodeGesture$1851+1
 10925  04CD  2CD3               	goto	l1369
 10926  04CE                     l7463:	
 10927  04CE  0873               	movf	_gesture_ud_delta_+1,w
 10928  04CF  0020               	movlb	0	; select bank0
 10929  04D0  00AF               	movwf	_decodeGesture$1851+1
 10930  04D1  0872               	movf	_gesture_ud_delta_,w
 10931  04D2  00AE               	movwf	_decodeGesture$1851
 10932  04D3                     l1369:	
 10933  04D3  0871               	movf	_gesture_lr_delta_+1,w
 10934  04D4  3A80               	xorlw	128
 10935  04D5  00A0               	movwf	??_decodeGesture
 10936  04D6  3080               	movlw	128
 10937  04D7  0220               	subwf	??_decodeGesture,w
 10938  04D8  1D03               	skipz
 10939  04D9  2CDC               	goto	u7405
 10940  04DA  3001               	movlw	1
 10941  04DB  0270               	subwf	_gesture_lr_delta_,w
 10942  04DC                     u7405:	
 10943  04DC  1803               	skipnc
 10944  04DD  2CEB               	goto	l7467
 10945  04DE  0970               	comf	_gesture_lr_delta_,w
 10946  04DF  0020               	movlb	0	; select bank0
 10947  04E0  00A0               	movwf	??_decodeGesture
 10948  04E1  0971               	comf	_gesture_lr_delta_+1,w
 10949  04E2  00A1               	movwf	??_decodeGesture+1
 10950  04E3  0AA0               	incf	??_decodeGesture,f
 10951  04E4  1903               	skipnz
 10952  04E5  0AA1               	incf	??_decodeGesture+1,f
 10953  04E6  0820               	movf	??_decodeGesture,w
 10954  04E7  00B0               	movwf	_decodeGesture$1852
 10955  04E8  0821               	movf	??_decodeGesture+1,w
 10956  04E9  00B1               	movwf	_decodeGesture$1852+1
 10957  04EA  2CF0               	goto	l1373
 10958  04EB                     l7467:	
 10959  04EB  0871               	movf	_gesture_lr_delta_+1,w
 10960  04EC  0020               	movlb	0	; select bank0
 10961  04ED  00B1               	movwf	_decodeGesture$1852+1
 10962  04EE  0870               	movf	_gesture_lr_delta_,w
 10963  04EF  00B0               	movwf	_decodeGesture$1852
 10964  04F0                     l1373:	
 10965  04F0  0831               	movf	_decodeGesture$1852+1,w
 10966  04F1  3A80               	xorlw	128
 10967  04F2  00A0               	movwf	??_decodeGesture
 10968  04F3  082F               	movf	_decodeGesture$1851+1,w
 10969  04F4  3A80               	xorlw	128
 10970  04F5  0220               	subwf	??_decodeGesture,w
 10971  04F6  1D03               	skipz
 10972  04F7  2CFA               	goto	u7415
 10973  04F8  082E               	movf	_decodeGesture$1851,w
 10974  04F9  0230               	subwf	_decodeGesture$1852,w
 10975  04FA                     u7415:	
 10976  04FA  1C03               	btfss	3,0
 10977  04FB  2B99               	goto	l7387
 10978  04FC  2BA3               	goto	l7393
 10979  04FD                     l7473:	
 10980                           
 10981                           ;APDS9960.c: 840:         return 0;
 10982  04FD  3000               	movlw	0
 10983  04FE  0008               	return
 10984  04FF                     l7477:	
 10985                           
 10986                           ;APDS9960.c: 843:     return 1;
 10987  04FF  3001               	movlw	1
 10988  0500  0008               	return
 10989  0501                     __end_of_decodeGesture:	
 10990                           
 10991                           	psect	text23
 10992  0AA6                     __ptext23:	
 10993 ;; *************** function _enableGestureSensor *****************
 10994 ;; Defined at:
 10995 ;;		line 409 in file "APDS9960.c"
 10996 ;; Parameters:    Size  Location     Type
 10997 ;;  interrupts      1    wreg     _Bool 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  interrupts      1   17[BANK0 ] _Bool 
 11000 ;; Return value:  Size  Location     Type
 11001 ;;                  1    wreg      _Bool 
 11002 ;; Registers used:
 11003 ;;		wreg, status,2, status,0, pclath, cstack
 11004 ;; Tracked objects:
 11005 ;;		On entry : 0/0
 11006 ;;		On exit  : 0/0
 11007 ;;		Unchanged: 0/0
 11008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;Total ram usage:        2 bytes
 11014 ;; Hardware stack levels used:    1
 11015 ;; Hardware stack levels required when called:   11
 11016 ;; This function calls:
 11017 ;;		_enablePower
 11018 ;;		_resetGestureParameters
 11019 ;;		_setGestureIntEnable
 11020 ;;		_setGestureMode
 11021 ;;		_setLEDBoost
 11022 ;;		_setMode
 11023 ;;		_wireWriteDataByte
 11024 ;; This function is called by:
 11025 ;;		_main
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           
 11030                           ;psect for function _enableGestureSensor
 11031  0AA6                     _enableGestureSensor:	
 11032                           
 11033                           ;incstack = 0
 11034                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 11035                           ;enableGestureSensor@interrupts stored from wreg
 11036  0AA6  0020               	movlb	0	; select bank0
 11037  0AA7  00B1               	movwf	enableGestureSensor@interrupts
 11038                           
 11039                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 11040  0AA8  3192  22DF  318A   	fcall	_resetGestureParameters
 11041                           
 11042                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 11043  0AAB  30FF               	movlw	255
 11044  0AAC  0020               	movlb	0	; select bank0
 11045  0AAD  00B0               	movwf	??_enableGestureSensor
 11046  0AAE  0830               	movf	??_enableGestureSensor,w
 11047  0AAF  00A6               	movwf	wireWriteDataByte@val
 11048  0AB0  3083               	movlw	131
 11049  0AB1  3187  27E5  318A   	fcall	_wireWriteDataByte
 11050  0AB4  0020               	movlb	0	; select bank0
 11051  0AB5  0826               	movf	?_wireWriteDataByte,w
 11052  0AB6  0427               	iorwf	?_wireWriteDataByte+1,w
 11053  0AB7  1903               	btfsc	3,2
 11054  0AB8  0008               	return
 11055                           
 11056                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 11057  0AB9  3089               	movlw	137
 11058  0ABA  00B0               	movwf	??_enableGestureSensor
 11059  0ABB  0830               	movf	??_enableGestureSensor,w
 11060  0ABC  00A6               	movwf	wireWriteDataByte@val
 11061  0ABD  308E               	movlw	142
 11062  0ABE  3187  27E5  318A   	fcall	_wireWriteDataByte
 11063  0AC1  0020               	movlb	0	; select bank0
 11064  0AC2  0826               	movf	?_wireWriteDataByte,w
 11065  0AC3  0427               	iorwf	?_wireWriteDataByte+1,w
 11066  0AC4  1903               	btfsc	3,2
 11067  0AC5  0008               	return
 11068                           
 11069                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 11070  0AC6  3003               	movlw	3
 11071  0AC7  3196  260C  318A   	fcall	_setLEDBoost
 11072  0ACA  3A00               	xorlw	0
 11073  0ACB  1903               	btfsc	3,2
 11074  0ACC  0008               	return
 11075                           
 11076                           ;APDS9960.c: 428:     if( interrupts ) {
 11077  0ACD  0020               	movlb	0	; select bank0
 11078  0ACE  0831               	movf	enableGestureSensor@interrupts,w
 11079  0ACF  1903               	btfsc	3,2
 11080  0AD0  2AD3               	goto	l8157
 11081                           
 11082                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 11083  0AD1  3001               	movlw	1
 11084  0AD2  2AD4               	goto	L8
 11085  0AD3                     l8157:	
 11086                           
 11087                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 11088  0AD3  3000               	movlw	0
 11089  0AD4                     L8:	
 11090  0AD4  3195  25B0  318A   	fcall	_setGestureIntEnable
 11091  0AD7  3A00               	xorlw	0
 11092  0AD8  1903               	btfsc	3,2
 11093  0AD9  0008               	return
 11094                           
 11095                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 11096  0ADA  3001               	movlw	1
 11097  0ADB  3194  2497  318A   	fcall	_setGestureMode
 11098  0ADE  3A00               	xorlw	0
 11099  0ADF  1903               	btfsc	3,2
 11100  0AE0  0008               	return
 11101                           
 11102                           ;APDS9960.c: 440:     if( !enablePower() ){
 11103  0AE1  3192  2226  318A   	fcall	_enablePower
 11104  0AE4  3A00               	xorlw	0
 11105  0AE5  1903               	btfsc	3,2
 11106  0AE6  0008               	return
 11107                           
 11108                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 11109  0AE7  0020               	movlb	0	; select bank0
 11110  0AE8  01AB               	clrf	setMode@enable
 11111  0AE9  0AAB               	incf	setMode@enable,f
 11112  0AEA  3003               	movlw	3
 11113  0AEB  3189  210E  318A   	fcall	_setMode
 11114  0AEE  3A00               	xorlw	0
 11115  0AEF  1903               	btfsc	3,2
 11116  0AF0  0008               	return
 11117                           
 11118                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 11119  0AF1  0020               	movlb	0	; select bank0
 11120  0AF2  01AB               	clrf	setMode@enable
 11121  0AF3  0AAB               	incf	setMode@enable,f
 11122  0AF4  3002               	movlw	2
 11123  0AF5  3189  210E  318A   	fcall	_setMode
 11124  0AF8  3A00               	xorlw	0
 11125  0AF9  1903               	btfsc	3,2
 11126  0AFA  0008               	return
 11127                           
 11128                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 11129  0AFB  0020               	movlb	0	; select bank0
 11130  0AFC  01AB               	clrf	setMode@enable
 11131  0AFD  0AAB               	incf	setMode@enable,f
 11132  0AFE  3006               	movlw	6
 11133  0AFF  3189  210E         	fcall	_setMode
 11134  0B01  0008               	return
 11135  0B02                     __end_of_enableGestureSensor:	
 11136                           
 11137                           	psect	text24
 11138  160C                     __ptext24:	
 11139 ;; *************** function _setLEDBoost *****************
 11140 ;; Defined at:
 11141 ;;		line 484 in file "APDS9960.c"
 11142 ;; Parameters:    Size  Location     Type
 11143 ;;  boost           1    wreg     unsigned char 
 11144 ;; Auto vars:     Size  Location     Type
 11145 ;;  boost           1   13[BANK0 ] unsigned char 
 11146 ;;  val             1   12[BANK0 ] unsigned char 
 11147 ;; Return value:  Size  Location     Type
 11148 ;;                  1    wreg      _Bool 
 11149 ;; Registers used:
 11150 ;;		wreg, status,2, status,0, pclath, cstack
 11151 ;; Tracked objects:
 11152 ;;		On entry : 0/0
 11153 ;;		On exit  : 0/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;Total ram usage:        4 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; Hardware stack levels required when called:    8
 11163 ;; This function calls:
 11164 ;;		_wireReadDataByte
 11165 ;;		_wireWriteDataByte
 11166 ;; This function is called by:
 11167 ;;		_enableGestureSensor
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function _setLEDBoost
 11173  160C                     _setLEDBoost:	
 11174                           
 11175                           ;incstack = 0
 11176                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 11177                           ;setLEDBoost@boost stored from wreg
 11178  160C  0020               	movlb	0	; select bank0
 11179  160D  00AD               	movwf	setLEDBoost@boost
 11180                           
 11181                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 11182  160E  3090               	movlw	144
 11183  160F  3194  2427  3196   	fcall	_wireReadDataByte
 11184  1612  0020               	movlb	0	; select bank0
 11185  1613  00AA               	movwf	??_setLEDBoost
 11186  1614  082A               	movf	??_setLEDBoost,w
 11187  1615  00AC               	movwf	setLEDBoost@val
 11188                           
 11189                           ;APDS9960.c: 492:     boost &= 0b00000011;
 11190  1616  3003               	movlw	3
 11191  1617  00AA               	movwf	??_setLEDBoost
 11192  1618  082A               	movf	??_setLEDBoost,w
 11193  1619  05AD               	andwf	setLEDBoost@boost,f
 11194                           
 11195                           ;APDS9960.c: 493:     boost = boost << 4;
 11196  161A  082D               	movf	setLEDBoost@boost,w
 11197  161B  00AA               	movwf	??_setLEDBoost
 11198  161C  3003               	movlw	3
 11199  161D                     u7725:	
 11200  161D  35AA               	lslf	??_setLEDBoost,f
 11201  161E  3EFF               	addlw	-1
 11202  161F  1D03               	skipz
 11203  1620  2E1D               	goto	u7725
 11204  1621  352A               	lslf	??_setLEDBoost,w
 11205  1622  00AB               	movwf	??_setLEDBoost+1
 11206  1623  082B               	movf	??_setLEDBoost+1,w
 11207  1624  00AD               	movwf	setLEDBoost@boost
 11208                           
 11209                           ;APDS9960.c: 494:     val &= 0b11001111;
 11210  1625  30CF               	movlw	207
 11211  1626  00AA               	movwf	??_setLEDBoost
 11212  1627  082A               	movf	??_setLEDBoost,w
 11213  1628  05AC               	andwf	setLEDBoost@val,f
 11214                           
 11215                           ;APDS9960.c: 495:     val |= boost;
 11216  1629  082D               	movf	setLEDBoost@boost,w
 11217  162A  00AA               	movwf	??_setLEDBoost
 11218  162B  082A               	movf	??_setLEDBoost,w
 11219  162C  04AC               	iorwf	setLEDBoost@val,f
 11220                           
 11221                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 11222  162D  082C               	movf	setLEDBoost@val,w
 11223  162E  00AA               	movwf	??_setLEDBoost
 11224  162F  082A               	movf	??_setLEDBoost,w
 11225  1630  00A6               	movwf	wireWriteDataByte@val
 11226  1631  3090               	movlw	144
 11227  1632  3187  27E5  3196   	fcall	_wireWriteDataByte
 11228  1635  0020               	movlb	0	; select bank0
 11229  1636  0826               	movf	?_wireWriteDataByte,w
 11230  1637  0427               	iorwf	?_wireWriteDataByte+1,w
 11231  1638  1D03               	btfss	3,2
 11232  1639  2E3C               	goto	l7935
 11233                           
 11234                           ;APDS9960.c: 499:         return 0;
 11235  163A  3000               	movlw	0
 11236  163B  0008               	return
 11237  163C                     l7935:	
 11238                           
 11239                           ;APDS9960.c: 502:     return 1;
 11240  163C  3001               	movlw	1
 11241  163D  0008               	return
 11242  163E                     __end_of_setLEDBoost:	
 11243                           
 11244                           	psect	text25
 11245  1497                     __ptext25:	
 11246 ;; *************** function _setGestureMode *****************
 11247 ;; Defined at:
 11248 ;;		line 506 in file "APDS9960.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;  mode            1    wreg     unsigned char 
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  mode            1   11[BANK0 ] unsigned char 
 11253 ;;  val             1   12[BANK0 ] unsigned char 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  1    wreg      _Bool 
 11256 ;; Registers used:
 11257 ;;		wreg, status,2, status,0, pclath, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;Total ram usage:        3 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    8
 11270 ;; This function calls:
 11271 ;;		_wireReadDataByte
 11272 ;;		_wireWriteDataByte
 11273 ;; This function is called by:
 11274 ;;		_enableGestureSensor
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           
 11279                           ;psect for function _setGestureMode
 11280  1497                     _setGestureMode:	
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 11284                           ;setGestureMode@mode stored from wreg
 11285  1497  0020               	movlb	0	; select bank0
 11286  1498  00AB               	movwf	setGestureMode@mode
 11287                           
 11288                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 11289  1499  30AB               	movlw	171
 11290  149A  3194  2427  3194   	fcall	_wireReadDataByte
 11291  149D  0020               	movlb	0	; select bank0
 11292  149E  00AA               	movwf	??_setGestureMode
 11293  149F  082A               	movf	??_setGestureMode,w
 11294  14A0  00AC               	movwf	setGestureMode@val
 11295                           
 11296                           ;APDS9960.c: 514:     mode &= 0b00000001;
 11297  14A1  3001               	movlw	1
 11298  14A2  00AA               	movwf	??_setGestureMode
 11299  14A3  082A               	movf	??_setGestureMode,w
 11300  14A4  05AB               	andwf	setGestureMode@mode,f
 11301                           
 11302                           ;APDS9960.c: 515:     val &= 0b11111110;
 11303  14A5  30FE               	movlw	254
 11304  14A6  00AA               	movwf	??_setGestureMode
 11305  14A7  082A               	movf	??_setGestureMode,w
 11306  14A8  05AC               	andwf	setGestureMode@val,f
 11307                           
 11308                           ;APDS9960.c: 516:     val |= mode;
 11309  14A9  082B               	movf	setGestureMode@mode,w
 11310  14AA  00AA               	movwf	??_setGestureMode
 11311  14AB  082A               	movf	??_setGestureMode,w
 11312  14AC  04AC               	iorwf	setGestureMode@val,f
 11313                           
 11314                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 11315  14AD  082C               	movf	setGestureMode@val,w
 11316  14AE  00AA               	movwf	??_setGestureMode
 11317  14AF  082A               	movf	??_setGestureMode,w
 11318  14B0  00A6               	movwf	wireWriteDataByte@val
 11319  14B1  30AB               	movlw	171
 11320  14B2  3187  27E5  3194   	fcall	_wireWriteDataByte
 11321  14B5  0020               	movlb	0	; select bank0
 11322  14B6  0826               	movf	?_wireWriteDataByte,w
 11323  14B7  0427               	iorwf	?_wireWriteDataByte+1,w
 11324  14B8  1D03               	btfss	3,2
 11325  14B9  2CBC               	goto	l7953
 11326                           
 11327                           ;APDS9960.c: 520:         return 0;
 11328  14BA  3000               	movlw	0
 11329  14BB  0008               	return
 11330  14BC                     l7953:	
 11331                           
 11332                           ;APDS9960.c: 523:     return 1;
 11333  14BC  3001               	movlw	1
 11334  14BD  0008               	return
 11335  14BE                     __end_of_setGestureMode:	
 11336                           
 11337                           	psect	text26
 11338  15B0                     __ptext26:	
 11339 ;; *************** function _setGestureIntEnable *****************
 11340 ;; Defined at:
 11341 ;;		line 387 in file "APDS9960.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;  enable          1    wreg     unsigned char 
 11344 ;; Auto vars:     Size  Location     Type
 11345 ;;  enable          1   12[BANK0 ] unsigned char 
 11346 ;;  val             1   11[BANK0 ] unsigned char 
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      _Bool 
 11349 ;; Registers used:
 11350 ;;		wreg, status,2, status,0, pclath, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;Total ram usage:        3 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    8
 11363 ;; This function calls:
 11364 ;;		_wireReadDataByte
 11365 ;;		_wireWriteDataByte
 11366 ;; This function is called by:
 11367 ;;		_initialize
 11368 ;;		_enableGestureSensor
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           
 11373                           ;psect for function _setGestureIntEnable
 11374  15B0                     _setGestureIntEnable:	
 11375                           
 11376                           ;incstack = 0
 11377                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 11378                           ;setGestureIntEnable@enable stored from wreg
 11379  15B0  0020               	movlb	0	; select bank0
 11380  15B1  00AC               	movwf	setGestureIntEnable@enable
 11381                           
 11382                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 11383  15B2  30AB               	movlw	171
 11384  15B3  3194  2427  3195   	fcall	_wireReadDataByte
 11385  15B6  0020               	movlb	0	; select bank0
 11386  15B7  00AA               	movwf	??_setGestureIntEnable
 11387  15B8  082A               	movf	??_setGestureIntEnable,w
 11388  15B9  00AB               	movwf	setGestureIntEnable@val
 11389                           
 11390                           ;APDS9960.c: 395:     enable &= 0b00000001;
 11391  15BA  3001               	movlw	1
 11392  15BB  00AA               	movwf	??_setGestureIntEnable
 11393  15BC  082A               	movf	??_setGestureIntEnable,w
 11394  15BD  05AC               	andwf	setGestureIntEnable@enable,f
 11395                           
 11396                           ;APDS9960.c: 396:     enable = enable << 1;
 11397  15BE  352C               	lslf	setGestureIntEnable@enable,w
 11398  15BF  00AA               	movwf	??_setGestureIntEnable
 11399  15C0  082A               	movf	??_setGestureIntEnable,w
 11400  15C1  00AC               	movwf	setGestureIntEnable@enable
 11401                           
 11402                           ;APDS9960.c: 397:     val &= 0b11111101;
 11403  15C2  30FD               	movlw	253
 11404  15C3  00AA               	movwf	??_setGestureIntEnable
 11405  15C4  082A               	movf	??_setGestureIntEnable,w
 11406  15C5  05AB               	andwf	setGestureIntEnable@val,f
 11407                           
 11408                           ;APDS9960.c: 398:     val |= enable;
 11409  15C6  082C               	movf	setGestureIntEnable@enable,w
 11410  15C7  00AA               	movwf	??_setGestureIntEnable
 11411  15C8  082A               	movf	??_setGestureIntEnable,w
 11412  15C9  04AB               	iorwf	setGestureIntEnable@val,f
 11413                           
 11414                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 11415  15CA  082B               	movf	setGestureIntEnable@val,w
 11416  15CB  00AA               	movwf	??_setGestureIntEnable
 11417  15CC  082A               	movf	??_setGestureIntEnable,w
 11418  15CD  00A6               	movwf	wireWriteDataByte@val
 11419  15CE  30AB               	movlw	171
 11420  15CF  3187  27E5  3195   	fcall	_wireWriteDataByte
 11421  15D2  0020               	movlb	0	; select bank0
 11422  15D3  0826               	movf	?_wireWriteDataByte,w
 11423  15D4  0427               	iorwf	?_wireWriteDataByte+1,w
 11424  15D5  1D03               	btfss	3,2
 11425  15D6  2DD9               	goto	l7917
 11426                           
 11427                           ;APDS9960.c: 402:         return 0;
 11428  15D7  3000               	movlw	0
 11429  15D8  0008               	return
 11430  15D9                     l7917:	
 11431                           
 11432                           ;APDS9960.c: 405:     return 1;
 11433  15D9  3001               	movlw	1
 11434  15DA  0008               	return
 11435  15DB                     __end_of_setGestureIntEnable:	
 11436                           
 11437                           	psect	text27
 11438  12DF                     __ptext27:	
 11439 ;; *************** function _resetGestureParameters *****************
 11440 ;; Defined at:
 11441 ;;		line 457 in file "APDS9960.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;		None
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;		None
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      void 
 11448 ;; Registers used:
 11449 ;;		status,2
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;Total ram usage:        0 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    5
 11462 ;; This function calls:
 11463 ;;		Nothing
 11464 ;; This function is called by:
 11465 ;;		_enableGestureSensor
 11466 ;;		_readGesture
 11467 ;; This function uses a non-reentrant model
 11468 ;;
 11469                           
 11470                           
 11471                           ;psect for function _resetGestureParameters
 11472  12DF                     _resetGestureParameters:	
 11473                           
 11474                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 11475                           
 11476                           ;incstack = 0
 11477                           ; Regs used in _resetGestureParameters: [status,2]
 11478  12DF  0024               	movlb	4	; select bank4
 11479  12E0  01E0               	clrf	(_gesture_data_^(0+512)+64)
 11480                           
 11481                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 11482  12E1  01E1               	clrf	(_gesture_data_^(0+512)+65)
 11483                           
 11484                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 11485  12E2  01F2               	clrf	_gesture_ud_delta_
 11486  12E3  01F3               	clrf	_gesture_ud_delta_+1
 11487                           
 11488                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 11489  12E4  01F0               	clrf	_gesture_lr_delta_
 11490  12E5  01F1               	clrf	_gesture_lr_delta_+1
 11491                           
 11492                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 11493  12E6  0021               	movlb	1	; select bank1
 11494  12E7  01EA               	clrf	_gesture_ud_count_^(0+128)
 11495  12E8  01EB               	clrf	(_gesture_ud_count_+1)^(0+128)
 11496                           
 11497                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 11498  12E9  01E8               	clrf	_gesture_lr_count_^(0+128)
 11499  12EA  01E9               	clrf	(_gesture_lr_count_+1)^(0+128)
 11500                           
 11501                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 11502  12EB  0022               	movlb	2	; select bank2
 11503  12EC  01E6               	clrf	_gesture_near_count_^(0+256)
 11504  12ED  01E7               	clrf	(_gesture_near_count_+1)^(0+256)
 11505                           
 11506                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 11507  12EE  0023               	movlb	3	; select bank3
 11508  12EF  01DD               	clrf	_gesture_far_count_^(0+384)
 11509  12F0  01DE               	clrf	(_gesture_far_count_+1)^(0+384)
 11510                           
 11511                           ;APDS9960.c: 472:     gesture_state_ = 0;
 11512  12F1  01DB               	clrf	_gesture_state_^(0+384)
 11513  12F2  01DC               	clrf	(_gesture_state_+1)^(0+384)
 11514                           
 11515                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 11516  12F3  01D9               	clrf	_gesture_motion_^(0+384)
 11517  12F4  01DA               	clrf	(_gesture_motion_+1)^(0+384)
 11518  12F5  0008               	return
 11519  12F6                     __end_of_resetGestureParameters:	
 11520                           
 11521                           	psect	text28
 11522  1226                     __ptext28:	
 11523 ;; *************** function _enablePower *****************
 11524 ;; Defined at:
 11525 ;;		line 527 in file "APDS9960.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      _Bool 
 11532 ;; Registers used:
 11533 ;;		wreg, status,2, status,0, pclath, cstack
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;Total ram usage:        0 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; Hardware stack levels required when called:   10
 11546 ;; This function calls:
 11547 ;;		_setMode
 11548 ;; This function is called by:
 11549 ;;		_enableGestureSensor
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           
 11554                           ;psect for function _enablePower
 11555  1226                     _enablePower:	
 11556                           
 11557                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 11558                           
 11559                           ;incstack = 0
 11560                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 11561  1226  0020               	movlb	0	; select bank0
 11562  1227  01AB               	clrf	setMode@enable
 11563  1228  0AAB               	incf	setMode@enable,f
 11564  1229  3000               	movlw	0
 11565  122A  3189  210E  3192   	fcall	_setMode
 11566  122D  3A00               	xorlw	0
 11567  122E  1D03               	skipz
 11568  122F  2A32               	goto	l7963
 11569                           
 11570                           ;APDS9960.c: 530:         return 0;
 11571  1230  3000               	movlw	0
 11572  1231  0008               	return
 11573  1232                     l7963:	
 11574                           
 11575                           ;APDS9960.c: 533:     return 1;
 11576  1232  3001               	movlw	1
 11577  1233  0008               	return
 11578  1234                     __end_of_enablePower:	
 11579                           
 11580                           	psect	text29
 11581  090E                     __ptext29:	
 11582 ;; *************** function _setMode *****************
 11583 ;; Defined at:
 11584 ;;		line 124 in file "APDS9960.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;  mode            1    wreg     unsigned char 
 11587 ;;  enable          1   11[BANK0 ] unsigned char 
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;  mode            1   15[BANK0 ] unsigned char 
 11590 ;;  reg_val         1   14[BANK0 ] unsigned char 
 11591 ;; Return value:  Size  Location     Type
 11592 ;;                  1    wreg      _Bool 
 11593 ;; Registers used:
 11594 ;;		wreg, status,2, status,0, pclath, cstack
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11600 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;Total ram usage:        5 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; Hardware stack levels required when called:    9
 11607 ;; This function calls:
 11608 ;;		_getMode
 11609 ;;		_wireWriteDataByte
 11610 ;; This function is called by:
 11611 ;;		_initialize
 11612 ;;		_enableGestureSensor
 11613 ;;		_enablePower
 11614 ;; This function uses a non-reentrant model
 11615 ;;
 11616                           
 11617                           
 11618                           ;psect for function _setMode
 11619  090E                     _setMode:	
 11620                           
 11621                           ;incstack = 0
 11622                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 11623                           ;setMode@mode stored from wreg
 11624  090E  0020               	movlb	0	; select bank0
 11625  090F  00AF               	movwf	setMode@mode
 11626                           
 11627                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 11628  0910  3191  21F0  3189   	fcall	_getMode
 11629  0913  0020               	movlb	0	; select bank0
 11630  0914  00AC               	movwf	??_setMode
 11631  0915  082C               	movf	??_setMode,w
 11632  0916  00AE               	movwf	setMode@reg_val
 11633                           
 11634                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 11635  0917  0A2E               	incf	setMode@reg_val,w
 11636  0918  1D03               	btfss	3,2
 11637  0919  291C               	goto	l7149
 11638  091A                     l7145:	
 11639                           
 11640                           ;APDS9960.c: 131:         return 0;
 11641  091A  3000               	movlw	0
 11642  091B  0008               	return
 11643  091C                     l7149:	
 11644                           
 11645                           ;APDS9960.c: 135:     enable = enable & 0x01;
 11646  091C  082B               	movf	setMode@enable,w
 11647  091D  3901               	andlw	1
 11648  091E  00AC               	movwf	??_setMode
 11649  091F  082C               	movf	??_setMode,w
 11650  0920  00AB               	movwf	setMode@enable
 11651                           
 11652                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 11653  0921  3007               	movlw	7
 11654  0922  022F               	subwf	setMode@mode,w
 11655  0923  1803               	skipnc
 11656  0924  2941               	goto	l7159
 11657                           
 11658                           ;APDS9960.c: 137:         if (enable) {
 11659  0925  082B               	movf	setMode@enable,w
 11660  0926  1903               	btfsc	3,2
 11661  0927  2934               	goto	l7157
 11662                           
 11663                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 11664  0928  3001               	movlw	1
 11665  0929  00AC               	movwf	??_setMode
 11666  092A  0A2F               	incf	setMode@mode,w
 11667  092B  292D               	goto	u6624
 11668  092C                     u6625:	
 11669  092C  35AC               	lslf	??_setMode,f
 11670  092D                     u6624:	
 11671  092D  0B89               	decfsz	9,f
 11672  092E  292C               	goto	u6625
 11673  092F  082C               	movf	??_setMode,w
 11674  0930  00AD               	movwf	??_setMode+1
 11675  0931  082D               	movf	??_setMode+1,w
 11676  0932  04AE               	iorwf	setMode@reg_val,f
 11677                           
 11678                           ;APDS9960.c: 139:         } else {
 11679  0933  294E               	goto	l7167
 11680  0934                     l7157:	
 11681                           
 11682                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11683  0934  3001               	movlw	1
 11684  0935  00AC               	movwf	??_setMode
 11685  0936  0A2F               	incf	setMode@mode,w
 11686  0937  2939               	goto	u6634
 11687  0938                     u6635:	
 11688  0938  35AC               	lslf	??_setMode,f
 11689  0939                     u6634:	
 11690  0939  0B89               	decfsz	9,f
 11691  093A  2938               	goto	u6635
 11692  093B  082C               	movf	??_setMode,w
 11693  093C  3AFF               	xorlw	255
 11694  093D  00AD               	movwf	??_setMode+1
 11695  093E  082D               	movf	??_setMode+1,w
 11696  093F  05AE               	andwf	setMode@reg_val,f
 11697  0940  294E               	goto	l7167
 11698  0941                     l7159:	
 11699  0941  3007               	movlw	7
 11700  0942  062F               	xorwf	setMode@mode,w
 11701  0943  1D03               	btfss	3,2
 11702  0944  294E               	goto	l7167
 11703                           
 11704                           ;APDS9960.c: 143:         if (enable) {
 11705  0945  082B               	movf	setMode@enable,w
 11706  0946  1903               	btfsc	3,2
 11707  0947  294D               	goto	l7165
 11708                           
 11709                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11710  0948  307F               	movlw	127
 11711  0949  00AC               	movwf	??_setMode
 11712  094A  082C               	movf	??_setMode,w
 11713  094B  00AE               	movwf	setMode@reg_val
 11714                           
 11715                           ;APDS9960.c: 145:         } else {
 11716  094C  294E               	goto	l7167
 11717  094D                     l7165:	
 11718                           
 11719                           ;APDS9960.c: 146:             reg_val = 0x00;
 11720  094D  01AE               	clrf	setMode@reg_val
 11721  094E                     l7167:	
 11722                           
 11723                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11724  094E  082E               	movf	setMode@reg_val,w
 11725  094F  00AC               	movwf	??_setMode
 11726  0950  082C               	movf	??_setMode,w
 11727  0951  00A6               	movwf	wireWriteDataByte@val
 11728  0952  3080               	movlw	128
 11729  0953  3187  27E5  3189   	fcall	_wireWriteDataByte
 11730  0956  0020               	movlb	0	; select bank0
 11731  0957  0826               	movf	?_wireWriteDataByte,w
 11732  0958  0427               	iorwf	?_wireWriteDataByte+1,w
 11733  0959  1903               	btfsc	3,2
 11734  095A  291A               	goto	l7145
 11735                           
 11736                           ;APDS9960.c: 155:     return 1;
 11737  095B  3001               	movlw	1
 11738  095C  0008               	return
 11739  095D                     __end_of_setMode:	
 11740                           
 11741                           	psect	text30
 11742  07E5                     __ptext30:	
 11743 ;; *************** function _wireWriteDataByte *****************
 11744 ;; Defined at:
 11745 ;;		line 871 in file "APDS9960.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;  reg             1    wreg     unsigned char 
 11748 ;;  val             1    6[BANK0 ] unsigned char 
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;  reg             1    9[BANK0 ] unsigned char 
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  2    6[BANK0 ] int 
 11753 ;; Registers used:
 11754 ;;		wreg, status,2, status,0, pclath, cstack
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11760 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;Total ram usage:        4 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    7
 11767 ;; This function calls:
 11768 ;;		_I2C_Start
 11769 ;;		_I2C_Stop
 11770 ;;		_I2C_Write_Byte
 11771 ;; This function is called by:
 11772 ;;		_initialize
 11773 ;;		_setMode
 11774 ;;		_setLEDDrive
 11775 ;;		_setProximityGain
 11776 ;;		_setAmbientLightGain
 11777 ;;		_setProxIntLowThresh
 11778 ;;		_setProxIntHighThresh
 11779 ;;		_setLightIntLowThreshold
 11780 ;;		_setLightIntHighThreshold
 11781 ;;		_setGestureEnterThresh
 11782 ;;		_setGestureExitThresh
 11783 ;;		_setGestureGain
 11784 ;;		_setGestureLEDDrive
 11785 ;;		_setGestureWaitTime
 11786 ;;		_setGestureIntEnable
 11787 ;;		_enableGestureSensor
 11788 ;;		_setLEDBoost
 11789 ;;		_setGestureMode
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           
 11794                           ;psect for function _wireWriteDataByte
 11795  07E5                     _wireWriteDataByte:	
 11796                           
 11797                           ;incstack = 0
 11798                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11799                           ;wireWriteDataByte@reg stored from wreg
 11800  07E5  0020               	movlb	0	; select bank0
 11801  07E6  00A9               	movwf	wireWriteDataByte@reg
 11802                           
 11803                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11804  07E7  3191  2104  3187   	fcall	_I2C_Start
 11805                           
 11806                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11807  07EA  3072               	movlw	114
 11808  07EB  3193  2372  3187   	fcall	_I2C_Write_Byte
 11809                           
 11810                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11811  07EE  0020               	movlb	0	; select bank0
 11812  07EF  0829               	movf	wireWriteDataByte@reg,w
 11813  07F0  3193  2372  3187   	fcall	_I2C_Write_Byte
 11814                           
 11815                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11816  07F3  0020               	movlb	0	; select bank0
 11817  07F4  0826               	movf	wireWriteDataByte@val,w
 11818  07F5  3193  2372  3187   	fcall	_I2C_Write_Byte
 11819                           
 11820                           ;APDS9960.c: 886:     I2C_Stop();
 11821  07F8  3188  2000         	fcall	_I2C_Stop
 11822                           
 11823                           ;APDS9960.c: 889:     return 1;
 11824  07FA  3001               	movlw	1
 11825  07FB  0020               	movlb	0	; select bank0
 11826  07FC  00A6               	movwf	?_wireWriteDataByte
 11827  07FD  3000               	movlw	0
 11828  07FE  00A7               	movwf	?_wireWriteDataByte+1
 11829  07FF  0008               	return
 11830  0800                     __end_of_wireWriteDataByte:	
 11831                           
 11832                           	psect	text31
 11833  11F0                     __ptext31:	
 11834 ;; *************** function _getMode *****************
 11835 ;; Defined at:
 11836 ;;		line 159 in file "APDS9960.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;		None
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  1    wreg      unsigned char 
 11843 ;; Registers used:
 11844 ;;		wreg, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;Total ram usage:        2 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    8
 11857 ;; This function calls:
 11858 ;;		_wireReadDataByte
 11859 ;; This function is called by:
 11860 ;;		_setMode
 11861 ;;		_readGesture
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function _getMode
 11867  11F0                     _getMode:	
 11868                           
 11869                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11870                           
 11871                           ;incstack = 0
 11872                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11873  11F0  3080               	movlw	128
 11874  11F1  3194  2427         	fcall	_wireReadDataByte
 11875  11F3  0020               	movlb	0	; select bank0
 11876  11F4  00A9               	movwf	??_getMode
 11877  11F5  0829               	movf	??_getMode,w
 11878  11F6  00AA               	movwf	getMode@enable_value
 11879                           
 11880                           ;APDS9960.c: 166:     return enable_value;
 11881  11F7  082A               	movf	getMode@enable_value,w
 11882  11F8  0008               	return
 11883  11F9                     __end_of_getMode:	
 11884                           
 11885                           	psect	text32
 11886  1427                     __ptext32:	
 11887 ;; *************** function _wireReadDataByte *****************
 11888 ;; Defined at:
 11889 ;;		line 893 in file "APDS9960.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;  reg             1    wreg     unsigned char 
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;  reg             1    7[BANK0 ] unsigned char 
 11894 ;;  val             1    8[BANK0 ] unsigned char 
 11895 ;; Return value:  Size  Location     Type
 11896 ;;                  1    wreg      unsigned char 
 11897 ;; Registers used:
 11898 ;;		wreg, status,2, status,0, pclath, cstack
 11899 ;; Tracked objects:
 11900 ;;		On entry : 0/0
 11901 ;;		On exit  : 0/0
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;Total ram usage:        3 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    7
 11911 ;; This function calls:
 11912 ;;		_I2C_ReStart
 11913 ;;		_I2C_Read_Byte
 11914 ;;		_I2C_Send_NACK
 11915 ;;		_I2C_Start
 11916 ;;		_I2C_Stop
 11917 ;;		_I2C_Write_Byte
 11918 ;; This function is called by:
 11919 ;;		_initialize
 11920 ;;		_getMode
 11921 ;;		_setLEDDrive
 11922 ;;		_setProximityGain
 11923 ;;		_setAmbientLightGain
 11924 ;;		_setGestureGain
 11925 ;;		_setGestureLEDDrive
 11926 ;;		_setGestureWaitTime
 11927 ;;		_setGestureIntEnable
 11928 ;;		_setLEDBoost
 11929 ;;		_setGestureMode
 11930 ;;		_isGestureAvailable
 11931 ;;		_readGesture
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           
 11936                           ;psect for function _wireReadDataByte
 11937  1427                     _wireReadDataByte:	
 11938                           
 11939                           ;incstack = 0
 11940                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11941                           ;wireReadDataByte@reg stored from wreg
 11942  1427  0020               	movlb	0	; select bank0
 11943  1428  00A7               	movwf	wireReadDataByte@reg
 11944                           
 11945                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11946  1429  3191  2104  3194   	fcall	_I2C_Start
 11947                           
 11948                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11949  142C  3072               	movlw	114
 11950  142D  3193  2372  3194   	fcall	_I2C_Write_Byte
 11951                           
 11952                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11953  1430  0020               	movlb	0	; select bank0
 11954  1431  0827               	movf	wireReadDataByte@reg,w
 11955  1432  3193  2372  3194   	fcall	_I2C_Write_Byte
 11956                           
 11957                           ;APDS9960.c: 912:     I2C_ReStart();
 11958  1435  3190  20F5  3194   	fcall	_I2C_ReStart
 11959                           
 11960                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11961  1438  3073               	movlw	115
 11962  1439  3193  2372  3194   	fcall	_I2C_Write_Byte
 11963                           
 11964                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11965  143C  3192  2203  3194   	fcall	_I2C_Read_Byte
 11966  143F  0020               	movlb	0	; select bank0
 11967  1440  00A6               	movwf	??_wireReadDataByte
 11968  1441  0826               	movf	??_wireReadDataByte,w
 11969  1442  00A8               	movwf	wireReadDataByte@val
 11970                           
 11971                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11972  1443  3190  20FE  3194   	fcall	_I2C_Send_NACK
 11973                           
 11974                           ;APDS9960.c: 917:     I2C_Stop();
 11975  1446  3188  2000         	fcall	_I2C_Stop
 11976                           
 11977                           ;APDS9960.c: 919:     return val;
 11978  1448  0020               	movlb	0	; select bank0
 11979  1449  0828               	movf	wireReadDataByte@val,w
 11980  144A  0008               	return
 11981  144B                     __end_of_wireReadDataByte:	
 11982                           
 11983                           	psect	text33
 11984  1372                     __ptext33:	
 11985 ;; *************** function _I2C_Write_Byte *****************
 11986 ;; Defined at:
 11987 ;;		line 75 in file "i2c.c"
 11988 ;; Parameters:    Size  Location     Type
 11989 ;;  Byte            1    wreg     unsigned char 
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  Byte            1    3[BANK0 ] unsigned char 
 11992 ;;  count           2    4[BANK0 ] unsigned int 
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  1    wreg      void 
 11995 ;; Registers used:
 11996 ;;		wreg, status,2, status,0, pclath, cstack
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;Total ram usage:        5 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    6
 12009 ;; This function calls:
 12010 ;;		_i2c1_driver_TXData
 12011 ;; This function is called by:
 12012 ;;		_wireReadDataBlock
 12013 ;;		_wireWriteDataByte
 12014 ;;		_wireReadDataByte
 12015 ;; This function uses a non-reentrant model
 12016 ;;
 12017                           
 12018                           
 12019                           ;psect for function _I2C_Write_Byte
 12020  1372                     _I2C_Write_Byte:	
 12021                           
 12022                           ;incstack = 0
 12023                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 12024                           ;I2C_Write_Byte@Byte stored from wreg
 12025  1372  0020               	movlb	0	; select bank0
 12026  1373  00A3               	movwf	I2C_Write_Byte@Byte
 12027                           
 12028                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 12029  1374  0823               	movf	I2C_Write_Byte@Byte,w
 12030  1375  3191  2154  3193   	fcall	_i2c1_driver_TXData
 12031                           
 12032                           ;i2c.c: 83:     unsigned int count = 0;
 12033  1378  0020               	movlb	0	; select bank0
 12034  1379  01A4               	clrf	I2C_Write_Byte@count
 12035  137A  01A5               	clrf	I2C_Write_Byte@count+1
 12036  137B                     l1440:	
 12037                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 12038                           
 12039  137B  0024               	movlb	4	; select bank4
 12040  137C  1B16               	btfsc	22,6	;volatile
 12041  137D  2B7B               	goto	l1440
 12042  137E                     l6837:	
 12043  137E  0020               	movlb	0	; select bank0
 12044  137F  0825               	movf	I2C_Write_Byte@count+1,w
 12045  1380  00A2               	movwf	??_I2C_Write_Byte+1
 12046  1381  0824               	movf	I2C_Write_Byte@count,w
 12047  1382  00A1               	movwf	??_I2C_Write_Byte
 12048  1383  0AA4               	incf	I2C_Write_Byte@count,f
 12049  1384  1903               	skipnz
 12050  1385  0AA5               	incf	I2C_Write_Byte@count+1,f
 12051  1386  3000               	movlw	0
 12052  1387  0222               	subwf	??_I2C_Write_Byte+1,w
 12053  1388  3005               	movlw	5
 12054  1389  1903               	skipnz
 12055  138A  0221               	subwf	??_I2C_Write_Byte,w
 12056  138B  1803               	btfsc	3,0
 12057  138C  0008               	return
 12058  138D  2B7E               	goto	l6837
 12059  138E                     __end_of_I2C_Write_Byte:	
 12060                           
 12061                           	psect	text34
 12062  1154                     __ptext34:	
 12063 ;; *************** function _i2c1_driver_TXData *****************
 12064 ;; Defined at:
 12065 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 12066 ;; Parameters:    Size  Location     Type
 12067 ;;  d               1    wreg     unsigned char 
 12068 ;; Auto vars:     Size  Location     Type
 12069 ;;  d               1    0[BANK0 ] unsigned char 
 12070 ;; Return value:  Size  Location     Type
 12071 ;;                  1    wreg      void 
 12072 ;; Registers used:
 12073 ;;		wreg
 12074 ;; Tracked objects:
 12075 ;;		On entry : 0/0
 12076 ;;		On exit  : 0/0
 12077 ;;		Unchanged: 0/0
 12078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;Total ram usage:        1 bytes
 12084 ;; Hardware stack levels used:    1
 12085 ;; Hardware stack levels required when called:    5
 12086 ;; This function calls:
 12087 ;;		Nothing
 12088 ;; This function is called by:
 12089 ;;		_I2C_Write_Byte
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           
 12094                           ;psect for function _i2c1_driver_TXData
 12095  1154                     _i2c1_driver_TXData:	
 12096                           
 12097                           ;incstack = 0
 12098                           ; Regs used in _i2c1_driver_TXData: [wreg]
 12099                           ;i2c1_driver_TXData@d stored from wreg
 12100  1154  0020               	movlb	0	; select bank0
 12101  1155  00A0               	movwf	i2c1_driver_TXData@d
 12102                           
 12103                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 12104  1156  0820               	movf	i2c1_driver_TXData@d,w
 12105  1157  0024               	movlb	4	; select bank4
 12106  1158  0091               	movwf	17	;volatile
 12107  1159  0008               	return
 12108  115A                     __end_of_i2c1_driver_TXData:	
 12109                           
 12110                           	psect	text35
 12111  0800                     __ptext35:	
 12112 ;; *************** function _I2C_Stop *****************
 12113 ;; Defined at:
 12114 ;;		line 50 in file "i2c.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      void 
 12121 ;; Registers used:
 12122 ;;		status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        0 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    6
 12135 ;; This function calls:
 12136 ;;		_i2c1_driver_stop
 12137 ;; This function is called by:
 12138 ;;		_wireReadDataBlock
 12139 ;;		_wireWriteDataByte
 12140 ;;		_wireReadDataByte
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           
 12145                           ;psect for function _I2C_Stop
 12146  0800                     _I2C_Stop:	
 12147                           
 12148                           ;i2c.c: 52:  i2c1_driver_stop();
 12149                           
 12150                           ;incstack = 0
 12151                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 12152  0800  3191  2107         	fcall	_i2c1_driver_stop
 12153  0802  0008               	return
 12154  0803                     __end_of_I2C_Stop:	
 12155                           
 12156                           	psect	text36
 12157  1107                     __ptext36:	
 12158 ;; *************** function _i2c1_driver_stop *****************
 12159 ;; Defined at:
 12160 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;		None
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;		None
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  1    wreg      void 
 12167 ;; Registers used:
 12168 ;;		None
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;Total ram usage:        0 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:    5
 12181 ;; This function calls:
 12182 ;;		Nothing
 12183 ;; This function is called by:
 12184 ;;		_I2C_Stop
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           
 12189                           ;psect for function _i2c1_driver_stop
 12190  1107                     _i2c1_driver_stop:	
 12191                           
 12192                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 12193                           
 12194                           ;incstack = 0
 12195                           ; Regs used in _i2c1_driver_stop: []
 12196  1107  0024               	movlb	4	; select bank4
 12197  1108  1516               	bsf	22,2	;volatile
 12198  1109  0008               	return
 12199  110A                     __end_of_i2c1_driver_stop:	
 12200                           
 12201                           	psect	text37
 12202  1104                     __ptext37:	
 12203 ;; *************** function _I2C_Start *****************
 12204 ;; Defined at:
 12205 ;;		line 35 in file "i2c.c"
 12206 ;; Parameters:    Size  Location     Type
 12207 ;;		None
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;		None
 12210 ;; Return value:  Size  Location     Type
 12211 ;;                  1    wreg      void 
 12212 ;; Registers used:
 12213 ;;		status,2, status,0, pclath, cstack
 12214 ;; Tracked objects:
 12215 ;;		On entry : 0/0
 12216 ;;		On exit  : 0/0
 12217 ;;		Unchanged: 0/0
 12218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;Total ram usage:        0 bytes
 12224 ;; Hardware stack levels used:    1
 12225 ;; Hardware stack levels required when called:    6
 12226 ;; This function calls:
 12227 ;;		_i2c1_driver_start
 12228 ;; This function is called by:
 12229 ;;		_wireReadDataBlock
 12230 ;;		_wireWriteDataByte
 12231 ;;		_wireReadDataByte
 12232 ;; This function uses a non-reentrant model
 12233 ;;
 12234                           
 12235                           
 12236                           ;psect for function _I2C_Start
 12237  1104                     _I2C_Start:	
 12238                           
 12239                           ;i2c.c: 37:  i2c1_driver_start();
 12240                           
 12241                           ;incstack = 0
 12242                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 12243  1104  3191  2101         	fcall	_i2c1_driver_start
 12244  1106  0008               	return
 12245  1107                     __end_of_I2C_Start:	
 12246                           
 12247                           	psect	text38
 12248  1101                     __ptext38:	
 12249 ;; *************** function _i2c1_driver_start *****************
 12250 ;; Defined at:
 12251 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;		None
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;		None
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  1    wreg      void 
 12258 ;; Registers used:
 12259 ;;		None
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;Total ram usage:        0 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    5
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_I2C_Start
 12276 ;;		_i2c_masterOperation
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           
 12281                           ;psect for function _i2c1_driver_start
 12282  1101                     _i2c1_driver_start:	
 12283                           
 12284                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 12285                           
 12286                           ;incstack = 0
 12287                           ; Regs used in _i2c1_driver_start: []
 12288  1101  0024               	movlb	4	; select bank4
 12289  1102  1416               	bsf	22,0	;volatile
 12290  1103  0008               	return
 12291  1104                     __end_of_i2c1_driver_start:	
 12292                           
 12293                           	psect	text39
 12294  10FE                     __ptext39:	
 12295 ;; *************** function _I2C_Send_NACK *****************
 12296 ;; Defined at:
 12297 ;;		line 66 in file "i2c.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;		None
 12300 ;; Auto vars:     Size  Location     Type
 12301 ;;		None
 12302 ;; Return value:  Size  Location     Type
 12303 ;;                  1    wreg      void 
 12304 ;; Registers used:
 12305 ;;		status,2, status,0, pclath, cstack
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/0
 12308 ;;		On exit  : 0/0
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;Total ram usage:        0 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    6
 12318 ;; This function calls:
 12319 ;;		_i2c1_driver_sendNACK
 12320 ;; This function is called by:
 12321 ;;		_wireReadDataBlock
 12322 ;;		_wireReadDataByte
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           
 12327                           ;psect for function _I2C_Send_NACK
 12328  10FE                     _I2C_Send_NACK:	
 12329                           
 12330                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 12331                           
 12332                           ;incstack = 0
 12333                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 12334  10FE  3191  213A         	fcall	_i2c1_driver_sendNACK
 12335  1100  0008               	return
 12336  1101                     __end_of_I2C_Send_NACK:	
 12337                           
 12338                           	psect	text40
 12339  113A                     __ptext40:	
 12340 ;; *************** function _i2c1_driver_sendNACK *****************
 12341 ;; Defined at:
 12342 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;		None
 12345 ;; Auto vars:     Size  Location     Type
 12346 ;;		None
 12347 ;; Return value:  Size  Location     Type
 12348 ;;                  1    wreg      void 
 12349 ;; Registers used:
 12350 ;;		None
 12351 ;; Tracked objects:
 12352 ;;		On entry : 0/0
 12353 ;;		On exit  : 0/0
 12354 ;;		Unchanged: 0/0
 12355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;Total ram usage:        0 bytes
 12361 ;; Hardware stack levels used:    1
 12362 ;; Hardware stack levels required when called:    5
 12363 ;; This function calls:
 12364 ;;		Nothing
 12365 ;; This function is called by:
 12366 ;;		_I2C_Send_NACK
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           
 12371                           ;psect for function _i2c1_driver_sendNACK
 12372  113A                     _i2c1_driver_sendNACK:	
 12373                           
 12374                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 12375                           
 12376                           ;incstack = 0
 12377                           ; Regs used in _i2c1_driver_sendNACK: []
 12378  113A  0024               	movlb	4	; select bank4
 12379  113B  1696               	bsf	22,5	;volatile
 12380                           
 12381                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 12382  113C  1616               	bsf	22,4	;volatile
 12383  113D  0008               	return
 12384  113E                     __end_of_i2c1_driver_sendNACK:	
 12385                           
 12386                           	psect	text41
 12387  1203                     __ptext41:	
 12388 ;; *************** function _I2C_Read_Byte *****************
 12389 ;; Defined at:
 12390 ;;		line 115 in file "i2c.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;		None
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;		None
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      unsigned char 
 12397 ;; Registers used:
 12398 ;;		wreg, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:        0 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    6
 12411 ;; This function calls:
 12412 ;;		_i2c1_driver_getRXData
 12413 ;;		_i2c1_driver_isBufferFull
 12414 ;;		_i2c1_driver_startRX
 12415 ;; This function is called by:
 12416 ;;		_wireReadDataBlock
 12417 ;;		_wireReadDataByte
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           
 12422                           ;psect for function _I2C_Read_Byte
 12423  1203                     _I2C_Read_Byte:	
 12424                           
 12425                           ;i2c.c: 117:     i2c1_driver_startRX();
 12426                           
 12427                           ;incstack = 0
 12428                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 12429  1203  3190  20FB  3192   	fcall	_i2c1_driver_startRX
 12430  1206                     l6843:	
 12431                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12432                           
 12433                           
 12434                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12435  1206  3191  217B  3192   	fcall	_i2c1_driver_isBufferFull
 12436  1209  1C03               	btfss	3,0
 12437  120A  2A06               	goto	l6843
 12438                           
 12439                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 12440  120B  3190  20F8         	fcall	_i2c1_driver_getRXData
 12441  120D  0008               	return
 12442  120E                     __end_of_I2C_Read_Byte:	
 12443                           
 12444                           	psect	text42
 12445  10FB                     __ptext42:	
 12446 ;; *************** function _i2c1_driver_startRX *****************
 12447 ;; Defined at:
 12448 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;		None
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;		None
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      void 
 12455 ;; Registers used:
 12456 ;;		None
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;Total ram usage:        0 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    5
 12469 ;; This function calls:
 12470 ;;		Nothing
 12471 ;; This function is called by:
 12472 ;;		_I2C_Read_Byte
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _i2c1_driver_startRX
 12478  10FB                     _i2c1_driver_startRX:	
 12479                           
 12480                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in _i2c1_driver_startRX: []
 12484  10FB  0024               	movlb	4	; select bank4
 12485  10FC  1596               	bsf	22,3	;volatile
 12486  10FD  0008               	return
 12487  10FE                     __end_of_i2c1_driver_startRX:	
 12488                           
 12489                           	psect	text43
 12490  117B                     __ptext43:	
 12491 ;; *************** function _i2c1_driver_isBufferFull *****************
 12492 ;; Defined at:
 12493 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;		None
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;		None
 12498 ;; Return value:  Size  Location     Type
 12499 ;;		None               void
 12500 ;; Registers used:
 12501 ;;		wreg, status,2, status,0
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;Total ram usage:        1 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    5
 12514 ;; This function calls:
 12515 ;;		Nothing
 12516 ;; This function is called by:
 12517 ;;		_I2C_Read_Byte
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           
 12522                           ;psect for function _i2c1_driver_isBufferFull
 12523  117B                     _i2c1_driver_isBufferFull:	
 12524                           
 12525                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 12529  117B  0024               	movlb	4	; select bank4
 12530  117C  0814               	movf	20,w	;volatile
 12531  117D  3901               	andlw	1
 12532  117E  0020               	movlb	0	; select bank0
 12533  117F  00A0               	movwf	??_i2c1_driver_isBufferFull
 12534  1180  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 12535  1181  0008               	return
 12536  1182                     __end_of_i2c1_driver_isBufferFull:	
 12537                           
 12538                           	psect	text44
 12539  10F8                     __ptext44:	
 12540 ;; *************** function _i2c1_driver_getRXData *****************
 12541 ;; Defined at:
 12542 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;		None
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;		None
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  1    wreg      unsigned char 
 12549 ;; Registers used:
 12550 ;;		wreg
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:        0 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:    5
 12563 ;; This function calls:
 12564 ;;		Nothing
 12565 ;; This function is called by:
 12566 ;;		_I2C_Read_Byte
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _i2c1_driver_getRXData
 12572  10F8                     _i2c1_driver_getRXData:	
 12573                           
 12574                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 12578  10F8  0024               	movlb	4	; select bank4
 12579  10F9  0811               	movf	17,w	;volatile
 12580  10FA  0008               	return
 12581  10FB                     __end_of_i2c1_driver_getRXData:	
 12582                           
 12583                           	psect	text45
 12584  10F5                     __ptext45:	
 12585 ;; *************** function _I2C_ReStart *****************
 12586 ;; Defined at:
 12587 ;;		line 43 in file "i2c.c"
 12588 ;; Parameters:    Size  Location     Type
 12589 ;;		None
 12590 ;; Auto vars:     Size  Location     Type
 12591 ;;		None
 12592 ;; Return value:  Size  Location     Type
 12593 ;;                  1    wreg      void 
 12594 ;; Registers used:
 12595 ;;		status,2, status,0, pclath, cstack
 12596 ;; Tracked objects:
 12597 ;;		On entry : 0/0
 12598 ;;		On exit  : 0/0
 12599 ;;		Unchanged: 0/0
 12600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;Total ram usage:        0 bytes
 12606 ;; Hardware stack levels used:    1
 12607 ;; Hardware stack levels required when called:    6
 12608 ;; This function calls:
 12609 ;;		_i2c1_driver_restart
 12610 ;; This function is called by:
 12611 ;;		_wireReadDataBlock
 12612 ;;		_wireReadDataByte
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616                           
 12617                           ;psect for function _I2C_ReStart
 12618  10F5                     _I2C_ReStart:	
 12619                           
 12620                           ;i2c.c: 45:  i2c1_driver_restart();
 12621                           
 12622                           ;incstack = 0
 12623                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 12624  10F5  3190  20F2         	fcall	_i2c1_driver_restart
 12625  10F7  0008               	return
 12626  10F8                     __end_of_I2C_ReStart:	
 12627                           
 12628                           	psect	text46
 12629  10F2                     __ptext46:	
 12630 ;; *************** function _i2c1_driver_restart *****************
 12631 ;; Defined at:
 12632 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12633 ;; Parameters:    Size  Location     Type
 12634 ;;		None
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;		None
 12637 ;; Return value:  Size  Location     Type
 12638 ;;                  1    wreg      void 
 12639 ;; Registers used:
 12640 ;;		None
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;Total ram usage:        0 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; Hardware stack levels required when called:    5
 12653 ;; This function calls:
 12654 ;;		Nothing
 12655 ;; This function is called by:
 12656 ;;		_I2C_ReStart
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _i2c1_driver_restart
 12662  10F2                     _i2c1_driver_restart:	
 12663                           
 12664                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _i2c1_driver_restart: []
 12668  10F2  0024               	movlb	4	; select bank4
 12669  10F3  1496               	bsf	22,1	;volatile
 12670  10F4  0008               	return
 12671  10F5                     __end_of_i2c1_driver_restart:	
 12672                           
 12673                           	psect	text47
 12674  0B02                     __ptext47:	
 12675 ;; *************** function _UART_Byte *****************
 12676 ;; Defined at:
 12677 ;;		line 294 in file "main.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;		None
 12680 ;; Auto vars:     Size  Location     Type
 12681 ;;  bits            7   18[BANK1 ] unsigned char [7]
 12682 ;;  brightStr       1   28[BANK1 ] PTR unsigned char 
 12683 ;;  profileStr      1   27[BANK1 ] PTR unsigned char 
 12684 ;;  proxStr         1   26[BANK1 ] PTR unsigned char 
 12685 ;;  onStr           1   25[BANK1 ] PTR unsigned char 
 12686 ;; Return value:  Size  Location     Type
 12687 ;;                  1    wreg      void 
 12688 ;; Registers used:
 12689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12690 ;; Tracked objects:
 12691 ;;		On entry : 0/0
 12692 ;;		On exit  : 0/0
 12693 ;;		Unchanged: 0/0
 12694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;Total ram usage:       13 bytes
 12700 ;; Hardware stack levels used:    1
 12701 ;; Hardware stack levels required when called:   14
 12702 ;; This function calls:
 12703 ;;		_sprintf
 12704 ;;		_strcat
 12705 ;;		_strcpy
 12706 ;; This function is called by:
 12707 ;;		_main
 12708 ;; This function uses a non-reentrant model
 12709 ;;
 12710                           
 12711                           
 12712                           ;psect for function _UART_Byte
 12713  0B02                     _UART_Byte:	
 12714                           
 12715                           ;main.c: 295:     char bits[7];;main.c: 296:     char * onStr;;main.c: 297:     char * p
      +                          roxStr;;main.c: 298:     char * profileStr;;main.c: 299:     char * brightStr;;main.c: 3
      +                          00:     sprintf(onStr, "%d", on);
 12716                           
 12717                           ;incstack = 0
 12718                           ; Regs used in _UART_Byte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12719  0B02  3054               	movlw	low (STR_5| (0+32768))
 12720  0B03  0021               	movlb	1	; select bank1
 12721  0B04  00A3               	movwf	sprintf@fmt^(0+128)
 12722  0B05  3098               	movlw	high (STR_5| (0+32768))
 12723  0B06  00A4               	movwf	(sprintf@fmt^(0+128)+1)
 12724  0B07  086F               	movf	_on^(0+128),w
 12725  0B08  00B0               	movwf	??_UART_Byte^(0+128)
 12726  0B09  01B1               	clrf	(??_UART_Byte^(0+128)+1)
 12727  0B0A  0830               	movf	??_UART_Byte^(0+128),w
 12728  0B0B  00A5               	movwf	(?_sprintf^(0+128)+2)
 12729  0B0C  0831               	movf	(??_UART_Byte+1)^(0+128),w
 12730  0B0D  00A6               	movwf	((?_sprintf+1)^(0+128)+2)
 12731  0B0E  0839               	movf	UART_Byte@onStr^(0+128),w
 12732  0B0F  3194  2406  318B   	fcall	_sprintf
 12733                           
 12734                           ;main.c: 301:     sprintf(proxStr, "%d", prox);
 12735  0B12  3054               	movlw	low (STR_5| (0+32768))
 12736  0B13  0021               	movlb	1	; select bank1
 12737  0B14  00A3               	movwf	sprintf@fmt^(0+128)
 12738  0B15  3098               	movlw	high (STR_5| (0+32768))
 12739  0B16  00A4               	movwf	(sprintf@fmt^(0+128)+1)
 12740  0B17  0022               	movlb	2	; select bank2
 12741  0B18  0869               	movf	_prox^(0+256),w
 12742  0B19  0021               	movlb	1	; select bank1
 12743  0B1A  00B0               	movwf	??_UART_Byte^(0+128)
 12744  0B1B  01B1               	clrf	(??_UART_Byte^(0+128)+1)
 12745  0B1C  0830               	movf	??_UART_Byte^(0+128),w
 12746  0B1D  00A5               	movwf	(?_sprintf^(0+128)+2)
 12747  0B1E  0831               	movf	(??_UART_Byte+1)^(0+128),w
 12748  0B1F  00A6               	movwf	((?_sprintf+1)^(0+128)+2)
 12749  0B20  083A               	movf	UART_Byte@proxStr^(0+128),w
 12750  0B21  3194  2406  318B   	fcall	_sprintf
 12751                           
 12752                           ;main.c: 302:     sprintf(profileStr, "%d", name);
 12753  0B24  3054               	movlw	low (STR_5| (0+32768))
 12754  0B25  0021               	movlb	1	; select bank1
 12755  0B26  00A3               	movwf	sprintf@fmt^(0+128)
 12756  0B27  3098               	movlw	high (STR_5| (0+32768))
 12757  0B28  00A4               	movwf	(sprintf@fmt^(0+128)+1)
 12758  0B29  0867               	movf	(_name+1)^(0+128),w
 12759  0B2A  00A6               	movwf	((?_sprintf+1)^(0+128)+2)
 12760  0B2B  0866               	movf	_name^(0+128),w
 12761  0B2C  00A5               	movwf	(?_sprintf^(0+128)+2)
 12762  0B2D  083B               	movf	UART_Byte@profileStr^(0+128),w
 12763  0B2E  3194  2406  318B   	fcall	_sprintf
 12764                           
 12765                           ;main.c: 303:     sprintf(brightStr, "%d", brightness);
 12766  0B31  3054               	movlw	low (STR_5| (0+32768))
 12767  0B32  0021               	movlb	1	; select bank1
 12768  0B33  00A3               	movwf	sprintf@fmt^(0+128)
 12769  0B34  3098               	movlw	high (STR_5| (0+32768))
 12770  0B35  00A4               	movwf	(sprintf@fmt^(0+128)+1)
 12771  0B36  0022               	movlb	2	; select bank2
 12772  0B37  0865               	movf	(_brightness+1)^(0+256),w
 12773  0B38  0021               	movlb	1	; select bank1
 12774  0B39  00A6               	movwf	((?_sprintf+1)^(0+128)+2)
 12775  0B3A  0022               	movlb	2	; select bank2
 12776  0B3B  0864               	movf	_brightness^(0+256),w
 12777  0B3C  0021               	movlb	1	; select bank1
 12778  0B3D  00A5               	movwf	(?_sprintf^(0+128)+2)
 12779  0B3E  083C               	movf	UART_Byte@brightStr^(0+128),w
 12780  0B3F  3194  2406  318B   	fcall	_sprintf
 12781                           
 12782                           ;main.c: 304:     strcpy(bits, onStr);
 12783  0B42  0021               	movlb	1	; select bank1
 12784  0B43  0839               	movf	UART_Byte@onStr^(0+128),w
 12785  0B44  00B0               	movwf	??_UART_Byte^(0+128)
 12786  0B45  0830               	movf	??_UART_Byte^(0+128),w
 12787  0B46  0020               	movlb	0	; select bank0
 12788  0B47  00A5               	movwf	strcpy@src
 12789  0B48  30B2               	movlw	(low (UART_Byte@bits| 0))& (0+255)
 12790  0B49  3193  2326  318B   	fcall	_strcpy
 12791                           
 12792                           ;main.c: 305:     strcat(bits, proxStr);
 12793  0B4C  0021               	movlb	1	; select bank1
 12794  0B4D  083A               	movf	UART_Byte@proxStr^(0+128),w
 12795  0B4E  00B0               	movwf	??_UART_Byte^(0+128)
 12796  0B4F  0830               	movf	??_UART_Byte^(0+128),w
 12797  0B50  0020               	movlb	0	; select bank0
 12798  0B51  00AA               	movwf	strcat@src
 12799  0B52  30B2               	movlw	(low (UART_Byte@bits| 0))& (0+255)
 12800  0B53  3192  22C8  318B   	fcall	_strcat
 12801                           
 12802                           ;main.c: 306:     strcat(bits, profileStr);
 12803  0B56  0021               	movlb	1	; select bank1
 12804  0B57  083B               	movf	UART_Byte@profileStr^(0+128),w
 12805  0B58  00B0               	movwf	??_UART_Byte^(0+128)
 12806  0B59  0830               	movf	??_UART_Byte^(0+128),w
 12807  0B5A  0020               	movlb	0	; select bank0
 12808  0B5B  00AA               	movwf	strcat@src
 12809  0B5C  30B2               	movlw	(low (UART_Byte@bits| 0))& (0+255)
 12810  0B5D  3192  22C8  318B   	fcall	_strcat
 12811                           
 12812                           ;main.c: 307:     strcat(bits, brightStr);
 12813  0B60  0021               	movlb	1	; select bank1
 12814  0B61  083C               	movf	UART_Byte@brightStr^(0+128),w
 12815  0B62  00B0               	movwf	??_UART_Byte^(0+128)
 12816  0B63  0830               	movf	??_UART_Byte^(0+128),w
 12817  0B64  0020               	movlb	0	; select bank0
 12818  0B65  00AA               	movwf	strcat@src
 12819  0B66  30B2               	movlw	(low (UART_Byte@bits| 0))& (0+255)
 12820  0B67  3192  22C8  318B   	fcall	_strcat
 12821  0B6A                     l1017:	
 12822                           ;main.c: 309:     while(TXSTA1bits.TRMT == 0){};
 12823                           
 12824  0B6A  0023               	movlb	3	; select bank3
 12825  0B6B  1C9E               	btfss	30,1	;volatile
 12826  0B6C  2B6A               	goto	l1017
 12827                           
 12828                           ;main.c: 310:     TXREG1 = bits;
 12829  0B6D  30B2               	movlw	(low UART_Byte@bits)& (0+255)
 12830  0B6E  009A               	movwf	26	;volatile
 12831  0B6F  0008               	return
 12832  0B70                     __end_of_UART_Byte:	
 12833                           
 12834                           	psect	text48
 12835  12C8                     __ptext48:	
 12836 ;; *************** function _strcat *****************
 12837 ;; Defined at:
 12838 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcat.c"
 12839 ;; Parameters:    Size  Location     Type
 12840 ;;  dest            1    wreg     PTR unsigned char 
 12841 ;;		 -> UART_Byte@bits(7), 
 12842 ;;  src             1   10[BANK0 ] PTR const unsigned char 
 12843 ;; Auto vars:     Size  Location     Type
 12844 ;;  dest            1   14[BANK0 ] PTR unsigned char 
 12845 ;;		 -> UART_Byte@bits(7), 
 12846 ;; Return value:  Size  Location     Type
 12847 ;;                  1    wreg      PTR unsigned char 
 12848 ;; Registers used:
 12849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12855 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;Total ram usage:        5 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    6
 12862 ;; This function calls:
 12863 ;;		_strcpy
 12864 ;;		_strlen
 12865 ;; This function is called by:
 12866 ;;		_UART_Byte
 12867 ;; This function uses a non-reentrant model
 12868 ;;
 12869                           
 12870                           
 12871                           ;psect for function _strcat
 12872  12C8                     _strcat:	
 12873                           
 12874                           ;incstack = 0
 12875                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12876                           ;strcat@dest stored from wreg
 12877  12C8  0020               	movlb	0	; select bank0
 12878  12C9  00AE               	movwf	strcat@dest
 12879  12CA  082A               	movf	strcat@src,w
 12880  12CB  00AB               	movwf	??_strcat
 12881  12CC  082B               	movf	??_strcat,w
 12882  12CD  00A5               	movwf	strcpy@src
 12883  12CE  082E               	movf	strcat@dest,w
 12884  12CF  00A0               	movwf	strlen@s
 12885  12D0  3000               	movlw	0
 12886  12D1  00A1               	movwf	strlen@s+1
 12887  12D2  3193  230E  3192   	fcall	_strlen
 12888  12D5  0020               	movlb	0	; select bank0
 12889  12D6  0820               	movf	?_strlen,w
 12890  12D7  00AC               	movwf	??_strcat+1
 12891  12D8  0821               	movf	?_strlen+1,w
 12892  12D9  00AD               	movwf	??_strcat+2
 12893  12DA  082E               	movf	strcat@dest,w
 12894  12DB  072C               	addwf	??_strcat+1,w
 12895  12DC  3193  2326         	fcall	_strcpy
 12896  12DE  0008               	return
 12897  12DF                     __end_of_strcat:	
 12898                           
 12899                           	psect	text49
 12900  1326                     __ptext49:	
 12901 ;; *************** function _strcpy *****************
 12902 ;; Defined at:
 12903 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
 12904 ;; Parameters:    Size  Location     Type
 12905 ;;  dest            1    wreg     PTR unsigned char 
 12906 ;;		 -> UART_Byte@bits(7), 
 12907 ;;  src             1    5[BANK0 ] PTR const unsigned char 
 12908 ;; Auto vars:     Size  Location     Type
 12909 ;;  dest            1    9[BANK0 ] PTR unsigned char 
 12910 ;;		 -> UART_Byte@bits(7), 
 12911 ;;  d               1    8[BANK0 ] PTR unsigned char 
 12912 ;;		 -> UART_Byte@bits(7), 
 12913 ;;  s               1    7[BANK0 ] PTR const unsigned char 
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      PTR unsigned char 
 12916 ;; Registers used:
 12917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;Total ram usage:        5 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    5
 12930 ;; This function calls:
 12931 ;;		Nothing
 12932 ;; This function is called by:
 12933 ;;		_UART_Byte
 12934 ;;		_strcat
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function _strcpy
 12940  1326                     _strcpy:	
 12941                           
 12942                           ;incstack = 0
 12943                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
 12944                           ;strcpy@dest stored from wreg
 12945  1326  0020               	movlb	0	; select bank0
 12946  1327  00A9               	movwf	strcpy@dest
 12947  1328  0825               	movf	strcpy@src,w
 12948  1329  00A6               	movwf	??_strcpy
 12949  132A  0826               	movf	??_strcpy,w
 12950  132B  00A7               	movwf	strcpy@s
 12951  132C  0829               	movf	strcpy@dest,w
 12952  132D  00A6               	movwf	??_strcpy
 12953  132E  0826               	movf	??_strcpy,w
 12954  132F  00A8               	movwf	strcpy@d
 12955  1330                     l5027:	
 12956  1330  0828               	movf	strcpy@d,w
 12957  1331  0086               	movwf	6
 12958  1332  0187               	clrf	7
 12959  1333  0AA8               	incf	strcpy@d,f
 12960  1334  0827               	movf	strcpy@s,w
 12961  1335  0084               	movwf	4
 12962  1336  0185               	clrf	5
 12963  1337  0AA7               	incf	strcpy@s,f
 12964  1338  0800               	movf	0,w
 12965  1339  3FC0               	movwi [0]fsr1
 12966  133A  0889               	movf	9,f
 12967  133B  1903               	btfsc	3,2
 12968  133C  0008               	return
 12969  133D  2B30               	goto	l5027
 12970  133E                     __end_of_strcpy:	
 12971                           
 12972                           	psect	text50
 12973  1406                     __ptext50:	
 12974 ;; *************** function _sprintf *****************
 12975 ;; Defined at:
 12976 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
 12977 ;; Parameters:    Size  Location     Type
 12978 ;;  s               1    wreg     PTR unsigned char 
 12979 ;;  fmt             2    3[BANK1 ] PTR const unsigned char 
 12980 ;;		 -> STR_8(3), STR_7(3), STR_6(3), STR_5(3), 
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;  s               1   10[BANK1 ] PTR unsigned char 
 12983 ;;  f               5   11[BANK1 ] struct _IO_FILE
 12984 ;;  ret             2    0        int 
 12985 ;;  ap              1    9[BANK1 ] PTR void [1]
 12986 ;;		 -> ?_sprintf(2), 
 12987 ;; Return value:  Size  Location     Type
 12988 ;;                  2    3[BANK1 ] int 
 12989 ;; Registers used:
 12990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/0
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12996 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
 12998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12999 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;Total ram usage:       14 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:   13
 13003 ;; This function calls:
 13004 ;;		_vfprintf
 13005 ;; This function is called by:
 13006 ;;		_UART_Byte
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           
 13011                           ;psect for function _sprintf
 13012  1406                     _sprintf:	
 13013                           
 13014                           ;incstack = 0
 13015                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13016                           ;sprintf@s stored from wreg
 13017  1406  0021               	movlb	1	; select bank1
 13018  1407  00AA               	movwf	sprintf@s^(0+128)
 13019  1408  30A5               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 13020  1409  0020               	movlb	0	; select bank0
 13021  140A  00EF               	movwf	??_sprintf
 13022  140B  086F               	movf	??_sprintf,w
 13023  140C  0021               	movlb	1	; select bank1
 13024  140D  00A9               	movwf	sprintf@ap^(0+128)
 13025  140E  082A               	movf	sprintf@s^(0+128),w
 13026  140F  0020               	movlb	0	; select bank0
 13027  1410  00EF               	movwf	??_sprintf
 13028  1411  086F               	movf	??_sprintf,w
 13029  1412  0021               	movlb	1	; select bank1
 13030  1413  00AB               	movwf	sprintf@f^(0+128)
 13031  1414  01AC               	clrf	(sprintf@f^(0+128)+1)
 13032  1415  01AD               	clrf	((sprintf@f+1)^(0+128)+1)
 13033  1416  01AE               	clrf	(sprintf@f^(0+128)+3)
 13034  1417  01AF               	clrf	((sprintf@f+1)^(0+128)+3)
 13035  1418  0824               	movf	(sprintf@fmt+1)^(0+128),w
 13036  1419  0020               	movlb	0	; select bank0
 13037  141A  00EB               	movwf	vfprintf@fmt+1
 13038  141B  0021               	movlb	1	; select bank1
 13039  141C  0823               	movf	sprintf@fmt^(0+128),w
 13040  141D  0020               	movlb	0	; select bank0
 13041  141E  00EA               	movwf	vfprintf@fmt
 13042  141F  30A9               	movlw	(low (sprintf@ap| 0))& (0+255)
 13043  1420  00EF               	movwf	??_sprintf
 13044  1421  086F               	movf	??_sprintf,w
 13045  1422  00EC               	movwf	vfprintf@ap
 13046  1423  30AB               	movlw	(low (sprintf@f| 0))& (0+255)
 13047  1424  3196  26A2         	fcall	_vfprintf
 13048  1426  0008               	return
 13049  1427                     __end_of_sprintf:	
 13050                           
 13051                           	psect	text51
 13052  16A2                     __ptext51:	
 13053 ;; *************** function _vfprintf *****************
 13054 ;; Defined at:
 13055 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13056 ;; Parameters:    Size  Location     Type
 13057 ;;  fp              1    wreg     PTR struct _IO_FILE
 13058 ;;		 -> sprintf@f(5), 
 13059 ;;  fmt             2   74[BANK0 ] PTR const unsigned char 
 13060 ;;		 -> STR_8(3), STR_7(3), STR_6(3), STR_5(3), 
 13061 ;;  ap              1   76[BANK0 ] PTR PTR void 
 13062 ;;		 -> sprintf@ap(1), 
 13063 ;; Auto vars:     Size  Location     Type
 13064 ;;  fp              1    0[BANK1 ] PTR struct _IO_FILE
 13065 ;;		 -> sprintf@f(5), 
 13066 ;;  cfmt            2    1[BANK1 ] PTR unsigned char 
 13067 ;;		 -> STR_8(3), STR_7(3), STR_6(3), STR_5(3), 
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  2   74[BANK0 ] int 
 13070 ;; Registers used:
 13071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13077 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13078 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Totals:         0       5       3       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;Total ram usage:        8 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:   12
 13084 ;; This function calls:
 13085 ;;		_vfpfcnvrt
 13086 ;; This function is called by:
 13087 ;;		_sprintf
 13088 ;; This function uses a non-reentrant model
 13089 ;;
 13090                           
 13091                           
 13092                           ;psect for function _vfprintf
 13093  16A2                     _vfprintf:	
 13094                           
 13095                           ;incstack = 0
 13096                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13097                           ;vfprintf@fp stored from wreg
 13098  16A2  0021               	movlb	1	; select bank1
 13099  16A3  00A0               	movwf	vfprintf@fp^(0+128)
 13100                           
 13101                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 13102  16A4  0020               	movlb	0	; select bank0
 13103  16A5  086B               	movf	vfprintf@fmt+1,w
 13104  16A6  0021               	movlb	1	; select bank1
 13105  16A7  00A2               	movwf	(vfprintf@cfmt+1)^(0+128)
 13106  16A8  0020               	movlb	0	; select bank0
 13107  16A9  086A               	movf	vfprintf@fmt,w
 13108  16AA  0021               	movlb	1	; select bank1
 13109  16AB  00A1               	movwf	vfprintf@cfmt^(0+128)
 13110                           
 13111                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 13112  16AC  0023               	movlb	3	; select bank3
 13113  16AD  01D5               	clrf	_nout^(0+384)
 13114  16AE  01D6               	clrf	(_nout+1)^(0+384)
 13115  16AF                     l7487:	
 13116                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 13117                           
 13118                           
 13119                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 13120  16AF  0021               	movlb	1	; select bank1
 13121  16B0  0821               	movf	vfprintf@cfmt^(0+128),w
 13122  16B1  0084               	movwf	4
 13123  16B2  0822               	movf	(vfprintf@cfmt+1)^(0+128),w
 13124  16B3  0085               	movwf	5
 13125  16B4  0012               	moviw fsr0++
 13126  16B5  1903               	btfsc	3,2
 13127  16B6  2ECE               	goto	l7489
 13128                           
 13129                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 13130  16B7  30A1               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 13131  16B8  0020               	movlb	0	; select bank0
 13132  16B9  00ED               	movwf	??_vfprintf
 13133  16BA  086D               	movf	??_vfprintf,w
 13134  16BB  00DA               	movwf	vfpfcnvrt@fmt
 13135  16BC  086C               	movf	vfprintf@ap,w
 13136  16BD  00EE               	movwf	??_vfprintf+1
 13137  16BE  086E               	movf	??_vfprintf+1,w
 13138  16BF  00DB               	movwf	vfpfcnvrt@ap
 13139  16C0  0021               	movlb	1	; select bank1
 13140  16C1  0820               	movf	vfprintf@fp^(0+128),w
 13141  16C2  318B  2370  3196   	fcall	_vfpfcnvrt
 13142  16C5  0020               	movlb	0	; select bank0
 13143  16C6  085A               	movf	?_vfpfcnvrt,w
 13144  16C7  0023               	movlb	3	; select bank3
 13145  16C8  07D5               	addwf	_nout^(0+384),f
 13146  16C9  0020               	movlb	0	; select bank0
 13147  16CA  085B               	movf	?_vfpfcnvrt+1,w
 13148  16CB  0023               	movlb	3	; select bank3
 13149  16CC  3DD6               	addwfc	(_nout+1)^(0+384),f
 13150  16CD  2EAF               	goto	l7487
 13151  16CE                     l7489:	
 13152                           
 13153                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 13154  16CE  0023               	movlb	3	; select bank3
 13155  16CF  0856               	movf	(_nout+1)^(0+384),w
 13156  16D0  0020               	movlb	0	; select bank0
 13157  16D1  00EB               	movwf	?_vfprintf+1
 13158  16D2  0023               	movlb	3	; select bank3
 13159  16D3  0855               	movf	_nout^(0+384),w
 13160  16D4  0020               	movlb	0	; select bank0
 13161  16D5  00EA               	movwf	?_vfprintf
 13162  16D6  0008               	return
 13163  16D7                     __end_of_vfprintf:	
 13164                           
 13165                           	psect	text52
 13166  0B70                     __ptext52:	
 13167 ;; *************** function _vfpfcnvrt *****************
 13168 ;; Defined at:
 13169 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;  fp              1    wreg     PTR struct _IO_FILE
 13172 ;;		 -> sprintf@f(5), 
 13173 ;;  fmt             1   58[BANK0 ] PTR PTR unsigned char 
 13174 ;;		 -> vfprintf@cfmt(2), 
 13175 ;;  ap              1   59[BANK0 ] PTR PTR void 
 13176 ;;		 -> sprintf@ap(1), 
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;  fp              1   73[BANK0 ] PTR struct _IO_FILE
 13179 ;;		 -> sprintf@f(5), 
 13180 ;;  ll              8   65[BANK0 ] long long 
 13181 ;;  llu             8    0        unsigned long long 
 13182 ;;  f               4    0        unsigned long long 
 13183 ;;  ct              3    0        unsigned char [3]
 13184 ;;  vp              2    0        PTR void 
 13185 ;;  i               2    0        int 
 13186 ;;  done            2    0        int 
 13187 ;;  cp              2    0        PTR unsigned char 
 13188 ;;  c               1    0        unsigned char 
 13189 ;; Return value:  Size  Location     Type
 13190 ;;                  2   58[BANK0 ] int 
 13191 ;; Registers used:
 13192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13193 ;; Tracked objects:
 13194 ;;		On entry : 0/0
 13195 ;;		On exit  : 0/0
 13196 ;;		Unchanged: 0/0
 13197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13198 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;Total ram usage:       16 bytes
 13203 ;; Hardware stack levels used:    1
 13204 ;; Hardware stack levels required when called:   11
 13205 ;; This function calls:
 13206 ;;		_dtoa
 13207 ;;		_fputc
 13208 ;; This function is called by:
 13209 ;;		_vfprintf
 13210 ;; This function uses a non-reentrant model
 13211 ;;
 13212                           
 13213                           
 13214                           ;psect for function _vfpfcnvrt
 13215  0B70                     _vfpfcnvrt:	
 13216                           
 13217                           ;incstack = 0
 13218                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13219                           ;vfpfcnvrt@fp stored from wreg
 13220  0B70  0020               	movlb	0	; select bank0
 13221  0B71  00E9               	movwf	vfpfcnvrt@fp
 13222                           
 13223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 13224  0B72  085A               	movf	vfpfcnvrt@fmt,w
 13225  0B73  0086               	movwf	6
 13226  0B74  0187               	clrf	7
 13227  0B75  3F40               	moviw [0]fsr1
 13228  0B76  00DC               	movwf	??_vfpfcnvrt
 13229  0B77  3F41               	moviw [1]fsr1
 13230  0B78  00DD               	movwf	??_vfpfcnvrt+1
 13231  0B79  085C               	movf	??_vfpfcnvrt,w
 13232  0B7A  0084               	movwf	4
 13233  0B7B  085D               	movf	??_vfpfcnvrt+1,w
 13234  0B7C  0085               	movwf	5
 13235  0B7D  0012               	moviw fsr0++
 13236  0B7E  3A25               	xorlw	37
 13237  0B7F  1D03               	btfss	3,2
 13238  0B80  2C1E               	goto	l7083
 13239                           
 13240                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 13241  0B81  085A               	movf	vfpfcnvrt@fmt,w
 13242  0B82  0086               	movwf	6
 13243  0B83  0187               	clrf	7
 13244  0B84  3001               	movlw	1
 13245  0B85  0781               	addwf	1,f
 13246  0B86  3141               	addfsr 1,1
 13247  0B87  1803               	skipnc
 13248  0B88  0A81               	incf	1,f
 13249                           
 13250                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 13251  0B89  0023               	movlb	3	; select bank3
 13252  0B8A  01D7               	clrf	_width^(0+384)
 13253  0B8B  01D8               	clrf	(_width+1)^(0+384)
 13254  0B8C  0022               	movlb	2	; select bank2
 13255  0B8D  01E2               	clrf	_flags^(0+256)
 13256  0B8E  01E3               	clrf	(_flags+1)^(0+256)
 13257                           
 13258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 13259  0B8F  30FF               	movlw	255
 13260  0B90  00E0               	movwf	_prec^(0+256)
 13261  0B91  30FF               	movlw	255
 13262  0B92  00E1               	movwf	(_prec^(0+256)+1)
 13263                           
 13264                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13265  0B93  0020               	movlb	0	; select bank0
 13266  0B94  085A               	movf	vfpfcnvrt@fmt,w
 13267  0B95  0086               	movwf	6
 13268  0B96  0187               	clrf	7
 13269  0B97  3F40               	moviw [0]fsr1
 13270  0B98  00DC               	movwf	??_vfpfcnvrt
 13271  0B99  3F41               	moviw [1]fsr1
 13272  0B9A  00DD               	movwf	??_vfpfcnvrt+1
 13273  0B9B  085C               	movf	??_vfpfcnvrt,w
 13274  0B9C  0084               	movwf	4
 13275  0B9D  085D               	movf	??_vfpfcnvrt+1,w
 13276  0B9E  0085               	movwf	5
 13277  0B9F  0012               	moviw fsr0++
 13278  0BA0  3A64               	xorlw	100
 13279  0BA1  1903               	btfsc	3,2
 13280  0BA2  2BB2               	goto	l7059
 13281  0BA3  085A               	movf	vfpfcnvrt@fmt,w
 13282  0BA4  0086               	movwf	6
 13283  0BA5  0187               	clrf	7
 13284  0BA6  3F40               	moviw [0]fsr1
 13285  0BA7  00DC               	movwf	??_vfpfcnvrt
 13286  0BA8  3F41               	moviw [1]fsr1
 13287  0BA9  00DD               	movwf	??_vfpfcnvrt+1
 13288  0BAA  085C               	movf	??_vfpfcnvrt,w
 13289  0BAB  0084               	movwf	4
 13290  0BAC  085D               	movf	??_vfpfcnvrt+1,w
 13291  0BAD  0085               	movwf	5
 13292  0BAE  0012               	moviw fsr0++
 13293  0BAF  3A69               	xorlw	105
 13294  0BB0  1D03               	btfss	3,2
 13295  0BB1  2BEC               	goto	l7067
 13296  0BB2                     l7059:	
 13297                           
 13298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 13299  0BB2  085A               	movf	vfpfcnvrt@fmt,w
 13300  0BB3  0086               	movwf	6
 13301  0BB4  0187               	clrf	7
 13302  0BB5  3001               	movlw	1
 13303  0BB6  0781               	addwf	1,f
 13304  0BB7  3141               	addfsr 1,1
 13305  0BB8  1803               	skipnc
 13306  0BB9  0A81               	incf	1,f
 13307                           
 13308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13309  0BBA  085B               	movf	vfpfcnvrt@ap,w
 13310  0BBB  0086               	movwf	6
 13311  0BBC  0187               	clrf	7
 13312  0BBD  0801               	movf	1,w
 13313  0BBE  0084               	movwf	4
 13314  0BBF  0185               	clrf	5
 13315  0BC0  3002               	movlw	2
 13316  0BC1  0781               	addwf	1,f
 13317  0BC2  3F00               	moviw [0]fsr0
 13318  0BC3  00DC               	movwf	??_vfpfcnvrt
 13319  0BC4  3F01               	moviw [1]fsr0
 13320  0BC5  00DD               	movwf	??_vfpfcnvrt+1
 13321  0BC6  085C               	movf	??_vfpfcnvrt,w
 13322  0BC7  00E1               	movwf	vfpfcnvrt@ll
 13323  0BC8  085D               	movf	??_vfpfcnvrt+1,w
 13324  0BC9  00E2               	movwf	vfpfcnvrt@ll+1
 13325  0BCA  0D89               	rlf	9,f
 13326  0BCB  3B89               	subwfb	9,f
 13327  0BCC  0989               	comf	9,f
 13328  0BCD  00E3               	movwf	vfpfcnvrt@ll+2
 13329  0BCE  00E4               	movwf	vfpfcnvrt@ll+3
 13330  0BCF  00E5               	movwf	vfpfcnvrt@ll+4
 13331  0BD0  00E6               	movwf	vfpfcnvrt@ll+5
 13332  0BD1  00E7               	movwf	vfpfcnvrt@ll+6
 13333  0BD2  00E8               	movwf	vfpfcnvrt@ll+7
 13334                           
 13335                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 13336  0BD3  0861               	movf	vfpfcnvrt@ll,w
 13337  0BD4  00BC               	movwf	dtoa@d
 13338  0BD5  0862               	movf	vfpfcnvrt@ll+1,w
 13339  0BD6  00BD               	movwf	dtoa@d+1
 13340  0BD7  0863               	movf	vfpfcnvrt@ll+2,w
 13341  0BD8  00BE               	movwf	dtoa@d+2
 13342  0BD9  0864               	movf	vfpfcnvrt@ll+3,w
 13343  0BDA  00BF               	movwf	dtoa@d+3
 13344  0BDB  0865               	movf	vfpfcnvrt@ll+4,w
 13345  0BDC  00C0               	movwf	dtoa@d+4
 13346  0BDD  0866               	movf	vfpfcnvrt@ll+5,w
 13347  0BDE  00C1               	movwf	dtoa@d+5
 13348  0BDF  0867               	movf	vfpfcnvrt@ll+6,w
 13349  0BE0  00C2               	movwf	dtoa@d+6
 13350  0BE1  0868               	movf	vfpfcnvrt@ll+7,w
 13351  0BE2  00C3               	movwf	dtoa@d+7
 13352  0BE3  0869               	movf	vfpfcnvrt@fp,w
 13353  0BE4  3185  2501         	fcall	_dtoa
 13354  0BE6  0020               	movlb	0	; select bank0
 13355  0BE7  083D               	movf	?_dtoa+1,w
 13356  0BE8  00DB               	movwf	?_vfpfcnvrt+1
 13357  0BE9  083C               	movf	?_dtoa,w
 13358  0BEA  00DA               	movwf	?_vfpfcnvrt
 13359  0BEB  0008               	return
 13360  0BEC                     l7067:	
 13361                           
 13362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 13363  0BEC  085A               	movf	vfpfcnvrt@fmt,w
 13364  0BED  0086               	movwf	6
 13365  0BEE  0187               	clrf	7
 13366  0BEF  3F40               	moviw [0]fsr1
 13367  0BF0  00DC               	movwf	??_vfpfcnvrt
 13368  0BF1  3F41               	moviw [1]fsr1
 13369  0BF2  00DD               	movwf	??_vfpfcnvrt+1
 13370  0BF3  085C               	movf	??_vfpfcnvrt,w
 13371  0BF4  0084               	movwf	4
 13372  0BF5  085D               	movf	??_vfpfcnvrt+1,w
 13373  0BF6  0085               	movwf	5
 13374  0BF7  0012               	moviw fsr0++
 13375  0BF8  3A25               	xorlw	37
 13376  0BF9  1D03               	btfss	3,2
 13377  0BFA  2C13               	goto	l7077
 13378                           
 13379                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 13380  0BFB  085A               	movf	vfpfcnvrt@fmt,w
 13381  0BFC  0086               	movwf	6
 13382  0BFD  0187               	clrf	7
 13383  0BFE  3001               	movlw	1
 13384  0BFF  0781               	addwf	1,f
 13385  0C00  3141               	addfsr 1,1
 13386  0C01  1803               	skipnc
 13387  0C02  0A81               	incf	1,f
 13388                           
 13389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 13390  0C03  3025               	movlw	37
 13391  0C04  00A3               	movwf	fputc@c
 13392  0C05  3000               	movlw	0
 13393  0C06  00A4               	movwf	fputc@c+1
 13394  0C07  0869               	movf	vfpfcnvrt@fp,w
 13395  0C08  00DC               	movwf	??_vfpfcnvrt
 13396  0C09  085C               	movf	??_vfpfcnvrt,w
 13397  0C0A  00A5               	movwf	fputc@fp
 13398  0C0B  3197  270D         	fcall	_fputc
 13399  0C0D                     l7073:	
 13400                           
 13401                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 13402  0C0D  3001               	movlw	1
 13403  0C0E  0020               	movlb	0	; select bank0
 13404  0C0F  00DA               	movwf	?_vfpfcnvrt
 13405  0C10  3000               	movlw	0
 13406  0C11  00DB               	movwf	?_vfpfcnvrt+1
 13407  0C12  0008               	return
 13408  0C13                     l7077:	
 13409                           
 13410                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 13411  0C13  085A               	movf	vfpfcnvrt@fmt,w
 13412  0C14  0086               	movwf	6
 13413  0C15  0187               	clrf	7
 13414  0C16  3001               	movlw	1
 13415  0C17  0781               	addwf	1,f
 13416  0C18  3141               	addfsr 1,1
 13417  0C19  1803               	skipnc
 13418  0C1A  0A81               	incf	1,f
 13419                           
 13420                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 13421  0C1B  01DA               	clrf	?_vfpfcnvrt
 13422  0C1C  01DB               	clrf	?_vfpfcnvrt+1
 13423  0C1D  0008               	return
 13424  0C1E                     l7083:	
 13425                           
 13426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 13427  0C1E  085A               	movf	vfpfcnvrt@fmt,w
 13428  0C1F  0086               	movwf	6
 13429  0C20  0187               	clrf	7
 13430  0C21  3F40               	moviw [0]fsr1
 13431  0C22  00DC               	movwf	??_vfpfcnvrt
 13432  0C23  3F41               	moviw [1]fsr1
 13433  0C24  00DD               	movwf	??_vfpfcnvrt+1
 13434  0C25  085C               	movf	??_vfpfcnvrt,w
 13435  0C26  0084               	movwf	4
 13436  0C27  085D               	movf	??_vfpfcnvrt+1,w
 13437  0C28  0085               	movwf	5
 13438  0C29  0800               	movf	0,w	;code access
 13439  0C2A  00DE               	movwf	??_vfpfcnvrt+2
 13440  0C2B  01DF               	clrf	??_vfpfcnvrt+3
 13441  0C2C  085E               	movf	??_vfpfcnvrt+2,w
 13442  0C2D  00A3               	movwf	fputc@c
 13443  0C2E  085F               	movf	??_vfpfcnvrt+3,w
 13444  0C2F  00A4               	movwf	fputc@c+1
 13445  0C30  0869               	movf	vfpfcnvrt@fp,w
 13446  0C31  00E0               	movwf	??_vfpfcnvrt+4
 13447  0C32  0860               	movf	??_vfpfcnvrt+4,w
 13448  0C33  00A5               	movwf	fputc@fp
 13449  0C34  3197  270D  318B   	fcall	_fputc
 13450                           
 13451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 13452  0C37  0020               	movlb	0	; select bank0
 13453  0C38  085A               	movf	vfpfcnvrt@fmt,w
 13454  0C39  0086               	movwf	6
 13455  0C3A  0187               	clrf	7
 13456  0C3B  3001               	movlw	1
 13457  0C3C  0781               	addwf	1,f
 13458  0C3D  3141               	addfsr 1,1
 13459  0C3E  1803               	skipnc
 13460  0C3F  0A81               	incf	1,f
 13461  0C40  2C0D               	goto	l7073
 13462  0C41                     __end_of_vfpfcnvrt:	
 13463                           
 13464                           	psect	text53
 13465  0501                     __ptext53:	
 13466 ;; *************** function _dtoa *****************
 13467 ;; Defined at:
 13468 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;  fp              1    wreg     PTR struct _IO_FILE
 13471 ;;		 -> sprintf@f(5), 
 13472 ;;  d               8   28[BANK0 ] long long 
 13473 ;; Auto vars:     Size  Location     Type
 13474 ;;  fp              1   39[BANK0 ] PTR struct _IO_FILE
 13475 ;;		 -> sprintf@f(5), 
 13476 ;;  n               8   48[BANK0 ] long long 
 13477 ;;  i               2   56[BANK0 ] int 
 13478 ;;  s               2   46[BANK0 ] int 
 13479 ;;  w               2   44[BANK0 ] int 
 13480 ;;  p               2   42[BANK0 ] int 
 13481 ;; Return value:  Size  Location     Type
 13482 ;;                  2   28[BANK0 ] int 
 13483 ;; Registers used:
 13484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13485 ;; Tracked objects:
 13486 ;;		On entry : 0/0
 13487 ;;		On exit  : 0/0
 13488 ;;		Unchanged: 0/0
 13489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13490 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13494 ;;Total ram usage:       30 bytes
 13495 ;; Hardware stack levels used:    1
 13496 ;; Hardware stack levels required when called:   10
 13497 ;; This function calls:
 13498 ;;		___aodiv
 13499 ;;		___aomod
 13500 ;;		_abs
 13501 ;;		_pad
 13502 ;; This function is called by:
 13503 ;;		_vfpfcnvrt
 13504 ;; This function uses a non-reentrant model
 13505 ;;
 13506                           
 13507                           
 13508                           ;psect for function _dtoa
 13509  0501                     _dtoa:	
 13510                           
 13511                           ;incstack = 0
 13512                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13513                           ;dtoa@fp stored from wreg
 13514  0501  0020               	movlb	0	; select bank0
 13515  0502  00C7               	movwf	dtoa@fp
 13516                           
 13517                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 13518  0503  083C               	movf	dtoa@d,w
 13519  0504  00D0               	movwf	dtoa@n
 13520  0505  083D               	movf	dtoa@d+1,w
 13521  0506  00D1               	movwf	dtoa@n+1
 13522  0507  083E               	movf	dtoa@d+2,w
 13523  0508  00D2               	movwf	dtoa@n+2
 13524  0509  083F               	movf	dtoa@d+3,w
 13525  050A  00D3               	movwf	dtoa@n+3
 13526  050B  0840               	movf	dtoa@d+4,w
 13527  050C  00D4               	movwf	dtoa@n+4
 13528  050D  0841               	movf	dtoa@d+5,w
 13529  050E  00D5               	movwf	dtoa@n+5
 13530  050F  0842               	movf	dtoa@d+6,w
 13531  0510  00D6               	movwf	dtoa@n+6
 13532  0511  0843               	movf	dtoa@d+7,w
 13533  0512  00D7               	movwf	dtoa@n+7
 13534                           
 13535                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 13536  0513  3050               	movlw	low dtoa@n
 13537  0514  0086               	movwf	6
 13538  0515  3000               	movlw	high dtoa@n
 13539  0516  0087               	movwf	7
 13540  0517  3F47               	moviw [7]fsr1
 13541  0518  00C4               	movwf	??_dtoa
 13542  0519  1FC4               	btfss	??_dtoa,7
 13543  051A  2D1D               	goto	u6330
 13544  051B  3001               	movlw	1
 13545  051C  2D1E               	goto	u6340
 13546  051D                     u6330:	
 13547  051D  3000               	movlw	0
 13548  051E                     u6340:	
 13549  051E  0020               	movlb	0	; select bank0
 13550  051F  00C5               	movwf	??_dtoa+1
 13551  0520  01C6               	clrf	??_dtoa+2
 13552  0521  0845               	movf	??_dtoa+1,w
 13553  0522  00CE               	movwf	dtoa@s
 13554  0523  0846               	movf	??_dtoa+2,w
 13555  0524  00CF               	movwf	dtoa@s+1
 13556                           
 13557                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 13558  0525  084E               	movf	dtoa@s,w
 13559  0526  044F               	iorwf	dtoa@s+1,w
 13560  0527  1903               	btfsc	3,2
 13561  0528  2D47               	goto	l1635
 13562                           
 13563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 13564  0529  09D0               	comf	dtoa@n,f
 13565  052A  09D1               	comf	dtoa@n+1,f
 13566  052B  09D2               	comf	dtoa@n+2,f
 13567  052C  09D3               	comf	dtoa@n+3,f
 13568  052D  09D4               	comf	dtoa@n+4,f
 13569  052E  09D5               	comf	dtoa@n+5,f
 13570  052F  09D6               	comf	dtoa@n+6,f
 13571  0530  09D7               	comf	dtoa@n+7,f
 13572  0531  0AD0               	incf	dtoa@n,f
 13573  0532  1D03               	skipz
 13574  0533  2D47               	goto	l1635
 13575  0534  0AD1               	incf	dtoa@n+1,f
 13576  0535  1D03               	skipz
 13577  0536  2D47               	goto	l1635
 13578  0537  0AD2               	incf	dtoa@n+2,f
 13579  0538  1D03               	skipz
 13580  0539  2D47               	goto	l1635
 13581  053A  0AD3               	incf	dtoa@n+3,f
 13582  053B  1D03               	skipz
 13583  053C  2D47               	goto	l1635
 13584  053D  0AD4               	incf	dtoa@n+4,f
 13585  053E  1D03               	skipz
 13586  053F  2D47               	goto	l1635
 13587  0540  0AD5               	incf	dtoa@n+5,f
 13588  0541  1D03               	skipz
 13589  0542  2D47               	goto	l1635
 13590  0543  0AD6               	incf	dtoa@n+6,f
 13591  0544  1D03               	skipz
 13592  0545  2D47               	goto	l1635
 13593  0546  0AD7               	incf	dtoa@n+7,f
 13594  0547                     l1635:	
 13595                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
 13596                           
 13597                           
 13598                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 13599  0547  0022               	movlb	2	; select bank2
 13600  0548  1BE1               	btfsc	(_prec+1)^(0+256),7
 13601  0549  2D4E               	goto	l1636
 13602                           
 13603                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 13604  054A  30FD               	movlw	253
 13605  054B  05E2               	andwf	_flags^(0+256),f
 13606  054C  30FF               	movlw	255
 13607  054D  05E3               	andwf	(_flags+1)^(0+256),f
 13608  054E                     l1636:	
 13609                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
 13610                           
 13611                           
 13612                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 13613  054E  0861               	movf	(_prec+1)^(0+256),w
 13614  054F  3A80               	xorlw	128
 13615  0550  0020               	movlb	0	; select bank0
 13616  0551  00C4               	movwf	??_dtoa
 13617  0552  3080               	movlw	128
 13618  0553  0244               	subwf	??_dtoa,w
 13619  0554  1D03               	skipz
 13620  0555  2D59               	goto	u6385
 13621  0556  3001               	movlw	1
 13622  0557  0022               	movlb	2	; select bank2
 13623  0558  0260               	subwf	_prec^(0+256),w
 13624  0559                     u6385:	
 13625  0559  1803               	skipnc
 13626  055A  2D61               	goto	l6973
 13627  055B  3001               	movlw	1
 13628  055C  0020               	movlb	0	; select bank0
 13629  055D  00CA               	movwf	dtoa@p
 13630  055E  3000               	movlw	0
 13631  055F  00CB               	movwf	dtoa@p+1
 13632  0560  2D69               	goto	l1640
 13633  0561                     l6973:	
 13634  0561  0022               	movlb	2	; select bank2
 13635  0562  0861               	movf	(_prec+1)^(0+256),w
 13636  0563  0020               	movlb	0	; select bank0
 13637  0564  00CB               	movwf	dtoa@p+1
 13638  0565  0022               	movlb	2	; select bank2
 13639  0566  0860               	movf	_prec^(0+256),w
 13640  0567  0020               	movlb	0	; select bank0
 13641  0568  00CA               	movwf	dtoa@p
 13642  0569                     l1640:	
 13643                           
 13644                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 13645  0569  0023               	movlb	3	; select bank3
 13646  056A  0858               	movf	(_width+1)^(0+384),w
 13647  056B  0020               	movlb	0	; select bank0
 13648  056C  00CD               	movwf	dtoa@w+1
 13649  056D  0023               	movlb	3	; select bank3
 13650  056E  0857               	movf	_width^(0+384),w
 13651  056F  0020               	movlb	0	; select bank0
 13652  0570  00CC               	movwf	dtoa@w
 13653                           
 13654                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 13655  0571  084E               	movf	dtoa@s,w
 13656  0572  044F               	iorwf	dtoa@s+1,w
 13657  0573  1D03               	btfss	3,2
 13658  0574  2D78               	goto	l6979
 13659  0575  0022               	movlb	2	; select bank2
 13660  0576  1D62               	btfss	_flags^(0+256),2
 13661  0577  2D7D               	goto	l1641
 13662  0578                     l6979:	
 13663                           
 13664                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 13665  0578  30FF               	movlw	255
 13666  0579  0020               	movlb	0	; select bank0
 13667  057A  07CC               	addwf	dtoa@w,f
 13668  057B  30FF               	movlw	255
 13669  057C  3DCD               	addwfc	dtoa@w+1,f
 13670  057D                     l1641:	
 13671                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
 13672                           
 13673                           
 13674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 13675  057D  301F               	movlw	31
 13676  057E  0020               	movlb	0	; select bank0
 13677  057F  00D8               	movwf	dtoa@i
 13678  0580  3000               	movlw	0
 13679  0581  00D9               	movwf	dtoa@i+1
 13680                           
 13681                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 13682  0582  0025               	movlb	5	; select bank5
 13683  0583  01BF               	clrf	(_dbuf^(0+640)+31)
 13684                           
 13685                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13686  0584  2E13               	goto	l1644
 13687  0585                     l6993:	
 13688  0585  0020               	movlb	0	; select bank0
 13689  0586  0850               	movf	dtoa@n,w
 13690  0587  0451               	iorwf	dtoa@n+1,w
 13691  0588  0452               	iorwf	dtoa@n+2,w
 13692  0589  0453               	iorwf	dtoa@n+3,w
 13693  058A  0454               	iorwf	dtoa@n+4,w
 13694  058B  0455               	iorwf	dtoa@n+5,w
 13695  058C  0456               	iorwf	dtoa@n+6,w
 13696  058D  0457               	iorwf	dtoa@n+7,w
 13697  058E  1D03               	skipz
 13698  058F  2DAA               	goto	l6983
 13699  0590  084B               	movf	dtoa@p+1,w
 13700  0591  3A80               	xorlw	128
 13701  0592  00C4               	movwf	??_dtoa
 13702  0593  3080               	movlw	128
 13703  0594  0244               	subwf	??_dtoa,w
 13704  0595  1D03               	skipz
 13705  0596  2D99               	goto	u6435
 13706  0597  3001               	movlw	1
 13707  0598  024A               	subwf	dtoa@p,w
 13708  0599                     u6435:	
 13709  0599  1803               	skipnc
 13710  059A  2DAA               	goto	l6983
 13711  059B  0020               	movlb	0	; select bank0
 13712  059C  084D               	movf	dtoa@w+1,w
 13713  059D  3A80               	xorlw	128
 13714  059E  00C4               	movwf	??_dtoa
 13715  059F  3080               	movlw	128
 13716  05A0  0244               	subwf	??_dtoa,w
 13717  05A1  1D03               	skipz
 13718  05A2  2DA5               	goto	u6445
 13719  05A3  3001               	movlw	1
 13720  05A4  024C               	subwf	dtoa@w,w
 13721  05A5                     u6445:	
 13722  05A5  1C03               	skipc
 13723  05A6  2E1F               	goto	l7001
 13724  05A7  0022               	movlb	2	; select bank2
 13725  05A8  1CE2               	btfss	_flags^(0+256),1
 13726  05A9  2E1F               	goto	l7001
 13727  05AA                     l6983:	
 13728                           
 13729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 13730  05AA  30FF               	movlw	255
 13731  05AB  0020               	movlb	0	; select bank0
 13732  05AC  07D8               	addwf	dtoa@i,f
 13733  05AD  30FF               	movlw	255
 13734  05AE  3DD9               	addwfc	dtoa@i+1,f
 13735                           
 13736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 13737  05AF  300A               	movlw	10
 13738  05B0  00A0               	movwf	___aomod@divisor
 13739  05B1  01A1               	clrf	___aomod@divisor+1
 13740  05B2  01A2               	clrf	___aomod@divisor+2
 13741  05B3  01A3               	clrf	___aomod@divisor+3
 13742  05B4  01A4               	clrf	___aomod@divisor+4
 13743  05B5  01A5               	clrf	___aomod@divisor+5
 13744  05B6  01A6               	clrf	___aomod@divisor+6
 13745  05B7  01A7               	clrf	___aomod@divisor+7
 13746  05B8  0850               	movf	dtoa@n,w
 13747  05B9  00A8               	movwf	___aomod@dividend
 13748  05BA  0851               	movf	dtoa@n+1,w
 13749  05BB  00A9               	movwf	___aomod@dividend+1
 13750  05BC  0852               	movf	dtoa@n+2,w
 13751  05BD  00AA               	movwf	___aomod@dividend+2
 13752  05BE  0853               	movf	dtoa@n+3,w
 13753  05BF  00AB               	movwf	___aomod@dividend+3
 13754  05C0  0854               	movf	dtoa@n+4,w
 13755  05C1  00AC               	movwf	___aomod@dividend+4
 13756  05C2  0855               	movf	dtoa@n+5,w
 13757  05C3  00AD               	movwf	___aomod@dividend+5
 13758  05C4  0856               	movf	dtoa@n+6,w
 13759  05C5  00AE               	movwf	___aomod@dividend+6
 13760  05C6  0857               	movf	dtoa@n+7,w
 13761  05C7  00AF               	movwf	___aomod@dividend+7
 13762  05C8  318C  2441  3185   	fcall	___aomod
 13763  05CB  0020               	movlb	0	; select bank0
 13764  05CC  0821               	movf	?___aomod+1,w
 13765  05CD  00B4               	movwf	abs@a+1
 13766  05CE  0820               	movf	?___aomod,w
 13767  05CF  00B3               	movwf	abs@a
 13768  05D0  3193  233E  3185   	fcall	_abs
 13769  05D3  0020               	movlb	0	; select bank0
 13770  05D4  0833               	movf	?_abs,w
 13771  05D5  3E30               	addlw	48
 13772  05D6  00C4               	movwf	??_dtoa
 13773  05D7  0858               	movf	dtoa@i,w
 13774  05D8  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 13775  05D9  0086               	movwf	6
 13776  05DA  3002               	movlw	2	; select bank5/6
 13777  05DB  0087               	movwf	7
 13778  05DC  0844               	movf	??_dtoa,w
 13779  05DD  0081               	movwf	1
 13780                           
 13781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 13782  05DE  30FF               	movlw	255
 13783  05DF  07CA               	addwf	dtoa@p,f
 13784  05E0  30FF               	movlw	255
 13785  05E1  3DCB               	addwfc	dtoa@p+1,f
 13786                           
 13787                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 13788  05E2  30FF               	movlw	255
 13789  05E3  07CC               	addwf	dtoa@w,f
 13790  05E4  30FF               	movlw	255
 13791  05E5  3DCD               	addwfc	dtoa@w+1,f
 13792                           
 13793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 13794  05E6  300A               	movlw	10
 13795  05E7  00A0               	movwf	___aodiv@divisor
 13796  05E8  01A1               	clrf	___aodiv@divisor+1
 13797  05E9  01A2               	clrf	___aodiv@divisor+2
 13798  05EA  01A3               	clrf	___aodiv@divisor+3
 13799  05EB  01A4               	clrf	___aodiv@divisor+4
 13800  05EC  01A5               	clrf	___aodiv@divisor+5
 13801  05ED  01A6               	clrf	___aodiv@divisor+6
 13802  05EE  01A7               	clrf	___aodiv@divisor+7
 13803  05EF  0850               	movf	dtoa@n,w
 13804  05F0  00A8               	movwf	___aodiv@dividend
 13805  05F1  0851               	movf	dtoa@n+1,w
 13806  05F2  00A9               	movwf	___aodiv@dividend+1
 13807  05F3  0852               	movf	dtoa@n+2,w
 13808  05F4  00AA               	movwf	___aodiv@dividend+2
 13809  05F5  0853               	movf	dtoa@n+3,w
 13810  05F6  00AB               	movwf	___aodiv@dividend+3
 13811  05F7  0854               	movf	dtoa@n+4,w
 13812  05F8  00AC               	movwf	___aodiv@dividend+4
 13813  05F9  0855               	movf	dtoa@n+5,w
 13814  05FA  00AD               	movwf	___aodiv@dividend+5
 13815  05FB  0856               	movf	dtoa@n+6,w
 13816  05FC  00AE               	movwf	___aodiv@dividend+6
 13817  05FD  0857               	movf	dtoa@n+7,w
 13818  05FE  00AF               	movwf	___aodiv@dividend+7
 13819  05FF  318F  2709  3185   	fcall	___aodiv
 13820  0602  0020               	movlb	0	; select bank0
 13821  0603  0820               	movf	?___aodiv,w
 13822  0604  00D0               	movwf	dtoa@n
 13823  0605  0821               	movf	?___aodiv+1,w
 13824  0606  00D1               	movwf	dtoa@n+1
 13825  0607  0822               	movf	?___aodiv+2,w
 13826  0608  00D2               	movwf	dtoa@n+2
 13827  0609  0823               	movf	?___aodiv+3,w
 13828  060A  00D3               	movwf	dtoa@n+3
 13829  060B  0824               	movf	?___aodiv+4,w
 13830  060C  00D4               	movwf	dtoa@n+4
 13831  060D  0825               	movf	?___aodiv+5,w
 13832  060E  00D5               	movwf	dtoa@n+5
 13833  060F  0826               	movf	?___aodiv+6,w
 13834  0610  00D6               	movwf	dtoa@n+6
 13835  0611  0827               	movf	?___aodiv+7,w
 13836  0612  00D7               	movwf	dtoa@n+7
 13837  0613                     l1644:	
 13838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
 13839                           
 13840                           
 13841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13842  0613  0020               	movlb	0	; select bank0
 13843  0614  0859               	movf	dtoa@i+1,w
 13844  0615  3A80               	xorlw	128
 13845  0616  00C4               	movwf	??_dtoa
 13846  0617  3080               	movlw	128
 13847  0618  0244               	subwf	??_dtoa,w
 13848  0619  1D03               	skipz
 13849  061A  2E1D               	goto	u6415
 13850  061B  3001               	movlw	1
 13851  061C  0258               	subwf	dtoa@i,w
 13852  061D                     u6415:	
 13853  061D  1803               	btfsc	3,0
 13854  061E  2D85               	goto	l6993
 13855  061F                     l7001:	
 13856                           
 13857                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 13858  061F  0020               	movlb	0	; select bank0
 13859  0620  084E               	movf	dtoa@s,w
 13860  0621  044F               	iorwf	dtoa@s+1,w
 13861  0622  1D03               	btfss	3,2
 13862  0623  2E27               	goto	l7005
 13863  0624  0022               	movlb	2	; select bank2
 13864  0625  1D62               	btfss	_flags^(0+256),2
 13865  0626  2E3F               	goto	l7015
 13866  0627                     l7005:	
 13867                           
 13868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 13869  0627  30FF               	movlw	255
 13870  0628  0020               	movlb	0	; select bank0
 13871  0629  07D8               	addwf	dtoa@i,f
 13872  062A  30FF               	movlw	255
 13873  062B  3DD9               	addwfc	dtoa@i+1,f
 13874                           
 13875                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 13876  062C  084E               	movf	dtoa@s,w
 13877  062D  044F               	iorwf	dtoa@s+1,w
 13878  062E  1D03               	btfss	3,2
 13879  062F  2E32               	goto	l7011
 13880  0630  302B               	movlw	43
 13881  0631  2E33               	goto	L9
 13882  0632                     l7011:	
 13883  0632  302D               	movlw	45
 13884  0633                     L9:	
 13885  0633  00C8               	movwf	_dtoa$2117
 13886  0634  3000               	movlw	0
 13887  0635  00C9               	movwf	_dtoa$2117+1
 13888  0636  0848               	movf	_dtoa$2117,w
 13889  0637  00C4               	movwf	??_dtoa
 13890  0638  0858               	movf	dtoa@i,w
 13891  0639  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 13892  063A  0086               	movwf	6
 13893  063B  3002               	movlw	2	; select bank5/6
 13894  063C  0087               	movwf	7
 13895  063D  0844               	movf	??_dtoa,w
 13896  063E  0081               	movwf	1
 13897  063F                     l7015:	
 13898                           
 13899                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 13900  063F  0020               	movlb	0	; select bank0
 13901  0640  0858               	movf	dtoa@i,w
 13902  0641  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 13903  0642  00C4               	movwf	??_dtoa
 13904  0643  0844               	movf	??_dtoa,w
 13905  0644  00B3               	movwf	pad@buf
 13906  0645  084D               	movf	dtoa@w+1,w
 13907  0646  00B5               	movwf	pad@p+1
 13908  0647  084C               	movf	dtoa@w,w
 13909  0648  00B4               	movwf	pad@p
 13910  0649  0847               	movf	dtoa@fp,w
 13911  064A  3189  21FF         	fcall	_pad
 13912  064C  0020               	movlb	0	; select bank0
 13913  064D  0834               	movf	?_pad+1,w
 13914  064E  00BD               	movwf	?_dtoa+1
 13915  064F  0833               	movf	?_pad,w
 13916  0650  00BC               	movwf	?_dtoa
 13917  0651  0008               	return
 13918  0652                     __end_of_dtoa:	
 13919                           
 13920                           	psect	text54
 13921  09FF                     __ptext54:	
 13922 ;; *************** function _pad *****************
 13923 ;; Defined at:
 13924 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 13925 ;; Parameters:    Size  Location     Type
 13926 ;;  fp              1    wreg     PTR struct _IO_FILE
 13927 ;;		 -> sprintf@f(5), 
 13928 ;;  buf             1   19[BANK0 ] PTR unsigned char 
 13929 ;;		 -> dbuf(32), 
 13930 ;;  p               2   20[BANK0 ] int 
 13931 ;; Auto vars:     Size  Location     Type
 13932 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
 13933 ;;		 -> sprintf@f(5), 
 13934 ;;  w               2   25[BANK0 ] int 
 13935 ;;  i               2   23[BANK0 ] int 
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  2   19[BANK0 ] int 
 13938 ;; Registers used:
 13939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13945 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;Total ram usage:        9 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:    9
 13952 ;; This function calls:
 13953 ;;		_fputc
 13954 ;;		_fputs
 13955 ;;		_strlen
 13956 ;; This function is called by:
 13957 ;;		_dtoa
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function _pad
 13963  09FF                     _pad:	
 13964                           
 13965                           ;incstack = 0
 13966                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13967                           ;pad@fp stored from wreg
 13968  09FF  0020               	movlb	0	; select bank0
 13969  0A00  00BB               	movwf	pad@fp
 13970                           
 13971                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 13972  0A01  0022               	movlb	2	; select bank2
 13973  0A02  1C62               	btfss	_flags^(0+256),0
 13974  0A03  2A0D               	goto	l6857
 13975                           
 13976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 13977  0A04  0020               	movlb	0	; select bank0
 13978  0A05  083B               	movf	pad@fp,w
 13979  0A06  00B6               	movwf	??_pad
 13980  0A07  0836               	movf	??_pad,w
 13981  0A08  00AB               	movwf	fputs@fp
 13982  0A09  0833               	movf	pad@buf,w
 13983  0A0A  3194  2471  3189   	fcall	_fputs
 13984  0A0D                     l6857:	
 13985                           
 13986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 13987  0A0D  0020               	movlb	0	; select bank0
 13988  0A0E  1BB5               	btfsc	pad@p+1,7
 13989  0A0F  2A15               	goto	l6861
 13990  0A10  0835               	movf	pad@p+1,w
 13991  0A11  00BA               	movwf	pad@w+1
 13992  0A12  0834               	movf	pad@p,w
 13993  0A13  00B9               	movwf	pad@w
 13994  0A14  2A17               	goto	l1627
 13995  0A15                     l6861:	
 13996  0A15  01B9               	clrf	pad@w
 13997  0A16  01BA               	clrf	pad@w+1
 13998  0A17                     l1627:	
 13999                           
 14000                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 14001  0A17  01B7               	clrf	pad@i
 14002  0A18  01B8               	clrf	pad@i+1
 14003  0A19                     l6867:	
 14004                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 14005                           
 14006                           
 14007                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 14008  0A19  0838               	movf	pad@i+1,w
 14009  0A1A  3A80               	xorlw	128
 14010  0A1B  00B6               	movwf	??_pad
 14011  0A1C  083A               	movf	pad@w+1,w
 14012  0A1D  3A80               	xorlw	128
 14013  0A1E  0236               	subwf	??_pad,w
 14014  0A1F  1D03               	skipz
 14015  0A20  2A23               	goto	u6095
 14016  0A21  0839               	movf	pad@w,w
 14017  0A22  0237               	subwf	pad@i,w
 14018  0A23                     u6095:	
 14019  0A23  1803               	btfsc	3,0
 14020  0A24  2A37               	goto	l1630
 14021                           
 14022                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 14023  0A25  3020               	movlw	32
 14024  0A26  0020               	movlb	0	; select bank0
 14025  0A27  00A3               	movwf	fputc@c
 14026  0A28  3000               	movlw	0
 14027  0A29  00A4               	movwf	fputc@c+1
 14028  0A2A  083B               	movf	pad@fp,w
 14029  0A2B  00B6               	movwf	??_pad
 14030  0A2C  0836               	movf	??_pad,w
 14031  0A2D  00A5               	movwf	fputc@fp
 14032  0A2E  3197  270D  3189   	fcall	_fputc
 14033                           
 14034                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 14035  0A31  3001               	movlw	1
 14036  0A32  0020               	movlb	0	; select bank0
 14037  0A33  07B7               	addwf	pad@i,f
 14038  0A34  3000               	movlw	0
 14039  0A35  3DB8               	addwfc	pad@i+1,f
 14040  0A36  2A19               	goto	l6867
 14041  0A37                     l1630:	
 14042                           
 14043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 14044  0A37  0022               	movlb	2	; select bank2
 14045  0A38  1862               	btfsc	_flags^(0+256),0
 14046  0A39  2A43               	goto	l6871
 14047                           
 14048                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 14049  0A3A  0020               	movlb	0	; select bank0
 14050  0A3B  083B               	movf	pad@fp,w
 14051  0A3C  00B6               	movwf	??_pad
 14052  0A3D  0836               	movf	??_pad,w
 14053  0A3E  00AB               	movwf	fputs@fp
 14054  0A3F  0833               	movf	pad@buf,w
 14055  0A40  3194  2471  3189   	fcall	_fputs
 14056  0A43                     l6871:	
 14057                           
 14058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 14059  0A43  0020               	movlb	0	; select bank0
 14060  0A44  0833               	movf	pad@buf,w
 14061  0A45  00A0               	movwf	strlen@s
 14062  0A46  3002               	movlw	2
 14063  0A47  00A1               	movwf	strlen@s+1
 14064  0A48  3193  230E         	fcall	_strlen
 14065  0A4A  0020               	movlb	0	; select bank0
 14066  0A4B  0839               	movf	pad@w,w
 14067  0A4C  0720               	addwf	?_strlen,w
 14068  0A4D  00B3               	movwf	?_pad
 14069  0A4E  083A               	movf	pad@w+1,w
 14070  0A4F  3D21               	addwfc	?_strlen+1,w
 14071  0A50  00B4               	movwf	?_pad+1
 14072  0A51  0008               	return
 14073  0A52                     __end_of_pad:	
 14074                           
 14075                           	psect	text55
 14076  1471                     __ptext55:	
 14077 ;; *************** function _fputs *****************
 14078 ;; Defined at:
 14079 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  s               1    wreg     PTR const unsigned char 
 14082 ;;		 -> dbuf(32), 
 14083 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
 14084 ;;		 -> sprintf@f(5), 
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;  s               1   18[BANK0 ] PTR const unsigned char 
 14087 ;;		 -> dbuf(32), 
 14088 ;;  i               2   16[BANK0 ] int 
 14089 ;;  c               1   15[BANK0 ] unsigned char 
 14090 ;; Return value:  Size  Location     Type
 14091 ;;                  2   11[BANK0 ] int 
 14092 ;; Registers used:
 14093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14094 ;; Tracked objects:
 14095 ;;		On entry : 0/0
 14096 ;;		On exit  : 0/0
 14097 ;;		Unchanged: 0/0
 14098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14099 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14100 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;Total ram usage:        8 bytes
 14104 ;; Hardware stack levels used:    1
 14105 ;; Hardware stack levels required when called:    8
 14106 ;; This function calls:
 14107 ;;		_fputc
 14108 ;; This function is called by:
 14109 ;;		_pad
 14110 ;; This function uses a non-reentrant model
 14111 ;;
 14112                           
 14113                           
 14114                           ;psect for function _fputs
 14115  1471                     _fputs:	
 14116                           
 14117                           ;incstack = 0
 14118                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14119                           ;fputs@s stored from wreg
 14120  1471  0020               	movlb	0	; select bank0
 14121  1472  00B2               	movwf	fputs@s
 14122  1473  01B0               	clrf	fputs@i
 14123  1474  01B1               	clrf	fputs@i+1
 14124  1475                     l6829:	
 14125  1475  0830               	movf	fputs@i,w
 14126  1476  0732               	addwf	fputs@s,w
 14127  1477  00AC               	movwf	??_fputs
 14128  1478  082C               	movf	??_fputs,w
 14129  1479  0086               	movwf	6
 14130  147A  3002               	movlw	2	; select bank4/5
 14131  147B  0087               	movwf	7
 14132  147C  0801               	movf	1,w
 14133  147D  00AD               	movwf	??_fputs+1
 14134  147E  082D               	movf	??_fputs+1,w
 14135  147F  00AF               	movwf	fputs@c
 14136  1480  082F               	movf	fputs@c,w
 14137  1481  1903               	btfsc	3,2
 14138  1482  0008               	return
 14139  1483  082F               	movf	fputs@c,w
 14140  1484  00AC               	movwf	??_fputs
 14141  1485  01AD               	clrf	??_fputs+1
 14142  1486  082C               	movf	??_fputs,w
 14143  1487  00A3               	movwf	fputc@c
 14144  1488  082D               	movf	??_fputs+1,w
 14145  1489  00A4               	movwf	fputc@c+1
 14146  148A  082B               	movf	fputs@fp,w
 14147  148B  00AE               	movwf	??_fputs+2
 14148  148C  082E               	movf	??_fputs+2,w
 14149  148D  00A5               	movwf	fputc@fp
 14150  148E  3197  270D  3194   	fcall	_fputc
 14151  1491  3001               	movlw	1
 14152  1492  0020               	movlb	0	; select bank0
 14153  1493  07B0               	addwf	fputs@i,f
 14154  1494  3000               	movlw	0
 14155  1495  3DB1               	addwfc	fputs@i+1,f
 14156  1496  2C75               	goto	l6829
 14157  1497                     __end_of_fputs:	
 14158                           
 14159                           	psect	text56
 14160  170D                     __ptext56:	
 14161 ;; *************** function _fputc *****************
 14162 ;; Defined at:
 14163 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;  c               2    3[BANK0 ] int 
 14166 ;;  fp              1    5[BANK0 ] PTR struct _IO_FILE
 14167 ;;		 -> sprintf@f(5), 
 14168 ;; Auto vars:     Size  Location     Type
 14169 ;;		None
 14170 ;; Return value:  Size  Location     Type
 14171 ;;                  2    3[BANK0 ] int 
 14172 ;; Registers used:
 14173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14174 ;; Tracked objects:
 14175 ;;		On entry : 0/0
 14176 ;;		On exit  : 0/0
 14177 ;;		Unchanged: 0/0
 14178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14183 ;;Total ram usage:        8 bytes
 14184 ;; Hardware stack levels used:    1
 14185 ;; Hardware stack levels required when called:    7
 14186 ;; This function calls:
 14187 ;;		_putch
 14188 ;; This function is called by:
 14189 ;;		_pad
 14190 ;;		_vfpfcnvrt
 14191 ;;		_fputs
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195                           
 14196                           ;psect for function _fputc
 14197  170D                     _fputc:	
 14198                           
 14199                           ;incstack = 0
 14200                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14201  170D  0020               	movlb	0	; select bank0
 14202  170E  0825               	movf	fputc@fp,w
 14203  170F  1D03               	btfss	3,2
 14204  1710  0825               	movf	fputc@fp,w
 14205  1711  1D03               	btfss	3,2
 14206  1712  2F17               	goto	l6785
 14207  1713  0823               	movf	fputc@c,w
 14208  1714  3191  214E         	fcall	_putch
 14209  1716  0008               	return
 14210  1717                     l6785:	
 14211  1717  0825               	movf	fputc@fp,w
 14212  1718  3E03               	addlw	3
 14213  1719  0086               	movwf	6
 14214  171A  0187               	clrf	7
 14215  171B  0016               	moviw fsr1++
 14216  171C  0401               	iorwf	1,w
 14217  171D  1903               	btfsc	3,2
 14218  171E  2F3A               	goto	l6789
 14219  171F  0825               	movf	fputc@fp,w
 14220  1720  3E03               	addlw	3
 14221  1721  0086               	movwf	6
 14222  1722  0187               	clrf	7
 14223  1723  3F40               	moviw [0]fsr1
 14224  1724  00A6               	movwf	??_fputc
 14225  1725  3F41               	moviw [1]fsr1
 14226  1726  00A7               	movwf	??_fputc+1
 14227  1727  0A25               	incf	fputc@fp,w
 14228  1728  0086               	movwf	6
 14229  1729  0187               	clrf	7
 14230  172A  3F40               	moviw [0]fsr1
 14231  172B  00A8               	movwf	??_fputc+2
 14232  172C  3F41               	moviw [1]fsr1
 14233  172D  00A9               	movwf	??_fputc+3
 14234  172E  0829               	movf	??_fputc+3,w
 14235  172F  3A80               	xorlw	128
 14236  1730  00AA               	movwf	??_fputc+4
 14237  1731  0827               	movf	??_fputc+1,w
 14238  1732  3A80               	xorlw	128
 14239  1733  022A               	subwf	??_fputc+4,w
 14240  1734  1D03               	skipz
 14241  1735  2F38               	goto	u6015
 14242  1736  0826               	movf	??_fputc,w
 14243  1737  0228               	subwf	??_fputc+2,w
 14244  1738                     u6015:	
 14245  1738  1803               	skipnc
 14246  1739  0008               	return
 14247  173A                     l6789:	
 14248  173A  0020               	movlb	0	; select bank0
 14249  173B  0A25               	incf	fputc@fp,w
 14250  173C  0086               	movwf	6
 14251  173D  0187               	clrf	7
 14252  173E  3001               	movlw	1
 14253  173F  0781               	addwf	1,f
 14254  1740  3141               	addfsr 1,1
 14255  1741  1803               	skipnc
 14256  1742  0A81               	incf	1,f
 14257  1743  0008               	return
 14258  1744                     __end_of_fputc:	
 14259                           
 14260                           	psect	text57
 14261  114E                     __ptext57:	
 14262 ;; *************** function _putch *****************
 14263 ;; Defined at:
 14264 ;;		line 200 in file "mcc_generated_files/eusart.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;  txData          1    wreg     unsigned char 
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  txData          1    2[BANK0 ] unsigned char 
 14269 ;; Return value:  Size  Location     Type
 14270 ;;                  1    wreg      void 
 14271 ;; Registers used:
 14272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;Total ram usage:        1 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    6
 14285 ;; This function calls:
 14286 ;;		_EUSART_Write
 14287 ;; This function is called by:
 14288 ;;		_fputc
 14289 ;; This function uses a non-reentrant model
 14290 ;;
 14291                           
 14292                           
 14293                           ;psect for function _putch
 14294  114E                     _putch:	
 14295                           
 14296                           ;incstack = 0
 14297                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14298                           ;putch@txData stored from wreg
 14299  114E  0020               	movlb	0	; select bank0
 14300  114F  00A2               	movwf	putch@txData
 14301                           
 14302                           ;mcc_generated_files/eusart.c: 200: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 201: {;mcc_generated_files/eusart.c: 202:     EUSART_Write(txData);
 14303  1150  0822               	movf	putch@txData,w
 14304  1151  3188  2003         	fcall	_EUSART_Write
 14305  1153  0008               	return
 14306  1154                     __end_of_putch:	
 14307                           
 14308                           	psect	text58
 14309  0803                     __ptext58:	
 14310 ;; *************** function _EUSART_Write *****************
 14311 ;; Defined at:
 14312 ;;		line 171 in file "mcc_generated_files/eusart.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;  txData          1    wreg     unsigned char 
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;  txData          1    1[BANK0 ] unsigned char 
 14317 ;; Return value:  Size  Location     Type
 14318 ;;                  1    wreg      void 
 14319 ;; Registers used:
 14320 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14321 ;; Tracked objects:
 14322 ;;		On entry : 0/0
 14323 ;;		On exit  : 0/0
 14324 ;;		Unchanged: 0/0
 14325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14329 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;Total ram usage:        2 bytes
 14331 ;; Hardware stack levels used:    1
 14332 ;; Hardware stack levels required when called:    5
 14333 ;; This function calls:
 14334 ;;		Nothing
 14335 ;; This function is called by:
 14336 ;;		_putch
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           
 14341                           ;psect for function _EUSART_Write
 14342  0803                     _EUSART_Write:	
 14343                           
 14344                           ;incstack = 0
 14345                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 14346                           ;EUSART_Write@txData stored from wreg
 14347  0803  0020               	movlb	0	; select bank0
 14348  0804  00A1               	movwf	EUSART_Write@txData
 14349  0805                     l6761:	
 14350                           ;mcc_generated_files/eusart.c: 171: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 172: {;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemai
      +                          ning)
 14351                           
 14352                           
 14353                           ;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemaining)
 14354  0805  0023               	movlb	3	; select bank3
 14355  0806  086F               	movf	_eusartTxBufferRemaining^(0+384),w	;volatile
 14356  0807  1D03               	btfss	3,2
 14357  0808  280B               	goto	l771
 14358  0809  0064               	clrwdt	;# 
 14359  080A  2805               	goto	l6761
 14360  080B                     l771:	
 14361                           
 14362                           ;mcc_generated_files/eusart.c: 178:     if(0 == PIE1bits.TXIE)
 14363  080B  0021               	movlb	1	; select bank1
 14364  080C  1A11               	btfsc	17,4	;volatile
 14365  080D  2813               	goto	l772
 14366                           
 14367                           ;mcc_generated_files/eusart.c: 179:     {;mcc_generated_files/eusart.c: 180:         TX1
      +                          REG = txData;
 14368  080E  0020               	movlb	0	; select bank0
 14369  080F  0821               	movf	EUSART_Write@txData,w
 14370  0810  0023               	movlb	3	; select bank3
 14371  0811  009A               	movwf	26	;volatile
 14372                           
 14373                           ;mcc_generated_files/eusart.c: 181:     }
 14374  0812  282C               	goto	l6775
 14375  0813                     l772:	
 14376                           ;mcc_generated_files/eusart.c: 182:     else
 14377                           
 14378                           
 14379                           ;mcc_generated_files/eusart.c: 183:     {;mcc_generated_files/eusart.c: 184:         PIE
      +                          1bits.TXIE = 0;
 14380  0813  1211               	bcf	17,4	;volatile
 14381                           
 14382                           ;mcc_generated_files/eusart.c: 185:         eusartTxBuffer[eusartTxHead++] = txData;
 14383  0814  0020               	movlb	0	; select bank0
 14384  0815  0821               	movf	EUSART_Write@txData,w
 14385  0816  00A0               	movwf	??_EUSART_Write
 14386  0817  0021               	movlb	1	; select bank1
 14387  0818  086E               	movf	_eusartTxHead^(0+128),w
 14388  0819  3ECD               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 14389  081A  0086               	movwf	6
 14390  081B  3001               	movlw	1	; select bank3/4
 14391  081C  0087               	movwf	7
 14392  081D  0020               	movlb	0	; select bank0
 14393  081E  0820               	movf	??_EUSART_Write,w
 14394  081F  0081               	movwf	1
 14395  0820  3001               	movlw	1
 14396  0821  00A0               	movwf	??_EUSART_Write
 14397  0822  0820               	movf	??_EUSART_Write,w
 14398  0823  0021               	movlb	1	; select bank1
 14399  0824  07EE               	addwf	_eusartTxHead^(0+128),f	;volatile
 14400                           
 14401                           ;mcc_generated_files/eusart.c: 186:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 14402  0825  3008               	movlw	8
 14403  0826  026E               	subwf	_eusartTxHead^(0+128),w	;volatile
 14404  0827  1803               	btfsc	3,0
 14405                           
 14406                           ;mcc_generated_files/eusart.c: 187:         {;mcc_generated_files/eusart.c: 188:        
      +                               eusartTxHead = 0;
 14407  0828  01EE               	clrf	_eusartTxHead^(0+128)	;volatile
 14408                           
 14409                           ;mcc_generated_files/eusart.c: 190:         eusartTxBufferRemaining--;
 14410  0829  3001               	movlw	1
 14411  082A  0023               	movlb	3	; select bank3
 14412  082B  02EF               	subwf	_eusartTxBufferRemaining^(0+384),f	;volatile
 14413  082C                     l6775:	
 14414                           
 14415                           ;mcc_generated_files/eusart.c: 192:     PIE1bits.TXIE = 1;
 14416  082C  0021               	movlb	1	; select bank1
 14417  082D  1611               	bsf	17,4	;volatile
 14418  082E  0008               	return
 14419  082F                     __end_of_EUSART_Write:	
 14420                           
 14421                           	psect	text59
 14422  133E                     __ptext59:	
 14423 ;; *************** function _abs *****************
 14424 ;; Defined at:
 14425 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;  a               2   19[BANK0 ] int 
 14428 ;; Auto vars:     Size  Location     Type
 14429 ;;		None
 14430 ;; Return value:  Size  Location     Type
 14431 ;;                  2   19[BANK0 ] int 
 14432 ;; Registers used:
 14433 ;;		wreg, status,2, status,0
 14434 ;; Tracked objects:
 14435 ;;		On entry : 0/0
 14436 ;;		On exit  : 0/0
 14437 ;;		Unchanged: 0/0
 14438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;Total ram usage:        4 bytes
 14444 ;; Hardware stack levels used:    1
 14445 ;; Hardware stack levels required when called:    5
 14446 ;; This function calls:
 14447 ;;		Nothing
 14448 ;; This function is called by:
 14449 ;;		_dtoa
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           
 14454                           ;psect for function _abs
 14455  133E                     _abs:	
 14456                           
 14457                           ;incstack = 0
 14458                           ; Regs used in _abs: [wreg+status,2+status,0]
 14459  133E  0020               	movlb	0	; select bank0
 14460  133F  0834               	movf	abs@a+1,w
 14461  1340  3A80               	xorlw	128
 14462  1341  00B5               	movwf	??_abs
 14463  1342  3080               	movlw	128
 14464  1343  0235               	subwf	??_abs,w
 14465  1344  1D03               	skipz
 14466  1345  2B48               	goto	u6115
 14467  1346  3001               	movlw	1
 14468  1347  0233               	subwf	abs@a,w
 14469  1348                     u6115:	
 14470  1348  1803               	skipnc
 14471  1349  0008               	return
 14472  134A  0020               	movlb	0	; select bank0
 14473  134B  0933               	comf	abs@a,w
 14474  134C  00B5               	movwf	??_abs
 14475  134D  0934               	comf	abs@a+1,w
 14476  134E  00B6               	movwf	??_abs+1
 14477  134F  0AB5               	incf	??_abs,f
 14478  1350  1903               	skipnz
 14479  1351  0AB6               	incf	??_abs+1,f
 14480  1352  0835               	movf	??_abs,w
 14481  1353  00B3               	movwf	?_abs
 14482  1354  0836               	movf	??_abs+1,w
 14483  1355  00B4               	movwf	?_abs+1
 14484  1356  0008               	return
 14485  1357                     __end_of_abs:	
 14486                           
 14487                           	psect	text60
 14488  0C41                     __ptext60:	
 14489 ;; *************** function ___aomod *****************
 14490 ;; Defined at:
 14491 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 14492 ;; Parameters:    Size  Location     Type
 14493 ;;  divisor         8    0[BANK0 ] long long 
 14494 ;;  dividend        8    8[BANK0 ] long long 
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  sign            1   18[BANK0 ] unsigned char 
 14497 ;;  counter         1   17[BANK0 ] unsigned char 
 14498 ;; Return value:  Size  Location     Type
 14499 ;;                  8    0[BANK0 ] long long 
 14500 ;; Registers used:
 14501 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14502 ;; Tracked objects:
 14503 ;;		On entry : 0/0
 14504 ;;		On exit  : 0/0
 14505 ;;		Unchanged: 0/0
 14506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14507 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;Total ram usage:       19 bytes
 14512 ;; Hardware stack levels used:    1
 14513 ;; Hardware stack levels required when called:    5
 14514 ;; This function calls:
 14515 ;;		Nothing
 14516 ;; This function is called by:
 14517 ;;		_dtoa
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           
 14522                           ;psect for function ___aomod
 14523  0C41                     ___aomod:	
 14524                           
 14525                           ;incstack = 0
 14526                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 14527  0C41  0020               	movlb	0	; select bank0
 14528  0C42  01B2               	clrf	___aomod@sign
 14529  0C43  3028               	movlw	low ___aomod@dividend
 14530  0C44  0086               	movwf	6
 14531  0C45  3000               	movlw	high ___aomod@dividend
 14532  0C46  0087               	movwf	7
 14533  0C47  3F47               	moviw [7]fsr1
 14534  0C48  00B0               	movwf	??___aomod
 14535  0C49  1FB0               	btfss	??___aomod,7
 14536  0C4A  2C6D               	goto	l6923
 14537  0C4B  0020               	movlb	0	; select bank0
 14538  0C4C  09A8               	comf	___aomod@dividend,f
 14539  0C4D  09A9               	comf	___aomod@dividend+1,f
 14540  0C4E  09AA               	comf	___aomod@dividend+2,f
 14541  0C4F  09AB               	comf	___aomod@dividend+3,f
 14542  0C50  09AC               	comf	___aomod@dividend+4,f
 14543  0C51  09AD               	comf	___aomod@dividend+5,f
 14544  0C52  09AE               	comf	___aomod@dividend+6,f
 14545  0C53  09AF               	comf	___aomod@dividend+7,f
 14546  0C54  0AA8               	incf	___aomod@dividend,f
 14547  0C55  1D03               	skipz
 14548  0C56  2C6A               	goto	u624lld
 14549  0C57  0AA9               	incf	___aomod@dividend+1,f
 14550  0C58  1D03               	skipz
 14551  0C59  2C6A               	goto	u624lld
 14552  0C5A  0AAA               	incf	___aomod@dividend+2,f
 14553  0C5B  1D03               	skipz
 14554  0C5C  2C6A               	goto	u624lld
 14555  0C5D  0AAB               	incf	___aomod@dividend+3,f
 14556  0C5E  1D03               	skipz
 14557  0C5F  2C6A               	goto	u624lld
 14558  0C60  0AAC               	incf	___aomod@dividend+4,f
 14559  0C61  1D03               	skipz
 14560  0C62  2C6A               	goto	u624lld
 14561  0C63  0AAD               	incf	___aomod@dividend+5,f
 14562  0C64  1D03               	skipz
 14563  0C65  2C6A               	goto	u624lld
 14564  0C66  0AAE               	incf	___aomod@dividend+6,f
 14565  0C67  1D03               	skipz
 14566  0C68  2C6A               	goto	u624lld
 14567  0C69  0AAF               	incf	___aomod@dividend+7,f
 14568  0C6A                     u624lld:	
 14569  0C6A  0020               	movlb	0	; select bank0
 14570  0C6B  01B2               	clrf	___aomod@sign
 14571  0C6C  0AB2               	incf	___aomod@sign,f
 14572  0C6D                     l6923:	
 14573  0C6D  3020               	movlw	low ___aomod@divisor
 14574  0C6E  0086               	movwf	6
 14575  0C6F  3000               	movlw	high ___aomod@divisor
 14576  0C70  0087               	movwf	7
 14577  0C71  3F47               	moviw [7]fsr1
 14578  0C72  0020               	movlb	0	; select bank0
 14579  0C73  00B0               	movwf	??___aomod
 14580  0C74  1FB0               	btfss	??___aomod,7
 14581  0C75  2C95               	goto	l6927
 14582  0C76  0020               	movlb	0	; select bank0
 14583  0C77  09A0               	comf	___aomod@divisor,f
 14584  0C78  09A1               	comf	___aomod@divisor+1,f
 14585  0C79  09A2               	comf	___aomod@divisor+2,f
 14586  0C7A  09A3               	comf	___aomod@divisor+3,f
 14587  0C7B  09A4               	comf	___aomod@divisor+4,f
 14588  0C7C  09A5               	comf	___aomod@divisor+5,f
 14589  0C7D  09A6               	comf	___aomod@divisor+6,f
 14590  0C7E  09A7               	comf	___aomod@divisor+7,f
 14591  0C7F  0AA0               	incf	___aomod@divisor,f
 14592  0C80  1D03               	skipz
 14593  0C81  2C95               	goto	l6927
 14594  0C82  0AA1               	incf	___aomod@divisor+1,f
 14595  0C83  1D03               	skipz
 14596  0C84  2C95               	goto	l6927
 14597  0C85  0AA2               	incf	___aomod@divisor+2,f
 14598  0C86  1D03               	skipz
 14599  0C87  2C95               	goto	l6927
 14600  0C88  0AA3               	incf	___aomod@divisor+3,f
 14601  0C89  1D03               	skipz
 14602  0C8A  2C95               	goto	l6927
 14603  0C8B  0AA4               	incf	___aomod@divisor+4,f
 14604  0C8C  1D03               	skipz
 14605  0C8D  2C95               	goto	l6927
 14606  0C8E  0AA5               	incf	___aomod@divisor+5,f
 14607  0C8F  1D03               	skipz
 14608  0C90  2C95               	goto	l6927
 14609  0C91  0AA6               	incf	___aomod@divisor+6,f
 14610  0C92  1D03               	skipz
 14611  0C93  2C95               	goto	l6927
 14612  0C94  0AA7               	incf	___aomod@divisor+7,f
 14613  0C95                     l6927:	
 14614  0C95  0020               	movlb	0	; select bank0
 14615  0C96  0820               	movf	___aomod@divisor,w
 14616  0C97  0421               	iorwf	___aomod@divisor+1,w
 14617  0C98  0422               	iorwf	___aomod@divisor+2,w
 14618  0C99  0423               	iorwf	___aomod@divisor+3,w
 14619  0C9A  0424               	iorwf	___aomod@divisor+4,w
 14620  0C9B  0425               	iorwf	___aomod@divisor+5,w
 14621  0C9C  0426               	iorwf	___aomod@divisor+6,w
 14622  0C9D  0427               	iorwf	___aomod@divisor+7,w
 14623  0C9E  1903               	skipnz
 14624  0C9F  2CED               	goto	l6943
 14625  0CA0  01B1               	clrf	___aomod@counter
 14626  0CA1  0AB1               	incf	___aomod@counter,f
 14627  0CA2                     l6935:	
 14628  0CA2  1BA7               	btfsc	___aomod@divisor+7,7
 14629  0CA3  2CB1               	goto	l6937
 14630  0CA4  35A0               	lslf	___aomod@divisor,f
 14631  0CA5  0DA1               	rlf	___aomod@divisor+1,f
 14632  0CA6  0DA2               	rlf	___aomod@divisor+2,f
 14633  0CA7  0DA3               	rlf	___aomod@divisor+3,f
 14634  0CA8  0DA4               	rlf	___aomod@divisor+4,f
 14635  0CA9  0DA5               	rlf	___aomod@divisor+5,f
 14636  0CAA  0DA6               	rlf	___aomod@divisor+6,f
 14637  0CAB  0DA7               	rlf	___aomod@divisor+7,f
 14638  0CAC  3001               	movlw	1
 14639  0CAD  00B0               	movwf	??___aomod
 14640  0CAE  0830               	movf	??___aomod,w
 14641  0CAF  07B1               	addwf	___aomod@counter,f
 14642  0CB0  2CA2               	goto	l6935
 14643  0CB1                     l6937:	
 14644  0CB1  0827               	movf	___aomod@divisor+7,w
 14645  0CB2  022F               	subwf	___aomod@dividend+7,w
 14646  0CB3  1D03               	skipz
 14647  0CB4  2CCF               	goto	u6295
 14648  0CB5  0826               	movf	___aomod@divisor+6,w
 14649  0CB6  022E               	subwf	___aomod@dividend+6,w
 14650  0CB7  1D03               	skipz
 14651  0CB8  2CCF               	goto	u6295
 14652  0CB9  0825               	movf	___aomod@divisor+5,w
 14653  0CBA  022D               	subwf	___aomod@dividend+5,w
 14654  0CBB  1D03               	skipz
 14655  0CBC  2CCF               	goto	u6295
 14656  0CBD  0824               	movf	___aomod@divisor+4,w
 14657  0CBE  022C               	subwf	___aomod@dividend+4,w
 14658  0CBF  1D03               	skipz
 14659  0CC0  2CCF               	goto	u6295
 14660  0CC1  0823               	movf	___aomod@divisor+3,w
 14661  0CC2  022B               	subwf	___aomod@dividend+3,w
 14662  0CC3  1D03               	skipz
 14663  0CC4  2CCF               	goto	u6295
 14664  0CC5  0822               	movf	___aomod@divisor+2,w
 14665  0CC6  022A               	subwf	___aomod@dividend+2,w
 14666  0CC7  1D03               	skipz
 14667  0CC8  2CCF               	goto	u6295
 14668  0CC9  0821               	movf	___aomod@divisor+1,w
 14669  0CCA  0229               	subwf	___aomod@dividend+1,w
 14670  0CCB  1D03               	skipz
 14671  0CCC  2CCF               	goto	u6295
 14672  0CCD  0820               	movf	___aomod@divisor,w
 14673  0CCE  0228               	subwf	___aomod@dividend,w
 14674  0CCF                     u6295:	
 14675  0CCF  1C03               	skipc
 14676  0CD0  2CE1               	goto	l6941
 14677  0CD1  0820               	movf	___aomod@divisor,w
 14678  0CD2  02A8               	subwf	___aomod@dividend,f
 14679  0CD3  0821               	movf	___aomod@divisor+1,w
 14680  0CD4  3BA9               	subwfb	___aomod@dividend+1,f
 14681  0CD5  0822               	movf	___aomod@divisor+2,w
 14682  0CD6  3BAA               	subwfb	___aomod@dividend+2,f
 14683  0CD7  0823               	movf	___aomod@divisor+3,w
 14684  0CD8  3BAB               	subwfb	___aomod@dividend+3,f
 14685  0CD9  0824               	movf	___aomod@divisor+4,w
 14686  0CDA  3BAC               	subwfb	___aomod@dividend+4,f
 14687  0CDB  0825               	movf	___aomod@divisor+5,w
 14688  0CDC  3BAD               	subwfb	___aomod@dividend+5,f
 14689  0CDD  0826               	movf	___aomod@divisor+6,w
 14690  0CDE  3BAE               	subwfb	___aomod@dividend+6,f
 14691  0CDF  0827               	movf	___aomod@divisor+7,w
 14692  0CE0  3BAF               	subwfb	___aomod@dividend+7,f
 14693  0CE1                     l6941:	
 14694  0CE1  36A7               	lsrf	___aomod@divisor+7,f
 14695  0CE2  0CA6               	rrf	___aomod@divisor+6,f
 14696  0CE3  0CA5               	rrf	___aomod@divisor+5,f
 14697  0CE4  0CA4               	rrf	___aomod@divisor+4,f
 14698  0CE5  0CA3               	rrf	___aomod@divisor+3,f
 14699  0CE6  0CA2               	rrf	___aomod@divisor+2,f
 14700  0CE7  0CA1               	rrf	___aomod@divisor+1,f
 14701  0CE8  0CA0               	rrf	___aomod@divisor,f
 14702  0CE9  3001               	movlw	1
 14703  0CEA  02B1               	subwf	___aomod@counter,f
 14704  0CEB  1D03               	btfss	3,2
 14705  0CEC  2CB1               	goto	l6937
 14706  0CED                     l6943:	
 14707  0CED  0832               	movf	___aomod@sign,w
 14708  0CEE  1903               	btfsc	3,2
 14709  0CEF  2D0E               	goto	l1789
 14710  0CF0  09A8               	comf	___aomod@dividend,f
 14711  0CF1  09A9               	comf	___aomod@dividend+1,f
 14712  0CF2  09AA               	comf	___aomod@dividend+2,f
 14713  0CF3  09AB               	comf	___aomod@dividend+3,f
 14714  0CF4  09AC               	comf	___aomod@dividend+4,f
 14715  0CF5  09AD               	comf	___aomod@dividend+5,f
 14716  0CF6  09AE               	comf	___aomod@dividend+6,f
 14717  0CF7  09AF               	comf	___aomod@dividend+7,f
 14718  0CF8  0AA8               	incf	___aomod@dividend,f
 14719  0CF9  1D03               	skipz
 14720  0CFA  2D0E               	goto	l1789
 14721  0CFB  0AA9               	incf	___aomod@dividend+1,f
 14722  0CFC  1D03               	skipz
 14723  0CFD  2D0E               	goto	l1789
 14724  0CFE  0AAA               	incf	___aomod@dividend+2,f
 14725  0CFF  1D03               	skipz
 14726  0D00  2D0E               	goto	l1789
 14727  0D01  0AAB               	incf	___aomod@dividend+3,f
 14728  0D02  1D03               	skipz
 14729  0D03  2D0E               	goto	l1789
 14730  0D04  0AAC               	incf	___aomod@dividend+4,f
 14731  0D05  1D03               	skipz
 14732  0D06  2D0E               	goto	l1789
 14733  0D07  0AAD               	incf	___aomod@dividend+5,f
 14734  0D08  1D03               	skipz
 14735  0D09  2D0E               	goto	l1789
 14736  0D0A  0AAE               	incf	___aomod@dividend+6,f
 14737  0D0B  1D03               	skipz
 14738  0D0C  2D0E               	goto	l1789
 14739  0D0D  0AAF               	incf	___aomod@dividend+7,f
 14740  0D0E                     l1789:	
 14741  0D0E  0020               	movlb	0	; select bank0
 14742  0D0F  0828               	movf	___aomod@dividend,w
 14743  0D10  00A0               	movwf	?___aomod
 14744  0D11  0829               	movf	___aomod@dividend+1,w
 14745  0D12  00A1               	movwf	?___aomod+1
 14746  0D13  082A               	movf	___aomod@dividend+2,w
 14747  0D14  00A2               	movwf	?___aomod+2
 14748  0D15  082B               	movf	___aomod@dividend+3,w
 14749  0D16  00A3               	movwf	?___aomod+3
 14750  0D17  082C               	movf	___aomod@dividend+4,w
 14751  0D18  00A4               	movwf	?___aomod+4
 14752  0D19  082D               	movf	___aomod@dividend+5,w
 14753  0D1A  00A5               	movwf	?___aomod+5
 14754  0D1B  082E               	movf	___aomod@dividend+6,w
 14755  0D1C  00A6               	movwf	?___aomod+6
 14756  0D1D  082F               	movf	___aomod@dividend+7,w
 14757  0D1E  00A7               	movwf	?___aomod+7
 14758  0D1F  0008               	return
 14759  0D20                     __end_of___aomod:	
 14760                           
 14761                           	psect	text61
 14762  0F09                     __ptext61:	
 14763 ;; *************** function ___aodiv *****************
 14764 ;; Defined at:
 14765 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;  divisor         8    0[BANK0 ] long long 
 14768 ;;  dividend        8    8[BANK0 ] long long 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  quotient        8   19[BANK0 ] long long 
 14771 ;;  sign            1   18[BANK0 ] unsigned char 
 14772 ;;  counter         1   17[BANK0 ] unsigned char 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;                  8    0[BANK0 ] long long 
 14775 ;; Registers used:
 14776 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:       27 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    5
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_dtoa
 14793 ;; This function uses a non-reentrant model
 14794 ;;
 14795                           
 14796                           
 14797                           ;psect for function ___aodiv
 14798  0F09                     ___aodiv:	
 14799                           
 14800                           ;incstack = 0
 14801                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 14802  0F09  0020               	movlb	0	; select bank0
 14803  0F0A  01B2               	clrf	___aodiv@sign
 14804  0F0B  3020               	movlw	low ___aodiv@divisor
 14805  0F0C  0086               	movwf	6
 14806  0F0D  3000               	movlw	high ___aodiv@divisor
 14807  0F0E  0087               	movwf	7
 14808  0F0F  3F47               	moviw [7]fsr1
 14809  0F10  00B0               	movwf	??___aodiv
 14810  0F11  1FB0               	btfss	??___aodiv,7
 14811  0F12  2F35               	goto	l6885
 14812  0F13  0020               	movlb	0	; select bank0
 14813  0F14  09A0               	comf	___aodiv@divisor,f
 14814  0F15  09A1               	comf	___aodiv@divisor+1,f
 14815  0F16  09A2               	comf	___aodiv@divisor+2,f
 14816  0F17  09A3               	comf	___aodiv@divisor+3,f
 14817  0F18  09A4               	comf	___aodiv@divisor+4,f
 14818  0F19  09A5               	comf	___aodiv@divisor+5,f
 14819  0F1A  09A6               	comf	___aodiv@divisor+6,f
 14820  0F1B  09A7               	comf	___aodiv@divisor+7,f
 14821  0F1C  0AA0               	incf	___aodiv@divisor,f
 14822  0F1D  1D03               	skipz
 14823  0F1E  2F32               	goto	u613lld
 14824  0F1F  0AA1               	incf	___aodiv@divisor+1,f
 14825  0F20  1D03               	skipz
 14826  0F21  2F32               	goto	u613lld
 14827  0F22  0AA2               	incf	___aodiv@divisor+2,f
 14828  0F23  1D03               	skipz
 14829  0F24  2F32               	goto	u613lld
 14830  0F25  0AA3               	incf	___aodiv@divisor+3,f
 14831  0F26  1D03               	skipz
 14832  0F27  2F32               	goto	u613lld
 14833  0F28  0AA4               	incf	___aodiv@divisor+4,f
 14834  0F29  1D03               	skipz
 14835  0F2A  2F32               	goto	u613lld
 14836  0F2B  0AA5               	incf	___aodiv@divisor+5,f
 14837  0F2C  1D03               	skipz
 14838  0F2D  2F32               	goto	u613lld
 14839  0F2E  0AA6               	incf	___aodiv@divisor+6,f
 14840  0F2F  1D03               	skipz
 14841  0F30  2F32               	goto	u613lld
 14842  0F31  0AA7               	incf	___aodiv@divisor+7,f
 14843  0F32                     u613lld:	
 14844  0F32  0020               	movlb	0	; select bank0
 14845  0F33  01B2               	clrf	___aodiv@sign
 14846  0F34  0AB2               	incf	___aodiv@sign,f
 14847  0F35                     l6885:	
 14848  0F35  3028               	movlw	low ___aodiv@dividend
 14849  0F36  0086               	movwf	6
 14850  0F37  3000               	movlw	high ___aodiv@dividend
 14851  0F38  0087               	movwf	7
 14852  0F39  3F47               	moviw [7]fsr1
 14853  0F3A  0020               	movlb	0	; select bank0
 14854  0F3B  00B0               	movwf	??___aodiv
 14855  0F3C  1FB0               	btfss	??___aodiv,7
 14856  0F3D  2F62               	goto	l6891
 14857  0F3E  0020               	movlb	0	; select bank0
 14858  0F3F  09A8               	comf	___aodiv@dividend,f
 14859  0F40  09A9               	comf	___aodiv@dividend+1,f
 14860  0F41  09AA               	comf	___aodiv@dividend+2,f
 14861  0F42  09AB               	comf	___aodiv@dividend+3,f
 14862  0F43  09AC               	comf	___aodiv@dividend+4,f
 14863  0F44  09AD               	comf	___aodiv@dividend+5,f
 14864  0F45  09AE               	comf	___aodiv@dividend+6,f
 14865  0F46  09AF               	comf	___aodiv@dividend+7,f
 14866  0F47  0AA8               	incf	___aodiv@dividend,f
 14867  0F48  1D03               	skipz
 14868  0F49  2F5D               	goto	l6889
 14869  0F4A  0AA9               	incf	___aodiv@dividend+1,f
 14870  0F4B  1D03               	skipz
 14871  0F4C  2F5D               	goto	l6889
 14872  0F4D  0AAA               	incf	___aodiv@dividend+2,f
 14873  0F4E  1D03               	skipz
 14874  0F4F  2F5D               	goto	l6889
 14875  0F50  0AAB               	incf	___aodiv@dividend+3,f
 14876  0F51  1D03               	skipz
 14877  0F52  2F5D               	goto	l6889
 14878  0F53  0AAC               	incf	___aodiv@dividend+4,f
 14879  0F54  1D03               	skipz
 14880  0F55  2F5D               	goto	l6889
 14881  0F56  0AAD               	incf	___aodiv@dividend+5,f
 14882  0F57  1D03               	skipz
 14883  0F58  2F5D               	goto	l6889
 14884  0F59  0AAE               	incf	___aodiv@dividend+6,f
 14885  0F5A  1D03               	skipz
 14886  0F5B  2F5D               	goto	l6889
 14887  0F5C  0AAF               	incf	___aodiv@dividend+7,f
 14888  0F5D                     l6889:	
 14889  0F5D  3001               	movlw	1
 14890  0F5E  0020               	movlb	0	; select bank0
 14891  0F5F  00B0               	movwf	??___aodiv
 14892  0F60  0830               	movf	??___aodiv,w
 14893  0F61  06B2               	xorwf	___aodiv@sign,f
 14894  0F62                     l6891:	
 14895  0F62  3033               	movlw	low ___aodiv@quotient
 14896  0F63  0086               	movwf	6
 14897  0F64  3000               	movlw	high ___aodiv@quotient
 14898  0F65  0087               	movwf	7
 14899  0F66  3008               	movlw	8
 14900  0F67  0020               	movlb	0	; select bank0
 14901  0F68  00B0               	movwf	??___aodiv
 14902  0F69  3000               	movlw	0
 14903  0F6A                     u6160:	
 14904  0F6A  001E               	movwi fsr1++
 14905  0F6B  0BB0               	decfsz	??___aodiv,f
 14906  0F6C  2F6A               	goto	u6160
 14907  0F6D  0820               	movf	___aodiv@divisor,w
 14908  0F6E  0421               	iorwf	___aodiv@divisor+1,w
 14909  0F6F  0422               	iorwf	___aodiv@divisor+2,w
 14910  0F70  0423               	iorwf	___aodiv@divisor+3,w
 14911  0F71  0424               	iorwf	___aodiv@divisor+4,w
 14912  0F72  0425               	iorwf	___aodiv@divisor+5,w
 14913  0F73  0426               	iorwf	___aodiv@divisor+6,w
 14914  0F74  0427               	iorwf	___aodiv@divisor+7,w
 14915  0F75  1903               	skipnz
 14916  0F76  2FCD               	goto	l6913
 14917  0F77  01B1               	clrf	___aodiv@counter
 14918  0F78  0AB1               	incf	___aodiv@counter,f
 14919  0F79                     l6901:	
 14920  0F79  1BA7               	btfsc	___aodiv@divisor+7,7
 14921  0F7A  2F88               	goto	l6903
 14922  0F7B  35A0               	lslf	___aodiv@divisor,f
 14923  0F7C  0DA1               	rlf	___aodiv@divisor+1,f
 14924  0F7D  0DA2               	rlf	___aodiv@divisor+2,f
 14925  0F7E  0DA3               	rlf	___aodiv@divisor+3,f
 14926  0F7F  0DA4               	rlf	___aodiv@divisor+4,f
 14927  0F80  0DA5               	rlf	___aodiv@divisor+5,f
 14928  0F81  0DA6               	rlf	___aodiv@divisor+6,f
 14929  0F82  0DA7               	rlf	___aodiv@divisor+7,f
 14930  0F83  3001               	movlw	1
 14931  0F84  00B0               	movwf	??___aodiv
 14932  0F85  0830               	movf	??___aodiv,w
 14933  0F86  07B1               	addwf	___aodiv@counter,f
 14934  0F87  2F79               	goto	l6901
 14935  0F88                     l6903:	
 14936  0F88  35B3               	lslf	___aodiv@quotient,f
 14937  0F89  0DB4               	rlf	___aodiv@quotient+1,f
 14938  0F8A  0DB5               	rlf	___aodiv@quotient+2,f
 14939  0F8B  0DB6               	rlf	___aodiv@quotient+3,f
 14940  0F8C  0DB7               	rlf	___aodiv@quotient+4,f
 14941  0F8D  0DB8               	rlf	___aodiv@quotient+5,f
 14942  0F8E  0DB9               	rlf	___aodiv@quotient+6,f
 14943  0F8F  0DBA               	rlf	___aodiv@quotient+7,f
 14944  0F90  0827               	movf	___aodiv@divisor+7,w
 14945  0F91  022F               	subwf	___aodiv@dividend+7,w
 14946  0F92  1D03               	skipz
 14947  0F93  2FAE               	goto	u6195
 14948  0F94  0826               	movf	___aodiv@divisor+6,w
 14949  0F95  022E               	subwf	___aodiv@dividend+6,w
 14950  0F96  1D03               	skipz
 14951  0F97  2FAE               	goto	u6195
 14952  0F98  0825               	movf	___aodiv@divisor+5,w
 14953  0F99  022D               	subwf	___aodiv@dividend+5,w
 14954  0F9A  1D03               	skipz
 14955  0F9B  2FAE               	goto	u6195
 14956  0F9C  0824               	movf	___aodiv@divisor+4,w
 14957  0F9D  022C               	subwf	___aodiv@dividend+4,w
 14958  0F9E  1D03               	skipz
 14959  0F9F  2FAE               	goto	u6195
 14960  0FA0  0823               	movf	___aodiv@divisor+3,w
 14961  0FA1  022B               	subwf	___aodiv@dividend+3,w
 14962  0FA2  1D03               	skipz
 14963  0FA3  2FAE               	goto	u6195
 14964  0FA4  0822               	movf	___aodiv@divisor+2,w
 14965  0FA5  022A               	subwf	___aodiv@dividend+2,w
 14966  0FA6  1D03               	skipz
 14967  0FA7  2FAE               	goto	u6195
 14968  0FA8  0821               	movf	___aodiv@divisor+1,w
 14969  0FA9  0229               	subwf	___aodiv@dividend+1,w
 14970  0FAA  1D03               	skipz
 14971  0FAB  2FAE               	goto	u6195
 14972  0FAC  0820               	movf	___aodiv@divisor,w
 14973  0FAD  0228               	subwf	___aodiv@dividend,w
 14974  0FAE                     u6195:	
 14975  0FAE  1C03               	skipc
 14976  0FAF  2FC1               	goto	l6911
 14977  0FB0  0820               	movf	___aodiv@divisor,w
 14978  0FB1  02A8               	subwf	___aodiv@dividend,f
 14979  0FB2  0821               	movf	___aodiv@divisor+1,w
 14980  0FB3  3BA9               	subwfb	___aodiv@dividend+1,f
 14981  0FB4  0822               	movf	___aodiv@divisor+2,w
 14982  0FB5  3BAA               	subwfb	___aodiv@dividend+2,f
 14983  0FB6  0823               	movf	___aodiv@divisor+3,w
 14984  0FB7  3BAB               	subwfb	___aodiv@dividend+3,f
 14985  0FB8  0824               	movf	___aodiv@divisor+4,w
 14986  0FB9  3BAC               	subwfb	___aodiv@dividend+4,f
 14987  0FBA  0825               	movf	___aodiv@divisor+5,w
 14988  0FBB  3BAD               	subwfb	___aodiv@dividend+5,f
 14989  0FBC  0826               	movf	___aodiv@divisor+6,w
 14990  0FBD  3BAE               	subwfb	___aodiv@dividend+6,f
 14991  0FBE  0827               	movf	___aodiv@divisor+7,w
 14992  0FBF  3BAF               	subwfb	___aodiv@dividend+7,f
 14993  0FC0  1433               	bsf	___aodiv@quotient,0
 14994  0FC1                     l6911:	
 14995  0FC1  36A7               	lsrf	___aodiv@divisor+7,f
 14996  0FC2  0CA6               	rrf	___aodiv@divisor+6,f
 14997  0FC3  0CA5               	rrf	___aodiv@divisor+5,f
 14998  0FC4  0CA4               	rrf	___aodiv@divisor+4,f
 14999  0FC5  0CA3               	rrf	___aodiv@divisor+3,f
 15000  0FC6  0CA2               	rrf	___aodiv@divisor+2,f
 15001  0FC7  0CA1               	rrf	___aodiv@divisor+1,f
 15002  0FC8  0CA0               	rrf	___aodiv@divisor,f
 15003  0FC9  3001               	movlw	1
 15004  0FCA  02B1               	subwf	___aodiv@counter,f
 15005  0FCB  1D03               	btfss	3,2
 15006  0FCC  2F88               	goto	l6903
 15007  0FCD                     l6913:	
 15008  0FCD  0832               	movf	___aodiv@sign,w
 15009  0FCE  1903               	btfsc	3,2
 15010  0FCF  2FEE               	goto	l1776
 15011  0FD0  09B3               	comf	___aodiv@quotient,f
 15012  0FD1  09B4               	comf	___aodiv@quotient+1,f
 15013  0FD2  09B5               	comf	___aodiv@quotient+2,f
 15014  0FD3  09B6               	comf	___aodiv@quotient+3,f
 15015  0FD4  09B7               	comf	___aodiv@quotient+4,f
 15016  0FD5  09B8               	comf	___aodiv@quotient+5,f
 15017  0FD6  09B9               	comf	___aodiv@quotient+6,f
 15018  0FD7  09BA               	comf	___aodiv@quotient+7,f
 15019  0FD8  0AB3               	incf	___aodiv@quotient,f
 15020  0FD9  1D03               	skipz
 15021  0FDA  2FEE               	goto	l1776
 15022  0FDB  0AB4               	incf	___aodiv@quotient+1,f
 15023  0FDC  1D03               	skipz
 15024  0FDD  2FEE               	goto	l1776
 15025  0FDE  0AB5               	incf	___aodiv@quotient+2,f
 15026  0FDF  1D03               	skipz
 15027  0FE0  2FEE               	goto	l1776
 15028  0FE1  0AB6               	incf	___aodiv@quotient+3,f
 15029  0FE2  1D03               	skipz
 15030  0FE3  2FEE               	goto	l1776
 15031  0FE4  0AB7               	incf	___aodiv@quotient+4,f
 15032  0FE5  1D03               	skipz
 15033  0FE6  2FEE               	goto	l1776
 15034  0FE7  0AB8               	incf	___aodiv@quotient+5,f
 15035  0FE8  1D03               	skipz
 15036  0FE9  2FEE               	goto	l1776
 15037  0FEA  0AB9               	incf	___aodiv@quotient+6,f
 15038  0FEB  1D03               	skipz
 15039  0FEC  2FEE               	goto	l1776
 15040  0FED  0ABA               	incf	___aodiv@quotient+7,f
 15041  0FEE                     l1776:	
 15042  0FEE  0020               	movlb	0	; select bank0
 15043  0FEF  0833               	movf	___aodiv@quotient,w
 15044  0FF0  00A0               	movwf	?___aodiv
 15045  0FF1  0834               	movf	___aodiv@quotient+1,w
 15046  0FF2  00A1               	movwf	?___aodiv+1
 15047  0FF3  0835               	movf	___aodiv@quotient+2,w
 15048  0FF4  00A2               	movwf	?___aodiv+2
 15049  0FF5  0836               	movf	___aodiv@quotient+3,w
 15050  0FF6  00A3               	movwf	?___aodiv+3
 15051  0FF7  0837               	movf	___aodiv@quotient+4,w
 15052  0FF8  00A4               	movwf	?___aodiv+4
 15053  0FF9  0838               	movf	___aodiv@quotient+5,w
 15054  0FFA  00A5               	movwf	?___aodiv+5
 15055  0FFB  0839               	movf	___aodiv@quotient+6,w
 15056  0FFC  00A6               	movwf	?___aodiv+6
 15057  0FFD  083A               	movf	___aodiv@quotient+7,w
 15058  0FFE  00A7               	movwf	?___aodiv+7
 15059  0FFF  0008               	return
 15060  1000                     __end_of___aodiv:	
 15061                           
 15062                           	psect	text62
 15063  1357                     __ptext62:	
 15064 ;; *************** function _SYSTEM_Initialize *****************
 15065 ;; Defined at:
 15066 ;;		line 50 in file "mcc_generated_files/mcc.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;		None
 15069 ;; Auto vars:     Size  Location     Type
 15070 ;;		None
 15071 ;; Return value:  Size  Location     Type
 15072 ;;                  1    wreg      void 
 15073 ;; Registers used:
 15074 ;;		wreg, status,2, status,0, pclath, cstack
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;Total ram usage:        0 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    7
 15087 ;; This function calls:
 15088 ;;		_ADC_Initialize
 15089 ;;		_EUSART_Initialize
 15090 ;;		_OSCILLATOR_Initialize
 15091 ;;		_PIN_MANAGER_Initialize
 15092 ;;		_PMD_Initialize
 15093 ;;		_PWM1_Initialize
 15094 ;;		_SPI2_Initialize
 15095 ;;		_TMR2_Initialize
 15096 ;;		_WDT_Initialize
 15097 ;; This function is called by:
 15098 ;;		_main
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           
 15103                           ;psect for function _SYSTEM_Initialize
 15104  1357                     _SYSTEM_Initialize:	
 15105                           
 15106                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 15107                           
 15108                           ;incstack = 0
 15109                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 15110  1357  3191  21A2  3193   	fcall	_PMD_Initialize
 15111                           
 15112                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 15113  135A  3197  2744  3193   	fcall	_PIN_MANAGER_Initialize
 15114                           
 15115                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 15116  135D  3191  219A  3193   	fcall	_OSCILLATOR_Initialize
 15117                           
 15118                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 15119  1360  3191  2136  3193   	fcall	_WDT_Initialize
 15120                           
 15121                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 15122  1363  3191  2174  3193   	fcall	_SPI2_Initialize
 15123                           
 15124                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 15125  1366  3192  221A  3193   	fcall	_PWM1_Initialize
 15126                           
 15127                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 15128  1369  3191  2192  3193   	fcall	_ADC_Initialize
 15129                           
 15130                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 15131  136C  3191  21AA  3193   	fcall	_TMR2_Initialize
 15132                           
 15133                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
 15134  136F  3188  202F         	fcall	_EUSART_Initialize
 15135  1371  0008               	return
 15136  1372                     __end_of_SYSTEM_Initialize:	
 15137                           
 15138                           	psect	text63
 15139  1136                     __ptext63:	
 15140 ;; *************** function _WDT_Initialize *****************
 15141 ;; Defined at:
 15142 ;;		line 78 in file "mcc_generated_files/mcc.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;		None
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;		None
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  1    wreg      void 
 15149 ;; Registers used:
 15150 ;;		wreg
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;Total ram usage:        0 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    5
 15163 ;; This function calls:
 15164 ;;		Nothing
 15165 ;; This function is called by:
 15166 ;;		_SYSTEM_Initialize
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           
 15171                           ;psect for function _WDT_Initialize
 15172  1136                     _WDT_Initialize:	
 15173                           
 15174                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x18;
 15175                           
 15176                           ;incstack = 0
 15177                           ; Regs used in _WDT_Initialize: [wreg]
 15178  1136  3018               	movlw	24
 15179  1137  0021               	movlb	1	; select bank1
 15180  1138  0097               	movwf	23	;volatile
 15181  1139  0008               	return
 15182  113A                     __end_of_WDT_Initialize:	
 15183                           
 15184                           	psect	text64
 15185  11AA                     __ptext64:	
 15186 ;; *************** function _TMR2_Initialize *****************
 15187 ;; Defined at:
 15188 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;		None
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;		None
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  1    wreg      void 
 15195 ;; Registers used:
 15196 ;;		wreg, status,2
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;Total ram usage:        0 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    5
 15209 ;; This function calls:
 15210 ;;		Nothing
 15211 ;; This function is called by:
 15212 ;;		_SYSTEM_Initialize
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           
 15217                           ;psect for function _TMR2_Initialize
 15218  11AA                     _TMR2_Initialize:	
 15219                           
 15220                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 15221                           
 15222                           ;incstack = 0
 15223                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 15224  11AA  30FF               	movlw	255
 15225  11AB  0020               	movlb	0	; select bank0
 15226  11AC  009E               	movwf	30	;volatile
 15227                           
 15228                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 15229  11AD  019D               	clrf	29	;volatile
 15230                           
 15231                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 15232  11AE  1091               	bcf	17,1	;volatile
 15233                           
 15234                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 15235  11AF  3004               	movlw	4
 15236  11B0  009F               	movwf	31	;volatile
 15237  11B1  0008               	return
 15238  11B2                     __end_of_TMR2_Initialize:	
 15239                           
 15240                           	psect	text65
 15241  1174                     __ptext65:	
 15242 ;; *************** function _SPI2_Initialize *****************
 15243 ;; Defined at:
 15244 ;;		line 65 in file "mcc_generated_files/spi2.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;		None
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;		None
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  1    wreg      void 
 15251 ;; Registers used:
 15252 ;;		wreg, status,2
 15253 ;; Tracked objects:
 15254 ;;		On entry : 0/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;Total ram usage:        0 bytes
 15263 ;; Hardware stack levels used:    1
 15264 ;; Hardware stack levels required when called:    5
 15265 ;; This function calls:
 15266 ;;		Nothing
 15267 ;; This function is called by:
 15268 ;;		_SYSTEM_Initialize
 15269 ;; This function uses a non-reentrant model
 15270 ;;
 15271                           
 15272                           
 15273                           ;psect for function _SPI2_Initialize
 15274  1174                     _SPI2_Initialize:	
 15275                           
 15276                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 15277                           
 15278                           ;incstack = 0
 15279                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 15280  1174  3080               	movlw	128
 15281  1175  0024               	movlb	4	; select bank4
 15282  1176  009C               	movwf	28	;volatile
 15283                           
 15284                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 15285  1177  3031               	movlw	49
 15286  1178  009D               	movwf	29	;volatile
 15287                           
 15288                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 15289  1179  019A               	clrf	26	;volatile
 15290  117A  0008               	return
 15291  117B                     __end_of_SPI2_Initialize:	
 15292                           
 15293                           	psect	text66
 15294  121A                     __ptext66:	
 15295 ;; *************** function _PWM1_Initialize *****************
 15296 ;; Defined at:
 15297 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 15298 ;; Parameters:    Size  Location     Type
 15299 ;;		None
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;		None
 15302 ;; Return value:  Size  Location     Type
 15303 ;;                  1    wreg      void 
 15304 ;; Registers used:
 15305 ;;		wreg, status,2, status,0
 15306 ;; Tracked objects:
 15307 ;;		On entry : 0/0
 15308 ;;		On exit  : 0/0
 15309 ;;		Unchanged: 0/0
 15310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;Total ram usage:        0 bytes
 15316 ;; Hardware stack levels used:    1
 15317 ;; Hardware stack levels required when called:    5
 15318 ;; This function calls:
 15319 ;;		Nothing
 15320 ;; This function is called by:
 15321 ;;		_SYSTEM_Initialize
 15322 ;; This function uses a non-reentrant model
 15323 ;;
 15324                           
 15325                           
 15326                           ;psect for function _PWM1_Initialize
 15327  121A                     _PWM1_Initialize:	
 15328                           
 15329                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 15330                           
 15331                           ;incstack = 0
 15332                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 15333  121A  308F               	movlw	143
 15334  121B  0025               	movlb	5	; select bank5
 15335  121C  0093               	movwf	19	;volatile
 15336                           
 15337                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 15338  121D  3001               	movlw	1
 15339  121E  0092               	movwf	18	;volatile
 15340                           
 15341                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0xFF;
 15342  121F  30FF               	movlw	255
 15343  1220  0091               	movwf	17	;volatile
 15344                           
 15345                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 15346  1221  081F               	movf	31,w	;volatile
 15347  1222  39FC               	andlw	-4
 15348  1223  3801               	iorlw	1
 15349  1224  009F               	movwf	31	;volatile
 15350  1225  0008               	return
 15351  1226                     __end_of_PWM1_Initialize:	
 15352                           
 15353                           	psect	text67
 15354  11A2                     __ptext67:	
 15355 ;; *************** function _PMD_Initialize *****************
 15356 ;; Defined at:
 15357 ;;		line 84 in file "mcc_generated_files/mcc.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;		None
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;		None
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  1    wreg      void 
 15364 ;; Registers used:
 15365 ;;		status,2
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;Total ram usage:        0 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; Hardware stack levels required when called:    5
 15378 ;; This function calls:
 15379 ;;		Nothing
 15380 ;; This function is called by:
 15381 ;;		_SYSTEM_Initialize
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _PMD_Initialize
 15387  11A2                     _PMD_Initialize:	
 15388                           
 15389                           ;mcc_generated_files/mcc.c: 87:     PMD0 = 0x00;
 15390                           
 15391                           ;incstack = 0
 15392                           ; Regs used in _PMD_Initialize: [status,2]
 15393  11A2  0032               	movlb	18	; select bank18
 15394  11A3  0191               	clrf	17	;volatile
 15395                           
 15396                           ;mcc_generated_files/mcc.c: 89:     PMD1 = 0x00;
 15397  11A4  0192               	clrf	18	;volatile
 15398                           
 15399                           ;mcc_generated_files/mcc.c: 91:     PMD2 = 0x00;
 15400  11A5  0193               	clrf	19	;volatile
 15401                           
 15402                           ;mcc_generated_files/mcc.c: 93:     PMD3 = 0x00;
 15403  11A6  0194               	clrf	20	;volatile
 15404                           
 15405                           ;mcc_generated_files/mcc.c: 95:     PMD4 = 0x00;
 15406  11A7  0195               	clrf	21	;volatile
 15407                           
 15408                           ;mcc_generated_files/mcc.c: 97:     PMD5 = 0x00;
 15409  11A8  0196               	clrf	22	;volatile
 15410  11A9  0008               	return
 15411  11AA                     __end_of_PMD_Initialize:	
 15412                           
 15413                           	psect	text68
 15414  1744                     __ptext68:	
 15415 ;; *************** function _PIN_MANAGER_Initialize *****************
 15416 ;; Defined at:
 15417 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 15418 ;; Parameters:    Size  Location     Type
 15419 ;;		None
 15420 ;; Auto vars:     Size  Location     Type
 15421 ;;		None
 15422 ;; Return value:  Size  Location     Type
 15423 ;;                  1    wreg      void 
 15424 ;; Registers used:
 15425 ;;		wreg, status,2
 15426 ;; Tracked objects:
 15427 ;;		On entry : 0/0
 15428 ;;		On exit  : 0/0
 15429 ;;		Unchanged: 0/0
 15430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;Total ram usage:        0 bytes
 15436 ;; Hardware stack levels used:    1
 15437 ;; Hardware stack levels required when called:    5
 15438 ;; This function calls:
 15439 ;;		Nothing
 15440 ;; This function is called by:
 15441 ;;		_SYSTEM_Initialize
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           
 15446                           ;psect for function _PIN_MANAGER_Initialize
 15447  1744                     _PIN_MANAGER_Initialize:	
 15448                           
 15449                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 15450                           
 15451                           ;incstack = 0
 15452                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 15453  1744  0022               	movlb	2	; select bank2
 15454  1745  018C               	clrf	12	;volatile
 15455                           
 15456                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 15457  1746  018D               	clrf	13	;volatile
 15458                           
 15459                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 15460  1747  018E               	clrf	14	;volatile
 15461                           
 15462                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
 15463  1748  3033               	movlw	51
 15464  1749  0021               	movlb	1	; select bank1
 15465  174A  008C               	movwf	12	;volatile
 15466                           
 15467                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 15468  174B  30B0               	movlw	176
 15469  174C  008D               	movwf	13	;volatile
 15470                           
 15471                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x99;
 15472  174D  3099               	movlw	153
 15473  174E  008E               	movwf	14	;volatile
 15474                           
 15475                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE4;
 15476  174F  30E4               	movlw	228
 15477  1750  0023               	movlb	3	; select bank3
 15478  1751  008E               	movwf	14	;volatile
 15479                           
 15480                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 15481  1752  018D               	clrf	13	;volatile
 15482                           
 15483                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 15484  1753  3011               	movlw	17
 15485  1754  008C               	movwf	12	;volatile
 15486                           
 15487                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 15488  1755  0024               	movlb	4	; select bank4
 15489  1756  018D               	clrf	13	;volatile
 15490                           
 15491                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 15492  1757  018C               	clrf	12	;volatile
 15493                           
 15494                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 15495  1758  018E               	clrf	14	;volatile
 15496                           
 15497                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 15498  1759  0025               	movlb	5	; select bank5
 15499  175A  018C               	clrf	12	;volatile
 15500                           
 15501                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 15502  175B  018D               	clrf	13	;volatile
 15503                           
 15504                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 15505  175C  018E               	clrf	14	;volatile
 15506                           
 15507                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 15508  175D  3037               	movlw	55
 15509  175E  0026               	movlb	6	; select bank6
 15510  175F  008C               	movwf	12	;volatile
 15511                           
 15512                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 15513  1760  30F0               	movlw	240
 15514  1761  008D               	movwf	13	;volatile
 15515                           
 15516                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 15517  1762  30FF               	movlw	255
 15518  1763  008E               	movwf	14	;volatile
 15519                           
 15520                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 15521  1764  0021               	movlb	1	; select bank1
 15522  1765  1610               	bsf	16,4	;volatile
 15523                           
 15524                           ;mcc_generated_files/pin_manager.c: 108:     RXPPS = 0x14;
 15525  1766  3014               	movlw	20
 15526  1767  003C               	movlb	28	; select bank28
 15527  1768  00A4               	movwf	36	;volatile
 15528                           
 15529                           ;mcc_generated_files/pin_manager.c: 109:     SSP2DATPPS = 0x0C;
 15530  1769  300C               	movlw	12
 15531  176A  009E               	movwf	30	;volatile
 15532                           
 15533                           ;mcc_generated_files/pin_manager.c: 110:     SSP1CLKPPS = 0x0F;
 15534  176B  300F               	movlw	15
 15535  176C  00A0               	movwf	32	;volatile
 15536                           
 15537                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x1A;
 15538  176D  301A               	movlw	26
 15539  176E  003D               	movlb	29	; select bank29
 15540  176F  009E               	movwf	30	;volatile
 15541                           
 15542                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x18;
 15543  1770  3018               	movlw	24
 15544  1771  009F               	movwf	31	;volatile
 15545                           
 15546                           ;mcc_generated_files/pin_manager.c: 113:     RB5PPS = 0x00;
 15547  1772  019D               	clrf	29	;volatile
 15548                           
 15549                           ;mcc_generated_files/pin_manager.c: 114:     RC2PPS = 0x1B;
 15550  1773  301B               	movlw	27
 15551  1774  00A2               	movwf	34	;volatile
 15552                           
 15553                           ;mcc_generated_files/pin_manager.c: 115:     RC5PPS = 0x14;
 15554  1775  3014               	movlw	20
 15555  1776  00A5               	movwf	37	;volatile
 15556                           
 15557                           ;mcc_generated_files/pin_manager.c: 116:     SSP1DATPPS = 0x0D;
 15558  1777  300D               	movlw	13
 15559  1778  003C               	movlb	28	; select bank28
 15560  1779  00A1               	movwf	33	;volatile
 15561                           
 15562                           ;mcc_generated_files/pin_manager.c: 117:     SSP2CLKPPS = 0x0E;
 15563  177A  300E               	movlw	14
 15564  177B  009D               	movwf	29	;volatile
 15565  177C  0008               	return
 15566  177D                     __end_of_PIN_MANAGER_Initialize:	
 15567                           
 15568                           	psect	text69
 15569  119A                     __ptext69:	
 15570 ;; *************** function _OSCILLATOR_Initialize *****************
 15571 ;; Defined at:
 15572 ;;		line 64 in file "mcc_generated_files/mcc.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;		None
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;		None
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  1    wreg      void 
 15579 ;; Registers used:
 15580 ;;		wreg, status,2
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;Total ram usage:        0 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    5
 15593 ;; This function calls:
 15594 ;;		Nothing
 15595 ;; This function is called by:
 15596 ;;		_SYSTEM_Initialize
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           
 15601                           ;psect for function _OSCILLATOR_Initialize
 15602  119A                     _OSCILLATOR_Initialize:	
 15603                           
 15604                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x61;
 15605                           
 15606                           ;incstack = 0
 15607                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 15608  119A  3061               	movlw	97
 15609  119B  0032               	movlb	18	; select bank18
 15610  119C  0099               	movwf	25	;volatile
 15611                           
 15612                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 15613  119D  019B               	clrf	27	;volatile
 15614                           
 15615                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 15616  119E  019D               	clrf	29	;volatile
 15617                           
 15618                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 15619  119F  019F               	clrf	31	;volatile
 15620                           
 15621                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 15622  11A0  019E               	clrf	30	;volatile
 15623  11A1  0008               	return
 15624  11A2                     __end_of_OSCILLATOR_Initialize:	
 15625                           
 15626                           	psect	text70
 15627  082F                     __ptext70:	
 15628 ;; *************** function _EUSART_Initialize *****************
 15629 ;; Defined at:
 15630 ;;		line 85 in file "mcc_generated_files/eusart.c"
 15631 ;; Parameters:    Size  Location     Type
 15632 ;;		None
 15633 ;; Auto vars:     Size  Location     Type
 15634 ;;		None
 15635 ;; Return value:  Size  Location     Type
 15636 ;;                  1    wreg      void 
 15637 ;; Registers used:
 15638 ;;		wreg, status,2, status,0, pclath, cstack
 15639 ;; Tracked objects:
 15640 ;;		On entry : 0/0
 15641 ;;		On exit  : 0/0
 15642 ;;		Unchanged: 0/0
 15643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15648 ;;Total ram usage:        1 bytes
 15649 ;; Hardware stack levels used:    1
 15650 ;; Hardware stack levels required when called:    6
 15651 ;; This function calls:
 15652 ;;		_EUSART_SetErrorHandler
 15653 ;;		_EUSART_SetFramingErrorHandler
 15654 ;;		_EUSART_SetOverrunErrorHandler
 15655 ;;		_EUSART_SetRxInterruptHandler
 15656 ;;		_EUSART_SetTxInterruptHandler
 15657 ;; This function is called by:
 15658 ;;		_SYSTEM_Initialize
 15659 ;; This function uses a non-reentrant model
 15660 ;;
 15661                           
 15662                           
 15663                           ;psect for function _EUSART_Initialize
 15664  082F                     _EUSART_Initialize:	
 15665                           
 15666                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
 15667                           
 15668                           ;incstack = 0
 15669                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 15670  082F  0021               	movlb	1	; select bank1
 15671  0830  1291               	bcf	17,5	;volatile
 15672                           
 15673                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 15674  0831  30D7               	movlw	low _EUSART_Receive_ISR
 15675  0832  0020               	movlb	0	; select bank0
 15676  0833  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 15677  0834  3016               	movlw	high _EUSART_Receive_ISR
 15678  0835  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 15679  0836  3191  21DE  3188   	fcall	_EUSART_SetRxInterruptHandler
 15680                           
 15681                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
 15682  0839  0021               	movlb	1	; select bank1
 15683  083A  1211               	bcf	17,4	;volatile
 15684                           
 15685                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
 15686  083B  30E6               	movlw	low _EUSART_Transmit_ISR
 15687  083C  0020               	movlb	0	; select bank0
 15688  083D  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 15689  083E  3013               	movlw	high _EUSART_Transmit_ISR
 15690  083F  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 15691  0840  3191  21E7  3188   	fcall	_EUSART_SetTxInterruptHandler
 15692                           
 15693                           ;mcc_generated_files/eusart.c: 95:     BAUD1CON = 0x0A;
 15694  0843  300A               	movlw	10
 15695  0844  0023               	movlb	3	; select bank3
 15696  0845  009F               	movwf	31	;volatile
 15697                           
 15698                           ;mcc_generated_files/eusart.c: 98:     RC1STA = 0x90;
 15699  0846  3090               	movlw	144
 15700  0847  009D               	movwf	29	;volatile
 15701                           
 15702                           ;mcc_generated_files/eusart.c: 101:     TX1STA = 0x24;
 15703  0848  3024               	movlw	36
 15704  0849  009E               	movwf	30	;volatile
 15705                           
 15706                           ;mcc_generated_files/eusart.c: 104:     SP1BRGL = 0x0C;
 15707  084A  300C               	movlw	12
 15708  084B  009B               	movwf	27	;volatile
 15709                           
 15710                           ;mcc_generated_files/eusart.c: 107:     SP1BRGH = 0x00;
 15711  084C  019C               	clrf	28	;volatile
 15712                           
 15713                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 15714  084D  30CC               	movlw	low _EUSART_DefaultFramingErrorHandler
 15715  084E  0020               	movlb	0	; select bank0
 15716  084F  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 15717  0850  3010               	movlw	high _EUSART_DefaultFramingErrorHandler
 15718  0851  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 15719  0852  3191  21CC  3188   	fcall	_EUSART_SetFramingErrorHandler
 15720                           
 15721                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 15722  0855  300A               	movlw	low _EUSART_DefaultOverrunErrorHandler
 15723  0856  0020               	movlb	0	; select bank0
 15724  0857  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 15725  0858  3011               	movlw	high _EUSART_DefaultOverrunErrorHandler
 15726  0859  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 15727  085A  3191  21D5  3188   	fcall	_EUSART_SetOverrunErrorHandler
 15728                           
 15729                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 15730  085D  30D4               	movlw	low _EUSART_DefaultErrorHandler
 15731  085E  0020               	movlb	0	; select bank0
 15732  085F  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
 15733  0860  3010               	movlw	high _EUSART_DefaultErrorHandler
 15734  0861  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 15735  0862  3191  21C3         	fcall	_EUSART_SetErrorHandler
 15736                           
 15737                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
 15738  0864  0022               	movlb	2	; select bank2
 15739  0865  01ED               	clrf	_eusartRxLastError^(0+256)	;volatile
 15740                           
 15741                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
 15742  0866  0021               	movlb	1	; select bank1
 15743  0867  01EE               	clrf	_eusartTxHead^(0+128)	;volatile
 15744                           
 15745                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
 15746  0868  01ED               	clrf	_eusartTxTail^(0+128)	;volatile
 15747                           
 15748                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
 15749  0869  3008               	movlw	8
 15750  086A  0020               	movlb	0	; select bank0
 15751  086B  00A2               	movwf	??_EUSART_Initialize
 15752  086C  0822               	movf	??_EUSART_Initialize,w
 15753  086D  0023               	movlb	3	; select bank3
 15754  086E  00EF               	movwf	_eusartTxBufferRemaining^(0+384)	;volatile
 15755                           
 15756                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
 15757  086F  01F5               	clrf	_eusartRxHead	;volatile
 15758                           
 15759                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
 15760  0870  01F4               	clrf	_eusartRxTail	;volatile
 15761                           
 15762                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
 15763  0871  0021               	movlb	1	; select bank1
 15764  0872  01EC               	clrf	_eusartRxCount^(0+128)	;volatile
 15765                           
 15766                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
 15767  0873  1691               	bsf	17,5	;volatile
 15768  0874  0008               	return
 15769  0875                     __end_of_EUSART_Initialize:	
 15770                           
 15771                           	psect	text71
 15772  11E7                     __ptext71:	
 15773 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 15774 ;; Defined at:
 15775 ;;		line 284 in file "mcc_generated_files/eusart.c"
 15776 ;; Parameters:    Size  Location     Type
 15777 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15778 ;;		 -> EUSART_Transmit_ISR(1), 
 15779 ;; Auto vars:     Size  Location     Type
 15780 ;;		None
 15781 ;; Return value:  Size  Location     Type
 15782 ;;                  1    wreg      void 
 15783 ;; Registers used:
 15784 ;;		wreg
 15785 ;; Tracked objects:
 15786 ;;		On entry : 0/0
 15787 ;;		On exit  : 0/0
 15788 ;;		Unchanged: 0/0
 15789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15790 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;Total ram usage:        2 bytes
 15795 ;; Hardware stack levels used:    1
 15796 ;; Hardware stack levels required when called:    5
 15797 ;; This function calls:
 15798 ;;		Nothing
 15799 ;; This function is called by:
 15800 ;;		_EUSART_Initialize
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804                           
 15805                           ;psect for function _EUSART_SetTxInterruptHandler
 15806  11E7                     _EUSART_SetTxInterruptHandler:	
 15807                           
 15808                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
 15809                           
 15810                           ;incstack = 0
 15811                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 15812  11E7  0020               	movlb	0	; select bank0
 15813  11E8  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 15814  11E9  0023               	movlb	3	; select bank3
 15815  11EA  00EE               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384)
 15816  11EB  0020               	movlb	0	; select bank0
 15817  11EC  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 15818  11ED  0023               	movlb	3	; select bank3
 15819  11EE  00ED               	movwf	_EUSART_TxDefaultInterruptHandler^(0+384)
 15820  11EF  0008               	return
 15821  11F0                     __end_of_EUSART_SetTxInterruptHandler:	
 15822                           
 15823                           	psect	text72
 15824  11DE                     __ptext72:	
 15825 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 15826 ;; Defined at:
 15827 ;;		line 288 in file "mcc_generated_files/eusart.c"
 15828 ;; Parameters:    Size  Location     Type
 15829 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15830 ;;		 -> EUSART_Receive_ISR(1), 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;		None
 15833 ;; Return value:  Size  Location     Type
 15834 ;;                  1    wreg      void 
 15835 ;; Registers used:
 15836 ;;		wreg
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        2 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    5
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_EUSART_Initialize
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function _EUSART_SetRxInterruptHandler
 15858  11DE                     _EUSART_SetRxInterruptHandler:	
 15859                           
 15860                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 15861                           
 15862                           ;incstack = 0
 15863                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 15864  11DE  0020               	movlb	0	; select bank0
 15865  11DF  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 15866  11E0  0023               	movlb	3	; select bank3
 15867  11E1  00EC               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384)
 15868  11E2  0020               	movlb	0	; select bank0
 15869  11E3  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 15870  11E4  0023               	movlb	3	; select bank3
 15871  11E5  00EB               	movwf	_EUSART_RxDefaultInterruptHandler^(0+384)
 15872  11E6  0008               	return
 15873  11E7                     __end_of_EUSART_SetRxInterruptHandler:	
 15874                           
 15875                           	psect	text73
 15876  11D5                     __ptext73:	
 15877 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 15878 ;; Defined at:
 15879 ;;		line 276 in file "mcc_generated_files/eusart.c"
 15880 ;; Parameters:    Size  Location     Type
 15881 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15882 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 15883 ;; Auto vars:     Size  Location     Type
 15884 ;;		None
 15885 ;; Return value:  Size  Location     Type
 15886 ;;                  1    wreg      void 
 15887 ;; Registers used:
 15888 ;;		wreg
 15889 ;; Tracked objects:
 15890 ;;		On entry : 0/0
 15891 ;;		On exit  : 0/0
 15892 ;;		Unchanged: 0/0
 15893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15894 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;Total ram usage:        2 bytes
 15899 ;; Hardware stack levels used:    1
 15900 ;; Hardware stack levels required when called:    5
 15901 ;; This function calls:
 15902 ;;		Nothing
 15903 ;; This function is called by:
 15904 ;;		_EUSART_Initialize
 15905 ;; This function uses a non-reentrant model
 15906 ;;
 15907                           
 15908                           
 15909                           ;psect for function _EUSART_SetOverrunErrorHandler
 15910  11D5                     _EUSART_SetOverrunErrorHandler:	
 15911                           
 15912                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
 15913                           
 15914                           ;incstack = 0
 15915                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 15916  11D5  0020               	movlb	0	; select bank0
 15917  11D6  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 15918  11D7  0024               	movlb	4	; select bank4
 15919  11D8  00E7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+512)
 15920  11D9  0020               	movlb	0	; select bank0
 15921  11DA  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 15922  11DB  0024               	movlb	4	; select bank4
 15923  11DC  00E6               	movwf	_EUSART_OverrunErrorHandler^(0+512)
 15924  11DD  0008               	return
 15925  11DE                     __end_of_EUSART_SetOverrunErrorHandler:	
 15926                           
 15927                           	psect	text74
 15928  11CC                     __ptext74:	
 15929 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 15930 ;; Defined at:
 15931 ;;		line 272 in file "mcc_generated_files/eusart.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15934 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;		None
 15937 ;; Return value:  Size  Location     Type
 15938 ;;                  1    wreg      void 
 15939 ;; Registers used:
 15940 ;;		wreg
 15941 ;; Tracked objects:
 15942 ;;		On entry : 0/0
 15943 ;;		On exit  : 0/0
 15944 ;;		Unchanged: 0/0
 15945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15946 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;Total ram usage:        2 bytes
 15951 ;; Hardware stack levels used:    1
 15952 ;; Hardware stack levels required when called:    5
 15953 ;; This function calls:
 15954 ;;		Nothing
 15955 ;; This function is called by:
 15956 ;;		_EUSART_Initialize
 15957 ;; This function uses a non-reentrant model
 15958 ;;
 15959                           
 15960                           
 15961                           ;psect for function _EUSART_SetFramingErrorHandler
 15962  11CC                     _EUSART_SetFramingErrorHandler:	
 15963                           
 15964                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
 15965                           
 15966                           ;incstack = 0
 15967                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 15968  11CC  0020               	movlb	0	; select bank0
 15969  11CD  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 15970  11CE  0024               	movlb	4	; select bank4
 15971  11CF  00E9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+512)
 15972  11D0  0020               	movlb	0	; select bank0
 15973  11D1  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 15974  11D2  0024               	movlb	4	; select bank4
 15975  11D3  00E8               	movwf	_EUSART_FramingErrorHandler^(0+512)
 15976  11D4  0008               	return
 15977  11D5                     __end_of_EUSART_SetFramingErrorHandler:	
 15978                           
 15979                           	psect	text75
 15980  11C3                     __ptext75:	
 15981 ;; *************** function _EUSART_SetErrorHandler *****************
 15982 ;; Defined at:
 15983 ;;		line 280 in file "mcc_generated_files/eusart.c"
 15984 ;; Parameters:    Size  Location     Type
 15985 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15986 ;;		 -> EUSART_DefaultErrorHandler(1), 
 15987 ;; Auto vars:     Size  Location     Type
 15988 ;;		None
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  1    wreg      void 
 15991 ;; Registers used:
 15992 ;;		wreg
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15998 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;Total ram usage:        2 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    5
 16005 ;; This function calls:
 16006 ;;		Nothing
 16007 ;; This function is called by:
 16008 ;;		_EUSART_Initialize
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           
 16013                           ;psect for function _EUSART_SetErrorHandler
 16014  11C3                     _EUSART_SetErrorHandler:	
 16015                           
 16016                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
 16017                           
 16018                           ;incstack = 0
 16019                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 16020  11C3  0020               	movlb	0	; select bank0
 16021  11C4  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 16022  11C5  0024               	movlb	4	; select bank4
 16023  11C6  00E5               	movwf	(_EUSART_ErrorHandler+1)^(0+512)
 16024  11C7  0020               	movlb	0	; select bank0
 16025  11C8  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
 16026  11C9  0024               	movlb	4	; select bank4
 16027  11CA  00E4               	movwf	_EUSART_ErrorHandler^(0+512)
 16028  11CB  0008               	return
 16029  11CC                     __end_of_EUSART_SetErrorHandler:	
 16030                           
 16031                           	psect	text76
 16032  1192                     __ptext76:	
 16033 ;; *************** function _ADC_Initialize *****************
 16034 ;; Defined at:
 16035 ;;		line 65 in file "mcc_generated_files/adc.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;		None
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;		None
 16040 ;; Return value:  Size  Location     Type
 16041 ;;                  1    wreg      void 
 16042 ;; Registers used:
 16043 ;;		wreg, status,2
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;Total ram usage:        0 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    5
 16056 ;; This function calls:
 16057 ;;		Nothing
 16058 ;; This function is called by:
 16059 ;;		_SYSTEM_Initialize
 16060 ;; This function uses a non-reentrant model
 16061 ;;
 16062                           
 16063                           
 16064                           ;psect for function _ADC_Initialize
 16065  1192                     _ADC_Initialize:	
 16066                           
 16067                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 16068                           
 16069                           ;incstack = 0
 16070                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 16071  1192  3001               	movlw	1
 16072  1193  0021               	movlb	1	; select bank1
 16073  1194  009D               	movwf	29	;volatile
 16074                           
 16075                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 16076  1195  019E               	clrf	30	;volatile
 16077                           
 16078                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 16079  1196  019F               	clrf	31	;volatile
 16080                           
 16081                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 16082  1197  019B               	clrf	27	;volatile
 16083                           
 16084                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 16085  1198  019C               	clrf	28	;volatile
 16086  1199  0008               	return
 16087  119A                     __end_of_ADC_Initialize:	
 16088                           
 16089                           	psect	text77
 16090  120E                     __ptext77:	
 16091 ;; *************** function _PIR_Sensor *****************
 16092 ;; Defined at:
 16093 ;;		line 282 in file "main.c"
 16094 ;; Parameters:    Size  Location     Type
 16095 ;;		None
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;		None
 16098 ;; Return value:  Size  Location     Type
 16099 ;;                  1    wreg      _Bool 
 16100 ;; Registers used:
 16101 ;;		wreg, status,2
 16102 ;; Tracked objects:
 16103 ;;		On entry : 0/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;Total ram usage:        0 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    5
 16114 ;; This function calls:
 16115 ;;		Nothing
 16116 ;; This function is called by:
 16117 ;;		_main
 16118 ;; This function uses a non-reentrant model
 16119 ;;
 16120                           
 16121                           
 16122                           ;psect for function _PIR_Sensor
 16123  120E                     _PIR_Sensor:	
 16124                           
 16125                           ;main.c: 283:     if(PORTCbits.RC3 >= 1){
 16126                           
 16127                           ;incstack = 0
 16128                           ; Regs used in _PIR_Sensor: [wreg+status,2]
 16129  120E  0020               	movlb	0	; select bank0
 16130  120F  1D8E               	btfss	14,3	;volatile
 16131  1210  2A16               	goto	l8039
 16132                           
 16133                           ;main.c: 284:         prox = 1;
 16134  1211  0022               	movlb	2	; select bank2
 16135  1212  01E9               	clrf	_prox^(0+256)
 16136  1213  0AE9               	incf	_prox^(0+256),f
 16137                           
 16138                           ;main.c: 285:         return 1;
 16139  1214  3001               	movlw	1
 16140  1215  0008               	return
 16141  1216                     l8039:	
 16142                           
 16143                           ;main.c: 288:         prox = 0;
 16144  1216  0022               	movlb	2	; select bank2
 16145  1217  01E9               	clrf	_prox^(0+256)
 16146                           
 16147                           ;main.c: 289:         return 0;
 16148  1218  3000               	movlw	0
 16149  1219  0008               	return
 16150  121A                     __end_of_PIR_Sensor:	
 16151                           
 16152                           	psect	text78
 16153  177D                     __ptext78:	
 16154 ;; *************** function _On_Off *****************
 16155 ;; Defined at:
 16156 ;;		line 258 in file "main.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;		None
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;  val             2    7[BANK0 ] int 
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  1    wreg      _Bool 
 16163 ;; Registers used:
 16164 ;;		wreg, status,2, status,0, pclath, cstack
 16165 ;; Tracked objects:
 16166 ;;		On entry : 0/0
 16167 ;;		On exit  : 0/0
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16172 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;Total ram usage:        5 bytes
 16175 ;; Hardware stack levels used:    1
 16176 ;; Hardware stack levels required when called:    6
 16177 ;; This function calls:
 16178 ;;		_ADC_GetConversion
 16179 ;; This function is called by:
 16180 ;;		_main
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           
 16185                           ;psect for function _On_Off
 16186  177D                     _On_Off:	
 16187                           
 16188                           ;main.c: 259:     adcResult = ADC_GetConversion(BTN) >> 6;
 16189                           
 16190                           ;incstack = 0
 16191                           ; Regs used in _On_Off: [wreg+status,2+status,0+pclath+cstack]
 16192  177D  3017               	movlw	23
 16193  177E  3193  23AA  3197   	fcall	_ADC_GetConversion
 16194  1781  0020               	movlb	0	; select bank0
 16195  1782  0820               	movf	?_ADC_GetConversion,w
 16196  1783  00A4               	movwf	??_On_Off
 16197  1784  0821               	movf	?_ADC_GetConversion+1,w
 16198  1785  00A5               	movwf	??_On_Off+1
 16199  1786  3006               	movlw	6
 16200  1787                     u7795:	
 16201  1787  36A5               	lsrf	??_On_Off+1,f
 16202  1788  0CA4               	rrf	??_On_Off,f
 16203  1789  0B89               	decfsz	9,f
 16204  178A  2F87               	goto	u7795
 16205  178B  0824               	movf	??_On_Off,w
 16206  178C  00A6               	movwf	??_On_Off+2
 16207  178D  0826               	movf	??_On_Off+2,w
 16208  178E  0022               	movlb	2	; select bank2
 16209  178F  00EA               	movwf	_adcResult^(0+256)
 16210                           
 16211                           ;main.c: 260:     int val = adcResult;
 16212  1790  086A               	movf	_adcResult^(0+256),w
 16213  1791  0020               	movlb	0	; select bank0
 16214  1792  00A4               	movwf	??_On_Off
 16215  1793  01A5               	clrf	??_On_Off+1
 16216  1794  0824               	movf	??_On_Off,w
 16217  1795  00A7               	movwf	On_Off@val
 16218  1796  0825               	movf	??_On_Off+1,w
 16219  1797  00A8               	movwf	On_Off@val+1
 16220                           
 16221                           ;main.c: 261:     if(val >= 10 && val <= 20) {
 16222  1798  0828               	movf	On_Off@val+1,w
 16223  1799  3A80               	xorlw	128
 16224  179A  00A4               	movwf	??_On_Off
 16225  179B  3080               	movlw	128
 16226  179C  0224               	subwf	??_On_Off,w
 16227  179D  1D03               	skipz
 16228  179E  2FA1               	goto	u7805
 16229  179F  300A               	movlw	10
 16230  17A0  0227               	subwf	On_Off@val,w
 16231  17A1                     u7805:	
 16232  17A1  1C03               	skipc
 16233  17A2  2FB7               	goto	l8025
 16234  17A3  0020               	movlb	0	; select bank0
 16235  17A4  0828               	movf	On_Off@val+1,w
 16236  17A5  3A80               	xorlw	128
 16237  17A6  00A4               	movwf	??_On_Off
 16238  17A7  3080               	movlw	128
 16239  17A8  0224               	subwf	??_On_Off,w
 16240  17A9  1D03               	skipz
 16241  17AA  2FAD               	goto	u7815
 16242  17AB  3015               	movlw	21
 16243  17AC  0227               	subwf	On_Off@val,w
 16244  17AD                     u7815:	
 16245  17AD  1803               	skipnc
 16246  17AE  2FB7               	goto	l8025
 16247                           
 16248                           ;main.c: 262:         if(on == 0) {
 16249  17AF  0021               	movlb	1	; select bank1
 16250  17B0  086F               	movf	_on^(0+128),w
 16251  17B1  1D03               	btfss	3,2
 16252  17B2  2FB6               	goto	l8023
 16253                           
 16254                           ;main.c: 263:             on = 1;
 16255  17B3  01EF               	clrf	_on^(0+128)
 16256  17B4  0AEF               	incf	_on^(0+128),f
 16257                           
 16258                           ;main.c: 264:         }
 16259  17B5  2FB7               	goto	l8025
 16260  17B6                     l8023:	
 16261                           
 16262                           ;main.c: 266:             on = 0;
 16263  17B6  01EF               	clrf	_on^(0+128)
 16264  17B7                     l8025:	
 16265                           
 16266                           ;main.c: 269:     return on;
 16267  17B7  0021               	movlb	1	; select bank1
 16268  17B8  086F               	movf	_on^(0+128),w
 16269  17B9  0008               	return
 16270  17BA                     __end_of_On_Off:	
 16271                           
 16272                           	psect	text79
 16273  0E13                     __ptext79:	
 16274 ;; *************** function _Get_ADC *****************
 16275 ;; Defined at:
 16276 ;;		line 221 in file "main.c"
 16277 ;; Parameters:    Size  Location     Type
 16278 ;;		None
 16279 ;; Auto vars:     Size  Location     Type
 16280 ;;  val             2   15[BANK0 ] int 
 16281 ;; Return value:  Size  Location     Type
 16282 ;;                  1    wreg      void 
 16283 ;; Registers used:
 16284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16285 ;; Tracked objects:
 16286 ;;		On entry : 0/0
 16287 ;;		On exit  : 0/0
 16288 ;;		Unchanged: 0/0
 16289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;Total ram usage:        5 bytes
 16295 ;; Hardware stack levels used:    1
 16296 ;; Hardware stack levels required when called:    8
 16297 ;; This function calls:
 16298 ;;		_ADC_GetConversion
 16299 ;;		_Display_Name
 16300 ;;		_Toggle
 16301 ;; This function is called by:
 16302 ;;		_main
 16303 ;; This function uses a non-reentrant model
 16304 ;;
 16305                           
 16306                           
 16307                           ;psect for function _Get_ADC
 16308  0E13                     _Get_ADC:	
 16309                           
 16310                           ;main.c: 222:     adcResult = ADC_GetConversion(BTN) >> 6;
 16311                           
 16312                           ;incstack = 0
 16313                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16314  0E13  3017               	movlw	23
 16315  0E14  3193  23AA  318E   	fcall	_ADC_GetConversion
 16316  0E17  0020               	movlb	0	; select bank0
 16317  0E18  0820               	movf	?_ADC_GetConversion,w
 16318  0E19  00AC               	movwf	??_Get_ADC
 16319  0E1A  0821               	movf	?_ADC_GetConversion+1,w
 16320  0E1B  00AD               	movwf	??_Get_ADC+1
 16321  0E1C  3006               	movlw	6
 16322  0E1D                     u8165:	
 16323  0E1D  36AD               	lsrf	??_Get_ADC+1,f
 16324  0E1E  0CAC               	rrf	??_Get_ADC,f
 16325  0E1F  0B89               	decfsz	9,f
 16326  0E20  2E1D               	goto	u8165
 16327  0E21  082C               	movf	??_Get_ADC,w
 16328  0E22  00AE               	movwf	??_Get_ADC+2
 16329  0E23  082E               	movf	??_Get_ADC+2,w
 16330  0E24  0022               	movlb	2	; select bank2
 16331  0E25  00EA               	movwf	_adcResult^(0+256)
 16332                           
 16333                           ;main.c: 223:     int val = adcResult;
 16334  0E26  086A               	movf	_adcResult^(0+256),w
 16335  0E27  0020               	movlb	0	; select bank0
 16336  0E28  00AC               	movwf	??_Get_ADC
 16337  0E29  01AD               	clrf	??_Get_ADC+1
 16338  0E2A  082C               	movf	??_Get_ADC,w
 16339  0E2B  00AF               	movwf	Get_ADC@val
 16340  0E2C  082D               	movf	??_Get_ADC+1,w
 16341  0E2D  00B0               	movwf	Get_ADC@val+1
 16342                           
 16343                           ;main.c: 224:     if(val >= 215 && val <= 225) {
 16344  0E2E  0830               	movf	Get_ADC@val+1,w
 16345  0E2F  3A80               	xorlw	128
 16346  0E30  00AC               	movwf	??_Get_ADC
 16347  0E31  3080               	movlw	128
 16348  0E32  022C               	subwf	??_Get_ADC,w
 16349  0E33  1D03               	skipz
 16350  0E34  2E37               	goto	u8175
 16351  0E35  30D7               	movlw	215
 16352  0E36  022F               	subwf	Get_ADC@val,w
 16353  0E37                     u8175:	
 16354  0E37  1C03               	skipc
 16355  0E38  2E49               	goto	l8195
 16356  0E39  0020               	movlb	0	; select bank0
 16357  0E3A  0830               	movf	Get_ADC@val+1,w
 16358  0E3B  3A80               	xorlw	128
 16359  0E3C  00AC               	movwf	??_Get_ADC
 16360  0E3D  3080               	movlw	128
 16361  0E3E  022C               	subwf	??_Get_ADC,w
 16362  0E3F  1D03               	skipz
 16363  0E40  2E43               	goto	u8185
 16364  0E41  30E2               	movlw	226
 16365  0E42  022F               	subwf	Get_ADC@val,w
 16366  0E43                     u8185:	
 16367  0E43  1803               	skipnc
 16368  0E44  2E49               	goto	l8195
 16369                           
 16370                           ;main.c: 225:         Toggle();
 16371  0E45  3191  21BA  318E   	fcall	_Toggle
 16372                           
 16373                           ;main.c: 226:     }
 16374  0E48  2F06               	goto	l8241
 16375  0E49                     l8195:	
 16376  0E49  0020               	movlb	0	; select bank0
 16377  0E4A  0830               	movf	Get_ADC@val+1,w
 16378  0E4B  3A80               	xorlw	128
 16379  0E4C  00AC               	movwf	??_Get_ADC
 16380  0E4D  3080               	movlw	128
 16381  0E4E  022C               	subwf	??_Get_ADC,w
 16382  0E4F  1D03               	skipz
 16383  0E50  2E53               	goto	u8195
 16384  0E51  30A5               	movlw	165
 16385  0E52  022F               	subwf	Get_ADC@val,w
 16386  0E53                     u8195:	
 16387  0E53  1C03               	skipc
 16388  0E54  2E79               	goto	l8203
 16389  0E55  0020               	movlb	0	; select bank0
 16390  0E56  0830               	movf	Get_ADC@val+1,w
 16391  0E57  3A80               	xorlw	128
 16392  0E58  00AC               	movwf	??_Get_ADC
 16393  0E59  3080               	movlw	128
 16394  0E5A  022C               	subwf	??_Get_ADC,w
 16395  0E5B  1D03               	skipz
 16396  0E5C  2E5F               	goto	u8205
 16397  0E5D  30B5               	movlw	181
 16398  0E5E  022F               	subwf	Get_ADC@val,w
 16399  0E5F                     u8205:	
 16400  0E5F  1803               	skipnc
 16401  0E60  2E79               	goto	l8203
 16402                           
 16403                           ;main.c: 228:         brightness++;
 16404  0E61  3001               	movlw	1
 16405  0E62  0022               	movlb	2	; select bank2
 16406  0E63  07E4               	addwf	_brightness^(0+256),f
 16407  0E64  3000               	movlw	0
 16408  0E65  3DE5               	addwfc	(_brightness+1)^(0+256),f
 16409                           
 16410                           ;main.c: 229:         if(brightness > 7) {
 16411  0E66  0865               	movf	(_brightness+1)^(0+256),w
 16412  0E67  3A80               	xorlw	128
 16413  0E68  0020               	movlb	0	; select bank0
 16414  0E69  00AC               	movwf	??_Get_ADC
 16415  0E6A  3080               	movlw	128
 16416  0E6B  022C               	subwf	??_Get_ADC,w
 16417  0E6C  1D03               	skipz
 16418  0E6D  2E71               	goto	u8215
 16419  0E6E  3008               	movlw	8
 16420  0E6F  0022               	movlb	2	; select bank2
 16421  0E70  0264               	subwf	_brightness^(0+256),w
 16422  0E71                     u8215:	
 16423  0E71  1C03               	skipc
 16424  0E72  2F06               	goto	l8241
 16425                           
 16426                           ;main.c: 230:             brightness = 7;
 16427  0E73  3007               	movlw	7
 16428  0E74  0022               	movlb	2	; select bank2
 16429  0E75  00E4               	movwf	_brightness^(0+256)
 16430  0E76  3000               	movlw	0
 16431  0E77  00E5               	movwf	(_brightness^(0+256)+1)
 16432  0E78  2F06               	goto	l8241
 16433  0E79                     l8203:	
 16434  0E79  0020               	movlb	0	; select bank0
 16435  0E7A  0830               	movf	Get_ADC@val+1,w
 16436  0E7B  3A80               	xorlw	128
 16437  0E7C  00AC               	movwf	??_Get_ADC
 16438  0E7D  3080               	movlw	128
 16439  0E7E  022C               	subwf	??_Get_ADC,w
 16440  0E7F  1D03               	skipz
 16441  0E80  2E83               	goto	u8225
 16442  0E81  308C               	movlw	140
 16443  0E82  022F               	subwf	Get_ADC@val,w
 16444  0E83                     u8225:	
 16445  0E83  1C03               	skipc
 16446  0E84  2EA8               	goto	l8217
 16447  0E85  0020               	movlb	0	; select bank0
 16448  0E86  0830               	movf	Get_ADC@val+1,w
 16449  0E87  3A80               	xorlw	128
 16450  0E88  00AC               	movwf	??_Get_ADC
 16451  0E89  3080               	movlw	128
 16452  0E8A  022C               	subwf	??_Get_ADC,w
 16453  0E8B  1D03               	skipz
 16454  0E8C  2E8F               	goto	u8235
 16455  0E8D  309C               	movlw	156
 16456  0E8E  022F               	subwf	Get_ADC@val,w
 16457  0E8F                     u8235:	
 16458  0E8F  1803               	skipnc
 16459  0E90  2EA8               	goto	l8217
 16460                           
 16461                           ;main.c: 234:         printed = 0;
 16462  0E91  0022               	movlb	2	; select bank2
 16463  0E92  01EB               	clrf	_printed^(0+256)
 16464                           
 16465                           ;main.c: 235:         --name;
 16466  0E93  30FF               	movlw	255
 16467  0E94  0021               	movlb	1	; select bank1
 16468  0E95  07E6               	addwf	_name^(0+128),f
 16469  0E96  30FF               	movlw	255
 16470  0E97  3DE7               	addwfc	(_name+1)^(0+128),f
 16471                           
 16472                           ;main.c: 236:         if(name < 0) {
 16473  0E98  1FE7               	btfss	(_name+1)^(0+128),7
 16474  0E99  2E9E               	goto	l8215
 16475                           
 16476                           ;main.c: 237:             name = 3;
 16477  0E9A  3003               	movlw	3
 16478  0E9B  00E6               	movwf	_name^(0+128)
 16479  0E9C  3000               	movlw	0
 16480  0E9D  00E7               	movwf	(_name^(0+128)+1)
 16481  0E9E                     l8215:	
 16482                           
 16483                           ;main.c: 239:         Display_Name(names[name]);
 16484  0E9E  3566               	lslf	_name^(0+128),w
 16485  0E9F  3EE3               	addlw	(low (_names| (0+256)))& (0+255)
 16486  0EA0  0086               	movwf	6
 16487  0EA1  3001               	movlw	1	; select bank3/4
 16488  0EA2  0087               	movwf	7
 16489  0EA3  3F40               	moviw [0]fsr1
 16490  0EA4  0020               	movlb	0	; select bank0
 16491  0EA5  00A5               	movwf	Display_Name@string1
 16492  0EA6  3F41               	moviw [1]fsr1
 16493  0EA7  2F03               	goto	L10
 16494  0EA8                     l8217:	
 16495                           ;main.c: 240:     }
 16496                           
 16497  0EA8  0020               	movlb	0	; select bank0
 16498  0EA9  0830               	movf	Get_ADC@val+1,w
 16499  0EAA  3A80               	xorlw	128
 16500  0EAB  00AC               	movwf	??_Get_ADC
 16501  0EAC  3080               	movlw	128
 16502  0EAD  022C               	subwf	??_Get_ADC,w
 16503  0EAE  1D03               	skipz
 16504  0EAF  2EB2               	goto	u8255
 16505  0EB0  305A               	movlw	90
 16506  0EB1  022F               	subwf	Get_ADC@val,w
 16507  0EB2                     u8255:	
 16508  0EB2  1C03               	skipc
 16509  0EB3  2ECA               	goto	l8227
 16510  0EB4  0020               	movlb	0	; select bank0
 16511  0EB5  0830               	movf	Get_ADC@val+1,w
 16512  0EB6  3A80               	xorlw	128
 16513  0EB7  00AC               	movwf	??_Get_ADC
 16514  0EB8  3080               	movlw	128
 16515  0EB9  022C               	subwf	??_Get_ADC,w
 16516  0EBA  1D03               	skipz
 16517  0EBB  2EBE               	goto	u8265
 16518  0EBC  3079               	movlw	121
 16519  0EBD  022F               	subwf	Get_ADC@val,w
 16520  0EBE                     u8265:	
 16521  0EBE  1803               	skipnc
 16522  0EBF  2ECA               	goto	l8227
 16523                           
 16524                           ;main.c: 242:         brightness--;
 16525  0EC0  30FF               	movlw	255
 16526  0EC1  0022               	movlb	2	; select bank2
 16527  0EC2  07E4               	addwf	_brightness^(0+256),f
 16528  0EC3  30FF               	movlw	255
 16529  0EC4  3DE5               	addwfc	(_brightness+1)^(0+256),f
 16530                           
 16531                           ;main.c: 243:         if(brightness < 0) {
 16532  0EC5  1FE5               	btfss	(_brightness+1)^(0+256),7
 16533  0EC6  2F06               	goto	l8241
 16534                           
 16535                           ;main.c: 244:             brightness = 0;
 16536  0EC7  01E4               	clrf	_brightness^(0+256)
 16537  0EC8  01E5               	clrf	(_brightness+1)^(0+256)
 16538  0EC9  2F06               	goto	l8241
 16539  0ECA                     l8227:	
 16540  0ECA  0020               	movlb	0	; select bank0
 16541  0ECB  0830               	movf	Get_ADC@val+1,w
 16542  0ECC  3A80               	xorlw	128
 16543  0ECD  00AC               	movwf	??_Get_ADC
 16544  0ECE  3080               	movlw	128
 16545  0ECF  022C               	subwf	??_Get_ADC,w
 16546  0ED0  1D03               	skipz
 16547  0ED1  2ED4               	goto	u8285
 16548  0ED2  30C8               	movlw	200
 16549  0ED3  022F               	subwf	Get_ADC@val,w
 16550  0ED4                     u8285:	
 16551  0ED4  1C03               	skipc
 16552  0ED5  2F06               	goto	l8241
 16553  0ED6  0020               	movlb	0	; select bank0
 16554  0ED7  0830               	movf	Get_ADC@val+1,w
 16555  0ED8  3A80               	xorlw	128
 16556  0ED9  00AC               	movwf	??_Get_ADC
 16557  0EDA  3080               	movlw	128
 16558  0EDB  022C               	subwf	??_Get_ADC,w
 16559  0EDC  1D03               	skipz
 16560  0EDD  2EE0               	goto	u8295
 16561  0EDE  30E7               	movlw	231
 16562  0EDF  022F               	subwf	Get_ADC@val,w
 16563  0EE0                     u8295:	
 16564  0EE0  1803               	skipnc
 16565  0EE1  2F06               	goto	l8241
 16566                           
 16567                           ;main.c: 248:         printed = 0;
 16568  0EE2  0022               	movlb	2	; select bank2
 16569  0EE3  01EB               	clrf	_printed^(0+256)
 16570                           
 16571                           ;main.c: 249:         name++;
 16572  0EE4  3001               	movlw	1
 16573  0EE5  0021               	movlb	1	; select bank1
 16574  0EE6  07E6               	addwf	_name^(0+128),f
 16575  0EE7  3000               	movlw	0
 16576  0EE8  3DE7               	addwfc	(_name+1)^(0+128),f
 16577                           
 16578                           ;main.c: 250:         if(name > 3) {
 16579  0EE9  0867               	movf	(_name+1)^(0+128),w
 16580  0EEA  3A80               	xorlw	128
 16581  0EEB  0020               	movlb	0	; select bank0
 16582  0EEC  00AC               	movwf	??_Get_ADC
 16583  0EED  3080               	movlw	128
 16584  0EEE  022C               	subwf	??_Get_ADC,w
 16585  0EEF  1D03               	skipz
 16586  0EF0  2EF4               	goto	u8305
 16587  0EF1  3004               	movlw	4
 16588  0EF2  0021               	movlb	1	; select bank1
 16589  0EF3  0266               	subwf	_name^(0+128),w
 16590  0EF4                     u8305:	
 16591  0EF4  1C03               	skipc
 16592  0EF5  2EF9               	goto	l8239
 16593                           
 16594                           ;main.c: 251:            name = 0;
 16595  0EF6  0021               	movlb	1	; select bank1
 16596  0EF7  01E6               	clrf	_name^(0+128)
 16597  0EF8  01E7               	clrf	(_name+1)^(0+128)
 16598  0EF9                     l8239:	
 16599                           
 16600                           ;main.c: 253:         Display_Name(names[name]);
 16601  0EF9  0021               	movlb	1	; select bank1
 16602  0EFA  3566               	lslf	_name^(0+128),w
 16603  0EFB  3EE3               	addlw	(low (_names| (0+256)))& (0+255)
 16604  0EFC  0086               	movwf	6
 16605  0EFD  3001               	movlw	1	; select bank3/4
 16606  0EFE  0087               	movwf	7
 16607  0EFF  3F40               	moviw [0]fsr1
 16608  0F00  0020               	movlb	0	; select bank0
 16609  0F01  00A5               	movwf	Display_Name@string1
 16610  0F02  3F41               	moviw [1]fsr1
 16611  0F03                     L10:	
 16612  0F03  00A6               	movwf	Display_Name@string1+1
 16613  0F04  3189  215D         	fcall	_Display_Name
 16614  0F06                     l8241:	
 16615                           
 16616                           ;main.c: 255:     adcResult = 0;
 16617  0F06  0022               	movlb	2	; select bank2
 16618  0F07  01EA               	clrf	_adcResult^(0+256)
 16619  0F08  0008               	return
 16620  0F09                     __end_of_Get_ADC:	
 16621                           
 16622                           	psect	text80
 16623  11BA                     __ptext80:	
 16624 ;; *************** function _Toggle *****************
 16625 ;; Defined at:
 16626 ;;		line 272 in file "main.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;		None
 16629 ;; Auto vars:     Size  Location     Type
 16630 ;;		None
 16631 ;; Return value:  Size  Location     Type
 16632 ;;                  1    wreg      void 
 16633 ;; Registers used:
 16634 ;;		wreg, status,2, status,0
 16635 ;; Tracked objects:
 16636 ;;		On entry : 0/0
 16637 ;;		On exit  : 0/0
 16638 ;;		Unchanged: 0/0
 16639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;Total ram usage:        0 bytes
 16645 ;; Hardware stack levels used:    1
 16646 ;; Hardware stack levels required when called:    5
 16647 ;; This function calls:
 16648 ;;		Nothing
 16649 ;; This function is called by:
 16650 ;;		_Get_ADC
 16651 ;; This function uses a non-reentrant model
 16652 ;;
 16653                           
 16654                           
 16655                           ;psect for function _Toggle
 16656  11BA                     _Toggle:	
 16657                           
 16658                           ;main.c: 273:     if(gestureToggle == 0) {
 16659                           
 16660                           ;incstack = 0
 16661                           ; Regs used in _Toggle: [wreg+status,2+status,0]
 16662  11BA  0022               	movlb	2	; select bank2
 16663  11BB  086E               	movf	_gestureToggle^(0+256),w
 16664  11BC  1D03               	btfss	3,2
 16665  11BD  29C1               	goto	l7717
 16666                           
 16667                           ;main.c: 274:         gestureToggle = 1;
 16668  11BE  01EE               	clrf	_gestureToggle^(0+256)
 16669  11BF  0AEE               	incf	_gestureToggle^(0+256),f
 16670                           
 16671                           ;main.c: 275:     }
 16672  11C0  0008               	return
 16673  11C1                     l7717:	
 16674                           
 16675                           ;main.c: 277:         gestureToggle = 0;
 16676  11C1  01EE               	clrf	_gestureToggle^(0+256)
 16677  11C2  0008               	return
 16678  11C3                     __end_of_Toggle:	
 16679                           
 16680                           	psect	text81
 16681  095D                     __ptext81:	
 16682 ;; *************** function _Display_Name *****************
 16683 ;; Defined at:
 16684 ;;		line 189 in file "main.c"
 16685 ;; Parameters:    Size  Location     Type
 16686 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 16687 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 16688 ;; Auto vars:     Size  Location     Type
 16689 ;;  i               2   10[BANK0 ] int 
 16690 ;;  length          2    8[BANK0 ] int 
 16691 ;; Return value:  Size  Location     Type
 16692 ;;                  1    wreg      void 
 16693 ;; Registers used:
 16694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16695 ;; Tracked objects:
 16696 ;;		On entry : 0/0
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16700 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;Total ram usage:        7 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:    7
 16707 ;; This function calls:
 16708 ;;		_PWM_Output_Disable
 16709 ;;		_PWM_Output_Enable
 16710 ;;		_SPI_Write
 16711 ;;		_strlen
 16712 ;; This function is called by:
 16713 ;;		_main
 16714 ;;		_handleGesture
 16715 ;;		_Get_ADC
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           
 16720                           ;psect for function _Display_Name
 16721  095D                     _Display_Name:	
 16722                           
 16723                           ;main.c: 190:     int length;;main.c: 191:     int i;;main.c: 192:     PWM_Output_Enable
      +                          ();
 16724                           
 16725                           ;incstack = 0
 16726                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16727  095D  3191  2132  3189   	fcall	_PWM_Output_Enable
 16728                           
 16729                           ;main.c: 193:     _delay((unsigned long)((200)*(500000/4000.0)));
 16730  0960  3021               	movlw	33
 16731  0961  0020               	movlb	0	; select bank0
 16732  0962  00A7               	movwf	??_Display_Name
 16733  0963  3076               	movlw	118
 16734  0964                     u8517:	
 16735  0964  0B89               	decfsz	9,f
 16736  0965  2964               	goto	u8517
 16737  0966  0BA7               	decfsz	??_Display_Name,f
 16738  0967  2964               	goto	u8517
 16739  0968  0000               	nop
 16740                           
 16741                           ;main.c: 194:     PWM_Output_Disable();
 16742  0969  3190  20EF  3189   	fcall	_PWM_Output_Disable
 16743                           
 16744                           ;main.c: 195:     SPI_Write(0xFE);
 16745  096C  30FE               	movlw	254
 16746  096D  3192  22B3  3189   	fcall	_SPI_Write
 16747                           
 16748                           ;main.c: 196:     _delay((unsigned long)((100)*(500000/4000.0)));
 16749  0970  3011               	movlw	17
 16750  0971  0020               	movlb	0	; select bank0
 16751  0972  00A7               	movwf	??_Display_Name
 16752  0973  303A               	movlw	58
 16753  0974                     u8527:	
 16754  0974  0B89               	decfsz	9,f
 16755  0975  2974               	goto	u8527
 16756  0976  0BA7               	decfsz	??_Display_Name,f
 16757  0977  2974               	goto	u8527
 16758  0978  0000               	nop
 16759                           
 16760                           ;main.c: 197:     SPI_Write(0x51);
 16761  0979  3051               	movlw	81
 16762  097A  3192  22B3  3189   	fcall	_SPI_Write
 16763                           
 16764                           ;main.c: 198:     length = strlen(string1);
 16765  097D  0020               	movlb	0	; select bank0
 16766  097E  0826               	movf	Display_Name@string1+1,w
 16767  097F  00A1               	movwf	strlen@s+1
 16768  0980  0825               	movf	Display_Name@string1,w
 16769  0981  00A0               	movwf	strlen@s
 16770  0982  3193  230E  3189   	fcall	_strlen
 16771  0985  0020               	movlb	0	; select bank0
 16772  0986  0821               	movf	?_strlen+1,w
 16773  0987  00A9               	movwf	Display_Name@length+1
 16774  0988  0820               	movf	?_strlen,w
 16775  0989  00A8               	movwf	Display_Name@length
 16776                           
 16777                           ;main.c: 199:     for(i = 0; i < length; i++){
 16778  098A  01AA               	clrf	Display_Name@i
 16779  098B  01AB               	clrf	Display_Name@i+1
 16780  098C                     l7649:	
 16781  098C  082B               	movf	Display_Name@i+1,w
 16782  098D  3A80               	xorlw	128
 16783  098E  00A7               	movwf	??_Display_Name
 16784  098F  0829               	movf	Display_Name@length+1,w
 16785  0990  3A80               	xorlw	128
 16786  0991  0227               	subwf	??_Display_Name,w
 16787  0992  1D03               	skipz
 16788  0993  2996               	goto	u7455
 16789  0994  0828               	movf	Display_Name@length,w
 16790  0995  022A               	subwf	Display_Name@i,w
 16791  0996                     u7455:	
 16792  0996  1803               	btfsc	3,0
 16793  0997  29A9               	goto	l972
 16794                           
 16795                           ;main.c: 200:         SPI_Write(string1[i]);
 16796  0998  0020               	movlb	0	; select bank0
 16797  0999  0825               	movf	Display_Name@string1,w
 16798  099A  072A               	addwf	Display_Name@i,w
 16799  099B  0084               	movwf	4
 16800  099C  0826               	movf	Display_Name@string1+1,w
 16801  099D  3D2B               	addwfc	Display_Name@i+1,w
 16802  099E  0085               	movwf	5
 16803  099F  0800               	movf	0,w	;code access
 16804  09A0  3192  22B3  3189   	fcall	_SPI_Write
 16805                           
 16806                           ;main.c: 201:     }
 16807  09A3  3001               	movlw	1
 16808  09A4  0020               	movlb	0	; select bank0
 16809  09A5  07AA               	addwf	Display_Name@i,f
 16810  09A6  3000               	movlw	0
 16811  09A7  3DAB               	addwfc	Display_Name@i+1,f
 16812  09A8  298C               	goto	l7649
 16813  09A9                     l972:	
 16814                           
 16815                           ;main.c: 202:     printed = 1;
 16816  09A9  0022               	movlb	2	; select bank2
 16817  09AA  01EB               	clrf	_printed^(0+256)
 16818  09AB  0AEB               	incf	_printed^(0+256),f
 16819  09AC  0008               	return
 16820  09AD                     __end_of_Display_Name:	
 16821                           
 16822                           	psect	text82
 16823  130E                     __ptext82:	
 16824 ;; *************** function _strlen *****************
 16825 ;; Defined at:
 16826 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 16829 ;;		 -> dbuf(32), UART_Byte@bits(7), STR_4(11), STR_3(16), 
 16830 ;;		 -> STR_2(13), STR_1(12), 
 16831 ;; Auto vars:     Size  Location     Type
 16832 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 16833 ;;		 -> dbuf(32), UART_Byte@bits(7), STR_4(11), STR_3(16), 
 16834 ;;		 -> STR_2(13), STR_1(12), 
 16835 ;; Return value:  Size  Location     Type
 16836 ;;                  2    0[BANK0 ] unsigned int 
 16837 ;; Registers used:
 16838 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16839 ;; Tracked objects:
 16840 ;;		On entry : 0/0
 16841 ;;		On exit  : 0/0
 16842 ;;		Unchanged: 0/0
 16843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16844 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16845 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;Total ram usage:        5 bytes
 16849 ;; Hardware stack levels used:    1
 16850 ;; Hardware stack levels required when called:    5
 16851 ;; This function calls:
 16852 ;;		Nothing
 16853 ;; This function is called by:
 16854 ;;		_Display_Name
 16855 ;;		_pad
 16856 ;;		_strcat
 16857 ;; This function uses a non-reentrant model
 16858 ;;
 16859                           
 16860                           
 16861                           ;psect for function _strlen
 16862  130E                     _strlen:	
 16863                           
 16864                           ;incstack = 0
 16865                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 16866  130E  0020               	movlb	0	; select bank0
 16867  130F  0821               	movf	strlen@s+1,w
 16868  1310  00A4               	movwf	strlen@a+1
 16869  1311  0820               	movf	strlen@s,w
 16870  1312  00A3               	movwf	strlen@a
 16871  1313                     l6817:	
 16872  1313  0820               	movf	strlen@s,w
 16873  1314  0084               	movwf	4
 16874  1315  0821               	movf	strlen@s+1,w
 16875  1316  0085               	movwf	5
 16876  1317  0012               	moviw fsr0++
 16877  1318  1903               	btfsc	3,2
 16878  1319  2B1F               	goto	l6819
 16879  131A  3001               	movlw	1
 16880  131B  07A0               	addwf	strlen@s,f
 16881  131C  3000               	movlw	0
 16882  131D  3DA1               	addwfc	strlen@s+1,f
 16883  131E  2B13               	goto	l6817
 16884  131F                     l6819:	
 16885  131F  0823               	movf	strlen@a,w
 16886  1320  0220               	subwf	strlen@s,w
 16887  1321  00A0               	movwf	?_strlen
 16888  1322  0824               	movf	strlen@a+1,w
 16889  1323  3B21               	subwfb	strlen@s+1,w
 16890  1324  00A1               	movwf	?_strlen+1
 16891  1325  0008               	return
 16892  1326                     __end_of_strlen:	
 16893                           
 16894                           	psect	text83
 16895  1132                     __ptext83:	
 16896 ;; *************** function _PWM_Output_Enable *****************
 16897 ;; Defined at:
 16898 ;;		line 212 in file "main.c"
 16899 ;; Parameters:    Size  Location     Type
 16900 ;;		None
 16901 ;; Auto vars:     Size  Location     Type
 16902 ;;		None
 16903 ;; Return value:  Size  Location     Type
 16904 ;;                  1    wreg      void 
 16905 ;; Registers used:
 16906 ;;		wreg
 16907 ;; Tracked objects:
 16908 ;;		On entry : 0/0
 16909 ;;		On exit  : 0/0
 16910 ;;		Unchanged: 0/0
 16911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;Total ram usage:        0 bytes
 16917 ;; Hardware stack levels used:    1
 16918 ;; Hardware stack levels required when called:    5
 16919 ;; This function calls:
 16920 ;;		Nothing
 16921 ;; This function is called by:
 16922 ;;		_Display_Name
 16923 ;; This function uses a non-reentrant model
 16924 ;;
 16925                           
 16926                           
 16927                           ;psect for function _PWM_Output_Enable
 16928  1132                     _PWM_Output_Enable:	
 16929                           
 16930                           ;main.c: 213:     RC6PPS = 0x0C;
 16931                           
 16932                           ;incstack = 0
 16933                           ; Regs used in _PWM_Output_Enable: [wreg]
 16934  1132  300C               	movlw	12
 16935  1133  003D               	movlb	29	; select bank29
 16936  1134  00A6               	movwf	38	;volatile
 16937  1135  0008               	return
 16938  1136                     __end_of_PWM_Output_Enable:	
 16939                           
 16940                           	psect	text84
 16941  10EF                     __ptext84:	
 16942 ;; *************** function _PWM_Output_Disable *****************
 16943 ;; Defined at:
 16944 ;;		line 216 in file "main.c"
 16945 ;; Parameters:    Size  Location     Type
 16946 ;;		None
 16947 ;; Auto vars:     Size  Location     Type
 16948 ;;		None
 16949 ;; Return value:  Size  Location     Type
 16950 ;;                  1    wreg      void 
 16951 ;; Registers used:
 16952 ;;		status,2
 16953 ;; Tracked objects:
 16954 ;;		On entry : 0/0
 16955 ;;		On exit  : 0/0
 16956 ;;		Unchanged: 0/0
 16957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16962 ;;Total ram usage:        0 bytes
 16963 ;; Hardware stack levels used:    1
 16964 ;; Hardware stack levels required when called:    5
 16965 ;; This function calls:
 16966 ;;		Nothing
 16967 ;; This function is called by:
 16968 ;;		_Display_Name
 16969 ;; This function uses a non-reentrant model
 16970 ;;
 16971                           
 16972                           
 16973                           ;psect for function _PWM_Output_Disable
 16974  10EF                     _PWM_Output_Disable:	
 16975                           
 16976                           ;main.c: 217:     RC6PPS = 0x00;
 16977                           
 16978                           ;incstack = 0
 16979                           ; Regs used in _PWM_Output_Disable: [status,2]
 16980  10EF  003D               	movlb	29	; select bank29
 16981  10F0  01A6               	clrf	38	;volatile
 16982  10F1  0008               	return
 16983  10F2                     __end_of_PWM_Output_Disable:	
 16984                           
 16985                           	psect	text85
 16986  13AA                     __ptext85:	
 16987 ;; *************** function _ADC_GetConversion *****************
 16988 ;; Defined at:
 16989 ;;		line 113 in file "mcc_generated_files/adc.c"
 16990 ;; Parameters:    Size  Location     Type
 16991 ;;  channel         1    wreg     enum E6648
 16992 ;; Auto vars:     Size  Location     Type
 16993 ;;  channel         1    3[BANK0 ] enum E6648
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  2    0[BANK0 ] unsigned short 
 16996 ;; Registers used:
 16997 ;;		wreg, status,2, status,0
 16998 ;; Tracked objects:
 16999 ;;		On entry : 0/0
 17000 ;;		On exit  : 0/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17003 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17006 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17007 ;;Total ram usage:        4 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:    5
 17010 ;; This function calls:
 17011 ;;		Nothing
 17012 ;; This function is called by:
 17013 ;;		_Get_ADC
 17014 ;;		_On_Off
 17015 ;; This function uses a non-reentrant model
 17016 ;;
 17017                           
 17018                           
 17019                           ;psect for function _ADC_GetConversion
 17020  13AA                     _ADC_GetConversion:	
 17021                           
 17022                           ;incstack = 0
 17023                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 17024                           ;ADC_GetConversion@channel stored from wreg
 17025  13AA  0020               	movlb	0	; select bank0
 17026  13AB  00A3               	movwf	ADC_GetConversion@channel
 17027                           
 17028                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 17029  13AC  0823               	movf	ADC_GetConversion@channel,w
 17030  13AD  00A2               	movwf	??_ADC_GetConversion
 17031  13AE  0DA2               	rlf	??_ADC_GetConversion,f
 17032  13AF  0DA2               	rlf	??_ADC_GetConversion,f
 17033  13B0  0021               	movlb	1	; select bank1
 17034  13B1  081D               	movf	29,w	;volatile
 17035  13B2  0020               	movlb	0	; select bank0
 17036  13B3  0622               	xorwf	??_ADC_GetConversion,w
 17037  13B4  3903               	andlw	-253
 17038  13B5  0622               	xorwf	??_ADC_GetConversion,w
 17039  13B6  0021               	movlb	1	; select bank1
 17040  13B7  009D               	movwf	29	;volatile
 17041                           
 17042                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 17043  13B8  141D               	bsf	29,0	;volatile
 17044                           
 17045                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 17046                           
 17047                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 17048  13B9  0021               	movlb	1	; select bank1
 17049  13BA  149D               	bsf	29,1	;volatile
 17050  13BB                     l645:	
 17051                           ;mcc_generated_files/adc.c: 131:     }
 17052                           
 17053                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 17054                           
 17055                           
 17056                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 17057  13BB  0021               	movlb	1	; select bank1
 17058  13BC  1C9D               	btfss	29,1	;volatile
 17059  13BD  2BC0               	goto	l7629
 17060  13BE  0064               	clrwdt	;# 
 17061  13BF  2BBB               	goto	l645
 17062  13C0                     l7629:	
 17063                           
 17064                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 17065  13C0  081C               	movf	28,w	;volatile
 17066  13C1  0020               	movlb	0	; select bank0
 17067  13C2  00A1               	movwf	?_ADC_GetConversion+1
 17068  13C3  0021               	movlb	1	; select bank1
 17069  13C4  081B               	movf	27,w	;volatile
 17070  13C5  0020               	movlb	0	; select bank0
 17071  13C6  00A0               	movwf	?_ADC_GetConversion
 17072  13C7  0008               	return
 17073  13C8                     __end_of_ADC_GetConversion:	
 17074                           
 17075                           	psect	text86
 17076  1243                     __ptext86:	
 17077 ;; *************** function _Display_Clear *****************
 17078 ;; Defined at:
 17079 ;;		line 205 in file "main.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;		None
 17082 ;; Auto vars:     Size  Location     Type
 17083 ;;		None
 17084 ;; Return value:  Size  Location     Type
 17085 ;;                  1    wreg      void 
 17086 ;; Registers used:
 17087 ;;		wreg, status,2, status,0, pclath, cstack
 17088 ;; Tracked objects:
 17089 ;;		On entry : 0/0
 17090 ;;		On exit  : 0/0
 17091 ;;		Unchanged: 0/0
 17092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;Total ram usage:        1 bytes
 17098 ;; Hardware stack levels used:    1
 17099 ;; Hardware stack levels required when called:    7
 17100 ;; This function calls:
 17101 ;;		_SPI_Write
 17102 ;; This function is called by:
 17103 ;;		_main
 17104 ;; This function uses a non-reentrant model
 17105 ;;
 17106                           
 17107                           
 17108                           ;psect for function _Display_Clear
 17109  1243                     _Display_Clear:	
 17110                           
 17111                           ;main.c: 206:     SPI_Write(0xFE);
 17112                           
 17113                           ;incstack = 0
 17114                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 17115  1243  30FE               	movlw	254
 17116  1244  3192  22B3  3192   	fcall	_SPI_Write
 17117                           
 17118                           ;main.c: 207:     _delay((unsigned long)((100)*(500000/4000.0)));
 17119  1247  3011               	movlw	17
 17120  1248  0020               	movlb	0	; select bank0
 17121  1249  00A3               	movwf	??_Display_Clear
 17122  124A  303A               	movlw	58
 17123  124B                     u8537:	
 17124  124B  0B89               	decfsz	9,f
 17125  124C  2A4B               	goto	u8537
 17126  124D  0BA3               	decfsz	??_Display_Clear,f
 17127  124E  2A4B               	goto	u8537
 17128  124F  0000               	nop
 17129                           
 17130                           ;main.c: 208:     SPI_Write(0x51);
 17131  1250  3051               	movlw	81
 17132  1251  3192  22B3         	fcall	_SPI_Write
 17133  1253  0008               	return
 17134  1254                     __end_of_Display_Clear:	
 17135                           
 17136                           	psect	text87
 17137  12B3                     __ptext87:	
 17138 ;; *************** function _SPI_Write *****************
 17139 ;; Defined at:
 17140 ;;		line 182 in file "main.c"
 17141 ;; Parameters:    Size  Location     Type
 17142 ;;  incoming        1    wreg     unsigned char 
 17143 ;; Auto vars:     Size  Location     Type
 17144 ;;  incoming        1    2[BANK0 ] unsigned char 
 17145 ;; Return value:  Size  Location     Type
 17146 ;;                  1    wreg      void 
 17147 ;; Registers used:
 17148 ;;		wreg, status,2, status,0, pclath, cstack
 17149 ;; Tracked objects:
 17150 ;;		On entry : 0/0
 17151 ;;		On exit  : 0/0
 17152 ;;		Unchanged: 0/0
 17153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;Total ram usage:        2 bytes
 17159 ;; Hardware stack levels used:    1
 17160 ;; Hardware stack levels required when called:    6
 17161 ;; This function calls:
 17162 ;;		_SPI2_Exchange8bit
 17163 ;; This function is called by:
 17164 ;;		_Display_Name
 17165 ;;		_Display_Clear
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           
 17170                           ;psect for function _SPI_Write
 17171  12B3                     _SPI_Write:	
 17172                           
 17173                           ;incstack = 0
 17174                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 17175                           ;SPI_Write@incoming stored from wreg
 17176  12B3  0020               	movlb	0	; select bank0
 17177  12B4  00A2               	movwf	SPI_Write@incoming
 17178                           
 17179                           ;main.c: 183:     do { LATCbits.LATC0 = 0; } while(0);
 17180  12B5  0022               	movlb	2	; select bank2
 17181  12B6  100E               	bcf	14,0	;volatile
 17182                           
 17183                           ;main.c: 184:     SPI2_Exchange8bit(incoming);
 17184  12B7  0020               	movlb	0	; select bank0
 17185  12B8  0822               	movf	SPI_Write@incoming,w
 17186  12B9  3192  2234  3192   	fcall	_SPI2_Exchange8bit
 17187  12BC  0022               	movlb	2	; select bank2
 17188  12BD  140E               	bsf	14,0	;volatile
 17189                           
 17190                           ;main.c: 186:     _delay((unsigned long)((100)*(500000/4000.0)));
 17191  12BE  3011               	movlw	17
 17192  12BF  0020               	movlb	0	; select bank0
 17193  12C0  00A1               	movwf	??_SPI_Write
 17194  12C1  303A               	movlw	58
 17195  12C2                     u8547:	
 17196  12C2  0B89               	decfsz	9,f
 17197  12C3  2AC2               	goto	u8547
 17198  12C4  0BA1               	decfsz	??_SPI_Write,f
 17199  12C5  2AC2               	goto	u8547
 17200  12C6  0000               	nop
 17201  12C7  0008               	return
 17202  12C8                     __end_of_SPI_Write:	
 17203                           
 17204                           	psect	text88
 17205  1234                     __ptext88:	
 17206 ;; *************** function _SPI2_Exchange8bit *****************
 17207 ;; Defined at:
 17208 ;;		line 79 in file "mcc_generated_files/spi2.c"
 17209 ;; Parameters:    Size  Location     Type
 17210 ;;  data            1    wreg     unsigned char 
 17211 ;; Auto vars:     Size  Location     Type
 17212 ;;  data            1    0[BANK0 ] unsigned char 
 17213 ;; Return value:  Size  Location     Type
 17214 ;;                  1    wreg      unsigned char 
 17215 ;; Registers used:
 17216 ;;		wreg
 17217 ;; Tracked objects:
 17218 ;;		On entry : 0/0
 17219 ;;		On exit  : 0/0
 17220 ;;		Unchanged: 0/0
 17221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17226 ;;Total ram usage:        1 bytes
 17227 ;; Hardware stack levels used:    1
 17228 ;; Hardware stack levels required when called:    5
 17229 ;; This function calls:
 17230 ;;		Nothing
 17231 ;; This function is called by:
 17232 ;;		_SPI_Write
 17233 ;;		_SPI2_Exchange8bitBuffer
 17234 ;; This function uses a non-reentrant model
 17235 ;;
 17236                           
 17237                           
 17238                           ;psect for function _SPI2_Exchange8bit
 17239  1234                     _SPI2_Exchange8bit:	
 17240                           
 17241                           ;incstack = 0
 17242                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 17243                           ;SPI2_Exchange8bit@data stored from wreg
 17244  1234  0020               	movlb	0	; select bank0
 17245  1235  00A0               	movwf	SPI2_Exchange8bit@data
 17246                           
 17247                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 17248  1236  0024               	movlb	4	; select bank4
 17249  1237  139D               	bcf	29,7	;volatile
 17250                           
 17251                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 17252  1238  0020               	movlb	0	; select bank0
 17253  1239  0820               	movf	SPI2_Exchange8bit@data,w
 17254  123A  0024               	movlb	4	; select bank4
 17255  123B  0099               	movwf	25	;volatile
 17256  123C                     l554:	
 17257                           ;mcc_generated_files/spi2.c: 89:     }
 17258                           
 17259                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 17260                           
 17261                           
 17262                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 17263  123C  0024               	movlb	4	; select bank4
 17264  123D  181C               	btfsc	28,0	;volatile
 17265  123E  2A41               	goto	l7023
 17266  123F  0064               	clrwdt	;# 
 17267  1240  2A3C               	goto	l554
 17268  1241                     l7023:	
 17269                           
 17270                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 17271  1241  0819               	movf	25,w	;volatile
 17272  1242  0008               	return
 17273  1243                     __end_of_SPI2_Exchange8bit:	
 17274                           
 17275                           	psect	intentry
 17276  0004                     __pintentry:	
 17277 ;; *************** function _INTERRUPT_InterruptManager *****************
 17278 ;; Defined at:
 17279 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 17280 ;; Parameters:    Size  Location     Type
 17281 ;;		None
 17282 ;; Auto vars:     Size  Location     Type
 17283 ;;		None
 17284 ;; Return value:  Size  Location     Type
 17285 ;;                  1    wreg      void 
 17286 ;; Registers used:
 17287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17288 ;; Tracked objects:
 17289 ;;		On entry : 0/0
 17290 ;;		On exit  : 0/0
 17291 ;;		Unchanged: 0/0
 17292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17297 ;;Total ram usage:        0 bytes
 17298 ;; Hardware stack levels used:    1
 17299 ;; Hardware stack levels required when called:    4
 17300 ;; This function calls:
 17301 ;;		Absolute function
 17302 ;;		_EUSART_Receive_ISR
 17303 ;;		_EUSART_Transmit_ISR
 17304 ;;		_PIN_MANAGER_IOC
 17305 ;;		_i2c_ISR
 17306 ;;		_i2c_busCollisionISR
 17307 ;; This function is called by:
 17308 ;;		Interrupt level 1
 17309 ;; This function uses a non-reentrant model
 17310 ;;
 17311                           
 17312  0004                     _INTERRUPT_InterruptManager:	
 17313                           
 17314                           ;incstack = 0
 17315  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17316                           
 17317                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17318  0005  3180               	pagesel	$
 17319                           
 17320                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 17321  0006  0021               	movlb	1	; select bank1
 17322  0007  1E10               	btfss	16,4	;volatile
 17323  0008  2810               	goto	i1l249
 17324  0009  0020               	movlb	0	; select bank0
 17325  000A  1E10               	btfss	16,4	;volatile
 17326  000B  2810               	goto	i1l249
 17327                           
 17328                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 17329  000C  3190  20CD  3180   	fcall	_PIN_MANAGER_IOC
 17330                           
 17331                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 17332  000F  2845               	goto	i1l261
 17333  0010                     i1l249:	
 17334                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 17335                           
 17336  0010  1F0B               	btfss	11,6	;volatile
 17337  0011  2845               	goto	i1l261
 17338                           
 17339                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 17340  0012  0021               	movlb	1	; select bank1
 17341  0013  1E11               	btfss	17,4	;volatile
 17342  0014  281F               	goto	i1l252
 17343  0015  0020               	movlb	0	; select bank0
 17344  0016  1E11               	btfss	17,4	;volatile
 17345  0017  281F               	goto	i1l252
 17346                           
 17347                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 17348  0018  0023               	movlb	3	; select bank3
 17349  0019  086E               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384),w
 17350  001A  008A               	movwf	10
 17351  001B  086D               	movf	_EUSART_TxDefaultInterruptHandler^(0+384),w
 17352  001C  000A               	callw
 17353  001D  3180               	pagesel	$
 17354                           
 17355                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 17356  001E  2845               	goto	i1l261
 17357  001F                     i1l252:	
 17358                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 17359                           
 17360  001F  0021               	movlb	1	; select bank1
 17361  0020  1E91               	btfss	17,5	;volatile
 17362  0021  282C               	goto	i1l254
 17363  0022  0020               	movlb	0	; select bank0
 17364  0023  1E91               	btfss	17,5	;volatile
 17365  0024  282C               	goto	i1l254
 17366                           
 17367                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 17368  0025  0023               	movlb	3	; select bank3
 17369  0026  086C               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384),w
 17370  0027  008A               	movwf	10
 17371  0028  086B               	movf	_EUSART_RxDefaultInterruptHandler^(0+384),w
 17372  0029  000A               	callw
 17373  002A  3180               	pagesel	$
 17374                           
 17375                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 17376  002B  2845               	goto	i1l261
 17377  002C                     i1l254:	
 17378                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.BCL1IE == 1 && PI
      +                          R1bits.BCL1IF == 1)
 17379                           
 17380  002C  0021               	movlb	1	; select bank1
 17381  002D  1D11               	btfss	17,2	;volatile
 17382  002E  2839               	goto	i1l256
 17383  002F  0020               	movlb	0	; select bank0
 17384  0030  1D11               	btfss	17,2	;volatile
 17385  0031  2839               	goto	i1l256
 17386                           
 17387                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c1_driver_busCollisionISR();
 17388  0032  0023               	movlb	3	; select bank3
 17389  0033  0862               	movf	(_i2c1_driver_busCollisionISR+1)^(0+384),w
 17390  0034  008A               	movwf	10
 17391  0035  0861               	movf	_i2c1_driver_busCollisionISR^(0+384),w
 17392  0036  000A               	callw
 17393  0037  3180               	pagesel	$
 17394                           
 17395                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 17396  0038  2845               	goto	i1l261
 17397  0039                     i1l256:	
 17398                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 17399                           
 17400  0039  0021               	movlb	1	; select bank1
 17401  003A  1D91               	btfss	17,3	;volatile
 17402  003B  2845               	goto	i1l261
 17403  003C  0020               	movlb	0	; select bank0
 17404  003D  1D91               	btfss	17,3	;volatile
 17405  003E  2845               	goto	i1l261
 17406                           
 17407                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             i2c1_driver_i2cISR();
 17408  003F  0023               	movlb	3	; select bank3
 17409  0040  0860               	movf	(_i2c1_driver_i2cISR+1)^(0+384),w
 17410  0041  008A               	movwf	10
 17411  0042  085F               	movf	_i2c1_driver_i2cISR^(0+384),w
 17412  0043  000A               	callw
 17413  0044  3180               	pagesel	$
 17414  0045                     i1l261:	
 17415                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 17416                           
 17417  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17418  0046  0009               	retfie
 17419  0047                     __end_of_INTERRUPT_InterruptManager:	
 17420                           
 17421                           	psect	text90
 17422  10EC                     __ptext90:	
 17423 ;; *************** function _i2c_busCollisionISR *****************
 17424 ;; Defined at:
 17425 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 17426 ;; Parameters:    Size  Location     Type
 17427 ;;		None
 17428 ;; Auto vars:     Size  Location     Type
 17429 ;;		None
 17430 ;; Return value:  Size  Location     Type
 17431 ;;                  1    wreg      void 
 17432 ;; Registers used:
 17433 ;;		status,2, status,0, pclath, cstack
 17434 ;; Tracked objects:
 17435 ;;		On entry : 0/0
 17436 ;;		On exit  : 0/0
 17437 ;;		Unchanged: 0/0
 17438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17443 ;;Total ram usage:        0 bytes
 17444 ;; Hardware stack levels used:    1
 17445 ;; Hardware stack levels required when called:    1
 17446 ;; This function calls:
 17447 ;;		_i2c1_driver_clearBusCollision
 17448 ;; This function is called by:
 17449 ;;		_i2c_open
 17450 ;;		_INTERRUPT_InterruptManager
 17451 ;; This function uses a non-reentrant model
 17452 ;;
 17453                           
 17454                           
 17455                           ;psect for function _i2c_busCollisionISR
 17456  10EC                     _i2c_busCollisionISR:	
 17457                           
 17458                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 17459                           
 17460                           ;incstack = 0
 17461                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 17462  10EC  3190  20E9         	fcall	_i2c1_driver_clearBusCollision
 17463  10EE  0008               	return
 17464  10EF                     __end_of_i2c_busCollisionISR:	
 17465                           
 17466                           	psect	text91
 17467  10E9                     __ptext91:	
 17468 ;; *************** function _i2c1_driver_clearBusCollision *****************
 17469 ;; Defined at:
 17470 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 17471 ;; Parameters:    Size  Location     Type
 17472 ;;		None
 17473 ;; Auto vars:     Size  Location     Type
 17474 ;;		None
 17475 ;; Return value:  Size  Location     Type
 17476 ;;                  1    wreg      void 
 17477 ;; Registers used:
 17478 ;;		None
 17479 ;; Tracked objects:
 17480 ;;		On entry : 0/0
 17481 ;;		On exit  : 0/0
 17482 ;;		Unchanged: 0/0
 17483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;Total ram usage:        0 bytes
 17489 ;; Hardware stack levels used:    1
 17490 ;; This function calls:
 17491 ;;		Nothing
 17492 ;; This function is called by:
 17493 ;;		_i2c_busCollisionISR
 17494 ;; This function uses a non-reentrant model
 17495 ;;
 17496                           
 17497                           
 17498                           ;psect for function _i2c1_driver_clearBusCollision
 17499  10E9                     _i2c1_driver_clearBusCollision:	
 17500                           
 17501                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 17502                           
 17503                           ;incstack = 0
 17504                           ; Regs used in _i2c1_driver_clearBusCollision: []
 17505  10E9  0020               	movlb	0	; select bank0
 17506  10EA  1111               	bcf	17,2	;volatile
 17507  10EB  0008               	return
 17508  10EC                     __end_of_i2c1_driver_clearBusCollision:	
 17509                           
 17510                           	psect	text92
 17511  144B                     __ptext92:	
 17512 ;; *************** function _i2c_ISR *****************
 17513 ;; Defined at:
 17514 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 17515 ;; Parameters:    Size  Location     Type
 17516 ;;		None
 17517 ;; Auto vars:     Size  Location     Type
 17518 ;;		None
 17519 ;; Return value:  Size  Location     Type
 17520 ;;                  1    wreg      void 
 17521 ;; Registers used:
 17522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17523 ;; Tracked objects:
 17524 ;;		On entry : 0/0
 17525 ;;		On exit  : 0/0
 17526 ;;		Unchanged: 0/0
 17527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17530 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17532 ;;Total ram usage:        3 bytes
 17533 ;; Hardware stack levels used:    1
 17534 ;; Hardware stack levels required when called:    3
 17535 ;; This function calls:
 17536 ;;		_do_I2C_DO_ACK
 17537 ;;		_do_I2C_DO_ADDRESS_NACK
 17538 ;;		_do_I2C_DO_NACK_RESTART
 17539 ;;		_do_I2C_DO_NACK_STOP
 17540 ;;		_do_I2C_IDLE
 17541 ;;		_do_I2C_RCEN
 17542 ;;		_do_I2C_RESET
 17543 ;;		_do_I2C_RX
 17544 ;;		_do_I2C_SEND_ADR_READ
 17545 ;;		_do_I2C_SEND_ADR_WRITE
 17546 ;;		_do_I2C_SEND_RESTART
 17547 ;;		_do_I2C_SEND_RESTART_READ
 17548 ;;		_do_I2C_SEND_RESTART_WRITE
 17549 ;;		_do_I2C_SEND_STOP
 17550 ;;		_do_I2C_TX
 17551 ;;		_do_I2C_TX_EMPTY
 17552 ;;		_i2c1_driver_isNACK
 17553 ;;		_mssp1_clearIRQ
 17554 ;; This function is called by:
 17555 ;;		_i2c_open
 17556 ;;		_i2c_poller
 17557 ;;		_INTERRUPT_InterruptManager
 17558 ;; This function uses a non-reentrant model
 17559 ;;
 17560                           
 17561                           
 17562                           ;psect for function _i2c_ISR
 17563  144B                     _i2c_ISR:	
 17564                           
 17565                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 17566                           
 17567                           ;incstack = 0
 17568                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17569  144B  3190  20E6  3194   	fcall	_mssp1_clearIRQ
 17570                           
 17571                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 17572  144E  0023               	movlb	3	; select bank3
 17573  144F  1DA0               	btfss	_i2c_status^(0+384),3
 17574  1450  2C5B               	goto	i1l6061
 17575  1451  3191  2182  3194   	fcall	_i2c1_driver_isNACK
 17576  1454  1C03               	btfss	3,0
 17577  1455  2C5B               	goto	i1l6061
 17578                           
 17579                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 17580  1456  300F               	movlw	15
 17581  1457  00F9               	movwf	??_i2c_ISR
 17582  1458  0879               	movf	??_i2c_ISR,w
 17583  1459  0023               	movlb	3	; select bank3
 17584  145A  00A9               	movwf	(_i2c_status^(0+384)+9)
 17585  145B                     i1l6061:	
 17586                           
 17587                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 17588  145B  0023               	movlb	3	; select bank3
 17589  145C  0829               	movf	(_i2c_status^(0+384)+9),w
 17590  145D  00F9               	movwf	??_i2c_ISR
 17591  145E  01FA               	clrf	??_i2c_ISR+1
 17592  145F  35F9               	lslf	??_i2c_ISR,f
 17593  1460  0DFA               	rlf	??_i2c_ISR+1,f
 17594  1461  3000               	movlw	low (_fsmStateTable| (0+32768))
 17595  1462  0779               	addwf	??_i2c_ISR,w
 17596  1463  0084               	movwf	4
 17597  1464  3098               	movlw	high (_fsmStateTable| (0+32768))
 17598  1465  3D7A               	addwfc	??_i2c_ISR+1,w
 17599  1466  0085               	movwf	5
 17600  1467  3F01               	moviw [1]fsr0
 17601  1468  008A               	movwf	10
 17602  1469  3F00               	moviw [0]fsr0
 17603  146A  000A               	callw
 17604  146B  3194               	pagesel	$
 17605  146C  00FB               	movwf	??_i2c_ISR+2
 17606  146D  087B               	movf	??_i2c_ISR+2,w
 17607  146E  0023               	movlb	3	; select bank3
 17608  146F  00A9               	movwf	(_i2c_status^(0+384)+9)
 17609  1470  0008               	return
 17610  1471                     __end_of_i2c_ISR:	
 17611                           
 17612                           	psect	text93
 17613  10E6                     __ptext93:	
 17614 ;; *************** function _mssp1_clearIRQ *****************
 17615 ;; Defined at:
 17616 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 17617 ;; Parameters:    Size  Location     Type
 17618 ;;		None
 17619 ;; Auto vars:     Size  Location     Type
 17620 ;;		None
 17621 ;; Return value:  Size  Location     Type
 17622 ;;                  1    wreg      void 
 17623 ;; Registers used:
 17624 ;;		None
 17625 ;; Tracked objects:
 17626 ;;		On entry : 0/0
 17627 ;;		On exit  : 0/0
 17628 ;;		Unchanged: 0/0
 17629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17634 ;;Total ram usage:        0 bytes
 17635 ;; Hardware stack levels used:    1
 17636 ;; This function calls:
 17637 ;;		Nothing
 17638 ;; This function is called by:
 17639 ;;		_i2c_ISR
 17640 ;;		_i2c_open
 17641 ;;		_i2c_close
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           
 17646                           ;psect for function _mssp1_clearIRQ
 17647  10E6                     _mssp1_clearIRQ:	
 17648                           
 17649                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 17650                           
 17651                           ;incstack = 0
 17652                           ; Regs used in _mssp1_clearIRQ: []
 17653  10E6  0020               	movlb	0	; select bank0
 17654  10E7  1191               	bcf	17,3	;volatile
 17655  10E8  0008               	return
 17656  10E9                     __end_of_mssp1_clearIRQ:	
 17657                           
 17658                           	psect	text94
 17659  17BA                     __ptext94:	
 17660 ;; *************** function _do_I2C_RX *****************
 17661 ;; Defined at:
 17662 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 17663 ;; Parameters:    Size  Location     Type
 17664 ;;		None
 17665 ;; Auto vars:     Size  Location     Type
 17666 ;;		None
 17667 ;; Return value:  Size  Location     Type
 17668 ;;                  1    wreg      enum E7120
 17669 ;; Registers used:
 17670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17671 ;; Tracked objects:
 17672 ;;		On entry : 0/0
 17673 ;;		On exit  : 0/0
 17674 ;;		Unchanged: 0/0
 17675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17678 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;Total ram usage:        3 bytes
 17681 ;; Hardware stack levels used:    1
 17682 ;; Hardware stack levels required when called:    2
 17683 ;; This function calls:
 17684 ;;		_do_I2C_DO_NACK_RESTART
 17685 ;;		_do_I2C_DO_NACK_STOP
 17686 ;;		_i2c1_driver_sendACK
 17687 ;;		_returnReset
 17688 ;;		_returnStop
 17689 ;;		i1_i2c1_driver_getRXData
 17690 ;; This function is called by:
 17691 ;;		_i2c_ISR
 17692 ;; This function uses a non-reentrant model
 17693 ;;
 17694                           
 17695                           
 17696                           ;psect for function _do_I2C_RX
 17697  17BA                     _do_I2C_RX:	
 17698                           
 17699                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 17700                           
 17701                           ;incstack = 0
 17702                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17703  17BA  3190  20E0  3197   	fcall	i1_i2c1_driver_getRXData
 17704  17BD  00F6               	movwf	??_do_I2C_RX
 17705  17BE  0023               	movlb	3	; select bank3
 17706  17BF  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 17707  17C0  0086               	movwf	6
 17708  17C1  0187               	clrf	7
 17709  17C2  0876               	movf	??_do_I2C_RX,w
 17710  17C3  0081               	movwf	1
 17711  17C4  3001               	movlw	1
 17712  17C5  00F6               	movwf	??_do_I2C_RX
 17713  17C6  0876               	movf	??_do_I2C_RX,w
 17714  17C7  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 17715                           
 17716                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 17717  17C8  3001               	movlw	1
 17718  17C9  02A3               	subwf	(_i2c_status^(0+384)+3),f
 17719  17CA  3000               	movlw	0
 17720  17CB  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 17721  17CC  0823               	movf	(_i2c_status^(0+384)+3),w
 17722  17CD  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 17723  17CE  1903               	btfsc	3,2
 17724  17CF  2FD4               	goto	i1l173
 17725                           
 17726                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 17727  17D0  3191  210E         	fcall	_i2c1_driver_sendACK
 17728                           
 17729                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 17730  17D2  3005               	movlw	5
 17731  17D3  0008               	return
 17732  17D4                     i1l173:	
 17733                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 17734                           
 17735                           
 17736                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 17737  17D4  1520               	bsf	_i2c_status^(0+384),2
 17738                           
 17739                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 17740  17D5  2FDC               	goto	i1l5531
 17741  17D6                     i1l5521:	
 17742                           
 17743                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 17744  17D6  3191  212E         	fcall	_do_I2C_DO_NACK_RESTART
 17745  17D8  0008               	return
 17746  17D9                     i1l5525:	
 17747                           
 17748                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 17749  17D9  3191  212A         	fcall	_do_I2C_DO_NACK_STOP
 17750  17DB  0008               	return
 17751  17DC                     i1l5531:	
 17752  17DC  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 17753  17DD  00F6               	movwf	??_do_I2C_RX
 17754  17DE  0876               	movf	??_do_I2C_RX,w
 17755  17DF  00F6               	movwf	returnReset@p
 17756  17E0  300B               	movlw	11
 17757  17E1  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 17758  17E2  0086               	movwf	6
 17759  17E3  3001               	movlw	1	; select bank3/4
 17760  17E4  0087               	movwf	7
 17761  17E5  3F41               	moviw [1]fsr1
 17762  17E6  008A               	movwf	10
 17763  17E7  3F40               	moviw [0]fsr1
 17764  17E8  000A               	callw
 17765  17E9  3197               	pagesel	$
 17766  17EA  00F7               	movwf	??_do_I2C_RX+1
 17767  17EB  01F8               	clrf	??_do_I2C_RX+2
 17768                           
 17769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17770                           ; Switch size 1, requested type "simple"
 17771                           ; Number of cases is 1, Range of values is 0 to 0
 17772                           ; switch strategies available:
 17773                           ; Name         Instructions Cycles
 17774                           ; simple_byte            4     3 (average)
 17775                           ; direct_byte            8     6 (fixed)
 17776                           ; jumptable            260     6 (fixed)
 17777                           ;	Chosen strategy is simple_byte
 17778  17EC  0878               	movf	??_do_I2C_RX+2,w
 17779  17ED  3A00               	xorlw	0	; case 0
 17780  17EE  1903               	skipnz
 17781  17EF  2FF1               	goto	i1l8529
 17782  17F0  2FD9               	goto	i1l5525
 17783  17F1                     i1l8529:	
 17784                           
 17785                           ; Switch size 1, requested type "simple"
 17786                           ; Number of cases is 4, Range of values is 1 to 4
 17787                           ; switch strategies available:
 17788                           ; Name         Instructions Cycles
 17789                           ; simple_byte           13     7 (average)
 17790                           ; direct_byte           17     9 (fixed)
 17791                           ; jumptable            263     9 (fixed)
 17792                           ;	Chosen strategy is simple_byte
 17793  17F1  0877               	movf	??_do_I2C_RX+1,w
 17794  17F2  3A01               	xorlw	1	; case 1
 17795  17F3  1903               	skipnz
 17796  17F4  2FD9               	goto	i1l5525
 17797  17F5  3A03               	xorlw	3	; case 2
 17798  17F6  1903               	skipnz
 17799  17F7  2FD6               	goto	i1l5521
 17800  17F8  3A01               	xorlw	1	; case 3
 17801  17F9  1903               	skipnz
 17802  17FA  2FD6               	goto	i1l5521
 17803  17FB  3A07               	xorlw	7	; case 4
 17804  17FC  1903               	skipnz
 17805  17FD  2FD9               	goto	i1l5525
 17806  17FE  2FD9               	goto	i1l5525
 17807  17FF  0008               	return
 17808  1800                     __end_of_do_I2C_RX:	
 17809                           
 17810                           	psect	text95
 17811  08BF                     __ptext95:	
 17812 ;; *************** function _do_I2C_TX *****************
 17813 ;; Defined at:
 17814 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 17815 ;; Parameters:    Size  Location     Type
 17816 ;;		None
 17817 ;; Auto vars:     Size  Location     Type
 17818 ;;		None
 17819 ;; Return value:  Size  Location     Type
 17820 ;;                  1    wreg      enum E7120
 17821 ;; Registers used:
 17822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17823 ;; Tracked objects:
 17824 ;;		On entry : 0/0
 17825 ;;		On exit  : 0/0
 17826 ;;		Unchanged: 0/0
 17827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;Total ram usage:        3 bytes
 17833 ;; Hardware stack levels used:    1
 17834 ;; Hardware stack levels required when called:    2
 17835 ;; This function calls:
 17836 ;;		_do_I2C_SEND_RESTART_READ
 17837 ;;		_do_I2C_SEND_RESTART_WRITE
 17838 ;;		_do_I2C_SEND_STOP
 17839 ;;		_i2c1_driver_isNACK
 17840 ;;		_returnReset
 17841 ;;		_returnStop
 17842 ;;		i1_i2c1_driver_TXData
 17843 ;; This function is called by:
 17844 ;;		_i2c_ISR
 17845 ;; This function uses a non-reentrant model
 17846 ;;
 17847                           
 17848                           
 17849                           ;psect for function _do_I2C_TX
 17850  08BF                     _do_I2C_TX:	
 17851                           
 17852                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 17853                           
 17854                           ;incstack = 0
 17855                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17856  08BF  3191  2182  3188   	fcall	_i2c1_driver_isNACK
 17857  08C2  1803               	btfsc	3,0
 17858  08C3  28CE               	goto	i1l5491
 17859  08C4  28F2               	goto	i1l157
 17860  08C5                     i1l5477:	
 17861                           
 17862                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 17863  08C5  3191  2116         	fcall	_do_I2C_SEND_RESTART_READ
 17864  08C7  0008               	return
 17865  08C8                     i1l5481:	
 17866                           
 17867                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 17868  08C8  3191  211A         	fcall	_do_I2C_SEND_RESTART_WRITE
 17869  08CA  0008               	return
 17870  08CB                     i1l5485:	
 17871                           
 17872                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 17873  08CB  3191  2122         	fcall	_do_I2C_SEND_STOP
 17874  08CD  0008               	return
 17875  08CE                     i1l5491:	
 17876  08CE  0023               	movlb	3	; select bank3
 17877  08CF  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 17878  08D0  00F6               	movwf	??_do_I2C_TX
 17879  08D1  0876               	movf	??_do_I2C_TX,w
 17880  08D2  00F6               	movwf	returnReset@p
 17881  08D3  3011               	movlw	17
 17882  08D4  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 17883  08D5  0086               	movwf	6
 17884  08D6  3001               	movlw	1	; select bank3/4
 17885  08D7  0087               	movwf	7
 17886  08D8  3F41               	moviw [1]fsr1
 17887  08D9  008A               	movwf	10
 17888  08DA  3F40               	moviw [0]fsr1
 17889  08DB  000A               	callw
 17890  08DC  3188               	pagesel	$
 17891  08DD  00F7               	movwf	??_do_I2C_TX+1
 17892  08DE  01F8               	clrf	??_do_I2C_TX+2
 17893                           
 17894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17895                           ; Switch size 1, requested type "simple"
 17896                           ; Number of cases is 1, Range of values is 0 to 0
 17897                           ; switch strategies available:
 17898                           ; Name         Instructions Cycles
 17899                           ; simple_byte            4     3 (average)
 17900                           ; direct_byte            8     6 (fixed)
 17901                           ; jumptable            260     6 (fixed)
 17902                           ;	Chosen strategy is simple_byte
 17903  08DF  0878               	movf	??_do_I2C_TX+2,w
 17904  08E0  3A00               	xorlw	0	; case 0
 17905  08E1  1903               	skipnz
 17906  08E2  28E4               	goto	i1l8531
 17907  08E3  28CB               	goto	i1l5485
 17908  08E4                     i1l8531:	
 17909                           
 17910                           ; Switch size 1, requested type "simple"
 17911                           ; Number of cases is 4, Range of values is 1 to 4
 17912                           ; switch strategies available:
 17913                           ; Name         Instructions Cycles
 17914                           ; simple_byte           13     7 (average)
 17915                           ; direct_byte           17     9 (fixed)
 17916                           ; jumptable            263     9 (fixed)
 17917                           ;	Chosen strategy is simple_byte
 17918  08E4  0877               	movf	??_do_I2C_TX+1,w
 17919  08E5  3A01               	xorlw	1	; case 1
 17920  08E6  1903               	skipnz
 17921  08E7  28CB               	goto	i1l5485
 17922  08E8  3A03               	xorlw	3	; case 2
 17923  08E9  1903               	skipnz
 17924  08EA  28C5               	goto	i1l5477
 17925  08EB  3A01               	xorlw	1	; case 3
 17926  08EC  1903               	skipnz
 17927  08ED  28C8               	goto	i1l5481
 17928  08EE  3A07               	xorlw	7	; case 4
 17929  08EF  1903               	skipnz
 17930  08F0  28CB               	goto	i1l5485
 17931  08F1  28CB               	goto	i1l5485
 17932  08F2                     i1l157:	
 17933                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 17934                           
 17935                           
 17936                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 17937  08F2  0023               	movlb	3	; select bank3
 17938  08F3  11A0               	bcf	_i2c_status^(0+384),3
 17939                           
 17940                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 17941  08F4  3002               	movlw	2
 17942  08F5  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 17943  08F6  0086               	movwf	6
 17944  08F7  3001               	movlw	1	; select bank3/4
 17945  08F8  0087               	movwf	7
 17946  08F9  3F40               	moviw [0]fsr1
 17947  08FA  0084               	movwf	4
 17948  08FB  0185               	clrf	5
 17949  08FC  0A81               	incf	1,f
 17950  08FD  0800               	movf	0,w
 17951  08FE  3191  213E  3188   	fcall	i1_i2c1_driver_TXData
 17952                           
 17953                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 17954  0901  3001               	movlw	1
 17955  0902  0023               	movlb	3	; select bank3
 17956  0903  02A3               	subwf	(_i2c_status^(0+384)+3),f
 17957  0904  3000               	movlw	0
 17958  0905  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 17959  0906  0823               	movf	(_i2c_status^(0+384)+3),w
 17960  0907  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 17961  0908  1D03               	btfss	3,2
 17962  0909  290C               	goto	i1l5499
 17963  090A  3006               	movlw	6
 17964  090B  0008               	return
 17965  090C                     i1l5499:	
 17966  090C  3003               	movlw	3
 17967  090D  0008               	return
 17968  090E                     __end_of_do_I2C_TX:	
 17969                           
 17970                           	psect	text96
 17971  1585                     __ptext96:	
 17972 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 17973 ;; Defined at:
 17974 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 17975 ;; Parameters:    Size  Location     Type
 17976 ;;		None
 17977 ;; Auto vars:     Size  Location     Type
 17978 ;;		None
 17979 ;; Return value:  Size  Location     Type
 17980 ;;                  1    wreg      enum E7120
 17981 ;; Registers used:
 17982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17983 ;; Tracked objects:
 17984 ;;		On entry : 0/0
 17985 ;;		On exit  : 0/0
 17986 ;;		Unchanged: 0/0
 17987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17990 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17992 ;;Total ram usage:        3 bytes
 17993 ;; Hardware stack levels used:    1
 17994 ;; Hardware stack levels required when called:    2
 17995 ;; This function calls:
 17996 ;;		_do_I2C_SEND_RESTART
 17997 ;;		_do_I2C_SEND_STOP
 17998 ;;		_returnReset
 17999 ;;		_returnStop
 18000 ;; This function is called by:
 18001 ;;		_i2c_ISR
 18002 ;; This function uses a non-reentrant model
 18003 ;;
 18004                           
 18005                           
 18006                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 18007  1585                     _do_I2C_DO_ADDRESS_NACK:	
 18008                           
 18009                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 18010                           
 18011                           ;incstack = 0
 18012                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18013  1585  0023               	movlb	3	; select bank3
 18014  1586  11A0               	bcf	_i2c_status^(0+384),3
 18015                           
 18016                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 18017  1587  3002               	movlw	2
 18018  1588  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 18019  1589  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 18020  158A  00AA               	movwf	(_i2c_status^(0+384)+10)
 18021                           
 18022                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 18023  158B  2D92               	goto	i1l5465
 18024  158C                     i1l5455:	
 18025                           
 18026                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 18027  158C  3191  211E         	fcall	_do_I2C_SEND_RESTART
 18028  158E  0008               	return
 18029  158F                     i1l5459:	
 18030                           
 18031                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 18032  158F  3191  2122         	fcall	_do_I2C_SEND_STOP
 18033  1591  0008               	return
 18034  1592                     i1l5465:	
 18035  1592  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 18036  1593  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 18037  1594  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 18038  1595  00F6               	movwf	returnReset@p
 18039  1596  300F               	movlw	15
 18040  1597  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 18041  1598  0086               	movwf	6
 18042  1599  3001               	movlw	1	; select bank3/4
 18043  159A  0087               	movwf	7
 18044  159B  3F41               	moviw [1]fsr1
 18045  159C  008A               	movwf	10
 18046  159D  3F40               	moviw [0]fsr1
 18047  159E  000A               	callw
 18048  159F  3195               	pagesel	$
 18049  15A0  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 18050  15A1  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 18051                           
 18052                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18053                           ; Switch size 1, requested type "simple"
 18054                           ; Number of cases is 1, Range of values is 0 to 0
 18055                           ; switch strategies available:
 18056                           ; Name         Instructions Cycles
 18057                           ; simple_byte            4     3 (average)
 18058                           ; direct_byte            8     6 (fixed)
 18059                           ; jumptable            260     6 (fixed)
 18060                           ;	Chosen strategy is simple_byte
 18061  15A2  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 18062  15A3  3A00               	xorlw	0	; case 0
 18063  15A4  1903               	skipnz
 18064  15A5  2DA7               	goto	i1l8533
 18065  15A6  2D8F               	goto	i1l5459
 18066  15A7                     i1l8533:	
 18067                           
 18068                           ; Switch size 1, requested type "simple"
 18069                           ; Number of cases is 2, Range of values is 2 to 3
 18070                           ; switch strategies available:
 18071                           ; Name         Instructions Cycles
 18072                           ; simple_byte            7     4 (average)
 18073                           ; direct_byte           13     9 (fixed)
 18074                           ; jumptable            263     9 (fixed)
 18075                           ;	Chosen strategy is simple_byte
 18076  15A7  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 18077  15A8  3A02               	xorlw	2	; case 2
 18078  15A9  1903               	skipnz
 18079  15AA  2D8C               	goto	i1l5455
 18080  15AB  3A01               	xorlw	1	; case 3
 18081  15AC  1903               	skipnz
 18082  15AD  2D8C               	goto	i1l5455
 18083  15AE  2D8F               	goto	i1l5459
 18084  15AF  0008               	return
 18085  15B0                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 18086                           
 18087                           	psect	text97
 18088  112E                     __ptext97:	
 18089 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 18090 ;; Defined at:
 18091 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 18092 ;; Parameters:    Size  Location     Type
 18093 ;;		None
 18094 ;; Auto vars:     Size  Location     Type
 18095 ;;		None
 18096 ;; Return value:  Size  Location     Type
 18097 ;;                  1    wreg      enum E7120
 18098 ;; Registers used:
 18099 ;;		wreg, status,2, status,0, pclath, cstack
 18100 ;; Tracked objects:
 18101 ;;		On entry : 0/0
 18102 ;;		On exit  : 0/0
 18103 ;;		Unchanged: 0/0
 18104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18109 ;;Total ram usage:        0 bytes
 18110 ;; Hardware stack levels used:    1
 18111 ;; Hardware stack levels required when called:    1
 18112 ;; This function calls:
 18113 ;;		i1_i2c1_driver_sendNACK
 18114 ;; This function is called by:
 18115 ;;		_do_I2C_RX
 18116 ;;		_i2c_ISR
 18117 ;; This function uses a non-reentrant model
 18118 ;;
 18119                           
 18120                           
 18121                           ;psect for function _do_I2C_DO_NACK_RESTART
 18122  112E                     _do_I2C_DO_NACK_RESTART:	
 18123                           
 18124                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 18125                           
 18126                           ;incstack = 0
 18127                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 18128  112E  3191  2112         	fcall	i1_i2c1_driver_sendNACK
 18129                           
 18130                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 18131  1130  3009               	movlw	9
 18132  1131  0008               	return
 18133  1132                     __end_of_do_I2C_DO_NACK_RESTART:	
 18134                           
 18135                           	psect	text98
 18136  112A                     __ptext98:	
 18137 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 18138 ;; Defined at:
 18139 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 18140 ;; Parameters:    Size  Location     Type
 18141 ;;		None
 18142 ;; Auto vars:     Size  Location     Type
 18143 ;;		None
 18144 ;; Return value:  Size  Location     Type
 18145 ;;                  1    wreg      enum E7120
 18146 ;; Registers used:
 18147 ;;		wreg, status,2, status,0, pclath, cstack
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;Total ram usage:        0 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    1
 18160 ;; This function calls:
 18161 ;;		i1_i2c1_driver_sendNACK
 18162 ;; This function is called by:
 18163 ;;		_do_I2C_RX
 18164 ;;		_i2c_ISR
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           
 18169                           ;psect for function _do_I2C_DO_NACK_STOP
 18170  112A                     _do_I2C_DO_NACK_STOP:	
 18171                           
 18172                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 18173                           
 18174                           ;incstack = 0
 18175                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 18176  112A  3191  2112         	fcall	i1_i2c1_driver_sendNACK
 18177                           
 18178                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 18179  112C  300A               	movlw	10
 18180  112D  0008               	return
 18181  112E                     __end_of_do_I2C_DO_NACK_STOP:	
 18182                           
 18183                           	psect	text99
 18184  1126                     __ptext99:	
 18185 ;; *************** function _do_I2C_DO_ACK *****************
 18186 ;; Defined at:
 18187 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 18188 ;; Parameters:    Size  Location     Type
 18189 ;;		None
 18190 ;; Auto vars:     Size  Location     Type
 18191 ;;		None
 18192 ;; Return value:  Size  Location     Type
 18193 ;;                  1    wreg      enum E7120
 18194 ;; Registers used:
 18195 ;;		wreg, status,2, status,0, pclath, cstack
 18196 ;; Tracked objects:
 18197 ;;		On entry : 0/0
 18198 ;;		On exit  : 0/0
 18199 ;;		Unchanged: 0/0
 18200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18205 ;;Total ram usage:        0 bytes
 18206 ;; Hardware stack levels used:    1
 18207 ;; Hardware stack levels required when called:    1
 18208 ;; This function calls:
 18209 ;;		_i2c1_driver_sendACK
 18210 ;; This function is called by:
 18211 ;;		_i2c_ISR
 18212 ;; This function uses a non-reentrant model
 18213 ;;
 18214                           
 18215                           
 18216                           ;psect for function _do_I2C_DO_ACK
 18217  1126                     _do_I2C_DO_ACK:	
 18218                           
 18219                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 18220                           
 18221                           ;incstack = 0
 18222                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 18223  1126  3191  210E         	fcall	_i2c1_driver_sendACK
 18224                           
 18225                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 18226  1128  3005               	movlw	5
 18227  1129  0008               	return
 18228  112A                     __end_of_do_I2C_DO_ACK:	
 18229                           
 18230                           	psect	text100
 18231  1148                     __ptext100:	
 18232 ;; *************** function _do_I2C_RCEN *****************
 18233 ;; Defined at:
 18234 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 18235 ;; Parameters:    Size  Location     Type
 18236 ;;		None
 18237 ;; Auto vars:     Size  Location     Type
 18238 ;;		None
 18239 ;; Return value:  Size  Location     Type
 18240 ;;                  1    wreg      enum E7120
 18241 ;; Registers used:
 18242 ;;		wreg, status,2, status,0, pclath, cstack
 18243 ;; Tracked objects:
 18244 ;;		On entry : 0/0
 18245 ;;		On exit  : 0/0
 18246 ;;		Unchanged: 0/0
 18247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18252 ;;Total ram usage:        0 bytes
 18253 ;; Hardware stack levels used:    1
 18254 ;; Hardware stack levels required when called:    1
 18255 ;; This function calls:
 18256 ;;		i1_i2c1_driver_startRX
 18257 ;; This function is called by:
 18258 ;;		_i2c_ISR
 18259 ;; This function uses a non-reentrant model
 18260 ;;
 18261                           
 18262                           
 18263                           ;psect for function _do_I2C_RCEN
 18264  1148                     _do_I2C_RCEN:	
 18265                           
 18266                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 18267                           
 18268                           ;incstack = 0
 18269                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 18270  1148  0023               	movlb	3	; select bank3
 18271  1149  11A0               	bcf	_i2c_status^(0+384),3
 18272                           
 18273                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 18274  114A  3190  20DD         	fcall	i1_i2c1_driver_startRX
 18275                           
 18276                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 18277  114C  3004               	movlw	4
 18278  114D  0008               	return
 18279  114E                     __end_of_do_I2C_RCEN:	
 18280                           
 18281                           	psect	text101
 18282  116D                     __ptext101:	
 18283 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 18284 ;; Defined at:
 18285 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 18286 ;; Parameters:    Size  Location     Type
 18287 ;;		None
 18288 ;; Auto vars:     Size  Location     Type
 18289 ;;		None
 18290 ;; Return value:  Size  Location     Type
 18291 ;;                  1    wreg      enum E7120
 18292 ;; Registers used:
 18293 ;;		wreg, status,2, status,0, pclath, cstack
 18294 ;; Tracked objects:
 18295 ;;		On entry : 0/0
 18296 ;;		On exit  : 0/0
 18297 ;;		Unchanged: 0/0
 18298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;Total ram usage:        0 bytes
 18304 ;; Hardware stack levels used:    1
 18305 ;; Hardware stack levels required when called:    1
 18306 ;; This function calls:
 18307 ;;		i1_i2c1_driver_TXData
 18308 ;; This function is called by:
 18309 ;;		_i2c_ISR
 18310 ;; This function uses a non-reentrant model
 18311 ;;
 18312                           
 18313                           
 18314                           ;psect for function _do_I2C_SEND_ADR_WRITE
 18315  116D                     _do_I2C_SEND_ADR_WRITE:	
 18316                           
 18317                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 18318                           
 18319                           ;incstack = 0
 18320                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 18321  116D  0023               	movlb	3	; select bank3
 18322  116E  15A0               	bsf	_i2c_status^(0+384),3
 18323                           
 18324                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 18325  116F  3521               	lslf	(_i2c_status^(0+384)+1),w
 18326  1170  3191  213E         	fcall	i1_i2c1_driver_TXData
 18327                           
 18328                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 18329  1172  3003               	movlw	3
 18330  1173  0008               	return
 18331  1174                     __end_of_do_I2C_SEND_ADR_WRITE:	
 18332                           
 18333                           	psect	text102
 18334  118A                     __ptext102:	
 18335 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 18336 ;; Defined at:
 18337 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 18338 ;; Parameters:    Size  Location     Type
 18339 ;;		None
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;		None
 18342 ;; Return value:  Size  Location     Type
 18343 ;;                  1    wreg      enum E7120
 18344 ;; Registers used:
 18345 ;;		wreg, status,2, status,0, pclath, cstack
 18346 ;; Tracked objects:
 18347 ;;		On entry : 0/0
 18348 ;;		On exit  : 0/0
 18349 ;;		Unchanged: 0/0
 18350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;Total ram usage:        0 bytes
 18356 ;; Hardware stack levels used:    1
 18357 ;; Hardware stack levels required when called:    1
 18358 ;; This function calls:
 18359 ;;		i1_i2c1_driver_TXData
 18360 ;; This function is called by:
 18361 ;;		_i2c_ISR
 18362 ;; This function uses a non-reentrant model
 18363 ;;
 18364                           
 18365                           
 18366                           ;psect for function _do_I2C_SEND_ADR_READ
 18367  118A                     _do_I2C_SEND_ADR_READ:	
 18368                           
 18369                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 18370                           
 18371                           ;incstack = 0
 18372                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 18373  118A  0023               	movlb	3	; select bank3
 18374  118B  15A0               	bsf	_i2c_status^(0+384),3
 18375                           
 18376                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 18377  118C  1403               	setc
 18378  118D  0D21               	rlf	(_i2c_status^(0+384)+1),w
 18379  118E  3191  213E         	fcall	i1_i2c1_driver_TXData
 18380                           
 18381                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 18382  1190  3005               	movlw	5
 18383  1191  0008               	return
 18384  1192                     __end_of_do_I2C_SEND_ADR_READ:	
 18385                           
 18386                           	psect	text103
 18387  1122                     __ptext103:	
 18388 ;; *************** function _do_I2C_SEND_STOP *****************
 18389 ;; Defined at:
 18390 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 18391 ;; Parameters:    Size  Location     Type
 18392 ;;		None
 18393 ;; Auto vars:     Size  Location     Type
 18394 ;;		None
 18395 ;; Return value:  Size  Location     Type
 18396 ;;                  1    wreg      enum E7120
 18397 ;; Registers used:
 18398 ;;		wreg, status,2, status,0, pclath, cstack
 18399 ;; Tracked objects:
 18400 ;;		On entry : 0/0
 18401 ;;		On exit  : 0/0
 18402 ;;		Unchanged: 0/0
 18403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18408 ;;Total ram usage:        0 bytes
 18409 ;; Hardware stack levels used:    1
 18410 ;; Hardware stack levels required when called:    1
 18411 ;; This function calls:
 18412 ;;		i1_i2c1_driver_stop
 18413 ;; This function is called by:
 18414 ;;		_do_I2C_DO_ADDRESS_NACK
 18415 ;;		_do_I2C_TX
 18416 ;;		_do_I2C_TX_EMPTY
 18417 ;;		_i2c_ISR
 18418 ;; This function uses a non-reentrant model
 18419 ;;
 18420                           
 18421                           
 18422                           ;psect for function _do_I2C_SEND_STOP
 18423  1122                     _do_I2C_SEND_STOP:	
 18424                           
 18425                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 18426                           
 18427                           ;incstack = 0
 18428                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 18429  1122  3190  20DA         	fcall	i1_i2c1_driver_stop
 18430                           
 18431                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 18432  1124  3000               	movlw	0
 18433  1125  0008               	return
 18434  1126                     __end_of_do_I2C_SEND_STOP:	
 18435                           
 18436                           	psect	text104
 18437  111E                     __ptext104:	
 18438 ;; *************** function _do_I2C_SEND_RESTART *****************
 18439 ;; Defined at:
 18440 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 18441 ;; Parameters:    Size  Location     Type
 18442 ;;		None
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;		None
 18445 ;; Return value:  Size  Location     Type
 18446 ;;                  1    wreg      enum E7120
 18447 ;; Registers used:
 18448 ;;		wreg, status,2, status,0, pclath, cstack
 18449 ;; Tracked objects:
 18450 ;;		On entry : 0/0
 18451 ;;		On exit  : 0/0
 18452 ;;		Unchanged: 0/0
 18453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;Total ram usage:        0 bytes
 18459 ;; Hardware stack levels used:    1
 18460 ;; Hardware stack levels required when called:    1
 18461 ;; This function calls:
 18462 ;;		i1_i2c1_driver_restart
 18463 ;; This function is called by:
 18464 ;;		_do_I2C_DO_ADDRESS_NACK
 18465 ;;		_do_I2C_TX_EMPTY
 18466 ;;		_i2c_ISR
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           
 18471                           ;psect for function _do_I2C_SEND_RESTART
 18472  111E                     _do_I2C_SEND_RESTART:	
 18473                           
 18474                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 18475                           
 18476                           ;incstack = 0
 18477                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 18478  111E  3190  20D7         	fcall	i1_i2c1_driver_restart
 18479                           
 18480                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 18481  1120  3001               	movlw	1
 18482  1121  0008               	return
 18483  1122                     __end_of_do_I2C_SEND_RESTART:	
 18484                           
 18485                           	psect	text105
 18486  111A                     __ptext105:	
 18487 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 18488 ;; Defined at:
 18489 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 18490 ;; Parameters:    Size  Location     Type
 18491 ;;		None
 18492 ;; Auto vars:     Size  Location     Type
 18493 ;;		None
 18494 ;; Return value:  Size  Location     Type
 18495 ;;                  1    wreg      enum E7120
 18496 ;; Registers used:
 18497 ;;		wreg, status,2, status,0, pclath, cstack
 18498 ;; Tracked objects:
 18499 ;;		On entry : 0/0
 18500 ;;		On exit  : 0/0
 18501 ;;		Unchanged: 0/0
 18502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;Total ram usage:        0 bytes
 18508 ;; Hardware stack levels used:    1
 18509 ;; Hardware stack levels required when called:    1
 18510 ;; This function calls:
 18511 ;;		i1_i2c1_driver_restart
 18512 ;; This function is called by:
 18513 ;;		_do_I2C_TX
 18514 ;;		_i2c_ISR
 18515 ;; This function uses a non-reentrant model
 18516 ;;
 18517                           
 18518                           
 18519                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 18520  111A                     _do_I2C_SEND_RESTART_WRITE:	
 18521                           
 18522                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 18523                           
 18524                           ;incstack = 0
 18525                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 18526  111A  3190  20D7         	fcall	i1_i2c1_driver_restart
 18527                           
 18528                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 18529  111C  3002               	movlw	2
 18530  111D  0008               	return
 18531  111E                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 18532                           
 18533                           	psect	text106
 18534  1116                     __ptext106:	
 18535 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 18536 ;; Defined at:
 18537 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 18538 ;; Parameters:    Size  Location     Type
 18539 ;;		None
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;		None
 18542 ;; Return value:  Size  Location     Type
 18543 ;;                  1    wreg      enum E7120
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0, pclath, cstack
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18555 ;;Total ram usage:        0 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    1
 18558 ;; This function calls:
 18559 ;;		i1_i2c1_driver_restart
 18560 ;; This function is called by:
 18561 ;;		_do_I2C_TX
 18562 ;;		_i2c_ISR
 18563 ;; This function uses a non-reentrant model
 18564 ;;
 18565                           
 18566                           
 18567                           ;psect for function _do_I2C_SEND_RESTART_READ
 18568  1116                     _do_I2C_SEND_RESTART_READ:	
 18569                           
 18570                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 18571                           
 18572                           ;incstack = 0
 18573                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 18574  1116  3190  20D7         	fcall	i1_i2c1_driver_restart
 18575                           
 18576                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 18577  1118  3001               	movlw	1
 18578  1119  0008               	return
 18579  111A                     __end_of_do_I2C_SEND_RESTART_READ:	
 18580                           
 18581                           	psect	text107
 18582  1143                     __ptext107:	
 18583 ;; *************** function _do_I2C_IDLE *****************
 18584 ;; Defined at:
 18585 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 18586 ;; Parameters:    Size  Location     Type
 18587 ;;		None
 18588 ;; Auto vars:     Size  Location     Type
 18589 ;;		None
 18590 ;; Return value:  Size  Location     Type
 18591 ;;                  1    wreg      enum E7120
 18592 ;; Registers used:
 18593 ;;		wreg, status,2
 18594 ;; Tracked objects:
 18595 ;;		On entry : 0/0
 18596 ;;		On exit  : 0/0
 18597 ;;		Unchanged: 0/0
 18598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18603 ;;Total ram usage:        0 bytes
 18604 ;; Hardware stack levels used:    1
 18605 ;; This function calls:
 18606 ;;		Nothing
 18607 ;; This function is called by:
 18608 ;;		_i2c_ISR
 18609 ;; This function uses a non-reentrant model
 18610 ;;
 18611                           
 18612                           
 18613                           ;psect for function _do_I2C_IDLE
 18614  1143                     _do_I2C_IDLE:	
 18615                           
 18616                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 18617                           
 18618                           ;incstack = 0
 18619                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 18620  1143  0023               	movlb	3	; select bank3
 18621  1144  1020               	bcf	_i2c_status^(0+384),0
 18622                           
 18623                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 18624  1145  01AA               	clrf	(_i2c_status^(0+384)+10)
 18625                           
 18626                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 18627  1146  300E               	movlw	14
 18628  1147  0008               	return
 18629  1148                     __end_of_do_I2C_IDLE:	
 18630                           
 18631                           	psect	text108
 18632  1166                     __ptext108:	
 18633 ;; *************** function _do_I2C_RESET *****************
 18634 ;; Defined at:
 18635 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 18636 ;; Parameters:    Size  Location     Type
 18637 ;;		None
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;		None
 18640 ;; Return value:  Size  Location     Type
 18641 ;;                  1    wreg      enum E7120
 18642 ;; Registers used:
 18643 ;;		wreg, status,2, status,0, pclath, cstack
 18644 ;; Tracked objects:
 18645 ;;		On entry : 0/0
 18646 ;;		On exit  : 0/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18653 ;;Total ram usage:        0 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:    1
 18656 ;; This function calls:
 18657 ;;		_i2c1_driver_resetBus
 18658 ;; This function is called by:
 18659 ;;		_i2c_ISR
 18660 ;; This function uses a non-reentrant model
 18661 ;;
 18662                           
 18663                           
 18664                           ;psect for function _do_I2C_RESET
 18665  1166                     _do_I2C_RESET:	
 18666                           
 18667                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 18668                           
 18669                           ;incstack = 0
 18670                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 18671  1166  3190  20CE         	fcall	_i2c1_driver_resetBus
 18672                           
 18673                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 18674  1168  0023               	movlb	3	; select bank3
 18675  1169  1020               	bcf	_i2c_status^(0+384),0
 18676                           
 18677                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 18678  116A  01AA               	clrf	(_i2c_status^(0+384)+10)
 18679                           
 18680                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 18681  116B  300E               	movlw	14
 18682  116C  0008               	return
 18683  116D                     __end_of_do_I2C_RESET:	
 18684                           
 18685                           	psect	text109
 18686  15DB                     __ptext109:	
 18687 ;; *************** function _do_I2C_TX_EMPTY *****************
 18688 ;; Defined at:
 18689 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 18690 ;; Parameters:    Size  Location     Type
 18691 ;;		None
 18692 ;; Auto vars:     Size  Location     Type
 18693 ;;		None
 18694 ;; Return value:  Size  Location     Type
 18695 ;;                  1    wreg      enum E7120
 18696 ;; Registers used:
 18697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18698 ;; Tracked objects:
 18699 ;;		On entry : 0/0
 18700 ;;		On exit  : 0/0
 18701 ;;		Unchanged: 0/0
 18702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18705 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18706 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18707 ;;Total ram usage:        3 bytes
 18708 ;; Hardware stack levels used:    1
 18709 ;; Hardware stack levels required when called:    2
 18710 ;; This function calls:
 18711 ;;		_do_I2C_SEND_RESTART
 18712 ;;		_do_I2C_SEND_STOP
 18713 ;;		_mssp1_setIRQ
 18714 ;;		_returnReset
 18715 ;;		_returnStop
 18716 ;; This function is called by:
 18717 ;;		_i2c_ISR
 18718 ;; This function uses a non-reentrant model
 18719 ;;
 18720                           
 18721                           
 18722                           ;psect for function _do_I2C_TX_EMPTY
 18723  15DB                     _do_I2C_TX_EMPTY:	
 18724                           
 18725                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 18726                           
 18727                           ;incstack = 0
 18728                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18729  15DB  0023               	movlb	3	; select bank3
 18730  15DC  1520               	bsf	_i2c_status^(0+384),2
 18731                           
 18732                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 18733  15DD  2DE8               	goto	i1l5557
 18734  15DE                     i1l5541:	
 18735                           
 18736                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 18737  15DE  3191  211E         	fcall	_do_I2C_SEND_RESTART
 18738  15E0  0008               	return
 18739  15E1                     i1l5545:	
 18740                           
 18741                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 18742  15E1  3190  20E3         	fcall	_mssp1_setIRQ
 18743                           
 18744                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 18745  15E3  3003               	movlw	3
 18746  15E4  0008               	return
 18747  15E5                     i1l5551:	
 18748                           
 18749                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 18750  15E5  3191  2122         	fcall	_do_I2C_SEND_STOP
 18751  15E7  0008               	return
 18752  15E8                     i1l5557:	
 18753  15E8  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 18754  15E9  00F6               	movwf	??_do_I2C_TX_EMPTY
 18755  15EA  0876               	movf	??_do_I2C_TX_EMPTY,w
 18756  15EB  00F6               	movwf	returnReset@p
 18757  15EC  300B               	movlw	11
 18758  15ED  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 18759  15EE  0086               	movwf	6
 18760  15EF  3001               	movlw	1	; select bank3/4
 18761  15F0  0087               	movwf	7
 18762  15F1  3F41               	moviw [1]fsr1
 18763  15F2  008A               	movwf	10
 18764  15F3  3F40               	moviw [0]fsr1
 18765  15F4  000A               	callw
 18766  15F5  3195               	pagesel	$
 18767  15F6  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 18768  15F7  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 18769                           
 18770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18771                           ; Switch size 1, requested type "simple"
 18772                           ; Number of cases is 1, Range of values is 0 to 0
 18773                           ; switch strategies available:
 18774                           ; Name         Instructions Cycles
 18775                           ; simple_byte            4     3 (average)
 18776                           ; direct_byte            8     6 (fixed)
 18777                           ; jumptable            260     6 (fixed)
 18778                           ;	Chosen strategy is simple_byte
 18779  15F8  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 18780  15F9  3A00               	xorlw	0	; case 0
 18781  15FA  1903               	skipnz
 18782  15FB  2DFD               	goto	i1l8535
 18783  15FC  2DE5               	goto	i1l5551
 18784  15FD                     i1l8535:	
 18785                           
 18786                           ; Switch size 1, requested type "simple"
 18787                           ; Number of cases is 4, Range of values is 1 to 4
 18788                           ; switch strategies available:
 18789                           ; Name         Instructions Cycles
 18790                           ; simple_byte           13     7 (average)
 18791                           ; direct_byte           17     9 (fixed)
 18792                           ; jumptable            263     9 (fixed)
 18793                           ;	Chosen strategy is simple_byte
 18794  15FD  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 18795  15FE  3A01               	xorlw	1	; case 1
 18796  15FF  1903               	skipnz
 18797  1600  2DE5               	goto	i1l5551
 18798  1601  3A03               	xorlw	3	; case 2
 18799  1602  1903               	skipnz
 18800  1603  2DDE               	goto	i1l5541
 18801  1604  3A01               	xorlw	1	; case 3
 18802  1605  1903               	skipnz
 18803  1606  2DDE               	goto	i1l5541
 18804  1607  3A07               	xorlw	7	; case 4
 18805  1608  1903               	skipnz
 18806  1609  2DE1               	goto	i1l5545
 18807  160A  2DE5               	goto	i1l5551
 18808  160B  0008               	return
 18809  160C                     __end_of_do_I2C_TX_EMPTY:	
 18810                           
 18811                           	psect	text110
 18812  10E3                     __ptext110:	
 18813 ;; *************** function _mssp1_setIRQ *****************
 18814 ;; Defined at:
 18815 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 18816 ;; Parameters:    Size  Location     Type
 18817 ;;		None
 18818 ;; Auto vars:     Size  Location     Type
 18819 ;;		None
 18820 ;; Return value:  Size  Location     Type
 18821 ;;                  1    wreg      void 
 18822 ;; Registers used:
 18823 ;;		None
 18824 ;; Tracked objects:
 18825 ;;		On entry : 0/0
 18826 ;;		On exit  : 0/0
 18827 ;;		Unchanged: 0/0
 18828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18833 ;;Total ram usage:        0 bytes
 18834 ;; Hardware stack levels used:    1
 18835 ;; This function calls:
 18836 ;;		Nothing
 18837 ;; This function is called by:
 18838 ;;		_do_I2C_TX_EMPTY
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           
 18843                           ;psect for function _mssp1_setIRQ
 18844  10E3                     _mssp1_setIRQ:	
 18845                           
 18846                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 18847                           
 18848                           ;incstack = 0
 18849                           ; Regs used in _mssp1_setIRQ: []
 18850  10E3  0020               	movlb	0	; select bank0
 18851  10E4  1591               	bsf	17,3	;volatile
 18852  10E5  0008               	return
 18853  10E6                     __end_of_mssp1_setIRQ:	
 18854                           
 18855                           	psect	text111
 18856  1182                     __ptext111:	
 18857 ;; *************** function _i2c1_driver_isNACK *****************
 18858 ;; Defined at:
 18859 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 18860 ;; Parameters:    Size  Location     Type
 18861 ;;		None
 18862 ;; Auto vars:     Size  Location     Type
 18863 ;;		None
 18864 ;; Return value:  Size  Location     Type
 18865 ;;		None               void
 18866 ;; Registers used:
 18867 ;;		wreg, status,2, status,0
 18868 ;; Tracked objects:
 18869 ;;		On entry : 0/0
 18870 ;;		On exit  : 0/0
 18871 ;;		Unchanged: 0/0
 18872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18877 ;;Total ram usage:        1 bytes
 18878 ;; Hardware stack levels used:    1
 18879 ;; This function calls:
 18880 ;;		Nothing
 18881 ;; This function is called by:
 18882 ;;		_do_I2C_TX
 18883 ;;		_i2c_ISR
 18884 ;; This function uses a non-reentrant model
 18885 ;;
 18886                           
 18887                           
 18888                           ;psect for function _i2c1_driver_isNACK
 18889  1182                     _i2c1_driver_isNACK:	
 18890                           
 18891                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 18892                           
 18893                           ;incstack = 0
 18894                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 18895  1182  0024               	movlb	4	; select bank4
 18896  1183  0E16               	swapf	22,w	;volatile
 18897  1184  0C89               	rrf	9,f
 18898  1185  0C89               	rrf	9,f
 18899  1186  3901               	andlw	1
 18900  1187  00F6               	movwf	??_i2c1_driver_isNACK
 18901  1188  0C76               	rrf	??_i2c1_driver_isNACK,w
 18902  1189  0008               	return
 18903  118A                     __end_of_i2c1_driver_isNACK:	
 18904                           
 18905                           	psect	text112
 18906  113E                     __ptext112:	
 18907 ;; *************** function i1_i2c1_driver_TXData *****************
 18908 ;; Defined at:
 18909 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 18910 ;; Parameters:    Size  Location     Type
 18911 ;;  d               1    wreg     unsigned char 
 18912 ;; Auto vars:     Size  Location     Type
 18913 ;;  d               1    0[COMMON] unsigned char 
 18914 ;; Return value:  Size  Location     Type
 18915 ;;                  1    wreg      void 
 18916 ;; Registers used:
 18917 ;;		wreg
 18918 ;; Tracked objects:
 18919 ;;		On entry : 0/0
 18920 ;;		On exit  : 0/0
 18921 ;;		Unchanged: 0/0
 18922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18927 ;;Total ram usage:        1 bytes
 18928 ;; Hardware stack levels used:    1
 18929 ;; This function calls:
 18930 ;;		Nothing
 18931 ;; This function is called by:
 18932 ;;		_do_I2C_SEND_ADR_READ
 18933 ;;		_do_I2C_SEND_ADR_WRITE
 18934 ;;		_do_I2C_TX
 18935 ;; This function uses a non-reentrant model
 18936 ;;
 18937                           
 18938                           
 18939                           ;psect for function i1_i2c1_driver_TXData
 18940  113E                     i1_i2c1_driver_TXData:	
 18941                           
 18942                           ;incstack = 0
 18943                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 18944                           ;i1i2c1_driver_TXData@d stored from wreg
 18945  113E  00F6               	movwf	i1i2c1_driver_TXData@d
 18946                           
 18947                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 18948  113F  0876               	movf	i1i2c1_driver_TXData@d,w
 18949  1140  0024               	movlb	4	; select bank4
 18950  1141  0091               	movwf	17	;volatile
 18951  1142  0008               	return
 18952  1143                     __end_ofi1_i2c1_driver_TXData:	
 18953                           
 18954                           	psect	text113
 18955  10E0                     __ptext113:	
 18956 ;; *************** function i1_i2c1_driver_getRXData *****************
 18957 ;; Defined at:
 18958 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 18959 ;; Parameters:    Size  Location     Type
 18960 ;;		None
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;		None
 18963 ;; Return value:  Size  Location     Type
 18964 ;;                  1    wreg      unsigned char 
 18965 ;; Registers used:
 18966 ;;		wreg
 18967 ;; Tracked objects:
 18968 ;;		On entry : 0/0
 18969 ;;		On exit  : 0/0
 18970 ;;		Unchanged: 0/0
 18971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;Total ram usage:        0 bytes
 18977 ;; Hardware stack levels used:    1
 18978 ;; This function calls:
 18979 ;;		Nothing
 18980 ;; This function is called by:
 18981 ;;		_do_I2C_RX
 18982 ;; This function uses a non-reentrant model
 18983 ;;
 18984                           
 18985                           
 18986                           ;psect for function i1_i2c1_driver_getRXData
 18987  10E0                     i1_i2c1_driver_getRXData:	
 18988                           
 18989                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 18990                           
 18991                           ;incstack = 0
 18992                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 18993  10E0  0024               	movlb	4	; select bank4
 18994  10E1  0811               	movf	17,w	;volatile
 18995  10E2  0008               	return
 18996  10E3                     __end_ofi1_i2c1_driver_getRXData:	
 18997                           
 18998                           	psect	text114
 18999  1112                     __ptext114:	
 19000 ;; *************** function i1_i2c1_driver_sendNACK *****************
 19001 ;; Defined at:
 19002 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 19003 ;; Parameters:    Size  Location     Type
 19004 ;;		None
 19005 ;; Auto vars:     Size  Location     Type
 19006 ;;		None
 19007 ;; Return value:  Size  Location     Type
 19008 ;;                  1    wreg      void 
 19009 ;; Registers used:
 19010 ;;		None
 19011 ;; Tracked objects:
 19012 ;;		On entry : 0/0
 19013 ;;		On exit  : 0/0
 19014 ;;		Unchanged: 0/0
 19015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19020 ;;Total ram usage:        0 bytes
 19021 ;; Hardware stack levels used:    1
 19022 ;; This function calls:
 19023 ;;		Nothing
 19024 ;; This function is called by:
 19025 ;;		_do_I2C_DO_NACK_STOP
 19026 ;;		_do_I2C_DO_NACK_RESTART
 19027 ;; This function uses a non-reentrant model
 19028 ;;
 19029                           
 19030                           
 19031                           ;psect for function i1_i2c1_driver_sendNACK
 19032  1112                     i1_i2c1_driver_sendNACK:	
 19033                           
 19034                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 19035                           
 19036                           ;incstack = 0
 19037                           ; Regs used in i1_i2c1_driver_sendNACK: []
 19038  1112  0024               	movlb	4	; select bank4
 19039  1113  1696               	bsf	22,5	;volatile
 19040                           
 19041                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 19042  1114  1616               	bsf	22,4	;volatile
 19043  1115  0008               	return
 19044  1116                     __end_ofi1_i2c1_driver_sendNACK:	
 19045                           
 19046                           	psect	text115
 19047  10CE                     __ptext115:	
 19048 ;; *************** function _i2c1_driver_resetBus *****************
 19049 ;; Defined at:
 19050 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;		None
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;		None
 19055 ;; Return value:  Size  Location     Type
 19056 ;;                  1    wreg      void 
 19057 ;; Registers used:
 19058 ;;		None
 19059 ;; Tracked objects:
 19060 ;;		On entry : 0/0
 19061 ;;		On exit  : 0/0
 19062 ;;		Unchanged: 0/0
 19063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19068 ;;Total ram usage:        0 bytes
 19069 ;; Hardware stack levels used:    1
 19070 ;; This function calls:
 19071 ;;		Nothing
 19072 ;; This function is called by:
 19073 ;;		_do_I2C_RESET
 19074 ;; This function uses a non-reentrant model
 19075 ;;
 19076                           
 19077                           
 19078                           ;psect for function _i2c1_driver_resetBus
 19079  10CE                     _i2c1_driver_resetBus:	
 19080                           
 19081                           ;incstack = 0
 19082                           ; Regs used in _i2c1_driver_resetBus: []
 19083  10CE  0008               	return
 19084  10CF                     __end_of_i2c1_driver_resetBus:	
 19085                           
 19086                           	psect	text116
 19087  10DD                     __ptext116:	
 19088 ;; *************** function i1_i2c1_driver_startRX *****************
 19089 ;; Defined at:
 19090 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 19091 ;; Parameters:    Size  Location     Type
 19092 ;;		None
 19093 ;; Auto vars:     Size  Location     Type
 19094 ;;		None
 19095 ;; Return value:  Size  Location     Type
 19096 ;;                  1    wreg      void 
 19097 ;; Registers used:
 19098 ;;		None
 19099 ;; Tracked objects:
 19100 ;;		On entry : 0/0
 19101 ;;		On exit  : 0/0
 19102 ;;		Unchanged: 0/0
 19103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19108 ;;Total ram usage:        0 bytes
 19109 ;; Hardware stack levels used:    1
 19110 ;; This function calls:
 19111 ;;		Nothing
 19112 ;; This function is called by:
 19113 ;;		_do_I2C_RCEN
 19114 ;; This function uses a non-reentrant model
 19115 ;;
 19116                           
 19117                           
 19118                           ;psect for function i1_i2c1_driver_startRX
 19119  10DD                     i1_i2c1_driver_startRX:	
 19120                           
 19121                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 19122                           
 19123                           ;incstack = 0
 19124                           ; Regs used in i1_i2c1_driver_startRX: []
 19125  10DD  0024               	movlb	4	; select bank4
 19126  10DE  1596               	bsf	22,3	;volatile
 19127  10DF  0008               	return
 19128  10E0                     __end_ofi1_i2c1_driver_startRX:	
 19129                           
 19130                           	psect	text117
 19131  10D2                     __ptext117:	
 19132 ;; *************** function _returnReset *****************
 19133 ;; Defined at:
 19134 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 19135 ;; Parameters:    Size  Location     Type
 19136 ;;  p               1    0[COMMON] PTR void 
 19137 ;;		 -> NULL(0), 
 19138 ;; Auto vars:     Size  Location     Type
 19139 ;;		None
 19140 ;; Return value:  Size  Location     Type
 19141 ;;                  1    wreg      enum E6966
 19142 ;; Registers used:
 19143 ;;		wreg
 19144 ;; Tracked objects:
 19145 ;;		On entry : 0/0
 19146 ;;		On exit  : 0/0
 19147 ;;		Unchanged: 0/0
 19148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19149 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19153 ;;Total ram usage:        1 bytes
 19154 ;; Hardware stack levels used:    1
 19155 ;; This function calls:
 19156 ;;		Nothing
 19157 ;; This function is called by:
 19158 ;;		_i2c_open
 19159 ;;		_do_I2C_DO_ADDRESS_NACK
 19160 ;;		_do_I2C_TX
 19161 ;;		_do_I2C_RX
 19162 ;;		_do_I2C_TX_EMPTY
 19163 ;; This function uses a non-reentrant model
 19164 ;;
 19165                           
 19166                           
 19167                           ;psect for function _returnReset
 19168  10D2                     _returnReset:	
 19169                           
 19170                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 19171                           
 19172                           ;incstack = 0
 19173                           ; Regs used in _returnReset: [wreg]
 19174  10D2  3005               	movlw	5
 19175  10D3  0008               	return
 19176  10D4                     __end_of_returnReset:	
 19177                           
 19178                           	psect	text118
 19179  10D0                     __ptext118:	
 19180 ;; *************** function _returnStop *****************
 19181 ;; Defined at:
 19182 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 19183 ;; Parameters:    Size  Location     Type
 19184 ;;  p               1    0[COMMON] PTR void 
 19185 ;;		 -> NULL(0), 
 19186 ;; Auto vars:     Size  Location     Type
 19187 ;;		None
 19188 ;; Return value:  Size  Location     Type
 19189 ;;                  1    wreg      enum E6966
 19190 ;; Registers used:
 19191 ;;		wreg
 19192 ;; Tracked objects:
 19193 ;;		On entry : 0/0
 19194 ;;		On exit  : 0/0
 19195 ;;		Unchanged: 0/0
 19196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19197 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19201 ;;Total ram usage:        1 bytes
 19202 ;; Hardware stack levels used:    1
 19203 ;; This function calls:
 19204 ;;		Nothing
 19205 ;; This function is called by:
 19206 ;;		_i2c_open
 19207 ;;		_setCallBack
 19208 ;;		_do_I2C_DO_ADDRESS_NACK
 19209 ;;		_do_I2C_TX
 19210 ;;		_do_I2C_RX
 19211 ;;		_do_I2C_TX_EMPTY
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           
 19216                           ;psect for function _returnStop
 19217  10D0                     _returnStop:	
 19218                           
 19219                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 19220                           
 19221                           ;incstack = 0
 19222                           ; Regs used in _returnStop: [wreg]
 19223  10D0  3001               	movlw	1
 19224  10D1  0008               	return
 19225  10D2                     __end_of_returnStop:	
 19226                           
 19227                           	psect	text119
 19228  10DA                     __ptext119:	
 19229 ;; *************** function i1_i2c1_driver_stop *****************
 19230 ;; Defined at:
 19231 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 19232 ;; Parameters:    Size  Location     Type
 19233 ;;		None
 19234 ;; Auto vars:     Size  Location     Type
 19235 ;;		None
 19236 ;; Return value:  Size  Location     Type
 19237 ;;                  1    wreg      void 
 19238 ;; Registers used:
 19239 ;;		None
 19240 ;; Tracked objects:
 19241 ;;		On entry : 0/0
 19242 ;;		On exit  : 0/0
 19243 ;;		Unchanged: 0/0
 19244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19249 ;;Total ram usage:        0 bytes
 19250 ;; Hardware stack levels used:    1
 19251 ;; This function calls:
 19252 ;;		Nothing
 19253 ;; This function is called by:
 19254 ;;		_do_I2C_SEND_STOP
 19255 ;; This function uses a non-reentrant model
 19256 ;;
 19257                           
 19258                           
 19259                           ;psect for function i1_i2c1_driver_stop
 19260  10DA                     i1_i2c1_driver_stop:	
 19261                           
 19262                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 19263                           
 19264                           ;incstack = 0
 19265                           ; Regs used in i1_i2c1_driver_stop: []
 19266  10DA  0024               	movlb	4	; select bank4
 19267  10DB  1516               	bsf	22,2	;volatile
 19268  10DC  0008               	return
 19269  10DD                     __end_ofi1_i2c1_driver_stop:	
 19270                           
 19271                           	psect	text120
 19272  10D7                     __ptext120:	
 19273 ;; *************** function i1_i2c1_driver_restart *****************
 19274 ;; Defined at:
 19275 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 19276 ;; Parameters:    Size  Location     Type
 19277 ;;		None
 19278 ;; Auto vars:     Size  Location     Type
 19279 ;;		None
 19280 ;; Return value:  Size  Location     Type
 19281 ;;                  1    wreg      void 
 19282 ;; Registers used:
 19283 ;;		None
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19293 ;;Total ram usage:        0 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; This function calls:
 19296 ;;		Nothing
 19297 ;; This function is called by:
 19298 ;;		_do_I2C_SEND_RESTART_READ
 19299 ;;		_do_I2C_SEND_RESTART_WRITE
 19300 ;;		_do_I2C_SEND_RESTART
 19301 ;; This function uses a non-reentrant model
 19302 ;;
 19303                           
 19304                           
 19305                           ;psect for function i1_i2c1_driver_restart
 19306  10D7                     i1_i2c1_driver_restart:	
 19307                           
 19308                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 19309                           
 19310                           ;incstack = 0
 19311                           ; Regs used in i1_i2c1_driver_restart: []
 19312  10D7  0024               	movlb	4	; select bank4
 19313  10D8  1496               	bsf	22,1	;volatile
 19314  10D9  0008               	return
 19315  10DA                     __end_ofi1_i2c1_driver_restart:	
 19316                           
 19317                           	psect	text121
 19318  110E                     __ptext121:	
 19319 ;; *************** function _i2c1_driver_sendACK *****************
 19320 ;; Defined at:
 19321 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;		None
 19324 ;; Auto vars:     Size  Location     Type
 19325 ;;		None
 19326 ;; Return value:  Size  Location     Type
 19327 ;;                  1    wreg      void 
 19328 ;; Registers used:
 19329 ;;		None
 19330 ;; Tracked objects:
 19331 ;;		On entry : 0/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19339 ;;Total ram usage:        0 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; This function calls:
 19342 ;;		Nothing
 19343 ;; This function is called by:
 19344 ;;		_do_I2C_DO_ACK
 19345 ;;		_do_I2C_RX
 19346 ;;		_I2C_Send_ACK
 19347 ;; This function uses a non-reentrant model
 19348 ;;
 19349                           
 19350                           
 19351                           ;psect for function _i2c1_driver_sendACK
 19352  110E                     _i2c1_driver_sendACK:	
 19353                           
 19354                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 19355                           
 19356                           ;incstack = 0
 19357                           ; Regs used in _i2c1_driver_sendACK: []
 19358  110E  0024               	movlb	4	; select bank4
 19359  110F  1296               	bcf	22,5	;volatile
 19360                           
 19361                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 19362  1110  1616               	bsf	22,4	;volatile
 19363  1111  0008               	return
 19364  1112                     __end_of_i2c1_driver_sendACK:	
 19365                           
 19366                           	psect	text122
 19367  10CD                     __ptext122:	
 19368 ;; *************** function _PIN_MANAGER_IOC *****************
 19369 ;; Defined at:
 19370 ;;		line 120 in file "mcc_generated_files/pin_manager.c"
 19371 ;; Parameters:    Size  Location     Type
 19372 ;;		None
 19373 ;; Auto vars:     Size  Location     Type
 19374 ;;		None
 19375 ;; Return value:  Size  Location     Type
 19376 ;;                  1    wreg      void 
 19377 ;; Registers used:
 19378 ;;		None
 19379 ;; Tracked objects:
 19380 ;;		On entry : 0/0
 19381 ;;		On exit  : 0/0
 19382 ;;		Unchanged: 0/0
 19383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19388 ;;Total ram usage:        0 bytes
 19389 ;; Hardware stack levels used:    1
 19390 ;; This function calls:
 19391 ;;		Nothing
 19392 ;; This function is called by:
 19393 ;;		_INTERRUPT_InterruptManager
 19394 ;; This function uses a non-reentrant model
 19395 ;;
 19396                           
 19397                           
 19398                           ;psect for function _PIN_MANAGER_IOC
 19399  10CD                     _PIN_MANAGER_IOC:	
 19400                           
 19401                           ;incstack = 0
 19402                           ; Regs used in _PIN_MANAGER_IOC: []
 19403  10CD  0008               	return
 19404  10CE                     __end_of_PIN_MANAGER_IOC:	
 19405                           
 19406                           	psect	text123
 19407  13E6                     __ptext123:	
 19408 ;; *************** function _EUSART_Transmit_ISR *****************
 19409 ;; Defined at:
 19410 ;;		line 205 in file "mcc_generated_files/eusart.c"
 19411 ;; Parameters:    Size  Location     Type
 19412 ;;		None
 19413 ;; Auto vars:     Size  Location     Type
 19414 ;;		None
 19415 ;; Return value:  Size  Location     Type
 19416 ;;                  1    wreg      void 
 19417 ;; Registers used:
 19418 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19419 ;; Tracked objects:
 19420 ;;		On entry : 0/0
 19421 ;;		On exit  : 0/0
 19422 ;;		Unchanged: 0/0
 19423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19428 ;;Total ram usage:        1 bytes
 19429 ;; Hardware stack levels used:    1
 19430 ;; This function calls:
 19431 ;;		Nothing
 19432 ;; This function is called by:
 19433 ;;		_EUSART_Initialize
 19434 ;;		_INTERRUPT_InterruptManager
 19435 ;; This function uses a non-reentrant model
 19436 ;;
 19437                           
 19438                           
 19439                           ;psect for function _EUSART_Transmit_ISR
 19440  13E6                     _EUSART_Transmit_ISR:	
 19441                           
 19442                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 19443                           
 19444                           ;incstack = 0
 19445                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 19446  13E6  3008               	movlw	8
 19447  13E7  0023               	movlb	3	; select bank3
 19448  13E8  026F               	subwf	_eusartTxBufferRemaining^(0+384),w	;volatile
 19449  13E9  1803               	skipnc
 19450  13EA  2C03               	goto	i1l784
 19451                           
 19452                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TX1
      +                          REG = eusartTxBuffer[eusartTxTail++];
 19453  13EB  0021               	movlb	1	; select bank1
 19454  13EC  086D               	movf	_eusartTxTail^(0+128),w
 19455  13ED  3ECD               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 19456  13EE  0086               	movwf	6
 19457  13EF  3001               	movlw	1	; select bank3/4
 19458  13F0  0087               	movwf	7
 19459  13F1  0801               	movf	1,w
 19460  13F2  0023               	movlb	3	; select bank3
 19461  13F3  009A               	movwf	26	;volatile
 19462  13F4  3001               	movlw	1
 19463  13F5  00F6               	movwf	??_EUSART_Transmit_ISR
 19464  13F6  0876               	movf	??_EUSART_Transmit_ISR,w
 19465  13F7  0021               	movlb	1	; select bank1
 19466  13F8  07ED               	addwf	_eusartTxTail^(0+128),f	;volatile
 19467                           
 19468                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 19469  13F9  3008               	movlw	8
 19470  13FA  026D               	subwf	_eusartTxTail^(0+128),w	;volatile
 19471  13FB  1803               	btfsc	3,0
 19472                           
 19473                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 19474  13FC  01ED               	clrf	_eusartTxTail^(0+128)	;volatile
 19475                           
 19476                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 19477  13FD  3001               	movlw	1
 19478  13FE  00F6               	movwf	??_EUSART_Transmit_ISR
 19479  13FF  0876               	movf	??_EUSART_Transmit_ISR,w
 19480  1400  0023               	movlb	3	; select bank3
 19481  1401  07EF               	addwf	_eusartTxBufferRemaining^(0+384),f	;volatile
 19482                           
 19483                           ;mcc_generated_files/eusart.c: 217:     }
 19484  1402  0008               	return
 19485  1403                     i1l784:	
 19486                           ;mcc_generated_files/eusart.c: 218:     else
 19487                           
 19488                           
 19489                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 19490  1403  0021               	movlb	1	; select bank1
 19491  1404  1211               	bcf	17,4	;volatile
 19492  1405  0008               	return
 19493  1406                     __end_of_EUSART_Transmit_ISR:	
 19494                           
 19495                           	psect	text124
 19496  16D7                     __ptext124:	
 19497 ;; *************** function _EUSART_Receive_ISR *****************
 19498 ;; Defined at:
 19499 ;;		line 224 in file "mcc_generated_files/eusart.c"
 19500 ;; Parameters:    Size  Location     Type
 19501 ;;		None
 19502 ;; Auto vars:     Size  Location     Type
 19503 ;;		None
 19504 ;; Return value:  Size  Location     Type
 19505 ;;                  1    wreg      void 
 19506 ;; Registers used:
 19507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19508 ;; Tracked objects:
 19509 ;;		On entry : 0/0
 19510 ;;		On exit  : 0/0
 19511 ;;		Unchanged: 0/0
 19512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19517 ;;Total ram usage:        0 bytes
 19518 ;; Hardware stack levels used:    1
 19519 ;; Hardware stack levels required when called:    2
 19520 ;; This function calls:
 19521 ;;		Absolute function
 19522 ;;		_EUSART_DefaultErrorHandler
 19523 ;;		_EUSART_DefaultFramingErrorHandler
 19524 ;;		_EUSART_DefaultOverrunErrorHandler
 19525 ;;		_EUSART_RxDataHandler
 19526 ;; This function is called by:
 19527 ;;		_EUSART_Initialize
 19528 ;;		_INTERRUPT_InterruptManager
 19529 ;; This function uses a non-reentrant model
 19530 ;;
 19531                           
 19532                           
 19533                           ;psect for function _EUSART_Receive_ISR
 19534  16D7                     _EUSART_Receive_ISR:	
 19535                           
 19536                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 19537                           
 19538                           ;incstack = 0
 19539                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19540  16D7  0875               	movf	_eusartRxHead,w	;volatile
 19541  16D8  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19542  16D9  0086               	movwf	6
 19543  16DA  3001               	movlw	1	; select bank3/4
 19544  16DB  0087               	movwf	7
 19545  16DC  0181               	clrf	1
 19546                           
 19547                           ;mcc_generated_files/eusart.c: 229:     if(RC1STAbits.FERR){
 19548  16DD  0023               	movlb	3	; select bank3
 19549  16DE  1D1D               	btfss	29,2	;volatile
 19550  16DF  2EEC               	goto	i1l6125
 19551                           
 19552                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 19553  16E0  0875               	movf	_eusartRxHead,w	;volatile
 19554  16E1  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19555  16E2  0086               	movwf	6
 19556  16E3  3001               	movlw	1	; select bank3/4
 19557  16E4  0087               	movwf	7
 19558  16E5  1481               	bsf	1,1
 19559                           
 19560                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 19561  16E6  0024               	movlb	4	; select bank4
 19562  16E7  0869               	movf	(_EUSART_FramingErrorHandler+1)^(0+512),w
 19563  16E8  008A               	movwf	10
 19564  16E9  0868               	movf	_EUSART_FramingErrorHandler^(0+512),w
 19565  16EA  000A               	callw
 19566  16EB  3196               	pagesel	$
 19567  16EC                     i1l6125:	
 19568                           
 19569                           ;mcc_generated_files/eusart.c: 234:     if(RC1STAbits.OERR){
 19570  16EC  0023               	movlb	3	; select bank3
 19571  16ED  1C9D               	btfss	29,1	;volatile
 19572  16EE  2EFB               	goto	i1l6131
 19573                           
 19574                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 19575  16EF  0875               	movf	_eusartRxHead,w	;volatile
 19576  16F0  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19577  16F1  0086               	movwf	6
 19578  16F2  3001               	movlw	1	; select bank3/4
 19579  16F3  0087               	movwf	7
 19580  16F4  1501               	bsf	1,2
 19581                           
 19582                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 19583  16F5  0024               	movlb	4	; select bank4
 19584  16F6  0867               	movf	(_EUSART_OverrunErrorHandler+1)^(0+512),w
 19585  16F7  008A               	movwf	10
 19586  16F8  0866               	movf	_EUSART_OverrunErrorHandler^(0+512),w
 19587  16F9  000A               	callw
 19588  16FA  3196               	pagesel	$
 19589  16FB                     i1l6131:	
 19590                           
 19591                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 19592  16FB  0875               	movf	_eusartRxHead,w	;volatile
 19593  16FC  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 19594  16FD  0086               	movwf	6
 19595  16FE  3001               	movlw	1	; select bank3/4
 19596  16FF  0087               	movwf	7
 19597  1700  0801               	movf	1,w
 19598  1701  1903               	btfsc	3,2
 19599  1702  2F0A               	goto	i1l6135
 19600                           
 19601                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 19602  1703  0024               	movlb	4	; select bank4
 19603  1704  0865               	movf	(_EUSART_ErrorHandler+1)^(0+512),w
 19604  1705  008A               	movwf	10
 19605  1706  0864               	movf	_EUSART_ErrorHandler^(0+512),w
 19606  1707  000A               	callw
 19607  1708  3196               	pagesel	$
 19608                           
 19609                           ;mcc_generated_files/eusart.c: 241:     } else {
 19610  1709  0008               	return
 19611  170A                     i1l6135:	
 19612                           
 19613                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 19614  170A  3192  22F6         	fcall	_EUSART_RxDataHandler
 19615  170C  0008               	return
 19616  170D                     __end_of_EUSART_Receive_ISR:	
 19617                           
 19618                           	psect	text125
 19619  110A                     __ptext125:	
 19620 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 19621 ;; Defined at:
 19622 ;;		line 260 in file "mcc_generated_files/eusart.c"
 19623 ;; Parameters:    Size  Location     Type
 19624 ;;		None
 19625 ;; Auto vars:     Size  Location     Type
 19626 ;;		None
 19627 ;; Return value:  Size  Location     Type
 19628 ;;                  1    wreg      void 
 19629 ;; Registers used:
 19630 ;;		None
 19631 ;; Tracked objects:
 19632 ;;		On entry : 0/0
 19633 ;;		On exit  : 0/0
 19634 ;;		Unchanged: 0/0
 19635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19640 ;;Total ram usage:        0 bytes
 19641 ;; Hardware stack levels used:    1
 19642 ;; This function calls:
 19643 ;;		Nothing
 19644 ;; This function is called by:
 19645 ;;		_EUSART_Initialize
 19646 ;;		_EUSART_Receive_ISR
 19647 ;; This function uses a non-reentrant model
 19648 ;;
 19649                           
 19650                           
 19651                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 19652  110A                     _EUSART_DefaultOverrunErrorHandler:	
 19653                           
 19654                           ;mcc_generated_files/eusart.c: 263:     RC1STAbits.CREN = 0;
 19655                           
 19656                           ;incstack = 0
 19657                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 19658  110A  0023               	movlb	3	; select bank3
 19659  110B  121D               	bcf	29,4	;volatile
 19660                           
 19661                           ;mcc_generated_files/eusart.c: 264:     RC1STAbits.CREN = 1;
 19662  110C  161D               	bsf	29,4	;volatile
 19663  110D  0008               	return
 19664  110E                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 19665                           
 19666                           	psect	text126
 19667  10CC                     __ptext126:	
 19668 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 19669 ;; Defined at:
 19670 ;;		line 258 in file "mcc_generated_files/eusart.c"
 19671 ;; Parameters:    Size  Location     Type
 19672 ;;		None
 19673 ;; Auto vars:     Size  Location     Type
 19674 ;;		None
 19675 ;; Return value:  Size  Location     Type
 19676 ;;                  1    wreg      void 
 19677 ;; Registers used:
 19678 ;;		None
 19679 ;; Tracked objects:
 19680 ;;		On entry : 0/0
 19681 ;;		On exit  : 0/0
 19682 ;;		Unchanged: 0/0
 19683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19688 ;;Total ram usage:        0 bytes
 19689 ;; Hardware stack levels used:    1
 19690 ;; This function calls:
 19691 ;;		Nothing
 19692 ;; This function is called by:
 19693 ;;		_EUSART_Initialize
 19694 ;;		_EUSART_Receive_ISR
 19695 ;; This function uses a non-reentrant model
 19696 ;;
 19697                           
 19698                           
 19699                           ;psect for function _EUSART_DefaultFramingErrorHandler
 19700  10CC                     _EUSART_DefaultFramingErrorHandler:	
 19701                           
 19702                           ;incstack = 0
 19703                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 19704  10CC  0008               	return
 19705  10CD                     __end_of_EUSART_DefaultFramingErrorHandler:	
 19706                           
 19707                           	psect	text127
 19708  10D4                     __ptext127:	
 19709 ;; *************** function _EUSART_DefaultErrorHandler *****************
 19710 ;; Defined at:
 19711 ;;		line 268 in file "mcc_generated_files/eusart.c"
 19712 ;; Parameters:    Size  Location     Type
 19713 ;;		None
 19714 ;; Auto vars:     Size  Location     Type
 19715 ;;		None
 19716 ;; Return value:  Size  Location     Type
 19717 ;;                  1    wreg      void 
 19718 ;; Registers used:
 19719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19720 ;; Tracked objects:
 19721 ;;		On entry : 0/0
 19722 ;;		On exit  : 0/0
 19723 ;;		Unchanged: 0/0
 19724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19729 ;;Total ram usage:        0 bytes
 19730 ;; Hardware stack levels used:    1
 19731 ;; Hardware stack levels required when called:    1
 19732 ;; This function calls:
 19733 ;;		_EUSART_RxDataHandler
 19734 ;; This function is called by:
 19735 ;;		_EUSART_Initialize
 19736 ;;		_EUSART_Receive_ISR
 19737 ;; This function uses a non-reentrant model
 19738 ;;
 19739                           
 19740                           
 19741                           ;psect for function _EUSART_DefaultErrorHandler
 19742  10D4                     _EUSART_DefaultErrorHandler:	
 19743                           
 19744                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 19745                           
 19746                           ;incstack = 0
 19747                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19748  10D4  3192  22F6         	fcall	_EUSART_RxDataHandler
 19749  10D6  0008               	return
 19750  10D7                     __end_of_EUSART_DefaultErrorHandler:	
 19751                           
 19752                           	psect	text128
 19753  12F6                     __ptext128:	
 19754 ;; *************** function _EUSART_RxDataHandler *****************
 19755 ;; Defined at:
 19756 ;;		line 248 in file "mcc_generated_files/eusart.c"
 19757 ;; Parameters:    Size  Location     Type
 19758 ;;		None
 19759 ;; Auto vars:     Size  Location     Type
 19760 ;;		None
 19761 ;; Return value:  Size  Location     Type
 19762 ;;                  1    wreg      void 
 19763 ;; Registers used:
 19764 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19765 ;; Tracked objects:
 19766 ;;		On entry : 0/0
 19767 ;;		On exit  : 0/0
 19768 ;;		Unchanged: 0/0
 19769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19774 ;;Total ram usage:        1 bytes
 19775 ;; Hardware stack levels used:    1
 19776 ;; This function calls:
 19777 ;;		Nothing
 19778 ;; This function is called by:
 19779 ;;		_EUSART_Receive_ISR
 19780 ;;		_EUSART_DefaultErrorHandler
 19781 ;; This function uses a non-reentrant model
 19782 ;;
 19783                           
 19784                           
 19785                           ;psect for function _EUSART_RxDataHandler
 19786  12F6                     _EUSART_RxDataHandler:	
 19787                           
 19788                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 19789                           
 19790                           ;incstack = 0
 19791                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 19792  12F6  0023               	movlb	3	; select bank3
 19793  12F7  0819               	movf	25,w	;volatile
 19794  12F8  00F6               	movwf	??_EUSART_RxDataHandler
 19795  12F9  0875               	movf	_eusartRxHead,w
 19796  12FA  3EC5               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 19797  12FB  0086               	movwf	6
 19798  12FC  3001               	movlw	1	; select bank3/4
 19799  12FD  0087               	movwf	7
 19800  12FE  0876               	movf	??_EUSART_RxDataHandler,w
 19801  12FF  0081               	movwf	1
 19802  1300  3001               	movlw	1
 19803  1301  00F6               	movwf	??_EUSART_RxDataHandler
 19804  1302  0876               	movf	??_EUSART_RxDataHandler,w
 19805  1303  07F5               	addwf	_eusartRxHead,f	;volatile
 19806                           
 19807                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 19808  1304  3008               	movlw	8
 19809  1305  0275               	subwf	_eusartRxHead,w	;volatile
 19810  1306  1803               	btfsc	3,0
 19811                           
 19812                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 19813  1307  01F5               	clrf	_eusartRxHead	;volatile
 19814                           
 19815                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 19816  1308  3001               	movlw	1
 19817  1309  00F6               	movwf	??_EUSART_RxDataHandler
 19818  130A  0876               	movf	??_EUSART_RxDataHandler,w
 19819  130B  0021               	movlb	1	; select bank1
 19820  130C  07EC               	addwf	_eusartRxCount^(0+128),f	;volatile
 19821  130D  0008               	return
 19822  130E                     __end_of_EUSART_RxDataHandler:	
 19823  007E                     btemp	set	126	;btemp
 19824  007E                     int$flags	set	126
 19825  007E                     wtemp0	set	126


Data Sizes:
    Strings     55
    Constant    32
    Data        11
    BSS         196
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     70      80
    BANK2            80     64      80
    BANK3            80      0      80
    BANK4            80      0      74
    BANK5            80      0      32
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2876	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK5[32]), UART_Byte@bits(BANK1[7]), STR_4(CODE[11]), STR_3(CODE[16]), 
		 -> STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK5[32]), UART_Byte@bits(BANK1[7]), STR_4(CODE[11]), STR_3(CODE[16]), 
		 -> STR_2(CODE[13]), STR_1(CODE[12]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 0

    strcpy@s	PTR const unsigned char  size(1) Largest target is 0

    strcat@src	PTR const unsigned char  size(1) Largest target is 0

    strcat@dest	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 0

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK5[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S2416_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK5[32]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _UART_Byte->_sprintf
    _strcat->_strcpy
    _strcpy->_strlen
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _abs->___aomod
    _SYSTEM_Initialize->_EUSART_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _On_Off->_ADC_GetConversion
    _Get_ADC->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture
    _UART_Byte->_sprintf
    _sprintf->_vfprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  100468
                                             64 BANK1      6     6      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                             _On_Off
                         _PIR_Sensor
                  _SYSTEM_Initialize
                          _UART_Byte
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8855
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    7779
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5607
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     908
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Byte                                           13    13      0   10520
                                             16 BANK1     13    13      0
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     4      1    1192
                                             10 BANK0      5     4      1
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     4      1     314
                                              5 BANK0      5     4      1
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             14    10      4    8602
                                             79 BANK0      1     1      0
                                              3 BANK1     13     9      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    7787
                                             74 BANK0      5     2      3
                                              0 BANK1      3     3      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    7368
                                             58 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                30    22      8    5647
                                             28 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    3435
                                             19 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1429
                                             11 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3    1037
                                              3 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             19 BANK0      4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             19     3     16     613
                                              0 BANK0     19     3     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             27    11     16     625
                                              0 BANK0     27    11     16
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     605
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     605
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _On_Off                                               5     5      0      96
                                              4 BANK0      5     5      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1420
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
                             _Toggle
 ---------------------------------------------------------------------------------
 (2) _Toggle                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2    1076
                                              5 BANK0      7     5      2
                 _PWM_Output_Disable
                  _PWM_Output_Enable
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     400
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Disable                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     914
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_ISR                                             3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (13) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (14) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (14) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _PWM_Output_Disable
     _PWM_Output_Enable
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _Toggle
   _On_Off
     _ADC_GetConversion
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _UART_Byte
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
     _strcat
       _strcpy
         _strlen (ARG)
       _strlen
     _strcpy
       _strlen (ARG)
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     46      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4A      13       92.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1B6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1B6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 10 08:38:56 2019

                ?_EUSART_SetRxInterruptHandler 0020                                   returnReset@p 0076  
                        ?_setGestureExitThresh 0076                             __size_of_I2C_Start 0003  
                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 002C  
                         __size_of_do_I2C_IDLE 0005                                             _on 00EF  
                          _do_I2C_SEND_RESTART 111E                           __size_of_do_I2C_RCEN 0006  
                          ___wmul@multiplicand 0022                             _PWM_Output_Disable 10EF  
                                  __CFG_LVP$ON 0000                                            l554 123C  
                                          l645 13BB                                            l771 080B  
             processGestureData@ud_ratio_first 0031                                            l772 0813  
                                          l936 0A6D                                            l972 09A9  
                                          _PR2 001E                                   __CFG_CPD$OFF 0000  
                                          _abs 133E                         ??_EUSART_RxDataHandler 0076  
                        __end_of_decodeGesture 0501                           __size_of_I2C_ReStart 0003  
                                          _pad 09FF                 ?_EUSART_SetFramingErrorHandler 0020  
                      __size_of_PMD_Initialize 0008                             I2C_Write_Byte@Byte 0023  
                              _TMR2_Initialize 11AA                          __size_of_do_I2C_RESET 0007  
                                          wreg 0009                                     _TXSTA1bits 019E  
                          ?_PWM_Output_Disable 0076                             i1_i2c1_driver_stop 10DA  
                                         l1017 0B6A                                           ?_abs 0033  
                                         l1300 02F4                                           l1311 033D  
                                         l1312 0356                                           l1307 0314  
                                         l1333 03DD                                           l1440 137B  
                                         l1361 04A0                                           l1345 042F  
                                         l1337 03FA                                           l1265 00B3  
                                         l1292 0299                                           l1373 04F0  
                                         l1357 0483                                           l1349 044C  
                                         l1630 0A37                                           l1294 02C0  
                                         l1640 0569                                           l1288 0270  
                                         l1641 057D                                           l1369 04D3  
                                         l1627 0A17                                           l1635 0547  
                                         l1644 0613                                           l1636 054E  
                                         l5027 1330                                           l1676 1397  
                                         l1776 0FEE                                           l7001 061F  
                                         l7011 0632                                           l1789 0D0E  
                                         l7005 0627                                           ?_pad 0033  
                                         l7023 1241                                           l7015 063F  
                                         l7201 08B4                                           l7211 00A2  
                                         l4901 09CB                                           l8023 17B6  
                                         l7127 1265                                           l4903 09D7  
                                         l7303 026B                                           l7231 00AF  
                                         l7215 00A4                                           l8025 17B7  
                                         l7073 0C0D                                           l7145 091A  
                                         l7401 03B5                                           l4913 09F2  
                                         l7321 02BB                                           l7233 0109  
                                         l8203 0E79                                           l7067 0BEC  
                                         l7059 0BB2                                           l7083 0C1E  
                                         l7331 02E7                                           l7077 0C13  
                                         l7165 094D                                           l7157 0934  
                                         l7149 091C                                           l7413 03F5  
                                         l4917 09FA                                           l4909 09E9  
                                         l7093 1391                                           l7317 02B3  
                                         l7309 0294                                           l7261 0120  
                                         l8215 0E9E                                           l8039 1216  
                                         l7167 094E                                           l7159 0941  
                                         l7431 0447                                           l7343 030F  
                                         l7247 0124                                           l8217 0EA8  
                                         l8241 0F06                                           l7409 03D8  
                                         l7265 016E                                           l8057 0665  
                                         l8227 0ECA                                           l7427 042A  
                                         l7419 0407                                           l7371 0379  
                                         l4891 09C3                                           l7339 02F6  
                                         l7283 0221                                           l6901 0F79  
                                         l8157 0AD3                                           l7445 047E  
                                         l7437 0459                                           l7381 038F  
                                         l4885 09B8                                           l7349 0338  
                                         l7293 0247                                           l7285 0224  
                                         l7701 0DE1                                           l8245 0762  
                                         l8239 0EF9                                           l6911 0FC1  
                                         l6903 0F88                                           l7463 04CE  
                                         l7455 04AD                                           l7383 0391  
                                         l7295 024A                                           l7279 020F  
                                         l7199 0885                                           l8263 079B  
                                         l8255 0784                                           l6817 1313  
                                         l6913 0FCD                                           l6761 0805  
                                         l7473 04FD                                           l7449 049B  
                                         l7393 03A3                                           l7377 0384  
                                         l7289 0235                                           l8273 07B7  
                                         l8265 07AA                                           l8249 077A  
                                         l6819 131F                                           l8195 0E49  
                                         l6923 0C6D                                           l6843 1206  
                                         l7467 04EB                                           l7395 03A5  
                                         l7387 0399                                           l7629 13C0  
                                         l7717 11C1                                           l6941 0CE1  
                                         l6829 1475                                           l6861 0A15  
                                         l6837 137E                                           l7389 039B  
                                         l7477 04FF                                           l7661 0DE4  
                                         l8277 07C5                                           l8365 0A5A  
                                         l6935 0CA2                                           l6943 0CED  
                                         l6927 0C95                                           l6775 082C  
                                         l6871 0A43                                           l7487 16AF  
                                         l7399 03AF                                           l8527 07CE  
                                         l8279 07E2                                           l7815 14FB  
                                         l7649 098C                                           l6937 0CB1  
                                         l6785 1717                                           l6857 0A0D  
                                         l7489 16CE                                           l7657 0D2F  
                                         l6891 0F62                                           l6867 0A19  
                                         l7683 0D69                                           l7675 0D46  
                                         l7667 0D33                                           l7835 1278  
                                         l7819 14FD                                           l8387 0A95  
                                         l6885 0F35                                           l6789 173A  
                                         l6973 0561                                           l7917 15D9  
                                         l7845 128B                                           l6983 05AA  
                                         l7935 163C                                           l7695 0D77  
                                         l7863 166E                                           l7775 12B1  
                                         l6889 0F5D                                           l6993 0585  
                                         l7953 14BC                                           l7697 0DD8  
                                         l7881 16A0                                           l7785 129E  
                                         l6979 0578                                           l7963 1232  
                                         l7795 1522                                           l7799 1524  
                                         l7899 14E3                                           STR_1 183D  
                                         STR_2 1830                                           STR_3 1820  
                                         STR_4 1849                                           STR_5 1854  
                                         STR_6 1854                                           STR_7 1854  
                                         STR_8 1854                        __end_of_PWM1_Initialize 1226  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u6015 1738  
                                         u3705 09EA                                           u6115 1348  
                                         _PMD0 0911                                           u7005 02DA  
                                         _PMD1 0912                                           _PMD2 0913  
                                         _PMD3 0914                                           u6160 0F6A  
                                         _PMD4 0915                                           u3665 09CE  
                                         _PMD5 0916                                           u6330 051D  
                                         u7115 0362                                           u6340 051E  
                                         u3685 09D8                                           u6095 0A23  
                                         u6415 061D                                           u3695 09E2  
                                         u7055 0300                                           u7305 0438  
                                         u7065 031D                                           u6195 0FAE  
                                         u6435 0599                                           u7315 0456  
                                         u7075 0329                                           u8205 0E5F  
                                         u6445 05A5                                           u7405 04DC  
                                         u7245 03C9                                           u7085 0346  
                                         u8215 0E71                                           u6295 0CCF  
                                         u7415 04FA                                           u7255 03E6  
                                         u6624 092D                                           u8305 0EF4  
                                         u8225 0E83                                           u6385 0559  
                                         u6625 092C                                           u7345 046F  
                                         u7265 0404                                           u6634 0939  
                                         u8235 0E8F                                           u6635 0938  
                                         u7355 048C                                           u6555 1398  
                                         u8315 0772                                           u8165 0E1D  
                                         u7365 04AA                                           u6565 139D  
                                         u7525 0D72                           ?_do_I2C_SEND_RESTART 0076  
                                         u7455 0996                                           u8255 0EB2  
                                         u8175 0E37                                           u7295 041B  
                                         u7535 0D81                                           u8335 0796  
                                         u8265 0EBE                                           u8185 0E43  
                                         u8195 0E53                                           u7395 04BF  
                                         u6915 025C                                           u6755 00BE  
                                         u6675 088E                                           u8507 0DFB  
                                         u8517 0964                                           u8285 0ED4  
                                         u7805 17A1                                           u7725 161D  
                                         u6925 0279                                           u7565 1544  
                                         u8527 0974                                           u8295 0EE0  
                                         u7815 17AD                                           u6935 0285  
                                         u6855 0208                                           u7575 156D  
                                         u8537 124B                                           u6945 02A2  
                                         u6865 0219                                           u7665 164F  
                                         u8547 12C2                                           u6875 022E  
                                         u6885 023F                                           u7685 1681  
                                         u8497 0DE8                                           u7795 1787  
                                         u6995 02CC                                           _TMR2 001D  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000              __size_of_do_I2C_SEND_RESTART_READ 0004  
                                         abs@a 0033                                           _dbuf 02A0  
                          ?i1_i2c1_driver_stop 0076                      ?_do_I2C_SEND_RESTART_READ 0076  
                                         _main 0A52                                           _dtoa 0501  
                                         _name 00E6                      __size_of_do_I2C_SEND_STOP 0004  
                       __size_of_do_I2C_DO_ACK 0004                                           _prec 0160  
                                         _nout 01D5                                           pad@i 0037  
                                         pad@p 0034                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         _prox 0169                                           fsr1l 0006  
                                         pad@w 0039                                           btemp 007E  
                        ??_setGestureIntEnable 002A                               __end_of_I2C_Stop 0803  
                                __CFG_BOREN$ON 0000                        i1_i2c1_driver_getRXData 10E0  
                        ?_do_I2C_SEND_ADR_READ 0076                                  __CFG_BORV$LOW 0000  
              ??_i2c1_driver_clearBusCollision 0076                                           start 0047  
                              __end_of_Get_ADC 0F09                            I2C_Write_Byte@count 0024  
                                __CFG_CSWEN$ON 0000                                  __CFG_MCLRE$ON 0000  
                         ??_PWM_Output_Disable 0020                                __end_of_i2c_ISR 1471  
                     ??_do_I2C_DO_NACK_RESTART 0076                                          ??_abs 0035  
                                        ??_pad 0036                                   ?_readGesture 004F  
                                 _do_I2C_RESET 1166                                  ?_EUSART_Write 0076  
               __size_of_OSCILLATOR_Initialize 0008                  __end_of_OSCILLATOR_Initialize 11A2  
                         ??i1_i2c1_driver_stop 0076                                __end_of___aodiv 1000  
                                        _ADACT 009F                       __end_of_i2c1_driver_open 1203  
                                        ?_main 0076                                          ?_dtoa 003C  
                              __end_of___aomod 0D20                                __end_of___awdiv 09FF  
                     __end_of_i2c1_driver_stop 110A                                ___awdiv@divisor 0026  
                                        _T2CON 001F                     __end_of_i2c1_driver_TXData 115A  
                               __CFG_DEBUG$OFF 0000                                          i1l252 001F  
                                        i1l157 08F2                                          i1l173 17D4  
                                        i1l261 0045                                          i1l254 002C  
                                        i1l256 0039                                          i1l249 0010  
                                        i1l784 1403                                   ?_setLEDBoost 0076  
                              ___awdiv@counter 002B                                   ?_setLEDDrive 0076  
                               _setGestureGain 163E                                          _OSCEN 091D  
                           wireReadDataBlock@j 0030                                   vfpfcnvrt@fmt 005A  
                               _setGestureMode 1497                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _RXPPS 0E24                    __end_of_setProxIntLowThresh 12B3  
                              __end_of_getMode 11F9                             __size_of_UART_Byte 006E  
                                  ?_PIR_Sensor 0076                          isGestureAvailable@val 002A  
                      __end_of_PIN_MANAGER_IOC 10CE                                          _flags 0162  
                   __end_of_i2c1_driver_isNACK 118A                         __size_of_I2C_Read_Byte 000B  
                               _WDT_Initialize 1136                                          _names 01E3  
                                        _fputc 170D                                          _fputs 1471  
                             _b_i2c_error_flag 0168                   __end_of_setProxIntHighThresh 12A0  
                   ?_do_I2C_SEND_RESTART_WRITE 0076                                          pad@fp 003B  
                                        _width 01D7                                          _putch 114E  
                                        _start 016F                          ??_do_I2C_SEND_RESTART 0076  
                                        dtoa@d 003C                                          dtoa@i 0058  
                                        dtoa@n 0050                                          dtoa@p 004A  
                                        dtoa@s 004E                                          dtoa@w 004C  
                              __end_of_setMode 095D                              __end_of_I2C_Start 1107  
                                        pclath 000A                        __size_of_mssp1_clearIRQ 0003  
                         i1_i2c1_driver_TXData 113E                   __size_of_setAmbientLightGain 001E  
                       ?_do_I2C_SEND_ADR_WRITE 0076                         __size_of_I2C_Send_NACK 0003  
                                        status 0003                                          wtemp0 007E  
                              __end_of_sprintf 1427                             __size_of_SPI_Write 0015  
                     ?_setLightIntLowThreshold 002A                     __end_of_setGestureLEDDrive 16A2  
                        setGestureWaitTime@val 002C                                  _gestureToggle 016E  
                                _fsmStateTable 1800                                  _gesture_data_ 0220  
                              __initialization 0049                         ??_setGestureExitThresh 002A  
                            _SPI2_Exchange8bit 1234                     processGestureData@lr_delta 004B  
                                   _i2c_status 01A0                                   __end_of_main 0AA6  
                                 __end_of_dtoa 0652                              _handleGestureFlag 016C  
                   processGestureData@ud_delta 0049                                 ??_EUSART_Write 0020  
                           ?_SPI2_Exchange8bit 0076                        __end_of_TMR2_Initialize 11B2  
                  ?_INTERRUPT_InterruptManager 0076                         __end_of_setGestureGain 1670  
                    __size_of_setProximityGain 0029                 ??_EUSART_SetRxInterruptHandler 0022  
                       __end_of_setGestureMode 14BE                                  _do_I2C_DO_ACK 1126  
                                       ??_main 00E0                                         ??_dtoa 0044  
                __size_of_i2c1_driver_sendNACK 0004                       __size_of_SPI2_Initialize 0007  
                          ??_SPI2_Exchange8bit 0020              __size_of_setLightIntHighThreshold 0027  
                __size_of_i2c1_driver_resetBus 0001                         __end_of_WDT_Initialize 113A  
                      ?_do_I2C_DO_ADDRESS_NACK 0076                      ?_setLightIntHighThreshold 002A  
            setLightIntHighThreshold@threshold 002A                           __end_of_Display_Name 09AD  
                         __size_of_enablePower 000E      __end_of_EUSART_DefaultFramingErrorHandler 10CD  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0076  
           ?_EUSART_DefaultFramingErrorHandler 0076              _EUSART_DefaultFramingErrorHandler 10CC  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 0266                                         ?_fputc 0023  
                                       ?_fputs 002B                                         _ADRESH 009C  
                                       _ADRESL 009B                                         _CCPR1H 0292  
                                       _CCPR1L 0291                               ___awdiv@dividend 0028  
                           _processGestureData 0094                                         _ANSELA 018C  
                                       ?_putch 0076                                         _ANSELB 018D  
                                       _ANSELC 018E                             __CFG_RSTOSC$HFINT1 0000  
                 setProxIntLowThresh@threshold 002B                          ?i1_i2c1_driver_TXData 0076  
                                       _RC1REG 0199                                         _RC1STA 019D  
                                       _RC2PPS 0EA2                                         _RB5PPS 0E9D  
                                       _RB6PPS 0E9E                               ?_PWM1_Initialize 0076  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _RC6PPS 0EA6                                         _ODCONC 028E  
                                       i1l6131 16FB                                         i1l6125 16EC  
                                       i1l6061 145B                                         i1l6135 170A  
                                       i1l5521 17D6                                         i1l5531 17DC  
                                       i1l5541 15DE                                         i1l5525 17D9  
                                       i1l5551 15E5                                         i1l5455 158C  
                                       i1l5545 15E1                                         i1l5465 1592  
                                       i1l5481 08C8                                         i1l5459 158F  
                                       i1l5491 08CE                                         i1l5557 15E8  
                                       i1l5485 08CB                                         i1l5477 08C5  
                    ??i1_i2c1_driver_getRXData 0076                                         i1l5499 090C  
                                       i1l8531 08E4                                         i1l8533 15A7  
                                       i1l8535 15FD                                         i1l8529 17F1  
                                    ??_Get_ADC 002C                               _wireReadDataByte 1427  
                                       _OSCFRQ 091F                        ?_resetGestureParameters 0076  
                       ??_do_I2C_SEND_ADR_READ 0076                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                                       u613lld 0F32                                         u624lld 0C6A  
                                    ??_i2c_ISR 0079                                         _TXREG1 019A  
                          ?_processGestureData 0076                              _gesture_lr_delta_ 0070  
                               __CFG_PWRTE$OFF 0000                  setProxIntHighThresh@threshold 002B  
                    __end_of_SPI2_Exchange8bit 1243                                         _On_Off 177D  
                            _gesture_lr_count_ 00E8                            wireReadDataByte@reg 0027  
                        _i2c1_driver_getRXData 10F8                            wireReadDataByte@val 0028  
                                 vfprintf@cfmt 00A1                                         _Toggle 11BA  
                            _gesture_ud_delta_ 0072                              __end_of_UART_Byte 0B70  
                  __end_of_do_I2C_DO_NACK_STOP 112E                                  _I2C_Read_Byte 1203  
                   __end_of_isGestureAvailable 1267                              _gesture_ud_count_ 00EA  
                                    ??___aodiv 0030                            __size_of_PIR_Sensor 000C  
                                    ??___aomod 0030                                         ___wmul 138E  
                                    ??___awdiv 002A          __end_of_i2c1_driver_clearBusCollision 10EC  
       __size_of_i2c1_driver_clearBusCollision 0003                  _i2c1_driver_clearBusCollision 10E9  
                   __end_of_setGestureWaitTime 14E5                                 __CFG_STVREN$ON 0000  
              __size_of_do_I2C_DO_NACK_RESTART 0004                            _EUSART_Transmit_ISR 13E6  
                             ___awdiv@quotient 002D                                 ?_do_I2C_DO_ACK 0076  
                              ?_setGestureGain 0076                                  _I2C_Send_NACK 10FE  
                                    ??_getMode 0029                                         pad@buf 0033  
                              ?_setGestureMode 0076                                         _strcat 12C8  
                                       dtoa@fp 0047                                         _strcpy 1326  
                                       _strlen 130E                        ??_setGestureEnterThresh 002A  
                         ??_processGestureData 002F                              __end_of_SPI_Write 12C8  
                                       fputc@c 0023                    __end_of_i2c1_driver_sendACK 1112  
                               _PMD_Initialize 11A2                 __end_of_do_I2C_DO_ADDRESS_NACK 15B0  
                                       fputs@c 002F                                         fputs@i 0030  
                                       fputs@s 0032                                      ?_I2C_Stop 0076  
                           Display_Name@length 0028                                      ??_setMode 002C  
                              ?_WDT_Initialize 0076                    __end_of_i2c1_driver_restart 10F5  
                                 ?_returnReset 0076                       ADC_GetConversion@channel 0023  
                            readGesture@motion 0053                    __end_of_i2c1_driver_startRX 10FE  
                             __end_of_vfprintf 16D7                               ?_PIN_MANAGER_IOC 0076  
                                    ??_sprintf 006F                           ?_EUSART_Transmit_ISR 0076  
               __end_of_resetGestureParameters 12F6                              _SYSTEM_Initialize 1357  
                      __end_of__initialization 0090                               _do_I2C_SEND_STOP 1122  
                           __size_of_do_I2C_RX 0046                             __size_of_do_I2C_TX 004F  
                           ?_SYSTEM_Initialize 0076                         setGestureWaitTime@time 002B  
                     __size_of_do_I2C_TX_EMPTY 0031           __end_of_EUSART_SetTxInterruptHandler 11F0  
        __size_of_EUSART_SetTxInterruptHandler 0009                   _EUSART_SetTxInterruptHandler 11E7  
                               ?_I2C_Read_Byte 0076                                 __pcstackCOMMON 0076  
                                 __pidataBANK1 10CF                                   __pidataBANK2 0002  
                                 __pidataBANK3 11B2                            ??_SYSTEM_Initialize 0023  
                                __end_of_fputc 1744                                  __end_of_fputs 1497  
                        i1i2c1_driver_TXData@d 0076                           _setProxIntHighThresh 128D  
                               _gesture_state_ 01DB                                  __end_of_putch 1154  
                               ?_I2C_Send_NACK 0076                               ?_TMR2_Initialize 0076  
                        i1_i2c1_driver_restart 10D7                         __end_of_PMD_Initialize 11AA  
                        i1_i2c1_driver_startRX 10DD                           __size_of_readGesture 00F3  
                        __end_of_handleGesture 07E5              __size_of_i2c1_driver_isBufferFull 0007  
                                   ??_I2C_Stop 0020                           _eusartRxStatusBuffer 01BD  
                    ?_i2c1_driver_isBufferFull 0076                             _gesture_far_count_ 01DD  
                         __size_of_setLEDBoost 0032                           __size_of_setLEDDrive 0029  
              ??_EUSART_SetOverrunErrorHandler 0022                         _do_I2C_DO_NACK_RESTART 112E  
                       ??i1_i2c1_driver_TXData 0076                                        ??_fputc 0026  
                    __end_of_SYSTEM_Initialize 1372                                        ??_fputs 002C  
                        ??_EUSART_Transmit_ISR 0076                                        ??_putch 0022  
                            ??_SPI2_Initialize 0020                                 _mssp1_clearIRQ 10E6  
                                   __pbssBANK1 00E6                                     __pbssBANK2 0160  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                                   __pbssBANK5 02A0                           wireWriteDataByte@reg 0029  
                         wireWriteDataByte@val 0026                           __end_of_EUSART_Write 082F  
                          getMode@enable_value 002A                       ??i1_i2c1_driver_sendNACK 0076  
                  __size_of_EUSART_Receive_ISR 0036                         ?_i2c1_driver_getRXData 0076  
                   __size_of_SPI2_Exchange8bit 000F                                        ?_On_Off 0076  
                 __size_of_i2c_busCollisionISR 0003                                     __pmaintext 0A52  
                        __end_of_Display_Clear 1254                                        ?_Toggle 0076  
                                ??_do_I2C_IDLE 0076                                  ??_do_I2C_RCEN 0076  
                ?_EUSART_SetTxInterruptHandler 0020               _EUSART_TxDefaultInterruptHandler 01ED  
                      setGestureLEDDrive@drive 002D                                        ?___wmul 0020  
                              __CFG_PPS1WAY$ON 0000                                ??_do_I2C_DO_ACK 0076  
                               UART_Byte@onStr 00B9                   __size_of_enableGestureSensor 005C  
                                   __pintentry 0004                          ?_setProxIntHighThresh 0076  
                                      _CCP1CON 0293                        __size_of_I2C_Write_Byte 001C  
                                ??_I2C_ReStart 0020                               _setProximityGain 155C  
                                  setMode@mode 002F                   ??_EUSART_DefaultErrorHandler 0077  
                              ?_PMD_Initialize 0076                            _setAmbientLightGain 13C8  
                      __size_of_ADC_Initialize 0008                                        ?_strcat 002A  
                        __size_of_Display_Name 0050                 ?_i2c1_driver_clearBusCollision 0076  
                                      ?_strcpy 0025                                        ?_strlen 0020  
                            ?_i2c1_driver_open 0076                              __end_of_do_I2C_RX 1800  
                            __end_of_do_I2C_TX 090E                              ?_i2c1_driver_stop 0076  
                                _eusartRxCount 00EC                              _wireReadDataBlock 0875  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                           ??_i2c1_driver_open 0020                             ??_i2c1_driver_stop 0020  
                                      _OSCCON1 0919                                        _OSCCON3 091B  
                                   _brightness 0164                                  ?_mssp1_setIRQ 0076  
                           __size_of_vfpfcnvrt 00D1                                   ??_PIR_Sensor 0020  
                __size_of_EUSART_RxDataHandler 0018                                        _OSCTUNE 091E  
                         wireReadDataBlock@len 0028                           wireReadDataBlock@reg 002F  
                         wireReadDataBlock@val 0026                                        _SSP1ADD 0212  
                                      _SSP2ADD 021A                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                                      _SSP1BUF 0211                         __end_of_mssp1_clearIRQ 10E9  
                                      _SSP2BUF 0219                             ?_wireReadDataBlock 0026  
                                      _SSP1MSK 0213                       ??_EUSART_SetErrorHandler 0022  
                            SPI_Write@incoming 0022                    __end_of_setGestureIntEnable 15DB  
                      ??_do_I2C_SEND_ADR_WRITE 0076                processGestureData@lr_ratio_last 0037  
                             UART_Byte@proxStr 00BA                    ??_do_I2C_SEND_RESTART_WRITE 0076  
                                 readGesture@i 0059                                        _Get_ADC 0E13  
                           _i2c1_driver_TXData 1154                           ?_setAmbientLightGain 0076  
                           _i2c1_driver_i2cISR 01DF                            ??_wireReadDataBlock 002A  
                                      _i2c_ISR 144B                                      _I2C_Start 1104  
                              ??_I2C_Read_Byte 0021                                  setMode@enable 002B  
          __size_of_EUSART_DefaultErrorHandler 0003                             _i2c1_driver_isNACK 1182  
                       __size_of_decodeGesture 0193                                __size_of_On_Off 003D  
                          ?_i2c1_driver_TXData 0076                    __size_of_PWM_Output_Disable 0003  
                                 _Display_Name 095D                                __size_of_Toggle 0009  
                                      ___aodiv 0F09                                        ___aomod 0C41  
                              ??_I2C_Send_NACK 0020                                        ___awdiv 09AD  
                              __size_of___wmul 001C                             __end_of_PIR_Sensor 121A  
                       ?i1_i2c1_driver_restart 0076                                      ?_vfprintf 006A  
                            ??_do_I2C_TX_EMPTY 0076                            ?_i2c1_driver_isNACK 0076  
                       ?i1_i2c1_driver_startRX 0076                       __end_of_wireReadDataByte 144B  
                                   _initialize 0652                                        _getMode 11F0  
             __size_of_setLightIntLowThreshold 0027                             _setGestureLEDDrive 1670  
                                      __ptext1 0652                                        __ptext2 155C  
                                      __ptext3 12A0                                        __ptext4 128D  
                                      __ptext5 150C                                        __ptext6 14E5  
                                      __ptext7 1533                                        __ptext8 14BE  
                                      __ptext9 1670                    __size_ofi1_i2c1_driver_stop 0003  
                          __end_of_do_I2C_IDLE 1148                      __end_of_wireReadDataBlock 08BF  
                          __end_of_do_I2C_RCEN 114E                                __size_of_strcat 0017  
                              __size_of_strcpy 0018                                __size_of_strlen 0018  
                        _OSCILLATOR_Initialize 119A                                      _T2CONbits 001F  
                                 __size_of_abs 0019                                   __size_of_pad 0053  
                  __end_of_do_I2C_SEND_RESTART 1122                                 ??_mssp1_setIRQ 0076  
                         ??_i2c1_driver_TXData 0020                                        _setMode 090E  
                     ??_PIN_MANAGER_Initialize 0020                            __end_of_I2C_ReStart 10F8  
                          ?_setGestureLEDDrive 0076                             UART_Byte@brightStr 00BC  
                                      _printed 016B                                ?_mssp1_clearIRQ 0076  
                     _do_I2C_SEND_RESTART_READ 1116                     __size_of_SYSTEM_Initialize 001B  
                                      _sprintf 1406                                        clrloop0 115B  
                         __size_of_returnReset 0002                           end_of_initialization 0090  
                         ??_i2c1_driver_isNACK 0076                          ??_setAmbientLightGain 002A  
                 __size_of_setProxIntLowThresh 0013          __end_of_EUSART_SetOverrunErrorHandler 11DE  
       __size_of_EUSART_SetOverrunErrorHandler 0009                  _EUSART_SetOverrunErrorHandler 11D5  
                                      fputc@fp 0025                                        init_ram 1160  
                 __end_of_i2c1_driver_sendNACK 113E                                        fputs@fp 002B  
                                      initloop 1161                __size_ofi1_i2c1_driver_sendNACK 0004  
                                   ?_I2C_Start 0076                  enableGestureSensor@interrupts 0031  
                            _EUSART_Initialize 082F                   __end_of_i2c1_driver_resetBus 10CF  
                setGestureExitThresh@threshold 002B                           ??_setGestureLEDDrive 002A  
                           readGesture@gstatus 0055                             ?_EUSART_Initialize 0076  
                            __end_of_vfpfcnvrt 0C41                                   initialize@id 0031  
                             ??_setGestureGain 002A                         ??_setProxIntHighThresh 002A  
                             ??_setGestureMode 002A                      _do_I2C_SEND_RESTART_WRITE 111A  
                          Display_Name@string1 0025                                     ??_vfprintf 006D  
                __size_of_setGestureExitThresh 0013                                        strcpy@d 0028  
                                      strlen@a 0023                                        strcpy@s 0027  
                                      strlen@s 0020                                      _UART_Byte 0B02  
                          ??_EUSART_Initialize 0022                               ??_WDT_Initialize 0020  
                            _wireWriteDataByte 07E5                 ??_EUSART_SetTxInterruptHandler 0022  
                                   _returnStop 10D0                                      _PORTCbits 000E  
                     __end_of_do_I2C_SEND_STOP 1126                                  ??_enablePower 0030  
                           ?_wireWriteDataByte 0026                setLightIntHighThreshold@val_low 002D  
               __size_of_setGestureEnterThresh 0013                  __end_of_setGestureEnterThresh 127A  
                                _decodeGesture 036E                             _isGestureAvailable 1254  
                           _setGestureWaitTime 14BE                          __size_of_EUSART_Write 002C  
                                    _SPI_Write 12B3                              __size_of_I2C_Stop 0003  
                                  returnStop@p 0076                            ??_wireWriteDataByte 0029  
                             __CFG_FEXTOSC$OFF 0000                __size_of_EUSART_SetErrorHandler 0009  
                            _PWM_Output_Enable 1132                processGestureData@ud_ratio_last 0035  
                          ?_isGestureAvailable 0076                            ?_setGestureWaitTime 0076  
                           ?_PWM_Output_Enable 0076                      __end_of_EUSART_Initialize 0875  
                                  _CCP1CONbits 0293                                      On_Off@val 0027  
                        SPI2_Exchange8bit@data 0020                  __size_of_do_I2C_SEND_ADR_READ 0008  
                        setProximityGain@drive 002D                       __size_of_PWM1_Initialize 000C  
                          ??_PWM_Output_Enable 0020                                 __end_of_On_Off 17BA  
             __end_of_i2c1_driver_isBufferFull 1182                                    _do_I2C_IDLE 1143  
                                  _do_I2C_RCEN 1148                                 __end_of_Toggle 11C3  
                    __end_of_wireWriteDataByte 0800                                 _I2C_Write_Byte 1372  
           __end_of_EUSART_DefaultErrorHandler 10D7                     _EUSART_DefaultErrorHandler 10D4  
                         ??_isGestureAvailable 0029                                    vfpfcnvrt@ap 005B  
                                  vfpfcnvrt@fp 0069                                    vfpfcnvrt@ll 0061  
                               __end_of___wmul 13AA                           ??_setGestureWaitTime 002A  
                                   ?_UART_Byte 0076                                   _EUSART_Write 0803  
                                  ?_initialize 0076                                    _I2C_ReStart 10F5  
                               _ADC_Initialize 1192                         i1_i2c1_driver_sendNACK 1112  
                       ?_OSCILLATOR_Initialize 0076                       _setLightIntHighThreshold 14E5  
                   __size_of_wireReadDataBlock 004A                                _gesture_motion_ 01D9  
                              _SPI2_Initialize 1174                   __size_of_do_I2C_DO_NACK_STOP 0004  
                  __size_of_processGestureData 02DA                                 ?_decodeGesture 0076  
                               __end_of_strcat 12DF                                 __end_of_strcpy 133E  
                               __end_of_strlen 1326                        ?_do_I2C_DO_NACK_RESTART 0076  
                          start_initialization 0049                             setGestureGain@gain 002D  
                          _i2c_busCollisionISR 10EC                __size_of_PIN_MANAGER_Initialize 0039  
                    __end_of_PWM_Output_Enable 1136                       ?i1_i2c1_driver_getRXData 0076  
                                  __end_of_abs 1357                                    __end_of_pad 0A52  
                                   ?_SPI_Write 0076   EUSART_SetRxInterruptHandler@interruptHandler 0020  
 EUSART_SetTxInterruptHandler@interruptHandler 0020               setLightIntHighThreshold@val_high 002E  
                          _enableGestureSensor 0AA6                            __end_of_enablePower 1234  
                                  putch@txData 0022                   __size_of_i2c1_driver_sendACK 0004  
                      ??_i2c1_driver_getRXData 0020                       __end_of_setProximityGain 1585  
                 __size_of_i2c1_driver_restart 0003                       processGestureData@d_last 0042  
                 __size_of_i2c1_driver_startRX 0003                       processGestureData@l_last 0043  
                                  ??_I2C_Start 0020                       processGestureData@r_last 0044  
                     __size_of_PIN_MANAGER_IOC 0001                       processGestureData@u_last 0041  
                      _processGestureData$1840 0039                        _processGestureData$1841 003B  
                      _processGestureData$1842 003D                        _processGestureData$1843 003F  
                                     ??_On_Off 0024                 ?_EUSART_SetOverrunErrorHandler 0020  
                         ?_i2c_busCollisionISR 0076                               __CFG_LPBOREN$OFF 0000  
                         __end_of_mssp1_setIRQ 10E6                                    vfprintf@fmt 006A  
                                     ??_Toggle 0020                         __end_of_I2C_Write_Byte 138E  
                   _EUSART_FramingErrorHandler 0268                               ??_PMD_Initialize 0020  
              setLightIntLowThreshold@val_high 002E                                       ??___wmul 0024  
                       _EUSART_SetErrorHandler 11C3                           ?_enableGestureSensor 0076  
                                  _CCPTMRSbits 029F                                  ??_readGesture 0051  
                       __end_of_ADC_Initialize 119A                                  ?_do_I2C_RESET 0076  
                                  __pdataBANK1 00EF                                    __pdataBANK2 016E  
                                  __pdataBANK3 01E3                             setGestureMode@mode 002B  
                      _setLightIntLowThreshold 150C                      setGestureIntEnable@enable 002C  
                     setAmbientLightGain@drive 002B                                    ?_returnStop 0076  
                                     ??_strcat 002B                                       ??_strcpy 0026  
                                     ??_strlen 0022                 __end_of_do_I2C_DO_NACK_RESTART 1132  
                                ??_setLEDBoost 002A                                  ??_setLEDDrive 002A  
                         _i2c1_driver_sendNACK 113A                    __end_of_EUSART_Transmit_ISR 1406  
                       setGestureIntEnable@val 002B                                    __pbssCOMMON 0070  
                                    ___latbits 0002                                      _adcResult 016A  
                         _i2c1_driver_resetBus 10CE                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                             ___aodiv@dividend 0028                       __size_of_TMR2_Initialize 0008  
                                    _do_I2C_RX 17BA                                      _do_I2C_TX 08BF  
               __size_of_do_I2C_SEND_ADR_WRITE 0007                  __size_ofi1_i2c1_driver_TXData 0005  
                   __end_of_EUSART_Receive_ISR 170D                  __end_of_do_I2C_SEND_ADR_WRITE 1174  
                                     ?_Get_ADC 0076                          readGesture@fifo_data2 00A0  
                   __size_of_EUSART_Initialize 0046                      __size_of_i2c1_driver_open 000A  
                        readGesture@fifo_level 0058                      __size_of_i2c1_driver_stop 0003  
             _EUSART_RxDefaultInterruptHandler 01EB                                       ?_i2c_ISR 0076  
                          __size_of_initialize 010F                                _do_I2C_TX_EMPTY 15DB  
                                    __pnvBANK3 01EB                                      __pnvBANK4 0264  
                       __size_of_handleGesture 0084                          ??_i2c_busCollisionISR 0076  
                        __end_of_fsmStateTable 1820                   __end_of_EUSART_RxDataHandler 130E  
                       _PIN_MANAGER_Initialize 1744                                      _dtoa$2117 0048  
                      ??i1_i2c1_driver_restart 0076                        ??i1_i2c1_driver_startRX 0076  
                              ?_I2C_Write_Byte 0076                                  UART_Byte@bits 00B2  
                        ??_enableGestureSensor 0030                        __end_of_SPI2_Initialize 117B  
                                     ?___aodiv 0020                                       ?___aomod 0020  
                               ??_do_I2C_RESET 0076                                       ?___awdiv 0026  
                                    __ptext100 1148                                      __ptext101 116D  
                                    __ptext110 10E3                                      __ptext102 118A  
                             ___aodiv@quotient 0033                                      __ptext111 1182  
                                    __ptext103 1122                                      __ptext120 10D7  
                                    __ptext112 113E                                      __ptext104 111E  
                                    __ptext121 110E                                      __ptext113 10E0  
                                    __ptext105 111A                                      __ptext122 10CD  
                                    __ptext114 1112                                      __ptext106 1116  
                                    __ptext123 13E6                                      __ptext115 10CE  
                                    __ptext107 1143                                      __ptext124 16D7  
                                    __ptext116 10DD                                      __ptext108 1166  
                                    __ptext125 110A                                      __ptext117 10D2  
                                    __ptext109 15DB                                      __ptext126 10CC  
                                    __ptext118 10D0                                      __ptext127 10D4  
                                    __ptext119 10DA                                      __ptext128 12F6  
                   __size_of_wireWriteDataByte 001B                       ??_do_I2C_DO_ADDRESS_NACK 0076  
                              ?_ADC_Initialize 0076                    _i2c1_driver_busCollisionISR 01E1  
                                 _eusartRxHead 0075                                   _eusartTxHead 00EE  
                                 _eusartRxTail 0074                                   _eusartTxTail 00ED  
                                  ??_UART_Byte 00B0                            _setProxIntLowThresh 12A0  
                        __end_of_do_I2C_DO_ACK 112A                              ??_PWM1_Initialize 0020  
                 ??_INTERRUPT_InterruptManager 007C                       _i2c1_driver_isBufferFull 117B  
                                     ?_getMode 0076                                ??_decodeGesture 0020  
                            ?_wireReadDataByte 0076                     ??_do_I2C_SEND_RESTART_READ 0076  
                            __size_of_vfprintf 0035                          ?_i2c1_driver_sendNACK 0076  
              __end_ofi1_i2c1_driver_getRXData 10E3                        _eusartTxBufferRemaining 01EF  
                             ??_mssp1_clearIRQ 0076                                       _BAUD1CON 019F  
                                  _enablePower 1226                             ??_wireReadDataByte 0026  
                          __end_of_readGesture 0E13                          ?_i2c1_driver_resetBus 0076  
           __size_of_do_I2C_SEND_RESTART_WRITE 0004                                       _I2C_Stop 0800  
                     ??_resetGestureParameters 0020                                       ?_setMode 002B  
                   __size_of_PWM_Output_Enable 0004                                     ?_do_I2C_RX 0076  
                                   ?_do_I2C_TX 0076                               __CFG_WDTE$SWDTEN 0000  
                                  ??_SPI_Write 0021                              _i2c1_driver_start 1101  
                       __size_of_Display_Clear 0011                                       ?_sprintf 00A3  
                          __end_of_setLEDBoost 163E                            __end_of_setLEDDrive 155C  
                               __size_of_fputc 0037                                 __size_of_fputs 0026  
                               __size_of_putch 0006                           ?_setProxIntLowThresh 0076  
                        readGesture@bytes_read 0056                             ?_i2c1_driver_start 0076  
                               _eusartRxBuffer 01C5                                 _eusartTxBuffer 01CD  
                               ___wmul@product 0024         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                            __size_of_returnStop 0002  
                                    clear_ram0 115A                                       _PIE0bits 0090  
                                     _PIE1bits 0091                   __size_of_setGestureIntEnable 002B  
                   __end_of_PWM_Output_Disable 10F2                              _eusartRxLastError 016D  
                          _gesture_near_count_ 0166                            ??_i2c1_driver_start 0020  
          __size_of_INTERRUPT_InterruptManager 0043                                       _PIR0bits 0010  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0022  
                        __end_of_I2C_Read_Byte 120E                      ??_setLightIntLowThreshold 002C  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
                                     _SSP2CON1 021D      __end_of_EUSART_DefaultOverrunErrorHandler 110E  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0076  
           ?_EUSART_DefaultOverrunErrorHandler 0076              _EUSART_DefaultOverrunErrorHandler 110A  
                               setLEDBoost@val 002C                                       _SSP1STAT 0214  
                                     _SSP2STAT 021C                     __end_ofi1_i2c1_driver_stop 10DD  
                            ??_PIN_MANAGER_IOC 0076                          __end_of_I2C_Send_NACK 1101  
                               setLEDDrive@val 002C                                      _vfpfcnvrt 0B70  
             processGestureData@lr_ratio_first 0033                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0020                              ?_do_I2C_SEND_STOP 0076  
                    processGestureData@d_first 0046                                  _handleGesture 0761  
                    __end_of_i2c1_driver_start 1104                                  ??_returnReset 0077  
                           ??_do_I2C_SEND_STOP 0076                    __size_of_i2c1_driver_TXData 0006  
                  __end_of_setAmbientLightGain 13E6                      processGestureData@l_first 0047  
            __end_of_do_I2C_SEND_RESTART_WRITE 111E                        __end_of_do_I2C_TX_EMPTY 160C  
                 __end_of_setGestureExitThresh 128D                      processGestureData@r_first 0048  
                    processGestureData@u_first 0045                          ??_setProxIntLowThresh 002A  
                 __size_of_do_I2C_SEND_RESTART 0004                    __size_of_i2c1_driver_isNACK 0008  
                            setGestureGain@val 002C                          __size_of_mssp1_setIRQ 0003  
                            ??_TMR2_Initialize 0020                               __size_of_Get_ADC 00F6  
                          _do_I2C_DO_NACK_STOP 112A                               __size_of_i2c_ISR 0026  
                   ??_setLightIntHighThreshold 002C                                     vfprintf@ap 006C  
                                   vfprintf@fp 00A0                              _ADC_GetConversion 13AA  
                  __size_of_setGestureLEDDrive 0032                                 setMode@reg_val 002E  
               setLightIntLowThreshold@val_low 002D                                   ?_do_I2C_IDLE 0076  
                                _Display_Clear 1243                                   ?_do_I2C_RCEN 0076  
                            setGestureMode@val 002C                               ?_SPI2_Initialize 0076  
                      ?i1_i2c1_driver_sendNACK 0076                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 0264                             ?_ADC_GetConversion 0020  
                             __size_of___aodiv 00F7                               __size_of___aomod 00DF  
                          _i2c1_driver_sendACK 110E                               __size_of___awdiv 0052  
                __size_of_setProxIntHighThresh 0013                                    _readGesture 0D20  
              __size_of_do_I2C_DO_ADDRESS_NACK 002B                    ?_EUSART_DefaultErrorHandler 0076  
                          i2c1_driver_TXData@d 0020                                     ?_vfpfcnvrt 005A  
                       ??_i2c1_driver_sendNACK 0020                                   ??_initialize 0030  
                                 ?_I2C_ReStart 0076                            _i2c1_driver_restart 10F2  
                              ___aodiv@divisor 0020                                ___aodiv@counter 0031  
             setLightIntLowThreshold@threshold 002A                           ?_do_I2C_DO_NACK_STOP 0076  
                          _i2c1_driver_startRX 10FB                                 ?_handleGesture 0076  
                 __end_of_do_I2C_SEND_ADR_READ 1192                               __size_of_getMode 0009  
                       ??_i2c1_driver_resetBus 0076                           readGesture@fifo_data 0120  
                                  _setLEDBoost 160C                            ??_ADC_GetConversion 0022  
                                  _setLEDDrive 1533                                     sprintf@fmt 00A3  
                                   strcat@dest 002E                __size_of_resetGestureParameters 0017  
                         _EUSART_RxDataHandler 12F6                                   _mssp1_setIRQ 10E3  
              __end_of_setLightIntLowThreshold 1533                                    ??_do_I2C_RX 0076  
                                  ??_do_I2C_TX 0076                          setGestureLEDDrive@val 002C  
                             __size_of_setMode 004F                                       __ptext10 163E  
                                     __ptext11 127A                                       __ptext20 09AD  
                                     __ptext12 1267                                       __ptext21 1254  
                                     __ptext13 13C8                                       __ptext30 07E5  
                                     __ptext22 036E                                       __ptext14 11F9  
                                     __ptext31 11F0                                       __ptext23 0AA6  
                                     __ptext15 0761                                       __ptext40 113A  
                                     __ptext32 1427                                       __ptext24 160C  
                                     __ptext16 0D20                                       __ptext41 1203  
                                     __ptext33 1372                                       __ptext25 1497  
                                     __ptext17 0875                                       __ptext50 1406  
                                     __ptext42 10FB                                       __ptext34 1154  
                                     __ptext26 15B0                                       __ptext18 0094  
                                     __ptext51 16A2                                       __ptext43 117B  
                                     __ptext35 0800                                       __ptext27 12DF  
                                     __ptext19 138E                                       __ptext60 0C41  
                                     __ptext52 0B70                                       __ptext44 10F8  
                                     __ptext36 1107                                       __ptext28 1226  
                                     __ptext61 0F09                                       __ptext53 0501  
                                     __ptext45 10F5                                       __ptext37 1104  
                                     __ptext29 090E                                       __ptext70 082F  
                                     __ptext62 1357                                       __ptext54 09FF  
                                     __ptext46 10F2                                       __ptext38 1101  
                                     __ptext71 11E7                                       __ptext63 1136  
                                     __ptext55 1471                                       __ptext47 0B02  
                                     __ptext39 10FE                                       __ptext80 11BA  
                                     __ptext72 11DE                                       __ptext64 11AA  
                                     __ptext56 170D                                       __ptext48 12C8  
                                     __ptext81 095D                                       __ptext73 11D5  
                                     __ptext65 1174                                       __ptext57 114E  
                                     __ptext49 1326                                       __ptext90 10EC  
                                     __ptext82 130E                                       __ptext74 11CC  
                                     __ptext66 121A                                       __ptext58 0803  
                                     __ptext91 10E9                                       __ptext83 1132  
                                     __ptext75 11C3                                       __ptext67 11A2  
                                     __ptext59 133E                                       __ptext92 144B  
                                     __ptext84 10EF                                       __ptext76 1192  
                                     __ptext68 1744                                       __ptext93 10E6  
                                     __ptext85 13AA                                       __ptext77 120E  
                                     __ptext69 119A                                       __ptext94 17BA  
                                     __ptext86 1243                                       __ptext78 177D  
                                     __ptext95 08BF                                       __ptext87 12B3  
                                     __ptext79 0E13                                       __ptext96 1585  
                                     __ptext88 1234                                       __ptext97 112E  
                                     __ptext98 112A                                       __ptext99 1126  
                        _setGestureEnterThresh 1267                                   _SSP1CON1bits 0215  
                                 _SSP1CON2bits 0216                 setGestureEnterThresh@threshold 002B  
                                 _SSP2CON1bits 021D                           ?_i2c1_driver_sendACK 0076  
                         __end_of_do_I2C_RESET 116D                               __size_of_sprintf 0021  
                                   strcpy@dest 0029                           ?_i2c1_driver_restart 0076  
                          __end_of_returnReset 10D4                               _i2c1_driver_open 11F9  
                             _i2c1_driver_stop 1107                                  __size_of_main 0054  
                         ?_i2c1_driver_startRX 0076                                  __size_of_dtoa 0151  
                            ?_setProximityGain 0076                 __size_of_i2c1_driver_getRXData 0003  
                __end_of_i2c1_driver_getRXData 10FB                             __end_of_initialize 0761  
                    __end_of_ADC_GetConversion 13C8                        ?_EUSART_SetErrorHandler 0020  
                           ??_setProximityGain 002A               __size_ofi1_i2c1_driver_getRXData 0003  
                           _decodeGesture$1850 002C                             _decodeGesture$1851 002E  
                           _decodeGesture$1852 0030                             _decodeGesture$1845 0022  
                           _decodeGesture$1846 0024                             _decodeGesture$1847 0026  
                           _decodeGesture$1848 0028                             _decodeGesture$1849 002A  
                                   _RC1STAbits 019D                                 ?_Display_Clear 0076  
               __end_ofi1_i2c1_driver_sendNACK 1116  EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                     int$flags 007E                                       _vfprintf 16A2  
           __end_of_INTERRUPT_InterruptManager 0047                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 11D5         __size_of_EUSART_SetFramingErrorHandler 0009  
                _EUSART_SetFramingErrorHandler 11CC                                   _SSP1STATbits 0214  
                  __size_of_isGestureAvailable 0013                                  Display_Name@i 002A  
                          setProximityGain@val 002C               __end_of_do_I2C_SEND_RESTART_READ 111A  
                  __size_of_setGestureWaitTime 0027                     __end_of_processGestureData 036E  
                                 ??_returnStop 0077                                   _SSP2STATbits 021C  
                        ??_do_I2C_DO_NACK_STOP 0076                               ___aomod@dividend 0028  
                                   Get_ADC@val 002F                        __size_of_setGestureGain 0032  
                                   _INTCONbits 000B                        __size_of_setGestureMode 0027  
                   __size_of_i2c1_driver_start 0003                          ?_EUSART_RxDataHandler 0076  
                       setAmbientLightGain@val 002C                          ??_i2c1_driver_sendACK 0076  
                             ?_do_I2C_TX_EMPTY 0076                        __size_of_WDT_Initialize 0004  
                       _do_I2C_DO_ADDRESS_NACK 1585                                       intlevel1 0000  
                                    sprintf@ap 00A9                          ??_i2c1_driver_restart 0020  
                                    strcat@src 002A                          ??_i2c1_driver_startRX 0020  
                      ?_PIN_MANAGER_Initialize 0076                               ??_I2C_Write_Byte 0021  
               __end_of_EUSART_SetErrorHandler 11CC                              __CFG_CLKOUTEN$OFF 0000  
                                    strcpy@src 0025                             __end_of_returnStop 10D2  
                              _PWM1_Initialize 121A                               ??_ADC_Initialize 0020  
         __end_of_EUSART_SetRxInterruptHandler 11E7          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 11DE                         _resetGestureParameters 12DF  
                   ??_i2c1_driver_isBufferFull 0020                                  ?_Display_Name 0025  
               __size_ofi1_i2c1_driver_restart 0003                  __end_ofi1_i2c1_driver_restart 10DA  
                           _EUSART_Receive_ISR 16D7  EUSART_SetFramingErrorHandler@interruptHandler 0020  
               __size_ofi1_i2c1_driver_startRX 0003                   __end_ofi1_i2c1_driver_TXData 1143  
                __end_ofi1_i2c1_driver_startRX 10E0                           _setGestureExitThresh 127A  
                              ___aomod@divisor 0020                                    ??_vfpfcnvrt 005C  
                              ___aomod@counter 0031                                ??_handleGesture 005B  
                                __pstringtext1 1800                                  __pstringtext2 1820  
                                __pstringtext3 1830                                  __pstringtext4 183D  
                                __pstringtext5 1849                                  __pstringtext6 1854  
                                __pstringtext7 0000                                       sprintf@f 00AB  
                                     sprintf@s 00AA                            ?_EUSART_Receive_ISR 0076  
                              main@startSystem 00E5                                     _SSP1DATPPS 0E21  
                                 ?_enablePower 0076                                     _SSP2DATPPS 0E1E  
                                   _SSP1CLKPPS 0E20                            _setGestureIntEnable 15B0  
                                   _SSP2CLKPPS 0E1D                               setLEDBoost@boost 002D  
                       ?_setGestureEnterThresh 0076                                    _returnReset 10D2  
                                   _PIR_Sensor 120E                                     _TX1STAbits 019E  
                           EUSART_Write@txData 0021                   __size_of_EUSART_Transmit_ISR 0020  
                                 ___aodiv@sign 0032                 __end_of_PIN_MANAGER_Initialize 177D  
                  __end_of_i2c_busCollisionISR 10EF                      __size_of_wireReadDataByte 0024  
                             setLEDDrive@drive 002D                            processGestureData@i 004D  
                              _PIN_MANAGER_IOC 10CD                           ??_EUSART_Receive_ISR 0077  
                  __end_of_enableGestureSensor 0B02                          _do_I2C_SEND_ADR_WRITE 116D  
                         ?_setGestureIntEnable 0076                     __size_of_ADC_GetConversion 001E  
                         _do_I2C_SEND_ADR_READ 118A                                ??_Display_Clear 0023  
                                 ___aomod@sign 0032               __end_of_setLightIntHighThreshold 150C  
                               ??_Display_Name 0027                            UART_Byte@profileStr 00BB  
