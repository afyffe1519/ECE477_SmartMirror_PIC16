

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 13:17:39 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	intentry,global,class=CODE,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	dabs	1,0x7E,2
   129  0000                     
   130                           ; Version 2.05
   131                           ; Generated 20/12/2018 GMT
   132                           ; 
   133                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution.
   147                           ; 
   148                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   149                           ;        software without specific prior written permission.
   150                           ; 
   151                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   152                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   153                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   154                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   155                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   156                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   157                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   158                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   159                           ; 
   160                           ; 
   161                           ; Code-generator required, PIC16F18345 Definitions
   162                           ; 
   163                           ; SFR Addresses
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001D                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0094                     	;# 
   206  0097                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  0111                     	;# 
   217  0112                     	;# 
   218  0113                     	;# 
   219  0114                     	;# 
   220  0115                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  0118                     	;# 
   224  0119                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  018E                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  0199                     	;# 
   231  0199                     	;# 
   232  019A                     	;# 
   233  019A                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019D                     	;# 
   244  019D                     	;# 
   245  019D                     	;# 
   246  019E                     	;# 
   247  019E                     	;# 
   248  019E                     	;# 
   249  019F                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  020C                     	;# 
   255  020D                     	;# 
   256  020E                     	;# 
   257  0211                     	;# 
   258  0211                     	;# 
   259  0212                     	;# 
   260  0212                     	;# 
   261  0213                     	;# 
   262  0213                     	;# 
   263  0214                     	;# 
   264  0214                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  0219                     	;# 
   274  021A                     	;# 
   275  021B                     	;# 
   276  021C                     	;# 
   277  021D                     	;# 
   278  021D                     	;# 
   279  021E                     	;# 
   280  021F                     	;# 
   281  028C                     	;# 
   282  028D                     	;# 
   283  028E                     	;# 
   284  0291                     	;# 
   285  0291                     	;# 
   286  0292                     	;# 
   287  0293                     	;# 
   288  0294                     	;# 
   289  0295                     	;# 
   290  0295                     	;# 
   291  0296                     	;# 
   292  0297                     	;# 
   293  0298                     	;# 
   294  029F                     	;# 
   295  030C                     	;# 
   296  030D                     	;# 
   297  030E                     	;# 
   298  0311                     	;# 
   299  0311                     	;# 
   300  0312                     	;# 
   301  0313                     	;# 
   302  0314                     	;# 
   303  0315                     	;# 
   304  0315                     	;# 
   305  0316                     	;# 
   306  0317                     	;# 
   307  0318                     	;# 
   308  038C                     	;# 
   309  038D                     	;# 
   310  038E                     	;# 
   311  0391                     	;# 
   312  0392                     	;# 
   313  0393                     	;# 
   314  0394                     	;# 
   315  0395                     	;# 
   316  0396                     	;# 
   317  0397                     	;# 
   318  0398                     	;# 
   319  0399                     	;# 
   320  039A                     	;# 
   321  039C                     	;# 
   322  039D                     	;# 
   323  039E                     	;# 
   324  039F                     	;# 
   325  0411                     	;# 
   326  0411                     	;# 
   327  0412                     	;# 
   328  0413                     	;# 
   329  0414                     	;# 
   330  0415                     	;# 
   331  0416                     	;# 
   332  0417                     	;# 
   333  0418                     	;# 
   334  0418                     	;# 
   335  0419                     	;# 
   336  041A                     	;# 
   337  041B                     	;# 
   338  041C                     	;# 
   339  041D                     	;# 
   340  041E                     	;# 
   341  041F                     	;# 
   342  0498                     	;# 
   343  0498                     	;# 
   344  0499                     	;# 
   345  049A                     	;# 
   346  049B                     	;# 
   347  049B                     	;# 
   348  049C                     	;# 
   349  049D                     	;# 
   350  049E                     	;# 
   351  049F                     	;# 
   352  0617                     	;# 
   353  0618                     	;# 
   354  0619                     	;# 
   355  0619                     	;# 
   356  061A                     	;# 
   357  061B                     	;# 
   358  061C                     	;# 
   359  061C                     	;# 
   360  061F                     	;# 
   361  0691                     	;# 
   362  0692                     	;# 
   363  0693                     	;# 
   364  0694                     	;# 
   365  0695                     	;# 
   366  0696                     	;# 
   367  0697                     	;# 
   368  0698                     	;# 
   369  0699                     	;# 
   370  0711                     	;# 
   371  0712                     	;# 
   372  0713                     	;# 
   373  0714                     	;# 
   374  0715                     	;# 
   375  0716                     	;# 
   376  0717                     	;# 
   377  0718                     	;# 
   378  0719                     	;# 
   379  0891                     	;# 
   380  0891                     	;# 
   381  0891                     	;# 
   382  0891                     	;# 
   383  0891                     	;# 
   384  0891                     	;# 
   385  0892                     	;# 
   386  0892                     	;# 
   387  0892                     	;# 
   388  0893                     	;# 
   389  0893                     	;# 
   390  0893                     	;# 
   391  0893                     	;# 
   392  0893                     	;# 
   393  0893                     	;# 
   394  0894                     	;# 
   395  0894                     	;# 
   396  0894                     	;# 
   397  0895                     	;# 
   398  0895                     	;# 
   399  0895                     	;# 
   400  0896                     	;# 
   401  0896                     	;# 
   402  0896                     	;# 
   403  089B                     	;# 
   404  0911                     	;# 
   405  0912                     	;# 
   406  0913                     	;# 
   407  0914                     	;# 
   408  0915                     	;# 
   409  0916                     	;# 
   410  0918                     	;# 
   411  0919                     	;# 
   412  091A                     	;# 
   413  091B                     	;# 
   414  091C                     	;# 
   415  091D                     	;# 
   416  091E                     	;# 
   417  091F                     	;# 
   418  0E0F                     	;# 
   419  0E10                     	;# 
   420  0E11                     	;# 
   421  0E12                     	;# 
   422  0E13                     	;# 
   423  0E14                     	;# 
   424  0E15                     	;# 
   425  0E16                     	;# 
   426  0E17                     	;# 
   427  0E18                     	;# 
   428  0E19                     	;# 
   429  0E1A                     	;# 
   430  0E1B                     	;# 
   431  0E1C                     	;# 
   432  0E1D                     	;# 
   433  0E1E                     	;# 
   434  0E1F                     	;# 
   435  0E20                     	;# 
   436  0E21                     	;# 
   437  0E22                     	;# 
   438  0E24                     	;# 
   439  0E25                     	;# 
   440  0E28                     	;# 
   441  0E29                     	;# 
   442  0E2A                     	;# 
   443  0E2B                     	;# 
   444  0E2C                     	;# 
   445  0E2D                     	;# 
   446  0E2E                     	;# 
   447  0E2F                     	;# 
   448  0E90                     	;# 
   449  0E91                     	;# 
   450  0E92                     	;# 
   451  0E94                     	;# 
   452  0E95                     	;# 
   453  0E9C                     	;# 
   454  0E9D                     	;# 
   455  0E9E                     	;# 
   456  0E9F                     	;# 
   457  0EA0                     	;# 
   458  0EA1                     	;# 
   459  0EA2                     	;# 
   460  0EA3                     	;# 
   461  0EA4                     	;# 
   462  0EA5                     	;# 
   463  0EA6                     	;# 
   464  0EA7                     	;# 
   465  0F0F                     	;# 
   466  0F10                     	;# 
   467  0F11                     	;# 
   468  0F12                     	;# 
   469  0F13                     	;# 
   470  0F14                     	;# 
   471  0F15                     	;# 
   472  0F16                     	;# 
   473  0F17                     	;# 
   474  0F18                     	;# 
   475  0F19                     	;# 
   476  0F1A                     	;# 
   477  0F1B                     	;# 
   478  0F1C                     	;# 
   479  0F1D                     	;# 
   480  0F1E                     	;# 
   481  0F1F                     	;# 
   482  0F20                     	;# 
   483  0F21                     	;# 
   484  0F22                     	;# 
   485  0F23                     	;# 
   486  0F24                     	;# 
   487  0F25                     	;# 
   488  0F26                     	;# 
   489  0F27                     	;# 
   490  0F28                     	;# 
   491  0F29                     	;# 
   492  0F2A                     	;# 
   493  0F2B                     	;# 
   494  0F2C                     	;# 
   495  0F2D                     	;# 
   496  0F2E                     	;# 
   497  0F2F                     	;# 
   498  0F30                     	;# 
   499  0F31                     	;# 
   500  0F32                     	;# 
   501  0F33                     	;# 
   502  0F34                     	;# 
   503  0F35                     	;# 
   504  0F36                     	;# 
   505  0F37                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000D                     	;# 
   531  000E                     	;# 
   532  0010                     	;# 
   533  0011                     	;# 
   534  0012                     	;# 
   535  0013                     	;# 
   536  0014                     	;# 
   537  0015                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  0019                     	;# 
   545  001A                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  001D                     	;# 
   549  001E                     	;# 
   550  001F                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0090                     	;# 
   555  0091                     	;# 
   556  0092                     	;# 
   557  0093                     	;# 
   558  0094                     	;# 
   559  0097                     	;# 
   560  009B                     	;# 
   561  009B                     	;# 
   562  009C                     	;# 
   563  009D                     	;# 
   564  009E                     	;# 
   565  009F                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010E                     	;# 
   569  0111                     	;# 
   570  0112                     	;# 
   571  0113                     	;# 
   572  0114                     	;# 
   573  0115                     	;# 
   574  0116                     	;# 
   575  0117                     	;# 
   576  0118                     	;# 
   577  0119                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  018E                     	;# 
   581  0197                     	;# 
   582  0199                     	;# 
   583  0199                     	;# 
   584  0199                     	;# 
   585  019A                     	;# 
   586  019A                     	;# 
   587  019A                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019C                     	;# 
   594  019C                     	;# 
   595  019C                     	;# 
   596  019D                     	;# 
   597  019D                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019E                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  019F                     	;# 
   604  019F                     	;# 
   605  019F                     	;# 
   606  019F                     	;# 
   607  020C                     	;# 
   608  020D                     	;# 
   609  020E                     	;# 
   610  0211                     	;# 
   611  0211                     	;# 
   612  0212                     	;# 
   613  0212                     	;# 
   614  0213                     	;# 
   615  0213                     	;# 
   616  0214                     	;# 
   617  0214                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0216                     	;# 
   623  0216                     	;# 
   624  0217                     	;# 
   625  0217                     	;# 
   626  0219                     	;# 
   627  021A                     	;# 
   628  021B                     	;# 
   629  021C                     	;# 
   630  021D                     	;# 
   631  021D                     	;# 
   632  021E                     	;# 
   633  021F                     	;# 
   634  028C                     	;# 
   635  028D                     	;# 
   636  028E                     	;# 
   637  0291                     	;# 
   638  0291                     	;# 
   639  0292                     	;# 
   640  0293                     	;# 
   641  0294                     	;# 
   642  0295                     	;# 
   643  0295                     	;# 
   644  0296                     	;# 
   645  0297                     	;# 
   646  0298                     	;# 
   647  029F                     	;# 
   648  030C                     	;# 
   649  030D                     	;# 
   650  030E                     	;# 
   651  0311                     	;# 
   652  0311                     	;# 
   653  0312                     	;# 
   654  0313                     	;# 
   655  0314                     	;# 
   656  0315                     	;# 
   657  0315                     	;# 
   658  0316                     	;# 
   659  0317                     	;# 
   660  0318                     	;# 
   661  038C                     	;# 
   662  038D                     	;# 
   663  038E                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0397                     	;# 
   671  0398                     	;# 
   672  0399                     	;# 
   673  039A                     	;# 
   674  039C                     	;# 
   675  039D                     	;# 
   676  039E                     	;# 
   677  039F                     	;# 
   678  0411                     	;# 
   679  0411                     	;# 
   680  0412                     	;# 
   681  0413                     	;# 
   682  0414                     	;# 
   683  0415                     	;# 
   684  0416                     	;# 
   685  0417                     	;# 
   686  0418                     	;# 
   687  0418                     	;# 
   688  0419                     	;# 
   689  041A                     	;# 
   690  041B                     	;# 
   691  041C                     	;# 
   692  041D                     	;# 
   693  041E                     	;# 
   694  041F                     	;# 
   695  0498                     	;# 
   696  0498                     	;# 
   697  0499                     	;# 
   698  049A                     	;# 
   699  049B                     	;# 
   700  049B                     	;# 
   701  049C                     	;# 
   702  049D                     	;# 
   703  049E                     	;# 
   704  049F                     	;# 
   705  0617                     	;# 
   706  0618                     	;# 
   707  0619                     	;# 
   708  0619                     	;# 
   709  061A                     	;# 
   710  061B                     	;# 
   711  061C                     	;# 
   712  061C                     	;# 
   713  061F                     	;# 
   714  0691                     	;# 
   715  0692                     	;# 
   716  0693                     	;# 
   717  0694                     	;# 
   718  0695                     	;# 
   719  0696                     	;# 
   720  0697                     	;# 
   721  0698                     	;# 
   722  0699                     	;# 
   723  0711                     	;# 
   724  0712                     	;# 
   725  0713                     	;# 
   726  0714                     	;# 
   727  0715                     	;# 
   728  0716                     	;# 
   729  0717                     	;# 
   730  0718                     	;# 
   731  0719                     	;# 
   732  0891                     	;# 
   733  0891                     	;# 
   734  0891                     	;# 
   735  0891                     	;# 
   736  0891                     	;# 
   737  0891                     	;# 
   738  0892                     	;# 
   739  0892                     	;# 
   740  0892                     	;# 
   741  0893                     	;# 
   742  0893                     	;# 
   743  0893                     	;# 
   744  0893                     	;# 
   745  0893                     	;# 
   746  0893                     	;# 
   747  0894                     	;# 
   748  0894                     	;# 
   749  0894                     	;# 
   750  0895                     	;# 
   751  0895                     	;# 
   752  0895                     	;# 
   753  0896                     	;# 
   754  0896                     	;# 
   755  0896                     	;# 
   756  089B                     	;# 
   757  0911                     	;# 
   758  0912                     	;# 
   759  0913                     	;# 
   760  0914                     	;# 
   761  0915                     	;# 
   762  0916                     	;# 
   763  0918                     	;# 
   764  0919                     	;# 
   765  091A                     	;# 
   766  091B                     	;# 
   767  091C                     	;# 
   768  091D                     	;# 
   769  091E                     	;# 
   770  091F                     	;# 
   771  0E0F                     	;# 
   772  0E10                     	;# 
   773  0E11                     	;# 
   774  0E12                     	;# 
   775  0E13                     	;# 
   776  0E14                     	;# 
   777  0E15                     	;# 
   778  0E16                     	;# 
   779  0E17                     	;# 
   780  0E18                     	;# 
   781  0E19                     	;# 
   782  0E1A                     	;# 
   783  0E1B                     	;# 
   784  0E1C                     	;# 
   785  0E1D                     	;# 
   786  0E1E                     	;# 
   787  0E1F                     	;# 
   788  0E20                     	;# 
   789  0E21                     	;# 
   790  0E22                     	;# 
   791  0E24                     	;# 
   792  0E25                     	;# 
   793  0E28                     	;# 
   794  0E29                     	;# 
   795  0E2A                     	;# 
   796  0E2B                     	;# 
   797  0E2C                     	;# 
   798  0E2D                     	;# 
   799  0E2E                     	;# 
   800  0E2F                     	;# 
   801  0E90                     	;# 
   802  0E91                     	;# 
   803  0E92                     	;# 
   804  0E94                     	;# 
   805  0E95                     	;# 
   806  0E9C                     	;# 
   807  0E9D                     	;# 
   808  0E9E                     	;# 
   809  0E9F                     	;# 
   810  0EA0                     	;# 
   811  0EA1                     	;# 
   812  0EA2                     	;# 
   813  0EA3                     	;# 
   814  0EA4                     	;# 
   815  0EA5                     	;# 
   816  0EA6                     	;# 
   817  0EA7                     	;# 
   818  0F0F                     	;# 
   819  0F10                     	;# 
   820  0F11                     	;# 
   821  0F12                     	;# 
   822  0F13                     	;# 
   823  0F14                     	;# 
   824  0F15                     	;# 
   825  0F16                     	;# 
   826  0F17                     	;# 
   827  0F18                     	;# 
   828  0F19                     	;# 
   829  0F1A                     	;# 
   830  0F1B                     	;# 
   831  0F1C                     	;# 
   832  0F1D                     	;# 
   833  0F1E                     	;# 
   834  0F1F                     	;# 
   835  0F20                     	;# 
   836  0F21                     	;# 
   837  0F22                     	;# 
   838  0F23                     	;# 
   839  0F24                     	;# 
   840  0F25                     	;# 
   841  0F26                     	;# 
   842  0F27                     	;# 
   843  0F28                     	;# 
   844  0F29                     	;# 
   845  0F2A                     	;# 
   846  0F2B                     	;# 
   847  0F2C                     	;# 
   848  0F2D                     	;# 
   849  0F2E                     	;# 
   850  0F2F                     	;# 
   851  0F30                     	;# 
   852  0F31                     	;# 
   853  0F32                     	;# 
   854  0F33                     	;# 
   855  0F34                     	;# 
   856  0F35                     	;# 
   857  0F36                     	;# 
   858  0F37                     	;# 
   859  0FE4                     	;# 
   860  0FE5                     	;# 
   861  0FE6                     	;# 
   862  0FE7                     	;# 
   863  0FE8                     	;# 
   864  0FE9                     	;# 
   865  0FEA                     	;# 
   866  0FEB                     	;# 
   867  0FED                     	;# 
   868  0FEE                     	;# 
   869  0FEF                     	;# 
   870  0000                     	;# 
   871  0001                     	;# 
   872  0002                     	;# 
   873  0003                     	;# 
   874  0004                     	;# 
   875  0005                     	;# 
   876  0006                     	;# 
   877  0007                     	;# 
   878  0008                     	;# 
   879  0009                     	;# 
   880  000A                     	;# 
   881  000B                     	;# 
   882  000C                     	;# 
   883  000D                     	;# 
   884  000E                     	;# 
   885  0010                     	;# 
   886  0011                     	;# 
   887  0012                     	;# 
   888  0013                     	;# 
   889  0014                     	;# 
   890  0015                     	;# 
   891  0015                     	;# 
   892  0016                     	;# 
   893  0016                     	;# 
   894  0017                     	;# 
   895  0018                     	;# 
   896  0019                     	;# 
   897  0019                     	;# 
   898  001A                     	;# 
   899  001B                     	;# 
   900  001C                     	;# 
   901  001D                     	;# 
   902  001E                     	;# 
   903  001F                     	;# 
   904  008C                     	;# 
   905  008D                     	;# 
   906  008E                     	;# 
   907  0090                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0094                     	;# 
   912  0097                     	;# 
   913  009B                     	;# 
   914  009B                     	;# 
   915  009C                     	;# 
   916  009D                     	;# 
   917  009E                     	;# 
   918  009F                     	;# 
   919  010C                     	;# 
   920  010D                     	;# 
   921  010E                     	;# 
   922  0111                     	;# 
   923  0112                     	;# 
   924  0113                     	;# 
   925  0114                     	;# 
   926  0115                     	;# 
   927  0116                     	;# 
   928  0117                     	;# 
   929  0118                     	;# 
   930  0119                     	;# 
   931  018C                     	;# 
   932  018D                     	;# 
   933  018E                     	;# 
   934  0197                     	;# 
   935  0199                     	;# 
   936  0199                     	;# 
   937  0199                     	;# 
   938  019A                     	;# 
   939  019A                     	;# 
   940  019A                     	;# 
   941  019B                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019B                     	;# 
   946  019C                     	;# 
   947  019C                     	;# 
   948  019C                     	;# 
   949  019D                     	;# 
   950  019D                     	;# 
   951  019D                     	;# 
   952  019E                     	;# 
   953  019E                     	;# 
   954  019E                     	;# 
   955  019F                     	;# 
   956  019F                     	;# 
   957  019F                     	;# 
   958  019F                     	;# 
   959  019F                     	;# 
   960  020C                     	;# 
   961  020D                     	;# 
   962  020E                     	;# 
   963  0211                     	;# 
   964  0211                     	;# 
   965  0212                     	;# 
   966  0212                     	;# 
   967  0213                     	;# 
   968  0213                     	;# 
   969  0214                     	;# 
   970  0214                     	;# 
   971  0215                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0216                     	;# 
   976  0216                     	;# 
   977  0217                     	;# 
   978  0217                     	;# 
   979  0219                     	;# 
   980  021A                     	;# 
   981  021B                     	;# 
   982  021C                     	;# 
   983  021D                     	;# 
   984  021D                     	;# 
   985  021E                     	;# 
   986  021F                     	;# 
   987  028C                     	;# 
   988  028D                     	;# 
   989  028E                     	;# 
   990  0291                     	;# 
   991  0291                     	;# 
   992  0292                     	;# 
   993  0293                     	;# 
   994  0294                     	;# 
   995  0295                     	;# 
   996  0295                     	;# 
   997  0296                     	;# 
   998  0297                     	;# 
   999  0298                     	;# 
  1000  029F                     	;# 
  1001  030C                     	;# 
  1002  030D                     	;# 
  1003  030E                     	;# 
  1004  0311                     	;# 
  1005  0311                     	;# 
  1006  0312                     	;# 
  1007  0313                     	;# 
  1008  0314                     	;# 
  1009  0315                     	;# 
  1010  0315                     	;# 
  1011  0316                     	;# 
  1012  0317                     	;# 
  1013  0318                     	;# 
  1014  038C                     	;# 
  1015  038D                     	;# 
  1016  038E                     	;# 
  1017  0391                     	;# 
  1018  0392                     	;# 
  1019  0393                     	;# 
  1020  0394                     	;# 
  1021  0395                     	;# 
  1022  0396                     	;# 
  1023  0397                     	;# 
  1024  0398                     	;# 
  1025  0399                     	;# 
  1026  039A                     	;# 
  1027  039C                     	;# 
  1028  039D                     	;# 
  1029  039E                     	;# 
  1030  039F                     	;# 
  1031  0411                     	;# 
  1032  0411                     	;# 
  1033  0412                     	;# 
  1034  0413                     	;# 
  1035  0414                     	;# 
  1036  0415                     	;# 
  1037  0416                     	;# 
  1038  0417                     	;# 
  1039  0418                     	;# 
  1040  0418                     	;# 
  1041  0419                     	;# 
  1042  041A                     	;# 
  1043  041B                     	;# 
  1044  041C                     	;# 
  1045  041D                     	;# 
  1046  041E                     	;# 
  1047  041F                     	;# 
  1048  0498                     	;# 
  1049  0498                     	;# 
  1050  0499                     	;# 
  1051  049A                     	;# 
  1052  049B                     	;# 
  1053  049B                     	;# 
  1054  049C                     	;# 
  1055  049D                     	;# 
  1056  049E                     	;# 
  1057  049F                     	;# 
  1058  0617                     	;# 
  1059  0618                     	;# 
  1060  0619                     	;# 
  1061  0619                     	;# 
  1062  061A                     	;# 
  1063  061B                     	;# 
  1064  061C                     	;# 
  1065  061C                     	;# 
  1066  061F                     	;# 
  1067  0691                     	;# 
  1068  0692                     	;# 
  1069  0693                     	;# 
  1070  0694                     	;# 
  1071  0695                     	;# 
  1072  0696                     	;# 
  1073  0697                     	;# 
  1074  0698                     	;# 
  1075  0699                     	;# 
  1076  0711                     	;# 
  1077  0712                     	;# 
  1078  0713                     	;# 
  1079  0714                     	;# 
  1080  0715                     	;# 
  1081  0716                     	;# 
  1082  0717                     	;# 
  1083  0718                     	;# 
  1084  0719                     	;# 
  1085  0891                     	;# 
  1086  0891                     	;# 
  1087  0891                     	;# 
  1088  0891                     	;# 
  1089  0891                     	;# 
  1090  0891                     	;# 
  1091  0892                     	;# 
  1092  0892                     	;# 
  1093  0892                     	;# 
  1094  0893                     	;# 
  1095  0893                     	;# 
  1096  0893                     	;# 
  1097  0893                     	;# 
  1098  0893                     	;# 
  1099  0893                     	;# 
  1100  0894                     	;# 
  1101  0894                     	;# 
  1102  0894                     	;# 
  1103  0895                     	;# 
  1104  0895                     	;# 
  1105  0895                     	;# 
  1106  0896                     	;# 
  1107  0896                     	;# 
  1108  0896                     	;# 
  1109  089B                     	;# 
  1110  0911                     	;# 
  1111  0912                     	;# 
  1112  0913                     	;# 
  1113  0914                     	;# 
  1114  0915                     	;# 
  1115  0916                     	;# 
  1116  0918                     	;# 
  1117  0919                     	;# 
  1118  091A                     	;# 
  1119  091B                     	;# 
  1120  091C                     	;# 
  1121  091D                     	;# 
  1122  091E                     	;# 
  1123  091F                     	;# 
  1124  0E0F                     	;# 
  1125  0E10                     	;# 
  1126  0E11                     	;# 
  1127  0E12                     	;# 
  1128  0E13                     	;# 
  1129  0E14                     	;# 
  1130  0E15                     	;# 
  1131  0E16                     	;# 
  1132  0E17                     	;# 
  1133  0E18                     	;# 
  1134  0E19                     	;# 
  1135  0E1A                     	;# 
  1136  0E1B                     	;# 
  1137  0E1C                     	;# 
  1138  0E1D                     	;# 
  1139  0E1E                     	;# 
  1140  0E1F                     	;# 
  1141  0E20                     	;# 
  1142  0E21                     	;# 
  1143  0E22                     	;# 
  1144  0E24                     	;# 
  1145  0E25                     	;# 
  1146  0E28                     	;# 
  1147  0E29                     	;# 
  1148  0E2A                     	;# 
  1149  0E2B                     	;# 
  1150  0E2C                     	;# 
  1151  0E2D                     	;# 
  1152  0E2E                     	;# 
  1153  0E2F                     	;# 
  1154  0E90                     	;# 
  1155  0E91                     	;# 
  1156  0E92                     	;# 
  1157  0E94                     	;# 
  1158  0E95                     	;# 
  1159  0E9C                     	;# 
  1160  0E9D                     	;# 
  1161  0E9E                     	;# 
  1162  0E9F                     	;# 
  1163  0EA0                     	;# 
  1164  0EA1                     	;# 
  1165  0EA2                     	;# 
  1166  0EA3                     	;# 
  1167  0EA4                     	;# 
  1168  0EA5                     	;# 
  1169  0EA6                     	;# 
  1170  0EA7                     	;# 
  1171  0F0F                     	;# 
  1172  0F10                     	;# 
  1173  0F11                     	;# 
  1174  0F12                     	;# 
  1175  0F13                     	;# 
  1176  0F14                     	;# 
  1177  0F15                     	;# 
  1178  0F16                     	;# 
  1179  0F17                     	;# 
  1180  0F18                     	;# 
  1181  0F19                     	;# 
  1182  0F1A                     	;# 
  1183  0F1B                     	;# 
  1184  0F1C                     	;# 
  1185  0F1D                     	;# 
  1186  0F1E                     	;# 
  1187  0F1F                     	;# 
  1188  0F20                     	;# 
  1189  0F21                     	;# 
  1190  0F22                     	;# 
  1191  0F23                     	;# 
  1192  0F24                     	;# 
  1193  0F25                     	;# 
  1194  0F26                     	;# 
  1195  0F27                     	;# 
  1196  0F28                     	;# 
  1197  0F29                     	;# 
  1198  0F2A                     	;# 
  1199  0F2B                     	;# 
  1200  0F2C                     	;# 
  1201  0F2D                     	;# 
  1202  0F2E                     	;# 
  1203  0F2F                     	;# 
  1204  0F30                     	;# 
  1205  0F31                     	;# 
  1206  0F32                     	;# 
  1207  0F33                     	;# 
  1208  0F34                     	;# 
  1209  0F35                     	;# 
  1210  0F36                     	;# 
  1211  0F37                     	;# 
  1212  0FE4                     	;# 
  1213  0FE5                     	;# 
  1214  0FE6                     	;# 
  1215  0FE7                     	;# 
  1216  0FE8                     	;# 
  1217  0FE9                     	;# 
  1218  0FEA                     	;# 
  1219  0FEB                     	;# 
  1220  0FED                     	;# 
  1221  0FEE                     	;# 
  1222  0FEF                     	;# 
  1223  0000                     	;# 
  1224  0001                     	;# 
  1225  0002                     	;# 
  1226  0003                     	;# 
  1227  0004                     	;# 
  1228  0005                     	;# 
  1229  0006                     	;# 
  1230  0007                     	;# 
  1231  0008                     	;# 
  1232  0009                     	;# 
  1233  000A                     	;# 
  1234  000B                     	;# 
  1235  000C                     	;# 
  1236  000D                     	;# 
  1237  000E                     	;# 
  1238  0010                     	;# 
  1239  0011                     	;# 
  1240  0012                     	;# 
  1241  0013                     	;# 
  1242  0014                     	;# 
  1243  0015                     	;# 
  1244  0015                     	;# 
  1245  0016                     	;# 
  1246  0016                     	;# 
  1247  0017                     	;# 
  1248  0018                     	;# 
  1249  0019                     	;# 
  1250  0019                     	;# 
  1251  001A                     	;# 
  1252  001B                     	;# 
  1253  001C                     	;# 
  1254  001D                     	;# 
  1255  001E                     	;# 
  1256  001F                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0094                     	;# 
  1265  0097                     	;# 
  1266  009B                     	;# 
  1267  009B                     	;# 
  1268  009C                     	;# 
  1269  009D                     	;# 
  1270  009E                     	;# 
  1271  009F                     	;# 
  1272  010C                     	;# 
  1273  010D                     	;# 
  1274  010E                     	;# 
  1275  0111                     	;# 
  1276  0112                     	;# 
  1277  0113                     	;# 
  1278  0114                     	;# 
  1279  0115                     	;# 
  1280  0116                     	;# 
  1281  0117                     	;# 
  1282  0118                     	;# 
  1283  0119                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018E                     	;# 
  1287  0197                     	;# 
  1288  0199                     	;# 
  1289  0199                     	;# 
  1290  0199                     	;# 
  1291  019A                     	;# 
  1292  019A                     	;# 
  1293  019A                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019C                     	;# 
  1300  019C                     	;# 
  1301  019C                     	;# 
  1302  019D                     	;# 
  1303  019D                     	;# 
  1304  019D                     	;# 
  1305  019E                     	;# 
  1306  019E                     	;# 
  1307  019E                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  020C                     	;# 
  1314  020D                     	;# 
  1315  020E                     	;# 
  1316  0211                     	;# 
  1317  0211                     	;# 
  1318  0212                     	;# 
  1319  0212                     	;# 
  1320  0213                     	;# 
  1321  0213                     	;# 
  1322  0214                     	;# 
  1323  0214                     	;# 
  1324  0215                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0219                     	;# 
  1333  021A                     	;# 
  1334  021B                     	;# 
  1335  021C                     	;# 
  1336  021D                     	;# 
  1337  021D                     	;# 
  1338  021E                     	;# 
  1339  021F                     	;# 
  1340  028C                     	;# 
  1341  028D                     	;# 
  1342  028E                     	;# 
  1343  0291                     	;# 
  1344  0291                     	;# 
  1345  0292                     	;# 
  1346  0293                     	;# 
  1347  0294                     	;# 
  1348  0295                     	;# 
  1349  0295                     	;# 
  1350  0296                     	;# 
  1351  0297                     	;# 
  1352  0298                     	;# 
  1353  029F                     	;# 
  1354  030C                     	;# 
  1355  030D                     	;# 
  1356  030E                     	;# 
  1357  0311                     	;# 
  1358  0311                     	;# 
  1359  0312                     	;# 
  1360  0313                     	;# 
  1361  0314                     	;# 
  1362  0315                     	;# 
  1363  0315                     	;# 
  1364  0316                     	;# 
  1365  0317                     	;# 
  1366  0318                     	;# 
  1367  038C                     	;# 
  1368  038D                     	;# 
  1369  038E                     	;# 
  1370  0391                     	;# 
  1371  0392                     	;# 
  1372  0393                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0397                     	;# 
  1377  0398                     	;# 
  1378  0399                     	;# 
  1379  039A                     	;# 
  1380  039C                     	;# 
  1381  039D                     	;# 
  1382  039E                     	;# 
  1383  039F                     	;# 
  1384  0411                     	;# 
  1385  0411                     	;# 
  1386  0412                     	;# 
  1387  0413                     	;# 
  1388  0414                     	;# 
  1389  0415                     	;# 
  1390  0416                     	;# 
  1391  0417                     	;# 
  1392  0418                     	;# 
  1393  0418                     	;# 
  1394  0419                     	;# 
  1395  041A                     	;# 
  1396  041B                     	;# 
  1397  041C                     	;# 
  1398  041D                     	;# 
  1399  041E                     	;# 
  1400  041F                     	;# 
  1401  0498                     	;# 
  1402  0498                     	;# 
  1403  0499                     	;# 
  1404  049A                     	;# 
  1405  049B                     	;# 
  1406  049B                     	;# 
  1407  049C                     	;# 
  1408  049D                     	;# 
  1409  049E                     	;# 
  1410  049F                     	;# 
  1411  0617                     	;# 
  1412  0618                     	;# 
  1413  0619                     	;# 
  1414  0619                     	;# 
  1415  061A                     	;# 
  1416  061B                     	;# 
  1417  061C                     	;# 
  1418  061C                     	;# 
  1419  061F                     	;# 
  1420  0691                     	;# 
  1421  0692                     	;# 
  1422  0693                     	;# 
  1423  0694                     	;# 
  1424  0695                     	;# 
  1425  0696                     	;# 
  1426  0697                     	;# 
  1427  0698                     	;# 
  1428  0699                     	;# 
  1429  0711                     	;# 
  1430  0712                     	;# 
  1431  0713                     	;# 
  1432  0714                     	;# 
  1433  0715                     	;# 
  1434  0716                     	;# 
  1435  0717                     	;# 
  1436  0718                     	;# 
  1437  0719                     	;# 
  1438  0891                     	;# 
  1439  0891                     	;# 
  1440  0891                     	;# 
  1441  0891                     	;# 
  1442  0891                     	;# 
  1443  0891                     	;# 
  1444  0892                     	;# 
  1445  0892                     	;# 
  1446  0892                     	;# 
  1447  0893                     	;# 
  1448  0893                     	;# 
  1449  0893                     	;# 
  1450  0893                     	;# 
  1451  0893                     	;# 
  1452  0893                     	;# 
  1453  0894                     	;# 
  1454  0894                     	;# 
  1455  0894                     	;# 
  1456  0895                     	;# 
  1457  0895                     	;# 
  1458  0895                     	;# 
  1459  0896                     	;# 
  1460  0896                     	;# 
  1461  0896                     	;# 
  1462  089B                     	;# 
  1463  0911                     	;# 
  1464  0912                     	;# 
  1465  0913                     	;# 
  1466  0914                     	;# 
  1467  0915                     	;# 
  1468  0916                     	;# 
  1469  0918                     	;# 
  1470  0919                     	;# 
  1471  091A                     	;# 
  1472  091B                     	;# 
  1473  091C                     	;# 
  1474  091D                     	;# 
  1475  091E                     	;# 
  1476  091F                     	;# 
  1477  0E0F                     	;# 
  1478  0E10                     	;# 
  1479  0E11                     	;# 
  1480  0E12                     	;# 
  1481  0E13                     	;# 
  1482  0E14                     	;# 
  1483  0E15                     	;# 
  1484  0E16                     	;# 
  1485  0E17                     	;# 
  1486  0E18                     	;# 
  1487  0E19                     	;# 
  1488  0E1A                     	;# 
  1489  0E1B                     	;# 
  1490  0E1C                     	;# 
  1491  0E1D                     	;# 
  1492  0E1E                     	;# 
  1493  0E1F                     	;# 
  1494  0E20                     	;# 
  1495  0E21                     	;# 
  1496  0E22                     	;# 
  1497  0E24                     	;# 
  1498  0E25                     	;# 
  1499  0E28                     	;# 
  1500  0E29                     	;# 
  1501  0E2A                     	;# 
  1502  0E2B                     	;# 
  1503  0E2C                     	;# 
  1504  0E2D                     	;# 
  1505  0E2E                     	;# 
  1506  0E2F                     	;# 
  1507  0E90                     	;# 
  1508  0E91                     	;# 
  1509  0E92                     	;# 
  1510  0E94                     	;# 
  1511  0E95                     	;# 
  1512  0E9C                     	;# 
  1513  0E9D                     	;# 
  1514  0E9E                     	;# 
  1515  0E9F                     	;# 
  1516  0EA0                     	;# 
  1517  0EA1                     	;# 
  1518  0EA2                     	;# 
  1519  0EA3                     	;# 
  1520  0EA4                     	;# 
  1521  0EA5                     	;# 
  1522  0EA6                     	;# 
  1523  0EA7                     	;# 
  1524  0F0F                     	;# 
  1525  0F10                     	;# 
  1526  0F11                     	;# 
  1527  0F12                     	;# 
  1528  0F13                     	;# 
  1529  0F14                     	;# 
  1530  0F15                     	;# 
  1531  0F16                     	;# 
  1532  0F17                     	;# 
  1533  0F18                     	;# 
  1534  0F19                     	;# 
  1535  0F1A                     	;# 
  1536  0F1B                     	;# 
  1537  0F1C                     	;# 
  1538  0F1D                     	;# 
  1539  0F1E                     	;# 
  1540  0F1F                     	;# 
  1541  0F20                     	;# 
  1542  0F21                     	;# 
  1543  0F22                     	;# 
  1544  0F23                     	;# 
  1545  0F24                     	;# 
  1546  0F25                     	;# 
  1547  0F26                     	;# 
  1548  0F27                     	;# 
  1549  0F28                     	;# 
  1550  0F29                     	;# 
  1551  0F2A                     	;# 
  1552  0F2B                     	;# 
  1553  0F2C                     	;# 
  1554  0F2D                     	;# 
  1555  0F2E                     	;# 
  1556  0F2F                     	;# 
  1557  0F30                     	;# 
  1558  0F31                     	;# 
  1559  0F32                     	;# 
  1560  0F33                     	;# 
  1561  0F34                     	;# 
  1562  0F35                     	;# 
  1563  0F36                     	;# 
  1564  0F37                     	;# 
  1565  0FE4                     	;# 
  1566  0FE5                     	;# 
  1567  0FE6                     	;# 
  1568  0FE7                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEB                     	;# 
  1573  0FED                     	;# 
  1574  0FEE                     	;# 
  1575  0FEF                     	;# 
  1576  0000                     	;# 
  1577  0001                     	;# 
  1578  0002                     	;# 
  1579  0003                     	;# 
  1580  0004                     	;# 
  1581  0005                     	;# 
  1582  0006                     	;# 
  1583  0007                     	;# 
  1584  0008                     	;# 
  1585  0009                     	;# 
  1586  000A                     	;# 
  1587  000B                     	;# 
  1588  000C                     	;# 
  1589  000D                     	;# 
  1590  000E                     	;# 
  1591  0010                     	;# 
  1592  0011                     	;# 
  1593  0012                     	;# 
  1594  0013                     	;# 
  1595  0014                     	;# 
  1596  0015                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  0019                     	;# 
  1604  001A                     	;# 
  1605  001B                     	;# 
  1606  001C                     	;# 
  1607  001D                     	;# 
  1608  001E                     	;# 
  1609  001F                     	;# 
  1610  008C                     	;# 
  1611  008D                     	;# 
  1612  008E                     	;# 
  1613  0090                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0094                     	;# 
  1618  0097                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  009F                     	;# 
  1625  010C                     	;# 
  1626  010D                     	;# 
  1627  010E                     	;# 
  1628  0111                     	;# 
  1629  0112                     	;# 
  1630  0113                     	;# 
  1631  0114                     	;# 
  1632  0115                     	;# 
  1633  0116                     	;# 
  1634  0117                     	;# 
  1635  0118                     	;# 
  1636  0119                     	;# 
  1637  018C                     	;# 
  1638  018D                     	;# 
  1639  018E                     	;# 
  1640  0197                     	;# 
  1641  0199                     	;# 
  1642  0199                     	;# 
  1643  0199                     	;# 
  1644  019A                     	;# 
  1645  019A                     	;# 
  1646  019A                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019C                     	;# 
  1653  019C                     	;# 
  1654  019C                     	;# 
  1655  019D                     	;# 
  1656  019D                     	;# 
  1657  019D                     	;# 
  1658  019E                     	;# 
  1659  019E                     	;# 
  1660  019E                     	;# 
  1661  019F                     	;# 
  1662  019F                     	;# 
  1663  019F                     	;# 
  1664  019F                     	;# 
  1665  019F                     	;# 
  1666  020C                     	;# 
  1667  020D                     	;# 
  1668  020E                     	;# 
  1669  0211                     	;# 
  1670  0211                     	;# 
  1671  0212                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0213                     	;# 
  1675  0214                     	;# 
  1676  0214                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0219                     	;# 
  1686  021A                     	;# 
  1687  021B                     	;# 
  1688  021C                     	;# 
  1689  021D                     	;# 
  1690  021D                     	;# 
  1691  021E                     	;# 
  1692  021F                     	;# 
  1693  028C                     	;# 
  1694  028D                     	;# 
  1695  028E                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0294                     	;# 
  1701  0295                     	;# 
  1702  0295                     	;# 
  1703  0296                     	;# 
  1704  0297                     	;# 
  1705  0298                     	;# 
  1706  029F                     	;# 
  1707  030C                     	;# 
  1708  030D                     	;# 
  1709  030E                     	;# 
  1710  0311                     	;# 
  1711  0311                     	;# 
  1712  0312                     	;# 
  1713  0313                     	;# 
  1714  0314                     	;# 
  1715  0315                     	;# 
  1716  0315                     	;# 
  1717  0316                     	;# 
  1718  0317                     	;# 
  1719  0318                     	;# 
  1720  038C                     	;# 
  1721  038D                     	;# 
  1722  038E                     	;# 
  1723  0391                     	;# 
  1724  0392                     	;# 
  1725  0393                     	;# 
  1726  0394                     	;# 
  1727  0395                     	;# 
  1728  0396                     	;# 
  1729  0397                     	;# 
  1730  0398                     	;# 
  1731  0399                     	;# 
  1732  039A                     	;# 
  1733  039C                     	;# 
  1734  039D                     	;# 
  1735  039E                     	;# 
  1736  039F                     	;# 
  1737  0411                     	;# 
  1738  0411                     	;# 
  1739  0412                     	;# 
  1740  0413                     	;# 
  1741  0414                     	;# 
  1742  0415                     	;# 
  1743  0416                     	;# 
  1744  0417                     	;# 
  1745  0418                     	;# 
  1746  0418                     	;# 
  1747  0419                     	;# 
  1748  041A                     	;# 
  1749  041B                     	;# 
  1750  041C                     	;# 
  1751  041D                     	;# 
  1752  041E                     	;# 
  1753  041F                     	;# 
  1754  0498                     	;# 
  1755  0498                     	;# 
  1756  0499                     	;# 
  1757  049A                     	;# 
  1758  049B                     	;# 
  1759  049B                     	;# 
  1760  049C                     	;# 
  1761  049D                     	;# 
  1762  049E                     	;# 
  1763  049F                     	;# 
  1764  0617                     	;# 
  1765  0618                     	;# 
  1766  0619                     	;# 
  1767  0619                     	;# 
  1768  061A                     	;# 
  1769  061B                     	;# 
  1770  061C                     	;# 
  1771  061C                     	;# 
  1772  061F                     	;# 
  1773  0691                     	;# 
  1774  0692                     	;# 
  1775  0693                     	;# 
  1776  0694                     	;# 
  1777  0695                     	;# 
  1778  0696                     	;# 
  1779  0697                     	;# 
  1780  0698                     	;# 
  1781  0699                     	;# 
  1782  0711                     	;# 
  1783  0712                     	;# 
  1784  0713                     	;# 
  1785  0714                     	;# 
  1786  0715                     	;# 
  1787  0716                     	;# 
  1788  0717                     	;# 
  1789  0718                     	;# 
  1790  0719                     	;# 
  1791  0891                     	;# 
  1792  0891                     	;# 
  1793  0891                     	;# 
  1794  0891                     	;# 
  1795  0891                     	;# 
  1796  0891                     	;# 
  1797  0892                     	;# 
  1798  0892                     	;# 
  1799  0892                     	;# 
  1800  0893                     	;# 
  1801  0893                     	;# 
  1802  0893                     	;# 
  1803  0893                     	;# 
  1804  0893                     	;# 
  1805  0893                     	;# 
  1806  0894                     	;# 
  1807  0894                     	;# 
  1808  0894                     	;# 
  1809  0895                     	;# 
  1810  0895                     	;# 
  1811  0895                     	;# 
  1812  0896                     	;# 
  1813  0896                     	;# 
  1814  0896                     	;# 
  1815  089B                     	;# 
  1816  0911                     	;# 
  1817  0912                     	;# 
  1818  0913                     	;# 
  1819  0914                     	;# 
  1820  0915                     	;# 
  1821  0916                     	;# 
  1822  0918                     	;# 
  1823  0919                     	;# 
  1824  091A                     	;# 
  1825  091B                     	;# 
  1826  091C                     	;# 
  1827  091D                     	;# 
  1828  091E                     	;# 
  1829  091F                     	;# 
  1830  0E0F                     	;# 
  1831  0E10                     	;# 
  1832  0E11                     	;# 
  1833  0E12                     	;# 
  1834  0E13                     	;# 
  1835  0E14                     	;# 
  1836  0E15                     	;# 
  1837  0E16                     	;# 
  1838  0E17                     	;# 
  1839  0E18                     	;# 
  1840  0E19                     	;# 
  1841  0E1A                     	;# 
  1842  0E1B                     	;# 
  1843  0E1C                     	;# 
  1844  0E1D                     	;# 
  1845  0E1E                     	;# 
  1846  0E1F                     	;# 
  1847  0E20                     	;# 
  1848  0E21                     	;# 
  1849  0E22                     	;# 
  1850  0E24                     	;# 
  1851  0E25                     	;# 
  1852  0E28                     	;# 
  1853  0E29                     	;# 
  1854  0E2A                     	;# 
  1855  0E2B                     	;# 
  1856  0E2C                     	;# 
  1857  0E2D                     	;# 
  1858  0E2E                     	;# 
  1859  0E2F                     	;# 
  1860  0E90                     	;# 
  1861  0E91                     	;# 
  1862  0E92                     	;# 
  1863  0E94                     	;# 
  1864  0E95                     	;# 
  1865  0E9C                     	;# 
  1866  0E9D                     	;# 
  1867  0E9E                     	;# 
  1868  0E9F                     	;# 
  1869  0EA0                     	;# 
  1870  0EA1                     	;# 
  1871  0EA2                     	;# 
  1872  0EA3                     	;# 
  1873  0EA4                     	;# 
  1874  0EA5                     	;# 
  1875  0EA6                     	;# 
  1876  0EA7                     	;# 
  1877  0F0F                     	;# 
  1878  0F10                     	;# 
  1879  0F11                     	;# 
  1880  0F12                     	;# 
  1881  0F13                     	;# 
  1882  0F14                     	;# 
  1883  0F15                     	;# 
  1884  0F16                     	;# 
  1885  0F17                     	;# 
  1886  0F18                     	;# 
  1887  0F19                     	;# 
  1888  0F1A                     	;# 
  1889  0F1B                     	;# 
  1890  0F1C                     	;# 
  1891  0F1D                     	;# 
  1892  0F1E                     	;# 
  1893  0F1F                     	;# 
  1894  0F20                     	;# 
  1895  0F21                     	;# 
  1896  0F22                     	;# 
  1897  0F23                     	;# 
  1898  0F24                     	;# 
  1899  0F25                     	;# 
  1900  0F26                     	;# 
  1901  0F27                     	;# 
  1902  0F28                     	;# 
  1903  0F29                     	;# 
  1904  0F2A                     	;# 
  1905  0F2B                     	;# 
  1906  0F2C                     	;# 
  1907  0F2D                     	;# 
  1908  0F2E                     	;# 
  1909  0F2F                     	;# 
  1910  0F30                     	;# 
  1911  0F31                     	;# 
  1912  0F32                     	;# 
  1913  0F33                     	;# 
  1914  0F34                     	;# 
  1915  0F35                     	;# 
  1916  0F36                     	;# 
  1917  0F37                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0013                     	;# 
  1948  0014                     	;# 
  1949  0015                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  001D                     	;# 
  1961  001E                     	;# 
  1962  001F                     	;# 
  1963  008C                     	;# 
  1964  008D                     	;# 
  1965  008E                     	;# 
  1966  0090                     	;# 
  1967  0091                     	;# 
  1968  0092                     	;# 
  1969  0093                     	;# 
  1970  0094                     	;# 
  1971  0097                     	;# 
  1972  009B                     	;# 
  1973  009B                     	;# 
  1974  009C                     	;# 
  1975  009D                     	;# 
  1976  009E                     	;# 
  1977  009F                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0111                     	;# 
  1982  0112                     	;# 
  1983  0113                     	;# 
  1984  0114                     	;# 
  1985  0115                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  0118                     	;# 
  1989  0119                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  0199                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019A                     	;# 
  1999  019A                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019C                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019D                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019E                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  019F                     	;# 
  2016  019F                     	;# 
  2017  019F                     	;# 
  2018  019F                     	;# 
  2019  020C                     	;# 
  2020  020D                     	;# 
  2021  020E                     	;# 
  2022  0211                     	;# 
  2023  0211                     	;# 
  2024  0212                     	;# 
  2025  0212                     	;# 
  2026  0213                     	;# 
  2027  0213                     	;# 
  2028  0214                     	;# 
  2029  0214                     	;# 
  2030  0215                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0219                     	;# 
  2039  021A                     	;# 
  2040  021B                     	;# 
  2041  021C                     	;# 
  2042  021D                     	;# 
  2043  021D                     	;# 
  2044  021E                     	;# 
  2045  021F                     	;# 
  2046  028C                     	;# 
  2047  028D                     	;# 
  2048  028E                     	;# 
  2049  0291                     	;# 
  2050  0291                     	;# 
  2051  0292                     	;# 
  2052  0293                     	;# 
  2053  0294                     	;# 
  2054  0295                     	;# 
  2055  0295                     	;# 
  2056  0296                     	;# 
  2057  0297                     	;# 
  2058  0298                     	;# 
  2059  029F                     	;# 
  2060  030C                     	;# 
  2061  030D                     	;# 
  2062  030E                     	;# 
  2063  0311                     	;# 
  2064  0311                     	;# 
  2065  0312                     	;# 
  2066  0313                     	;# 
  2067  0314                     	;# 
  2068  0315                     	;# 
  2069  0315                     	;# 
  2070  0316                     	;# 
  2071  0317                     	;# 
  2072  0318                     	;# 
  2073  038C                     	;# 
  2074  038D                     	;# 
  2075  038E                     	;# 
  2076  0391                     	;# 
  2077  0392                     	;# 
  2078  0393                     	;# 
  2079  0394                     	;# 
  2080  0395                     	;# 
  2081  0396                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  039A                     	;# 
  2086  039C                     	;# 
  2087  039D                     	;# 
  2088  039E                     	;# 
  2089  039F                     	;# 
  2090  0411                     	;# 
  2091  0411                     	;# 
  2092  0412                     	;# 
  2093  0413                     	;# 
  2094  0414                     	;# 
  2095  0415                     	;# 
  2096  0416                     	;# 
  2097  0417                     	;# 
  2098  0418                     	;# 
  2099  0418                     	;# 
  2100  0419                     	;# 
  2101  041A                     	;# 
  2102  041B                     	;# 
  2103  041C                     	;# 
  2104  041D                     	;# 
  2105  041E                     	;# 
  2106  041F                     	;# 
  2107  0498                     	;# 
  2108  0498                     	;# 
  2109  0499                     	;# 
  2110  049A                     	;# 
  2111  049B                     	;# 
  2112  049B                     	;# 
  2113  049C                     	;# 
  2114  049D                     	;# 
  2115  049E                     	;# 
  2116  049F                     	;# 
  2117  0617                     	;# 
  2118  0618                     	;# 
  2119  0619                     	;# 
  2120  0619                     	;# 
  2121  061A                     	;# 
  2122  061B                     	;# 
  2123  061C                     	;# 
  2124  061C                     	;# 
  2125  061F                     	;# 
  2126  0691                     	;# 
  2127  0692                     	;# 
  2128  0693                     	;# 
  2129  0694                     	;# 
  2130  0695                     	;# 
  2131  0696                     	;# 
  2132  0697                     	;# 
  2133  0698                     	;# 
  2134  0699                     	;# 
  2135  0711                     	;# 
  2136  0712                     	;# 
  2137  0713                     	;# 
  2138  0714                     	;# 
  2139  0715                     	;# 
  2140  0716                     	;# 
  2141  0717                     	;# 
  2142  0718                     	;# 
  2143  0719                     	;# 
  2144  0891                     	;# 
  2145  0891                     	;# 
  2146  0891                     	;# 
  2147  0891                     	;# 
  2148  0891                     	;# 
  2149  0891                     	;# 
  2150  0892                     	;# 
  2151  0892                     	;# 
  2152  0892                     	;# 
  2153  0893                     	;# 
  2154  0893                     	;# 
  2155  0893                     	;# 
  2156  0893                     	;# 
  2157  0893                     	;# 
  2158  0893                     	;# 
  2159  0894                     	;# 
  2160  0894                     	;# 
  2161  0894                     	;# 
  2162  0895                     	;# 
  2163  0895                     	;# 
  2164  0895                     	;# 
  2165  0896                     	;# 
  2166  0896                     	;# 
  2167  0896                     	;# 
  2168  089B                     	;# 
  2169  0911                     	;# 
  2170  0912                     	;# 
  2171  0913                     	;# 
  2172  0914                     	;# 
  2173  0915                     	;# 
  2174  0916                     	;# 
  2175  0918                     	;# 
  2176  0919                     	;# 
  2177  091A                     	;# 
  2178  091B                     	;# 
  2179  091C                     	;# 
  2180  091D                     	;# 
  2181  091E                     	;# 
  2182  091F                     	;# 
  2183  0E0F                     	;# 
  2184  0E10                     	;# 
  2185  0E11                     	;# 
  2186  0E12                     	;# 
  2187  0E13                     	;# 
  2188  0E14                     	;# 
  2189  0E15                     	;# 
  2190  0E16                     	;# 
  2191  0E17                     	;# 
  2192  0E18                     	;# 
  2193  0E19                     	;# 
  2194  0E1A                     	;# 
  2195  0E1B                     	;# 
  2196  0E1C                     	;# 
  2197  0E1D                     	;# 
  2198  0E1E                     	;# 
  2199  0E1F                     	;# 
  2200  0E20                     	;# 
  2201  0E21                     	;# 
  2202  0E22                     	;# 
  2203  0E24                     	;# 
  2204  0E25                     	;# 
  2205  0E28                     	;# 
  2206  0E29                     	;# 
  2207  0E2A                     	;# 
  2208  0E2B                     	;# 
  2209  0E2C                     	;# 
  2210  0E2D                     	;# 
  2211  0E2E                     	;# 
  2212  0E2F                     	;# 
  2213  0E90                     	;# 
  2214  0E91                     	;# 
  2215  0E92                     	;# 
  2216  0E94                     	;# 
  2217  0E95                     	;# 
  2218  0E9C                     	;# 
  2219  0E9D                     	;# 
  2220  0E9E                     	;# 
  2221  0E9F                     	;# 
  2222  0EA0                     	;# 
  2223  0EA1                     	;# 
  2224  0EA2                     	;# 
  2225  0EA3                     	;# 
  2226  0EA4                     	;# 
  2227  0EA5                     	;# 
  2228  0EA6                     	;# 
  2229  0EA7                     	;# 
  2230  0F0F                     	;# 
  2231  0F10                     	;# 
  2232  0F11                     	;# 
  2233  0F12                     	;# 
  2234  0F13                     	;# 
  2235  0F14                     	;# 
  2236  0F15                     	;# 
  2237  0F16                     	;# 
  2238  0F17                     	;# 
  2239  0F18                     	;# 
  2240  0F19                     	;# 
  2241  0F1A                     	;# 
  2242  0F1B                     	;# 
  2243  0F1C                     	;# 
  2244  0F1D                     	;# 
  2245  0F1E                     	;# 
  2246  0F1F                     	;# 
  2247  0F20                     	;# 
  2248  0F21                     	;# 
  2249  0F22                     	;# 
  2250  0F23                     	;# 
  2251  0F24                     	;# 
  2252  0F25                     	;# 
  2253  0F26                     	;# 
  2254  0F27                     	;# 
  2255  0F28                     	;# 
  2256  0F29                     	;# 
  2257  0F2A                     	;# 
  2258  0F2B                     	;# 
  2259  0F2C                     	;# 
  2260  0F2D                     	;# 
  2261  0F2E                     	;# 
  2262  0F2F                     	;# 
  2263  0F30                     	;# 
  2264  0F31                     	;# 
  2265  0F32                     	;# 
  2266  0F33                     	;# 
  2267  0F34                     	;# 
  2268  0F35                     	;# 
  2269  0F36                     	;# 
  2270  0F37                     	;# 
  2271  0FE4                     	;# 
  2272  0FE5                     	;# 
  2273  0FE6                     	;# 
  2274  0FE7                     	;# 
  2275  0FE8                     	;# 
  2276  0FE9                     	;# 
  2277  0FEA                     	;# 
  2278  0FEB                     	;# 
  2279  0FED                     	;# 
  2280  0FEE                     	;# 
  2281  0FEF                     	;# 
  2282  0000                     	;# 
  2283  0001                     	;# 
  2284  0002                     	;# 
  2285  0003                     	;# 
  2286  0004                     	;# 
  2287  0005                     	;# 
  2288  0006                     	;# 
  2289  0007                     	;# 
  2290  0008                     	;# 
  2291  0009                     	;# 
  2292  000A                     	;# 
  2293  000B                     	;# 
  2294  000C                     	;# 
  2295  000D                     	;# 
  2296  000E                     	;# 
  2297  0010                     	;# 
  2298  0011                     	;# 
  2299  0012                     	;# 
  2300  0013                     	;# 
  2301  0014                     	;# 
  2302  0015                     	;# 
  2303  0015                     	;# 
  2304  0016                     	;# 
  2305  0016                     	;# 
  2306  0017                     	;# 
  2307  0018                     	;# 
  2308  0019                     	;# 
  2309  0019                     	;# 
  2310  001A                     	;# 
  2311  001B                     	;# 
  2312  001C                     	;# 
  2313  001D                     	;# 
  2314  001E                     	;# 
  2315  001F                     	;# 
  2316  008C                     	;# 
  2317  008D                     	;# 
  2318  008E                     	;# 
  2319  0090                     	;# 
  2320  0091                     	;# 
  2321  0092                     	;# 
  2322  0093                     	;# 
  2323  0094                     	;# 
  2324  0097                     	;# 
  2325  009B                     	;# 
  2326  009B                     	;# 
  2327  009C                     	;# 
  2328  009D                     	;# 
  2329  009E                     	;# 
  2330  009F                     	;# 
  2331  010C                     	;# 
  2332  010D                     	;# 
  2333  010E                     	;# 
  2334  0111                     	;# 
  2335  0112                     	;# 
  2336  0113                     	;# 
  2337  0114                     	;# 
  2338  0115                     	;# 
  2339  0116                     	;# 
  2340  0117                     	;# 
  2341  0118                     	;# 
  2342  0119                     	;# 
  2343  018C                     	;# 
  2344  018D                     	;# 
  2345  018E                     	;# 
  2346  0197                     	;# 
  2347  0199                     	;# 
  2348  0199                     	;# 
  2349  0199                     	;# 
  2350  019A                     	;# 
  2351  019A                     	;# 
  2352  019A                     	;# 
  2353  019B                     	;# 
  2354  019B                     	;# 
  2355  019B                     	;# 
  2356  019B                     	;# 
  2357  019B                     	;# 
  2358  019C                     	;# 
  2359  019C                     	;# 
  2360  019C                     	;# 
  2361  019D                     	;# 
  2362  019D                     	;# 
  2363  019D                     	;# 
  2364  019E                     	;# 
  2365  019E                     	;# 
  2366  019E                     	;# 
  2367  019F                     	;# 
  2368  019F                     	;# 
  2369  019F                     	;# 
  2370  019F                     	;# 
  2371  019F                     	;# 
  2372  020C                     	;# 
  2373  020D                     	;# 
  2374  020E                     	;# 
  2375  0211                     	;# 
  2376  0211                     	;# 
  2377  0212                     	;# 
  2378  0212                     	;# 
  2379  0213                     	;# 
  2380  0213                     	;# 
  2381  0214                     	;# 
  2382  0214                     	;# 
  2383  0215                     	;# 
  2384  0215                     	;# 
  2385  0215                     	;# 
  2386  0215                     	;# 
  2387  0216                     	;# 
  2388  0216                     	;# 
  2389  0217                     	;# 
  2390  0217                     	;# 
  2391  0219                     	;# 
  2392  021A                     	;# 
  2393  021B                     	;# 
  2394  021C                     	;# 
  2395  021D                     	;# 
  2396  021D                     	;# 
  2397  021E                     	;# 
  2398  021F                     	;# 
  2399  028C                     	;# 
  2400  028D                     	;# 
  2401  028E                     	;# 
  2402  0291                     	;# 
  2403  0291                     	;# 
  2404  0292                     	;# 
  2405  0293                     	;# 
  2406  0294                     	;# 
  2407  0295                     	;# 
  2408  0295                     	;# 
  2409  0296                     	;# 
  2410  0297                     	;# 
  2411  0298                     	;# 
  2412  029F                     	;# 
  2413  030C                     	;# 
  2414  030D                     	;# 
  2415  030E                     	;# 
  2416  0311                     	;# 
  2417  0311                     	;# 
  2418  0312                     	;# 
  2419  0313                     	;# 
  2420  0314                     	;# 
  2421  0315                     	;# 
  2422  0315                     	;# 
  2423  0316                     	;# 
  2424  0317                     	;# 
  2425  0318                     	;# 
  2426  038C                     	;# 
  2427  038D                     	;# 
  2428  038E                     	;# 
  2429  0391                     	;# 
  2430  0392                     	;# 
  2431  0393                     	;# 
  2432  0394                     	;# 
  2433  0395                     	;# 
  2434  0396                     	;# 
  2435  0397                     	;# 
  2436  0398                     	;# 
  2437  0399                     	;# 
  2438  039A                     	;# 
  2439  039C                     	;# 
  2440  039D                     	;# 
  2441  039E                     	;# 
  2442  039F                     	;# 
  2443  0411                     	;# 
  2444  0411                     	;# 
  2445  0412                     	;# 
  2446  0413                     	;# 
  2447  0414                     	;# 
  2448  0415                     	;# 
  2449  0416                     	;# 
  2450  0417                     	;# 
  2451  0418                     	;# 
  2452  0418                     	;# 
  2453  0419                     	;# 
  2454  041A                     	;# 
  2455  041B                     	;# 
  2456  041C                     	;# 
  2457  041D                     	;# 
  2458  041E                     	;# 
  2459  041F                     	;# 
  2460  0498                     	;# 
  2461  0498                     	;# 
  2462  0499                     	;# 
  2463  049A                     	;# 
  2464  049B                     	;# 
  2465  049B                     	;# 
  2466  049C                     	;# 
  2467  049D                     	;# 
  2468  049E                     	;# 
  2469  049F                     	;# 
  2470  0617                     	;# 
  2471  0618                     	;# 
  2472  0619                     	;# 
  2473  0619                     	;# 
  2474  061A                     	;# 
  2475  061B                     	;# 
  2476  061C                     	;# 
  2477  061C                     	;# 
  2478  061F                     	;# 
  2479  0691                     	;# 
  2480  0692                     	;# 
  2481  0693                     	;# 
  2482  0694                     	;# 
  2483  0695                     	;# 
  2484  0696                     	;# 
  2485  0697                     	;# 
  2486  0698                     	;# 
  2487  0699                     	;# 
  2488  0711                     	;# 
  2489  0712                     	;# 
  2490  0713                     	;# 
  2491  0714                     	;# 
  2492  0715                     	;# 
  2493  0716                     	;# 
  2494  0717                     	;# 
  2495  0718                     	;# 
  2496  0719                     	;# 
  2497  0891                     	;# 
  2498  0891                     	;# 
  2499  0891                     	;# 
  2500  0891                     	;# 
  2501  0891                     	;# 
  2502  0891                     	;# 
  2503  0892                     	;# 
  2504  0892                     	;# 
  2505  0892                     	;# 
  2506  0893                     	;# 
  2507  0893                     	;# 
  2508  0893                     	;# 
  2509  0893                     	;# 
  2510  0893                     	;# 
  2511  0893                     	;# 
  2512  0894                     	;# 
  2513  0894                     	;# 
  2514  0894                     	;# 
  2515  0895                     	;# 
  2516  0895                     	;# 
  2517  0895                     	;# 
  2518  0896                     	;# 
  2519  0896                     	;# 
  2520  0896                     	;# 
  2521  089B                     	;# 
  2522  0911                     	;# 
  2523  0912                     	;# 
  2524  0913                     	;# 
  2525  0914                     	;# 
  2526  0915                     	;# 
  2527  0916                     	;# 
  2528  0918                     	;# 
  2529  0919                     	;# 
  2530  091A                     	;# 
  2531  091B                     	;# 
  2532  091C                     	;# 
  2533  091D                     	;# 
  2534  091E                     	;# 
  2535  091F                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E24                     	;# 
  2557  0E25                     	;# 
  2558  0E28                     	;# 
  2559  0E29                     	;# 
  2560  0E2A                     	;# 
  2561  0E2B                     	;# 
  2562  0E2C                     	;# 
  2563  0E2D                     	;# 
  2564  0E2E                     	;# 
  2565  0E2F                     	;# 
  2566  0E90                     	;# 
  2567  0E91                     	;# 
  2568  0E92                     	;# 
  2569  0E94                     	;# 
  2570  0E95                     	;# 
  2571  0E9C                     	;# 
  2572  0E9D                     	;# 
  2573  0E9E                     	;# 
  2574  0E9F                     	;# 
  2575  0EA0                     	;# 
  2576  0EA1                     	;# 
  2577  0EA2                     	;# 
  2578  0EA3                     	;# 
  2579  0EA4                     	;# 
  2580  0EA5                     	;# 
  2581  0EA6                     	;# 
  2582  0EA7                     	;# 
  2583  0F0F                     	;# 
  2584  0F10                     	;# 
  2585  0F11                     	;# 
  2586  0F12                     	;# 
  2587  0F13                     	;# 
  2588  0F14                     	;# 
  2589  0F15                     	;# 
  2590  0F16                     	;# 
  2591  0F17                     	;# 
  2592  0F18                     	;# 
  2593  0F19                     	;# 
  2594  0F1A                     	;# 
  2595  0F1B                     	;# 
  2596  0F1C                     	;# 
  2597  0F1D                     	;# 
  2598  0F1E                     	;# 
  2599  0F1F                     	;# 
  2600  0F20                     	;# 
  2601  0F21                     	;# 
  2602  0F22                     	;# 
  2603  0F23                     	;# 
  2604  0F24                     	;# 
  2605  0F25                     	;# 
  2606  0F26                     	;# 
  2607  0F27                     	;# 
  2608  0F28                     	;# 
  2609  0F29                     	;# 
  2610  0F2A                     	;# 
  2611  0F2B                     	;# 
  2612  0F2C                     	;# 
  2613  0F2D                     	;# 
  2614  0F2E                     	;# 
  2615  0F2F                     	;# 
  2616  0F30                     	;# 
  2617  0F31                     	;# 
  2618  0F32                     	;# 
  2619  0F33                     	;# 
  2620  0F34                     	;# 
  2621  0F35                     	;# 
  2622  0F36                     	;# 
  2623  0F37                     	;# 
  2624  0FE4                     	;# 
  2625  0FE5                     	;# 
  2626  0FE6                     	;# 
  2627  0FE7                     	;# 
  2628  0FE8                     	;# 
  2629  0FE9                     	;# 
  2630  0FEA                     	;# 
  2631  0FEB                     	;# 
  2632  0FED                     	;# 
  2633  0FEE                     	;# 
  2634  0FEF                     	;# 
  2635  0000                     	;# 
  2636  0001                     	;# 
  2637  0002                     	;# 
  2638  0003                     	;# 
  2639  0004                     	;# 
  2640  0005                     	;# 
  2641  0006                     	;# 
  2642  0007                     	;# 
  2643  0008                     	;# 
  2644  0009                     	;# 
  2645  000A                     	;# 
  2646  000B                     	;# 
  2647  000C                     	;# 
  2648  000D                     	;# 
  2649  000E                     	;# 
  2650  0010                     	;# 
  2651  0011                     	;# 
  2652  0012                     	;# 
  2653  0013                     	;# 
  2654  0014                     	;# 
  2655  0015                     	;# 
  2656  0015                     	;# 
  2657  0016                     	;# 
  2658  0016                     	;# 
  2659  0017                     	;# 
  2660  0018                     	;# 
  2661  0019                     	;# 
  2662  0019                     	;# 
  2663  001A                     	;# 
  2664  001B                     	;# 
  2665  001C                     	;# 
  2666  001D                     	;# 
  2667  001E                     	;# 
  2668  001F                     	;# 
  2669  008C                     	;# 
  2670  008D                     	;# 
  2671  008E                     	;# 
  2672  0090                     	;# 
  2673  0091                     	;# 
  2674  0092                     	;# 
  2675  0093                     	;# 
  2676  0094                     	;# 
  2677  0097                     	;# 
  2678  009B                     	;# 
  2679  009B                     	;# 
  2680  009C                     	;# 
  2681  009D                     	;# 
  2682  009E                     	;# 
  2683  009F                     	;# 
  2684  010C                     	;# 
  2685  010D                     	;# 
  2686  010E                     	;# 
  2687  0111                     	;# 
  2688  0112                     	;# 
  2689  0113                     	;# 
  2690  0114                     	;# 
  2691  0115                     	;# 
  2692  0116                     	;# 
  2693  0117                     	;# 
  2694  0118                     	;# 
  2695  0119                     	;# 
  2696  018C                     	;# 
  2697  018D                     	;# 
  2698  018E                     	;# 
  2699  0197                     	;# 
  2700  0199                     	;# 
  2701  0199                     	;# 
  2702  0199                     	;# 
  2703  019A                     	;# 
  2704  019A                     	;# 
  2705  019A                     	;# 
  2706  019B                     	;# 
  2707  019B                     	;# 
  2708  019B                     	;# 
  2709  019B                     	;# 
  2710  019B                     	;# 
  2711  019C                     	;# 
  2712  019C                     	;# 
  2713  019C                     	;# 
  2714  019D                     	;# 
  2715  019D                     	;# 
  2716  019D                     	;# 
  2717  019E                     	;# 
  2718  019E                     	;# 
  2719  019E                     	;# 
  2720  019F                     	;# 
  2721  019F                     	;# 
  2722  019F                     	;# 
  2723  019F                     	;# 
  2724  019F                     	;# 
  2725  020C                     	;# 
  2726  020D                     	;# 
  2727  020E                     	;# 
  2728  0211                     	;# 
  2729  0211                     	;# 
  2730  0212                     	;# 
  2731  0212                     	;# 
  2732  0213                     	;# 
  2733  0213                     	;# 
  2734  0214                     	;# 
  2735  0214                     	;# 
  2736  0215                     	;# 
  2737  0215                     	;# 
  2738  0215                     	;# 
  2739  0215                     	;# 
  2740  0216                     	;# 
  2741  0216                     	;# 
  2742  0217                     	;# 
  2743  0217                     	;# 
  2744  0219                     	;# 
  2745  021A                     	;# 
  2746  021B                     	;# 
  2747  021C                     	;# 
  2748  021D                     	;# 
  2749  021D                     	;# 
  2750  021E                     	;# 
  2751  021F                     	;# 
  2752  028C                     	;# 
  2753  028D                     	;# 
  2754  028E                     	;# 
  2755  0291                     	;# 
  2756  0291                     	;# 
  2757  0292                     	;# 
  2758  0293                     	;# 
  2759  0294                     	;# 
  2760  0295                     	;# 
  2761  0295                     	;# 
  2762  0296                     	;# 
  2763  0297                     	;# 
  2764  0298                     	;# 
  2765  029F                     	;# 
  2766  030C                     	;# 
  2767  030D                     	;# 
  2768  030E                     	;# 
  2769  0311                     	;# 
  2770  0311                     	;# 
  2771  0312                     	;# 
  2772  0313                     	;# 
  2773  0314                     	;# 
  2774  0315                     	;# 
  2775  0315                     	;# 
  2776  0316                     	;# 
  2777  0317                     	;# 
  2778  0318                     	;# 
  2779  038C                     	;# 
  2780  038D                     	;# 
  2781  038E                     	;# 
  2782  0391                     	;# 
  2783  0392                     	;# 
  2784  0393                     	;# 
  2785  0394                     	;# 
  2786  0395                     	;# 
  2787  0396                     	;# 
  2788  0397                     	;# 
  2789  0398                     	;# 
  2790  0399                     	;# 
  2791  039A                     	;# 
  2792  039C                     	;# 
  2793  039D                     	;# 
  2794  039E                     	;# 
  2795  039F                     	;# 
  2796  0411                     	;# 
  2797  0411                     	;# 
  2798  0412                     	;# 
  2799  0413                     	;# 
  2800  0414                     	;# 
  2801  0415                     	;# 
  2802  0416                     	;# 
  2803  0417                     	;# 
  2804  0418                     	;# 
  2805  0418                     	;# 
  2806  0419                     	;# 
  2807  041A                     	;# 
  2808  041B                     	;# 
  2809  041C                     	;# 
  2810  041D                     	;# 
  2811  041E                     	;# 
  2812  041F                     	;# 
  2813  0498                     	;# 
  2814  0498                     	;# 
  2815  0499                     	;# 
  2816  049A                     	;# 
  2817  049B                     	;# 
  2818  049B                     	;# 
  2819  049C                     	;# 
  2820  049D                     	;# 
  2821  049E                     	;# 
  2822  049F                     	;# 
  2823  0617                     	;# 
  2824  0618                     	;# 
  2825  0619                     	;# 
  2826  0619                     	;# 
  2827  061A                     	;# 
  2828  061B                     	;# 
  2829  061C                     	;# 
  2830  061C                     	;# 
  2831  061F                     	;# 
  2832  0691                     	;# 
  2833  0692                     	;# 
  2834  0693                     	;# 
  2835  0694                     	;# 
  2836  0695                     	;# 
  2837  0696                     	;# 
  2838  0697                     	;# 
  2839  0698                     	;# 
  2840  0699                     	;# 
  2841  0711                     	;# 
  2842  0712                     	;# 
  2843  0713                     	;# 
  2844  0714                     	;# 
  2845  0715                     	;# 
  2846  0716                     	;# 
  2847  0717                     	;# 
  2848  0718                     	;# 
  2849  0719                     	;# 
  2850  0891                     	;# 
  2851  0891                     	;# 
  2852  0891                     	;# 
  2853  0891                     	;# 
  2854  0891                     	;# 
  2855  0891                     	;# 
  2856  0892                     	;# 
  2857  0892                     	;# 
  2858  0892                     	;# 
  2859  0893                     	;# 
  2860  0893                     	;# 
  2861  0893                     	;# 
  2862  0893                     	;# 
  2863  0893                     	;# 
  2864  0893                     	;# 
  2865  0894                     	;# 
  2866  0894                     	;# 
  2867  0894                     	;# 
  2868  0895                     	;# 
  2869  0895                     	;# 
  2870  0895                     	;# 
  2871  0896                     	;# 
  2872  0896                     	;# 
  2873  0896                     	;# 
  2874  089B                     	;# 
  2875  0911                     	;# 
  2876  0912                     	;# 
  2877  0913                     	;# 
  2878  0914                     	;# 
  2879  0915                     	;# 
  2880  0916                     	;# 
  2881  0918                     	;# 
  2882  0919                     	;# 
  2883  091A                     	;# 
  2884  091B                     	;# 
  2885  091C                     	;# 
  2886  091D                     	;# 
  2887  091E                     	;# 
  2888  091F                     	;# 
  2889  0E0F                     	;# 
  2890  0E10                     	;# 
  2891  0E11                     	;# 
  2892  0E12                     	;# 
  2893  0E13                     	;# 
  2894  0E14                     	;# 
  2895  0E15                     	;# 
  2896  0E16                     	;# 
  2897  0E17                     	;# 
  2898  0E18                     	;# 
  2899  0E19                     	;# 
  2900  0E1A                     	;# 
  2901  0E1B                     	;# 
  2902  0E1C                     	;# 
  2903  0E1D                     	;# 
  2904  0E1E                     	;# 
  2905  0E1F                     	;# 
  2906  0E20                     	;# 
  2907  0E21                     	;# 
  2908  0E22                     	;# 
  2909  0E24                     	;# 
  2910  0E25                     	;# 
  2911  0E28                     	;# 
  2912  0E29                     	;# 
  2913  0E2A                     	;# 
  2914  0E2B                     	;# 
  2915  0E2C                     	;# 
  2916  0E2D                     	;# 
  2917  0E2E                     	;# 
  2918  0E2F                     	;# 
  2919  0E90                     	;# 
  2920  0E91                     	;# 
  2921  0E92                     	;# 
  2922  0E94                     	;# 
  2923  0E95                     	;# 
  2924  0E9C                     	;# 
  2925  0E9D                     	;# 
  2926  0E9E                     	;# 
  2927  0E9F                     	;# 
  2928  0EA0                     	;# 
  2929  0EA1                     	;# 
  2930  0EA2                     	;# 
  2931  0EA3                     	;# 
  2932  0EA4                     	;# 
  2933  0EA5                     	;# 
  2934  0EA6                     	;# 
  2935  0EA7                     	;# 
  2936  0F0F                     	;# 
  2937  0F10                     	;# 
  2938  0F11                     	;# 
  2939  0F12                     	;# 
  2940  0F13                     	;# 
  2941  0F14                     	;# 
  2942  0F15                     	;# 
  2943  0F16                     	;# 
  2944  0F17                     	;# 
  2945  0F18                     	;# 
  2946  0F19                     	;# 
  2947  0F1A                     	;# 
  2948  0F1B                     	;# 
  2949  0F1C                     	;# 
  2950  0F1D                     	;# 
  2951  0F1E                     	;# 
  2952  0F1F                     	;# 
  2953  0F20                     	;# 
  2954  0F21                     	;# 
  2955  0F22                     	;# 
  2956  0F23                     	;# 
  2957  0F24                     	;# 
  2958  0F25                     	;# 
  2959  0F26                     	;# 
  2960  0F27                     	;# 
  2961  0F28                     	;# 
  2962  0F29                     	;# 
  2963  0F2A                     	;# 
  2964  0F2B                     	;# 
  2965  0F2C                     	;# 
  2966  0F2D                     	;# 
  2967  0F2E                     	;# 
  2968  0F2F                     	;# 
  2969  0F30                     	;# 
  2970  0F31                     	;# 
  2971  0F32                     	;# 
  2972  0F33                     	;# 
  2973  0F34                     	;# 
  2974  0F35                     	;# 
  2975  0F36                     	;# 
  2976  0F37                     	;# 
  2977  0FE4                     	;# 
  2978  0FE5                     	;# 
  2979  0FE6                     	;# 
  2980  0FE7                     	;# 
  2981  0FE8                     	;# 
  2982  0FE9                     	;# 
  2983  0FEA                     	;# 
  2984  0FEB                     	;# 
  2985  0FED                     	;# 
  2986  0FEE                     	;# 
  2987  0FEF                     	;# 
  2988  0000                     	;# 
  2989  0001                     	;# 
  2990  0002                     	;# 
  2991  0003                     	;# 
  2992  0004                     	;# 
  2993  0005                     	;# 
  2994  0006                     	;# 
  2995  0007                     	;# 
  2996  0008                     	;# 
  2997  0009                     	;# 
  2998  000A                     	;# 
  2999  000B                     	;# 
  3000  000C                     	;# 
  3001  000D                     	;# 
  3002  000E                     	;# 
  3003  0010                     	;# 
  3004  0011                     	;# 
  3005  0012                     	;# 
  3006  0013                     	;# 
  3007  0014                     	;# 
  3008  0015                     	;# 
  3009  0015                     	;# 
  3010  0016                     	;# 
  3011  0016                     	;# 
  3012  0017                     	;# 
  3013  0018                     	;# 
  3014  0019                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  001D                     	;# 
  3020  001E                     	;# 
  3021  001F                     	;# 
  3022  008C                     	;# 
  3023  008D                     	;# 
  3024  008E                     	;# 
  3025  0090                     	;# 
  3026  0091                     	;# 
  3027  0092                     	;# 
  3028  0093                     	;# 
  3029  0094                     	;# 
  3030  0097                     	;# 
  3031  009B                     	;# 
  3032  009B                     	;# 
  3033  009C                     	;# 
  3034  009D                     	;# 
  3035  009E                     	;# 
  3036  009F                     	;# 
  3037  010C                     	;# 
  3038  010D                     	;# 
  3039  010E                     	;# 
  3040  0111                     	;# 
  3041  0112                     	;# 
  3042  0113                     	;# 
  3043  0114                     	;# 
  3044  0115                     	;# 
  3045  0116                     	;# 
  3046  0117                     	;# 
  3047  0118                     	;# 
  3048  0119                     	;# 
  3049  018C                     	;# 
  3050  018D                     	;# 
  3051  018E                     	;# 
  3052  0197                     	;# 
  3053  0199                     	;# 
  3054  0199                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019A                     	;# 
  3058  019A                     	;# 
  3059  019B                     	;# 
  3060  019B                     	;# 
  3061  019B                     	;# 
  3062  019B                     	;# 
  3063  019B                     	;# 
  3064  019C                     	;# 
  3065  019C                     	;# 
  3066  019C                     	;# 
  3067  019D                     	;# 
  3068  019D                     	;# 
  3069  019D                     	;# 
  3070  019E                     	;# 
  3071  019E                     	;# 
  3072  019E                     	;# 
  3073  019F                     	;# 
  3074  019F                     	;# 
  3075  019F                     	;# 
  3076  019F                     	;# 
  3077  019F                     	;# 
  3078  020C                     	;# 
  3079  020D                     	;# 
  3080  020E                     	;# 
  3081  0211                     	;# 
  3082  0211                     	;# 
  3083  0212                     	;# 
  3084  0212                     	;# 
  3085  0213                     	;# 
  3086  0213                     	;# 
  3087  0214                     	;# 
  3088  0214                     	;# 
  3089  0215                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0215                     	;# 
  3093  0216                     	;# 
  3094  0216                     	;# 
  3095  0217                     	;# 
  3096  0217                     	;# 
  3097  0219                     	;# 
  3098  021A                     	;# 
  3099  021B                     	;# 
  3100  021C                     	;# 
  3101  021D                     	;# 
  3102  021D                     	;# 
  3103  021E                     	;# 
  3104  021F                     	;# 
  3105  028C                     	;# 
  3106  028D                     	;# 
  3107  028E                     	;# 
  3108  0291                     	;# 
  3109  0291                     	;# 
  3110  0292                     	;# 
  3111  0293                     	;# 
  3112  0294                     	;# 
  3113  0295                     	;# 
  3114  0295                     	;# 
  3115  0296                     	;# 
  3116  0297                     	;# 
  3117  0298                     	;# 
  3118  029F                     	;# 
  3119  030C                     	;# 
  3120  030D                     	;# 
  3121  030E                     	;# 
  3122  0311                     	;# 
  3123  0311                     	;# 
  3124  0312                     	;# 
  3125  0313                     	;# 
  3126  0314                     	;# 
  3127  0315                     	;# 
  3128  0315                     	;# 
  3129  0316                     	;# 
  3130  0317                     	;# 
  3131  0318                     	;# 
  3132  038C                     	;# 
  3133  038D                     	;# 
  3134  038E                     	;# 
  3135  0391                     	;# 
  3136  0392                     	;# 
  3137  0393                     	;# 
  3138  0394                     	;# 
  3139  0395                     	;# 
  3140  0396                     	;# 
  3141  0397                     	;# 
  3142  0398                     	;# 
  3143  0399                     	;# 
  3144  039A                     	;# 
  3145  039C                     	;# 
  3146  039D                     	;# 
  3147  039E                     	;# 
  3148  039F                     	;# 
  3149  0411                     	;# 
  3150  0411                     	;# 
  3151  0412                     	;# 
  3152  0413                     	;# 
  3153  0414                     	;# 
  3154  0415                     	;# 
  3155  0416                     	;# 
  3156  0417                     	;# 
  3157  0418                     	;# 
  3158  0418                     	;# 
  3159  0419                     	;# 
  3160  041A                     	;# 
  3161  041B                     	;# 
  3162  041C                     	;# 
  3163  041D                     	;# 
  3164  041E                     	;# 
  3165  041F                     	;# 
  3166  0498                     	;# 
  3167  0498                     	;# 
  3168  0499                     	;# 
  3169  049A                     	;# 
  3170  049B                     	;# 
  3171  049B                     	;# 
  3172  049C                     	;# 
  3173  049D                     	;# 
  3174  049E                     	;# 
  3175  049F                     	;# 
  3176  0617                     	;# 
  3177  0618                     	;# 
  3178  0619                     	;# 
  3179  0619                     	;# 
  3180  061A                     	;# 
  3181  061B                     	;# 
  3182  061C                     	;# 
  3183  061C                     	;# 
  3184  061F                     	;# 
  3185  0691                     	;# 
  3186  0692                     	;# 
  3187  0693                     	;# 
  3188  0694                     	;# 
  3189  0695                     	;# 
  3190  0696                     	;# 
  3191  0697                     	;# 
  3192  0698                     	;# 
  3193  0699                     	;# 
  3194  0711                     	;# 
  3195  0712                     	;# 
  3196  0713                     	;# 
  3197  0714                     	;# 
  3198  0715                     	;# 
  3199  0716                     	;# 
  3200  0717                     	;# 
  3201  0718                     	;# 
  3202  0719                     	;# 
  3203  0891                     	;# 
  3204  0891                     	;# 
  3205  0891                     	;# 
  3206  0891                     	;# 
  3207  0891                     	;# 
  3208  0891                     	;# 
  3209  0892                     	;# 
  3210  0892                     	;# 
  3211  0892                     	;# 
  3212  0893                     	;# 
  3213  0893                     	;# 
  3214  0893                     	;# 
  3215  0893                     	;# 
  3216  0893                     	;# 
  3217  0893                     	;# 
  3218  0894                     	;# 
  3219  0894                     	;# 
  3220  0894                     	;# 
  3221  0895                     	;# 
  3222  0895                     	;# 
  3223  0895                     	;# 
  3224  0896                     	;# 
  3225  0896                     	;# 
  3226  0896                     	;# 
  3227  089B                     	;# 
  3228  0911                     	;# 
  3229  0912                     	;# 
  3230  0913                     	;# 
  3231  0914                     	;# 
  3232  0915                     	;# 
  3233  0916                     	;# 
  3234  0918                     	;# 
  3235  0919                     	;# 
  3236  091A                     	;# 
  3237  091B                     	;# 
  3238  091C                     	;# 
  3239  091D                     	;# 
  3240  091E                     	;# 
  3241  091F                     	;# 
  3242  0E0F                     	;# 
  3243  0E10                     	;# 
  3244  0E11                     	;# 
  3245  0E12                     	;# 
  3246  0E13                     	;# 
  3247  0E14                     	;# 
  3248  0E15                     	;# 
  3249  0E16                     	;# 
  3250  0E17                     	;# 
  3251  0E18                     	;# 
  3252  0E19                     	;# 
  3253  0E1A                     	;# 
  3254  0E1B                     	;# 
  3255  0E1C                     	;# 
  3256  0E1D                     	;# 
  3257  0E1E                     	;# 
  3258  0E1F                     	;# 
  3259  0E20                     	;# 
  3260  0E21                     	;# 
  3261  0E22                     	;# 
  3262  0E24                     	;# 
  3263  0E25                     	;# 
  3264  0E28                     	;# 
  3265  0E29                     	;# 
  3266  0E2A                     	;# 
  3267  0E2B                     	;# 
  3268  0E2C                     	;# 
  3269  0E2D                     	;# 
  3270  0E2E                     	;# 
  3271  0E2F                     	;# 
  3272  0E90                     	;# 
  3273  0E91                     	;# 
  3274  0E92                     	;# 
  3275  0E94                     	;# 
  3276  0E95                     	;# 
  3277  0E9C                     	;# 
  3278  0E9D                     	;# 
  3279  0E9E                     	;# 
  3280  0E9F                     	;# 
  3281  0EA0                     	;# 
  3282  0EA1                     	;# 
  3283  0EA2                     	;# 
  3284  0EA3                     	;# 
  3285  0EA4                     	;# 
  3286  0EA5                     	;# 
  3287  0EA6                     	;# 
  3288  0EA7                     	;# 
  3289  0F0F                     	;# 
  3290  0F10                     	;# 
  3291  0F11                     	;# 
  3292  0F12                     	;# 
  3293  0F13                     	;# 
  3294  0F14                     	;# 
  3295  0F15                     	;# 
  3296  0F16                     	;# 
  3297  0F17                     	;# 
  3298  0F18                     	;# 
  3299  0F19                     	;# 
  3300  0F1A                     	;# 
  3301  0F1B                     	;# 
  3302  0F1C                     	;# 
  3303  0F1D                     	;# 
  3304  0F1E                     	;# 
  3305  0F1F                     	;# 
  3306  0F20                     	;# 
  3307  0F21                     	;# 
  3308  0F22                     	;# 
  3309  0F23                     	;# 
  3310  0F24                     	;# 
  3311  0F25                     	;# 
  3312  0F26                     	;# 
  3313  0F27                     	;# 
  3314  0F28                     	;# 
  3315  0F29                     	;# 
  3316  0F2A                     	;# 
  3317  0F2B                     	;# 
  3318  0F2C                     	;# 
  3319  0F2D                     	;# 
  3320  0F2E                     	;# 
  3321  0F2F                     	;# 
  3322  0F30                     	;# 
  3323  0F31                     	;# 
  3324  0F32                     	;# 
  3325  0F33                     	;# 
  3326  0F34                     	;# 
  3327  0F35                     	;# 
  3328  0F36                     	;# 
  3329  0F37                     	;# 
  3330  0FE4                     	;# 
  3331  0FE5                     	;# 
  3332  0FE6                     	;# 
  3333  0FE7                     	;# 
  3334  0FE8                     	;# 
  3335  0FE9                     	;# 
  3336  0FEA                     	;# 
  3337  0FEB                     	;# 
  3338  0FED                     	;# 
  3339  0FEE                     	;# 
  3340  0FEF                     	;# 
  3341  0000                     	;# 
  3342  0001                     	;# 
  3343  0002                     	;# 
  3344  0003                     	;# 
  3345  0004                     	;# 
  3346  0005                     	;# 
  3347  0006                     	;# 
  3348  0007                     	;# 
  3349  0008                     	;# 
  3350  0009                     	;# 
  3351  000A                     	;# 
  3352  000B                     	;# 
  3353  000C                     	;# 
  3354  000D                     	;# 
  3355  000E                     	;# 
  3356  0010                     	;# 
  3357  0011                     	;# 
  3358  0012                     	;# 
  3359  0013                     	;# 
  3360  0014                     	;# 
  3361  0015                     	;# 
  3362  0015                     	;# 
  3363  0016                     	;# 
  3364  0016                     	;# 
  3365  0017                     	;# 
  3366  0018                     	;# 
  3367  0019                     	;# 
  3368  0019                     	;# 
  3369  001A                     	;# 
  3370  001B                     	;# 
  3371  001C                     	;# 
  3372  001D                     	;# 
  3373  001E                     	;# 
  3374  001F                     	;# 
  3375  008C                     	;# 
  3376  008D                     	;# 
  3377  008E                     	;# 
  3378  0090                     	;# 
  3379  0091                     	;# 
  3380  0092                     	;# 
  3381  0093                     	;# 
  3382  0094                     	;# 
  3383  0097                     	;# 
  3384  009B                     	;# 
  3385  009B                     	;# 
  3386  009C                     	;# 
  3387  009D                     	;# 
  3388  009E                     	;# 
  3389  009F                     	;# 
  3390  010C                     	;# 
  3391  010D                     	;# 
  3392  010E                     	;# 
  3393  0111                     	;# 
  3394  0112                     	;# 
  3395  0113                     	;# 
  3396  0114                     	;# 
  3397  0115                     	;# 
  3398  0116                     	;# 
  3399  0117                     	;# 
  3400  0118                     	;# 
  3401  0119                     	;# 
  3402  018C                     	;# 
  3403  018D                     	;# 
  3404  018E                     	;# 
  3405  0197                     	;# 
  3406  0199                     	;# 
  3407  0199                     	;# 
  3408  0199                     	;# 
  3409  019A                     	;# 
  3410  019A                     	;# 
  3411  019A                     	;# 
  3412  019B                     	;# 
  3413  019B                     	;# 
  3414  019B                     	;# 
  3415  019B                     	;# 
  3416  019B                     	;# 
  3417  019C                     	;# 
  3418  019C                     	;# 
  3419  019C                     	;# 
  3420  019D                     	;# 
  3421  019D                     	;# 
  3422  019D                     	;# 
  3423  019E                     	;# 
  3424  019E                     	;# 
  3425  019E                     	;# 
  3426  019F                     	;# 
  3427  019F                     	;# 
  3428  019F                     	;# 
  3429  019F                     	;# 
  3430  019F                     	;# 
  3431  020C                     	;# 
  3432  020D                     	;# 
  3433  020E                     	;# 
  3434  0211                     	;# 
  3435  0211                     	;# 
  3436  0212                     	;# 
  3437  0212                     	;# 
  3438  0213                     	;# 
  3439  0213                     	;# 
  3440  0214                     	;# 
  3441  0214                     	;# 
  3442  0215                     	;# 
  3443  0215                     	;# 
  3444  0215                     	;# 
  3445  0215                     	;# 
  3446  0216                     	;# 
  3447  0216                     	;# 
  3448  0217                     	;# 
  3449  0217                     	;# 
  3450  0219                     	;# 
  3451  021A                     	;# 
  3452  021B                     	;# 
  3453  021C                     	;# 
  3454  021D                     	;# 
  3455  021D                     	;# 
  3456  021E                     	;# 
  3457  021F                     	;# 
  3458  028C                     	;# 
  3459  028D                     	;# 
  3460  028E                     	;# 
  3461  0291                     	;# 
  3462  0291                     	;# 
  3463  0292                     	;# 
  3464  0293                     	;# 
  3465  0294                     	;# 
  3466  0295                     	;# 
  3467  0295                     	;# 
  3468  0296                     	;# 
  3469  0297                     	;# 
  3470  0298                     	;# 
  3471  029F                     	;# 
  3472  030C                     	;# 
  3473  030D                     	;# 
  3474  030E                     	;# 
  3475  0311                     	;# 
  3476  0311                     	;# 
  3477  0312                     	;# 
  3478  0313                     	;# 
  3479  0314                     	;# 
  3480  0315                     	;# 
  3481  0315                     	;# 
  3482  0316                     	;# 
  3483  0317                     	;# 
  3484  0318                     	;# 
  3485  038C                     	;# 
  3486  038D                     	;# 
  3487  038E                     	;# 
  3488  0391                     	;# 
  3489  0392                     	;# 
  3490  0393                     	;# 
  3491  0394                     	;# 
  3492  0395                     	;# 
  3493  0396                     	;# 
  3494  0397                     	;# 
  3495  0398                     	;# 
  3496  0399                     	;# 
  3497  039A                     	;# 
  3498  039C                     	;# 
  3499  039D                     	;# 
  3500  039E                     	;# 
  3501  039F                     	;# 
  3502  0411                     	;# 
  3503  0411                     	;# 
  3504  0412                     	;# 
  3505  0413                     	;# 
  3506  0414                     	;# 
  3507  0415                     	;# 
  3508  0416                     	;# 
  3509  0417                     	;# 
  3510  0418                     	;# 
  3511  0418                     	;# 
  3512  0419                     	;# 
  3513  041A                     	;# 
  3514  041B                     	;# 
  3515  041C                     	;# 
  3516  041D                     	;# 
  3517  041E                     	;# 
  3518  041F                     	;# 
  3519  0498                     	;# 
  3520  0498                     	;# 
  3521  0499                     	;# 
  3522  049A                     	;# 
  3523  049B                     	;# 
  3524  049B                     	;# 
  3525  049C                     	;# 
  3526  049D                     	;# 
  3527  049E                     	;# 
  3528  049F                     	;# 
  3529  0617                     	;# 
  3530  0618                     	;# 
  3531  0619                     	;# 
  3532  0619                     	;# 
  3533  061A                     	;# 
  3534  061B                     	;# 
  3535  061C                     	;# 
  3536  061C                     	;# 
  3537  061F                     	;# 
  3538  0691                     	;# 
  3539  0692                     	;# 
  3540  0693                     	;# 
  3541  0694                     	;# 
  3542  0695                     	;# 
  3543  0696                     	;# 
  3544  0697                     	;# 
  3545  0698                     	;# 
  3546  0699                     	;# 
  3547  0711                     	;# 
  3548  0712                     	;# 
  3549  0713                     	;# 
  3550  0714                     	;# 
  3551  0715                     	;# 
  3552  0716                     	;# 
  3553  0717                     	;# 
  3554  0718                     	;# 
  3555  0719                     	;# 
  3556  0891                     	;# 
  3557  0891                     	;# 
  3558  0891                     	;# 
  3559  0891                     	;# 
  3560  0891                     	;# 
  3561  0891                     	;# 
  3562  0892                     	;# 
  3563  0892                     	;# 
  3564  0892                     	;# 
  3565  0893                     	;# 
  3566  0893                     	;# 
  3567  0893                     	;# 
  3568  0893                     	;# 
  3569  0893                     	;# 
  3570  0893                     	;# 
  3571  0894                     	;# 
  3572  0894                     	;# 
  3573  0894                     	;# 
  3574  0895                     	;# 
  3575  0895                     	;# 
  3576  0895                     	;# 
  3577  0896                     	;# 
  3578  0896                     	;# 
  3579  0896                     	;# 
  3580  089B                     	;# 
  3581  0911                     	;# 
  3582  0912                     	;# 
  3583  0913                     	;# 
  3584  0914                     	;# 
  3585  0915                     	;# 
  3586  0916                     	;# 
  3587  0918                     	;# 
  3588  0919                     	;# 
  3589  091A                     	;# 
  3590  091B                     	;# 
  3591  091C                     	;# 
  3592  091D                     	;# 
  3593  091E                     	;# 
  3594  091F                     	;# 
  3595  0E0F                     	;# 
  3596  0E10                     	;# 
  3597  0E11                     	;# 
  3598  0E12                     	;# 
  3599  0E13                     	;# 
  3600  0E14                     	;# 
  3601  0E15                     	;# 
  3602  0E16                     	;# 
  3603  0E17                     	;# 
  3604  0E18                     	;# 
  3605  0E19                     	;# 
  3606  0E1A                     	;# 
  3607  0E1B                     	;# 
  3608  0E1C                     	;# 
  3609  0E1D                     	;# 
  3610  0E1E                     	;# 
  3611  0E1F                     	;# 
  3612  0E20                     	;# 
  3613  0E21                     	;# 
  3614  0E22                     	;# 
  3615  0E24                     	;# 
  3616  0E25                     	;# 
  3617  0E28                     	;# 
  3618  0E29                     	;# 
  3619  0E2A                     	;# 
  3620  0E2B                     	;# 
  3621  0E2C                     	;# 
  3622  0E2D                     	;# 
  3623  0E2E                     	;# 
  3624  0E2F                     	;# 
  3625  0E90                     	;# 
  3626  0E91                     	;# 
  3627  0E92                     	;# 
  3628  0E94                     	;# 
  3629  0E95                     	;# 
  3630  0E9C                     	;# 
  3631  0E9D                     	;# 
  3632  0E9E                     	;# 
  3633  0E9F                     	;# 
  3634  0EA0                     	;# 
  3635  0EA1                     	;# 
  3636  0EA2                     	;# 
  3637  0EA3                     	;# 
  3638  0EA4                     	;# 
  3639  0EA5                     	;# 
  3640  0EA6                     	;# 
  3641  0EA7                     	;# 
  3642  0F0F                     	;# 
  3643  0F10                     	;# 
  3644  0F11                     	;# 
  3645  0F12                     	;# 
  3646  0F13                     	;# 
  3647  0F14                     	;# 
  3648  0F15                     	;# 
  3649  0F16                     	;# 
  3650  0F17                     	;# 
  3651  0F18                     	;# 
  3652  0F19                     	;# 
  3653  0F1A                     	;# 
  3654  0F1B                     	;# 
  3655  0F1C                     	;# 
  3656  0F1D                     	;# 
  3657  0F1E                     	;# 
  3658  0F1F                     	;# 
  3659  0F20                     	;# 
  3660  0F21                     	;# 
  3661  0F22                     	;# 
  3662  0F23                     	;# 
  3663  0F24                     	;# 
  3664  0F25                     	;# 
  3665  0F26                     	;# 
  3666  0F27                     	;# 
  3667  0F28                     	;# 
  3668  0F29                     	;# 
  3669  0F2A                     	;# 
  3670  0F2B                     	;# 
  3671  0F2C                     	;# 
  3672  0F2D                     	;# 
  3673  0F2E                     	;# 
  3674  0F2F                     	;# 
  3675  0F30                     	;# 
  3676  0F31                     	;# 
  3677  0F32                     	;# 
  3678  0F33                     	;# 
  3679  0F34                     	;# 
  3680  0F35                     	;# 
  3681  0F36                     	;# 
  3682  0F37                     	;# 
  3683  0FE4                     	;# 
  3684  0FE5                     	;# 
  3685  0FE6                     	;# 
  3686  0FE7                     	;# 
  3687  0FE8                     	;# 
  3688  0FE9                     	;# 
  3689  0FEA                     	;# 
  3690  0FEB                     	;# 
  3691  0FED                     	;# 
  3692  0FEE                     	;# 
  3693  0FEF                     	;# 
  3694  0000                     	;# 
  3695  0001                     	;# 
  3696  0002                     	;# 
  3697  0003                     	;# 
  3698  0004                     	;# 
  3699  0005                     	;# 
  3700  0006                     	;# 
  3701  0007                     	;# 
  3702  0008                     	;# 
  3703  0009                     	;# 
  3704  000A                     	;# 
  3705  000B                     	;# 
  3706  000C                     	;# 
  3707  000D                     	;# 
  3708  000E                     	;# 
  3709  0010                     	;# 
  3710  0011                     	;# 
  3711  0012                     	;# 
  3712  0013                     	;# 
  3713  0014                     	;# 
  3714  0015                     	;# 
  3715  0015                     	;# 
  3716  0016                     	;# 
  3717  0016                     	;# 
  3718  0017                     	;# 
  3719  0018                     	;# 
  3720  0019                     	;# 
  3721  0019                     	;# 
  3722  001A                     	;# 
  3723  001B                     	;# 
  3724  001C                     	;# 
  3725  001D                     	;# 
  3726  001E                     	;# 
  3727  001F                     	;# 
  3728  008C                     	;# 
  3729  008D                     	;# 
  3730  008E                     	;# 
  3731  0090                     	;# 
  3732  0091                     	;# 
  3733  0092                     	;# 
  3734  0093                     	;# 
  3735  0094                     	;# 
  3736  0097                     	;# 
  3737  009B                     	;# 
  3738  009B                     	;# 
  3739  009C                     	;# 
  3740  009D                     	;# 
  3741  009E                     	;# 
  3742  009F                     	;# 
  3743  010C                     	;# 
  3744  010D                     	;# 
  3745  010E                     	;# 
  3746  0111                     	;# 
  3747  0112                     	;# 
  3748  0113                     	;# 
  3749  0114                     	;# 
  3750  0115                     	;# 
  3751  0116                     	;# 
  3752  0117                     	;# 
  3753  0118                     	;# 
  3754  0119                     	;# 
  3755  018C                     	;# 
  3756  018D                     	;# 
  3757  018E                     	;# 
  3758  0197                     	;# 
  3759  0199                     	;# 
  3760  0199                     	;# 
  3761  0199                     	;# 
  3762  019A                     	;# 
  3763  019A                     	;# 
  3764  019A                     	;# 
  3765  019B                     	;# 
  3766  019B                     	;# 
  3767  019B                     	;# 
  3768  019B                     	;# 
  3769  019B                     	;# 
  3770  019C                     	;# 
  3771  019C                     	;# 
  3772  019C                     	;# 
  3773  019D                     	;# 
  3774  019D                     	;# 
  3775  019D                     	;# 
  3776  019E                     	;# 
  3777  019E                     	;# 
  3778  019E                     	;# 
  3779  019F                     	;# 
  3780  019F                     	;# 
  3781  019F                     	;# 
  3782  019F                     	;# 
  3783  019F                     	;# 
  3784  020C                     	;# 
  3785  020D                     	;# 
  3786  020E                     	;# 
  3787  0211                     	;# 
  3788  0211                     	;# 
  3789  0212                     	;# 
  3790  0212                     	;# 
  3791  0213                     	;# 
  3792  0213                     	;# 
  3793  0214                     	;# 
  3794  0214                     	;# 
  3795  0215                     	;# 
  3796  0215                     	;# 
  3797  0215                     	;# 
  3798  0215                     	;# 
  3799  0216                     	;# 
  3800  0216                     	;# 
  3801  0217                     	;# 
  3802  0217                     	;# 
  3803  0219                     	;# 
  3804  021A                     	;# 
  3805  021B                     	;# 
  3806  021C                     	;# 
  3807  021D                     	;# 
  3808  021D                     	;# 
  3809  021E                     	;# 
  3810  021F                     	;# 
  3811  028C                     	;# 
  3812  028D                     	;# 
  3813  028E                     	;# 
  3814  0291                     	;# 
  3815  0291                     	;# 
  3816  0292                     	;# 
  3817  0293                     	;# 
  3818  0294                     	;# 
  3819  0295                     	;# 
  3820  0295                     	;# 
  3821  0296                     	;# 
  3822  0297                     	;# 
  3823  0298                     	;# 
  3824  029F                     	;# 
  3825  030C                     	;# 
  3826  030D                     	;# 
  3827  030E                     	;# 
  3828  0311                     	;# 
  3829  0311                     	;# 
  3830  0312                     	;# 
  3831  0313                     	;# 
  3832  0314                     	;# 
  3833  0315                     	;# 
  3834  0315                     	;# 
  3835  0316                     	;# 
  3836  0317                     	;# 
  3837  0318                     	;# 
  3838  038C                     	;# 
  3839  038D                     	;# 
  3840  038E                     	;# 
  3841  0391                     	;# 
  3842  0392                     	;# 
  3843  0393                     	;# 
  3844  0394                     	;# 
  3845  0395                     	;# 
  3846  0396                     	;# 
  3847  0397                     	;# 
  3848  0398                     	;# 
  3849  0399                     	;# 
  3850  039A                     	;# 
  3851  039C                     	;# 
  3852  039D                     	;# 
  3853  039E                     	;# 
  3854  039F                     	;# 
  3855  0411                     	;# 
  3856  0411                     	;# 
  3857  0412                     	;# 
  3858  0413                     	;# 
  3859  0414                     	;# 
  3860  0415                     	;# 
  3861  0416                     	;# 
  3862  0417                     	;# 
  3863  0418                     	;# 
  3864  0418                     	;# 
  3865  0419                     	;# 
  3866  041A                     	;# 
  3867  041B                     	;# 
  3868  041C                     	;# 
  3869  041D                     	;# 
  3870  041E                     	;# 
  3871  041F                     	;# 
  3872  0498                     	;# 
  3873  0498                     	;# 
  3874  0499                     	;# 
  3875  049A                     	;# 
  3876  049B                     	;# 
  3877  049B                     	;# 
  3878  049C                     	;# 
  3879  049D                     	;# 
  3880  049E                     	;# 
  3881  049F                     	;# 
  3882  0617                     	;# 
  3883  0618                     	;# 
  3884  0619                     	;# 
  3885  0619                     	;# 
  3886  061A                     	;# 
  3887  061B                     	;# 
  3888  061C                     	;# 
  3889  061C                     	;# 
  3890  061F                     	;# 
  3891  0691                     	;# 
  3892  0692                     	;# 
  3893  0693                     	;# 
  3894  0694                     	;# 
  3895  0695                     	;# 
  3896  0696                     	;# 
  3897  0697                     	;# 
  3898  0698                     	;# 
  3899  0699                     	;# 
  3900  0711                     	;# 
  3901  0712                     	;# 
  3902  0713                     	;# 
  3903  0714                     	;# 
  3904  0715                     	;# 
  3905  0716                     	;# 
  3906  0717                     	;# 
  3907  0718                     	;# 
  3908  0719                     	;# 
  3909  0891                     	;# 
  3910  0891                     	;# 
  3911  0891                     	;# 
  3912  0891                     	;# 
  3913  0891                     	;# 
  3914  0891                     	;# 
  3915  0892                     	;# 
  3916  0892                     	;# 
  3917  0892                     	;# 
  3918  0893                     	;# 
  3919  0893                     	;# 
  3920  0893                     	;# 
  3921  0893                     	;# 
  3922  0893                     	;# 
  3923  0893                     	;# 
  3924  0894                     	;# 
  3925  0894                     	;# 
  3926  0894                     	;# 
  3927  0895                     	;# 
  3928  0895                     	;# 
  3929  0895                     	;# 
  3930  0896                     	;# 
  3931  0896                     	;# 
  3932  0896                     	;# 
  3933  089B                     	;# 
  3934  0911                     	;# 
  3935  0912                     	;# 
  3936  0913                     	;# 
  3937  0914                     	;# 
  3938  0915                     	;# 
  3939  0916                     	;# 
  3940  0918                     	;# 
  3941  0919                     	;# 
  3942  091A                     	;# 
  3943  091B                     	;# 
  3944  091C                     	;# 
  3945  091D                     	;# 
  3946  091E                     	;# 
  3947  091F                     	;# 
  3948  0E0F                     	;# 
  3949  0E10                     	;# 
  3950  0E11                     	;# 
  3951  0E12                     	;# 
  3952  0E13                     	;# 
  3953  0E14                     	;# 
  3954  0E15                     	;# 
  3955  0E16                     	;# 
  3956  0E17                     	;# 
  3957  0E18                     	;# 
  3958  0E19                     	;# 
  3959  0E1A                     	;# 
  3960  0E1B                     	;# 
  3961  0E1C                     	;# 
  3962  0E1D                     	;# 
  3963  0E1E                     	;# 
  3964  0E1F                     	;# 
  3965  0E20                     	;# 
  3966  0E21                     	;# 
  3967  0E22                     	;# 
  3968  0E24                     	;# 
  3969  0E25                     	;# 
  3970  0E28                     	;# 
  3971  0E29                     	;# 
  3972  0E2A                     	;# 
  3973  0E2B                     	;# 
  3974  0E2C                     	;# 
  3975  0E2D                     	;# 
  3976  0E2E                     	;# 
  3977  0E2F                     	;# 
  3978  0E90                     	;# 
  3979  0E91                     	;# 
  3980  0E92                     	;# 
  3981  0E94                     	;# 
  3982  0E95                     	;# 
  3983  0E9C                     	;# 
  3984  0E9D                     	;# 
  3985  0E9E                     	;# 
  3986  0E9F                     	;# 
  3987  0EA0                     	;# 
  3988  0EA1                     	;# 
  3989  0EA2                     	;# 
  3990  0EA3                     	;# 
  3991  0EA4                     	;# 
  3992  0EA5                     	;# 
  3993  0EA6                     	;# 
  3994  0EA7                     	;# 
  3995  0F0F                     	;# 
  3996  0F10                     	;# 
  3997  0F11                     	;# 
  3998  0F12                     	;# 
  3999  0F13                     	;# 
  4000  0F14                     	;# 
  4001  0F15                     	;# 
  4002  0F16                     	;# 
  4003  0F17                     	;# 
  4004  0F18                     	;# 
  4005  0F19                     	;# 
  4006  0F1A                     	;# 
  4007  0F1B                     	;# 
  4008  0F1C                     	;# 
  4009  0F1D                     	;# 
  4010  0F1E                     	;# 
  4011  0F1F                     	;# 
  4012  0F20                     	;# 
  4013  0F21                     	;# 
  4014  0F22                     	;# 
  4015  0F23                     	;# 
  4016  0F24                     	;# 
  4017  0F25                     	;# 
  4018  0F26                     	;# 
  4019  0F27                     	;# 
  4020  0F28                     	;# 
  4021  0F29                     	;# 
  4022  0F2A                     	;# 
  4023  0F2B                     	;# 
  4024  0F2C                     	;# 
  4025  0F2D                     	;# 
  4026  0F2E                     	;# 
  4027  0F2F                     	;# 
  4028  0F30                     	;# 
  4029  0F31                     	;# 
  4030  0F32                     	;# 
  4031  0F33                     	;# 
  4032  0F34                     	;# 
  4033  0F35                     	;# 
  4034  0F36                     	;# 
  4035  0F37                     	;# 
  4036  0FE4                     	;# 
  4037  0FE5                     	;# 
  4038  0FE6                     	;# 
  4039  0FE7                     	;# 
  4040  0FE8                     	;# 
  4041  0FE9                     	;# 
  4042  0FEA                     	;# 
  4043  0FEB                     	;# 
  4044  0FED                     	;# 
  4045  0FEE                     	;# 
  4046  0FEF                     	;# 
  4047  0000                     	;# 
  4048  0001                     	;# 
  4049  0002                     	;# 
  4050  0003                     	;# 
  4051  0004                     	;# 
  4052  0005                     	;# 
  4053  0006                     	;# 
  4054  0007                     	;# 
  4055  0008                     	;# 
  4056  0009                     	;# 
  4057  000A                     	;# 
  4058  000B                     	;# 
  4059  000C                     	;# 
  4060  000D                     	;# 
  4061  000E                     	;# 
  4062  0010                     	;# 
  4063  0011                     	;# 
  4064  0012                     	;# 
  4065  0013                     	;# 
  4066  0014                     	;# 
  4067  0015                     	;# 
  4068  0015                     	;# 
  4069  0016                     	;# 
  4070  0016                     	;# 
  4071  0017                     	;# 
  4072  0018                     	;# 
  4073  0019                     	;# 
  4074  0019                     	;# 
  4075  001A                     	;# 
  4076  001B                     	;# 
  4077  001C                     	;# 
  4078  001D                     	;# 
  4079  001E                     	;# 
  4080  001F                     	;# 
  4081  008C                     	;# 
  4082  008D                     	;# 
  4083  008E                     	;# 
  4084  0090                     	;# 
  4085  0091                     	;# 
  4086  0092                     	;# 
  4087  0093                     	;# 
  4088  0094                     	;# 
  4089  0097                     	;# 
  4090  009B                     	;# 
  4091  009B                     	;# 
  4092  009C                     	;# 
  4093  009D                     	;# 
  4094  009E                     	;# 
  4095  009F                     	;# 
  4096  010C                     	;# 
  4097  010D                     	;# 
  4098  010E                     	;# 
  4099  0111                     	;# 
  4100  0112                     	;# 
  4101  0113                     	;# 
  4102  0114                     	;# 
  4103  0115                     	;# 
  4104  0116                     	;# 
  4105  0117                     	;# 
  4106  0118                     	;# 
  4107  0119                     	;# 
  4108  018C                     	;# 
  4109  018D                     	;# 
  4110  018E                     	;# 
  4111  0197                     	;# 
  4112  0199                     	;# 
  4113  0199                     	;# 
  4114  0199                     	;# 
  4115  019A                     	;# 
  4116  019A                     	;# 
  4117  019A                     	;# 
  4118  019B                     	;# 
  4119  019B                     	;# 
  4120  019B                     	;# 
  4121  019B                     	;# 
  4122  019B                     	;# 
  4123  019C                     	;# 
  4124  019C                     	;# 
  4125  019C                     	;# 
  4126  019D                     	;# 
  4127  019D                     	;# 
  4128  019D                     	;# 
  4129  019E                     	;# 
  4130  019E                     	;# 
  4131  019E                     	;# 
  4132  019F                     	;# 
  4133  019F                     	;# 
  4134  019F                     	;# 
  4135  019F                     	;# 
  4136  019F                     	;# 
  4137  020C                     	;# 
  4138  020D                     	;# 
  4139  020E                     	;# 
  4140  0211                     	;# 
  4141  0211                     	;# 
  4142  0212                     	;# 
  4143  0212                     	;# 
  4144  0213                     	;# 
  4145  0213                     	;# 
  4146  0214                     	;# 
  4147  0214                     	;# 
  4148  0215                     	;# 
  4149  0215                     	;# 
  4150  0215                     	;# 
  4151  0215                     	;# 
  4152  0216                     	;# 
  4153  0216                     	;# 
  4154  0217                     	;# 
  4155  0217                     	;# 
  4156  0219                     	;# 
  4157  021A                     	;# 
  4158  021B                     	;# 
  4159  021C                     	;# 
  4160  021D                     	;# 
  4161  021D                     	;# 
  4162  021E                     	;# 
  4163  021F                     	;# 
  4164  028C                     	;# 
  4165  028D                     	;# 
  4166  028E                     	;# 
  4167  0291                     	;# 
  4168  0291                     	;# 
  4169  0292                     	;# 
  4170  0293                     	;# 
  4171  0294                     	;# 
  4172  0295                     	;# 
  4173  0295                     	;# 
  4174  0296                     	;# 
  4175  0297                     	;# 
  4176  0298                     	;# 
  4177  029F                     	;# 
  4178  030C                     	;# 
  4179  030D                     	;# 
  4180  030E                     	;# 
  4181  0311                     	;# 
  4182  0311                     	;# 
  4183  0312                     	;# 
  4184  0313                     	;# 
  4185  0314                     	;# 
  4186  0315                     	;# 
  4187  0315                     	;# 
  4188  0316                     	;# 
  4189  0317                     	;# 
  4190  0318                     	;# 
  4191  038C                     	;# 
  4192  038D                     	;# 
  4193  038E                     	;# 
  4194  0391                     	;# 
  4195  0392                     	;# 
  4196  0393                     	;# 
  4197  0394                     	;# 
  4198  0395                     	;# 
  4199  0396                     	;# 
  4200  0397                     	;# 
  4201  0398                     	;# 
  4202  0399                     	;# 
  4203  039A                     	;# 
  4204  039C                     	;# 
  4205  039D                     	;# 
  4206  039E                     	;# 
  4207  039F                     	;# 
  4208  0411                     	;# 
  4209  0411                     	;# 
  4210  0412                     	;# 
  4211  0413                     	;# 
  4212  0414                     	;# 
  4213  0415                     	;# 
  4214  0416                     	;# 
  4215  0417                     	;# 
  4216  0418                     	;# 
  4217  0418                     	;# 
  4218  0419                     	;# 
  4219  041A                     	;# 
  4220  041B                     	;# 
  4221  041C                     	;# 
  4222  041D                     	;# 
  4223  041E                     	;# 
  4224  041F                     	;# 
  4225  0498                     	;# 
  4226  0498                     	;# 
  4227  0499                     	;# 
  4228  049A                     	;# 
  4229  049B                     	;# 
  4230  049B                     	;# 
  4231  049C                     	;# 
  4232  049D                     	;# 
  4233  049E                     	;# 
  4234  049F                     	;# 
  4235  0617                     	;# 
  4236  0618                     	;# 
  4237  0619                     	;# 
  4238  0619                     	;# 
  4239  061A                     	;# 
  4240  061B                     	;# 
  4241  061C                     	;# 
  4242  061C                     	;# 
  4243  061F                     	;# 
  4244  0691                     	;# 
  4245  0692                     	;# 
  4246  0693                     	;# 
  4247  0694                     	;# 
  4248  0695                     	;# 
  4249  0696                     	;# 
  4250  0697                     	;# 
  4251  0698                     	;# 
  4252  0699                     	;# 
  4253  0711                     	;# 
  4254  0712                     	;# 
  4255  0713                     	;# 
  4256  0714                     	;# 
  4257  0715                     	;# 
  4258  0716                     	;# 
  4259  0717                     	;# 
  4260  0718                     	;# 
  4261  0719                     	;# 
  4262  0891                     	;# 
  4263  0891                     	;# 
  4264  0891                     	;# 
  4265  0891                     	;# 
  4266  0891                     	;# 
  4267  0891                     	;# 
  4268  0892                     	;# 
  4269  0892                     	;# 
  4270  0892                     	;# 
  4271  0893                     	;# 
  4272  0893                     	;# 
  4273  0893                     	;# 
  4274  0893                     	;# 
  4275  0893                     	;# 
  4276  0893                     	;# 
  4277  0894                     	;# 
  4278  0894                     	;# 
  4279  0894                     	;# 
  4280  0895                     	;# 
  4281  0895                     	;# 
  4282  0895                     	;# 
  4283  0896                     	;# 
  4284  0896                     	;# 
  4285  0896                     	;# 
  4286  089B                     	;# 
  4287  0911                     	;# 
  4288  0912                     	;# 
  4289  0913                     	;# 
  4290  0914                     	;# 
  4291  0915                     	;# 
  4292  0916                     	;# 
  4293  0918                     	;# 
  4294  0919                     	;# 
  4295  091A                     	;# 
  4296  091B                     	;# 
  4297  091C                     	;# 
  4298  091D                     	;# 
  4299  091E                     	;# 
  4300  091F                     	;# 
  4301  0E0F                     	;# 
  4302  0E10                     	;# 
  4303  0E11                     	;# 
  4304  0E12                     	;# 
  4305  0E13                     	;# 
  4306  0E14                     	;# 
  4307  0E15                     	;# 
  4308  0E16                     	;# 
  4309  0E17                     	;# 
  4310  0E18                     	;# 
  4311  0E19                     	;# 
  4312  0E1A                     	;# 
  4313  0E1B                     	;# 
  4314  0E1C                     	;# 
  4315  0E1D                     	;# 
  4316  0E1E                     	;# 
  4317  0E1F                     	;# 
  4318  0E20                     	;# 
  4319  0E21                     	;# 
  4320  0E22                     	;# 
  4321  0E24                     	;# 
  4322  0E25                     	;# 
  4323  0E28                     	;# 
  4324  0E29                     	;# 
  4325  0E2A                     	;# 
  4326  0E2B                     	;# 
  4327  0E2C                     	;# 
  4328  0E2D                     	;# 
  4329  0E2E                     	;# 
  4330  0E2F                     	;# 
  4331  0E90                     	;# 
  4332  0E91                     	;# 
  4333  0E92                     	;# 
  4334  0E94                     	;# 
  4335  0E95                     	;# 
  4336  0E9C                     	;# 
  4337  0E9D                     	;# 
  4338  0E9E                     	;# 
  4339  0E9F                     	;# 
  4340  0EA0                     	;# 
  4341  0EA1                     	;# 
  4342  0EA2                     	;# 
  4343  0EA3                     	;# 
  4344  0EA4                     	;# 
  4345  0EA5                     	;# 
  4346  0EA6                     	;# 
  4347  0EA7                     	;# 
  4348  0F0F                     	;# 
  4349  0F10                     	;# 
  4350  0F11                     	;# 
  4351  0F12                     	;# 
  4352  0F13                     	;# 
  4353  0F14                     	;# 
  4354  0F15                     	;# 
  4355  0F16                     	;# 
  4356  0F17                     	;# 
  4357  0F18                     	;# 
  4358  0F19                     	;# 
  4359  0F1A                     	;# 
  4360  0F1B                     	;# 
  4361  0F1C                     	;# 
  4362  0F1D                     	;# 
  4363  0F1E                     	;# 
  4364  0F1F                     	;# 
  4365  0F20                     	;# 
  4366  0F21                     	;# 
  4367  0F22                     	;# 
  4368  0F23                     	;# 
  4369  0F24                     	;# 
  4370  0F25                     	;# 
  4371  0F26                     	;# 
  4372  0F27                     	;# 
  4373  0F28                     	;# 
  4374  0F29                     	;# 
  4375  0F2A                     	;# 
  4376  0F2B                     	;# 
  4377  0F2C                     	;# 
  4378  0F2D                     	;# 
  4379  0F2E                     	;# 
  4380  0F2F                     	;# 
  4381  0F30                     	;# 
  4382  0F31                     	;# 
  4383  0F32                     	;# 
  4384  0F33                     	;# 
  4385  0F34                     	;# 
  4386  0F35                     	;# 
  4387  0F36                     	;# 
  4388  0F37                     	;# 
  4389  0FE4                     	;# 
  4390  0FE5                     	;# 
  4391  0FE6                     	;# 
  4392  0FE7                     	;# 
  4393  0FE8                     	;# 
  4394  0FE9                     	;# 
  4395  0FEA                     	;# 
  4396  0FEB                     	;# 
  4397  0FED                     	;# 
  4398  0FEE                     	;# 
  4399  0FEF                     	;# 
  4400  0000                     	;# 
  4401  0001                     	;# 
  4402  0002                     	;# 
  4403  0003                     	;# 
  4404  0004                     	;# 
  4405  0005                     	;# 
  4406  0006                     	;# 
  4407  0007                     	;# 
  4408  0008                     	;# 
  4409  0009                     	;# 
  4410  000A                     	;# 
  4411  000B                     	;# 
  4412  000C                     	;# 
  4413  000D                     	;# 
  4414  000E                     	;# 
  4415  0010                     	;# 
  4416  0011                     	;# 
  4417  0012                     	;# 
  4418  0013                     	;# 
  4419  0014                     	;# 
  4420  0015                     	;# 
  4421  0015                     	;# 
  4422  0016                     	;# 
  4423  0016                     	;# 
  4424  0017                     	;# 
  4425  0018                     	;# 
  4426  0019                     	;# 
  4427  0019                     	;# 
  4428  001A                     	;# 
  4429  001B                     	;# 
  4430  001C                     	;# 
  4431  001D                     	;# 
  4432  001E                     	;# 
  4433  001F                     	;# 
  4434  008C                     	;# 
  4435  008D                     	;# 
  4436  008E                     	;# 
  4437  0090                     	;# 
  4438  0091                     	;# 
  4439  0092                     	;# 
  4440  0093                     	;# 
  4441  0094                     	;# 
  4442  0097                     	;# 
  4443  009B                     	;# 
  4444  009B                     	;# 
  4445  009C                     	;# 
  4446  009D                     	;# 
  4447  009E                     	;# 
  4448  009F                     	;# 
  4449  010C                     	;# 
  4450  010D                     	;# 
  4451  010E                     	;# 
  4452  0111                     	;# 
  4453  0112                     	;# 
  4454  0113                     	;# 
  4455  0114                     	;# 
  4456  0115                     	;# 
  4457  0116                     	;# 
  4458  0117                     	;# 
  4459  0118                     	;# 
  4460  0119                     	;# 
  4461  018C                     	;# 
  4462  018D                     	;# 
  4463  018E                     	;# 
  4464  0197                     	;# 
  4465  0199                     	;# 
  4466  0199                     	;# 
  4467  0199                     	;# 
  4468  019A                     	;# 
  4469  019A                     	;# 
  4470  019A                     	;# 
  4471  019B                     	;# 
  4472  019B                     	;# 
  4473  019B                     	;# 
  4474  019B                     	;# 
  4475  019B                     	;# 
  4476  019C                     	;# 
  4477  019C                     	;# 
  4478  019C                     	;# 
  4479  019D                     	;# 
  4480  019D                     	;# 
  4481  019D                     	;# 
  4482  019E                     	;# 
  4483  019E                     	;# 
  4484  019E                     	;# 
  4485  019F                     	;# 
  4486  019F                     	;# 
  4487  019F                     	;# 
  4488  019F                     	;# 
  4489  019F                     	;# 
  4490  020C                     	;# 
  4491  020D                     	;# 
  4492  020E                     	;# 
  4493  0211                     	;# 
  4494  0211                     	;# 
  4495  0212                     	;# 
  4496  0212                     	;# 
  4497  0213                     	;# 
  4498  0213                     	;# 
  4499  0214                     	;# 
  4500  0214                     	;# 
  4501  0215                     	;# 
  4502  0215                     	;# 
  4503  0215                     	;# 
  4504  0215                     	;# 
  4505  0216                     	;# 
  4506  0216                     	;# 
  4507  0217                     	;# 
  4508  0217                     	;# 
  4509  0219                     	;# 
  4510  021A                     	;# 
  4511  021B                     	;# 
  4512  021C                     	;# 
  4513  021D                     	;# 
  4514  021D                     	;# 
  4515  021E                     	;# 
  4516  021F                     	;# 
  4517  028C                     	;# 
  4518  028D                     	;# 
  4519  028E                     	;# 
  4520  0291                     	;# 
  4521  0291                     	;# 
  4522  0292                     	;# 
  4523  0293                     	;# 
  4524  0294                     	;# 
  4525  0295                     	;# 
  4526  0295                     	;# 
  4527  0296                     	;# 
  4528  0297                     	;# 
  4529  0298                     	;# 
  4530  029F                     	;# 
  4531  030C                     	;# 
  4532  030D                     	;# 
  4533  030E                     	;# 
  4534  0311                     	;# 
  4535  0311                     	;# 
  4536  0312                     	;# 
  4537  0313                     	;# 
  4538  0314                     	;# 
  4539  0315                     	;# 
  4540  0315                     	;# 
  4541  0316                     	;# 
  4542  0317                     	;# 
  4543  0318                     	;# 
  4544  038C                     	;# 
  4545  038D                     	;# 
  4546  038E                     	;# 
  4547  0391                     	;# 
  4548  0392                     	;# 
  4549  0393                     	;# 
  4550  0394                     	;# 
  4551  0395                     	;# 
  4552  0396                     	;# 
  4553  0397                     	;# 
  4554  0398                     	;# 
  4555  0399                     	;# 
  4556  039A                     	;# 
  4557  039C                     	;# 
  4558  039D                     	;# 
  4559  039E                     	;# 
  4560  039F                     	;# 
  4561  0411                     	;# 
  4562  0411                     	;# 
  4563  0412                     	;# 
  4564  0413                     	;# 
  4565  0414                     	;# 
  4566  0415                     	;# 
  4567  0416                     	;# 
  4568  0417                     	;# 
  4569  0418                     	;# 
  4570  0418                     	;# 
  4571  0419                     	;# 
  4572  041A                     	;# 
  4573  041B                     	;# 
  4574  041C                     	;# 
  4575  041D                     	;# 
  4576  041E                     	;# 
  4577  041F                     	;# 
  4578  0498                     	;# 
  4579  0498                     	;# 
  4580  0499                     	;# 
  4581  049A                     	;# 
  4582  049B                     	;# 
  4583  049B                     	;# 
  4584  049C                     	;# 
  4585  049D                     	;# 
  4586  049E                     	;# 
  4587  049F                     	;# 
  4588  0617                     	;# 
  4589  0618                     	;# 
  4590  0619                     	;# 
  4591  0619                     	;# 
  4592  061A                     	;# 
  4593  061B                     	;# 
  4594  061C                     	;# 
  4595  061C                     	;# 
  4596  061F                     	;# 
  4597  0691                     	;# 
  4598  0692                     	;# 
  4599  0693                     	;# 
  4600  0694                     	;# 
  4601  0695                     	;# 
  4602  0696                     	;# 
  4603  0697                     	;# 
  4604  0698                     	;# 
  4605  0699                     	;# 
  4606  0711                     	;# 
  4607  0712                     	;# 
  4608  0713                     	;# 
  4609  0714                     	;# 
  4610  0715                     	;# 
  4611  0716                     	;# 
  4612  0717                     	;# 
  4613  0718                     	;# 
  4614  0719                     	;# 
  4615  0891                     	;# 
  4616  0891                     	;# 
  4617  0891                     	;# 
  4618  0891                     	;# 
  4619  0891                     	;# 
  4620  0891                     	;# 
  4621  0892                     	;# 
  4622  0892                     	;# 
  4623  0892                     	;# 
  4624  0893                     	;# 
  4625  0893                     	;# 
  4626  0893                     	;# 
  4627  0893                     	;# 
  4628  0893                     	;# 
  4629  0893                     	;# 
  4630  0894                     	;# 
  4631  0894                     	;# 
  4632  0894                     	;# 
  4633  0895                     	;# 
  4634  0895                     	;# 
  4635  0895                     	;# 
  4636  0896                     	;# 
  4637  0896                     	;# 
  4638  0896                     	;# 
  4639  089B                     	;# 
  4640  0911                     	;# 
  4641  0912                     	;# 
  4642  0913                     	;# 
  4643  0914                     	;# 
  4644  0915                     	;# 
  4645  0916                     	;# 
  4646  0918                     	;# 
  4647  0919                     	;# 
  4648  091A                     	;# 
  4649  091B                     	;# 
  4650  091C                     	;# 
  4651  091D                     	;# 
  4652  091E                     	;# 
  4653  091F                     	;# 
  4654  0E0F                     	;# 
  4655  0E10                     	;# 
  4656  0E11                     	;# 
  4657  0E12                     	;# 
  4658  0E13                     	;# 
  4659  0E14                     	;# 
  4660  0E15                     	;# 
  4661  0E16                     	;# 
  4662  0E17                     	;# 
  4663  0E18                     	;# 
  4664  0E19                     	;# 
  4665  0E1A                     	;# 
  4666  0E1B                     	;# 
  4667  0E1C                     	;# 
  4668  0E1D                     	;# 
  4669  0E1E                     	;# 
  4670  0E1F                     	;# 
  4671  0E20                     	;# 
  4672  0E21                     	;# 
  4673  0E22                     	;# 
  4674  0E24                     	;# 
  4675  0E25                     	;# 
  4676  0E28                     	;# 
  4677  0E29                     	;# 
  4678  0E2A                     	;# 
  4679  0E2B                     	;# 
  4680  0E2C                     	;# 
  4681  0E2D                     	;# 
  4682  0E2E                     	;# 
  4683  0E2F                     	;# 
  4684  0E90                     	;# 
  4685  0E91                     	;# 
  4686  0E92                     	;# 
  4687  0E94                     	;# 
  4688  0E95                     	;# 
  4689  0E9C                     	;# 
  4690  0E9D                     	;# 
  4691  0E9E                     	;# 
  4692  0E9F                     	;# 
  4693  0EA0                     	;# 
  4694  0EA1                     	;# 
  4695  0EA2                     	;# 
  4696  0EA3                     	;# 
  4697  0EA4                     	;# 
  4698  0EA5                     	;# 
  4699  0EA6                     	;# 
  4700  0EA7                     	;# 
  4701  0F0F                     	;# 
  4702  0F10                     	;# 
  4703  0F11                     	;# 
  4704  0F12                     	;# 
  4705  0F13                     	;# 
  4706  0F14                     	;# 
  4707  0F15                     	;# 
  4708  0F16                     	;# 
  4709  0F17                     	;# 
  4710  0F18                     	;# 
  4711  0F19                     	;# 
  4712  0F1A                     	;# 
  4713  0F1B                     	;# 
  4714  0F1C                     	;# 
  4715  0F1D                     	;# 
  4716  0F1E                     	;# 
  4717  0F1F                     	;# 
  4718  0F20                     	;# 
  4719  0F21                     	;# 
  4720  0F22                     	;# 
  4721  0F23                     	;# 
  4722  0F24                     	;# 
  4723  0F25                     	;# 
  4724  0F26                     	;# 
  4725  0F27                     	;# 
  4726  0F28                     	;# 
  4727  0F29                     	;# 
  4728  0F2A                     	;# 
  4729  0F2B                     	;# 
  4730  0F2C                     	;# 
  4731  0F2D                     	;# 
  4732  0F2E                     	;# 
  4733  0F2F                     	;# 
  4734  0F30                     	;# 
  4735  0F31                     	;# 
  4736  0F32                     	;# 
  4737  0F33                     	;# 
  4738  0F34                     	;# 
  4739  0F35                     	;# 
  4740  0F36                     	;# 
  4741  0F37                     	;# 
  4742  0FE4                     	;# 
  4743  0FE5                     	;# 
  4744  0FE6                     	;# 
  4745  0FE7                     	;# 
  4746  0FE8                     	;# 
  4747  0FE9                     	;# 
  4748  0FEA                     	;# 
  4749  0FEB                     	;# 
  4750  0FED                     	;# 
  4751  0FEE                     	;# 
  4752  0FEF                     	;# 
  4753                           
  4754                           	psect	idataCOMMON
  4755  0877                     __pidataCOMMON:	
  4756                           
  4757                           ;initializer for _val
  4758  0877  3404               	retlw	4
  4759                           
  4760                           	psect	idataBANK0
  4761  0876                     __pidataBANK0:	
  4762                           
  4763                           ;initializer for _start
  4764  0876  3401               	retlw	1
  4765                           
  4766                           	psect	idataBANK2
  4767  0952                     __pidataBANK2:	
  4768                           
  4769                           ;initializer for _names
  4770  0952  343D               	retlw	low (STR_1| (0+32768))
  4771  0953  3490               	retlw	high (STR_1| (0+32768))
  4772  0954  3430               	retlw	low (STR_2| (0+32768))
  4773  0955  3490               	retlw	high (STR_2| (0+32768))
  4774  0956  3420               	retlw	low (STR_3| (0+32768))
  4775  0957  3490               	retlw	high (STR_3| (0+32768))
  4776  0958  3449               	retlw	low (STR_4| (0+32768))
  4777  0959  3490               	retlw	high (STR_4| (0+32768))
  4778                           
  4779                           	psect	stringtext1
  4780  1000                     __pstringtext1:	
  4781  1000                     _fsmStateTable:	
  4782  1000  34E2               	retlw	low _do_I2C_IDLE
  4783  1001  3408               	retlw	high _do_I2C_IDLE
  4784  1002  342A               	retlw	low _do_I2C_SEND_ADR_READ
  4785  1003  3409               	retlw	high _do_I2C_SEND_ADR_READ
  4786  1004  3406               	retlw	low _do_I2C_SEND_ADR_WRITE
  4787  1005  3409               	retlw	high _do_I2C_SEND_ADR_WRITE
  4788  1006  3402               	retlw	low _do_I2C_TX
  4789  1007  340E               	retlw	high _do_I2C_TX
  4790  1008  34BC               	retlw	low _do_I2C_RX
  4791  1009  340D               	retlw	high _do_I2C_RX
  4792  100A  34E7               	retlw	low _do_I2C_RCEN
  4793  100B  3408               	retlw	high _do_I2C_RCEN
  4794  100C  348B               	retlw	low _do_I2C_TX_EMPTY
  4795  100D  340C               	retlw	high _do_I2C_TX_EMPTY
  4796  100E  34B5               	retlw	low _do_I2C_SEND_RESTART_READ
  4797  100F  3408               	retlw	high _do_I2C_SEND_RESTART_READ
  4798  1010  34B9               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4799  1011  3408               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4800  1012  34BD               	retlw	low _do_I2C_SEND_RESTART
  4801  1013  3408               	retlw	high _do_I2C_SEND_RESTART
  4802  1014  34C1               	retlw	low _do_I2C_SEND_STOP
  4803  1015  3408               	retlw	high _do_I2C_SEND_STOP
  4804  1016  34C5               	retlw	low _do_I2C_DO_ACK
  4805  1017  3408               	retlw	high _do_I2C_DO_ACK
  4806  1018  34C9               	retlw	low _do_I2C_DO_NACK_STOP
  4807  1019  3408               	retlw	high _do_I2C_DO_NACK_STOP
  4808  101A  34CD               	retlw	low _do_I2C_DO_NACK_RESTART
  4809  101B  3408               	retlw	high _do_I2C_DO_NACK_RESTART
  4810  101C  34FF               	retlw	low _do_I2C_RESET
  4811  101D  3408               	retlw	high _do_I2C_RESET
  4812  101E  3435               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4813  101F  340C               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4814  1020                     __end_of_fsmStateTable:	
  4815  000E                     _PORTCbits	set	14
  4816  001F                     _T2CONbits	set	31
  4817  001F                     _T2CON	set	31
  4818  001D                     _TMR2	set	29
  4819  001E                     _PR2	set	30
  4820  0011                     _PIR1bits	set	17
  4821  000B                     _INTCONbits	set	11
  4822  0010                     _PIR0bits	set	16
  4823  009D                     _ADCON0bits	set	157
  4824  009C                     _ADRESH	set	156
  4825  009B                     _ADRESL	set	155
  4826  009F                     _ADACT	set	159
  4827  009E                     _ADCON1	set	158
  4828  009D                     _ADCON0	set	157
  4829  008E                     _TRISC	set	142
  4830  008D                     _TRISB	set	141
  4831  008C                     _TRISA	set	140
  4832  0097                     _WDTCON	set	151
  4833  0091                     _PIE1bits	set	145
  4834  0090                     _PIE0bits	set	144
  4835  010E                     _LATCbits	set	270
  4836  010E                     _LATC	set	270
  4837  010D                     _LATB	set	269
  4838  010C                     _LATA	set	268
  4839  018C                     _ANSELA	set	396
  4840  018D                     _ANSELB	set	397
  4841  018E                     _ANSELC	set	398
  4842  021C                     _SSP2STATbits	set	540
  4843  0219                     _SSP2BUF	set	537
  4844  021D                     _SSP2CON1bits	set	541
  4845  021A                     _SSP2ADD	set	538
  4846  021D                     _SSP2CON1	set	541
  4847  021C                     _SSP2STAT	set	540
  4848  0214                     _SSP1STATbits	set	532
  4849  0213                     _SSP1MSK	set	531
  4850  0211                     _SSP1BUF	set	529
  4851  0216                     _SSP1CON2bits	set	534
  4852  0212                     _SSP1ADD	set	530
  4853  0216                     _SSP1CON2	set	534
  4854  0215                     _SSP1CON1	set	533
  4855  0214                     _SSP1STAT	set	532
  4856  0215                     _SSP1CON1bits	set	533
  4857  020E                     _WPUC	set	526
  4858  020C                     _WPUA	set	524
  4859  020D                     _WPUB	set	525
  4860  0293                     _CCP1CONbits	set	659
  4861  029F                     _CCPTMRSbits	set	671
  4862  0291                     _CCPR1L	set	657
  4863  0292                     _CCPR1H	set	658
  4864  0293                     _CCP1CON	set	659
  4865  028E                     _ODCONC	set	654
  4866  028D                     _ODCONB	set	653
  4867  028C                     _ODCONA	set	652
  4868  030E                     _SLRCONC	set	782
  4869  030D                     _SLRCONB	set	781
  4870  030C                     _SLRCONA	set	780
  4871  0916                     _PMD5	set	2326
  4872  0915                     _PMD4	set	2325
  4873  0914                     _PMD3	set	2324
  4874  0913                     _PMD2	set	2323
  4875  0912                     _PMD1	set	2322
  4876  0911                     _PMD0	set	2321
  4877  091E                     _OSCTUNE	set	2334
  4878  091F                     _OSCFRQ	set	2335
  4879  091D                     _OSCEN	set	2333
  4880  091B                     _OSCCON3	set	2331
  4881  0919                     _OSCCON1	set	2329
  4882  0E1D                     _SSP2CLKPPS	set	3613
  4883  0E21                     _SSP1DATPPS	set	3617
  4884  0E20                     _SSP1CLKPPS	set	3616
  4885  0E1E                     _SSP2DATPPS	set	3614
  4886  0EA6                     _RC6PPS	set	3750
  4887  0EA2                     _RC2PPS	set	3746
  4888  0E9D                     _RB5PPS	set	3741
  4889  0E9F                     _RB7PPS	set	3743
  4890  0E9E                     _RB6PPS	set	3742
  4891  1020                     STR_3:	
  4892  1020  3441               	retlw	65	;'A'
  4893  1021  346C               	retlw	108	;'l'
  4894  1022  3465               	retlw	101	;'e'
  4895  1023  3478               	retlw	120	;'x'
  4896  1024  3461               	retlw	97	;'a'
  4897  1025  346E               	retlw	110	;'n'
  4898  1026  3464               	retlw	100	;'d'
  4899  1027  3472               	retlw	114	;'r'
  4900  1028  3461               	retlw	97	;'a'
  4901  1029  3420               	retlw	32	;' '
  4902  102A  3446               	retlw	70	;'F'
  4903  102B  3479               	retlw	121	;'y'
  4904  102C  3466               	retlw	102	;'f'
  4905  102D  3466               	retlw	102	;'f'
  4906  102E  3465               	retlw	101	;'e'
  4907  102F  3400               	retlw	0
  4908                           
  4909                           	psect	stringtext2
  4910  1030                     __pstringtext2:	
  4911  1030                     STR_2:	
  4912  1030  344E               	retlw	78	;'N'
  4913  1031  346F               	retlw	111	;'o'
  4914  1032  3465               	retlw	101	;'e'
  4915  1033  346C               	retlw	108	;'l'
  4916  1034  346C               	retlw	108	;'l'
  4917  1035  3465               	retlw	101	;'e'
  4918  1036  3420               	retlw	32	;' '
  4919  1037  3443               	retlw	67	;'C'
  4920  1038  3472               	retlw	114	;'r'
  4921  1039  3461               	retlw	97	;'a'
  4922  103A  346E               	retlw	110	;'n'
  4923  103B  3465               	retlw	101	;'e'
  4924  103C  3400               	retlw	0
  4925                           
  4926                           	psect	stringtext3
  4927  103D                     __pstringtext3:	
  4928  103D                     STR_1:	
  4929  103D  344A               	retlw	74	;'J'
  4930  103E  3475               	retlw	117	;'u'
  4931  103F  3473               	retlw	115	;'s'
  4932  1040  3474               	retlw	116	;'t'
  4933  1041  3469               	retlw	105	;'i'
  4934  1042  346E               	retlw	110	;'n'
  4935  1043  3420               	retlw	32	;' '
  4936  1044  3443               	retlw	67	;'C'
  4937  1045  3468               	retlw	104	;'h'
  4938  1046  3461               	retlw	97	;'a'
  4939  1047  346E               	retlw	110	;'n'
  4940  1048  3400               	retlw	0
  4941                           
  4942                           	psect	stringtext4
  4943  1049                     __pstringtext4:	
  4944  1049                     STR_4:	
  4945  1049  344A               	retlw	74	;'J'
  4946  104A  3465               	retlw	101	;'e'
  4947  104B  3466               	retlw	102	;'f'
  4948  104C  3466               	retlw	102	;'f'
  4949  104D  3420               	retlw	32	;' '
  4950  104E  3447               	retlw	71	;'G'
  4951  104F  3465               	retlw	101	;'e'
  4952  1050  3469               	retlw	105	;'i'
  4953  1051  3473               	retlw	115	;'s'
  4954  1052  3473               	retlw	115	;'s'
  4955  1053  3400               	retlw	0
  4956                           
  4957                           	psect	stringtext5
  4958  0000                     __pstringtext5:	
  4959                           
  4960                           ; #config settings
  4961  0000                     
  4962                           	psect	cinit
  4963  002E                     start_initialization:	
  4964  002E                     __initialization:	
  4965                           
  4966                           ; Initialize objects allocated to COMMON
  4967  002E  3188  2077  3180   	fcall	__pidataCOMMON	;fetch initializer
  4968  0031  00FA               	movwf	__pdataCOMMON& (0+127)
  4969                           
  4970                           ; Initialize objects allocated to BANK0
  4971  0032  3188  2076  3180   	fcall	__pidataBANK0	;fetch initializer
  4972  0035  00EE               	movwf	__pdataBANK0& (0+127)
  4973                           
  4974                           ; Initialize objects allocated to BANK2
  4975  0036  3052               	movlw	low __pidataBANK2
  4976  0037  0084               	movwf	4
  4977  0038  3089               	movlw	(high __pidataBANK2)| (0+128)
  4978  0039  0085               	movwf	5
  4979  003A  3060               	movlw	low __pdataBANK2
  4980  003B  0086               	movwf	6
  4981  003C  3001               	movlw	high __pdataBANK2
  4982  003D  0087               	movwf	7
  4983  003E  3008               	movlw	8
  4984  003F  3188  20F9  3180   	fcall	init_ram
  4985                           
  4986                           ; Clear objects allocated to COMMON
  4987  0042  01F6               	clrf	__pbssCOMMON& (0+127)
  4988  0043  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  4989  0044  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  4990  0045  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  4991                           
  4992                           ; Clear objects allocated to BANK0
  4993  0046  305C               	movlw	low __pbssBANK0
  4994  0047  0084               	movwf	4
  4995  0048  3000               	movlw	high __pbssBANK0
  4996  0049  0085               	movwf	5
  4997  004A  3012               	movlw	18
  4998  004B  3188  20F3  3180   	fcall	clear_ram0
  4999                           
  5000                           ; Clear objects allocated to BANK1
  5001  004E  0021               	movlb	1	; select bank1
  5002  004F  01E0               	clrf	__pbssBANK1& (0+127)
  5003  0050  01E1               	clrf	(__pbssBANK1+1)& (0+127)
  5004  0051  01E2               	clrf	(__pbssBANK1+2)& (0+127)
  5005  0052  01E3               	clrf	(__pbssBANK1+3)& (0+127)
  5006  0053  01E4               	clrf	(__pbssBANK1+4)& (0+127)
  5007  0054  01E5               	clrf	(__pbssBANK1+5)& (0+127)
  5008                           
  5009                           ; Clear objects allocated to BANK2
  5010  0055  0022               	movlb	2	; select bank2
  5011  0056  01E8               	clrf	__pbssBANK2& (0+127)
  5012  0057  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5013                           
  5014                           ; Clear objects allocated to BANK3
  5015  0058  30A0               	movlw	low __pbssBANK3
  5016  0059  0084               	movwf	4
  5017  005A  3001               	movlw	high __pbssBANK3
  5018  005B  0085               	movwf	5
  5019  005C  301D               	movlw	29
  5020  005D  3188  20F3  3180   	fcall	clear_ram0
  5021                           
  5022                           ; Clear objects allocated to BANK4
  5023  0060  3020               	movlw	low __pbssBANK4
  5024  0061  0084               	movwf	4
  5025  0062  3002               	movlw	high __pbssBANK4
  5026  0063  0085               	movwf	5
  5027  0064  3044               	movlw	68
  5028  0065  3188  20F3         	fcall	clear_ram0
  5029  0067                     end_of_initialization:	
  5030                           ;End of C runtime variable initialization code
  5031                           
  5032  0067                     __end_of__initialization:	
  5033  0067  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5034  0068  0020               	movlb	0
  5035  0069  318D  2D52         	ljmp	_main	;jump to C main() function
  5036                           
  5037                           	psect	bssCOMMON
  5038  0076                     __pbssCOMMON:	
  5039  0076                     _b_i2c_error_flag:	
  5040  0076                     	ds	1
  5041  0077                     _handleGestureFlag:	
  5042  0077                     	ds	1
  5043  0078                     _state:	
  5044  0078                     	ds	1
  5045  0079                     _button:	
  5046  0079                     	ds	1
  5047                           
  5048                           	psect	dataCOMMON
  5049  007A                     __pdataCOMMON:	
  5050  007A                     _val:	
  5051  007A                     	ds	1
  5052                           
  5053                           	psect	bssBANK0
  5054  005C                     __pbssBANK0:	
  5055  005C                     _name:	
  5056  005C                     	ds	2
  5057  005E                     _gesture_state_:	
  5058  005E                     	ds	2
  5059  0060                     _gesture_near_count_:	
  5060  0060                     	ds	2
  5061  0062                     _gesture_lr_count_:	
  5062  0062                     	ds	2
  5063  0064                     _gesture_ud_count_:	
  5064  0064                     	ds	2
  5065  0066                     _gesture_lr_delta_:	
  5066  0066                     	ds	2
  5067  0068                     _gesture_ud_delta_:	
  5068  0068                     	ds	2
  5069  006A                     _i2c1_driver_busCollisionISR:	
  5070  006A                     	ds	2
  5071  006C                     _adcResult:	
  5072  006C                     	ds	1
  5073  006D                     _printed:	
  5074  006D                     	ds	1
  5075                           
  5076                           	psect	dataBANK0
  5077  006E                     __pdataBANK0:	
  5078  006E                     _start:	
  5079  006E                     	ds	1
  5080                           
  5081                           	psect	bssBANK1
  5082  00E0                     __pbssBANK1:	
  5083  00E0                     _adcResult2:	
  5084  00E0                     	ds	2
  5085  00E2                     _gesture_far_count_:	
  5086  00E2                     	ds	2
  5087  00E4                     _i2c1_driver_i2cISR:	
  5088  00E4                     	ds	2
  5089                           
  5090                           	psect	bssBANK2
  5091  0168                     __pbssBANK2:	
  5092  0168                     _gesture_motion_:	
  5093  0168                     	ds	2
  5094                           
  5095                           	psect	dataBANK2
  5096  0160                     __pdataBANK2:	
  5097  0160                     _names:	
  5098  0160                     	ds	8
  5099                           
  5100                           	psect	bssBANK3
  5101  01A0                     __pbssBANK3:	
  5102  01A0                     _i2c_status:	
  5103  01A0                     	ds	29
  5104                           
  5105                           	psect	bssBANK4
  5106  0220                     __pbssBANK4:	
  5107  0220                     _gesture_data_:	
  5108  0220                     	ds	68
  5109                           
  5110                           	psect	inittext
  5111  08F9                     init_ram:	
  5112  08F9  00FE               	movwf	126
  5113  08FA                     initloop:	
  5114  08FA  0012               	moviw fsr0++
  5115  08FB  001E               	movwi fsr1++
  5116  08FC  0BFE               	decfsz	126,f
  5117  08FD  28FA               	goto	initloop
  5118  08FE  3400               	retlw	0
  5119                           
  5120                           	psect	clrtext
  5121  08F3                     clear_ram0:	
  5122                           ;	Called with FSR0 containing the base address, and
  5123                           ;	WREG with the size to clear
  5124                           
  5125  08F3  0064               	clrwdt	;clear the watchdog before getting into this loop
  5126  08F4                     clrloop0:	
  5127  08F4  0180               	clrf	0	;clear RAM location pointed to by FSR
  5128  08F5  3101               	addfsr 0,1
  5129  08F6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5130  08F7  28F4               	goto	clrloop0	;have we reached the end yet?
  5131  08F8  3400               	retlw	0	;all done for this memory range, return
  5132                           
  5133                           	psect	cstackBANK2
  5134  0120                     __pcstackBANK2:	
  5135  0120                     readGesture@fifo_data:	
  5136                           
  5137                           ; 64 bytes @ 0x0
  5138  0120                     	ds	64
  5139                           
  5140                           	psect	cstackBANK1
  5141  00A0                     __pcstackBANK1:	
  5142  00A0                     readGesture@fifo_data2:	
  5143                           
  5144                           ; 64 bytes @ 0x0
  5145  00A0                     	ds	64
  5146                           
  5147                           	psect	cstackCOMMON
  5148  0070                     __pcstackCOMMON:	
  5149  0070                     ?_i2c1_driver_open:	
  5150  0070                     ?_i2c1_driver_isNACK:	
  5151                           ; 1 bit 
  5152                           
  5153  0070                     ?_i2c1_driver_isBufferFull:	
  5154                           ; 1 bit 
  5155                           
  5156  0070                     ?_returnStop:	
  5157                           ; 1 bit 
  5158                           
  5159  0070                     ?_returnReset:	
  5160                           ; 1 bytes @ 0x0
  5161                           
  5162  0070                     ?_mssp1_clearIRQ:	
  5163                           ; 1 bytes @ 0x0
  5164                           
  5165  0070                     ??_mssp1_clearIRQ:	
  5166                           ; 1 bytes @ 0x0
  5167                           
  5168  0070                     ?_i2c_busCollisionISR:	
  5169                           ; 1 bytes @ 0x0
  5170                           
  5171  0070                     ??_i2c_busCollisionISR:	
  5172                           ; 1 bytes @ 0x0
  5173                           
  5174  0070                     ?_i2c_ISR:	
  5175                           ; 1 bytes @ 0x0
  5176                           
  5177  0070                     ?_i2c1_driver_start:	
  5178                           ; 1 bytes @ 0x0
  5179                           
  5180  0070                     ?_i2c1_driver_resetBus:	
  5181                           ; 1 bytes @ 0x0
  5182                           
  5183  0070                     ??_i2c1_driver_resetBus:	
  5184                           ; 1 bytes @ 0x0
  5185                           
  5186  0070                     ?_i2c1_driver_restart:	
  5187                           ; 1 bytes @ 0x0
  5188                           
  5189  0070                     ?_i2c1_driver_stop:	
  5190                           ; 1 bytes @ 0x0
  5191                           
  5192  0070                     ?_i2c1_driver_TXData:	
  5193                           ; 1 bytes @ 0x0
  5194                           
  5195  0070                     ?_i2c1_driver_startRX:	
  5196                           ; 1 bytes @ 0x0
  5197                           
  5198  0070                     ?_i2c1_driver_sendACK:	
  5199                           ; 1 bytes @ 0x0
  5200                           
  5201  0070                     ??_i2c1_driver_sendACK:	
  5202                           ; 1 bytes @ 0x0
  5203                           
  5204  0070                     ?_i2c1_driver_sendNACK:	
  5205                           ; 1 bytes @ 0x0
  5206                           
  5207  0070                     ??_i2c1_driver_isNACK:	
  5208                           ; 1 bytes @ 0x0
  5209                           
  5210  0070                     ?_i2c1_driver_getRXData:	
  5211                           ; 1 bytes @ 0x0
  5212                           
  5213  0070                     ?_mssp1_setIRQ:	
  5214                           ; 1 bytes @ 0x0
  5215                           
  5216  0070                     ??_mssp1_setIRQ:	
  5217                           ; 1 bytes @ 0x0
  5218                           
  5219  0070                     ?_i2c1_driver_clearBusCollision:	
  5220                           ; 1 bytes @ 0x0
  5221                           
  5222  0070                     ??_i2c1_driver_clearBusCollision:	
  5223                           ; 1 bytes @ 0x0
  5224                           
  5225  0070                     ?_PIN_MANAGER_IOC:	
  5226                           ; 1 bytes @ 0x0
  5227                           
  5228  0070                     ??_PIN_MANAGER_IOC:	
  5229                           ; 1 bytes @ 0x0
  5230                           
  5231  0070                     ?_PMD_Initialize:	
  5232                           ; 1 bytes @ 0x0
  5233                           
  5234  0070                     ?_PIN_MANAGER_Initialize:	
  5235                           ; 1 bytes @ 0x0
  5236                           
  5237  0070                     ?_OSCILLATOR_Initialize:	
  5238                           ; 1 bytes @ 0x0
  5239                           
  5240  0070                     ?_WDT_Initialize:	
  5241                           ; 1 bytes @ 0x0
  5242                           
  5243  0070                     ?_SPI2_Initialize:	
  5244                           ; 1 bytes @ 0x0
  5245                           
  5246  0070                     ?_PWM1_Initialize:	
  5247                           ; 1 bytes @ 0x0
  5248                           
  5249  0070                     ?_ADC_Initialize:	
  5250                           ; 1 bytes @ 0x0
  5251                           
  5252  0070                     ?_TMR2_Initialize:	
  5253                           ; 1 bytes @ 0x0
  5254                           
  5255  0070                     ?_Display_Clear:	
  5256                           ; 1 bytes @ 0x0
  5257                           
  5258  0070                     ?_PIR_Sensor:	
  5259                           ; 1 bytes @ 0x0
  5260                           
  5261  0070                     ?_initialize:	
  5262                           ; 1 bytes @ 0x0
  5263                           
  5264  0070                     ?_enableGestureSensor:	
  5265                           ; 1 bytes @ 0x0
  5266                           
  5267  0070                     ?_Get_ADC:	
  5268                           ; 1 bytes @ 0x0
  5269                           
  5270  0070                     ?_isGestureAvailable:	
  5271                           ; 1 bytes @ 0x0
  5272                           
  5273  0070                     ?_handleGesture:	
  5274                           ; 1 bytes @ 0x0
  5275                           
  5276  0070                     ?_PWM_Output_Enable:	
  5277                           ; 1 bytes @ 0x0
  5278                           
  5279  0070                     ?_PWM_Output_Disable:	
  5280                           ; 1 bytes @ 0x0
  5281                           
  5282  0070                     ?_wireReadDataByte:	
  5283                           ; 1 bytes @ 0x0
  5284                           
  5285  0070                     ?_setLEDDrive:	
  5286                           ; 1 bytes @ 0x0
  5287                           
  5288  0070                     ?_setProximityGain:	
  5289                           ; 1 bytes @ 0x0
  5290                           
  5291  0070                     ?_setAmbientLightGain:	
  5292                           ; 1 bytes @ 0x0
  5293                           
  5294  0070                     ?_setProxIntLowThresh:	
  5295                           ; 1 bytes @ 0x0
  5296                           
  5297  0070                     ?_setProxIntHighThresh:	
  5298                           ; 1 bytes @ 0x0
  5299                           
  5300  0070                     ?_setGestureEnterThresh:	
  5301                           ; 1 bytes @ 0x0
  5302                           
  5303  0070                     ?_setGestureExitThresh:	
  5304                           ; 1 bytes @ 0x0
  5305                           
  5306  0070                     ?_setGestureGain:	
  5307                           ; 1 bytes @ 0x0
  5308                           
  5309  0070                     ?_setGestureLEDDrive:	
  5310                           ; 1 bytes @ 0x0
  5311                           
  5312  0070                     ?_setGestureWaitTime:	
  5313                           ; 1 bytes @ 0x0
  5314                           
  5315  0070                     ?_setGestureIntEnable:	
  5316                           ; 1 bytes @ 0x0
  5317                           
  5318  0070                     ?_getMode:	
  5319                           ; 1 bytes @ 0x0
  5320                           
  5321  0070                     ?_resetGestureParameters:	
  5322                           ; 1 bytes @ 0x0
  5323                           
  5324  0070                     ?_setLEDBoost:	
  5325                           ; 1 bytes @ 0x0
  5326                           
  5327  0070                     ?_setGestureMode:	
  5328                           ; 1 bytes @ 0x0
  5329                           
  5330  0070                     ?_enablePower:	
  5331                           ; 1 bytes @ 0x0
  5332                           
  5333  0070                     ?_processGestureData:	
  5334                           ; 1 bytes @ 0x0
  5335                           
  5336  0070                     ?_decodeGesture:	
  5337                           ; 1 bytes @ 0x0
  5338                           
  5339  0070                     ?_I2C_Start:	
  5340                           ; 1 bytes @ 0x0
  5341                           
  5342  0070                     ?_I2C_Write_Byte:	
  5343                           ; 1 bytes @ 0x0
  5344                           
  5345  0070                     ?_I2C_ReStart:	
  5346                           ; 1 bytes @ 0x0
  5347                           
  5348  0070                     ?_I2C_Read_Byte:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0070                     ?_I2C_Send_NACK:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0070                     ?_I2C_Stop:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0070                     ?_do_I2C_RESET:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0070                     ??_do_I2C_RESET:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0070                     ?_do_I2C_IDLE:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0070                     ??_do_I2C_IDLE:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0070                     ?_do_I2C_SEND_RESTART_READ:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0070                     ??_do_I2C_SEND_RESTART_READ:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0070                     ??_do_I2C_SEND_RESTART_WRITE:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0070                     ?_do_I2C_SEND_RESTART:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0070                     ??_do_I2C_SEND_RESTART:	
  5385                           ; 1 bytes @ 0x0
  5386                           
  5387  0070                     ?_do_I2C_SEND_STOP:	
  5388                           ; 1 bytes @ 0x0
  5389                           
  5390  0070                     ??_do_I2C_SEND_STOP:	
  5391                           ; 1 bytes @ 0x0
  5392                           
  5393  0070                     ?_do_I2C_SEND_ADR_READ:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0070                     ??_do_I2C_SEND_ADR_READ:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0070                     ??_do_I2C_SEND_ADR_WRITE:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0070                     ?_do_I2C_RCEN:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0070                     ??_do_I2C_RCEN:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0070                     ?_do_I2C_DO_ACK:	
  5412                           ; 1 bytes @ 0x0
  5413                           
  5414  0070                     ??_do_I2C_DO_ACK:	
  5415                           ; 1 bytes @ 0x0
  5416                           
  5417  0070                     ?_do_I2C_DO_NACK_STOP:	
  5418                           ; 1 bytes @ 0x0
  5419                           
  5420  0070                     ??_do_I2C_DO_NACK_STOP:	
  5421                           ; 1 bytes @ 0x0
  5422                           
  5423  0070                     ?_do_I2C_DO_NACK_RESTART:	
  5424                           ; 1 bytes @ 0x0
  5425                           
  5426  0070                     ??_do_I2C_DO_NACK_RESTART:	
  5427                           ; 1 bytes @ 0x0
  5428                           
  5429  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0070                     ??_do_I2C_DO_ADDRESS_NACK:	
  5433                           ; 1 bytes @ 0x0
  5434                           
  5435  0070                     ?_do_I2C_TX:	
  5436                           ; 1 bytes @ 0x0
  5437                           
  5438  0070                     ??_do_I2C_TX:	
  5439                           ; 1 bytes @ 0x0
  5440                           
  5441  0070                     ?_do_I2C_RX:	
  5442                           ; 1 bytes @ 0x0
  5443                           
  5444  0070                     ??_do_I2C_RX:	
  5445                           ; 1 bytes @ 0x0
  5446                           
  5447  0070                     ?_do_I2C_TX_EMPTY:	
  5448                           ; 1 bytes @ 0x0
  5449                           
  5450  0070                     ??_do_I2C_TX_EMPTY:	
  5451                           ; 1 bytes @ 0x0
  5452                           
  5453  0070                     ?_INTERRUPT_InterruptManager:	
  5454                           ; 1 bytes @ 0x0
  5455                           
  5456  0070                     ?_SYSTEM_Initialize:	
  5457                           ; 1 bytes @ 0x0
  5458                           
  5459  0070                     ?_SPI2_Exchange8bit:	
  5460                           ; 1 bytes @ 0x0
  5461                           
  5462  0070                     ?_main:	
  5463                           ; 1 bytes @ 0x0
  5464                           
  5465  0070                     ?_SPI_Write:	
  5466                           ; 1 bytes @ 0x0
  5467                           
  5468  0070                     ?i1_i2c1_driver_restart:	
  5469                           ; 1 bytes @ 0x0
  5470                           
  5471  0070                     ??i1_i2c1_driver_restart:	
  5472                           ; 1 bytes @ 0x0
  5473                           
  5474  0070                     ?i1_i2c1_driver_stop:	
  5475                           ; 1 bytes @ 0x0
  5476                           
  5477  0070                     ??i1_i2c1_driver_stop:	
  5478                           ; 1 bytes @ 0x0
  5479                           
  5480  0070                     ?i1_i2c1_driver_startRX:	
  5481                           ; 1 bytes @ 0x0
  5482                           
  5483  0070                     ??i1_i2c1_driver_startRX:	
  5484                           ; 1 bytes @ 0x0
  5485                           
  5486  0070                     ?i1_i2c1_driver_getRXData:	
  5487                           ; 1 bytes @ 0x0
  5488                           
  5489  0070                     ??i1_i2c1_driver_getRXData:	
  5490                           ; 1 bytes @ 0x0
  5491                           
  5492  0070                     ?i1_i2c1_driver_TXData:	
  5493                           ; 1 bytes @ 0x0
  5494                           
  5495  0070                     ??i1_i2c1_driver_TXData:	
  5496                           ; 1 bytes @ 0x0
  5497                           
  5498  0070                     ?i1_i2c1_driver_sendNACK:	
  5499                           ; 1 bytes @ 0x0
  5500                           
  5501  0070                     ??i1_i2c1_driver_sendNACK:	
  5502                           ; 1 bytes @ 0x0
  5503                           
  5504  0070                     returnStop@p:	
  5505                           ; 1 bytes @ 0x0
  5506                           
  5507  0070                     returnReset@p:	
  5508                           ; 1 bytes @ 0x0
  5509                           
  5510  0070                     i1i2c1_driver_TXData@d:	
  5511                           ; 1 bytes @ 0x0
  5512                           
  5513                           
  5514                           ; 1 bytes @ 0x0
  5515  0070                     	ds	1
  5516  0071                     ??_returnStop:	
  5517  0071                     ??_returnReset:	
  5518                           ; 1 bytes @ 0x1
  5519                           
  5520                           
  5521                           ; 1 bytes @ 0x1
  5522  0071                     	ds	2
  5523  0073                     ??_i2c_ISR:	
  5524                           
  5525                           ; 1 bytes @ 0x3
  5526  0073                     	ds	3
  5527  0076                     ??_INTERRUPT_InterruptManager:	
  5528                           
  5529                           	psect	cstackBANK0
  5530  0020                     __pcstackBANK0:	
  5531                           ; 1 bytes @ 0x6
  5532                           
  5533  0020                     ??_i2c1_driver_open:	
  5534  0020                     ??_i2c1_driver_start:	
  5535                           ; 1 bytes @ 0x0
  5536                           
  5537  0020                     ??_i2c1_driver_restart:	
  5538                           ; 1 bytes @ 0x0
  5539                           
  5540  0020                     ??_i2c1_driver_stop:	
  5541                           ; 1 bytes @ 0x0
  5542                           
  5543  0020                     ??_i2c1_driver_TXData:	
  5544                           ; 1 bytes @ 0x0
  5545                           
  5546  0020                     ??_i2c1_driver_startRX:	
  5547                           ; 1 bytes @ 0x0
  5548                           
  5549  0020                     ??_i2c1_driver_sendNACK:	
  5550                           ; 1 bytes @ 0x0
  5551                           
  5552  0020                     ??_i2c1_driver_getRXData:	
  5553                           ; 1 bytes @ 0x0
  5554                           
  5555  0020                     ??_PMD_Initialize:	
  5556                           ; 1 bytes @ 0x0
  5557                           
  5558  0020                     ??_PIN_MANAGER_Initialize:	
  5559                           ; 1 bytes @ 0x0
  5560                           
  5561  0020                     ??_OSCILLATOR_Initialize:	
  5562                           ; 1 bytes @ 0x0
  5563                           
  5564  0020                     ??_WDT_Initialize:	
  5565                           ; 1 bytes @ 0x0
  5566                           
  5567  0020                     ??_SPI2_Initialize:	
  5568                           ; 1 bytes @ 0x0
  5569                           
  5570  0020                     ??_PWM1_Initialize:	
  5571                           ; 1 bytes @ 0x0
  5572                           
  5573  0020                     ??_ADC_Initialize:	
  5574                           ; 1 bytes @ 0x0
  5575                           
  5576  0020                     ??_TMR2_Initialize:	
  5577                           ; 1 bytes @ 0x0
  5578                           
  5579  0020                     ??_PIR_Sensor:	
  5580                           ; 1 bytes @ 0x0
  5581                           
  5582  0020                     ??_PWM_Output_Enable:	
  5583                           ; 1 bytes @ 0x0
  5584                           
  5585  0020                     ??_PWM_Output_Disable:	
  5586                           ; 1 bytes @ 0x0
  5587                           
  5588  0020                     ??_resetGestureParameters:	
  5589                           ; 1 bytes @ 0x0
  5590                           
  5591  0020                     ??_decodeGesture:	
  5592                           ; 1 bytes @ 0x0
  5593                           
  5594  0020                     ??_I2C_Start:	
  5595                           ; 1 bytes @ 0x0
  5596                           
  5597  0020                     ??_I2C_ReStart:	
  5598                           ; 1 bytes @ 0x0
  5599                           
  5600  0020                     ??_I2C_Send_NACK:	
  5601                           ; 1 bytes @ 0x0
  5602                           
  5603  0020                     ??_I2C_Stop:	
  5604                           ; 1 bytes @ 0x0
  5605                           
  5606  0020                     ??_SYSTEM_Initialize:	
  5607                           ; 1 bytes @ 0x0
  5608                           
  5609  0020                     ??_i2c1_driver_isBufferFull:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612  0020                     ??_SPI2_Exchange8bit:	
  5613                           ; 1 bytes @ 0x0
  5614                           
  5615  0020                     ?_strlen:	
  5616                           ; 1 bytes @ 0x0
  5617                           
  5618  0020                     ?_ADC_GetConversion:	
  5619                           ; 2 bytes @ 0x0
  5620                           
  5621  0020                     ?___wmul:	
  5622                           ; 2 bytes @ 0x0
  5623                           
  5624  0020                     i2c1_driver_TXData@d:	
  5625                           ; 2 bytes @ 0x0
  5626                           
  5627  0020                     SPI2_Exchange8bit@data:	
  5628                           ; 1 bytes @ 0x0
  5629                           
  5630  0020                     ___wmul@multiplier:	
  5631                           ; 1 bytes @ 0x0
  5632                           
  5633  0020                     strlen@s:	
  5634                           ; 2 bytes @ 0x0
  5635                           
  5636                           
  5637                           ; 2 bytes @ 0x0
  5638  0020                     	ds	1
  5639  0021                     ??_I2C_Write_Byte:	
  5640  0021                     ??_I2C_Read_Byte:	
  5641                           ; 1 bytes @ 0x1
  5642                           
  5643  0021                     ??_SPI_Write:	
  5644                           ; 1 bytes @ 0x1
  5645                           
  5646                           
  5647                           ; 1 bytes @ 0x1
  5648  0021                     	ds	1
  5649  0022                     ??_strlen:	
  5650  0022                     ??_ADC_GetConversion:	
  5651                           ; 1 bytes @ 0x2
  5652                           
  5653  0022                     SPI_Write@incoming:	
  5654                           ; 1 bytes @ 0x2
  5655                           
  5656  0022                     _decodeGesture$1540:	
  5657                           ; 1 bytes @ 0x2
  5658                           
  5659  0022                     ___wmul@multiplicand:	
  5660                           ; 2 bytes @ 0x2
  5661                           
  5662                           
  5663                           ; 2 bytes @ 0x2
  5664  0022                     	ds	1
  5665  0023                     ??_Display_Clear:	
  5666  0023                     ADC_GetConversion@channel:	
  5667                           ; 1 bytes @ 0x3
  5668                           
  5669  0023                     I2C_Write_Byte@Byte:	
  5670                           ; 1 bytes @ 0x3
  5671                           
  5672  0023                     strlen@a:	
  5673                           ; 1 bytes @ 0x3
  5674                           
  5675                           
  5676                           ; 2 bytes @ 0x3
  5677  0023                     	ds	1
  5678  0024                     ??___wmul:	
  5679  0024                     _decodeGesture$1541:	
  5680                           ; 1 bytes @ 0x4
  5681                           
  5682  0024                     I2C_Write_Byte@count:	
  5683                           ; 2 bytes @ 0x4
  5684                           
  5685  0024                     ___wmul@product:	
  5686                           ; 2 bytes @ 0x4
  5687                           
  5688                           
  5689                           ; 2 bytes @ 0x4
  5690  0024                     	ds	1
  5691  0025                     ?_Display_Name:	
  5692  0025                     Display_Name@string1:	
  5693                           ; 1 bytes @ 0x5
  5694                           
  5695                           
  5696                           ; 2 bytes @ 0x5
  5697  0025                     	ds	1
  5698  0026                     ??_wireReadDataByte:	
  5699  0026                     ?_wireWriteDataByte:	
  5700                           ; 1 bytes @ 0x6
  5701                           
  5702  0026                     ?_wireReadDataBlock:	
  5703                           ; 2 bytes @ 0x6
  5704                           
  5705  0026                     ?___awdiv:	
  5706                           ; 2 bytes @ 0x6
  5707                           
  5708  0026                     wireWriteDataByte@val:	
  5709                           ; 2 bytes @ 0x6
  5710                           
  5711  0026                     _decodeGesture$1542:	
  5712                           ; 1 bytes @ 0x6
  5713                           
  5714  0026                     wireReadDataBlock@val:	
  5715                           ; 2 bytes @ 0x6
  5716                           
  5717  0026                     ___awdiv@divisor:	
  5718                           ; 2 bytes @ 0x6
  5719                           
  5720                           
  5721                           ; 2 bytes @ 0x6
  5722  0026                     	ds	1
  5723  0027                     ??_Display_Name:	
  5724  0027                     wireReadDataByte@reg:	
  5725                           ; 1 bytes @ 0x7
  5726                           
  5727                           
  5728                           ; 1 bytes @ 0x7
  5729  0027                     	ds	1
  5730  0028                     wireReadDataByte@val:	
  5731  0028                     Display_Name@length:	
  5732                           ; 1 bytes @ 0x8
  5733                           
  5734  0028                     _decodeGesture$1543:	
  5735                           ; 2 bytes @ 0x8
  5736                           
  5737  0028                     wireReadDataBlock@len:	
  5738                           ; 2 bytes @ 0x8
  5739                           
  5740  0028                     ___awdiv@dividend:	
  5741                           ; 2 bytes @ 0x8
  5742                           
  5743                           
  5744                           ; 2 bytes @ 0x8
  5745  0028                     	ds	1
  5746  0029                     ??_isGestureAvailable:	
  5747  0029                     ??_wireWriteDataByte:	
  5748                           ; 1 bytes @ 0x9
  5749                           
  5750  0029                     ??_getMode:	
  5751                           ; 1 bytes @ 0x9
  5752                           
  5753  0029                     wireWriteDataByte@reg:	
  5754                           ; 1 bytes @ 0x9
  5755                           
  5756                           
  5757                           ; 1 bytes @ 0x9
  5758  0029                     	ds	1
  5759  002A                     ??_setLEDDrive:	
  5760  002A                     ??_setProximityGain:	
  5761                           ; 1 bytes @ 0xA
  5762                           
  5763  002A                     ??_setAmbientLightGain:	
  5764                           ; 1 bytes @ 0xA
  5765                           
  5766  002A                     ??_setProxIntLowThresh:	
  5767                           ; 1 bytes @ 0xA
  5768                           
  5769  002A                     ??_setProxIntHighThresh:	
  5770                           ; 1 bytes @ 0xA
  5771                           
  5772  002A                     ?_setLightIntLowThreshold:	
  5773                           ; 1 bytes @ 0xA
  5774                           
  5775  002A                     ?_setLightIntHighThreshold:	
  5776                           ; 1 bytes @ 0xA
  5777                           
  5778  002A                     ??_setGestureEnterThresh:	
  5779                           ; 1 bytes @ 0xA
  5780                           
  5781  002A                     ??_setGestureExitThresh:	
  5782                           ; 1 bytes @ 0xA
  5783                           
  5784  002A                     ??_setGestureGain:	
  5785                           ; 1 bytes @ 0xA
  5786                           
  5787  002A                     ??_setGestureLEDDrive:	
  5788                           ; 1 bytes @ 0xA
  5789                           
  5790  002A                     ??_setGestureWaitTime:	
  5791                           ; 1 bytes @ 0xA
  5792                           
  5793  002A                     ??_setGestureIntEnable:	
  5794                           ; 1 bytes @ 0xA
  5795                           
  5796  002A                     ??_setLEDBoost:	
  5797                           ; 1 bytes @ 0xA
  5798                           
  5799  002A                     ??_setGestureMode:	
  5800                           ; 1 bytes @ 0xA
  5801                           
  5802  002A                     ??_wireReadDataBlock:	
  5803                           ; 1 bytes @ 0xA
  5804                           
  5805  002A                     ??___awdiv:	
  5806                           ; 1 bytes @ 0xA
  5807                           
  5808  002A                     getMode@enable_value:	
  5809                           ; 1 bytes @ 0xA
  5810                           
  5811  002A                     isGestureAvailable@val:	
  5812                           ; 1 bytes @ 0xA
  5813                           
  5814  002A                     Display_Name@i:	
  5815                           ; 1 bytes @ 0xA
  5816                           
  5817  002A                     setLightIntLowThreshold@threshold:	
  5818                           ; 2 bytes @ 0xA
  5819                           
  5820  002A                     setLightIntHighThreshold@threshold:	
  5821                           ; 2 bytes @ 0xA
  5822                           
  5823  002A                     _decodeGesture$1544:	
  5824                           ; 2 bytes @ 0xA
  5825                           
  5826                           
  5827                           ; 2 bytes @ 0xA
  5828  002A                     	ds	1
  5829  002B                     ?_setMode:	
  5830  002B                     setMode@enable:	
  5831                           ; 1 bytes @ 0xB
  5832                           
  5833  002B                     setAmbientLightGain@drive:	
  5834                           ; 1 bytes @ 0xB
  5835                           
  5836  002B                     setProxIntLowThresh@threshold:	
  5837                           ; 1 bytes @ 0xB
  5838                           
  5839  002B                     setProxIntHighThresh@threshold:	
  5840                           ; 1 bytes @ 0xB
  5841                           
  5842  002B                     setGestureEnterThresh@threshold:	
  5843                           ; 1 bytes @ 0xB
  5844                           
  5845  002B                     setGestureExitThresh@threshold:	
  5846                           ; 1 bytes @ 0xB
  5847                           
  5848  002B                     setGestureWaitTime@time:	
  5849                           ; 1 bytes @ 0xB
  5850                           
  5851  002B                     setGestureIntEnable@val:	
  5852                           ; 1 bytes @ 0xB
  5853                           
  5854  002B                     setGestureMode@mode:	
  5855                           ; 1 bytes @ 0xB
  5856                           
  5857  002B                     ___awdiv@counter:	
  5858                           ; 1 bytes @ 0xB
  5859                           
  5860                           
  5861                           ; 1 bytes @ 0xB
  5862  002B                     	ds	1
  5863  002C                     ??_Get_ADC:	
  5864  002C                     ??_setMode:	
  5865                           ; 1 bytes @ 0xC
  5866                           
  5867  002C                     ??_setLightIntLowThreshold:	
  5868                           ; 1 bytes @ 0xC
  5869                           
  5870  002C                     ??_setLightIntHighThreshold:	
  5871                           ; 1 bytes @ 0xC
  5872                           
  5873  002C                     setLEDDrive@val:	
  5874                           ; 1 bytes @ 0xC
  5875                           
  5876  002C                     setProximityGain@val:	
  5877                           ; 1 bytes @ 0xC
  5878                           
  5879  002C                     setAmbientLightGain@val:	
  5880                           ; 1 bytes @ 0xC
  5881                           
  5882  002C                     setGestureGain@val:	
  5883                           ; 1 bytes @ 0xC
  5884                           
  5885  002C                     setGestureLEDDrive@val:	
  5886                           ; 1 bytes @ 0xC
  5887                           
  5888  002C                     setGestureWaitTime@val:	
  5889                           ; 1 bytes @ 0xC
  5890                           
  5891  002C                     setGestureIntEnable@enable:	
  5892                           ; 1 bytes @ 0xC
  5893                           
  5894  002C                     setLEDBoost@val:	
  5895                           ; 1 bytes @ 0xC
  5896                           
  5897  002C                     setGestureMode@val:	
  5898                           ; 1 bytes @ 0xC
  5899                           
  5900  002C                     ___awdiv@sign:	
  5901                           ; 1 bytes @ 0xC
  5902                           
  5903  002C                     _decodeGesture$1545:	
  5904                           ; 1 bytes @ 0xC
  5905                           
  5906                           
  5907                           ; 2 bytes @ 0xC
  5908  002C                     	ds	1
  5909  002D                     setLEDDrive@drive:	
  5910  002D                     setProximityGain@drive:	
  5911                           ; 1 bytes @ 0xD
  5912                           
  5913  002D                     setLightIntLowThreshold@val_low:	
  5914                           ; 1 bytes @ 0xD
  5915                           
  5916  002D                     setLightIntHighThreshold@val_low:	
  5917                           ; 1 bytes @ 0xD
  5918                           
  5919  002D                     setGestureGain@gain:	
  5920                           ; 1 bytes @ 0xD
  5921                           
  5922  002D                     setGestureLEDDrive@drive:	
  5923                           ; 1 bytes @ 0xD
  5924                           
  5925  002D                     setLEDBoost@boost:	
  5926                           ; 1 bytes @ 0xD
  5927                           
  5928  002D                     ___awdiv@quotient:	
  5929                           ; 1 bytes @ 0xD
  5930                           
  5931                           
  5932                           ; 2 bytes @ 0xD
  5933  002D                     	ds	1
  5934  002E                     setMode@reg_val:	
  5935  002E                     setLightIntLowThreshold@val_high:	
  5936                           ; 1 bytes @ 0xE
  5937                           
  5938  002E                     setLightIntHighThreshold@val_high:	
  5939                           ; 1 bytes @ 0xE
  5940                           
  5941  002E                     _decodeGesture$1546:	
  5942                           ; 1 bytes @ 0xE
  5943                           
  5944                           
  5945                           ; 2 bytes @ 0xE
  5946  002E                     	ds	1
  5947  002F                     ??_processGestureData:	
  5948  002F                     setMode@mode:	
  5949                           ; 1 bytes @ 0xF
  5950                           
  5951  002F                     wireReadDataBlock@reg:	
  5952                           ; 1 bytes @ 0xF
  5953                           
  5954  002F                     Get_ADC@val:	
  5955                           ; 1 bytes @ 0xF
  5956                           
  5957                           
  5958                           ; 2 bytes @ 0xF
  5959  002F                     	ds	1
  5960  0030                     ??_initialize:	
  5961  0030                     ??_enableGestureSensor:	
  5962                           ; 1 bytes @ 0x10
  5963                           
  5964  0030                     ??_enablePower:	
  5965                           ; 1 bytes @ 0x10
  5966                           
  5967  0030                     wireReadDataBlock@j:	
  5968                           ; 1 bytes @ 0x10
  5969                           
  5970  0030                     _decodeGesture$1547:	
  5971                           ; 1 bytes @ 0x10
  5972                           
  5973                           
  5974                           ; 2 bytes @ 0x10
  5975  0030                     	ds	1
  5976  0031                     initialize@id:	
  5977  0031                     enableGestureSensor@interrupts:	
  5978                           ; 1 bytes @ 0x11
  5979                           
  5980  0031                     processGestureData@ud_ratio_first:	
  5981                           ; 1 bytes @ 0x11
  5982                           
  5983                           
  5984                           ; 2 bytes @ 0x11
  5985  0031                     	ds	2
  5986  0033                     processGestureData@lr_ratio_first:	
  5987                           
  5988                           ; 2 bytes @ 0x13
  5989  0033                     	ds	2
  5990  0035                     processGestureData@ud_ratio_last:	
  5991                           
  5992                           ; 2 bytes @ 0x15
  5993  0035                     	ds	2
  5994  0037                     processGestureData@lr_ratio_last:	
  5995                           
  5996                           ; 2 bytes @ 0x17
  5997  0037                     	ds	2
  5998  0039                     _processGestureData$1535:	
  5999                           
  6000                           ; 2 bytes @ 0x19
  6001  0039                     	ds	2
  6002  003B                     _processGestureData$1536:	
  6003                           
  6004                           ; 2 bytes @ 0x1B
  6005  003B                     	ds	2
  6006  003D                     _processGestureData$1537:	
  6007                           
  6008                           ; 2 bytes @ 0x1D
  6009  003D                     	ds	2
  6010  003F                     _processGestureData$1538:	
  6011                           
  6012                           ; 2 bytes @ 0x1F
  6013  003F                     	ds	2
  6014  0041                     processGestureData@u_last:	
  6015                           
  6016                           ; 1 bytes @ 0x21
  6017  0041                     	ds	1
  6018  0042                     processGestureData@d_last:	
  6019                           
  6020                           ; 1 bytes @ 0x22
  6021  0042                     	ds	1
  6022  0043                     processGestureData@l_last:	
  6023                           
  6024                           ; 1 bytes @ 0x23
  6025  0043                     	ds	1
  6026  0044                     processGestureData@r_last:	
  6027                           
  6028                           ; 1 bytes @ 0x24
  6029  0044                     	ds	1
  6030  0045                     processGestureData@u_first:	
  6031                           
  6032                           ; 1 bytes @ 0x25
  6033  0045                     	ds	1
  6034  0046                     processGestureData@d_first:	
  6035                           
  6036                           ; 1 bytes @ 0x26
  6037  0046                     	ds	1
  6038  0047                     processGestureData@l_first:	
  6039                           
  6040                           ; 1 bytes @ 0x27
  6041  0047                     	ds	1
  6042  0048                     processGestureData@r_first:	
  6043                           
  6044                           ; 1 bytes @ 0x28
  6045  0048                     	ds	1
  6046  0049                     processGestureData@ud_delta:	
  6047                           
  6048                           ; 2 bytes @ 0x29
  6049  0049                     	ds	2
  6050  004B                     processGestureData@lr_delta:	
  6051                           
  6052                           ; 2 bytes @ 0x2B
  6053  004B                     	ds	2
  6054  004D                     processGestureData@i:	
  6055                           
  6056                           ; 2 bytes @ 0x2D
  6057  004D                     	ds	2
  6058  004F                     ?_readGesture:	
  6059                           
  6060                           ; 2 bytes @ 0x2F
  6061  004F                     	ds	2
  6062  0051                     ??_readGesture:	
  6063                           
  6064                           ; 1 bytes @ 0x31
  6065  0051                     	ds	2
  6066  0053                     readGesture@motion:	
  6067                           
  6068                           ; 2 bytes @ 0x33
  6069  0053                     	ds	2
  6070  0055                     readGesture@gstatus:	
  6071                           
  6072                           ; 1 bytes @ 0x35
  6073  0055                     	ds	1
  6074  0056                     readGesture@bytes_read:	
  6075                           
  6076                           ; 2 bytes @ 0x36
  6077  0056                     	ds	2
  6078  0058                     readGesture@fifo_level:	
  6079                           
  6080                           ; 1 bytes @ 0x38
  6081  0058                     	ds	1
  6082  0059                     readGesture@i:	
  6083                           
  6084                           ; 2 bytes @ 0x39
  6085  0059                     	ds	2
  6086  005B                     ??_handleGesture:	
  6087                           
  6088                           ; 1 bytes @ 0x3B
  6089  005B                     	ds	1
  6090  005C                     ??_main:	
  6091                           
  6092                           	psect	maintext
  6093  0D52                     __pmaintext:	
  6094                           ; 1 bytes @ 0x3C
  6095 ;;
  6096 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6097 ;;
  6098 ;; *************** function _main *****************
  6099 ;; Defined at:
  6100 ;;		line 110 in file "main.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;		None
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;  count           2    0        unsigned int 
  6105 ;;  temp            2    0        int 
  6106 ;;  startSystem     1    0        _Bool 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : B1F/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;Total ram usage:        3 bytes
  6121 ;; Hardware stack levels required when called:   12
  6122 ;; This function calls:
  6123 ;;		_Display_Clear
  6124 ;;		_Display_Name
  6125 ;;		_Get_ADC
  6126 ;;		_PIR_Sensor
  6127 ;;		_SYSTEM_Initialize
  6128 ;;		_enableGestureSensor
  6129 ;;		_handleGesture
  6130 ;;		_initialize
  6131 ;;		_isGestureAvailable
  6132 ;; This function is called by:
  6133 ;;		Startup code after reset
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _main
  6139  0D52                     _main:	
  6140                           
  6141                           ;main.c: 113:     SYSTEM_Initialize();
  6142                           
  6143                           ;incstack = 0
  6144                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6145  0D52  318A  223E  318D   	fcall	_SYSTEM_Initialize
  6146                           
  6147                           ;main.c: 119:     (INTCONbits.GIE = 1);
  6148  0D55  178B               	bsf	11,7	;volatile
  6149                           
  6150                           ;main.c: 122:     (INTCONbits.PEIE = 1);
  6151  0D56  170B               	bsf	11,6	;volatile
  6152                           
  6153                           ;main.c: 125:     Display_Clear();
  6154  0D57  3189  21A1  318D   	fcall	_Display_Clear
  6155                           
  6156                           ;main.c: 127:     if(PIR_Sensor()) {
  6157  0D5A  3189  210D  318D   	fcall	_PIR_Sensor
  6158  0D5D  3A00               	xorlw	0
  6159  0D5E  1903               	skipnz
  6160  0D5F  2D67               	goto	l7124
  6161                           
  6162                           ;main.c: 128:         if(initialize()){
  6163  0D60  3184  24CA  318D   	fcall	_initialize
  6164                           
  6165                           ;main.c: 131:         if(enableGestureSensor(0)){
  6166  0D63  3000               	movlw	0
  6167  0D64  318F  279C  318D   	fcall	_enableGestureSensor
  6168  0D67                     l7124:	
  6169                           ;main.c: 144:         if(startSystem) {
  6170                           
  6171                           ;main.c: 136:     _Bool startSystem;;main.c: 137:     int temp;;main.c: 138:     while (
      +                          1)
  6172                           
  6173                           
  6174                           ;main.c: 145:             if(start == 1) {
  6175  0D67  0020               	movlb	0	; select bank0
  6176  0D68  036E               	decf	_start,w
  6177  0D69  1D03               	btfss	3,2
  6178  0D6A  2D79               	goto	l7130
  6179                           
  6180                           ;main.c: 146:                 Display_Name(names[name]);
  6181  0D6B  355C               	lslf	_name,w
  6182  0D6C  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6183  0D6D  0086               	movwf	6
  6184  0D6E  3001               	movlw	1	; select bank2/3
  6185  0D6F  0087               	movwf	7
  6186  0D70  3F40               	moviw [0]fsr1
  6187  0D71  00A5               	movwf	Display_Name@string1
  6188  0D72  3F41               	moviw [1]fsr1
  6189  0D73  00A6               	movwf	Display_Name@string1+1
  6190  0D74  318E  26A0  318D   	fcall	_Display_Name
  6191                           
  6192                           ;main.c: 147:                 start = 0;
  6193  0D77  0020               	movlb	0	; select bank0
  6194  0D78  01EE               	clrf	_start
  6195  0D79                     l7130:	
  6196                           
  6197                           ;main.c: 149:             Get_ADC();
  6198  0D79  3186  26D3  318D   	fcall	_Get_ADC
  6199                           
  6200                           ;main.c: 151:             if( isGestureAvailable()){
  6201  0D7C  3189  21B2  318D   	fcall	_isGestureAvailable
  6202  0D7F  3A00               	xorlw	0
  6203  0D80  1903               	skipnz
  6204  0D81  2D67               	goto	l7124
  6205                           
  6206                           ;main.c: 152:                 handleGesture();
  6207  0D82  318F  2742  318D   	fcall	_handleGesture
  6208  0D85  2D67               	goto	l7124
  6209  0D86                     __end_of_main:	
  6210                           
  6211                           	psect	text1
  6212  04CA                     __ptext1:	
  6213 ;; *************** function _initialize *****************
  6214 ;; Defined at:
  6215 ;;		line 20 in file "APDS9960.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  id              1   17[BANK0 ] unsigned char 
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      _Bool 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2, status,0, pclath, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;Total ram usage:        2 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:   10
  6236 ;; This function calls:
  6237 ;;		_i2c1_driver_open
  6238 ;;		_setAmbientLightGain
  6239 ;;		_setGestureEnterThresh
  6240 ;;		_setGestureExitThresh
  6241 ;;		_setGestureGain
  6242 ;;		_setGestureIntEnable
  6243 ;;		_setGestureLEDDrive
  6244 ;;		_setGestureWaitTime
  6245 ;;		_setLEDDrive
  6246 ;;		_setLightIntHighThreshold
  6247 ;;		_setLightIntLowThreshold
  6248 ;;		_setMode
  6249 ;;		_setProxIntHighThresh
  6250 ;;		_setProxIntLowThresh
  6251 ;;		_setProximityGain
  6252 ;;		_wireReadDataByte
  6253 ;;		_wireWriteDataByte
  6254 ;; This function is called by:
  6255 ;;		_main
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function _initialize
  6261  04CA                     _initialize:	
  6262                           
  6263                           ;APDS9960.c: 25:     i2c1_driver_open();
  6264                           
  6265                           ;incstack = 0
  6266                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6267  04CA  3189  2163  3184   	fcall	_i2c1_driver_open
  6268                           
  6269                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6270  04CD  3092               	movlw	146
  6271  04CE  318A  22FD  3184   	fcall	_wireReadDataByte
  6272  04D1  0020               	movlb	0	; select bank0
  6273  04D2  00B0               	movwf	??_initialize
  6274  04D3  0830               	movf	??_initialize,w
  6275  04D4  00B1               	movwf	initialize@id
  6276                           
  6277                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6278  04D5  30AB               	movlw	171
  6279  04D6  0631               	xorwf	initialize@id,w
  6280  04D7  1903               	btfsc	3,2
  6281  04D8  2CDF               	goto	l6754
  6282  04D9  309C               	movlw	156
  6283  04DA  0631               	xorwf	initialize@id,w
  6284  04DB  1903               	btfsc	3,2
  6285  04DC  2CDF               	goto	l6754
  6286  04DD                     l6750:	
  6287                           
  6288                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6289  04DD  3000               	movlw	0
  6290  04DE  0008               	return
  6291  04DF                     l6754:	
  6292                           
  6293                           ;APDS9960.c: 39:     setMode(7, 0);
  6294  04DF  01AB               	clrf	setMode@enable
  6295  04E0  3007               	movlw	7
  6296  04E1  318E  2651  3184   	fcall	_setMode
  6297                           
  6298                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6299  04E4  30DB               	movlw	219
  6300  04E5  0020               	movlb	0	; select bank0
  6301  04E6  00B0               	movwf	??_initialize
  6302  04E7  0830               	movf	??_initialize,w
  6303  04E8  00A6               	movwf	wireWriteDataByte@val
  6304  04E9  3081               	movlw	129
  6305  04EA  318A  226E  3184   	fcall	_wireWriteDataByte
  6306                           
  6307                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6308  04ED  30F6               	movlw	246
  6309  04EE  0020               	movlb	0	; select bank0
  6310  04EF  00B0               	movwf	??_initialize
  6311  04F0  0830               	movf	??_initialize,w
  6312  04F1  00A6               	movwf	wireWriteDataByte@val
  6313  04F2  3083               	movlw	131
  6314  04F3  318A  226E  3184   	fcall	_wireWriteDataByte
  6315                           
  6316                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6317  04F6  3087               	movlw	135
  6318  04F7  0020               	movlb	0	; select bank0
  6319  04F8  00B0               	movwf	??_initialize
  6320  04F9  0830               	movf	??_initialize,w
  6321  04FA  00A6               	movwf	wireWriteDataByte@val
  6322  04FB  308E               	movlw	142
  6323  04FC  318A  226E  3184   	fcall	_wireWriteDataByte
  6324                           
  6325                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6326  04FF  0020               	movlb	0	; select bank0
  6327  0500  01A6               	clrf	wireWriteDataByte@val
  6328  0501  309D               	movlw	157
  6329  0502  318A  226E  3184   	fcall	_wireWriteDataByte
  6330                           
  6331                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6332  0505  0020               	movlb	0	; select bank0
  6333  0506  01A6               	clrf	wireWriteDataByte@val
  6334  0507  309E               	movlw	158
  6335  0508  318A  226E  3184   	fcall	_wireWriteDataByte
  6336                           
  6337                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6338  050B  3060               	movlw	96
  6339  050C  0020               	movlb	0	; select bank0
  6340  050D  00B0               	movwf	??_initialize
  6341  050E  0830               	movf	??_initialize,w
  6342  050F  00A6               	movwf	wireWriteDataByte@val
  6343  0510  308D               	movlw	141
  6344  0511  318A  226E  3184   	fcall	_wireWriteDataByte
  6345                           
  6346                           ;APDS9960.c: 47:     setLEDDrive(0);
  6347  0514  3000               	movlw	0
  6348  0515  318B  23E3  3184   	fcall	_setLEDDrive
  6349                           
  6350                           ;APDS9960.c: 48:     setProximityGain(2);
  6351  0518  3002               	movlw	2
  6352  0519  318C  240C  3184   	fcall	_setProximityGain
  6353                           
  6354                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6355  051C  3001               	movlw	1
  6356  051D  318A  22DF  3184   	fcall	_setAmbientLightGain
  6357                           
  6358                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6359  0520  3000               	movlw	0
  6360  0521  3189  21FE  3184   	fcall	_setProxIntLowThresh
  6361  0524  3A00               	xorlw	0
  6362  0525  1903               	btfsc	3,2
  6363  0526  2CDD               	goto	l6750
  6364                           
  6365                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6366  0527  3032               	movlw	50
  6367  0528  3189  21EB  3184   	fcall	_setProxIntHighThresh
  6368  052B  3A00               	xorlw	0
  6369  052C  1903               	btfsc	3,2
  6370  052D  2CDD               	goto	l6750
  6371                           
  6372                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6373  052E  30FF               	movlw	255
  6374  052F  0020               	movlb	0	; select bank0
  6375  0530  00AA               	movwf	setLightIntLowThreshold@threshold
  6376  0531  30FF               	movlw	255
  6377  0532  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6378  0533  318B  23BC  3184   	fcall	_setLightIntLowThreshold
  6379  0536  3A00               	xorlw	0
  6380  0537  1903               	btfsc	3,2
  6381  0538  2CDD               	goto	l6750
  6382                           
  6383                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6384  0539  3000               	movlw	0
  6385  053A  0020               	movlb	0	; select bank0
  6386  053B  00AA               	movwf	setLightIntHighThreshold@threshold
  6387  053C  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6388  053D  318B  2395  3184   	fcall	_setLightIntHighThreshold
  6389  0540  3A00               	xorlw	0
  6390  0541  1903               	btfsc	3,2
  6391  0542  2CDD               	goto	l6750
  6392                           
  6393                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6394  0543  3011               	movlw	17
  6395  0544  0020               	movlb	0	; select bank0
  6396  0545  00B0               	movwf	??_initialize
  6397  0546  0830               	movf	??_initialize,w
  6398  0547  00A6               	movwf	wireWriteDataByte@val
  6399  0548  308C               	movlw	140
  6400  0549  318A  226E  3184   	fcall	_wireWriteDataByte
  6401  054C  0020               	movlb	0	; select bank0
  6402  054D  0826               	movf	?_wireWriteDataByte,w
  6403  054E  0427               	iorwf	?_wireWriteDataByte+1,w
  6404  054F  1903               	btfsc	3,2
  6405  0550  2CDD               	goto	l6750
  6406                           
  6407                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6408  0551  01A6               	clrf	wireWriteDataByte@val
  6409  0552  0AA6               	incf	wireWriteDataByte@val,f
  6410  0553  3090               	movlw	144
  6411  0554  318A  226E  3184   	fcall	_wireWriteDataByte
  6412  0557  0020               	movlb	0	; select bank0
  6413  0558  0826               	movf	?_wireWriteDataByte,w
  6414  0559  0427               	iorwf	?_wireWriteDataByte+1,w
  6415  055A  1903               	btfsc	3,2
  6416  055B  2CDD               	goto	l6750
  6417                           
  6418                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6419  055C  01A6               	clrf	wireWriteDataByte@val
  6420  055D  309F               	movlw	159
  6421  055E  318A  226E  3184   	fcall	_wireWriteDataByte
  6422  0561  0020               	movlb	0	; select bank0
  6423  0562  0826               	movf	?_wireWriteDataByte,w
  6424  0563  0427               	iorwf	?_wireWriteDataByte+1,w
  6425  0564  1903               	btfsc	3,2
  6426  0565  2CDD               	goto	l6750
  6427                           
  6428                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6429  0566  3028               	movlw	40
  6430  0567  3189  21C5  3184   	fcall	_setGestureEnterThresh
  6431  056A  3A00               	xorlw	0
  6432  056B  1903               	btfsc	3,2
  6433  056C  2CDD               	goto	l6750
  6434                           
  6435                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6436  056D  301E               	movlw	30
  6437  056E  3189  21D8  3184   	fcall	_setGestureExitThresh
  6438  0571  3A00               	xorlw	0
  6439  0572  1903               	btfsc	3,2
  6440  0573  2CDD               	goto	l6750
  6441                           
  6442                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6443  0574  3040               	movlw	64
  6444  0575  0020               	movlb	0	; select bank0
  6445  0576  00B0               	movwf	??_initialize
  6446  0577  0830               	movf	??_initialize,w
  6447  0578  00A6               	movwf	wireWriteDataByte@val
  6448  0579  30A2               	movlw	162
  6449  057A  318A  226E  3184   	fcall	_wireWriteDataByte
  6450  057D  0020               	movlb	0	; select bank0
  6451  057E  0826               	movf	?_wireWriteDataByte,w
  6452  057F  0427               	iorwf	?_wireWriteDataByte+1,w
  6453  0580  1903               	btfsc	3,2
  6454  0581  2CDD               	goto	l6750
  6455                           
  6456                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6457  0582  3002               	movlw	2
  6458  0583  318C  24EE  3184   	fcall	_setGestureGain
  6459  0586  3A00               	xorlw	0
  6460  0587  1903               	btfsc	3,2
  6461  0588  2CDD               	goto	l6750
  6462                           
  6463                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  6464  0589  3000               	movlw	0
  6465  058A  318D  2520  3184   	fcall	_setGestureLEDDrive
  6466  058D  3A00               	xorlw	0
  6467  058E  1903               	btfsc	3,2
  6468  058F  2CDD               	goto	l6750
  6469                           
  6470                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  6471  0590  3001               	movlw	1
  6472  0591  318B  236E  3184   	fcall	_setGestureWaitTime
  6473  0594  3A00               	xorlw	0
  6474  0595  1903               	btfsc	3,2
  6475  0596  2CDD               	goto	l6750
  6476                           
  6477                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  6478  0597  0020               	movlb	0	; select bank0
  6479  0598  01A6               	clrf	wireWriteDataByte@val
  6480  0599  30A4               	movlw	164
  6481  059A  318A  226E  3184   	fcall	_wireWriteDataByte
  6482  059D  0020               	movlb	0	; select bank0
  6483  059E  0826               	movf	?_wireWriteDataByte,w
  6484  059F  0427               	iorwf	?_wireWriteDataByte+1,w
  6485  05A0  1903               	btfsc	3,2
  6486  05A1  2CDD               	goto	l6750
  6487                           
  6488                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  6489  05A2  01A6               	clrf	wireWriteDataByte@val
  6490  05A3  30A5               	movlw	165
  6491  05A4  318A  226E  3184   	fcall	_wireWriteDataByte
  6492  05A7  0020               	movlb	0	; select bank0
  6493  05A8  0826               	movf	?_wireWriteDataByte,w
  6494  05A9  0427               	iorwf	?_wireWriteDataByte+1,w
  6495  05AA  1903               	btfsc	3,2
  6496  05AB  2CDD               	goto	l6750
  6497                           
  6498                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  6499  05AC  01A6               	clrf	wireWriteDataByte@val
  6500  05AD  30A7               	movlw	167
  6501  05AE  318A  226E  3184   	fcall	_wireWriteDataByte
  6502  05B1  0020               	movlb	0	; select bank0
  6503  05B2  0826               	movf	?_wireWriteDataByte,w
  6504  05B3  0427               	iorwf	?_wireWriteDataByte+1,w
  6505  05B4  1903               	btfsc	3,2
  6506  05B5  2CDD               	goto	l6750
  6507                           
  6508                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  6509  05B6  01A6               	clrf	wireWriteDataByte@val
  6510  05B7  30A9               	movlw	169
  6511  05B8  318A  226E  3184   	fcall	_wireWriteDataByte
  6512  05BB  0020               	movlb	0	; select bank0
  6513  05BC  0826               	movf	?_wireWriteDataByte,w
  6514  05BD  0427               	iorwf	?_wireWriteDataByte+1,w
  6515  05BE  1903               	btfsc	3,2
  6516  05BF  2CDD               	goto	l6750
  6517                           
  6518                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  6519  05C0  30C9               	movlw	201
  6520  05C1  00B0               	movwf	??_initialize
  6521  05C2  0830               	movf	??_initialize,w
  6522  05C3  00A6               	movwf	wireWriteDataByte@val
  6523  05C4  30A6               	movlw	166
  6524  05C5  318A  226E  3184   	fcall	_wireWriteDataByte
  6525  05C8  0020               	movlb	0	; select bank0
  6526  05C9  0826               	movf	?_wireWriteDataByte,w
  6527  05CA  0427               	iorwf	?_wireWriteDataByte+1,w
  6528  05CB  1903               	btfsc	3,2
  6529  05CC  2CDD               	goto	l6750
  6530                           
  6531                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  6532  05CD  01A6               	clrf	wireWriteDataByte@val
  6533  05CE  30AA               	movlw	170
  6534  05CF  318A  226E  3184   	fcall	_wireWriteDataByte
  6535  05D2  0020               	movlb	0	; select bank0
  6536  05D3  0826               	movf	?_wireWriteDataByte,w
  6537  05D4  0427               	iorwf	?_wireWriteDataByte+1,w
  6538  05D5  1903               	btfsc	3,2
  6539  05D6  2CDD               	goto	l6750
  6540                           
  6541                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  6542  05D7  3000               	movlw	0
  6543  05D8  318C  2460  3184   	fcall	_setGestureIntEnable
  6544  05DB  3A00               	xorlw	0
  6545  05DC  1903               	btfsc	3,2
  6546  05DD  2CDD               	goto	l6750
  6547                           
  6548                           ;APDS9960.c: 120:     return 1;
  6549  05DE  3001               	movlw	1
  6550  05DF  0008               	return
  6551  05E0                     __end_of_initialize:	
  6552                           
  6553                           	psect	text2
  6554  0C0C                     __ptext2:	
  6555 ;; *************** function _setProximityGain *****************
  6556 ;; Defined at:
  6557 ;;		line 192 in file "APDS9960.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  drive           1    wreg     unsigned char 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  drive           1   13[BANK0 ] unsigned char 
  6562 ;;  val             1   12[BANK0 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      _Bool 
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        4 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    8
  6579 ;; This function calls:
  6580 ;;		_wireReadDataByte
  6581 ;;		_wireWriteDataByte
  6582 ;; This function is called by:
  6583 ;;		_initialize
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _setProximityGain
  6589  0C0C                     _setProximityGain:	
  6590                           
  6591                           ;incstack = 0
  6592                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  6593                           ;setProximityGain@drive stored from wreg
  6594  0C0C  0020               	movlb	0	; select bank0
  6595  0C0D  00AD               	movwf	setProximityGain@drive
  6596                           
  6597                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  6598  0C0E  308F               	movlw	143
  6599  0C0F  318A  22FD  318C   	fcall	_wireReadDataByte
  6600  0C12  0020               	movlb	0	; select bank0
  6601  0C13  00AA               	movwf	??_setProximityGain
  6602  0C14  082A               	movf	??_setProximityGain,w
  6603  0C15  00AC               	movwf	setProximityGain@val
  6604                           
  6605                           ;APDS9960.c: 199:     drive &= 0b00000011;
  6606  0C16  3003               	movlw	3
  6607  0C17  00AA               	movwf	??_setProximityGain
  6608  0C18  082A               	movf	??_setProximityGain,w
  6609  0C19  05AD               	andwf	setProximityGain@drive,f
  6610                           
  6611                           ;APDS9960.c: 200:     drive = drive << 2;
  6612  0C1A  082D               	movf	setProximityGain@drive,w
  6613  0C1B  00AA               	movwf	??_setProximityGain
  6614  0C1C  3001               	movlw	1
  6615  0C1D                     u5615:	
  6616  0C1D  35AA               	lslf	??_setProximityGain,f
  6617  0C1E  3EFF               	addlw	-1
  6618  0C1F  1D03               	skipz
  6619  0C20  2C1D               	goto	u5615
  6620  0C21  352A               	lslf	??_setProximityGain,w
  6621  0C22  00AB               	movwf	??_setProximityGain+1
  6622  0C23  082B               	movf	??_setProximityGain+1,w
  6623  0C24  00AD               	movwf	setProximityGain@drive
  6624                           
  6625                           ;APDS9960.c: 201:     val &= 0b11110011;
  6626  0C25  30F3               	movlw	243
  6627  0C26  00AA               	movwf	??_setProximityGain
  6628  0C27  082A               	movf	??_setProximityGain,w
  6629  0C28  05AC               	andwf	setProximityGain@val,f
  6630                           
  6631                           ;APDS9960.c: 202:     val |= drive;
  6632  0C29  082D               	movf	setProximityGain@drive,w
  6633  0C2A  00AA               	movwf	??_setProximityGain
  6634  0C2B  082A               	movf	??_setProximityGain,w
  6635  0C2C  04AC               	iorwf	setProximityGain@val,f
  6636                           
  6637                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  6638  0C2D  082C               	movf	setProximityGain@val,w
  6639  0C2E  00AA               	movwf	??_setProximityGain
  6640  0C2F  082A               	movf	??_setProximityGain,w
  6641  0C30  00A6               	movwf	wireWriteDataByte@val
  6642  0C31  308F               	movlw	143
  6643  0C32  318A  226E         	fcall	_wireWriteDataByte
  6644  0C34  0008               	return
  6645  0C35                     __end_of_setProximityGain:	
  6646                           
  6647                           	psect	text3
  6648  09FE                     __ptext3:	
  6649 ;; *************** function _setProxIntLowThresh *****************
  6650 ;; Defined at:
  6651 ;;		line 234 in file "APDS9960.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  threshold       1    wreg     unsigned char 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  threshold       1   11[BANK0 ] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  1    wreg      _Bool 
  6658 ;; Registers used:
  6659 ;;		wreg, status,2, status,0, pclath, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;Total ram usage:        2 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    8
  6672 ;; This function calls:
  6673 ;;		_wireWriteDataByte
  6674 ;; This function is called by:
  6675 ;;		_initialize
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _setProxIntLowThresh
  6681  09FE                     _setProxIntLowThresh:	
  6682                           
  6683                           ;incstack = 0
  6684                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  6685                           ;setProxIntLowThresh@threshold stored from wreg
  6686  09FE  0020               	movlb	0	; select bank0
  6687  09FF  00AB               	movwf	setProxIntLowThresh@threshold
  6688                           
  6689                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  6690  0A00  082B               	movf	setProxIntLowThresh@threshold,w
  6691  0A01  00AA               	movwf	??_setProxIntLowThresh
  6692  0A02  082A               	movf	??_setProxIntLowThresh,w
  6693  0A03  00A6               	movwf	wireWriteDataByte@val
  6694  0A04  3089               	movlw	137
  6695  0A05  318A  226E  3189   	fcall	_wireWriteDataByte
  6696  0A08  0020               	movlb	0	; select bank0
  6697  0A09  0826               	movf	?_wireWriteDataByte,w
  6698  0A0A  0427               	iorwf	?_wireWriteDataByte+1,w
  6699  0A0B  1D03               	btfss	3,2
  6700  0A0C  2A0F               	goto	l6494
  6701                           
  6702                           ;APDS9960.c: 237:         return 0;
  6703  0A0D  3000               	movlw	0
  6704  0A0E  0008               	return
  6705  0A0F                     l6494:	
  6706                           
  6707                           ;APDS9960.c: 240:     return 1;
  6708  0A0F  3001               	movlw	1
  6709  0A10  0008               	return
  6710  0A11                     __end_of_setProxIntLowThresh:	
  6711                           
  6712                           	psect	text4
  6713  09EB                     __ptext4:	
  6714 ;; *************** function _setProxIntHighThresh *****************
  6715 ;; Defined at:
  6716 ;;		line 244 in file "APDS9960.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  threshold       1    wreg     unsigned char 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  threshold       1   11[BANK0 ] unsigned char 
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      _Bool 
  6723 ;; Registers used:
  6724 ;;		wreg, status,2, status,0, pclath, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;Total ram usage:        2 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    8
  6737 ;; This function calls:
  6738 ;;		_wireWriteDataByte
  6739 ;; This function is called by:
  6740 ;;		_initialize
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           
  6745                           ;psect for function _setProxIntHighThresh
  6746  09EB                     _setProxIntHighThresh:	
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  6750                           ;setProxIntHighThresh@threshold stored from wreg
  6751  09EB  0020               	movlb	0	; select bank0
  6752  09EC  00AB               	movwf	setProxIntHighThresh@threshold
  6753                           
  6754                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  6755  09ED  082B               	movf	setProxIntHighThresh@threshold,w
  6756  09EE  00AA               	movwf	??_setProxIntHighThresh
  6757  09EF  082A               	movf	??_setProxIntHighThresh,w
  6758  09F0  00A6               	movwf	wireWriteDataByte@val
  6759  09F1  308B               	movlw	139
  6760  09F2  318A  226E  3189   	fcall	_wireWriteDataByte
  6761  09F5  0020               	movlb	0	; select bank0
  6762  09F6  0826               	movf	?_wireWriteDataByte,w
  6763  09F7  0427               	iorwf	?_wireWriteDataByte+1,w
  6764  09F8  1D03               	btfss	3,2
  6765  09F9  29FC               	goto	l6504
  6766                           
  6767                           ;APDS9960.c: 247:         return 0;
  6768  09FA  3000               	movlw	0
  6769  09FB  0008               	return
  6770  09FC                     l6504:	
  6771                           
  6772                           ;APDS9960.c: 250:     return 1;
  6773  09FC  3001               	movlw	1
  6774  09FD  0008               	return
  6775  09FE                     __end_of_setProxIntHighThresh:	
  6776                           
  6777                           	psect	text5
  6778  0BBC                     __ptext5:	
  6779 ;; *************** function _setLightIntLowThreshold *****************
  6780 ;; Defined at:
  6781 ;;		line 254 in file "APDS9960.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  threshold       2   10[BANK0 ] unsigned short 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  val_high        1   14[BANK0 ] unsigned char 
  6786 ;;  val_low         1   13[BANK0 ] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      _Bool 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6796 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;Total ram usage:        5 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    8
  6803 ;; This function calls:
  6804 ;;		_wireWriteDataByte
  6805 ;; This function is called by:
  6806 ;;		_initialize
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           
  6811                           ;psect for function _setLightIntLowThreshold
  6812  0BBC                     _setLightIntLowThreshold:	
  6813                           
  6814                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  6815                           
  6816                           ;incstack = 0
  6817                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  6818  0BBC  0020               	movlb	0	; select bank0
  6819  0BBD  082A               	movf	setLightIntLowThreshold@threshold,w
  6820  0BBE  00AC               	movwf	??_setLightIntLowThreshold
  6821  0BBF  082C               	movf	??_setLightIntLowThreshold,w
  6822  0BC0  00AD               	movwf	setLightIntLowThreshold@val_low
  6823                           
  6824                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  6825  0BC1  082B               	movf	setLightIntLowThreshold@threshold+1,w
  6826  0BC2  00AC               	movwf	??_setLightIntLowThreshold
  6827  0BC3  082C               	movf	??_setLightIntLowThreshold,w
  6828  0BC4  00AE               	movwf	setLightIntLowThreshold@val_high
  6829                           
  6830                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  6831  0BC5  082D               	movf	setLightIntLowThreshold@val_low,w
  6832  0BC6  00AC               	movwf	??_setLightIntLowThreshold
  6833  0BC7  082C               	movf	??_setLightIntLowThreshold,w
  6834  0BC8  00A6               	movwf	wireWriteDataByte@val
  6835  0BC9  3084               	movlw	132
  6836  0BCA  318A  226E  318B   	fcall	_wireWriteDataByte
  6837  0BCD  0020               	movlb	0	; select bank0
  6838  0BCE  0826               	movf	?_wireWriteDataByte,w
  6839  0BCF  0427               	iorwf	?_wireWriteDataByte+1,w
  6840  0BD0  1D03               	btfss	3,2
  6841  0BD1  2BD4               	goto	l6518
  6842  0BD2                     l6514:	
  6843                           
  6844                           ;APDS9960.c: 265:         return 0;
  6845  0BD2  3000               	movlw	0
  6846  0BD3  0008               	return
  6847  0BD4                     l6518:	
  6848                           
  6849                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  6850  0BD4  082E               	movf	setLightIntLowThreshold@val_high,w
  6851  0BD5  00AC               	movwf	??_setLightIntLowThreshold
  6852  0BD6  082C               	movf	??_setLightIntLowThreshold,w
  6853  0BD7  00A6               	movwf	wireWriteDataByte@val
  6854  0BD8  3085               	movlw	133
  6855  0BD9  318A  226E  318B   	fcall	_wireWriteDataByte
  6856  0BDC  0020               	movlb	0	; select bank0
  6857  0BDD  0826               	movf	?_wireWriteDataByte,w
  6858  0BDE  0427               	iorwf	?_wireWriteDataByte+1,w
  6859  0BDF  1903               	btfsc	3,2
  6860  0BE0  2BD2               	goto	l6514
  6861                           
  6862                           ;APDS9960.c: 273:     return 1;
  6863  0BE1  3001               	movlw	1
  6864  0BE2  0008               	return
  6865  0BE3                     __end_of_setLightIntLowThreshold:	
  6866                           
  6867                           	psect	text6
  6868  0B95                     __ptext6:	
  6869 ;; *************** function _setLightIntHighThreshold *****************
  6870 ;; Defined at:
  6871 ;;		line 277 in file "APDS9960.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  threshold       2   10[BANK0 ] unsigned short 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  val_high        1   14[BANK0 ] unsigned char 
  6876 ;;  val_low         1   13[BANK0 ] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      _Bool 
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0, pclath, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6886 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;Total ram usage:        5 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    8
  6893 ;; This function calls:
  6894 ;;		_wireWriteDataByte
  6895 ;; This function is called by:
  6896 ;;		_initialize
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           
  6901                           ;psect for function _setLightIntHighThreshold
  6902  0B95                     _setLightIntHighThreshold:	
  6903                           
  6904                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  6905                           
  6906                           ;incstack = 0
  6907                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  6908  0B95  0020               	movlb	0	; select bank0
  6909  0B96  082A               	movf	setLightIntHighThreshold@threshold,w
  6910  0B97  00AC               	movwf	??_setLightIntHighThreshold
  6911  0B98  082C               	movf	??_setLightIntHighThreshold,w
  6912  0B99  00AD               	movwf	setLightIntHighThreshold@val_low
  6913                           
  6914                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  6915  0B9A  082B               	movf	setLightIntHighThreshold@threshold+1,w
  6916  0B9B  00AC               	movwf	??_setLightIntHighThreshold
  6917  0B9C  082C               	movf	??_setLightIntHighThreshold,w
  6918  0B9D  00AE               	movwf	setLightIntHighThreshold@val_high
  6919                           
  6920                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  6921  0B9E  082D               	movf	setLightIntHighThreshold@val_low,w
  6922  0B9F  00AC               	movwf	??_setLightIntHighThreshold
  6923  0BA0  082C               	movf	??_setLightIntHighThreshold,w
  6924  0BA1  00A6               	movwf	wireWriteDataByte@val
  6925  0BA2  3086               	movlw	134
  6926  0BA3  318A  226E  318B   	fcall	_wireWriteDataByte
  6927  0BA6  0020               	movlb	0	; select bank0
  6928  0BA7  0826               	movf	?_wireWriteDataByte,w
  6929  0BA8  0427               	iorwf	?_wireWriteDataByte+1,w
  6930  0BA9  1D03               	btfss	3,2
  6931  0BAA  2BAD               	goto	l6538
  6932  0BAB                     l6534:	
  6933                           
  6934                           ;APDS9960.c: 288:         return 0;
  6935  0BAB  3000               	movlw	0
  6936  0BAC  0008               	return
  6937  0BAD                     l6538:	
  6938                           
  6939                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  6940  0BAD  082E               	movf	setLightIntHighThreshold@val_high,w
  6941  0BAE  00AC               	movwf	??_setLightIntHighThreshold
  6942  0BAF  082C               	movf	??_setLightIntHighThreshold,w
  6943  0BB0  00A6               	movwf	wireWriteDataByte@val
  6944  0BB1  3087               	movlw	135
  6945  0BB2  318A  226E  318B   	fcall	_wireWriteDataByte
  6946  0BB5  0020               	movlb	0	; select bank0
  6947  0BB6  0826               	movf	?_wireWriteDataByte,w
  6948  0BB7  0427               	iorwf	?_wireWriteDataByte+1,w
  6949  0BB8  1903               	btfsc	3,2
  6950  0BB9  2BAB               	goto	l6534
  6951                           
  6952                           ;APDS9960.c: 296:     return 1;
  6953  0BBA  3001               	movlw	1
  6954  0BBB  0008               	return
  6955  0BBC                     __end_of_setLightIntHighThreshold:	
  6956                           
  6957                           	psect	text7
  6958  0BE3                     __ptext7:	
  6959 ;; *************** function _setLEDDrive *****************
  6960 ;; Defined at:
  6961 ;;		line 170 in file "APDS9960.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  drive           1    wreg     unsigned char 
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;  drive           1   13[BANK0 ] unsigned char 
  6966 ;;  val             1   12[BANK0 ] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      _Bool 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, pclath, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;Total ram usage:        4 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    8
  6983 ;; This function calls:
  6984 ;;		_wireReadDataByte
  6985 ;;		_wireWriteDataByte
  6986 ;; This function is called by:
  6987 ;;		_initialize
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _setLEDDrive
  6993  0BE3                     _setLEDDrive:	
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  6997                           ;setLEDDrive@drive stored from wreg
  6998  0BE3  0020               	movlb	0	; select bank0
  6999  0BE4  00AD               	movwf	setLEDDrive@drive
  7000                           
  7001                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7002  0BE5  308F               	movlw	143
  7003  0BE6  318A  22FD  318B   	fcall	_wireReadDataByte
  7004  0BE9  0020               	movlb	0	; select bank0
  7005  0BEA  00AA               	movwf	??_setLEDDrive
  7006  0BEB  082A               	movf	??_setLEDDrive,w
  7007  0BEC  00AC               	movwf	setLEDDrive@val
  7008                           
  7009                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7010  0BED  3003               	movlw	3
  7011  0BEE  00AA               	movwf	??_setLEDDrive
  7012  0BEF  082A               	movf	??_setLEDDrive,w
  7013  0BF0  05AD               	andwf	setLEDDrive@drive,f
  7014                           
  7015                           ;APDS9960.c: 179:     drive = drive << 6;
  7016  0BF1  082D               	movf	setLEDDrive@drive,w
  7017  0BF2  00AA               	movwf	??_setLEDDrive
  7018  0BF3  3005               	movlw	5
  7019  0BF4                     u5605:	
  7020  0BF4  35AA               	lslf	??_setLEDDrive,f
  7021  0BF5  3EFF               	addlw	-1
  7022  0BF6  1D03               	skipz
  7023  0BF7  2BF4               	goto	u5605
  7024  0BF8  352A               	lslf	??_setLEDDrive,w
  7025  0BF9  00AB               	movwf	??_setLEDDrive+1
  7026  0BFA  082B               	movf	??_setLEDDrive+1,w
  7027  0BFB  00AD               	movwf	setLEDDrive@drive
  7028                           
  7029                           ;APDS9960.c: 180:     val &= 0b00111111;
  7030  0BFC  303F               	movlw	63
  7031  0BFD  00AA               	movwf	??_setLEDDrive
  7032  0BFE  082A               	movf	??_setLEDDrive,w
  7033  0BFF  05AC               	andwf	setLEDDrive@val,f
  7034                           
  7035                           ;APDS9960.c: 181:     val |= drive;
  7036  0C00  082D               	movf	setLEDDrive@drive,w
  7037  0C01  00AA               	movwf	??_setLEDDrive
  7038  0C02  082A               	movf	??_setLEDDrive,w
  7039  0C03  04AC               	iorwf	setLEDDrive@val,f
  7040                           
  7041                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7042  0C04  082C               	movf	setLEDDrive@val,w
  7043  0C05  00AA               	movwf	??_setLEDDrive
  7044  0C06  082A               	movf	??_setLEDDrive,w
  7045  0C07  00A6               	movwf	wireWriteDataByte@val
  7046  0C08  308F               	movlw	143
  7047  0C09  318A  226E         	fcall	_wireWriteDataByte
  7048  0C0B  0008               	return
  7049  0C0C                     __end_of_setLEDDrive:	
  7050                           
  7051                           	psect	text8
  7052  0B6E                     __ptext8:	
  7053 ;; *************** function _setGestureWaitTime *****************
  7054 ;; Defined at:
  7055 ;;		line 366 in file "APDS9960.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  time            1    wreg     unsigned char 
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;  time            1   11[BANK0 ] unsigned char 
  7060 ;;  val             1   12[BANK0 ] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  1    wreg      _Bool 
  7063 ;; Registers used:
  7064 ;;		wreg, status,2, status,0, pclath, cstack
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;Total ram usage:        3 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    8
  7077 ;; This function calls:
  7078 ;;		_wireReadDataByte
  7079 ;;		_wireWriteDataByte
  7080 ;; This function is called by:
  7081 ;;		_initialize
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           
  7086                           ;psect for function _setGestureWaitTime
  7087  0B6E                     _setGestureWaitTime:	
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7091                           ;setGestureWaitTime@time stored from wreg
  7092  0B6E  0020               	movlb	0	; select bank0
  7093  0B6F  00AB               	movwf	setGestureWaitTime@time
  7094                           
  7095                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7096  0B70  30A3               	movlw	163
  7097  0B71  318A  22FD  318B   	fcall	_wireReadDataByte
  7098  0B74  0020               	movlb	0	; select bank0
  7099  0B75  00AA               	movwf	??_setGestureWaitTime
  7100  0B76  082A               	movf	??_setGestureWaitTime,w
  7101  0B77  00AC               	movwf	setGestureWaitTime@val
  7102                           
  7103                           ;APDS9960.c: 374:     time &= 0b00000111;
  7104  0B78  3007               	movlw	7
  7105  0B79  00AA               	movwf	??_setGestureWaitTime
  7106  0B7A  082A               	movf	??_setGestureWaitTime,w
  7107  0B7B  05AB               	andwf	setGestureWaitTime@time,f
  7108                           
  7109                           ;APDS9960.c: 375:     val &= 0b11111000;
  7110  0B7C  30F8               	movlw	248
  7111  0B7D  00AA               	movwf	??_setGestureWaitTime
  7112  0B7E  082A               	movf	??_setGestureWaitTime,w
  7113  0B7F  05AC               	andwf	setGestureWaitTime@val,f
  7114                           
  7115                           ;APDS9960.c: 376:     val |= time;
  7116  0B80  082B               	movf	setGestureWaitTime@time,w
  7117  0B81  00AA               	movwf	??_setGestureWaitTime
  7118  0B82  082A               	movf	??_setGestureWaitTime,w
  7119  0B83  04AC               	iorwf	setGestureWaitTime@val,f
  7120                           
  7121                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7122  0B84  082C               	movf	setGestureWaitTime@val,w
  7123  0B85  00AA               	movwf	??_setGestureWaitTime
  7124  0B86  082A               	movf	??_setGestureWaitTime,w
  7125  0B87  00A6               	movwf	wireWriteDataByte@val
  7126  0B88  30A3               	movlw	163
  7127  0B89  318A  226E  318B   	fcall	_wireWriteDataByte
  7128  0B8C  0020               	movlb	0	; select bank0
  7129  0B8D  0826               	movf	?_wireWriteDataByte,w
  7130  0B8E  0427               	iorwf	?_wireWriteDataByte+1,w
  7131  0B8F  1D03               	btfss	3,2
  7132  0B90  2B93               	goto	l6618
  7133                           
  7134                           ;APDS9960.c: 380:         return 0;
  7135  0B91  3000               	movlw	0
  7136  0B92  0008               	return
  7137  0B93                     l6618:	
  7138                           
  7139                           ;APDS9960.c: 383:     return 1;
  7140  0B93  3001               	movlw	1
  7141  0B94  0008               	return
  7142  0B95                     __end_of_setGestureWaitTime:	
  7143                           
  7144                           	psect	text9
  7145  0D20                     __ptext9:	
  7146 ;; *************** function _setGestureLEDDrive *****************
  7147 ;; Defined at:
  7148 ;;		line 343 in file "APDS9960.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  drive           1    wreg     unsigned char 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  drive           1   13[BANK0 ] unsigned char 
  7153 ;;  val             1   12[BANK0 ] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      _Bool 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0, pclath, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;Total ram usage:        4 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    8
  7170 ;; This function calls:
  7171 ;;		_wireReadDataByte
  7172 ;;		_wireWriteDataByte
  7173 ;; This function is called by:
  7174 ;;		_initialize
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _setGestureLEDDrive
  7180  0D20                     _setGestureLEDDrive:	
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7184                           ;setGestureLEDDrive@drive stored from wreg
  7185  0D20  0020               	movlb	0	; select bank0
  7186  0D21  00AD               	movwf	setGestureLEDDrive@drive
  7187                           
  7188                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7189  0D22  30A3               	movlw	163
  7190  0D23  318A  22FD  318D   	fcall	_wireReadDataByte
  7191  0D26  0020               	movlb	0	; select bank0
  7192  0D27  00AA               	movwf	??_setGestureLEDDrive
  7193  0D28  082A               	movf	??_setGestureLEDDrive,w
  7194  0D29  00AC               	movwf	setGestureLEDDrive@val
  7195                           
  7196                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7197  0D2A  3003               	movlw	3
  7198  0D2B  00AA               	movwf	??_setGestureLEDDrive
  7199  0D2C  082A               	movf	??_setGestureLEDDrive,w
  7200  0D2D  05AD               	andwf	setGestureLEDDrive@drive,f
  7201                           
  7202                           ;APDS9960.c: 353:     drive = drive << 3;
  7203  0D2E  082D               	movf	setGestureLEDDrive@drive,w
  7204  0D2F  00AA               	movwf	??_setGestureLEDDrive
  7205  0D30  3002               	movlw	2
  7206  0D31                     u5725:	
  7207  0D31  35AA               	lslf	??_setGestureLEDDrive,f
  7208  0D32  3EFF               	addlw	-1
  7209  0D33  1D03               	skipz
  7210  0D34  2D31               	goto	u5725
  7211  0D35  352A               	lslf	??_setGestureLEDDrive,w
  7212  0D36  00AB               	movwf	??_setGestureLEDDrive+1
  7213  0D37  082B               	movf	??_setGestureLEDDrive+1,w
  7214  0D38  00AD               	movwf	setGestureLEDDrive@drive
  7215                           
  7216                           ;APDS9960.c: 354:     val &= 0b11100111;
  7217  0D39  30E7               	movlw	231
  7218  0D3A  00AA               	movwf	??_setGestureLEDDrive
  7219  0D3B  082A               	movf	??_setGestureLEDDrive,w
  7220  0D3C  05AC               	andwf	setGestureLEDDrive@val,f
  7221                           
  7222                           ;APDS9960.c: 355:     val |= drive;
  7223  0D3D  082D               	movf	setGestureLEDDrive@drive,w
  7224  0D3E  00AA               	movwf	??_setGestureLEDDrive
  7225  0D3F  082A               	movf	??_setGestureLEDDrive,w
  7226  0D40  04AC               	iorwf	setGestureLEDDrive@val,f
  7227                           
  7228                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7229  0D41  082C               	movf	setGestureLEDDrive@val,w
  7230  0D42  00AA               	movwf	??_setGestureLEDDrive
  7231  0D43  082A               	movf	??_setGestureLEDDrive,w
  7232  0D44  00A6               	movwf	wireWriteDataByte@val
  7233  0D45  30A3               	movlw	163
  7234  0D46  318A  226E  318D   	fcall	_wireWriteDataByte
  7235  0D49  0020               	movlb	0	; select bank0
  7236  0D4A  0826               	movf	?_wireWriteDataByte,w
  7237  0D4B  0427               	iorwf	?_wireWriteDataByte+1,w
  7238  0D4C  1D03               	btfss	3,2
  7239  0D4D  2D50               	goto	l6600
  7240                           
  7241                           ;APDS9960.c: 359:         return 0;
  7242  0D4E  3000               	movlw	0
  7243  0D4F  0008               	return
  7244  0D50                     l6600:	
  7245                           
  7246                           ;APDS9960.c: 362:     return 1;
  7247  0D50  3001               	movlw	1
  7248  0D51  0008               	return
  7249  0D52                     __end_of_setGestureLEDDrive:	
  7250                           
  7251                           	psect	text10
  7252  0CEE                     __ptext10:	
  7253 ;; *************** function _setGestureGain *****************
  7254 ;; Defined at:
  7255 ;;		line 320 in file "APDS9960.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;  gain            1    wreg     unsigned char 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;  gain            1   13[BANK0 ] unsigned char 
  7260 ;;  val             1   12[BANK0 ] unsigned char 
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  1    wreg      _Bool 
  7263 ;; Registers used:
  7264 ;;		wreg, status,2, status,0, pclath, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;Total ram usage:        4 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    8
  7277 ;; This function calls:
  7278 ;;		_wireReadDataByte
  7279 ;;		_wireWriteDataByte
  7280 ;; This function is called by:
  7281 ;;		_initialize
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _setGestureGain
  7287  0CEE                     _setGestureGain:	
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7291                           ;setGestureGain@gain stored from wreg
  7292  0CEE  0020               	movlb	0	; select bank0
  7293  0CEF  00AD               	movwf	setGestureGain@gain
  7294                           
  7295                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7296  0CF0  30A3               	movlw	163
  7297  0CF1  318A  22FD  318C   	fcall	_wireReadDataByte
  7298  0CF4  0020               	movlb	0	; select bank0
  7299  0CF5  00AA               	movwf	??_setGestureGain
  7300  0CF6  082A               	movf	??_setGestureGain,w
  7301  0CF7  00AC               	movwf	setGestureGain@val
  7302                           
  7303                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7304  0CF8  3003               	movlw	3
  7305  0CF9  00AA               	movwf	??_setGestureGain
  7306  0CFA  082A               	movf	??_setGestureGain,w
  7307  0CFB  05AD               	andwf	setGestureGain@gain,f
  7308                           
  7309                           ;APDS9960.c: 330:     gain = gain << 5;
  7310  0CFC  082D               	movf	setGestureGain@gain,w
  7311  0CFD  00AA               	movwf	??_setGestureGain
  7312  0CFE  3004               	movlw	4
  7313  0CFF                     u5705:	
  7314  0CFF  35AA               	lslf	??_setGestureGain,f
  7315  0D00  3EFF               	addlw	-1
  7316  0D01  1D03               	skipz
  7317  0D02  2CFF               	goto	u5705
  7318  0D03  352A               	lslf	??_setGestureGain,w
  7319  0D04  00AB               	movwf	??_setGestureGain+1
  7320  0D05  082B               	movf	??_setGestureGain+1,w
  7321  0D06  00AD               	movwf	setGestureGain@gain
  7322                           
  7323                           ;APDS9960.c: 331:     val &= 0b10011111;
  7324  0D07  309F               	movlw	159
  7325  0D08  00AA               	movwf	??_setGestureGain
  7326  0D09  082A               	movf	??_setGestureGain,w
  7327  0D0A  05AC               	andwf	setGestureGain@val,f
  7328                           
  7329                           ;APDS9960.c: 332:     val |= gain;
  7330  0D0B  082D               	movf	setGestureGain@gain,w
  7331  0D0C  00AA               	movwf	??_setGestureGain
  7332  0D0D  082A               	movf	??_setGestureGain,w
  7333  0D0E  04AC               	iorwf	setGestureGain@val,f
  7334                           
  7335                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7336  0D0F  082C               	movf	setGestureGain@val,w
  7337  0D10  00AA               	movwf	??_setGestureGain
  7338  0D11  082A               	movf	??_setGestureGain,w
  7339  0D12  00A6               	movwf	wireWriteDataByte@val
  7340  0D13  30A3               	movlw	163
  7341  0D14  318A  226E  318C   	fcall	_wireWriteDataByte
  7342  0D17  0020               	movlb	0	; select bank0
  7343  0D18  0826               	movf	?_wireWriteDataByte,w
  7344  0D19  0427               	iorwf	?_wireWriteDataByte+1,w
  7345  0D1A  1D03               	btfss	3,2
  7346  0D1B  2D1E               	goto	l6582
  7347                           
  7348                           ;APDS9960.c: 336:         return 0;
  7349  0D1C  3000               	movlw	0
  7350  0D1D  0008               	return
  7351  0D1E                     l6582:	
  7352                           
  7353                           ;APDS9960.c: 339:     return 1;
  7354  0D1E  3001               	movlw	1
  7355  0D1F  0008               	return
  7356  0D20                     __end_of_setGestureGain:	
  7357                           
  7358                           	psect	text11
  7359  09D8                     __ptext11:	
  7360 ;; *************** function _setGestureExitThresh *****************
  7361 ;; Defined at:
  7362 ;;		line 310 in file "APDS9960.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;  threshold       1    wreg     unsigned char 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  threshold       1   11[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      _Bool 
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;Total ram usage:        2 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    8
  7383 ;; This function calls:
  7384 ;;		_wireWriteDataByte
  7385 ;; This function is called by:
  7386 ;;		_initialize
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _setGestureExitThresh
  7392  09D8                     _setGestureExitThresh:	
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7396                           ;setGestureExitThresh@threshold stored from wreg
  7397  09D8  0020               	movlb	0	; select bank0
  7398  09D9  00AB               	movwf	setGestureExitThresh@threshold
  7399                           
  7400                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7401  09DA  082B               	movf	setGestureExitThresh@threshold,w
  7402  09DB  00AA               	movwf	??_setGestureExitThresh
  7403  09DC  082A               	movf	??_setGestureExitThresh,w
  7404  09DD  00A6               	movwf	wireWriteDataByte@val
  7405  09DE  30A1               	movlw	161
  7406  09DF  318A  226E  3189   	fcall	_wireWriteDataByte
  7407  09E2  0020               	movlb	0	; select bank0
  7408  09E3  0826               	movf	?_wireWriteDataByte,w
  7409  09E4  0427               	iorwf	?_wireWriteDataByte+1,w
  7410  09E5  1D03               	btfss	3,2
  7411  09E6  29E9               	goto	l6564
  7412                           
  7413                           ;APDS9960.c: 313:         return 0;
  7414  09E7  3000               	movlw	0
  7415  09E8  0008               	return
  7416  09E9                     l6564:	
  7417                           
  7418                           ;APDS9960.c: 316:     return 1;
  7419  09E9  3001               	movlw	1
  7420  09EA  0008               	return
  7421  09EB                     __end_of_setGestureExitThresh:	
  7422                           
  7423                           	psect	text12
  7424  09C5                     __ptext12:	
  7425 ;; *************** function _setGestureEnterThresh *****************
  7426 ;; Defined at:
  7427 ;;		line 300 in file "APDS9960.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;  threshold       1    wreg     unsigned char 
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;  threshold       1   11[BANK0 ] unsigned char 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  1    wreg      _Bool 
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, status,0, pclath, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;Total ram usage:        2 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    8
  7448 ;; This function calls:
  7449 ;;		_wireWriteDataByte
  7450 ;; This function is called by:
  7451 ;;		_initialize
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           
  7456                           ;psect for function _setGestureEnterThresh
  7457  09C5                     _setGestureEnterThresh:	
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7461                           ;setGestureEnterThresh@threshold stored from wreg
  7462  09C5  0020               	movlb	0	; select bank0
  7463  09C6  00AB               	movwf	setGestureEnterThresh@threshold
  7464                           
  7465                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  7466  09C7  082B               	movf	setGestureEnterThresh@threshold,w
  7467  09C8  00AA               	movwf	??_setGestureEnterThresh
  7468  09C9  082A               	movf	??_setGestureEnterThresh,w
  7469  09CA  00A6               	movwf	wireWriteDataByte@val
  7470  09CB  30A0               	movlw	160
  7471  09CC  318A  226E  3189   	fcall	_wireWriteDataByte
  7472  09CF  0020               	movlb	0	; select bank0
  7473  09D0  0826               	movf	?_wireWriteDataByte,w
  7474  09D1  0427               	iorwf	?_wireWriteDataByte+1,w
  7475  09D2  1D03               	btfss	3,2
  7476  09D3  29D6               	goto	l6554
  7477                           
  7478                           ;APDS9960.c: 303:         return 0;
  7479  09D4  3000               	movlw	0
  7480  09D5  0008               	return
  7481  09D6                     l6554:	
  7482                           
  7483                           ;APDS9960.c: 306:     return 1;
  7484  09D6  3001               	movlw	1
  7485  09D7  0008               	return
  7486  09D8                     __end_of_setGestureEnterThresh:	
  7487                           
  7488                           	psect	text13
  7489  0ADF                     __ptext13:	
  7490 ;; *************** function _setAmbientLightGain *****************
  7491 ;; Defined at:
  7492 ;;		line 213 in file "APDS9960.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  drive           1    wreg     unsigned char 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  drive           1   11[BANK0 ] unsigned char 
  7497 ;;  val             1   12[BANK0 ] unsigned char 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      _Bool 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;Total ram usage:        3 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    8
  7514 ;; This function calls:
  7515 ;;		_wireReadDataByte
  7516 ;;		_wireWriteDataByte
  7517 ;; This function is called by:
  7518 ;;		_initialize
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _setAmbientLightGain
  7524  0ADF                     _setAmbientLightGain:	
  7525                           
  7526                           ;incstack = 0
  7527                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  7528                           ;setAmbientLightGain@drive stored from wreg
  7529  0ADF  0020               	movlb	0	; select bank0
  7530  0AE0  00AB               	movwf	setAmbientLightGain@drive
  7531                           
  7532                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  7533  0AE1  308F               	movlw	143
  7534  0AE2  318A  22FD  318A   	fcall	_wireReadDataByte
  7535  0AE5  0020               	movlb	0	; select bank0
  7536  0AE6  00AA               	movwf	??_setAmbientLightGain
  7537  0AE7  082A               	movf	??_setAmbientLightGain,w
  7538  0AE8  00AC               	movwf	setAmbientLightGain@val
  7539                           
  7540                           ;APDS9960.c: 221:     drive &= 0b00000011;
  7541  0AE9  3003               	movlw	3
  7542  0AEA  00AA               	movwf	??_setAmbientLightGain
  7543  0AEB  082A               	movf	??_setAmbientLightGain,w
  7544  0AEC  05AB               	andwf	setAmbientLightGain@drive,f
  7545                           
  7546                           ;APDS9960.c: 222:     val &= 0b11111100;
  7547  0AED  30FC               	movlw	252
  7548  0AEE  00AA               	movwf	??_setAmbientLightGain
  7549  0AEF  082A               	movf	??_setAmbientLightGain,w
  7550  0AF0  05AC               	andwf	setAmbientLightGain@val,f
  7551                           
  7552                           ;APDS9960.c: 223:     val |= drive;
  7553  0AF1  082B               	movf	setAmbientLightGain@drive,w
  7554  0AF2  00AA               	movwf	??_setAmbientLightGain
  7555  0AF3  082A               	movf	??_setAmbientLightGain,w
  7556  0AF4  04AC               	iorwf	setAmbientLightGain@val,f
  7557                           
  7558                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  7559  0AF5  082C               	movf	setAmbientLightGain@val,w
  7560  0AF6  00AA               	movwf	??_setAmbientLightGain
  7561  0AF7  082A               	movf	??_setAmbientLightGain,w
  7562  0AF8  00A6               	movwf	wireWriteDataByte@val
  7563  0AF9  308F               	movlw	143
  7564  0AFA  318A  226E         	fcall	_wireWriteDataByte
  7565  0AFC  0008               	return
  7566  0AFD                     __end_of_setAmbientLightGain:	
  7567                           
  7568                           	psect	text14
  7569  0963                     __ptext14:	
  7570 ;; *************** function _i2c1_driver_open *****************
  7571 ;; Defined at:
  7572 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;		None
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;		None               void
  7579 ;; Registers used:
  7580 ;;		wreg, status,2
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;Total ram usage:        0 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    5
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_initialize
  7597 ;;		_i2c_open
  7598 ;;		_InitI2C
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           
  7603                           ;psect for function _i2c1_driver_open
  7604  0963                     _i2c1_driver_open:	
  7605                           
  7606                           ;incstack = 0
  7607                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  7608  0963  0024               	movlb	4	; select bank4
  7609  0964  1A95               	btfsc	21,5	;volatile
  7610  0965  0008               	return
  7611  0966  0194               	clrf	20	;volatile
  7612  0967  3028               	movlw	40
  7613  0968  0095               	movwf	21	;volatile
  7614  0969  0196               	clrf	22	;volatile
  7615  096A  3003               	movlw	3
  7616  096B  0092               	movwf	18	;volatile
  7617  096C  0008               	return
  7618  096D                     __end_of_i2c1_driver_open:	
  7619                           
  7620                           	psect	text15
  7621  0F42                     __ptext15:	
  7622 ;; *************** function _handleGesture *****************
  7623 ;; Defined at:
  7624 ;;		line 161 in file "main.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;		None
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        1 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:   10
  7645 ;; This function calls:
  7646 ;;		_Display_Name
  7647 ;;		_readGesture
  7648 ;; This function is called by:
  7649 ;;		_main
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _handleGesture
  7655  0F42                     _handleGesture:	
  7656                           
  7657                           ;main.c: 167:     switch(readGesture()) {
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7661  0F42  2F7C               	goto	l7028
  7662  0F43                     l7006:	
  7663                           
  7664                           ;main.c: 175:             printed = 0;
  7665  0F43  01ED               	clrf	_printed
  7666                           
  7667                           ;main.c: 178:             name++;
  7668  0F44  3001               	movlw	1
  7669  0F45  07DC               	addwf	_name,f
  7670  0F46  3000               	movlw	0
  7671  0F47  3DDD               	addwfc	_name+1,f
  7672                           
  7673                           ;main.c: 179:             if(name > 3) {
  7674  0F48  085D               	movf	_name+1,w
  7675  0F49  3A80               	xorlw	128
  7676  0F4A  00DB               	movwf	??_handleGesture
  7677  0F4B  3080               	movlw	128
  7678  0F4C  025B               	subwf	??_handleGesture,w
  7679  0F4D  1D03               	skipz
  7680  0F4E  2F51               	goto	u6325
  7681  0F4F  3004               	movlw	4
  7682  0F50  025C               	subwf	_name,w
  7683  0F51                     u6325:	
  7684  0F51  1C03               	skipc
  7685  0F52  2F56               	goto	l7014
  7686                           
  7687                           ;main.c: 180:                 name = 0;
  7688  0F53  0020               	movlb	0	; select bank0
  7689  0F54  01DC               	clrf	_name
  7690  0F55  01DD               	clrf	_name+1
  7691  0F56                     l7014:	
  7692                           
  7693                           ;main.c: 182:             Display_Name(names[name]);
  7694  0F56  0020               	movlb	0	; select bank0
  7695  0F57  355C               	lslf	_name,w
  7696  0F58  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7697  0F59  0086               	movwf	6
  7698  0F5A  3001               	movlw	1	; select bank2/3
  7699  0F5B  0087               	movwf	7
  7700  0F5C  3F40               	moviw [0]fsr1
  7701  0F5D  00A5               	movwf	Display_Name@string1
  7702  0F5E  3F41               	moviw [1]fsr1
  7703  0F5F  00A6               	movwf	Display_Name@string1+1
  7704  0F60  318E  26A0  318F   	fcall	_Display_Name
  7705                           
  7706                           ;main.c: 183:             break;
  7707  0F63  2F99               	goto	l7030
  7708  0F64                     l7016:	
  7709                           
  7710                           ;main.c: 185:             printed = 0;
  7711  0F64  01ED               	clrf	_printed
  7712                           
  7713                           ;main.c: 186:             --name;
  7714  0F65  30FF               	movlw	255
  7715  0F66  07DC               	addwf	_name,f
  7716  0F67  30FF               	movlw	255
  7717  0F68  3DDD               	addwfc	_name+1,f
  7718                           
  7719                           ;main.c: 187:             if(name < 0) {
  7720  0F69  1FDD               	btfss	_name+1,7
  7721  0F6A  2F6F               	goto	l7024
  7722                           
  7723                           ;main.c: 188:                 name = 3;
  7724  0F6B  3003               	movlw	3
  7725  0F6C  00DC               	movwf	_name
  7726  0F6D  3000               	movlw	0
  7727  0F6E  00DD               	movwf	_name+1
  7728  0F6F                     l7024:	
  7729                           
  7730                           ;main.c: 190:             Display_Name(names[name]);
  7731  0F6F  355C               	lslf	_name,w
  7732  0F70  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7733  0F71  0086               	movwf	6
  7734  0F72  3001               	movlw	1	; select bank2/3
  7735  0F73  0087               	movwf	7
  7736  0F74  3F40               	moviw [0]fsr1
  7737  0F75  00A5               	movwf	Display_Name@string1
  7738  0F76  3F41               	moviw [1]fsr1
  7739  0F77  00A6               	movwf	Display_Name@string1+1
  7740  0F78  318E  26A0  318F   	fcall	_Display_Name
  7741                           
  7742                           ;main.c: 191:             break;
  7743  0F7B  2F99               	goto	l7030
  7744  0F7C                     l7028:	
  7745  0F7C  3185  25E0  318F   	fcall	_readGesture
  7746                           
  7747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7748                           ; Switch size 1, requested type "simple"
  7749                           ; Number of cases is 1, Range of values is 0 to 0
  7750                           ; switch strategies available:
  7751                           ; Name         Instructions Cycles
  7752                           ; simple_byte            4     3 (average)
  7753                           ; direct_byte            8     6 (fixed)
  7754                           ; jumptable            260     6 (fixed)
  7755                           ;	Chosen strategy is simple_byte
  7756  0F7F  0020               	movlb	0	; select bank0
  7757  0F80  0850               	movf	?_readGesture+1,w
  7758  0F81  3A00               	xorlw	0	; case 0
  7759  0F82  1903               	skipnz
  7760  0F83  2F85               	goto	l7290
  7761  0F84  2F99               	goto	l7030
  7762  0F85                     l7290:	
  7763                           
  7764                           ; Switch size 1, requested type "simple"
  7765                           ; Number of cases is 6, Range of values is 1 to 6
  7766                           ; switch strategies available:
  7767                           ; Name         Instructions Cycles
  7768                           ; simple_byte           19    10 (average)
  7769                           ; direct_byte           21     9 (fixed)
  7770                           ; jumptable            263     9 (fixed)
  7771                           ;	Chosen strategy is simple_byte
  7772  0F85  084F               	movf	?_readGesture,w
  7773  0F86  3A01               	xorlw	1	; case 1
  7774  0F87  1903               	skipnz
  7775  0F88  2F43               	goto	l7006
  7776  0F89  3A03               	xorlw	3	; case 2
  7777  0F8A  1903               	skipnz
  7778  0F8B  2F64               	goto	l7016
  7779  0F8C  3A01               	xorlw	1	; case 3
  7780  0F8D  1903               	skipnz
  7781  0F8E  2F99               	goto	l7030
  7782  0F8F  3A07               	xorlw	7	; case 4
  7783  0F90  1903               	skipnz
  7784  0F91  2F99               	goto	l7030
  7785  0F92  3A01               	xorlw	1	; case 5
  7786  0F93  1903               	skipnz
  7787  0F94  2F99               	goto	l7030
  7788  0F95  3A03               	xorlw	3	; case 6
  7789  0F96  1903               	skipnz
  7790  0F97  2F99               	goto	l7030
  7791  0F98  2F99               	goto	l7030
  7792  0F99                     l7030:	
  7793                           
  7794                           ;main.c: 203:     printed = 0;
  7795  0F99  0020               	movlb	0	; select bank0
  7796  0F9A  01ED               	clrf	_printed
  7797  0F9B  0008               	return
  7798  0F9C                     __end_of_handleGesture:	
  7799                           
  7800                           	psect	text16
  7801  05E0                     __ptext16:	
  7802 ;; *************** function _readGesture *****************
  7803 ;; Defined at:
  7804 ;;		line 556 in file "APDS9960.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;		None
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  7809 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  7810 ;;  i               2   57[BANK0 ] int 
  7811 ;;  bytes_read      2   54[BANK0 ] int 
  7812 ;;  motion          2   51[BANK0 ] int 
  7813 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  7814 ;;  gstatus         1   53[BANK0 ] unsigned char 
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  2   47[BANK0 ] int 
  7817 ;; Registers used:
  7818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;Total ram usage:      140 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    9
  7831 ;; This function calls:
  7832 ;;		_decodeGesture
  7833 ;;		_getMode
  7834 ;;		_isGestureAvailable
  7835 ;;		_processGestureData
  7836 ;;		_resetGestureParameters
  7837 ;;		_wireReadDataBlock
  7838 ;;		_wireReadDataByte
  7839 ;; This function is called by:
  7840 ;;		_handleGesture
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _readGesture
  7846  05E0                     _readGesture:	
  7847                           
  7848                           ;APDS9960.c: 559:     int bytes_read = 0;
  7849                           
  7850                           ;incstack = 0
  7851                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7852  05E0  0020               	movlb	0	; select bank0
  7853  05E1  01D6               	clrf	readGesture@bytes_read
  7854  05E2  01D7               	clrf	readGesture@bytes_read+1
  7855                           
  7856                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  7857  05E3  3189  21B2  3185   	fcall	_isGestureAvailable
  7858  05E6  3A00               	xorlw	0
  7859  05E7  1903               	skipnz
  7860  05E8  2DEF               	goto	l6396
  7861  05E9  3189  215A  3185   	fcall	_getMode
  7862  05EC  3941               	andlw	65
  7863  05ED  1D03               	btfss	3,2
  7864  05EE  2EA4               	goto	l6400
  7865  05EF                     l6396:	
  7866                           
  7867                           ;APDS9960.c: 568:         return DIR_NONE;
  7868  05EF  0020               	movlb	0	; select bank0
  7869  05F0  01CF               	clrf	?_readGesture
  7870  05F1  01D0               	clrf	?_readGesture+1
  7871  05F2  0008               	return
  7872  05F3                     l6406:	
  7873                           ;APDS9960.c: 569:     }
  7874                           
  7875                           
  7876                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  7877  05F3  30AE               	movlw	174
  7878  05F4  318A  22FD  3185   	fcall	_wireReadDataByte
  7879  05F7  0020               	movlb	0	; select bank0
  7880  05F8  00D1               	movwf	??_readGesture
  7881  05F9  0851               	movf	??_readGesture,w
  7882  05FA  00D8               	movwf	readGesture@fifo_level
  7883                           
  7884                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  7885  05FB  0858               	movf	readGesture@fifo_level,w
  7886  05FC  1903               	btfsc	3,2
  7887  05FD  2EA4               	goto	l6400
  7888                           
  7889                           ;APDS9960.c: 592:               if(fifo_level < 17)
  7890  05FE  3011               	movlw	17
  7891  05FF  0258               	subwf	readGesture@fifo_level,w
  7892  0600  1803               	skipnc
  7893  0601  2E06               	goto	l6414
  7894                           
  7895                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7896  0602  3020               	movlw	low readGesture@fifo_data
  7897  0603  00A6               	movwf	wireReadDataBlock@val
  7898  0604  3001               	movlw	high readGesture@fifo_data
  7899  0605  2E09               	goto	L1
  7900  0606                     l6414:	
  7901                           ;APDS9960.c: 597:               } else
  7902                           
  7903                           
  7904                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7905  0606  30A0               	movlw	low readGesture@fifo_data2
  7906  0607  00A6               	movwf	wireReadDataBlock@val
  7907  0608  3000               	movlw	high readGesture@fifo_data2
  7908  0609                     L1:	
  7909  0609  00A7               	movwf	wireReadDataBlock@val+1
  7910  060A  0858               	movf	readGesture@fifo_level,w
  7911  060B  00D1               	movwf	??_readGesture
  7912  060C  01D2               	clrf	??_readGesture+1
  7913  060D  35D1               	lslf	??_readGesture,f
  7914  060E  0DD2               	rlf	??_readGesture+1,f
  7915  060F  35D1               	lslf	??_readGesture,f
  7916  0610  0DD2               	rlf	??_readGesture+1,f
  7917  0611  0851               	movf	??_readGesture,w
  7918  0612  00A8               	movwf	wireReadDataBlock@len
  7919  0613  0852               	movf	??_readGesture+1,w
  7920  0614  00A9               	movwf	wireReadDataBlock@len+1
  7921  0615  30FC               	movlw	252
  7922  0616  3187  27B3  3185   	fcall	_wireReadDataBlock
  7923  0619  0020               	movlb	0	; select bank0
  7924  061A  0827               	movf	?_wireReadDataBlock+1,w
  7925  061B  00D7               	movwf	readGesture@bytes_read+1
  7926  061C  0826               	movf	?_wireReadDataBlock,w
  7927  061D  00D6               	movwf	readGesture@bytes_read
  7928                           
  7929                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  7930  061E  0A56               	incf	readGesture@bytes_read,w
  7931  061F  1D03               	skipz
  7932  0620  2E29               	goto	l6422
  7933  0621  0A57               	incf	readGesture@bytes_read+1,w
  7934  0622  1D03               	btfss	3,2
  7935  0623  2E29               	goto	l6422
  7936                           
  7937                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  7938  0624  30FF               	movlw	255
  7939  0625  00CF               	movwf	?_readGesture
  7940  0626  3000               	movlw	0
  7941  0627  00D0               	movwf	?_readGesture+1
  7942  0628  0008               	return
  7943  0629                     l6422:	
  7944                           
  7945                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  7946  0629  0857               	movf	readGesture@bytes_read+1,w
  7947  062A  3A80               	xorlw	128
  7948  062B  00D1               	movwf	??_readGesture
  7949  062C  3080               	movlw	128
  7950  062D  0251               	subwf	??_readGesture,w
  7951  062E  1D03               	skipz
  7952  062F  2E32               	goto	u5575
  7953  0630  3004               	movlw	4
  7954  0631  0256               	subwf	readGesture@bytes_read,w
  7955  0632                     u5575:	
  7956  0632  1C03               	skipc
  7957  0633  2EA4               	goto	l6400
  7958                           
  7959                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  7960  0634  0020               	movlb	0	; select bank0
  7961  0635  01D9               	clrf	readGesture@i
  7962  0636  01DA               	clrf	readGesture@i+1
  7963  0637                     l6434:	
  7964  0637  085A               	movf	readGesture@i+1,w
  7965  0638  3A80               	xorlw	128
  7966  0639  00D1               	movwf	??_readGesture
  7967  063A  0857               	movf	readGesture@bytes_read+1,w
  7968  063B  3A80               	xorlw	128
  7969  063C  0251               	subwf	??_readGesture,w
  7970  063D  1D03               	skipz
  7971  063E  2E41               	goto	u5585
  7972  063F  0856               	movf	readGesture@bytes_read,w
  7973  0640  0259               	subwf	readGesture@i,w
  7974  0641                     u5585:	
  7975  0641  1803               	btfsc	3,0
  7976  0642  2E98               	goto	l6436
  7977                           
  7978                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  7979  0643  0020               	movlb	0	; select bank0
  7980  0644  0859               	movf	readGesture@i,w
  7981  0645  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7982  0646  0086               	movwf	6
  7983  0647  3001               	movlw	1	; select bank2/3
  7984  0648  0087               	movwf	7
  7985  0649  0801               	movf	1,w
  7986  064A  00D1               	movwf	??_readGesture
  7987  064B  0024               	movlb	4	; select bank4
  7988  064C  0860               	movf	(_gesture_data_^(0+512)+64),w
  7989  064D  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7990  064E  0086               	movwf	6
  7991  064F  3002               	movlw	2	; select bank4/5
  7992  0650  0087               	movwf	7
  7993  0651  0020               	movlb	0	; select bank0
  7994  0652  0851               	movf	??_readGesture,w
  7995  0653  0081               	movwf	1
  7996                           
  7997                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  7998  0654  0859               	movf	readGesture@i,w
  7999  0655  3E01               	addlw	1
  8000  0656  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8001  0657  0086               	movwf	6
  8002  0658  3001               	movlw	1	; select bank2/3
  8003  0659  0087               	movwf	7
  8004  065A  0801               	movf	1,w
  8005  065B  00D1               	movwf	??_readGesture
  8006  065C  0024               	movlb	4	; select bank4
  8007  065D  0860               	movf	(_gesture_data_^(0+512)+64),w
  8008  065E  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8009  065F  0086               	movwf	6
  8010  0660  3002               	movlw	2	; select bank4/5
  8011  0661  0087               	movwf	7
  8012  0662  0020               	movlb	0	; select bank0
  8013  0663  0851               	movf	??_readGesture,w
  8014  0664  0081               	movwf	1
  8015                           
  8016                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8017  0665  0859               	movf	readGesture@i,w
  8018  0666  3E02               	addlw	2
  8019  0667  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8020  0668  0086               	movwf	6
  8021  0669  3001               	movlw	1	; select bank2/3
  8022  066A  0087               	movwf	7
  8023  066B  0801               	movf	1,w
  8024  066C  00D1               	movwf	??_readGesture
  8025  066D  0024               	movlb	4	; select bank4
  8026  066E  0860               	movf	(_gesture_data_^(0+512)+64),w
  8027  066F  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8028  0670  0086               	movwf	6
  8029  0671  3002               	movlw	2	; select bank4/5
  8030  0672  0087               	movwf	7
  8031  0673  0020               	movlb	0	; select bank0
  8032  0674  0851               	movf	??_readGesture,w
  8033  0675  0081               	movwf	1
  8034                           
  8035                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8036  0676  0859               	movf	readGesture@i,w
  8037  0677  3E03               	addlw	3
  8038  0678  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8039  0679  0086               	movwf	6
  8040  067A  3001               	movlw	1	; select bank2/3
  8041  067B  0087               	movwf	7
  8042  067C  0801               	movf	1,w
  8043  067D  00D1               	movwf	??_readGesture
  8044  067E  0024               	movlb	4	; select bank4
  8045  067F  0860               	movf	(_gesture_data_^(0+512)+64),w
  8046  0680  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8047  0681  0086               	movwf	6
  8048  0682  3002               	movlw	2	; select bank4/5
  8049  0683  0087               	movwf	7
  8050  0684  0020               	movlb	0	; select bank0
  8051  0685  0851               	movf	??_readGesture,w
  8052  0686  0081               	movwf	1
  8053                           
  8054                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8055  0687  3001               	movlw	1
  8056  0688  00D1               	movwf	??_readGesture
  8057  0689  0851               	movf	??_readGesture,w
  8058  068A  0024               	movlb	4	; select bank4
  8059  068B  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8060                           
  8061                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8062  068C  3001               	movlw	1
  8063  068D  0020               	movlb	0	; select bank0
  8064  068E  00D1               	movwf	??_readGesture
  8065  068F  0851               	movf	??_readGesture,w
  8066  0690  0024               	movlb	4	; select bank4
  8067  0691  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8068                           
  8069                           ;APDS9960.c: 626:                     }
  8070  0692  3004               	movlw	4
  8071  0693  0020               	movlb	0	; select bank0
  8072  0694  07D9               	addwf	readGesture@i,f
  8073  0695  3000               	movlw	0
  8074  0696  3DDA               	addwfc	readGesture@i+1,f
  8075  0697  2E37               	goto	l6434
  8076  0698                     l6436:	
  8077                           
  8078                           ;APDS9960.c: 629:                     if( processGestureData() )
  8079  0698  3180  206B  3185   	fcall	_processGestureData
  8080  069B  3A00               	xorlw	0
  8081  069C  1903               	skipnz
  8082  069D  2EA1               	goto	l6440
  8083                           
  8084                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8085  069E  3183  233A  3185   	fcall	_decodeGesture
  8086  06A1                     l6440:	
  8087                           
  8088                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8089  06A1  0024               	movlb	4	; select bank4
  8090  06A2  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8091                           
  8092                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8093  06A3  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8094  06A4                     l6400:	
  8095                           
  8096                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8097  06A4  3005               	movlw	5
  8098  06A5  0020               	movlb	0	; select bank0
  8099  06A6  00D1               	movwf	??_readGesture
  8100  06A7  30DD               	movlw	221
  8101  06A8                     u6467:	
  8102  06A8  0B89               	decfsz	9,f
  8103  06A9  2EA8               	goto	u6467
  8104  06AA  0BD1               	decfsz	??_readGesture,f
  8105  06AB  2EA8               	goto	u6467
  8106  06AC  3200               	nop2
  8107                           
  8108                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8109  06AD  30AF               	movlw	175
  8110  06AE  318A  22FD  3185   	fcall	_wireReadDataByte
  8111  06B1  0020               	movlb	0	; select bank0
  8112  06B2  00D1               	movwf	??_readGesture
  8113  06B3  0851               	movf	??_readGesture,w
  8114  06B4  00D5               	movwf	readGesture@gstatus
  8115                           
  8116                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8117  06B5  1855               	btfsc	readGesture@gstatus,0
  8118  06B6  2DF3               	goto	l6406
  8119                           
  8120                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8121  06B7  3005               	movlw	5
  8122  06B8  0020               	movlb	0	; select bank0
  8123  06B9  00D1               	movwf	??_readGesture
  8124  06BA  30DD               	movlw	221
  8125  06BB                     u6477:	
  8126  06BB  0B89               	decfsz	9,f
  8127  06BC  2EBB               	goto	u6477
  8128  06BD  0BD1               	decfsz	??_readGesture,f
  8129  06BE  2EBB               	goto	u6477
  8130  06BF  3200               	nop2
  8131                           
  8132                           ;APDS9960.c: 646:             decodeGesture();
  8133  06C0  3183  233A  3185   	fcall	_decodeGesture
  8134                           
  8135                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8136  06C3  0022               	movlb	2	; select bank2
  8137  06C4  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8138  06C5  0020               	movlb	0	; select bank0
  8139  06C6  00D4               	movwf	readGesture@motion+1
  8140  06C7  0022               	movlb	2	; select bank2
  8141  06C8  0868               	movf	_gesture_motion_^(0+256),w
  8142  06C9  0020               	movlb	0	; select bank0
  8143  06CA  00D3               	movwf	readGesture@motion
  8144                           
  8145                           ;APDS9960.c: 649:             resetGestureParameters();
  8146  06CB  318A  2256         	fcall	_resetGestureParameters
  8147                           
  8148                           ;APDS9960.c: 651:             return motion;
  8149  06CD  0020               	movlb	0	; select bank0
  8150  06CE  0854               	movf	readGesture@motion+1,w
  8151  06CF  00D0               	movwf	?_readGesture+1
  8152  06D0  0853               	movf	readGesture@motion,w
  8153  06D1  00CF               	movwf	?_readGesture
  8154  06D2  0008               	return
  8155  06D3                     __end_of_readGesture:	
  8156                           
  8157                           	psect	text17
  8158  07B3                     __ptext17:	
  8159 ;; *************** function _wireReadDataBlock *****************
  8160 ;; Defined at:
  8161 ;;		line 847 in file "APDS9960.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;  reg             1    wreg     unsigned char 
  8164 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8165 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8166 ;;  len             2    8[BANK0 ] unsigned int 
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  reg             1   15[BANK0 ] unsigned char 
  8169 ;;  j               1   16[BANK0 ] unsigned char 
  8170 ;; Return value:  Size  Location     Type
  8171 ;;                  2    6[BANK0 ] int 
  8172 ;; Registers used:
  8173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/0
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8179 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;Total ram usage:       11 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:    7
  8186 ;; This function calls:
  8187 ;;		_I2C_ReStart
  8188 ;;		_I2C_Read_Byte
  8189 ;;		_I2C_Send_NACK
  8190 ;;		_I2C_Start
  8191 ;;		_I2C_Stop
  8192 ;;		_I2C_Write_Byte
  8193 ;; This function is called by:
  8194 ;;		_readGesture
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _wireReadDataBlock
  8200  07B3                     _wireReadDataBlock:	
  8201                           
  8202                           ;incstack = 0
  8203                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8204                           ;wireReadDataBlock@reg stored from wreg
  8205  07B3  0020               	movlb	0	; select bank0
  8206  07B4  00AF               	movwf	wireReadDataBlock@reg
  8207                           
  8208                           ;APDS9960.c: 851:     I2C_Start();
  8209  07B5  3188  20A7  3187   	fcall	_I2C_Start
  8210                           
  8211                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8212  07B8  3072               	movlw	114
  8213  07B9  318A  2289  3187   	fcall	_I2C_Write_Byte
  8214                           
  8215                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8216  07BC  0020               	movlb	0	; select bank0
  8217  07BD  082F               	movf	wireReadDataBlock@reg,w
  8218  07BE  318A  2289  3187   	fcall	_I2C_Write_Byte
  8219                           
  8220                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8221  07C1  0020               	movlb	0	; select bank0
  8222  07C2  01B0               	clrf	wireReadDataBlock@j
  8223  07C3                     l5978:	
  8224  07C3  0830               	movf	wireReadDataBlock@j,w
  8225  07C4  00AA               	movwf	??_wireReadDataBlock
  8226  07C5  01AB               	clrf	??_wireReadDataBlock+1
  8227  07C6  0829               	movf	wireReadDataBlock@len+1,w
  8228  07C7  022B               	subwf	??_wireReadDataBlock+1,w
  8229  07C8  1D03               	skipz
  8230  07C9  2FCC               	goto	u4735
  8231  07CA  0828               	movf	wireReadDataBlock@len,w
  8232  07CB  022A               	subwf	??_wireReadDataBlock,w
  8233  07CC                     u4735:	
  8234  07CC  1803               	btfsc	3,0
  8235  07CD  2FF2               	goto	l5980
  8236                           
  8237                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8238  07CE  3188  2098  3187   	fcall	_I2C_ReStart
  8239                           
  8240                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8241  07D1  3073               	movlw	115
  8242  07D2  318A  2289  3187   	fcall	_I2C_Write_Byte
  8243                           
  8244                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8245  07D5  3189  216D  3187   	fcall	_I2C_Read_Byte
  8246  07D8  0020               	movlb	0	; select bank0
  8247  07D9  00AA               	movwf	??_wireReadDataBlock
  8248  07DA  0830               	movf	wireReadDataBlock@j,w
  8249  07DB  00AB               	movwf	??_wireReadDataBlock+1
  8250  07DC  01AC               	clrf	??_wireReadDataBlock+2
  8251  07DD  082B               	movf	??_wireReadDataBlock+1,w
  8252  07DE  0726               	addwf	wireReadDataBlock@val,w
  8253  07DF  00AD               	movwf	??_wireReadDataBlock+3
  8254  07E0  082C               	movf	??_wireReadDataBlock+2,w
  8255  07E1  3D27               	addwfc	wireReadDataBlock@val+1,w
  8256  07E2  00AE               	movwf	??_wireReadDataBlock+4
  8257  07E3  082D               	movf	??_wireReadDataBlock+3,w
  8258  07E4  0086               	movwf	6
  8259  07E5  082E               	movf	??_wireReadDataBlock+4,w
  8260  07E6  0087               	movwf	7
  8261  07E7  082A               	movf	??_wireReadDataBlock,w
  8262  07E8  0081               	movwf	1
  8263                           
  8264                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8265  07E9  3188  20A1  3187   	fcall	_I2C_Send_NACK
  8266                           
  8267                           ;APDS9960.c: 864:     }
  8268  07EC  3001               	movlw	1
  8269  07ED  0020               	movlb	0	; select bank0
  8270  07EE  00AA               	movwf	??_wireReadDataBlock
  8271  07EF  082A               	movf	??_wireReadDataBlock,w
  8272  07F0  07B0               	addwf	wireReadDataBlock@j,f
  8273  07F1  2FC3               	goto	l5978
  8274  07F2                     l5980:	
  8275                           
  8276                           ;APDS9960.c: 866:     I2C_Stop();
  8277  07F2  3187  27FD         	fcall	_I2C_Stop
  8278                           
  8279                           ;APDS9960.c: 867:     return (int)j;
  8280  07F4  0020               	movlb	0	; select bank0
  8281  07F5  0830               	movf	wireReadDataBlock@j,w
  8282  07F6  00AA               	movwf	??_wireReadDataBlock
  8283  07F7  01AB               	clrf	??_wireReadDataBlock+1
  8284  07F8  082A               	movf	??_wireReadDataBlock,w
  8285  07F9  00A6               	movwf	?_wireReadDataBlock
  8286  07FA  082B               	movf	??_wireReadDataBlock+1,w
  8287  07FB  00A7               	movwf	?_wireReadDataBlock+1
  8288  07FC  0008               	return
  8289  07FD                     __end_of_wireReadDataBlock:	
  8290                           
  8291                           	psect	text18
  8292  006B                     __ptext18:	
  8293 ;; *************** function _processGestureData *****************
  8294 ;; Defined at:
  8295 ;;		line 657 in file "APDS9960.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;		None
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  i               2   45[BANK0 ] int 
  8300 ;;  lr_delta        2   43[BANK0 ] int 
  8301 ;;  ud_delta        2   41[BANK0 ] int 
  8302 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8303 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8304 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8305 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8306 ;;  r_first         1   40[BANK0 ] unsigned char 
  8307 ;;  l_first         1   39[BANK0 ] unsigned char 
  8308 ;;  d_first         1   38[BANK0 ] unsigned char 
  8309 ;;  u_first         1   37[BANK0 ] unsigned char 
  8310 ;;  r_last          1   36[BANK0 ] unsigned char 
  8311 ;;  l_last          1   35[BANK0 ] unsigned char 
  8312 ;;  d_last          1   34[BANK0 ] unsigned char 
  8313 ;;  u_last          1   33[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      _Bool 
  8316 ;; Registers used:
  8317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;Total ram usage:       32 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    6
  8330 ;; This function calls:
  8331 ;;		___awdiv
  8332 ;;		___wmul
  8333 ;; This function is called by:
  8334 ;;		_readGesture
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _processGestureData
  8340  006B                     _processGestureData:	
  8341                           
  8342                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8343                           
  8344                           ;incstack = 0
  8345                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8346  006B  0020               	movlb	0	; select bank0
  8347  006C  01C5               	clrf	processGestureData@u_first
  8348                           
  8349                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8350  006D  01C6               	clrf	processGestureData@d_first
  8351                           
  8352                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8353  006E  01C7               	clrf	processGestureData@l_first
  8354                           
  8355                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8356  006F  01C8               	clrf	processGestureData@r_first
  8357                           
  8358                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8359  0070  01C1               	clrf	processGestureData@u_last
  8360                           
  8361                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8362  0071  01C2               	clrf	processGestureData@d_last
  8363                           
  8364                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8365  0072  01C3               	clrf	processGestureData@l_last
  8366                           
  8367                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8368  0073  01C4               	clrf	processGestureData@r_last
  8369                           
  8370                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8371  0074  3005               	movlw	5
  8372  0075  0024               	movlb	4	; select bank4
  8373  0076  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8374  0077  1803               	skipnc
  8375  0078  287B               	goto	l5994
  8376  0079                     l5990:	
  8377                           
  8378                           ;APDS9960.c: 677:         return 0;
  8379  0079  3000               	movlw	0
  8380  007A  0008               	return
  8381  007B                     l5994:	
  8382                           
  8383                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8384  007B  3021               	movlw	33
  8385  007C  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8386  007D  1803               	skipnc
  8387  007E  2945               	goto	l6044
  8388  007F  0861               	movf	(_gesture_data_^(0+512)+65),w
  8389  0080  1903               	btfsc	3,2
  8390  0081  2945               	goto	l6044
  8391                           
  8392                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8393  0082  0020               	movlb	0	; select bank0
  8394  0083  01CD               	clrf	processGestureData@i
  8395  0084  01CE               	clrf	processGestureData@i+1
  8396  0085  288A               	goto	l1063
  8397  0086                     l6010:	
  8398                           ;APDS9960.c: 695:                 break;
  8399                           
  8400                           
  8401                           ;APDS9960.c: 697:         }
  8402  0086  3001               	movlw	1
  8403  0087  07CD               	addwf	processGestureData@i,f
  8404  0088  3000               	movlw	0
  8405  0089  3DCE               	addwfc	processGestureData@i+1,f
  8406  008A                     l1063:	
  8407  008A  084E               	movf	processGestureData@i+1,w
  8408  008B  3A80               	xorlw	128
  8409  008C  00AF               	movwf	??_processGestureData
  8410  008D  3080               	movlw	128
  8411  008E  022F               	subwf	??_processGestureData,w
  8412  008F  1D03               	skipz
  8413  0090  2895               	goto	u4815
  8414  0091  0024               	movlb	4	; select bank4
  8415  0092  0861               	movf	(_gesture_data_^(0+512)+65),w
  8416  0093  0020               	movlb	0	; select bank0
  8417  0094  024D               	subwf	processGestureData@i,w
  8418  0095                     u4815:	
  8419  0095  1803               	btfsc	3,0
  8420  0096  28E0               	goto	l6012
  8421                           
  8422                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  8423  0097  0020               	movlb	0	; select bank0
  8424  0098  084D               	movf	processGestureData@i,w
  8425  0099  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8426  009A  0086               	movwf	6
  8427  009B  3002               	movlw	2	; select bank4/5
  8428  009C  0087               	movwf	7
  8429  009D  300B               	movlw	11
  8430  009E  0201               	subwf	1,w
  8431  009F  1C03               	skipc
  8432  00A0  2886               	goto	l6010
  8433  00A1  084D               	movf	processGestureData@i,w
  8434  00A2  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8435  00A3  0086               	movwf	6
  8436  00A4  3002               	movlw	2	; select bank4/5
  8437  00A5  0087               	movwf	7
  8438  00A6  300B               	movlw	11
  8439  00A7  0201               	subwf	1,w
  8440  00A8  1C03               	skipc
  8441  00A9  2886               	goto	l6010
  8442  00AA  084D               	movf	processGestureData@i,w
  8443  00AB  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8444  00AC  0086               	movwf	6
  8445  00AD  3002               	movlw	2	; select bank4/5
  8446  00AE  0087               	movwf	7
  8447  00AF  300B               	movlw	11
  8448  00B0  0201               	subwf	1,w
  8449  00B1  1C03               	skipc
  8450  00B2  2886               	goto	l6010
  8451  00B3  084D               	movf	processGestureData@i,w
  8452  00B4  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8453  00B5  0086               	movwf	6
  8454  00B6  3002               	movlw	2	; select bank4/5
  8455  00B7  0087               	movwf	7
  8456  00B8  300B               	movlw	11
  8457  00B9  0201               	subwf	1,w
  8458  00BA  1C03               	skipc
  8459  00BB  2886               	goto	l6010
  8460                           
  8461                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  8462  00BC  084D               	movf	processGestureData@i,w
  8463  00BD  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8464  00BE  0086               	movwf	6
  8465  00BF  3002               	movlw	2	; select bank4/5
  8466  00C0  0087               	movwf	7
  8467  00C1  0801               	movf	1,w
  8468  00C2  00AF               	movwf	??_processGestureData
  8469  00C3  082F               	movf	??_processGestureData,w
  8470  00C4  00C5               	movwf	processGestureData@u_first
  8471                           
  8472                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  8473  00C5  084D               	movf	processGestureData@i,w
  8474  00C6  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8475  00C7  0086               	movwf	6
  8476  00C8  3002               	movlw	2	; select bank4/5
  8477  00C9  0087               	movwf	7
  8478  00CA  0801               	movf	1,w
  8479  00CB  00AF               	movwf	??_processGestureData
  8480  00CC  082F               	movf	??_processGestureData,w
  8481  00CD  00C6               	movwf	processGestureData@d_first
  8482                           
  8483                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  8484  00CE  084D               	movf	processGestureData@i,w
  8485  00CF  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8486  00D0  0086               	movwf	6
  8487  00D1  3002               	movlw	2	; select bank4/5
  8488  00D2  0087               	movwf	7
  8489  00D3  0801               	movf	1,w
  8490  00D4  00AF               	movwf	??_processGestureData
  8491  00D5  082F               	movf	??_processGestureData,w
  8492  00D6  00C7               	movwf	processGestureData@l_first
  8493                           
  8494                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  8495  00D7  084D               	movf	processGestureData@i,w
  8496  00D8  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8497  00D9  0086               	movwf	6
  8498  00DA  3002               	movlw	2	; select bank4/5
  8499  00DB  0087               	movwf	7
  8500  00DC  0801               	movf	1,w
  8501  00DD  00AF               	movwf	??_processGestureData
  8502  00DE  082F               	movf	??_processGestureData,w
  8503  00DF  00C8               	movwf	processGestureData@r_first
  8504  00E0                     l6012:	
  8505                           
  8506                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  8507  00E0  0020               	movlb	0	; select bank0
  8508  00E1  0845               	movf	processGestureData@u_first,w
  8509  00E2  1903               	btfsc	3,2
  8510  00E3  2879               	goto	l5990
  8511  00E4  0846               	movf	processGestureData@d_first,w
  8512  00E5  1903               	btfsc	3,2
  8513  00E6  2879               	goto	l5990
  8514  00E7  0847               	movf	processGestureData@l_first,w
  8515  00E8  1903               	btfsc	3,2
  8516  00E9  2879               	goto	l5990
  8517  00EA  0848               	movf	processGestureData@r_first,w
  8518  00EB  1903               	btfsc	3,2
  8519  00EC  2879               	goto	l5990
  8520                           
  8521                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  8522  00ED  0024               	movlb	4	; select bank4
  8523  00EE  0861               	movf	(_gesture_data_^(0+512)+65),w
  8524  00EF  3EFF               	addlw	255
  8525  00F0  0020               	movlb	0	; select bank0
  8526  00F1  00CD               	movwf	processGestureData@i
  8527  00F2  30FF               	movlw	255
  8528  00F3  1803               	skipnc
  8529  00F4  3000               	movlw	0
  8530  00F5  00CE               	movwf	processGestureData@i+1
  8531                           
  8532                           ;APDS9960.c: 717:                 break;
  8533  00F6  28FB               	goto	l6026
  8534  00F7                     l6040:	
  8535                           
  8536                           ;APDS9960.c: 719:         }
  8537  00F7  30FF               	movlw	255
  8538  00F8  07CD               	addwf	processGestureData@i,f
  8539  00F9  30FF               	movlw	255
  8540  00FA  3DCE               	addwfc	processGestureData@i+1,f
  8541  00FB                     l6026:	
  8542  00FB  1BCE               	btfsc	processGestureData@i+1,7
  8543  00FC  2945               	goto	l6044
  8544                           
  8545                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  8546  00FD  084D               	movf	processGestureData@i,w
  8547  00FE  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8548  00FF  0086               	movwf	6
  8549  0100  3002               	movlw	2	; select bank4/5
  8550  0101  0087               	movwf	7
  8551  0102  300B               	movlw	11
  8552  0103  0201               	subwf	1,w
  8553  0104  1C03               	skipc
  8554  0105  28F7               	goto	l6040
  8555  0106  084D               	movf	processGestureData@i,w
  8556  0107  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8557  0108  0086               	movwf	6
  8558  0109  3002               	movlw	2	; select bank4/5
  8559  010A  0087               	movwf	7
  8560  010B  300B               	movlw	11
  8561  010C  0201               	subwf	1,w
  8562  010D  1C03               	skipc
  8563  010E  28F7               	goto	l6040
  8564  010F  084D               	movf	processGestureData@i,w
  8565  0110  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8566  0111  0086               	movwf	6
  8567  0112  3002               	movlw	2	; select bank4/5
  8568  0113  0087               	movwf	7
  8569  0114  300B               	movlw	11
  8570  0115  0201               	subwf	1,w
  8571  0116  1C03               	skipc
  8572  0117  28F7               	goto	l6040
  8573  0118  084D               	movf	processGestureData@i,w
  8574  0119  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8575  011A  0086               	movwf	6
  8576  011B  3002               	movlw	2	; select bank4/5
  8577  011C  0087               	movwf	7
  8578  011D  300B               	movlw	11
  8579  011E  0201               	subwf	1,w
  8580  011F  1C03               	skipc
  8581  0120  28F7               	goto	l6040
  8582                           
  8583                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  8584  0121  084D               	movf	processGestureData@i,w
  8585  0122  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8586  0123  0086               	movwf	6
  8587  0124  3002               	movlw	2	; select bank4/5
  8588  0125  0087               	movwf	7
  8589  0126  0801               	movf	1,w
  8590  0127  00AF               	movwf	??_processGestureData
  8591  0128  082F               	movf	??_processGestureData,w
  8592  0129  00C1               	movwf	processGestureData@u_last
  8593                           
  8594                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  8595  012A  084D               	movf	processGestureData@i,w
  8596  012B  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8597  012C  0086               	movwf	6
  8598  012D  3002               	movlw	2	; select bank4/5
  8599  012E  0087               	movwf	7
  8600  012F  0801               	movf	1,w
  8601  0130  00AF               	movwf	??_processGestureData
  8602  0131  082F               	movf	??_processGestureData,w
  8603  0132  00C2               	movwf	processGestureData@d_last
  8604                           
  8605                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  8606  0133  084D               	movf	processGestureData@i,w
  8607  0134  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8608  0135  0086               	movwf	6
  8609  0136  3002               	movlw	2	; select bank4/5
  8610  0137  0087               	movwf	7
  8611  0138  0801               	movf	1,w
  8612  0139  00AF               	movwf	??_processGestureData
  8613  013A  082F               	movf	??_processGestureData,w
  8614  013B  00C3               	movwf	processGestureData@l_last
  8615                           
  8616                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  8617  013C  084D               	movf	processGestureData@i,w
  8618  013D  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8619  013E  0086               	movwf	6
  8620  013F  3002               	movlw	2	; select bank4/5
  8621  0140  0087               	movwf	7
  8622  0141  0801               	movf	1,w
  8623  0142  00AF               	movwf	??_processGestureData
  8624  0143  082F               	movf	??_processGestureData,w
  8625  0144  00C4               	movwf	processGestureData@r_last
  8626  0145                     l6044:	
  8627                           
  8628                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  8629  0145  0020               	movlb	0	; select bank0
  8630  0146  0845               	movf	processGestureData@u_first,w
  8631  0147  0746               	addwf	processGestureData@d_first,w
  8632  0148  00A6               	movwf	___awdiv@divisor
  8633  0149  01A7               	clrf	___awdiv@divisor+1
  8634  014A  0DA7               	rlf	___awdiv@divisor+1,f
  8635  014B  0846               	movf	processGestureData@d_first,w
  8636  014C  0245               	subwf	processGestureData@u_first,w
  8637  014D  00A0               	movwf	___wmul@multiplier
  8638  014E  01A1               	clrf	___wmul@multiplier+1
  8639  014F  1C03               	skipc
  8640  0150  03A1               	decf	___wmul@multiplier+1,f
  8641  0151  3064               	movlw	100
  8642  0152  00A2               	movwf	___wmul@multiplicand
  8643  0153  3000               	movlw	0
  8644  0154  00A3               	movwf	___wmul@multiplicand+1
  8645  0155  318A  22A5  3180   	fcall	___wmul
  8646  0158  0020               	movlb	0	; select bank0
  8647  0159  0821               	movf	?___wmul+1,w
  8648  015A  00A9               	movwf	___awdiv@dividend+1
  8649  015B  0820               	movf	?___wmul,w
  8650  015C  00A8               	movwf	___awdiv@dividend
  8651  015D  318E  26F0  3180   	fcall	___awdiv
  8652  0160  0020               	movlb	0	; select bank0
  8653  0161  0827               	movf	?___awdiv+1,w
  8654  0162  00B2               	movwf	processGestureData@ud_ratio_first+1
  8655  0163  0826               	movf	?___awdiv,w
  8656  0164  00B1               	movwf	processGestureData@ud_ratio_first
  8657                           
  8658                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  8659  0165  0847               	movf	processGestureData@l_first,w
  8660  0166  0748               	addwf	processGestureData@r_first,w
  8661  0167  00A6               	movwf	___awdiv@divisor
  8662  0168  01A7               	clrf	___awdiv@divisor+1
  8663  0169  0DA7               	rlf	___awdiv@divisor+1,f
  8664  016A  0848               	movf	processGestureData@r_first,w
  8665  016B  0247               	subwf	processGestureData@l_first,w
  8666  016C  00A0               	movwf	___wmul@multiplier
  8667  016D  01A1               	clrf	___wmul@multiplier+1
  8668  016E  1C03               	skipc
  8669  016F  03A1               	decf	___wmul@multiplier+1,f
  8670  0170  3064               	movlw	100
  8671  0171  00A2               	movwf	___wmul@multiplicand
  8672  0172  3000               	movlw	0
  8673  0173  00A3               	movwf	___wmul@multiplicand+1
  8674  0174  318A  22A5  3180   	fcall	___wmul
  8675  0177  0020               	movlb	0	; select bank0
  8676  0178  0821               	movf	?___wmul+1,w
  8677  0179  00A9               	movwf	___awdiv@dividend+1
  8678  017A  0820               	movf	?___wmul,w
  8679  017B  00A8               	movwf	___awdiv@dividend
  8680  017C  318E  26F0  3180   	fcall	___awdiv
  8681  017F  0020               	movlb	0	; select bank0
  8682  0180  0827               	movf	?___awdiv+1,w
  8683  0181  00B4               	movwf	processGestureData@lr_ratio_first+1
  8684  0182  0826               	movf	?___awdiv,w
  8685  0183  00B3               	movwf	processGestureData@lr_ratio_first
  8686                           
  8687                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8688  0184  0841               	movf	processGestureData@u_last,w
  8689  0185  0742               	addwf	processGestureData@d_last,w
  8690  0186  00A6               	movwf	___awdiv@divisor
  8691  0187  01A7               	clrf	___awdiv@divisor+1
  8692  0188  0DA7               	rlf	___awdiv@divisor+1,f
  8693  0189  0842               	movf	processGestureData@d_last,w
  8694  018A  0241               	subwf	processGestureData@u_last,w
  8695  018B  00A0               	movwf	___wmul@multiplier
  8696  018C  01A1               	clrf	___wmul@multiplier+1
  8697  018D  1C03               	skipc
  8698  018E  03A1               	decf	___wmul@multiplier+1,f
  8699  018F  3064               	movlw	100
  8700  0190  00A2               	movwf	___wmul@multiplicand
  8701  0191  3000               	movlw	0
  8702  0192  00A3               	movwf	___wmul@multiplicand+1
  8703  0193  318A  22A5  3180   	fcall	___wmul
  8704  0196  0020               	movlb	0	; select bank0
  8705  0197  0821               	movf	?___wmul+1,w
  8706  0198  00A9               	movwf	___awdiv@dividend+1
  8707  0199  0820               	movf	?___wmul,w
  8708  019A  00A8               	movwf	___awdiv@dividend
  8709  019B  318E  26F0  3180   	fcall	___awdiv
  8710  019E  0020               	movlb	0	; select bank0
  8711  019F  0827               	movf	?___awdiv+1,w
  8712  01A0  00B6               	movwf	processGestureData@ud_ratio_last+1
  8713  01A1  0826               	movf	?___awdiv,w
  8714  01A2  00B5               	movwf	processGestureData@ud_ratio_last
  8715                           
  8716                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8717  01A3  0843               	movf	processGestureData@l_last,w
  8718  01A4  0744               	addwf	processGestureData@r_last,w
  8719  01A5  00A6               	movwf	___awdiv@divisor
  8720  01A6  01A7               	clrf	___awdiv@divisor+1
  8721  01A7  0DA7               	rlf	___awdiv@divisor+1,f
  8722  01A8  0844               	movf	processGestureData@r_last,w
  8723  01A9  0243               	subwf	processGestureData@l_last,w
  8724  01AA  00A0               	movwf	___wmul@multiplier
  8725  01AB  01A1               	clrf	___wmul@multiplier+1
  8726  01AC  1C03               	skipc
  8727  01AD  03A1               	decf	___wmul@multiplier+1,f
  8728  01AE  3064               	movlw	100
  8729  01AF  00A2               	movwf	___wmul@multiplicand
  8730  01B0  3000               	movlw	0
  8731  01B1  00A3               	movwf	___wmul@multiplicand+1
  8732  01B2  318A  22A5  3180   	fcall	___wmul
  8733  01B5  0020               	movlb	0	; select bank0
  8734  01B6  0821               	movf	?___wmul+1,w
  8735  01B7  00A9               	movwf	___awdiv@dividend+1
  8736  01B8  0820               	movf	?___wmul,w
  8737  01B9  00A8               	movwf	___awdiv@dividend
  8738  01BA  318E  26F0  3180   	fcall	___awdiv
  8739  01BD  0020               	movlb	0	; select bank0
  8740  01BE  0827               	movf	?___awdiv+1,w
  8741  01BF  00B8               	movwf	processGestureData@lr_ratio_last+1
  8742  01C0  0826               	movf	?___awdiv,w
  8743  01C1  00B7               	movwf	processGestureData@lr_ratio_last
  8744                           
  8745                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  8746  01C2  0831               	movf	processGestureData@ud_ratio_first,w
  8747  01C3  0235               	subwf	processGestureData@ud_ratio_last,w
  8748  01C4  00C9               	movwf	processGestureData@ud_delta
  8749  01C5  0832               	movf	processGestureData@ud_ratio_first+1,w
  8750  01C6  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  8751  01C7  00CA               	movwf	processGestureData@ud_delta+1
  8752                           
  8753                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  8754  01C8  0833               	movf	processGestureData@lr_ratio_first,w
  8755  01C9  0237               	subwf	processGestureData@lr_ratio_last,w
  8756  01CA  00CB               	movwf	processGestureData@lr_delta
  8757  01CB  0834               	movf	processGestureData@lr_ratio_first+1,w
  8758  01CC  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  8759  01CD  00CC               	movwf	processGestureData@lr_delta+1
  8760                           
  8761                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  8762  01CE  0849               	movf	processGestureData@ud_delta,w
  8763  01CF  07E8               	addwf	_gesture_ud_delta_,f
  8764  01D0  084A               	movf	processGestureData@ud_delta+1,w
  8765  01D1  3DE9               	addwfc	_gesture_ud_delta_+1,f
  8766                           
  8767                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  8768  01D2  084B               	movf	processGestureData@lr_delta,w
  8769  01D3  07E6               	addwf	_gesture_lr_delta_,f
  8770  01D4  084C               	movf	processGestureData@lr_delta+1,w
  8771  01D5  3DE7               	addwfc	_gesture_lr_delta_+1,f
  8772                           
  8773                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  8774  01D6  0869               	movf	_gesture_ud_delta_+1,w
  8775  01D7  3A80               	xorlw	128
  8776  01D8  00AF               	movwf	??_processGestureData
  8777  01D9  3080               	movlw	128
  8778  01DA  022F               	subwf	??_processGestureData,w
  8779  01DB  1D03               	skipz
  8780  01DC  29DF               	goto	u4915
  8781  01DD  3032               	movlw	50
  8782  01DE  0268               	subwf	_gesture_ud_delta_,w
  8783  01DF                     u4915:	
  8784  01DF  1C03               	skipc
  8785  01E0  29E6               	goto	l6058
  8786                           
  8787                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  8788  01E1  3001               	movlw	1
  8789  01E2  0020               	movlb	0	; select bank0
  8790  01E3  00E4               	movwf	_gesture_ud_count_
  8791  01E4  3000               	movlw	0
  8792  01E5  29F6               	goto	L2
  8793  01E6                     l6058:	
  8794                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  8795                           
  8796  01E6  0020               	movlb	0	; select bank0
  8797  01E7  0869               	movf	_gesture_ud_delta_+1,w
  8798  01E8  3A80               	xorlw	128
  8799  01E9  00AF               	movwf	??_processGestureData
  8800  01EA  307F               	movlw	127
  8801  01EB  022F               	subwf	??_processGestureData,w
  8802  01EC  1D03               	skipz
  8803  01ED  29F0               	goto	u4925
  8804  01EE  30CF               	movlw	207
  8805  01EF  0268               	subwf	_gesture_ud_delta_,w
  8806  01F0                     u4925:	
  8807  01F0  1803               	skipnc
  8808  01F1  29F8               	goto	l6062
  8809                           
  8810                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  8811  01F2  30FF               	movlw	255
  8812  01F3  0020               	movlb	0	; select bank0
  8813  01F4  00E4               	movwf	_gesture_ud_count_
  8814  01F5  30FF               	movlw	255
  8815  01F6                     L2:	
  8816  01F6  00E5               	movwf	_gesture_ud_count_+1
  8817                           
  8818                           ;APDS9960.c: 741:     } else {
  8819  01F7  29FB               	goto	l6064
  8820  01F8                     l6062:	
  8821                           
  8822                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  8823  01F8  0020               	movlb	0	; select bank0
  8824  01F9  01E4               	clrf	_gesture_ud_count_
  8825  01FA  01E5               	clrf	_gesture_ud_count_+1
  8826  01FB                     l6064:	
  8827                           
  8828                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  8829  01FB  0867               	movf	_gesture_lr_delta_+1,w
  8830  01FC  3A80               	xorlw	128
  8831  01FD  00AF               	movwf	??_processGestureData
  8832  01FE  3080               	movlw	128
  8833  01FF  022F               	subwf	??_processGestureData,w
  8834  0200  1D03               	skipz
  8835  0201  2A04               	goto	u4935
  8836  0202  3032               	movlw	50
  8837  0203  0266               	subwf	_gesture_lr_delta_,w
  8838  0204                     u4935:	
  8839  0204  1C03               	skipc
  8840  0205  2A0B               	goto	l6068
  8841                           
  8842                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  8843  0206  3001               	movlw	1
  8844  0207  0020               	movlb	0	; select bank0
  8845  0208  00E2               	movwf	_gesture_lr_count_
  8846  0209  3000               	movlw	0
  8847  020A  2A1B               	goto	L3
  8848  020B                     l6068:	
  8849                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  8850                           
  8851  020B  0020               	movlb	0	; select bank0
  8852  020C  0867               	movf	_gesture_lr_delta_+1,w
  8853  020D  3A80               	xorlw	128
  8854  020E  00AF               	movwf	??_processGestureData
  8855  020F  307F               	movlw	127
  8856  0210  022F               	subwf	??_processGestureData,w
  8857  0211  1D03               	skipz
  8858  0212  2A15               	goto	u4945
  8859  0213  30CF               	movlw	207
  8860  0214  0266               	subwf	_gesture_lr_delta_,w
  8861  0215                     u4945:	
  8862  0215  1803               	skipnc
  8863  0216  2A1D               	goto	l6072
  8864                           
  8865                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  8866  0217  30FF               	movlw	255
  8867  0218  0020               	movlb	0	; select bank0
  8868  0219  00E2               	movwf	_gesture_lr_count_
  8869  021A  30FF               	movlw	255
  8870  021B                     L3:	
  8871  021B  00E3               	movwf	_gesture_lr_count_+1
  8872                           
  8873                           ;APDS9960.c: 750:     } else {
  8874  021C  2A20               	goto	l6074
  8875  021D                     l6072:	
  8876                           
  8877                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  8878  021D  0020               	movlb	0	; select bank0
  8879  021E  01E2               	clrf	_gesture_lr_count_
  8880  021F  01E3               	clrf	_gesture_lr_count_+1
  8881  0220                     l6074:	
  8882                           
  8883                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  8884  0220  0864               	movf	_gesture_ud_count_,w
  8885  0221  0465               	iorwf	_gesture_ud_count_+1,w
  8886  0222  1D03               	btfss	3,2
  8887  0223  2AC7               	goto	l6118
  8888  0224  0862               	movf	_gesture_lr_count_,w
  8889  0225  0463               	iorwf	_gesture_lr_count_+1,w
  8890  0226  1D03               	btfss	3,2
  8891  0227  2AC7               	goto	l6118
  8892                           
  8893                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8894  0228  084A               	movf	processGestureData@ud_delta+1,w
  8895  0229  3A80               	xorlw	128
  8896  022A  00AF               	movwf	??_processGestureData
  8897  022B  3080               	movlw	128
  8898  022C  022F               	subwf	??_processGestureData,w
  8899  022D  1D03               	skipz
  8900  022E  2A31               	goto	u4975
  8901  022F  3001               	movlw	1
  8902  0230  0249               	subwf	processGestureData@ud_delta,w
  8903  0231                     u4975:	
  8904  0231  1803               	skipnc
  8905  0232  2A40               	goto	l6082
  8906  0233  0020               	movlb	0	; select bank0
  8907  0234  0949               	comf	processGestureData@ud_delta,w
  8908  0235  00AF               	movwf	??_processGestureData
  8909  0236  094A               	comf	processGestureData@ud_delta+1,w
  8910  0237  00B0               	movwf	??_processGestureData+1
  8911  0238  0AAF               	incf	??_processGestureData,f
  8912  0239  1903               	skipnz
  8913  023A  0AB0               	incf	??_processGestureData+1,f
  8914  023B  082F               	movf	??_processGestureData,w
  8915  023C  00B9               	movwf	_processGestureData$1535
  8916  023D  0830               	movf	??_processGestureData+1,w
  8917  023E  00BA               	movwf	_processGestureData$1535+1
  8918  023F  2A45               	goto	l1086
  8919  0240                     l6082:	
  8920  0240  0020               	movlb	0	; select bank0
  8921  0241  084A               	movf	processGestureData@ud_delta+1,w
  8922  0242  00BA               	movwf	_processGestureData$1535+1
  8923  0243  0849               	movf	processGestureData@ud_delta,w
  8924  0244  00B9               	movwf	_processGestureData$1535
  8925  0245                     l1086:	
  8926  0245  083A               	movf	_processGestureData$1535+1,w
  8927  0246  3A80               	xorlw	128
  8928  0247  00AF               	movwf	??_processGestureData
  8929  0248  3080               	movlw	128
  8930  0249  022F               	subwf	??_processGestureData,w
  8931  024A  1D03               	skipz
  8932  024B  2A4E               	goto	u4985
  8933  024C  3014               	movlw	20
  8934  024D  0239               	subwf	_processGestureData$1535,w
  8935  024E                     u4985:	
  8936  024E  1803               	skipnc
  8937  024F  2879               	goto	l5990
  8938  0250  0020               	movlb	0	; select bank0
  8939  0251  084C               	movf	processGestureData@lr_delta+1,w
  8940  0252  3A80               	xorlw	128
  8941  0253  00AF               	movwf	??_processGestureData
  8942  0254  3080               	movlw	128
  8943  0255  022F               	subwf	??_processGestureData,w
  8944  0256  1D03               	skipz
  8945  0257  2A5A               	goto	u4995
  8946  0258  3001               	movlw	1
  8947  0259  024B               	subwf	processGestureData@lr_delta,w
  8948  025A                     u4995:	
  8949  025A  1803               	skipnc
  8950  025B  2A69               	goto	l6088
  8951  025C  0020               	movlb	0	; select bank0
  8952  025D  094B               	comf	processGestureData@lr_delta,w
  8953  025E  00AF               	movwf	??_processGestureData
  8954  025F  094C               	comf	processGestureData@lr_delta+1,w
  8955  0260  00B0               	movwf	??_processGestureData+1
  8956  0261  0AAF               	incf	??_processGestureData,f
  8957  0262  1903               	skipnz
  8958  0263  0AB0               	incf	??_processGestureData+1,f
  8959  0264  082F               	movf	??_processGestureData,w
  8960  0265  00BB               	movwf	_processGestureData$1536
  8961  0266  0830               	movf	??_processGestureData+1,w
  8962  0267  00BC               	movwf	_processGestureData$1536+1
  8963  0268  2A6E               	goto	l1090
  8964  0269                     l6088:	
  8965  0269  0020               	movlb	0	; select bank0
  8966  026A  084C               	movf	processGestureData@lr_delta+1,w
  8967  026B  00BC               	movwf	_processGestureData$1536+1
  8968  026C  084B               	movf	processGestureData@lr_delta,w
  8969  026D  00BB               	movwf	_processGestureData$1536
  8970  026E                     l1090:	
  8971  026E  083C               	movf	_processGestureData$1536+1,w
  8972  026F  3A80               	xorlw	128
  8973  0270  00AF               	movwf	??_processGestureData
  8974  0271  3080               	movlw	128
  8975  0272  022F               	subwf	??_processGestureData,w
  8976  0273  1D03               	skipz
  8977  0274  2A77               	goto	u5005
  8978  0275  3014               	movlw	20
  8979  0276  023B               	subwf	_processGestureData$1536,w
  8980  0277                     u5005:	
  8981  0277  1803               	skipnc
  8982  0278  2879               	goto	l5990
  8983                           
  8984                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  8985  0279  0020               	movlb	0	; select bank0
  8986  027A  0849               	movf	processGestureData@ud_delta,w
  8987  027B  044A               	iorwf	processGestureData@ud_delta+1,w
  8988  027C  1D03               	btfss	3,2
  8989  027D  2A87               	goto	l6096
  8990  027E  084B               	movf	processGestureData@lr_delta,w
  8991  027F  044C               	iorwf	processGestureData@lr_delta+1,w
  8992  0280  1D03               	btfss	3,2
  8993  0281  2A87               	goto	l6096
  8994                           
  8995                           ;APDS9960.c: 760:                 gesture_near_count_++;
  8996  0282  3001               	movlw	1
  8997  0283  07E0               	addwf	_gesture_near_count_,f
  8998  0284  3000               	movlw	0
  8999  0285  3DE1               	addwfc	_gesture_near_count_+1,f
  9000                           
  9001                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9002  0286  2A94               	goto	l1092
  9003  0287                     l6096:	
  9004  0287  0849               	movf	processGestureData@ud_delta,w
  9005  0288  044A               	iorwf	processGestureData@ud_delta+1,w
  9006  0289  1D03               	btfss	3,2
  9007  028A  2A8F               	goto	l6100
  9008  028B  084B               	movf	processGestureData@lr_delta,w
  9009  028C  044C               	iorwf	processGestureData@lr_delta+1,w
  9010  028D  1903               	btfsc	3,2
  9011  028E  2A94               	goto	l1092
  9012  028F                     l6100:	
  9013                           
  9014                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9015  028F  3001               	movlw	1
  9016  0290  0021               	movlb	1	; select bank1
  9017  0291  07E2               	addwf	_gesture_far_count_^(0+128),f
  9018  0292  3000               	movlw	0
  9019  0293  3DE3               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9020  0294                     l1092:	
  9021                           
  9022                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9023  0294  0020               	movlb	0	; select bank0
  9024  0295  0861               	movf	_gesture_near_count_+1,w
  9025  0296  3A80               	xorlw	128
  9026  0297  00AF               	movwf	??_processGestureData
  9027  0298  3080               	movlw	128
  9028  0299  022F               	subwf	??_processGestureData,w
  9029  029A  1D03               	skipz
  9030  029B  2A9E               	goto	u5055
  9031  029C  300A               	movlw	10
  9032  029D  0260               	subwf	_gesture_near_count_,w
  9033  029E                     u5055:	
  9034  029E  1C03               	skipc
  9035  029F  2879               	goto	l5990
  9036  02A0  0021               	movlb	1	; select bank1
  9037  02A1  0863               	movf	(_gesture_far_count_+1)^(0+128),w
  9038  02A2  3A80               	xorlw	128
  9039  02A3  0020               	movlb	0	; select bank0
  9040  02A4  00AF               	movwf	??_processGestureData
  9041  02A5  3080               	movlw	128
  9042  02A6  022F               	subwf	??_processGestureData,w
  9043  02A7  1D03               	skipz
  9044  02A8  2AAC               	goto	u5065
  9045  02A9  3002               	movlw	2
  9046  02AA  0021               	movlb	1	; select bank1
  9047  02AB  0262               	subwf	_gesture_far_count_^(0+128),w
  9048  02AC                     u5065:	
  9049  02AC  1C03               	skipc
  9050  02AD  2879               	goto	l5990
  9051                           
  9052                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9053  02AE  0020               	movlb	0	; select bank0
  9054  02AF  0849               	movf	processGestureData@ud_delta,w
  9055  02B0  044A               	iorwf	processGestureData@ud_delta+1,w
  9056  02B1  1D03               	btfss	3,2
  9057  02B2  2AB9               	goto	l6110
  9058  02B3  084B               	movf	processGestureData@lr_delta,w
  9059  02B4  044C               	iorwf	processGestureData@lr_delta+1,w
  9060  02B5  1D03               	btfss	3,2
  9061  02B6  2AB9               	goto	l6110
  9062                           
  9063                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9064  02B7  3001               	movlw	1
  9065  02B8  2AC2               	goto	L4
  9066  02B9                     l6110:	
  9067                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9068                           
  9069  02B9  0849               	movf	processGestureData@ud_delta,w
  9070  02BA  044A               	iorwf	processGestureData@ud_delta+1,w
  9071  02BB  1903               	btfsc	3,2
  9072  02BC  2AC5               	goto	l1098
  9073  02BD  084B               	movf	processGestureData@lr_delta,w
  9074  02BE  044C               	iorwf	processGestureData@lr_delta+1,w
  9075  02BF  1903               	btfsc	3,2
  9076  02C0  2AC5               	goto	l1098
  9077                           
  9078                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9079  02C1  3002               	movlw	2
  9080  02C2                     L4:	
  9081  02C2  00DE               	movwf	_gesture_state_
  9082  02C3  3000               	movlw	0
  9083  02C4  00DF               	movwf	_gesture_state_+1
  9084  02C5                     l1098:	
  9085                           
  9086                           ;APDS9960.c: 771:                 return 1;
  9087  02C5  3001               	movlw	1
  9088  02C6  0008               	return
  9089  02C7                     l6118:	
  9090                           
  9091                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9092  02C7  084A               	movf	processGestureData@ud_delta+1,w
  9093  02C8  3A80               	xorlw	128
  9094  02C9  00AF               	movwf	??_processGestureData
  9095  02CA  3080               	movlw	128
  9096  02CB  022F               	subwf	??_processGestureData,w
  9097  02CC  1D03               	skipz
  9098  02CD  2AD0               	goto	u5115
  9099  02CE  3001               	movlw	1
  9100  02CF  0249               	subwf	processGestureData@ud_delta,w
  9101  02D0                     u5115:	
  9102  02D0  1803               	skipnc
  9103  02D1  2ADF               	goto	l6122
  9104  02D2  0020               	movlb	0	; select bank0
  9105  02D3  0949               	comf	processGestureData@ud_delta,w
  9106  02D4  00AF               	movwf	??_processGestureData
  9107  02D5  094A               	comf	processGestureData@ud_delta+1,w
  9108  02D6  00B0               	movwf	??_processGestureData+1
  9109  02D7  0AAF               	incf	??_processGestureData,f
  9110  02D8  1903               	skipnz
  9111  02D9  0AB0               	incf	??_processGestureData+1,f
  9112  02DA  082F               	movf	??_processGestureData,w
  9113  02DB  00BD               	movwf	_processGestureData$1537
  9114  02DC  0830               	movf	??_processGestureData+1,w
  9115  02DD  00BE               	movwf	_processGestureData$1537+1
  9116  02DE  2AE4               	goto	l1105
  9117  02DF                     l6122:	
  9118  02DF  0020               	movlb	0	; select bank0
  9119  02E0  084A               	movf	processGestureData@ud_delta+1,w
  9120  02E1  00BE               	movwf	_processGestureData$1537+1
  9121  02E2  0849               	movf	processGestureData@ud_delta,w
  9122  02E3  00BD               	movwf	_processGestureData$1537
  9123  02E4                     l1105:	
  9124  02E4  083E               	movf	_processGestureData$1537+1,w
  9125  02E5  3A80               	xorlw	128
  9126  02E6  00AF               	movwf	??_processGestureData
  9127  02E7  3080               	movlw	128
  9128  02E8  022F               	subwf	??_processGestureData,w
  9129  02E9  1D03               	skipz
  9130  02EA  2AED               	goto	u5125
  9131  02EB  3014               	movlw	20
  9132  02EC  023D               	subwf	_processGestureData$1537,w
  9133  02ED                     u5125:	
  9134  02ED  1803               	skipnc
  9135  02EE  2879               	goto	l5990
  9136  02EF  0020               	movlb	0	; select bank0
  9137  02F0  084C               	movf	processGestureData@lr_delta+1,w
  9138  02F1  3A80               	xorlw	128
  9139  02F2  00AF               	movwf	??_processGestureData
  9140  02F3  3080               	movlw	128
  9141  02F4  022F               	subwf	??_processGestureData,w
  9142  02F5  1D03               	skipz
  9143  02F6  2AF9               	goto	u5135
  9144  02F7  3001               	movlw	1
  9145  02F8  024B               	subwf	processGestureData@lr_delta,w
  9146  02F9                     u5135:	
  9147  02F9  1803               	skipnc
  9148  02FA  2B08               	goto	l6128
  9149  02FB  0020               	movlb	0	; select bank0
  9150  02FC  094B               	comf	processGestureData@lr_delta,w
  9151  02FD  00AF               	movwf	??_processGestureData
  9152  02FE  094C               	comf	processGestureData@lr_delta+1,w
  9153  02FF  00B0               	movwf	??_processGestureData+1
  9154  0300  0AAF               	incf	??_processGestureData,f
  9155  0301  1903               	skipnz
  9156  0302  0AB0               	incf	??_processGestureData+1,f
  9157  0303  082F               	movf	??_processGestureData,w
  9158  0304  00BF               	movwf	_processGestureData$1538
  9159  0305  0830               	movf	??_processGestureData+1,w
  9160  0306  00C0               	movwf	_processGestureData$1538+1
  9161  0307  2B0D               	goto	l1109
  9162  0308                     l6128:	
  9163  0308  0020               	movlb	0	; select bank0
  9164  0309  084C               	movf	processGestureData@lr_delta+1,w
  9165  030A  00C0               	movwf	_processGestureData$1538+1
  9166  030B  084B               	movf	processGestureData@lr_delta,w
  9167  030C  00BF               	movwf	_processGestureData$1538
  9168  030D                     l1109:	
  9169  030D  0840               	movf	_processGestureData$1538+1,w
  9170  030E  3A80               	xorlw	128
  9171  030F  00AF               	movwf	??_processGestureData
  9172  0310  3080               	movlw	128
  9173  0311  022F               	subwf	??_processGestureData,w
  9174  0312  1D03               	skipz
  9175  0313  2B16               	goto	u5145
  9176  0314  3014               	movlw	20
  9177  0315  023F               	subwf	_processGestureData$1538,w
  9178  0316                     u5145:	
  9179  0316  1803               	skipnc
  9180  0317  2879               	goto	l5990
  9181                           
  9182                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9183  0318  0020               	movlb	0	; select bank0
  9184  0319  0849               	movf	processGestureData@ud_delta,w
  9185  031A  044A               	iorwf	processGestureData@ud_delta+1,w
  9186  031B  1D03               	btfss	3,2
  9187  031C  2B25               	goto	l1110
  9188  031D  084B               	movf	processGestureData@lr_delta,w
  9189  031E  044C               	iorwf	processGestureData@lr_delta+1,w
  9190  031F  1D03               	btfss	3,2
  9191  0320  2B25               	goto	l1110
  9192                           
  9193                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9194  0321  3001               	movlw	1
  9195  0322  07E0               	addwf	_gesture_near_count_,f
  9196  0323  3000               	movlw	0
  9197  0324  3DE1               	addwfc	_gesture_near_count_+1,f
  9198  0325                     l1110:	
  9199                           ;APDS9960.c: 780:             }
  9200                           
  9201                           
  9202                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9203  0325  0861               	movf	_gesture_near_count_+1,w
  9204  0326  3A80               	xorlw	128
  9205  0327  00AF               	movwf	??_processGestureData
  9206  0328  3080               	movlw	128
  9207  0329  022F               	subwf	??_processGestureData,w
  9208  032A  1D03               	skipz
  9209  032B  2B2E               	goto	u5175
  9210  032C  300A               	movlw	10
  9211  032D  0260               	subwf	_gesture_near_count_,w
  9212  032E                     u5175:	
  9213  032E  1C03               	skipc
  9214  032F  2879               	goto	l5990
  9215                           
  9216                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9217  0330  0020               	movlb	0	; select bank0
  9218  0331  01E4               	clrf	_gesture_ud_count_
  9219  0332  01E5               	clrf	_gesture_ud_count_+1
  9220                           
  9221                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9222  0333  01E2               	clrf	_gesture_lr_count_
  9223  0334  01E3               	clrf	_gesture_lr_count_+1
  9224                           
  9225                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9226  0335  01E8               	clrf	_gesture_ud_delta_
  9227  0336  01E9               	clrf	_gesture_ud_delta_+1
  9228                           
  9229                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9230  0337  01E6               	clrf	_gesture_lr_delta_
  9231  0338  01E7               	clrf	_gesture_lr_delta_+1
  9232  0339  2879               	goto	l5990
  9233  033A                     __end_of_processGestureData:	
  9234                           
  9235                           	psect	text19
  9236  0AA5                     __ptext19:	
  9237 ;; *************** function ___wmul *****************
  9238 ;; Defined at:
  9239 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9242 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;  product         2    4[BANK0 ] unsigned int 
  9245 ;; Return value:  Size  Location     Type
  9246 ;;                  2    0[BANK0 ] unsigned int 
  9247 ;; Registers used:
  9248 ;;		wreg, status,2, status,0
  9249 ;; Tracked objects:
  9250 ;;		On entry : 0/0
  9251 ;;		On exit  : 0/0
  9252 ;;		Unchanged: 0/0
  9253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9254 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;Total ram usage:        6 bytes
  9259 ;; Hardware stack levels used:    1
  9260 ;; Hardware stack levels required when called:    5
  9261 ;; This function calls:
  9262 ;;		Nothing
  9263 ;; This function is called by:
  9264 ;;		_processGestureData
  9265 ;; This function uses a non-reentrant model
  9266 ;;
  9267                           
  9268                           
  9269                           ;psect for function ___wmul
  9270  0AA5                     ___wmul:	
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9274  0AA5  0020               	movlb	0	; select bank0
  9275  0AA6  01A4               	clrf	___wmul@product
  9276  0AA7  01A5               	clrf	___wmul@product+1
  9277  0AA8                     l5828:	
  9278  0AA8  1C20               	btfss	___wmul@multiplier,0
  9279  0AA9  2AAE               	goto	l1398
  9280  0AAA  0822               	movf	___wmul@multiplicand,w
  9281  0AAB  07A4               	addwf	___wmul@product,f
  9282  0AAC  0823               	movf	___wmul@multiplicand+1,w
  9283  0AAD  3DA5               	addwfc	___wmul@product+1,f
  9284  0AAE                     l1398:	
  9285  0AAE  3001               	movlw	1
  9286  0AAF                     u4505:	
  9287  0AAF  35A2               	lslf	___wmul@multiplicand,f
  9288  0AB0  0DA3               	rlf	___wmul@multiplicand+1,f
  9289  0AB1  0B89               	decfsz	9,f
  9290  0AB2  2AAF               	goto	u4505
  9291  0AB3  3001               	movlw	1
  9292  0AB4                     u4515:	
  9293  0AB4  36A1               	lsrf	___wmul@multiplier+1,f
  9294  0AB5  0CA0               	rrf	___wmul@multiplier,f
  9295  0AB6  0B89               	decfsz	9,f
  9296  0AB7  2AB4               	goto	u4515
  9297  0AB8  0820               	movf	___wmul@multiplier,w
  9298  0AB9  0421               	iorwf	___wmul@multiplier+1,w
  9299  0ABA  1D03               	btfss	3,2
  9300  0ABB  2AA8               	goto	l5828
  9301  0ABC  0825               	movf	___wmul@product+1,w
  9302  0ABD  00A1               	movwf	?___wmul+1
  9303  0ABE  0824               	movf	___wmul@product,w
  9304  0ABF  00A0               	movwf	?___wmul
  9305  0AC0  0008               	return
  9306  0AC1                     __end_of___wmul:	
  9307                           
  9308                           	psect	text20
  9309  0EF0                     __ptext20:	
  9310 ;; *************** function ___awdiv *****************
  9311 ;; Defined at:
  9312 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  divisor         2    6[BANK0 ] int 
  9315 ;;  dividend        2    8[BANK0 ] int 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;  quotient        2   13[BANK0 ] int 
  9318 ;;  sign            1   12[BANK0 ] unsigned char 
  9319 ;;  counter         1   11[BANK0 ] unsigned char 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  2    6[BANK0 ] int 
  9322 ;; Registers used:
  9323 ;;		wreg, status,2, status,0
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9329 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;Total ram usage:        9 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    5
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_processGestureData
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           
  9344                           ;psect for function ___awdiv
  9345  0EF0                     ___awdiv:	
  9346                           
  9347                           ;incstack = 0
  9348                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9349  0EF0  0020               	movlb	0	; select bank0
  9350  0EF1  01AC               	clrf	___awdiv@sign
  9351  0EF2  1FA7               	btfss	___awdiv@divisor+1,7
  9352  0EF3  2EFB               	goto	l5848
  9353  0EF4  09A6               	comf	___awdiv@divisor,f
  9354  0EF5  09A7               	comf	___awdiv@divisor+1,f
  9355  0EF6  0AA6               	incf	___awdiv@divisor,f
  9356  0EF7  1903               	skipnz
  9357  0EF8  0AA7               	incf	___awdiv@divisor+1,f
  9358  0EF9  01AC               	clrf	___awdiv@sign
  9359  0EFA  0AAC               	incf	___awdiv@sign,f
  9360  0EFB                     l5848:	
  9361  0EFB  1FA9               	btfss	___awdiv@dividend+1,7
  9362  0EFC  2F06               	goto	l5854
  9363  0EFD  09A8               	comf	___awdiv@dividend,f
  9364  0EFE  09A9               	comf	___awdiv@dividend+1,f
  9365  0EFF  0AA8               	incf	___awdiv@dividend,f
  9366  0F00  1903               	skipnz
  9367  0F01  0AA9               	incf	___awdiv@dividend+1,f
  9368  0F02  3001               	movlw	1
  9369  0F03  00AA               	movwf	??___awdiv
  9370  0F04  082A               	movf	??___awdiv,w
  9371  0F05  06AC               	xorwf	___awdiv@sign,f
  9372  0F06                     l5854:	
  9373  0F06  01AD               	clrf	___awdiv@quotient
  9374  0F07  01AE               	clrf	___awdiv@quotient+1
  9375  0F08  0826               	movf	___awdiv@divisor,w
  9376  0F09  0427               	iorwf	___awdiv@divisor+1,w
  9377  0F0A  1903               	btfsc	3,2
  9378  0F0B  2F35               	goto	l5876
  9379  0F0C  01AB               	clrf	___awdiv@counter
  9380  0F0D  0AAB               	incf	___awdiv@counter,f
  9381  0F0E                     l5864:	
  9382  0F0E  1BA7               	btfsc	___awdiv@divisor+1,7
  9383  0F0F  2F1A               	goto	l5866
  9384  0F10  3001               	movlw	1
  9385  0F11                     u4565:	
  9386  0F11  35A6               	lslf	___awdiv@divisor,f
  9387  0F12  0DA7               	rlf	___awdiv@divisor+1,f
  9388  0F13  0B89               	decfsz	9,f
  9389  0F14  2F11               	goto	u4565
  9390  0F15  3001               	movlw	1
  9391  0F16  00AA               	movwf	??___awdiv
  9392  0F17  082A               	movf	??___awdiv,w
  9393  0F18  07AB               	addwf	___awdiv@counter,f
  9394  0F19  2F0E               	goto	l5864
  9395  0F1A                     l5866:	
  9396  0F1A  3001               	movlw	1
  9397  0F1B                     u4585:	
  9398  0F1B  35AD               	lslf	___awdiv@quotient,f
  9399  0F1C  0DAE               	rlf	___awdiv@quotient+1,f
  9400  0F1D  0B89               	decfsz	9,f
  9401  0F1E  2F1B               	goto	u4585
  9402  0F1F  0827               	movf	___awdiv@divisor+1,w
  9403  0F20  0229               	subwf	___awdiv@dividend+1,w
  9404  0F21  1D03               	skipz
  9405  0F22  2F25               	goto	u4595
  9406  0F23  0826               	movf	___awdiv@divisor,w
  9407  0F24  0228               	subwf	___awdiv@dividend,w
  9408  0F25                     u4595:	
  9409  0F25  1C03               	skipc
  9410  0F26  2F2C               	goto	l5872
  9411  0F27  0826               	movf	___awdiv@divisor,w
  9412  0F28  02A8               	subwf	___awdiv@dividend,f
  9413  0F29  0827               	movf	___awdiv@divisor+1,w
  9414  0F2A  3BA9               	subwfb	___awdiv@dividend+1,f
  9415  0F2B  142D               	bsf	___awdiv@quotient,0
  9416  0F2C                     l5872:	
  9417  0F2C  3001               	movlw	1
  9418  0F2D                     u4605:	
  9419  0F2D  36A7               	lsrf	___awdiv@divisor+1,f
  9420  0F2E  0CA6               	rrf	___awdiv@divisor,f
  9421  0F2F  0B89               	decfsz	9,f
  9422  0F30  2F2D               	goto	u4605
  9423  0F31  3001               	movlw	1
  9424  0F32  02AB               	subwf	___awdiv@counter,f
  9425  0F33  1D03               	btfss	3,2
  9426  0F34  2F1A               	goto	l5866
  9427  0F35                     l5876:	
  9428  0F35  082C               	movf	___awdiv@sign,w
  9429  0F36  1903               	btfsc	3,2
  9430  0F37  2F3D               	goto	l5880
  9431  0F38  09AD               	comf	___awdiv@quotient,f
  9432  0F39  09AE               	comf	___awdiv@quotient+1,f
  9433  0F3A  0AAD               	incf	___awdiv@quotient,f
  9434  0F3B  1903               	skipnz
  9435  0F3C  0AAE               	incf	___awdiv@quotient+1,f
  9436  0F3D                     l5880:	
  9437  0F3D  082E               	movf	___awdiv@quotient+1,w
  9438  0F3E  00A7               	movwf	?___awdiv+1
  9439  0F3F  082D               	movf	___awdiv@quotient,w
  9440  0F40  00A6               	movwf	?___awdiv
  9441  0F41  0008               	return
  9442  0F42                     __end_of___awdiv:	
  9443                           
  9444                           	psect	text21
  9445  09B2                     __ptext21:	
  9446 ;; *************** function _isGestureAvailable *****************
  9447 ;; Defined at:
  9448 ;;		line 537 in file "APDS9960.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  val             1   10[BANK0 ] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      _Bool 
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0, pclath, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;Total ram usage:        2 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    8
  9469 ;; This function calls:
  9470 ;;		_wireReadDataByte
  9471 ;; This function is called by:
  9472 ;;		_main
  9473 ;;		_readGesture
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           
  9478                           ;psect for function _isGestureAvailable
  9479  09B2                     _isGestureAvailable:	
  9480                           
  9481                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  9482                           
  9483                           ;incstack = 0
  9484                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  9485  09B2  30AF               	movlw	175
  9486  09B3  318A  22FD  3189   	fcall	_wireReadDataByte
  9487  09B6  0020               	movlb	0	; select bank0
  9488  09B7  00A9               	movwf	??_isGestureAvailable
  9489  09B8  0829               	movf	??_isGestureAvailable,w
  9490  09B9  00AA               	movwf	isGestureAvailable@val
  9491                           
  9492                           ;APDS9960.c: 545:     val &= 0b00000001;
  9493  09BA  3001               	movlw	1
  9494  09BB  00A9               	movwf	??_isGestureAvailable
  9495  09BC  0829               	movf	??_isGestureAvailable,w
  9496  09BD  05AA               	andwf	isGestureAvailable@val,f
  9497                           
  9498                           ;APDS9960.c: 548:     if( val == 1) {
  9499  09BE  032A               	decf	isGestureAvailable@val,w
  9500  09BF  1D03               	btfss	3,2
  9501  09C0  29C3               	goto	l5896
  9502                           
  9503                           ;APDS9960.c: 549:         return 1;
  9504  09C1  3001               	movlw	1
  9505  09C2  0008               	return
  9506  09C3                     l5896:	
  9507                           
  9508                           ;APDS9960.c: 551:         return 0;
  9509  09C3  3000               	movlw	0
  9510  09C4  0008               	return
  9511  09C5                     __end_of_isGestureAvailable:	
  9512                           
  9513                           	psect	text22
  9514  033A                     __ptext22:	
  9515 ;; *************** function _decodeGesture *****************
  9516 ;; Defined at:
  9517 ;;		line 795 in file "APDS9960.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  1    wreg      _Bool 
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:       18 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    5
  9538 ;; This function calls:
  9539 ;;		Nothing
  9540 ;; This function is called by:
  9541 ;;		_readGesture
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           
  9546                           ;psect for function _decodeGesture
  9547  033A                     _decodeGesture:	
  9548                           
  9549                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  9550                           
  9551                           ;incstack = 0
  9552                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9553  033A  0020               	movlb	0	; select bank0
  9554  033B  035E               	decf	_gesture_state_,w
  9555  033C  045F               	iorwf	_gesture_state_+1,w
  9556  033D  1D03               	btfss	3,2
  9557  033E  2B46               	goto	l6150
  9558                           
  9559                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  9560  033F  3005               	movlw	5
  9561  0340  0022               	movlb	2	; select bank2
  9562  0341  00E8               	movwf	_gesture_motion_^(0+256)
  9563  0342  3000               	movlw	0
  9564  0343  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9565                           
  9566                           ;APDS9960.c: 800:         return 1;
  9567  0344  3001               	movlw	1
  9568  0345  0008               	return
  9569  0346                     l6150:	
  9570  0346  3002               	movlw	2
  9571  0347  065E               	xorwf	_gesture_state_,w
  9572  0348  045F               	iorwf	_gesture_state_+1,w
  9573  0349  1D03               	btfss	3,2
  9574  034A  2B52               	goto	l6156
  9575                           
  9576                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  9577  034B  3006               	movlw	6
  9578  034C  0022               	movlb	2	; select bank2
  9579  034D  00E8               	movwf	_gesture_motion_^(0+256)
  9580  034E  3000               	movlw	0
  9581  034F  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9582                           
  9583                           ;APDS9960.c: 803:         return 1;
  9584  0350  3001               	movlw	1
  9585  0351  0008               	return
  9586  0352                     l6156:	
  9587                           
  9588                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  9589  0352  0A64               	incf	_gesture_ud_count_,w
  9590  0353  1D03               	skipz
  9591  0354  2B5E               	goto	l6162
  9592  0355  0A65               	incf	_gesture_ud_count_+1,w
  9593  0356  1D03               	btfss	3,2
  9594  0357  2B5E               	goto	l6162
  9595  0358  0862               	movf	_gesture_lr_count_,w
  9596  0359  0463               	iorwf	_gesture_lr_count_+1,w
  9597  035A  1D03               	btfss	3,2
  9598  035B  2B5E               	goto	l6162
  9599  035C                     l6160:	
  9600                           
  9601                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  9602  035C  3003               	movlw	3
  9603  035D  2B7D               	goto	L7
  9604  035E                     l6162:	
  9605                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  9606                           
  9607  035E  0364               	decf	_gesture_ud_count_,w
  9608  035F  0465               	iorwf	_gesture_ud_count_+1,w
  9609  0360  1D03               	btfss	3,2
  9610  0361  2B68               	goto	l6168
  9611  0362  0862               	movf	_gesture_lr_count_,w
  9612  0363  0463               	iorwf	_gesture_lr_count_+1,w
  9613  0364  1D03               	btfss	3,2
  9614  0365  2B68               	goto	l6168
  9615  0366                     l6166:	
  9616                           
  9617                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  9618  0366  3004               	movlw	4
  9619  0367  2B7D               	goto	L7
  9620  0368                     l6168:	
  9621                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  9622                           
  9623  0368  0864               	movf	_gesture_ud_count_,w
  9624  0369  0465               	iorwf	_gesture_ud_count_+1,w
  9625  036A  1D03               	btfss	3,2
  9626  036B  2B72               	goto	l6174
  9627  036C  0362               	decf	_gesture_lr_count_,w
  9628  036D  0463               	iorwf	_gesture_lr_count_+1,w
  9629  036E  1D03               	btfss	3,2
  9630  036F  2B72               	goto	l6174
  9631  0370                     l6172:	
  9632                           
  9633                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  9634  0370  3002               	movlw	2
  9635  0371  2B7D               	goto	L7
  9636  0372                     l6174:	
  9637                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  9638                           
  9639  0372  0864               	movf	_gesture_ud_count_,w
  9640  0373  0465               	iorwf	_gesture_ud_count_+1,w
  9641  0374  1D03               	btfss	3,2
  9642  0375  2B82               	goto	l6180
  9643  0376  0A62               	incf	_gesture_lr_count_,w
  9644  0377  1D03               	skipz
  9645  0378  2B82               	goto	l6180
  9646  0379  0A63               	incf	_gesture_lr_count_+1,w
  9647  037A  1D03               	btfss	3,2
  9648  037B  2B82               	goto	l6180
  9649  037C                     l6178:	
  9650                           
  9651                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  9652  037C  3001               	movlw	1
  9653  037D                     L7:	
  9654  037D  0022               	movlb	2	; select bank2
  9655  037E  00E8               	movwf	_gesture_motion_^(0+256)
  9656  037F  3000               	movlw	0
  9657  0380  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9658                           
  9659                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  9660  0381  2CC8               	goto	l6256
  9661  0382                     l6180:	
  9662  0382  0A64               	incf	_gesture_ud_count_,w
  9663  0383  1D03               	skipz
  9664  0384  2BD3               	goto	l6198
  9665  0385  0A65               	incf	_gesture_ud_count_+1,w
  9666  0386  1D03               	btfss	3,2
  9667  0387  2BD3               	goto	l6198
  9668  0388  0362               	decf	_gesture_lr_count_,w
  9669  0389  0463               	iorwf	_gesture_lr_count_+1,w
  9670  038A  1D03               	btfss	3,2
  9671  038B  2BD3               	goto	l6198
  9672                           
  9673                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9674  038C  0869               	movf	_gesture_ud_delta_+1,w
  9675  038D  3A80               	xorlw	128
  9676  038E  00A0               	movwf	??_decodeGesture
  9677  038F  3080               	movlw	128
  9678  0390  0220               	subwf	??_decodeGesture,w
  9679  0391  1D03               	skipz
  9680  0392  2B95               	goto	u5305
  9681  0393  3001               	movlw	1
  9682  0394  0268               	subwf	_gesture_ud_delta_,w
  9683  0395                     u5305:	
  9684  0395  1803               	skipnc
  9685  0396  2BA4               	goto	l6188
  9686  0397  0020               	movlb	0	; select bank0
  9687  0398  0968               	comf	_gesture_ud_delta_,w
  9688  0399  00A0               	movwf	??_decodeGesture
  9689  039A  0969               	comf	_gesture_ud_delta_+1,w
  9690  039B  00A1               	movwf	??_decodeGesture+1
  9691  039C  0AA0               	incf	??_decodeGesture,f
  9692  039D  1903               	skipnz
  9693  039E  0AA1               	incf	??_decodeGesture+1,f
  9694  039F  0820               	movf	??_decodeGesture,w
  9695  03A0  00A2               	movwf	_decodeGesture$1540
  9696  03A1  0821               	movf	??_decodeGesture+1,w
  9697  03A2  00A3               	movwf	_decodeGesture$1540+1
  9698  03A3  2BA9               	goto	l1131
  9699  03A4                     l6188:	
  9700  03A4  0020               	movlb	0	; select bank0
  9701  03A5  0869               	movf	_gesture_ud_delta_+1,w
  9702  03A6  00A3               	movwf	_decodeGesture$1540+1
  9703  03A7  0868               	movf	_gesture_ud_delta_,w
  9704  03A8  00A2               	movwf	_decodeGesture$1540
  9705  03A9                     l1131:	
  9706  03A9  0867               	movf	_gesture_lr_delta_+1,w
  9707  03AA  3A80               	xorlw	128
  9708  03AB  00A0               	movwf	??_decodeGesture
  9709  03AC  3080               	movlw	128
  9710  03AD  0220               	subwf	??_decodeGesture,w
  9711  03AE  1D03               	skipz
  9712  03AF  2BB2               	goto	u5315
  9713  03B0  3001               	movlw	1
  9714  03B1  0266               	subwf	_gesture_lr_delta_,w
  9715  03B2                     u5315:	
  9716  03B2  1803               	skipnc
  9717  03B3  2BC1               	goto	l6192
  9718  03B4  0020               	movlb	0	; select bank0
  9719  03B5  0966               	comf	_gesture_lr_delta_,w
  9720  03B6  00A0               	movwf	??_decodeGesture
  9721  03B7  0967               	comf	_gesture_lr_delta_+1,w
  9722  03B8  00A1               	movwf	??_decodeGesture+1
  9723  03B9  0AA0               	incf	??_decodeGesture,f
  9724  03BA  1903               	skipnz
  9725  03BB  0AA1               	incf	??_decodeGesture+1,f
  9726  03BC  0820               	movf	??_decodeGesture,w
  9727  03BD  00A4               	movwf	_decodeGesture$1541
  9728  03BE  0821               	movf	??_decodeGesture+1,w
  9729  03BF  00A5               	movwf	_decodeGesture$1541+1
  9730  03C0  2BC6               	goto	l1135
  9731  03C1                     l6192:	
  9732  03C1  0020               	movlb	0	; select bank0
  9733  03C2  0867               	movf	_gesture_lr_delta_+1,w
  9734  03C3  00A5               	movwf	_decodeGesture$1541+1
  9735  03C4  0866               	movf	_gesture_lr_delta_,w
  9736  03C5  00A4               	movwf	_decodeGesture$1541
  9737  03C6                     l1135:	
  9738  03C6  0825               	movf	_decodeGesture$1541+1,w
  9739  03C7  3A80               	xorlw	128
  9740  03C8  00A0               	movwf	??_decodeGesture
  9741  03C9  0823               	movf	_decodeGesture$1540+1,w
  9742  03CA  3A80               	xorlw	128
  9743  03CB  0220               	subwf	??_decodeGesture,w
  9744  03CC  1D03               	skipz
  9745  03CD  2BD0               	goto	u5325
  9746  03CE  0822               	movf	_decodeGesture$1540,w
  9747  03CF  0224               	subwf	_decodeGesture$1541,w
  9748  03D0                     u5325:	
  9749  03D0  1C03               	btfss	3,0
  9750  03D1  2B5C               	goto	l6160
  9751  03D2  2B70               	goto	l6172
  9752  03D3                     l6198:	
  9753  03D3  0364               	decf	_gesture_ud_count_,w
  9754  03D4  0465               	iorwf	_gesture_ud_count_+1,w
  9755  03D5  1D03               	btfss	3,2
  9756  03D6  2C24               	goto	l6216
  9757  03D7  0A62               	incf	_gesture_lr_count_,w
  9758  03D8  1D03               	skipz
  9759  03D9  2C24               	goto	l6216
  9760  03DA  0A63               	incf	_gesture_lr_count_+1,w
  9761  03DB  1D03               	btfss	3,2
  9762  03DC  2C24               	goto	l6216
  9763                           
  9764                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9765  03DD  0869               	movf	_gesture_ud_delta_+1,w
  9766  03DE  3A80               	xorlw	128
  9767  03DF  00A0               	movwf	??_decodeGesture
  9768  03E0  3080               	movlw	128
  9769  03E1  0220               	subwf	??_decodeGesture,w
  9770  03E2  1D03               	skipz
  9771  03E3  2BE6               	goto	u5355
  9772  03E4  3001               	movlw	1
  9773  03E5  0268               	subwf	_gesture_ud_delta_,w
  9774  03E6                     u5355:	
  9775  03E6  1803               	skipnc
  9776  03E7  2BF5               	goto	l6206
  9777  03E8  0020               	movlb	0	; select bank0
  9778  03E9  0968               	comf	_gesture_ud_delta_,w
  9779  03EA  00A0               	movwf	??_decodeGesture
  9780  03EB  0969               	comf	_gesture_ud_delta_+1,w
  9781  03EC  00A1               	movwf	??_decodeGesture+1
  9782  03ED  0AA0               	incf	??_decodeGesture,f
  9783  03EE  1903               	skipnz
  9784  03EF  0AA1               	incf	??_decodeGesture+1,f
  9785  03F0  0820               	movf	??_decodeGesture,w
  9786  03F1  00A6               	movwf	_decodeGesture$1542
  9787  03F2  0821               	movf	??_decodeGesture+1,w
  9788  03F3  00A7               	movwf	_decodeGesture$1542+1
  9789  03F4  2BFA               	goto	l1143
  9790  03F5                     l6206:	
  9791  03F5  0020               	movlb	0	; select bank0
  9792  03F6  0869               	movf	_gesture_ud_delta_+1,w
  9793  03F7  00A7               	movwf	_decodeGesture$1542+1
  9794  03F8  0868               	movf	_gesture_ud_delta_,w
  9795  03F9  00A6               	movwf	_decodeGesture$1542
  9796  03FA                     l1143:	
  9797  03FA  0867               	movf	_gesture_lr_delta_+1,w
  9798  03FB  3A80               	xorlw	128
  9799  03FC  00A0               	movwf	??_decodeGesture
  9800  03FD  3080               	movlw	128
  9801  03FE  0220               	subwf	??_decodeGesture,w
  9802  03FF  1D03               	skipz
  9803  0400  2C03               	goto	u5365
  9804  0401  3001               	movlw	1
  9805  0402  0266               	subwf	_gesture_lr_delta_,w
  9806  0403                     u5365:	
  9807  0403  1803               	skipnc
  9808  0404  2C12               	goto	l6210
  9809  0405  0020               	movlb	0	; select bank0
  9810  0406  0966               	comf	_gesture_lr_delta_,w
  9811  0407  00A0               	movwf	??_decodeGesture
  9812  0408  0967               	comf	_gesture_lr_delta_+1,w
  9813  0409  00A1               	movwf	??_decodeGesture+1
  9814  040A  0AA0               	incf	??_decodeGesture,f
  9815  040B  1903               	skipnz
  9816  040C  0AA1               	incf	??_decodeGesture+1,f
  9817  040D  0820               	movf	??_decodeGesture,w
  9818  040E  00A8               	movwf	_decodeGesture$1543
  9819  040F  0821               	movf	??_decodeGesture+1,w
  9820  0410  00A9               	movwf	_decodeGesture$1543+1
  9821  0411  2C17               	goto	l1147
  9822  0412                     l6210:	
  9823  0412  0020               	movlb	0	; select bank0
  9824  0413  0867               	movf	_gesture_lr_delta_+1,w
  9825  0414  00A9               	movwf	_decodeGesture$1543+1
  9826  0415  0866               	movf	_gesture_lr_delta_,w
  9827  0416  00A8               	movwf	_decodeGesture$1543
  9828  0417                     l1147:	
  9829  0417  0829               	movf	_decodeGesture$1543+1,w
  9830  0418  3A80               	xorlw	128
  9831  0419  00A0               	movwf	??_decodeGesture
  9832  041A  0827               	movf	_decodeGesture$1542+1,w
  9833  041B  3A80               	xorlw	128
  9834  041C  0220               	subwf	??_decodeGesture,w
  9835  041D  1D03               	skipz
  9836  041E  2C21               	goto	u5375
  9837  041F  0826               	movf	_decodeGesture$1542,w
  9838  0420  0228               	subwf	_decodeGesture$1543,w
  9839  0421                     u5375:	
  9840  0421  1C03               	btfss	3,0
  9841  0422  2B66               	goto	l6166
  9842  0423  2B7C               	goto	l6178
  9843  0424                     l6216:	
  9844  0424  0A64               	incf	_gesture_ud_count_,w
  9845  0425  1D03               	skipz
  9846  0426  2C77               	goto	l6234
  9847  0427  0A65               	incf	_gesture_ud_count_+1,w
  9848  0428  1D03               	btfss	3,2
  9849  0429  2C77               	goto	l6234
  9850  042A  0A62               	incf	_gesture_lr_count_,w
  9851  042B  1D03               	skipz
  9852  042C  2C77               	goto	l6234
  9853  042D  0A63               	incf	_gesture_lr_count_+1,w
  9854  042E  1D03               	btfss	3,2
  9855  042F  2C77               	goto	l6234
  9856                           
  9857                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9858  0430  0869               	movf	_gesture_ud_delta_+1,w
  9859  0431  3A80               	xorlw	128
  9860  0432  00A0               	movwf	??_decodeGesture
  9861  0433  3080               	movlw	128
  9862  0434  0220               	subwf	??_decodeGesture,w
  9863  0435  1D03               	skipz
  9864  0436  2C39               	goto	u5405
  9865  0437  3001               	movlw	1
  9866  0438  0268               	subwf	_gesture_ud_delta_,w
  9867  0439                     u5405:	
  9868  0439  1803               	skipnc
  9869  043A  2C48               	goto	l6224
  9870  043B  0020               	movlb	0	; select bank0
  9871  043C  0968               	comf	_gesture_ud_delta_,w
  9872  043D  00A0               	movwf	??_decodeGesture
  9873  043E  0969               	comf	_gesture_ud_delta_+1,w
  9874  043F  00A1               	movwf	??_decodeGesture+1
  9875  0440  0AA0               	incf	??_decodeGesture,f
  9876  0441  1903               	skipnz
  9877  0442  0AA1               	incf	??_decodeGesture+1,f
  9878  0443  0820               	movf	??_decodeGesture,w
  9879  0444  00AA               	movwf	_decodeGesture$1544
  9880  0445  0821               	movf	??_decodeGesture+1,w
  9881  0446  00AB               	movwf	_decodeGesture$1544+1
  9882  0447  2C4D               	goto	l1155
  9883  0448                     l6224:	
  9884  0448  0020               	movlb	0	; select bank0
  9885  0449  0869               	movf	_gesture_ud_delta_+1,w
  9886  044A  00AB               	movwf	_decodeGesture$1544+1
  9887  044B  0868               	movf	_gesture_ud_delta_,w
  9888  044C  00AA               	movwf	_decodeGesture$1544
  9889  044D                     l1155:	
  9890  044D  0867               	movf	_gesture_lr_delta_+1,w
  9891  044E  3A80               	xorlw	128
  9892  044F  00A0               	movwf	??_decodeGesture
  9893  0450  3080               	movlw	128
  9894  0451  0220               	subwf	??_decodeGesture,w
  9895  0452  1D03               	skipz
  9896  0453  2C56               	goto	u5415
  9897  0454  3001               	movlw	1
  9898  0455  0266               	subwf	_gesture_lr_delta_,w
  9899  0456                     u5415:	
  9900  0456  1803               	skipnc
  9901  0457  2C65               	goto	l6228
  9902  0458  0020               	movlb	0	; select bank0
  9903  0459  0966               	comf	_gesture_lr_delta_,w
  9904  045A  00A0               	movwf	??_decodeGesture
  9905  045B  0967               	comf	_gesture_lr_delta_+1,w
  9906  045C  00A1               	movwf	??_decodeGesture+1
  9907  045D  0AA0               	incf	??_decodeGesture,f
  9908  045E  1903               	skipnz
  9909  045F  0AA1               	incf	??_decodeGesture+1,f
  9910  0460  0820               	movf	??_decodeGesture,w
  9911  0461  00AC               	movwf	_decodeGesture$1545
  9912  0462  0821               	movf	??_decodeGesture+1,w
  9913  0463  00AD               	movwf	_decodeGesture$1545+1
  9914  0464  2C6A               	goto	l1159
  9915  0465                     l6228:	
  9916  0465  0020               	movlb	0	; select bank0
  9917  0466  0867               	movf	_gesture_lr_delta_+1,w
  9918  0467  00AD               	movwf	_decodeGesture$1545+1
  9919  0468  0866               	movf	_gesture_lr_delta_,w
  9920  0469  00AC               	movwf	_decodeGesture$1545
  9921  046A                     l1159:	
  9922  046A  082D               	movf	_decodeGesture$1545+1,w
  9923  046B  3A80               	xorlw	128
  9924  046C  00A0               	movwf	??_decodeGesture
  9925  046D  082B               	movf	_decodeGesture$1544+1,w
  9926  046E  3A80               	xorlw	128
  9927  046F  0220               	subwf	??_decodeGesture,w
  9928  0470  1D03               	skipz
  9929  0471  2C74               	goto	u5425
  9930  0472  082A               	movf	_decodeGesture$1544,w
  9931  0473  022C               	subwf	_decodeGesture$1545,w
  9932  0474                     u5425:	
  9933  0474  1C03               	btfss	3,0
  9934  0475  2B5C               	goto	l6160
  9935  0476  2B7C               	goto	l6178
  9936  0477                     l6234:	
  9937  0477  0364               	decf	_gesture_ud_count_,w
  9938  0478  0465               	iorwf	_gesture_ud_count_+1,w
  9939  0479  1D03               	btfss	3,2
  9940  047A  2CC6               	goto	l6252
  9941  047B  0362               	decf	_gesture_lr_count_,w
  9942  047C  0463               	iorwf	_gesture_lr_count_+1,w
  9943  047D  1D03               	btfss	3,2
  9944  047E  2CC6               	goto	l6252
  9945                           
  9946                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9947  047F  0869               	movf	_gesture_ud_delta_+1,w
  9948  0480  3A80               	xorlw	128
  9949  0481  00A0               	movwf	??_decodeGesture
  9950  0482  3080               	movlw	128
  9951  0483  0220               	subwf	??_decodeGesture,w
  9952  0484  1D03               	skipz
  9953  0485  2C88               	goto	u5455
  9954  0486  3001               	movlw	1
  9955  0487  0268               	subwf	_gesture_ud_delta_,w
  9956  0488                     u5455:	
  9957  0488  1803               	skipnc
  9958  0489  2C97               	goto	l6242
  9959  048A  0020               	movlb	0	; select bank0
  9960  048B  0968               	comf	_gesture_ud_delta_,w
  9961  048C  00A0               	movwf	??_decodeGesture
  9962  048D  0969               	comf	_gesture_ud_delta_+1,w
  9963  048E  00A1               	movwf	??_decodeGesture+1
  9964  048F  0AA0               	incf	??_decodeGesture,f
  9965  0490  1903               	skipnz
  9966  0491  0AA1               	incf	??_decodeGesture+1,f
  9967  0492  0820               	movf	??_decodeGesture,w
  9968  0493  00AE               	movwf	_decodeGesture$1546
  9969  0494  0821               	movf	??_decodeGesture+1,w
  9970  0495  00AF               	movwf	_decodeGesture$1546+1
  9971  0496  2C9C               	goto	l1167
  9972  0497                     l6242:	
  9973  0497  0020               	movlb	0	; select bank0
  9974  0498  0869               	movf	_gesture_ud_delta_+1,w
  9975  0499  00AF               	movwf	_decodeGesture$1546+1
  9976  049A  0868               	movf	_gesture_ud_delta_,w
  9977  049B  00AE               	movwf	_decodeGesture$1546
  9978  049C                     l1167:	
  9979  049C  0867               	movf	_gesture_lr_delta_+1,w
  9980  049D  3A80               	xorlw	128
  9981  049E  00A0               	movwf	??_decodeGesture
  9982  049F  3080               	movlw	128
  9983  04A0  0220               	subwf	??_decodeGesture,w
  9984  04A1  1D03               	skipz
  9985  04A2  2CA5               	goto	u5465
  9986  04A3  3001               	movlw	1
  9987  04A4  0266               	subwf	_gesture_lr_delta_,w
  9988  04A5                     u5465:	
  9989  04A5  1803               	skipnc
  9990  04A6  2CB4               	goto	l6246
  9991  04A7  0020               	movlb	0	; select bank0
  9992  04A8  0966               	comf	_gesture_lr_delta_,w
  9993  04A9  00A0               	movwf	??_decodeGesture
  9994  04AA  0967               	comf	_gesture_lr_delta_+1,w
  9995  04AB  00A1               	movwf	??_decodeGesture+1
  9996  04AC  0AA0               	incf	??_decodeGesture,f
  9997  04AD  1903               	skipnz
  9998  04AE  0AA1               	incf	??_decodeGesture+1,f
  9999  04AF  0820               	movf	??_decodeGesture,w
 10000  04B0  00B0               	movwf	_decodeGesture$1547
 10001  04B1  0821               	movf	??_decodeGesture+1,w
 10002  04B2  00B1               	movwf	_decodeGesture$1547+1
 10003  04B3  2CB9               	goto	l1171
 10004  04B4                     l6246:	
 10005  04B4  0020               	movlb	0	; select bank0
 10006  04B5  0867               	movf	_gesture_lr_delta_+1,w
 10007  04B6  00B1               	movwf	_decodeGesture$1547+1
 10008  04B7  0866               	movf	_gesture_lr_delta_,w
 10009  04B8  00B0               	movwf	_decodeGesture$1547
 10010  04B9                     l1171:	
 10011  04B9  0831               	movf	_decodeGesture$1547+1,w
 10012  04BA  3A80               	xorlw	128
 10013  04BB  00A0               	movwf	??_decodeGesture
 10014  04BC  082F               	movf	_decodeGesture$1546+1,w
 10015  04BD  3A80               	xorlw	128
 10016  04BE  0220               	subwf	??_decodeGesture,w
 10017  04BF  1D03               	skipz
 10018  04C0  2CC3               	goto	u5475
 10019  04C1  082E               	movf	_decodeGesture$1546,w
 10020  04C2  0230               	subwf	_decodeGesture$1547,w
 10021  04C3                     u5475:	
 10022  04C3  1C03               	btfss	3,0
 10023  04C4  2B66               	goto	l6166
 10024  04C5  2B70               	goto	l6172
 10025  04C6                     l6252:	
 10026                           
 10027                           ;APDS9960.c: 840:         return 0;
 10028  04C6  3000               	movlw	0
 10029  04C7  0008               	return
 10030  04C8                     l6256:	
 10031                           
 10032                           ;APDS9960.c: 843:     return 1;
 10033  04C8  3001               	movlw	1
 10034  04C9  0008               	return
 10035  04CA                     __end_of_decodeGesture:	
 10036                           
 10037                           	psect	text23
 10038  0F9C                     __ptext23:	
 10039 ;; *************** function _enableGestureSensor *****************
 10040 ;; Defined at:
 10041 ;;		line 409 in file "APDS9960.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  interrupts      1    wreg     _Bool 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  interrupts      1   17[BANK0 ] _Bool 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      _Bool 
 10048 ;; Registers used:
 10049 ;;		wreg, status,2, status,0, pclath, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;Total ram usage:        2 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:   11
 10062 ;; This function calls:
 10063 ;;		_enablePower
 10064 ;;		_resetGestureParameters
 10065 ;;		_setGestureIntEnable
 10066 ;;		_setGestureMode
 10067 ;;		_setLEDBoost
 10068 ;;		_setMode
 10069 ;;		_wireWriteDataByte
 10070 ;; This function is called by:
 10071 ;;		_main
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _enableGestureSensor
 10077  0F9C                     _enableGestureSensor:	
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10081                           ;enableGestureSensor@interrupts stored from wreg
 10082  0F9C  0020               	movlb	0	; select bank0
 10083  0F9D  00B1               	movwf	enableGestureSensor@interrupts
 10084                           
 10085                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10086  0F9E  318A  2256  318F   	fcall	_resetGestureParameters
 10087                           
 10088                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10089  0FA1  30FF               	movlw	255
 10090  0FA2  0020               	movlb	0	; select bank0
 10091  0FA3  00B0               	movwf	??_enableGestureSensor
 10092  0FA4  0830               	movf	??_enableGestureSensor,w
 10093  0FA5  00A6               	movwf	wireWriteDataByte@val
 10094  0FA6  3083               	movlw	131
 10095  0FA7  318A  226E  318F   	fcall	_wireWriteDataByte
 10096  0FAA  0020               	movlb	0	; select bank0
 10097  0FAB  0826               	movf	?_wireWriteDataByte,w
 10098  0FAC  0427               	iorwf	?_wireWriteDataByte+1,w
 10099  0FAD  1903               	btfsc	3,2
 10100  0FAE  2FB2               	goto	l6882
 10101  0FAF  2FB4               	goto	l6886
 10102  0FB0                     l6900:	
 10103                           
 10104                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10105  0FB0  3001               	movlw	1
 10106  0FB1  2FCD               	goto	L8
 10107  0FB2                     l6882:	
 10108                           
 10109                           ;APDS9960.c: 420:         return 0;
 10110  0FB2  3000               	movlw	0
 10111  0FB3  0008               	return
 10112  0FB4                     l6886:	
 10113                           
 10114                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10115  0FB4  3089               	movlw	137
 10116  0FB5  00B0               	movwf	??_enableGestureSensor
 10117  0FB6  0830               	movf	??_enableGestureSensor,w
 10118  0FB7  00A6               	movwf	wireWriteDataByte@val
 10119  0FB8  308E               	movlw	142
 10120  0FB9  318A  226E  318F   	fcall	_wireWriteDataByte
 10121  0FBC  0020               	movlb	0	; select bank0
 10122  0FBD  0826               	movf	?_wireWriteDataByte,w
 10123  0FBE  0427               	iorwf	?_wireWriteDataByte+1,w
 10124  0FBF  1903               	btfsc	3,2
 10125  0FC0  2FB2               	goto	l6882
 10126                           
 10127                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10128  0FC1  3003               	movlw	3
 10129  0FC2  318C  24BC  318F   	fcall	_setLEDBoost
 10130  0FC5  3A00               	xorlw	0
 10131  0FC6  1903               	btfsc	3,2
 10132  0FC7  2FB2               	goto	l6882
 10133                           
 10134                           ;APDS9960.c: 428:     if( interrupts ) {
 10135  0FC8  0020               	movlb	0	; select bank0
 10136  0FC9  0831               	movf	enableGestureSensor@interrupts,w
 10137  0FCA  1D03               	btfss	3,2
 10138  0FCB  2FB0               	goto	l6900
 10139                           
 10140                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10141  0FCC  3000               	movlw	0
 10142  0FCD                     L8:	
 10143  0FCD  318C  2460  318F   	fcall	_setGestureIntEnable
 10144  0FD0  3A00               	xorlw	0
 10145  0FD1  1903               	btfsc	3,2
 10146  0FD2  2FB2               	goto	l6882
 10147                           
 10148                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10149  0FD3  3001               	movlw	1
 10150  0FD4  318B  2347  318F   	fcall	_setGestureMode
 10151  0FD7  3A00               	xorlw	0
 10152  0FD8  1903               	btfsc	3,2
 10153  0FD9  2FB2               	goto	l6882
 10154                           
 10155                           ;APDS9960.c: 440:     if( !enablePower() ){
 10156  0FDA  3189  2184  318F   	fcall	_enablePower
 10157  0FDD  3A00               	xorlw	0
 10158  0FDE  1903               	btfsc	3,2
 10159  0FDF  2FB2               	goto	l6882
 10160                           
 10161                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10162  0FE0  0020               	movlb	0	; select bank0
 10163  0FE1  01AB               	clrf	setMode@enable
 10164  0FE2  0AAB               	incf	setMode@enable,f
 10165  0FE3  3003               	movlw	3
 10166  0FE4  318E  2651  318F   	fcall	_setMode
 10167  0FE7  3A00               	xorlw	0
 10168  0FE8  1903               	btfsc	3,2
 10169  0FE9  2FB2               	goto	l6882
 10170                           
 10171                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10172  0FEA  0020               	movlb	0	; select bank0
 10173  0FEB  01AB               	clrf	setMode@enable
 10174  0FEC  0AAB               	incf	setMode@enable,f
 10175  0FED  3002               	movlw	2
 10176  0FEE  318E  2651  318F   	fcall	_setMode
 10177  0FF1  3A00               	xorlw	0
 10178  0FF2  1903               	btfsc	3,2
 10179  0FF3  2FB2               	goto	l6882
 10180                           
 10181                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10182  0FF4  0020               	movlb	0	; select bank0
 10183  0FF5  01AB               	clrf	setMode@enable
 10184  0FF6  0AAB               	incf	setMode@enable,f
 10185  0FF7  3006               	movlw	6
 10186  0FF8  318E  2651  318F   	fcall	_setMode
 10187  0FFB  3A00               	xorlw	0
 10188  0FFC  1903               	btfsc	3,2
 10189  0FFD  2FB2               	goto	l6882
 10190                           
 10191                           ;APDS9960.c: 453:     return 1;
 10192  0FFE  3001               	movlw	1
 10193  0FFF  0008               	return
 10194  1000                     __end_of_enableGestureSensor:	
 10195                           
 10196                           	psect	text24
 10197  0CBC                     __ptext24:	
 10198 ;; *************** function _setLEDBoost *****************
 10199 ;; Defined at:
 10200 ;;		line 484 in file "APDS9960.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;  boost           1    wreg     unsigned char 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  boost           1   13[BANK0 ] unsigned char 
 10205 ;;  val             1   12[BANK0 ] unsigned char 
 10206 ;; Return value:  Size  Location     Type
 10207 ;;                  1    wreg      _Bool 
 10208 ;; Registers used:
 10209 ;;		wreg, status,2, status,0, pclath, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        4 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    8
 10222 ;; This function calls:
 10223 ;;		_wireReadDataByte
 10224 ;;		_wireWriteDataByte
 10225 ;; This function is called by:
 10226 ;;		_enableGestureSensor
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _setLEDBoost
 10232  0CBC                     _setLEDBoost:	
 10233                           
 10234                           ;incstack = 0
 10235                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10236                           ;setLEDBoost@boost stored from wreg
 10237  0CBC  0020               	movlb	0	; select bank0
 10238  0CBD  00AD               	movwf	setLEDBoost@boost
 10239                           
 10240                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10241  0CBE  3090               	movlw	144
 10242  0CBF  318A  22FD  318C   	fcall	_wireReadDataByte
 10243  0CC2  0020               	movlb	0	; select bank0
 10244  0CC3  00AA               	movwf	??_setLEDBoost
 10245  0CC4  082A               	movf	??_setLEDBoost,w
 10246  0CC5  00AC               	movwf	setLEDBoost@val
 10247                           
 10248                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10249  0CC6  3003               	movlw	3
 10250  0CC7  00AA               	movwf	??_setLEDBoost
 10251  0CC8  082A               	movf	??_setLEDBoost,w
 10252  0CC9  05AD               	andwf	setLEDBoost@boost,f
 10253                           
 10254                           ;APDS9960.c: 493:     boost = boost << 4;
 10255  0CCA  082D               	movf	setLEDBoost@boost,w
 10256  0CCB  00AA               	movwf	??_setLEDBoost
 10257  0CCC  3003               	movlw	3
 10258  0CCD                     u5765:	
 10259  0CCD  35AA               	lslf	??_setLEDBoost,f
 10260  0CCE  3EFF               	addlw	-1
 10261  0CCF  1D03               	skipz
 10262  0CD0  2CCD               	goto	u5765
 10263  0CD1  352A               	lslf	??_setLEDBoost,w
 10264  0CD2  00AB               	movwf	??_setLEDBoost+1
 10265  0CD3  082B               	movf	??_setLEDBoost+1,w
 10266  0CD4  00AD               	movwf	setLEDBoost@boost
 10267                           
 10268                           ;APDS9960.c: 494:     val &= 0b11001111;
 10269  0CD5  30CF               	movlw	207
 10270  0CD6  00AA               	movwf	??_setLEDBoost
 10271  0CD7  082A               	movf	??_setLEDBoost,w
 10272  0CD8  05AC               	andwf	setLEDBoost@val,f
 10273                           
 10274                           ;APDS9960.c: 495:     val |= boost;
 10275  0CD9  082D               	movf	setLEDBoost@boost,w
 10276  0CDA  00AA               	movwf	??_setLEDBoost
 10277  0CDB  082A               	movf	??_setLEDBoost,w
 10278  0CDC  04AC               	iorwf	setLEDBoost@val,f
 10279                           
 10280                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10281  0CDD  082C               	movf	setLEDBoost@val,w
 10282  0CDE  00AA               	movwf	??_setLEDBoost
 10283  0CDF  082A               	movf	??_setLEDBoost,w
 10284  0CE0  00A6               	movwf	wireWriteDataByte@val
 10285  0CE1  3090               	movlw	144
 10286  0CE2  318A  226E  318C   	fcall	_wireWriteDataByte
 10287  0CE5  0020               	movlb	0	; select bank0
 10288  0CE6  0826               	movf	?_wireWriteDataByte,w
 10289  0CE7  0427               	iorwf	?_wireWriteDataByte+1,w
 10290  0CE8  1D03               	btfss	3,2
 10291  0CE9  2CEC               	goto	l6654
 10292                           
 10293                           ;APDS9960.c: 499:         return 0;
 10294  0CEA  3000               	movlw	0
 10295  0CEB  0008               	return
 10296  0CEC                     l6654:	
 10297                           
 10298                           ;APDS9960.c: 502:     return 1;
 10299  0CEC  3001               	movlw	1
 10300  0CED  0008               	return
 10301  0CEE                     __end_of_setLEDBoost:	
 10302                           
 10303                           	psect	text25
 10304  0B47                     __ptext25:	
 10305 ;; *************** function _setGestureMode *****************
 10306 ;; Defined at:
 10307 ;;		line 506 in file "APDS9960.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;  mode            1    wreg     unsigned char 
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  mode            1   11[BANK0 ] unsigned char 
 10312 ;;  val             1   12[BANK0 ] unsigned char 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  1    wreg      _Bool 
 10315 ;; Registers used:
 10316 ;;		wreg, status,2, status,0, pclath, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;Total ram usage:        3 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    8
 10329 ;; This function calls:
 10330 ;;		_wireReadDataByte
 10331 ;;		_wireWriteDataByte
 10332 ;; This function is called by:
 10333 ;;		_enableGestureSensor
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _setGestureMode
 10339  0B47                     _setGestureMode:	
 10340                           
 10341                           ;incstack = 0
 10342                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10343                           ;setGestureMode@mode stored from wreg
 10344  0B47  0020               	movlb	0	; select bank0
 10345  0B48  00AB               	movwf	setGestureMode@mode
 10346                           
 10347                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10348  0B49  30AB               	movlw	171
 10349  0B4A  318A  22FD  318B   	fcall	_wireReadDataByte
 10350  0B4D  0020               	movlb	0	; select bank0
 10351  0B4E  00AA               	movwf	??_setGestureMode
 10352  0B4F  082A               	movf	??_setGestureMode,w
 10353  0B50  00AC               	movwf	setGestureMode@val
 10354                           
 10355                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10356  0B51  3001               	movlw	1
 10357  0B52  00AA               	movwf	??_setGestureMode
 10358  0B53  082A               	movf	??_setGestureMode,w
 10359  0B54  05AB               	andwf	setGestureMode@mode,f
 10360                           
 10361                           ;APDS9960.c: 515:     val &= 0b11111110;
 10362  0B55  30FE               	movlw	254
 10363  0B56  00AA               	movwf	??_setGestureMode
 10364  0B57  082A               	movf	??_setGestureMode,w
 10365  0B58  05AC               	andwf	setGestureMode@val,f
 10366                           
 10367                           ;APDS9960.c: 516:     val |= mode;
 10368  0B59  082B               	movf	setGestureMode@mode,w
 10369  0B5A  00AA               	movwf	??_setGestureMode
 10370  0B5B  082A               	movf	??_setGestureMode,w
 10371  0B5C  04AC               	iorwf	setGestureMode@val,f
 10372                           
 10373                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 10374  0B5D  082C               	movf	setGestureMode@val,w
 10375  0B5E  00AA               	movwf	??_setGestureMode
 10376  0B5F  082A               	movf	??_setGestureMode,w
 10377  0B60  00A6               	movwf	wireWriteDataByte@val
 10378  0B61  30AB               	movlw	171
 10379  0B62  318A  226E  318B   	fcall	_wireWriteDataByte
 10380  0B65  0020               	movlb	0	; select bank0
 10381  0B66  0826               	movf	?_wireWriteDataByte,w
 10382  0B67  0427               	iorwf	?_wireWriteDataByte+1,w
 10383  0B68  1D03               	btfss	3,2
 10384  0B69  2B6C               	goto	l6672
 10385                           
 10386                           ;APDS9960.c: 520:         return 0;
 10387  0B6A  3000               	movlw	0
 10388  0B6B  0008               	return
 10389  0B6C                     l6672:	
 10390                           
 10391                           ;APDS9960.c: 523:     return 1;
 10392  0B6C  3001               	movlw	1
 10393  0B6D  0008               	return
 10394  0B6E                     __end_of_setGestureMode:	
 10395                           
 10396                           	psect	text26
 10397  0C60                     __ptext26:	
 10398 ;; *************** function _setGestureIntEnable *****************
 10399 ;; Defined at:
 10400 ;;		line 387 in file "APDS9960.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;  enable          1    wreg     unsigned char 
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  enable          1   12[BANK0 ] unsigned char 
 10405 ;;  val             1   11[BANK0 ] unsigned char 
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  1    wreg      _Bool 
 10408 ;; Registers used:
 10409 ;;		wreg, status,2, status,0, pclath, cstack
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;Total ram usage:        3 bytes
 10420 ;; Hardware stack levels used:    1
 10421 ;; Hardware stack levels required when called:    8
 10422 ;; This function calls:
 10423 ;;		_wireReadDataByte
 10424 ;;		_wireWriteDataByte
 10425 ;; This function is called by:
 10426 ;;		_initialize
 10427 ;;		_enableGestureSensor
 10428 ;; This function uses a non-reentrant model
 10429 ;;
 10430                           
 10431                           
 10432                           ;psect for function _setGestureIntEnable
 10433  0C60                     _setGestureIntEnable:	
 10434                           
 10435                           ;incstack = 0
 10436                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 10437                           ;setGestureIntEnable@enable stored from wreg
 10438  0C60  0020               	movlb	0	; select bank0
 10439  0C61  00AC               	movwf	setGestureIntEnable@enable
 10440                           
 10441                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 10442  0C62  30AB               	movlw	171
 10443  0C63  318A  22FD  318C   	fcall	_wireReadDataByte
 10444  0C66  0020               	movlb	0	; select bank0
 10445  0C67  00AA               	movwf	??_setGestureIntEnable
 10446  0C68  082A               	movf	??_setGestureIntEnable,w
 10447  0C69  00AB               	movwf	setGestureIntEnable@val
 10448                           
 10449                           ;APDS9960.c: 395:     enable &= 0b00000001;
 10450  0C6A  3001               	movlw	1
 10451  0C6B  00AA               	movwf	??_setGestureIntEnable
 10452  0C6C  082A               	movf	??_setGestureIntEnable,w
 10453  0C6D  05AC               	andwf	setGestureIntEnable@enable,f
 10454                           
 10455                           ;APDS9960.c: 396:     enable = enable << 1;
 10456  0C6E  352C               	lslf	setGestureIntEnable@enable,w
 10457  0C6F  00AA               	movwf	??_setGestureIntEnable
 10458  0C70  082A               	movf	??_setGestureIntEnable,w
 10459  0C71  00AC               	movwf	setGestureIntEnable@enable
 10460                           
 10461                           ;APDS9960.c: 397:     val &= 0b11111101;
 10462  0C72  30FD               	movlw	253
 10463  0C73  00AA               	movwf	??_setGestureIntEnable
 10464  0C74  082A               	movf	??_setGestureIntEnable,w
 10465  0C75  05AB               	andwf	setGestureIntEnable@val,f
 10466                           
 10467                           ;APDS9960.c: 398:     val |= enable;
 10468  0C76  082C               	movf	setGestureIntEnable@enable,w
 10469  0C77  00AA               	movwf	??_setGestureIntEnable
 10470  0C78  082A               	movf	??_setGestureIntEnable,w
 10471  0C79  04AB               	iorwf	setGestureIntEnable@val,f
 10472                           
 10473                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 10474  0C7A  082B               	movf	setGestureIntEnable@val,w
 10475  0C7B  00AA               	movwf	??_setGestureIntEnable
 10476  0C7C  082A               	movf	??_setGestureIntEnable,w
 10477  0C7D  00A6               	movwf	wireWriteDataByte@val
 10478  0C7E  30AB               	movlw	171
 10479  0C7F  318A  226E  318C   	fcall	_wireWriteDataByte
 10480  0C82  0020               	movlb	0	; select bank0
 10481  0C83  0826               	movf	?_wireWriteDataByte,w
 10482  0C84  0427               	iorwf	?_wireWriteDataByte+1,w
 10483  0C85  1D03               	btfss	3,2
 10484  0C86  2C89               	goto	l6636
 10485                           
 10486                           ;APDS9960.c: 402:         return 0;
 10487  0C87  3000               	movlw	0
 10488  0C88  0008               	return
 10489  0C89                     l6636:	
 10490                           
 10491                           ;APDS9960.c: 405:     return 1;
 10492  0C89  3001               	movlw	1
 10493  0C8A  0008               	return
 10494  0C8B                     __end_of_setGestureIntEnable:	
 10495                           
 10496                           	psect	text27
 10497  0A56                     __ptext27:	
 10498 ;; *************** function _resetGestureParameters *****************
 10499 ;; Defined at:
 10500 ;;		line 457 in file "APDS9960.c"
 10501 ;; Parameters:    Size  Location     Type
 10502 ;;		None
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;		None
 10505 ;; Return value:  Size  Location     Type
 10506 ;;                  1    wreg      void 
 10507 ;; Registers used:
 10508 ;;		status,2
 10509 ;; Tracked objects:
 10510 ;;		On entry : 0/0
 10511 ;;		On exit  : 0/0
 10512 ;;		Unchanged: 0/0
 10513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;Total ram usage:        0 bytes
 10519 ;; Hardware stack levels used:    1
 10520 ;; Hardware stack levels required when called:    5
 10521 ;; This function calls:
 10522 ;;		Nothing
 10523 ;; This function is called by:
 10524 ;;		_enableGestureSensor
 10525 ;;		_readGesture
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _resetGestureParameters
 10531  0A56                     _resetGestureParameters:	
 10532                           
 10533                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _resetGestureParameters: [status,2]
 10537  0A56  0024               	movlb	4	; select bank4
 10538  0A57  01E0               	clrf	(_gesture_data_^(0+512)+64)
 10539                           
 10540                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 10541  0A58  01E1               	clrf	(_gesture_data_^(0+512)+65)
 10542                           
 10543                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 10544  0A59  0020               	movlb	0	; select bank0
 10545  0A5A  01E8               	clrf	_gesture_ud_delta_
 10546  0A5B  01E9               	clrf	_gesture_ud_delta_+1
 10547                           
 10548                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 10549  0A5C  01E6               	clrf	_gesture_lr_delta_
 10550  0A5D  01E7               	clrf	_gesture_lr_delta_+1
 10551                           
 10552                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 10553  0A5E  01E4               	clrf	_gesture_ud_count_
 10554  0A5F  01E5               	clrf	_gesture_ud_count_+1
 10555                           
 10556                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 10557  0A60  01E2               	clrf	_gesture_lr_count_
 10558  0A61  01E3               	clrf	_gesture_lr_count_+1
 10559                           
 10560                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 10561  0A62  01E0               	clrf	_gesture_near_count_
 10562  0A63  01E1               	clrf	_gesture_near_count_+1
 10563                           
 10564                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 10565  0A64  0021               	movlb	1	; select bank1
 10566  0A65  01E2               	clrf	_gesture_far_count_^(0+128)
 10567  0A66  01E3               	clrf	(_gesture_far_count_+1)^(0+128)
 10568                           
 10569                           ;APDS9960.c: 472:     gesture_state_ = 0;
 10570  0A67  0020               	movlb	0	; select bank0
 10571  0A68  01DE               	clrf	_gesture_state_
 10572  0A69  01DF               	clrf	_gesture_state_+1
 10573                           
 10574                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 10575  0A6A  0022               	movlb	2	; select bank2
 10576  0A6B  01E8               	clrf	_gesture_motion_^(0+256)
 10577  0A6C  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 10578  0A6D  0008               	return
 10579  0A6E                     __end_of_resetGestureParameters:	
 10580                           
 10581                           	psect	text28
 10582  0984                     __ptext28:	
 10583 ;; *************** function _enablePower *****************
 10584 ;; Defined at:
 10585 ;;		line 527 in file "APDS9960.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;		None
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  1    wreg      _Bool 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2, status,0, pclath, cstack
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:        0 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:   10
 10606 ;; This function calls:
 10607 ;;		_setMode
 10608 ;; This function is called by:
 10609 ;;		_enableGestureSensor
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _enablePower
 10615  0984                     _enablePower:	
 10616                           
 10617                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 10621  0984  0020               	movlb	0	; select bank0
 10622  0985  01AB               	clrf	setMode@enable
 10623  0986  0AAB               	incf	setMode@enable,f
 10624  0987  3000               	movlw	0
 10625  0988  318E  2651  3189   	fcall	_setMode
 10626  098B  3A00               	xorlw	0
 10627  098C  1D03               	skipz
 10628  098D  2990               	goto	l6682
 10629                           
 10630                           ;APDS9960.c: 530:         return 0;
 10631  098E  3000               	movlw	0
 10632  098F  0008               	return
 10633  0990                     l6682:	
 10634                           
 10635                           ;APDS9960.c: 533:     return 1;
 10636  0990  3001               	movlw	1
 10637  0991  0008               	return
 10638  0992                     __end_of_enablePower:	
 10639                           
 10640                           	psect	text29
 10641  0E51                     __ptext29:	
 10642 ;; *************** function _setMode *****************
 10643 ;; Defined at:
 10644 ;;		line 124 in file "APDS9960.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  mode            1    wreg     unsigned char 
 10647 ;;  enable          1   11[BANK0 ] unsigned char 
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  mode            1   15[BANK0 ] unsigned char 
 10650 ;;  reg_val         1   14[BANK0 ] unsigned char 
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      _Bool 
 10653 ;; Registers used:
 10654 ;;		wreg, status,2, status,0, pclath, cstack
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10660 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;Total ram usage:        5 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    9
 10667 ;; This function calls:
 10668 ;;		_getMode
 10669 ;;		_wireWriteDataByte
 10670 ;; This function is called by:
 10671 ;;		_initialize
 10672 ;;		_enableGestureSensor
 10673 ;;		_enablePower
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function _setMode
 10679  0E51                     _setMode:	
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 10683                           ;setMode@mode stored from wreg
 10684  0E51  0020               	movlb	0	; select bank0
 10685  0E52  00AF               	movwf	setMode@mode
 10686                           
 10687                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 10688  0E53  3189  215A  318E   	fcall	_getMode
 10689  0E56  0020               	movlb	0	; select bank0
 10690  0E57  00AC               	movwf	??_setMode
 10691  0E58  082C               	movf	??_setMode,w
 10692  0E59  00AE               	movwf	setMode@reg_val
 10693                           
 10694                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 10695  0E5A  0A2E               	incf	setMode@reg_val,w
 10696  0E5B  1D03               	btfss	3,2
 10697  0E5C  2E5F               	goto	l5928
 10698  0E5D                     l5924:	
 10699                           
 10700                           ;APDS9960.c: 131:         return 0;
 10701  0E5D  3000               	movlw	0
 10702  0E5E  0008               	return
 10703  0E5F                     l5928:	
 10704                           
 10705                           ;APDS9960.c: 135:     enable = enable & 0x01;
 10706  0E5F  082B               	movf	setMode@enable,w
 10707  0E60  3901               	andlw	1
 10708  0E61  00AC               	movwf	??_setMode
 10709  0E62  082C               	movf	??_setMode,w
 10710  0E63  00AB               	movwf	setMode@enable
 10711                           
 10712                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 10713  0E64  3007               	movlw	7
 10714  0E65  022F               	subwf	setMode@mode,w
 10715  0E66  1803               	skipnc
 10716  0E67  2E84               	goto	l5938
 10717                           
 10718                           ;APDS9960.c: 137:         if (enable) {
 10719  0E68  082B               	movf	setMode@enable,w
 10720  0E69  1903               	btfsc	3,2
 10721  0E6A  2E77               	goto	l5936
 10722                           
 10723                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 10724  0E6B  3001               	movlw	1
 10725  0E6C  00AC               	movwf	??_setMode
 10726  0E6D  0A2F               	incf	setMode@mode,w
 10727  0E6E  2E70               	goto	u4684
 10728  0E6F                     u4685:	
 10729  0E6F  35AC               	lslf	??_setMode,f
 10730  0E70                     u4684:	
 10731  0E70  0B89               	decfsz	9,f
 10732  0E71  2E6F               	goto	u4685
 10733  0E72  082C               	movf	??_setMode,w
 10734  0E73  00AD               	movwf	??_setMode+1
 10735  0E74  082D               	movf	??_setMode+1,w
 10736  0E75  04AE               	iorwf	setMode@reg_val,f
 10737                           
 10738                           ;APDS9960.c: 139:         } else {
 10739  0E76  2E91               	goto	l5946
 10740  0E77                     l5936:	
 10741                           
 10742                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 10743  0E77  3001               	movlw	1
 10744  0E78  00AC               	movwf	??_setMode
 10745  0E79  0A2F               	incf	setMode@mode,w
 10746  0E7A  2E7C               	goto	u4694
 10747  0E7B                     u4695:	
 10748  0E7B  35AC               	lslf	??_setMode,f
 10749  0E7C                     u4694:	
 10750  0E7C  0B89               	decfsz	9,f
 10751  0E7D  2E7B               	goto	u4695
 10752  0E7E  082C               	movf	??_setMode,w
 10753  0E7F  3AFF               	xorlw	255
 10754  0E80  00AD               	movwf	??_setMode+1
 10755  0E81  082D               	movf	??_setMode+1,w
 10756  0E82  05AE               	andwf	setMode@reg_val,f
 10757  0E83  2E91               	goto	l5946
 10758  0E84                     l5938:	
 10759  0E84  3007               	movlw	7
 10760  0E85  062F               	xorwf	setMode@mode,w
 10761  0E86  1D03               	btfss	3,2
 10762  0E87  2E91               	goto	l5946
 10763                           
 10764                           ;APDS9960.c: 143:         if (enable) {
 10765  0E88  082B               	movf	setMode@enable,w
 10766  0E89  1903               	btfsc	3,2
 10767  0E8A  2E90               	goto	l5944
 10768                           
 10769                           ;APDS9960.c: 144:             reg_val = 0x7F;
 10770  0E8B  307F               	movlw	127
 10771  0E8C  00AC               	movwf	??_setMode
 10772  0E8D  082C               	movf	??_setMode,w
 10773  0E8E  00AE               	movwf	setMode@reg_val
 10774                           
 10775                           ;APDS9960.c: 145:         } else {
 10776  0E8F  2E91               	goto	l5946
 10777  0E90                     l5944:	
 10778                           
 10779                           ;APDS9960.c: 146:             reg_val = 0x00;
 10780  0E90  01AE               	clrf	setMode@reg_val
 10781  0E91                     l5946:	
 10782                           
 10783                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 10784  0E91  082E               	movf	setMode@reg_val,w
 10785  0E92  00AC               	movwf	??_setMode
 10786  0E93  082C               	movf	??_setMode,w
 10787  0E94  00A6               	movwf	wireWriteDataByte@val
 10788  0E95  3080               	movlw	128
 10789  0E96  318A  226E  318E   	fcall	_wireWriteDataByte
 10790  0E99  0020               	movlb	0	; select bank0
 10791  0E9A  0826               	movf	?_wireWriteDataByte,w
 10792  0E9B  0427               	iorwf	?_wireWriteDataByte+1,w
 10793  0E9C  1903               	btfsc	3,2
 10794  0E9D  2E5D               	goto	l5924
 10795                           
 10796                           ;APDS9960.c: 155:     return 1;
 10797  0E9E  3001               	movlw	1
 10798  0E9F  0008               	return
 10799  0EA0                     __end_of_setMode:	
 10800                           
 10801                           	psect	text30
 10802  0A6E                     __ptext30:	
 10803 ;; *************** function _wireWriteDataByte *****************
 10804 ;; Defined at:
 10805 ;;		line 871 in file "APDS9960.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;  reg             1    wreg     unsigned char 
 10808 ;;  val             1    6[BANK0 ] unsigned char 
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;  reg             1    9[BANK0 ] unsigned char 
 10811 ;; Return value:  Size  Location     Type
 10812 ;;                  2    6[BANK0 ] int 
 10813 ;; Registers used:
 10814 ;;		wreg, status,2, status,0, pclath, cstack
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10820 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;Total ram usage:        4 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    7
 10827 ;; This function calls:
 10828 ;;		_I2C_Start
 10829 ;;		_I2C_Stop
 10830 ;;		_I2C_Write_Byte
 10831 ;; This function is called by:
 10832 ;;		_initialize
 10833 ;;		_setMode
 10834 ;;		_setLEDDrive
 10835 ;;		_setProximityGain
 10836 ;;		_setAmbientLightGain
 10837 ;;		_setProxIntLowThresh
 10838 ;;		_setProxIntHighThresh
 10839 ;;		_setLightIntLowThreshold
 10840 ;;		_setLightIntHighThreshold
 10841 ;;		_setGestureEnterThresh
 10842 ;;		_setGestureExitThresh
 10843 ;;		_setGestureGain
 10844 ;;		_setGestureLEDDrive
 10845 ;;		_setGestureWaitTime
 10846 ;;		_setGestureIntEnable
 10847 ;;		_enableGestureSensor
 10848 ;;		_setLEDBoost
 10849 ;;		_setGestureMode
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           
 10854                           ;psect for function _wireWriteDataByte
 10855  0A6E                     _wireWriteDataByte:	
 10856                           
 10857                           ;incstack = 0
 10858                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10859                           ;wireWriteDataByte@reg stored from wreg
 10860  0A6E  0020               	movlb	0	; select bank0
 10861  0A6F  00A9               	movwf	wireWriteDataByte@reg
 10862                           
 10863                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10864  0A70  3188  20A7  318A   	fcall	_I2C_Start
 10865                           
 10866                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10867  0A73  3072               	movlw	114
 10868  0A74  318A  2289  318A   	fcall	_I2C_Write_Byte
 10869                           
 10870                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10871  0A77  0020               	movlb	0	; select bank0
 10872  0A78  0829               	movf	wireWriteDataByte@reg,w
 10873  0A79  318A  2289  318A   	fcall	_I2C_Write_Byte
 10874                           
 10875                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10876  0A7C  0020               	movlb	0	; select bank0
 10877  0A7D  0826               	movf	wireWriteDataByte@val,w
 10878  0A7E  318A  2289  318A   	fcall	_I2C_Write_Byte
 10879                           
 10880                           ;APDS9960.c: 886:     I2C_Stop();
 10881  0A81  3187  27FD         	fcall	_I2C_Stop
 10882                           
 10883                           ;APDS9960.c: 889:     return 1;
 10884  0A83  3001               	movlw	1
 10885  0A84  0020               	movlb	0	; select bank0
 10886  0A85  00A6               	movwf	?_wireWriteDataByte
 10887  0A86  3000               	movlw	0
 10888  0A87  00A7               	movwf	?_wireWriteDataByte+1
 10889  0A88  0008               	return
 10890  0A89                     __end_of_wireWriteDataByte:	
 10891                           
 10892                           	psect	text31
 10893  095A                     __ptext31:	
 10894 ;; *************** function _getMode *****************
 10895 ;; Defined at:
 10896 ;;		line 159 in file "APDS9960.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;		None
 10899 ;; Auto vars:     Size  Location     Type
 10900 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10901 ;; Return value:  Size  Location     Type
 10902 ;;                  1    wreg      unsigned char 
 10903 ;; Registers used:
 10904 ;;		wreg, status,2, status,0, pclath, cstack
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;Total ram usage:        2 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; Hardware stack levels required when called:    8
 10917 ;; This function calls:
 10918 ;;		_wireReadDataByte
 10919 ;; This function is called by:
 10920 ;;		_setMode
 10921 ;;		_readGesture
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           
 10926                           ;psect for function _getMode
 10927  095A                     _getMode:	
 10928                           
 10929                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10930                           
 10931                           ;incstack = 0
 10932                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10933  095A  3080               	movlw	128
 10934  095B  318A  22FD         	fcall	_wireReadDataByte
 10935  095D  0020               	movlb	0	; select bank0
 10936  095E  00A9               	movwf	??_getMode
 10937  095F  0829               	movf	??_getMode,w
 10938  0960  00AA               	movwf	getMode@enable_value
 10939                           
 10940                           ;APDS9960.c: 166:     return enable_value;
 10941  0961  082A               	movf	getMode@enable_value,w
 10942  0962  0008               	return
 10943  0963                     __end_of_getMode:	
 10944                           
 10945                           	psect	text32
 10946  0AFD                     __ptext32:	
 10947 ;; *************** function _wireReadDataByte *****************
 10948 ;; Defined at:
 10949 ;;		line 893 in file "APDS9960.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  reg             1    wreg     unsigned char 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  reg             1    7[BANK0 ] unsigned char 
 10954 ;;  val             1    8[BANK0 ] unsigned char 
 10955 ;; Return value:  Size  Location     Type
 10956 ;;                  1    wreg      unsigned char 
 10957 ;; Registers used:
 10958 ;;		wreg, status,2, status,0, pclath, cstack
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;Total ram usage:        3 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    7
 10971 ;; This function calls:
 10972 ;;		_I2C_ReStart
 10973 ;;		_I2C_Read_Byte
 10974 ;;		_I2C_Send_NACK
 10975 ;;		_I2C_Start
 10976 ;;		_I2C_Stop
 10977 ;;		_I2C_Write_Byte
 10978 ;; This function is called by:
 10979 ;;		_initialize
 10980 ;;		_getMode
 10981 ;;		_setLEDDrive
 10982 ;;		_setProximityGain
 10983 ;;		_setAmbientLightGain
 10984 ;;		_setGestureGain
 10985 ;;		_setGestureLEDDrive
 10986 ;;		_setGestureWaitTime
 10987 ;;		_setGestureIntEnable
 10988 ;;		_setLEDBoost
 10989 ;;		_setGestureMode
 10990 ;;		_isGestureAvailable
 10991 ;;		_readGesture
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           
 10996                           ;psect for function _wireReadDataByte
 10997  0AFD                     _wireReadDataByte:	
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11001                           ;wireReadDataByte@reg stored from wreg
 11002  0AFD  0020               	movlb	0	; select bank0
 11003  0AFE  00A7               	movwf	wireReadDataByte@reg
 11004                           
 11005                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11006  0AFF  3188  20A7  318A   	fcall	_I2C_Start
 11007                           
 11008                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11009  0B02  3072               	movlw	114
 11010  0B03  318A  2289  318A   	fcall	_I2C_Write_Byte
 11011                           
 11012                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11013  0B06  0020               	movlb	0	; select bank0
 11014  0B07  0827               	movf	wireReadDataByte@reg,w
 11015  0B08  318A  2289  318A   	fcall	_I2C_Write_Byte
 11016                           
 11017                           ;APDS9960.c: 912:     I2C_ReStart();
 11018  0B0B  3188  2098  318A   	fcall	_I2C_ReStart
 11019                           
 11020                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11021  0B0E  3073               	movlw	115
 11022  0B0F  318A  2289  318A   	fcall	_I2C_Write_Byte
 11023                           
 11024                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11025  0B12  3189  216D  318A   	fcall	_I2C_Read_Byte
 11026  0B15  0020               	movlb	0	; select bank0
 11027  0B16  00A6               	movwf	??_wireReadDataByte
 11028  0B17  0826               	movf	??_wireReadDataByte,w
 11029  0B18  00A8               	movwf	wireReadDataByte@val
 11030                           
 11031                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11032  0B19  3188  20A1  318A   	fcall	_I2C_Send_NACK
 11033                           
 11034                           ;APDS9960.c: 917:     I2C_Stop();
 11035  0B1C  3187  27FD         	fcall	_I2C_Stop
 11036                           
 11037                           ;APDS9960.c: 919:     return val;
 11038  0B1E  0020               	movlb	0	; select bank0
 11039  0B1F  0828               	movf	wireReadDataByte@val,w
 11040  0B20  0008               	return
 11041  0B21                     __end_of_wireReadDataByte:	
 11042                           
 11043                           	psect	text33
 11044  0A89                     __ptext33:	
 11045 ;; *************** function _I2C_Write_Byte *****************
 11046 ;; Defined at:
 11047 ;;		line 75 in file "i2c.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;  Byte            1    wreg     unsigned char 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  Byte            1    3[BANK0 ] unsigned char 
 11052 ;;  count           2    4[BANK0 ] unsigned int 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      void 
 11055 ;; Registers used:
 11056 ;;		wreg, status,2, status,0, pclath, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;Total ram usage:        5 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    6
 11069 ;; This function calls:
 11070 ;;		_i2c1_driver_TXData
 11071 ;; This function is called by:
 11072 ;;		_wireReadDataBlock
 11073 ;;		_wireWriteDataByte
 11074 ;;		_wireReadDataByte
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           
 11079                           ;psect for function _I2C_Write_Byte
 11080  0A89                     _I2C_Write_Byte:	
 11081                           
 11082                           ;incstack = 0
 11083                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11084                           ;I2C_Write_Byte@Byte stored from wreg
 11085  0A89  0020               	movlb	0	; select bank0
 11086  0A8A  00A3               	movwf	I2C_Write_Byte@Byte
 11087                           
 11088                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11089  0A8B  0823               	movf	I2C_Write_Byte@Byte,w
 11090  0A8C  3188  20ED  318A   	fcall	_i2c1_driver_TXData
 11091                           
 11092                           ;i2c.c: 83:     unsigned int count = 0;
 11093  0A8F  0020               	movlb	0	; select bank0
 11094  0A90  01A4               	clrf	I2C_Write_Byte@count
 11095  0A91  01A5               	clrf	I2C_Write_Byte@count+1
 11096  0A92                     l1234:	
 11097                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11098                           
 11099  0A92  0024               	movlb	4	; select bank4
 11100  0A93  1B16               	btfsc	22,6	;volatile
 11101  0A94  2A92               	goto	l1234
 11102  0A95                     l5768:	
 11103  0A95  0020               	movlb	0	; select bank0
 11104  0A96  0825               	movf	I2C_Write_Byte@count+1,w
 11105  0A97  00A2               	movwf	??_I2C_Write_Byte+1
 11106  0A98  0824               	movf	I2C_Write_Byte@count,w
 11107  0A99  00A1               	movwf	??_I2C_Write_Byte
 11108  0A9A  0AA4               	incf	I2C_Write_Byte@count,f
 11109  0A9B  1903               	skipnz
 11110  0A9C  0AA5               	incf	I2C_Write_Byte@count+1,f
 11111  0A9D  3000               	movlw	0
 11112  0A9E  0222               	subwf	??_I2C_Write_Byte+1,w
 11113  0A9F  3005               	movlw	5
 11114  0AA0  1903               	skipnz
 11115  0AA1  0221               	subwf	??_I2C_Write_Byte,w
 11116  0AA2  1803               	btfsc	3,0
 11117  0AA3  0008               	return
 11118  0AA4  2A95               	goto	l5768
 11119  0AA5                     __end_of_I2C_Write_Byte:	
 11120                           
 11121                           	psect	text34
 11122  08ED                     __ptext34:	
 11123 ;; *************** function _i2c1_driver_TXData *****************
 11124 ;; Defined at:
 11125 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;  d               1    wreg     unsigned char 
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  d               1    0[BANK0 ] unsigned char 
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		wreg
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;Total ram usage:        1 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:    5
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_I2C_Write_Byte
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           
 11154                           ;psect for function _i2c1_driver_TXData
 11155  08ED                     _i2c1_driver_TXData:	
 11156                           
 11157                           ;incstack = 0
 11158                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11159                           ;i2c1_driver_TXData@d stored from wreg
 11160  08ED  0020               	movlb	0	; select bank0
 11161  08EE  00A0               	movwf	i2c1_driver_TXData@d
 11162                           
 11163                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11164  08EF  0820               	movf	i2c1_driver_TXData@d,w
 11165  08F0  0024               	movlb	4	; select bank4
 11166  08F1  0091               	movwf	17	;volatile
 11167  08F2  0008               	return
 11168  08F3                     __end_of_i2c1_driver_TXData:	
 11169                           
 11170                           	psect	text35
 11171  07FD                     __ptext35:	
 11172 ;; *************** function _I2C_Stop *****************
 11173 ;; Defined at:
 11174 ;;		line 50 in file "i2c.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;		None
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;		None
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  1    wreg      void 
 11181 ;; Registers used:
 11182 ;;		status,2, status,0, pclath, cstack
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;Total ram usage:        0 bytes
 11193 ;; Hardware stack levels used:    1
 11194 ;; Hardware stack levels required when called:    6
 11195 ;; This function calls:
 11196 ;;		_i2c1_driver_stop
 11197 ;; This function is called by:
 11198 ;;		_wireReadDataBlock
 11199 ;;		_wireWriteDataByte
 11200 ;;		_wireReadDataByte
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           
 11205                           ;psect for function _I2C_Stop
 11206  07FD                     _I2C_Stop:	
 11207                           
 11208                           ;i2c.c: 52:  i2c1_driver_stop();
 11209                           
 11210                           ;incstack = 0
 11211                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11212  07FD  3188  20AA         	fcall	_i2c1_driver_stop
 11213  07FF  0008               	return
 11214  0800                     __end_of_I2C_Stop:	
 11215                           
 11216                           	psect	text36
 11217  08AA                     __ptext36:	
 11218 ;; *************** function _i2c1_driver_stop *****************
 11219 ;; Defined at:
 11220 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;		None
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;		None
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  1    wreg      void 
 11227 ;; Registers used:
 11228 ;;		None
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;Total ram usage:        0 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    5
 11241 ;; This function calls:
 11242 ;;		Nothing
 11243 ;; This function is called by:
 11244 ;;		_I2C_Stop
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           
 11249                           ;psect for function _i2c1_driver_stop
 11250  08AA                     _i2c1_driver_stop:	
 11251                           
 11252                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in _i2c1_driver_stop: []
 11256  08AA  0024               	movlb	4	; select bank4
 11257  08AB  1516               	bsf	22,2	;volatile
 11258  08AC  0008               	return
 11259  08AD                     __end_of_i2c1_driver_stop:	
 11260                           
 11261                           	psect	text37
 11262  08A7                     __ptext37:	
 11263 ;; *************** function _I2C_Start *****************
 11264 ;; Defined at:
 11265 ;;		line 35 in file "i2c.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;		None
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  1    wreg      void 
 11272 ;; Registers used:
 11273 ;;		status,2, status,0, pclath, cstack
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;Total ram usage:        0 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    6
 11286 ;; This function calls:
 11287 ;;		_i2c1_driver_start
 11288 ;; This function is called by:
 11289 ;;		_wireReadDataBlock
 11290 ;;		_wireWriteDataByte
 11291 ;;		_wireReadDataByte
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function _I2C_Start
 11297  08A7                     _I2C_Start:	
 11298                           
 11299                           ;i2c.c: 37:  i2c1_driver_start();
 11300                           
 11301                           ;incstack = 0
 11302                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11303  08A7  3188  20A4         	fcall	_i2c1_driver_start
 11304  08A9  0008               	return
 11305  08AA                     __end_of_I2C_Start:	
 11306                           
 11307                           	psect	text38
 11308  08A4                     __ptext38:	
 11309 ;; *************** function _i2c1_driver_start *****************
 11310 ;; Defined at:
 11311 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;		None
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;		None
 11316 ;; Return value:  Size  Location     Type
 11317 ;;                  1    wreg      void 
 11318 ;; Registers used:
 11319 ;;		None
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;Total ram usage:        0 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    5
 11332 ;; This function calls:
 11333 ;;		Nothing
 11334 ;; This function is called by:
 11335 ;;		_I2C_Start
 11336 ;;		_i2c_masterOperation
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           
 11341                           ;psect for function _i2c1_driver_start
 11342  08A4                     _i2c1_driver_start:	
 11343                           
 11344                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11345                           
 11346                           ;incstack = 0
 11347                           ; Regs used in _i2c1_driver_start: []
 11348  08A4  0024               	movlb	4	; select bank4
 11349  08A5  1416               	bsf	22,0	;volatile
 11350  08A6  0008               	return
 11351  08A7                     __end_of_i2c1_driver_start:	
 11352                           
 11353                           	psect	text39
 11354  08A1                     __ptext39:	
 11355 ;; *************** function _I2C_Send_NACK *****************
 11356 ;; Defined at:
 11357 ;;		line 66 in file "i2c.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;		None
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      void 
 11364 ;; Registers used:
 11365 ;;		status,2, status,0, pclath, cstack
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    6
 11378 ;; This function calls:
 11379 ;;		_i2c1_driver_sendNACK
 11380 ;; This function is called by:
 11381 ;;		_wireReadDataBlock
 11382 ;;		_wireReadDataByte
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           
 11387                           ;psect for function _I2C_Send_NACK
 11388  08A1                     _I2C_Send_NACK:	
 11389                           
 11390                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 11391                           
 11392                           ;incstack = 0
 11393                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 11394  08A1  3188  20D9         	fcall	_i2c1_driver_sendNACK
 11395  08A3  0008               	return
 11396  08A4                     __end_of_I2C_Send_NACK:	
 11397                           
 11398                           	psect	text40
 11399  08D9                     __ptext40:	
 11400 ;; *************** function _i2c1_driver_sendNACK *****************
 11401 ;; Defined at:
 11402 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;		None
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;		None
 11407 ;; Return value:  Size  Location     Type
 11408 ;;                  1    wreg      void 
 11409 ;; Registers used:
 11410 ;;		None
 11411 ;; Tracked objects:
 11412 ;;		On entry : 0/0
 11413 ;;		On exit  : 0/0
 11414 ;;		Unchanged: 0/0
 11415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;Total ram usage:        0 bytes
 11421 ;; Hardware stack levels used:    1
 11422 ;; Hardware stack levels required when called:    5
 11423 ;; This function calls:
 11424 ;;		Nothing
 11425 ;; This function is called by:
 11426 ;;		_I2C_Send_NACK
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           
 11431                           ;psect for function _i2c1_driver_sendNACK
 11432  08D9                     _i2c1_driver_sendNACK:	
 11433                           
 11434                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 11435                           
 11436                           ;incstack = 0
 11437                           ; Regs used in _i2c1_driver_sendNACK: []
 11438  08D9  0024               	movlb	4	; select bank4
 11439  08DA  1696               	bsf	22,5	;volatile
 11440                           
 11441                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 11442  08DB  1616               	bsf	22,4	;volatile
 11443  08DC  0008               	return
 11444  08DD                     __end_of_i2c1_driver_sendNACK:	
 11445                           
 11446                           	psect	text41
 11447  096D                     __ptext41:	
 11448 ;; *************** function _I2C_Read_Byte *****************
 11449 ;; Defined at:
 11450 ;;		line 115 in file "i2c.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      unsigned char 
 11457 ;; Registers used:
 11458 ;;		wreg, status,2, status,0, pclath, cstack
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;Total ram usage:        0 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    6
 11471 ;; This function calls:
 11472 ;;		_i2c1_driver_getRXData
 11473 ;;		_i2c1_driver_isBufferFull
 11474 ;;		_i2c1_driver_startRX
 11475 ;; This function is called by:
 11476 ;;		_wireReadDataBlock
 11477 ;;		_wireReadDataByte
 11478 ;; This function uses a non-reentrant model
 11479 ;;
 11480                           
 11481                           
 11482                           ;psect for function _I2C_Read_Byte
 11483  096D                     _I2C_Read_Byte:	
 11484                           
 11485                           ;i2c.c: 117:     i2c1_driver_startRX();
 11486                           
 11487                           ;incstack = 0
 11488                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 11489  096D  3188  209E  3189   	fcall	_i2c1_driver_startRX
 11490  0970                     l5774:	
 11491                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11492                           
 11493                           
 11494                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11495  0970  3189  211B  3189   	fcall	_i2c1_driver_isBufferFull
 11496  0973  1C03               	btfss	3,0
 11497  0974  2970               	goto	l5774
 11498                           
 11499                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 11500  0975  3188  209B         	fcall	_i2c1_driver_getRXData
 11501  0977  0008               	return
 11502  0978                     __end_of_I2C_Read_Byte:	
 11503                           
 11504                           	psect	text42
 11505  089E                     __ptext42:	
 11506 ;; *************** function _i2c1_driver_startRX *****************
 11507 ;; Defined at:
 11508 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;		None
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;		None
 11513 ;; Return value:  Size  Location     Type
 11514 ;;                  1    wreg      void 
 11515 ;; Registers used:
 11516 ;;		None
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;Total ram usage:        0 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    5
 11529 ;; This function calls:
 11530 ;;		Nothing
 11531 ;; This function is called by:
 11532 ;;		_I2C_Read_Byte
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           
 11537                           ;psect for function _i2c1_driver_startRX
 11538  089E                     _i2c1_driver_startRX:	
 11539                           
 11540                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 11541                           
 11542                           ;incstack = 0
 11543                           ; Regs used in _i2c1_driver_startRX: []
 11544  089E  0024               	movlb	4	; select bank4
 11545  089F  1596               	bsf	22,3	;volatile
 11546  08A0  0008               	return
 11547  08A1                     __end_of_i2c1_driver_startRX:	
 11548                           
 11549                           	psect	text43
 11550  091B                     __ptext43:	
 11551 ;; *************** function _i2c1_driver_isBufferFull *****************
 11552 ;; Defined at:
 11553 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;		None
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;		None               void
 11560 ;; Registers used:
 11561 ;;		wreg, status,2, status,0
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;Total ram usage:        1 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    5
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_I2C_Read_Byte
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _i2c1_driver_isBufferFull
 11583  091B                     _i2c1_driver_isBufferFull:	
 11584                           
 11585                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 11589  091B  0024               	movlb	4	; select bank4
 11590  091C  0814               	movf	20,w	;volatile
 11591  091D  3901               	andlw	1
 11592  091E  0020               	movlb	0	; select bank0
 11593  091F  00A0               	movwf	??_i2c1_driver_isBufferFull
 11594  0920  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 11595  0921  0008               	return
 11596  0922                     __end_of_i2c1_driver_isBufferFull:	
 11597                           
 11598                           	psect	text44
 11599  089B                     __ptext44:	
 11600 ;; *************** function _i2c1_driver_getRXData *****************
 11601 ;; Defined at:
 11602 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;		None
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      unsigned char 
 11609 ;; Registers used:
 11610 ;;		wreg
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;Total ram usage:        0 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:    5
 11623 ;; This function calls:
 11624 ;;		Nothing
 11625 ;; This function is called by:
 11626 ;;		_I2C_Read_Byte
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           
 11631                           ;psect for function _i2c1_driver_getRXData
 11632  089B                     _i2c1_driver_getRXData:	
 11633                           
 11634                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 11635                           
 11636                           ;incstack = 0
 11637                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 11638  089B  0024               	movlb	4	; select bank4
 11639  089C  0811               	movf	17,w	;volatile
 11640  089D  0008               	return
 11641  089E                     __end_of_i2c1_driver_getRXData:	
 11642                           
 11643                           	psect	text45
 11644  0898                     __ptext45:	
 11645 ;; *************** function _I2C_ReStart *****************
 11646 ;; Defined at:
 11647 ;;		line 43 in file "i2c.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;		None
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;		None
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      void 
 11654 ;; Registers used:
 11655 ;;		status,2, status,0, pclath, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;Total ram usage:        0 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    6
 11668 ;; This function calls:
 11669 ;;		_i2c1_driver_restart
 11670 ;; This function is called by:
 11671 ;;		_wireReadDataBlock
 11672 ;;		_wireReadDataByte
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           
 11677                           ;psect for function _I2C_ReStart
 11678  0898                     _I2C_ReStart:	
 11679                           
 11680                           ;i2c.c: 45:  i2c1_driver_restart();
 11681                           
 11682                           ;incstack = 0
 11683                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 11684  0898  3188  2095         	fcall	_i2c1_driver_restart
 11685  089A  0008               	return
 11686  089B                     __end_of_I2C_ReStart:	
 11687                           
 11688                           	psect	text46
 11689  0895                     __ptext46:	
 11690 ;; *************** function _i2c1_driver_restart *****************
 11691 ;; Defined at:
 11692 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 11693 ;; Parameters:    Size  Location     Type
 11694 ;;		None
 11695 ;; Auto vars:     Size  Location     Type
 11696 ;;		None
 11697 ;; Return value:  Size  Location     Type
 11698 ;;                  1    wreg      void 
 11699 ;; Registers used:
 11700 ;;		None
 11701 ;; Tracked objects:
 11702 ;;		On entry : 0/0
 11703 ;;		On exit  : 0/0
 11704 ;;		Unchanged: 0/0
 11705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11710 ;;Total ram usage:        0 bytes
 11711 ;; Hardware stack levels used:    1
 11712 ;; Hardware stack levels required when called:    5
 11713 ;; This function calls:
 11714 ;;		Nothing
 11715 ;; This function is called by:
 11716 ;;		_I2C_ReStart
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           
 11721                           ;psect for function _i2c1_driver_restart
 11722  0895                     _i2c1_driver_restart:	
 11723                           
 11724                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 11725                           
 11726                           ;incstack = 0
 11727                           ; Regs used in _i2c1_driver_restart: []
 11728  0895  0024               	movlb	4	; select bank4
 11729  0896  1496               	bsf	22,1	;volatile
 11730  0897  0008               	return
 11731  0898                     __end_of_i2c1_driver_restart:	
 11732                           
 11733                           	psect	text47
 11734  0A3E                     __ptext47:	
 11735 ;; *************** function _SYSTEM_Initialize *****************
 11736 ;; Defined at:
 11737 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;		None
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;		None
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  1    wreg      void 
 11744 ;; Registers used:
 11745 ;;		wreg, status,2, status,0, pclath, cstack
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;Total ram usage:        0 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    6
 11758 ;; This function calls:
 11759 ;;		_ADC_Initialize
 11760 ;;		_OSCILLATOR_Initialize
 11761 ;;		_PIN_MANAGER_Initialize
 11762 ;;		_PMD_Initialize
 11763 ;;		_PWM1_Initialize
 11764 ;;		_SPI2_Initialize
 11765 ;;		_TMR2_Initialize
 11766 ;;		_WDT_Initialize
 11767 ;; This function is called by:
 11768 ;;		_main
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           
 11773                           ;psect for function _SYSTEM_Initialize
 11774  0A3E                     _SYSTEM_Initialize:	
 11775                           
 11776                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 11777                           
 11778                           ;incstack = 0
 11779                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11780  0A3E  3189  2142  318A   	fcall	_PMD_Initialize
 11781                           
 11782                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 11783  0A41  318D  2586  318A   	fcall	_PIN_MANAGER_Initialize
 11784                           
 11785                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 11786  0A44  3189  213A  318A   	fcall	_OSCILLATOR_Initialize
 11787                           
 11788                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 11789  0A47  3188  20D5  318A   	fcall	_WDT_Initialize
 11790                           
 11791                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 11792  0A4A  3189  2114  318A   	fcall	_SPI2_Initialize
 11793                           
 11794                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 11795  0A4D  3189  2178  318A   	fcall	_PWM1_Initialize
 11796                           
 11797                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 11798  0A50  3189  2132  318A   	fcall	_ADC_Initialize
 11799                           
 11800                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 11801  0A53  3189  214A         	fcall	_TMR2_Initialize
 11802  0A55  0008               	return
 11803  0A56                     __end_of_SYSTEM_Initialize:	
 11804                           
 11805                           	psect	text48
 11806  08D5                     __ptext48:	
 11807 ;; *************** function _WDT_Initialize *****************
 11808 ;; Defined at:
 11809 ;;		line 77 in file "mcc_generated_files/mcc.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      void 
 11816 ;; Registers used:
 11817 ;;		wreg
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;Total ram usage:        0 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    5
 11830 ;; This function calls:
 11831 ;;		Nothing
 11832 ;; This function is called by:
 11833 ;;		_SYSTEM_Initialize
 11834 ;; This function uses a non-reentrant model
 11835 ;;
 11836                           
 11837                           
 11838                           ;psect for function _WDT_Initialize
 11839  08D5                     _WDT_Initialize:	
 11840                           
 11841                           ;mcc_generated_files/mcc.c: 80:     WDTCON = 0x18;
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in _WDT_Initialize: [wreg]
 11845  08D5  3018               	movlw	24
 11846  08D6  0021               	movlb	1	; select bank1
 11847  08D7  0097               	movwf	23	;volatile
 11848  08D8  0008               	return
 11849  08D9                     __end_of_WDT_Initialize:	
 11850                           
 11851                           	psect	text49
 11852  094A                     __ptext49:	
 11853 ;; *************** function _TMR2_Initialize *****************
 11854 ;; Defined at:
 11855 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;		None
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;		None
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  1    wreg      void 
 11862 ;; Registers used:
 11863 ;;		wreg, status,2
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;Total ram usage:        0 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    5
 11876 ;; This function calls:
 11877 ;;		Nothing
 11878 ;; This function is called by:
 11879 ;;		_SYSTEM_Initialize
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _TMR2_Initialize
 11885  094A                     _TMR2_Initialize:	
 11886                           
 11887                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 11888                           
 11889                           ;incstack = 0
 11890                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11891  094A  30FF               	movlw	255
 11892  094B  0020               	movlb	0	; select bank0
 11893  094C  009E               	movwf	30	;volatile
 11894                           
 11895                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 11896  094D  019D               	clrf	29	;volatile
 11897                           
 11898                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 11899  094E  1091               	bcf	17,1	;volatile
 11900                           
 11901                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 11902  094F  3004               	movlw	4
 11903  0950  009F               	movwf	31	;volatile
 11904  0951  0008               	return
 11905  0952                     __end_of_TMR2_Initialize:	
 11906                           
 11907                           	psect	text50
 11908  0914                     __ptext50:	
 11909 ;; *************** function _SPI2_Initialize *****************
 11910 ;; Defined at:
 11911 ;;		line 65 in file "mcc_generated_files/spi2.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;		None
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;		None
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  1    wreg      void 
 11918 ;; Registers used:
 11919 ;;		wreg, status,2
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:        0 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    5
 11932 ;; This function calls:
 11933 ;;		Nothing
 11934 ;; This function is called by:
 11935 ;;		_SYSTEM_Initialize
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           
 11940                           ;psect for function _SPI2_Initialize
 11941  0914                     _SPI2_Initialize:	
 11942                           
 11943                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11944                           
 11945                           ;incstack = 0
 11946                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11947  0914  3080               	movlw	128
 11948  0915  0024               	movlb	4	; select bank4
 11949  0916  009C               	movwf	28	;volatile
 11950                           
 11951                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 11952  0917  3031               	movlw	49
 11953  0918  009D               	movwf	29	;volatile
 11954                           
 11955                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11956  0919  019A               	clrf	26	;volatile
 11957  091A  0008               	return
 11958  091B                     __end_of_SPI2_Initialize:	
 11959                           
 11960                           	psect	text51
 11961  0978                     __ptext51:	
 11962 ;; *************** function _PWM1_Initialize *****************
 11963 ;; Defined at:
 11964 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;		None
 11967 ;; Auto vars:     Size  Location     Type
 11968 ;;		None
 11969 ;; Return value:  Size  Location     Type
 11970 ;;                  1    wreg      void 
 11971 ;; Registers used:
 11972 ;;		wreg, status,2, status,0
 11973 ;; Tracked objects:
 11974 ;;		On entry : 0/0
 11975 ;;		On exit  : 0/0
 11976 ;;		Unchanged: 0/0
 11977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;Total ram usage:        0 bytes
 11983 ;; Hardware stack levels used:    1
 11984 ;; Hardware stack levels required when called:    5
 11985 ;; This function calls:
 11986 ;;		Nothing
 11987 ;; This function is called by:
 11988 ;;		_SYSTEM_Initialize
 11989 ;; This function uses a non-reentrant model
 11990 ;;
 11991                           
 11992                           
 11993                           ;psect for function _PWM1_Initialize
 11994  0978                     _PWM1_Initialize:	
 11995                           
 11996                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 11997                           
 11998                           ;incstack = 0
 11999                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12000  0978  308F               	movlw	143
 12001  0979  0025               	movlb	5	; select bank5
 12002  097A  0093               	movwf	19	;volatile
 12003                           
 12004                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12005  097B  3001               	movlw	1
 12006  097C  0092               	movwf	18	;volatile
 12007                           
 12008                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0xFF;
 12009  097D  30FF               	movlw	255
 12010  097E  0091               	movwf	17	;volatile
 12011                           
 12012                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12013  097F  081F               	movf	31,w	;volatile
 12014  0980  39FC               	andlw	-4
 12015  0981  3801               	iorlw	1
 12016  0982  009F               	movwf	31	;volatile
 12017  0983  0008               	return
 12018  0984                     __end_of_PWM1_Initialize:	
 12019                           
 12020                           	psect	text52
 12021  0942                     __ptext52:	
 12022 ;; *************** function _PMD_Initialize *****************
 12023 ;; Defined at:
 12024 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;		None
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;		None
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		status,2
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;Total ram usage:        0 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    5
 12045 ;; This function calls:
 12046 ;;		Nothing
 12047 ;; This function is called by:
 12048 ;;		_SYSTEM_Initialize
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           
 12053                           ;psect for function _PMD_Initialize
 12054  0942                     _PMD_Initialize:	
 12055                           
 12056                           ;mcc_generated_files/mcc.c: 86:     PMD0 = 0x00;
 12057                           
 12058                           ;incstack = 0
 12059                           ; Regs used in _PMD_Initialize: [status,2]
 12060  0942  0032               	movlb	18	; select bank18
 12061  0943  0191               	clrf	17	;volatile
 12062                           
 12063                           ;mcc_generated_files/mcc.c: 88:     PMD1 = 0x00;
 12064  0944  0192               	clrf	18	;volatile
 12065                           
 12066                           ;mcc_generated_files/mcc.c: 90:     PMD2 = 0x00;
 12067  0945  0193               	clrf	19	;volatile
 12068                           
 12069                           ;mcc_generated_files/mcc.c: 92:     PMD3 = 0x00;
 12070  0946  0194               	clrf	20	;volatile
 12071                           
 12072                           ;mcc_generated_files/mcc.c: 94:     PMD4 = 0x00;
 12073  0947  0195               	clrf	21	;volatile
 12074                           
 12075                           ;mcc_generated_files/mcc.c: 96:     PMD5 = 0x00;
 12076  0948  0196               	clrf	22	;volatile
 12077  0949  0008               	return
 12078  094A                     __end_of_PMD_Initialize:	
 12079                           
 12080                           	psect	text53
 12081  0D86                     __ptext53:	
 12082 ;; *************** function _PIN_MANAGER_Initialize *****************
 12083 ;; Defined at:
 12084 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;		None
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;		None
 12089 ;; Return value:  Size  Location     Type
 12090 ;;                  1    wreg      void 
 12091 ;; Registers used:
 12092 ;;		wreg, status,2
 12093 ;; Tracked objects:
 12094 ;;		On entry : 0/0
 12095 ;;		On exit  : 0/0
 12096 ;;		Unchanged: 0/0
 12097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;Total ram usage:        0 bytes
 12103 ;; Hardware stack levels used:    1
 12104 ;; Hardware stack levels required when called:    5
 12105 ;; This function calls:
 12106 ;;		Nothing
 12107 ;; This function is called by:
 12108 ;;		_SYSTEM_Initialize
 12109 ;; This function uses a non-reentrant model
 12110 ;;
 12111                           
 12112                           
 12113                           ;psect for function _PIN_MANAGER_Initialize
 12114  0D86                     _PIN_MANAGER_Initialize:	
 12115                           
 12116                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 12117                           
 12118                           ;incstack = 0
 12119                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12120  0D86  0022               	movlb	2	; select bank2
 12121  0D87  018C               	clrf	12	;volatile
 12122                           
 12123                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 12124  0D88  018D               	clrf	13	;volatile
 12125                           
 12126                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 12127  0D89  018E               	clrf	14	;volatile
 12128                           
 12129                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 12130  0D8A  3037               	movlw	55
 12131  0D8B  0021               	movlb	1	; select bank1
 12132  0D8C  008C               	movwf	12	;volatile
 12133                           
 12134                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 12135  0D8D  30B0               	movlw	176
 12136  0D8E  008D               	movwf	13	;volatile
 12137                           
 12138                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xBA;
 12139  0D8F  30BA               	movlw	186
 12140  0D90  008E               	movwf	14	;volatile
 12141                           
 12142                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xF4;
 12143  0D91  30F4               	movlw	244
 12144  0D92  0023               	movlb	3	; select bank3
 12145  0D93  008E               	movwf	14	;volatile
 12146                           
 12147                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 12148  0D94  018D               	clrf	13	;volatile
 12149                           
 12150                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 12151  0D95  3011               	movlw	17
 12152  0D96  008C               	movwf	12	;volatile
 12153                           
 12154                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 12155  0D97  0024               	movlb	4	; select bank4
 12156  0D98  018D               	clrf	13	;volatile
 12157                           
 12158                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 12159  0D99  018C               	clrf	12	;volatile
 12160                           
 12161                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 12162  0D9A  018E               	clrf	14	;volatile
 12163                           
 12164                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 12165  0D9B  0025               	movlb	5	; select bank5
 12166  0D9C  018C               	clrf	12	;volatile
 12167                           
 12168                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 12169  0D9D  018D               	clrf	13	;volatile
 12170                           
 12171                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 12172  0D9E  018E               	clrf	14	;volatile
 12173                           
 12174                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 12175  0D9F  3037               	movlw	55
 12176  0DA0  0026               	movlb	6	; select bank6
 12177  0DA1  008C               	movwf	12	;volatile
 12178                           
 12179                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 12180  0DA2  30F0               	movlw	240
 12181  0DA3  008D               	movwf	13	;volatile
 12182                           
 12183                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 12184  0DA4  30FF               	movlw	255
 12185  0DA5  008E               	movwf	14	;volatile
 12186                           
 12187                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 12188  0DA6  0021               	movlb	1	; select bank1
 12189  0DA7  1610               	bsf	16,4	;volatile
 12190                           
 12191                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 12192  0DA8  300C               	movlw	12
 12193  0DA9  003C               	movlb	28	; select bank28
 12194  0DAA  009E               	movwf	30	;volatile
 12195                           
 12196                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 12197  0DAB  300F               	movlw	15
 12198  0DAC  00A0               	movwf	32	;volatile
 12199                           
 12200                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 12201  0DAD  301A               	movlw	26
 12202  0DAE  003D               	movlb	29	; select bank29
 12203  0DAF  009E               	movwf	30	;volatile
 12204                           
 12205                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 12206  0DB0  3018               	movlw	24
 12207  0DB1  009F               	movwf	31	;volatile
 12208                           
 12209                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 12210  0DB2  3019               	movlw	25
 12211  0DB3  009D               	movwf	29	;volatile
 12212                           
 12213                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 12214  0DB4  301B               	movlw	27
 12215  0DB5  00A2               	movwf	34	;volatile
 12216                           
 12217                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 12218  0DB6  300D               	movlw	13
 12219  0DB7  003C               	movlb	28	; select bank28
 12220  0DB8  00A1               	movwf	33	;volatile
 12221                           
 12222                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 12223  0DB9  300E               	movlw	14
 12224  0DBA  009D               	movwf	29	;volatile
 12225  0DBB  0008               	return
 12226  0DBC                     __end_of_PIN_MANAGER_Initialize:	
 12227                           
 12228                           	psect	text54
 12229  093A                     __ptext54:	
 12230 ;; *************** function _OSCILLATOR_Initialize *****************
 12231 ;; Defined at:
 12232 ;;		line 63 in file "mcc_generated_files/mcc.c"
 12233 ;; Parameters:    Size  Location     Type
 12234 ;;		None
 12235 ;; Auto vars:     Size  Location     Type
 12236 ;;		None
 12237 ;; Return value:  Size  Location     Type
 12238 ;;                  1    wreg      void 
 12239 ;; Registers used:
 12240 ;;		wreg, status,2
 12241 ;; Tracked objects:
 12242 ;;		On entry : 0/0
 12243 ;;		On exit  : 0/0
 12244 ;;		Unchanged: 0/0
 12245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;Total ram usage:        0 bytes
 12251 ;; Hardware stack levels used:    1
 12252 ;; Hardware stack levels required when called:    5
 12253 ;; This function calls:
 12254 ;;		Nothing
 12255 ;; This function is called by:
 12256 ;;		_SYSTEM_Initialize
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           
 12261                           ;psect for function _OSCILLATOR_Initialize
 12262  093A                     _OSCILLATOR_Initialize:	
 12263                           
 12264                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x61;
 12265                           
 12266                           ;incstack = 0
 12267                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12268  093A  3061               	movlw	97
 12269  093B  0032               	movlb	18	; select bank18
 12270  093C  0099               	movwf	25	;volatile
 12271                           
 12272                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 12273  093D  019B               	clrf	27	;volatile
 12274                           
 12275                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 12276  093E  019D               	clrf	29	;volatile
 12277                           
 12278                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x00;
 12279  093F  019F               	clrf	31	;volatile
 12280                           
 12281                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 12282  0940  019E               	clrf	30	;volatile
 12283  0941  0008               	return
 12284  0942                     __end_of_OSCILLATOR_Initialize:	
 12285                           
 12286                           	psect	text55
 12287  0932                     __ptext55:	
 12288 ;; *************** function _ADC_Initialize *****************
 12289 ;; Defined at:
 12290 ;;		line 65 in file "mcc_generated_files/adc.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;		None
 12293 ;; Auto vars:     Size  Location     Type
 12294 ;;		None
 12295 ;; Return value:  Size  Location     Type
 12296 ;;                  1    wreg      void 
 12297 ;; Registers used:
 12298 ;;		wreg, status,2
 12299 ;; Tracked objects:
 12300 ;;		On entry : 0/0
 12301 ;;		On exit  : 0/0
 12302 ;;		Unchanged: 0/0
 12303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;Total ram usage:        0 bytes
 12309 ;; Hardware stack levels used:    1
 12310 ;; Hardware stack levels required when called:    5
 12311 ;; This function calls:
 12312 ;;		Nothing
 12313 ;; This function is called by:
 12314 ;;		_SYSTEM_Initialize
 12315 ;; This function uses a non-reentrant model
 12316 ;;
 12317                           
 12318                           
 12319                           ;psect for function _ADC_Initialize
 12320  0932                     _ADC_Initialize:	
 12321                           
 12322                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 12323                           
 12324                           ;incstack = 0
 12325                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12326  0932  3001               	movlw	1
 12327  0933  0021               	movlb	1	; select bank1
 12328  0934  009D               	movwf	29	;volatile
 12329                           
 12330                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 12331  0935  019E               	clrf	30	;volatile
 12332                           
 12333                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 12334  0936  019F               	clrf	31	;volatile
 12335                           
 12336                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 12337  0937  019B               	clrf	27	;volatile
 12338                           
 12339                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 12340  0938  019C               	clrf	28	;volatile
 12341  0939  0008               	return
 12342  093A                     __end_of_ADC_Initialize:	
 12343                           
 12344                           	psect	text56
 12345  090D                     __ptext56:	
 12346 ;; *************** function _PIR_Sensor *****************
 12347 ;; Defined at:
 12348 ;;		line 322 in file "main.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;		None
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;		None
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      _Bool 
 12355 ;; Registers used:
 12356 ;;		wreg
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;Total ram usage:        0 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    5
 12369 ;; This function calls:
 12370 ;;		Nothing
 12371 ;; This function is called by:
 12372 ;;		_main
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           
 12377                           ;psect for function _PIR_Sensor
 12378  090D                     _PIR_Sensor:	
 12379                           
 12380                           ;main.c: 327:     if(PORTCbits.RC3 >= 1){
 12381                           
 12382                           ;incstack = 0
 12383                           ; Regs used in _PIR_Sensor: [wreg]
 12384  090D  0020               	movlb	0	; select bank0
 12385  090E  1D8E               	btfss	14,3	;volatile
 12386  090F  2912               	goto	l6736
 12387                           
 12388                           ;main.c: 332:         return 1;
 12389  0910  3001               	movlw	1
 12390  0911  0008               	return
 12391  0912                     l6736:	
 12392                           
 12393                           ;main.c: 335:         return 0;
 12394  0912  3000               	movlw	0
 12395  0913  0008               	return
 12396  0914                     __end_of_PIR_Sensor:	
 12397                           
 12398                           	psect	text57
 12399  06D3                     __ptext57:	
 12400 ;; *************** function _Get_ADC *****************
 12401 ;; Defined at:
 12402 ;;		line 291 in file "main.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;		None
 12405 ;; Auto vars:     Size  Location     Type
 12406 ;;  val             2   15[BANK0 ] int 
 12407 ;; Return value:  Size  Location     Type
 12408 ;;                  1    wreg      void 
 12409 ;; Registers used:
 12410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;Total ram usage:        5 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    8
 12423 ;; This function calls:
 12424 ;;		_ADC_GetConversion
 12425 ;;		_Display_Name
 12426 ;; This function is called by:
 12427 ;;		_main
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           
 12432                           ;psect for function _Get_ADC
 12433  06D3                     _Get_ADC:	
 12434                           
 12435                           ;main.c: 292:     adcResult = ADC_GetConversion(BTN) >> 6;
 12436                           
 12437                           ;incstack = 0
 12438                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12439  06D3  3017               	movlw	23
 12440  06D4  318A  22C1  3186   	fcall	_ADC_GetConversion
 12441  06D7  0020               	movlb	0	; select bank0
 12442  06D8  0820               	movf	?_ADC_GetConversion,w
 12443  06D9  00AC               	movwf	??_Get_ADC
 12444  06DA  0821               	movf	?_ADC_GetConversion+1,w
 12445  06DB  00AD               	movwf	??_Get_ADC+1
 12446  06DC  3006               	movlw	6
 12447  06DD                     u6175:	
 12448  06DD  36AD               	lsrf	??_Get_ADC+1,f
 12449  06DE  0CAC               	rrf	??_Get_ADC,f
 12450  06DF  0B89               	decfsz	9,f
 12451  06E0  2EDD               	goto	u6175
 12452  06E1  082C               	movf	??_Get_ADC,w
 12453  06E2  00AE               	movwf	??_Get_ADC+2
 12454  06E3  082E               	movf	??_Get_ADC+2,w
 12455  06E4  00EC               	movwf	_adcResult
 12456                           
 12457                           ;main.c: 293:     int val = adcResult;
 12458  06E5  086C               	movf	_adcResult,w
 12459  06E6  00AC               	movwf	??_Get_ADC
 12460  06E7  01AD               	clrf	??_Get_ADC+1
 12461  06E8  082C               	movf	??_Get_ADC,w
 12462  06E9  00AF               	movwf	Get_ADC@val
 12463  06EA  082D               	movf	??_Get_ADC+1,w
 12464  06EB  00B0               	movwf	Get_ADC@val+1
 12465                           
 12466                           ;main.c: 294:     if(val >= 230 && val <= 240) {
 12467  06EC  0830               	movf	Get_ADC@val+1,w
 12468  06ED  3A80               	xorlw	128
 12469  06EE  00AC               	movwf	??_Get_ADC
 12470  06EF  3080               	movlw	128
 12471  06F0  022C               	subwf	??_Get_ADC,w
 12472  06F1  1D03               	skipz
 12473  06F2  2EF5               	goto	u6185
 12474  06F3  30E6               	movlw	230
 12475  06F4  022F               	subwf	Get_ADC@val,w
 12476  06F5                     u6185:	
 12477  06F5  1C03               	skipc
 12478  06F6  2F03               	goto	l6956
 12479  06F7  0020               	movlb	0	; select bank0
 12480  06F8  0830               	movf	Get_ADC@val+1,w
 12481  06F9  3A80               	xorlw	128
 12482  06FA  00AC               	movwf	??_Get_ADC
 12483  06FB  3080               	movlw	128
 12484  06FC  022C               	subwf	??_Get_ADC,w
 12485  06FD  1D03               	skipz
 12486  06FE  2F01               	goto	u6195
 12487  06FF  30F1               	movlw	241
 12488  0700  022F               	subwf	Get_ADC@val,w
 12489  0701                     u6195:	
 12490  0701  1C03               	btfss	3,0
 12491  0702  2FB0               	goto	l7002
 12492  0703                     l6956:	
 12493  0703  0020               	movlb	0	; select bank0
 12494  0704  0830               	movf	Get_ADC@val+1,w
 12495  0705  3A80               	xorlw	128
 12496  0706  00AC               	movwf	??_Get_ADC
 12497  0707  3080               	movlw	128
 12498  0708  022C               	subwf	??_Get_ADC,w
 12499  0709  1D03               	skipz
 12500  070A  2F0D               	goto	u6205
 12501  070B  30D7               	movlw	215
 12502  070C  022F               	subwf	Get_ADC@val,w
 12503  070D                     u6205:	
 12504  070D  1C03               	skipc
 12505  070E  2F1B               	goto	l6962
 12506  070F  0020               	movlb	0	; select bank0
 12507  0710  0830               	movf	Get_ADC@val+1,w
 12508  0711  3A80               	xorlw	128
 12509  0712  00AC               	movwf	??_Get_ADC
 12510  0713  3080               	movlw	128
 12511  0714  022C               	subwf	??_Get_ADC,w
 12512  0715  1D03               	skipz
 12513  0716  2F19               	goto	u6215
 12514  0717  30E2               	movlw	226
 12515  0718  022F               	subwf	Get_ADC@val,w
 12516  0719                     u6215:	
 12517  0719  1C03               	btfss	3,0
 12518  071A  2FB0               	goto	l7002
 12519  071B                     l6962:	
 12520  071B  0020               	movlb	0	; select bank0
 12521  071C  0830               	movf	Get_ADC@val+1,w
 12522  071D  3A80               	xorlw	128
 12523  071E  00AC               	movwf	??_Get_ADC
 12524  071F  3080               	movlw	128
 12525  0720  022C               	subwf	??_Get_ADC,w
 12526  0721  1D03               	skipz
 12527  0722  2F25               	goto	u6225
 12528  0723  30A5               	movlw	165
 12529  0724  022F               	subwf	Get_ADC@val,w
 12530  0725                     u6225:	
 12531  0725  1C03               	skipc
 12532  0726  2F33               	goto	l6968
 12533  0727  0020               	movlb	0	; select bank0
 12534  0728  0830               	movf	Get_ADC@val+1,w
 12535  0729  3A80               	xorlw	128
 12536  072A  00AC               	movwf	??_Get_ADC
 12537  072B  3080               	movlw	128
 12538  072C  022C               	subwf	??_Get_ADC,w
 12539  072D  1D03               	skipz
 12540  072E  2F31               	goto	u6235
 12541  072F  30B5               	movlw	181
 12542  0730  022F               	subwf	Get_ADC@val,w
 12543  0731                     u6235:	
 12544  0731  1C03               	btfss	3,0
 12545  0732  2FB0               	goto	l7002
 12546  0733                     l6968:	
 12547  0733  0020               	movlb	0	; select bank0
 12548  0734  0830               	movf	Get_ADC@val+1,w
 12549  0735  3A80               	xorlw	128
 12550  0736  00AC               	movwf	??_Get_ADC
 12551  0737  3080               	movlw	128
 12552  0738  022C               	subwf	??_Get_ADC,w
 12553  0739  1D03               	skipz
 12554  073A  2F3D               	goto	u6245
 12555  073B  308C               	movlw	140
 12556  073C  022F               	subwf	Get_ADC@val,w
 12557  073D                     u6245:	
 12558  073D  1C03               	skipc
 12559  073E  2F60               	goto	l6982
 12560  073F  0020               	movlb	0	; select bank0
 12561  0740  0830               	movf	Get_ADC@val+1,w
 12562  0741  3A80               	xorlw	128
 12563  0742  00AC               	movwf	??_Get_ADC
 12564  0743  3080               	movlw	128
 12565  0744  022C               	subwf	??_Get_ADC,w
 12566  0745  1D03               	skipz
 12567  0746  2F49               	goto	u6255
 12568  0747  309C               	movlw	156
 12569  0748  022F               	subwf	Get_ADC@val,w
 12570  0749                     u6255:	
 12571  0749  1803               	skipnc
 12572  074A  2F60               	goto	l6982
 12573                           
 12574                           ;main.c: 301:         printed = 0;
 12575  074B  0020               	movlb	0	; select bank0
 12576  074C  01ED               	clrf	_printed
 12577                           
 12578                           ;main.c: 302:         --name;
 12579  074D  30FF               	movlw	255
 12580  074E  07DC               	addwf	_name,f
 12581  074F  30FF               	movlw	255
 12582  0750  3DDD               	addwfc	_name+1,f
 12583                           
 12584                           ;main.c: 303:         if(name < 0) {
 12585  0751  1FDD               	btfss	_name+1,7
 12586  0752  2F57               	goto	l6980
 12587                           
 12588                           ;main.c: 304:             name = 3;
 12589  0753  3003               	movlw	3
 12590  0754  00DC               	movwf	_name
 12591  0755  3000               	movlw	0
 12592  0756  00DD               	movwf	_name+1
 12593  0757                     l6980:	
 12594                           
 12595                           ;main.c: 306:         Display_Name(names[name]);
 12596  0757  355C               	lslf	_name,w
 12597  0758  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12598  0759  0086               	movwf	6
 12599  075A  3001               	movlw	1	; select bank2/3
 12600  075B  0087               	movwf	7
 12601  075C  3F40               	moviw [0]fsr1
 12602  075D  00A5               	movwf	Display_Name@string1
 12603  075E  3F41               	moviw [1]fsr1
 12604  075F  2FAD               	goto	L9
 12605  0760                     l6982:	
 12606                           ;main.c: 307:     }
 12607                           
 12608  0760  0020               	movlb	0	; select bank0
 12609  0761  0830               	movf	Get_ADC@val+1,w
 12610  0762  3A80               	xorlw	128
 12611  0763  00AC               	movwf	??_Get_ADC
 12612  0764  3080               	movlw	128
 12613  0765  022C               	subwf	??_Get_ADC,w
 12614  0766  1D03               	skipz
 12615  0767  2F6A               	goto	u6275
 12616  0768  305A               	movlw	90
 12617  0769  022F               	subwf	Get_ADC@val,w
 12618  076A                     u6275:	
 12619  076A  1C03               	skipc
 12620  076B  2F78               	goto	l6988
 12621  076C  0020               	movlb	0	; select bank0
 12622  076D  0830               	movf	Get_ADC@val+1,w
 12623  076E  3A80               	xorlw	128
 12624  076F  00AC               	movwf	??_Get_ADC
 12625  0770  3080               	movlw	128
 12626  0771  022C               	subwf	??_Get_ADC,w
 12627  0772  1D03               	skipz
 12628  0773  2F76               	goto	u6285
 12629  0774  3079               	movlw	121
 12630  0775  022F               	subwf	Get_ADC@val,w
 12631  0776                     u6285:	
 12632  0776  1C03               	btfss	3,0
 12633  0777  2FB0               	goto	l7002
 12634  0778                     l6988:	
 12635  0778  0020               	movlb	0	; select bank0
 12636  0779  0830               	movf	Get_ADC@val+1,w
 12637  077A  3A80               	xorlw	128
 12638  077B  00AC               	movwf	??_Get_ADC
 12639  077C  3080               	movlw	128
 12640  077D  022C               	subwf	??_Get_ADC,w
 12641  077E  1D03               	skipz
 12642  077F  2F82               	goto	u6295
 12643  0780  30C8               	movlw	200
 12644  0781  022F               	subwf	Get_ADC@val,w
 12645  0782                     u6295:	
 12646  0782  1C03               	skipc
 12647  0783  2FB0               	goto	l7002
 12648  0784  0020               	movlb	0	; select bank0
 12649  0785  0830               	movf	Get_ADC@val+1,w
 12650  0786  3A80               	xorlw	128
 12651  0787  00AC               	movwf	??_Get_ADC
 12652  0788  3080               	movlw	128
 12653  0789  022C               	subwf	??_Get_ADC,w
 12654  078A  1D03               	skipz
 12655  078B  2F8E               	goto	u6305
 12656  078C  30E7               	movlw	231
 12657  078D  022F               	subwf	Get_ADC@val,w
 12658  078E                     u6305:	
 12659  078E  1803               	skipnc
 12660  078F  2FB0               	goto	l7002
 12661                           
 12662                           ;main.c: 311:         printed = 0;
 12663  0790  0020               	movlb	0	; select bank0
 12664  0791  01ED               	clrf	_printed
 12665                           
 12666                           ;main.c: 312:         name++;
 12667  0792  3001               	movlw	1
 12668  0793  07DC               	addwf	_name,f
 12669  0794  3000               	movlw	0
 12670  0795  3DDD               	addwfc	_name+1,f
 12671                           
 12672                           ;main.c: 313:         if(name > 3) {
 12673  0796  085D               	movf	_name+1,w
 12674  0797  3A80               	xorlw	128
 12675  0798  00AC               	movwf	??_Get_ADC
 12676  0799  3080               	movlw	128
 12677  079A  022C               	subwf	??_Get_ADC,w
 12678  079B  1D03               	skipz
 12679  079C  2F9F               	goto	u6315
 12680  079D  3004               	movlw	4
 12681  079E  025C               	subwf	_name,w
 12682  079F                     u6315:	
 12683  079F  1C03               	skipc
 12684  07A0  2FA4               	goto	l7000
 12685                           
 12686                           ;main.c: 314:            name = 0;
 12687  07A1  0020               	movlb	0	; select bank0
 12688  07A2  01DC               	clrf	_name
 12689  07A3  01DD               	clrf	_name+1
 12690  07A4                     l7000:	
 12691                           
 12692                           ;main.c: 316:         Display_Name(names[name]);
 12693  07A4  0020               	movlb	0	; select bank0
 12694  07A5  355C               	lslf	_name,w
 12695  07A6  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12696  07A7  0086               	movwf	6
 12697  07A8  3001               	movlw	1	; select bank2/3
 12698  07A9  0087               	movwf	7
 12699  07AA  3F40               	moviw [0]fsr1
 12700  07AB  00A5               	movwf	Display_Name@string1
 12701  07AC  3F41               	moviw [1]fsr1
 12702  07AD                     L9:	
 12703  07AD  00A6               	movwf	Display_Name@string1+1
 12704  07AE  318E  26A0         	fcall	_Display_Name
 12705  07B0                     l7002:	
 12706                           
 12707                           ;main.c: 318:     adcResult = 0;
 12708  07B0  0020               	movlb	0	; select bank0
 12709  07B1  01EC               	clrf	_adcResult
 12710  07B2  0008               	return
 12711  07B3                     __end_of_Get_ADC:	
 12712                           
 12713                           	psect	text58
 12714  0EA0                     __ptext58:	
 12715 ;; *************** function _Display_Name *****************
 12716 ;; Defined at:
 12717 ;;		line 214 in file "main.c"
 12718 ;; Parameters:    Size  Location     Type
 12719 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 12720 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12721 ;; Auto vars:     Size  Location     Type
 12722 ;;  i               2   10[BANK0 ] int 
 12723 ;;  length          2    8[BANK0 ] int 
 12724 ;; Return value:  Size  Location     Type
 12725 ;;                  1    wreg      void 
 12726 ;; Registers used:
 12727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12728 ;; Tracked objects:
 12729 ;;		On entry : 0/0
 12730 ;;		On exit  : 0/0
 12731 ;;		Unchanged: 0/0
 12732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;Total ram usage:        7 bytes
 12738 ;; Hardware stack levels used:    1
 12739 ;; Hardware stack levels required when called:    7
 12740 ;; This function calls:
 12741 ;;		_PWM_Output_Disable
 12742 ;;		_PWM_Output_Enable
 12743 ;;		_SPI_Write
 12744 ;;		_strlen
 12745 ;; This function is called by:
 12746 ;;		_main
 12747 ;;		_handleGesture
 12748 ;;		_Get_ADC
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _Display_Name
 12754  0EA0                     _Display_Name:	
 12755                           
 12756                           ;main.c: 215:     int length;;main.c: 216:     int i;;main.c: 217:     PWM_Output_Enable
      +                          ();
 12757                           
 12758                           ;incstack = 0
 12759                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12760  0EA0  3188  20D1  318E   	fcall	_PWM_Output_Enable
 12761                           
 12762                           ;main.c: 218:     _delay((unsigned long)((200)*(500000/4000.0)));
 12763  0EA3  3021               	movlw	33
 12764  0EA4  0020               	movlb	0	; select bank0
 12765  0EA5  00A7               	movwf	??_Display_Name
 12766  0EA6  3076               	movlw	118
 12767  0EA7                     u6487:	
 12768  0EA7  0B89               	decfsz	9,f
 12769  0EA8  2EA7               	goto	u6487
 12770  0EA9  0BA7               	decfsz	??_Display_Name,f
 12771  0EAA  2EA7               	goto	u6487
 12772  0EAB  0000               	nop
 12773                           
 12774                           ;main.c: 219:     PWM_Output_Disable();
 12775  0EAC  3188  2092  318E   	fcall	_PWM_Output_Disable
 12776                           
 12777                           ;main.c: 221:         SPI_Write(0xFE);
 12778  0EAF  30FE               	movlw	254
 12779  0EB0  318A  2211  318E   	fcall	_SPI_Write
 12780                           
 12781                           ;main.c: 222:         _delay((unsigned long)((100)*(500000/4000.0)));
 12782  0EB3  3011               	movlw	17
 12783  0EB4  0020               	movlb	0	; select bank0
 12784  0EB5  00A7               	movwf	??_Display_Name
 12785  0EB6  303A               	movlw	58
 12786  0EB7                     u6497:	
 12787  0EB7  0B89               	decfsz	9,f
 12788  0EB8  2EB7               	goto	u6497
 12789  0EB9  0BA7               	decfsz	??_Display_Name,f
 12790  0EBA  2EB7               	goto	u6497
 12791  0EBB  0000               	nop
 12792                           
 12793                           ;main.c: 223:         SPI_Write(0x51);
 12794  0EBC  3051               	movlw	81
 12795  0EBD  318A  2211  318E   	fcall	_SPI_Write
 12796                           
 12797                           ;main.c: 224:         length = strlen(string1);
 12798  0EC0  0020               	movlb	0	; select bank0
 12799  0EC1  0826               	movf	Display_Name@string1+1,w
 12800  0EC2  00A1               	movwf	strlen@s+1
 12801  0EC3  0825               	movf	Display_Name@string1,w
 12802  0EC4  00A0               	movwf	strlen@s
 12803  0EC5  318A  2226  318E   	fcall	_strlen
 12804  0EC8  0020               	movlb	0	; select bank0
 12805  0EC9  0821               	movf	?_strlen+1,w
 12806  0ECA  00A9               	movwf	Display_Name@length+1
 12807  0ECB  0820               	movf	?_strlen,w
 12808  0ECC  00A8               	movwf	Display_Name@length
 12809                           
 12810                           ;main.c: 225:         for(i = 0; i < length; i++){
 12811  0ECD  01AA               	clrf	Display_Name@i
 12812  0ECE  01AB               	clrf	Display_Name@i+1
 12813  0ECF                     l6388:	
 12814  0ECF  082B               	movf	Display_Name@i+1,w
 12815  0ED0  3A80               	xorlw	128
 12816  0ED1  00A7               	movwf	??_Display_Name
 12817  0ED2  0829               	movf	Display_Name@length+1,w
 12818  0ED3  3A80               	xorlw	128
 12819  0ED4  0227               	subwf	??_Display_Name,w
 12820  0ED5  1D03               	skipz
 12821  0ED6  2ED9               	goto	u5505
 12822  0ED7  0828               	movf	Display_Name@length,w
 12823  0ED8  022A               	subwf	Display_Name@i,w
 12824  0ED9                     u5505:	
 12825  0ED9  1803               	btfsc	3,0
 12826  0EDA  2EEC               	goto	l783
 12827                           
 12828                           ;main.c: 226:             SPI_Write(string1[i]);
 12829  0EDB  0020               	movlb	0	; select bank0
 12830  0EDC  0825               	movf	Display_Name@string1,w
 12831  0EDD  072A               	addwf	Display_Name@i,w
 12832  0EDE  0084               	movwf	4
 12833  0EDF  0826               	movf	Display_Name@string1+1,w
 12834  0EE0  3D2B               	addwfc	Display_Name@i+1,w
 12835  0EE1  0085               	movwf	5
 12836  0EE2  0800               	movf	0,w	;code access
 12837  0EE3  318A  2211  318E   	fcall	_SPI_Write
 12838                           
 12839                           ;main.c: 227:         }
 12840  0EE6  3001               	movlw	1
 12841  0EE7  0020               	movlb	0	; select bank0
 12842  0EE8  07AA               	addwf	Display_Name@i,f
 12843  0EE9  3000               	movlw	0
 12844  0EEA  3DAB               	addwfc	Display_Name@i+1,f
 12845  0EEB  2ECF               	goto	l6388
 12846  0EEC                     l783:	
 12847                           
 12848                           ;main.c: 229:     printed = 1;
 12849  0EEC  0020               	movlb	0	; select bank0
 12850  0EED  01ED               	clrf	_printed
 12851  0EEE  0AED               	incf	_printed,f
 12852  0EEF  0008               	return
 12853  0EF0                     __end_of_Display_Name:	
 12854                           
 12855                           	psect	text59
 12856  0A26                     __ptext59:	
 12857 ;; *************** function _strlen *****************
 12858 ;; Defined at:
 12859 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 12862 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 12865 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12866 ;; Return value:  Size  Location     Type
 12867 ;;                  2    0[BANK0 ] unsigned int 
 12868 ;; Registers used:
 12869 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;Total ram usage:        5 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    5
 12882 ;; This function calls:
 12883 ;;		Nothing
 12884 ;; This function is called by:
 12885 ;;		_Display_Name
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _strlen
 12891  0A26                     _strlen:	
 12892                           
 12893                           ;incstack = 0
 12894                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 12895  0A26  0020               	movlb	0	; select bank0
 12896  0A27  0821               	movf	strlen@s+1,w
 12897  0A28  00A4               	movwf	strlen@a+1
 12898  0A29  0820               	movf	strlen@s,w
 12899  0A2A  00A3               	movwf	strlen@a
 12900  0A2B                     l5914:	
 12901  0A2B  0820               	movf	strlen@s,w
 12902  0A2C  0084               	movwf	4
 12903  0A2D  0821               	movf	strlen@s+1,w
 12904  0A2E  0085               	movwf	5
 12905  0A2F  0012               	moviw fsr0++
 12906  0A30  1903               	btfsc	3,2
 12907  0A31  2A37               	goto	l5916
 12908  0A32  3001               	movlw	1
 12909  0A33  07A0               	addwf	strlen@s,f
 12910  0A34  3000               	movlw	0
 12911  0A35  3DA1               	addwfc	strlen@s+1,f
 12912  0A36  2A2B               	goto	l5914
 12913  0A37                     l5916:	
 12914  0A37  0823               	movf	strlen@a,w
 12915  0A38  0220               	subwf	strlen@s,w
 12916  0A39  00A0               	movwf	?_strlen
 12917  0A3A  0824               	movf	strlen@a+1,w
 12918  0A3B  3B21               	subwfb	strlen@s+1,w
 12919  0A3C  00A1               	movwf	?_strlen+1
 12920  0A3D  0008               	return
 12921  0A3E                     __end_of_strlen:	
 12922                           
 12923                           	psect	text60
 12924  08D1                     __ptext60:	
 12925 ;; *************** function _PWM_Output_Enable *****************
 12926 ;; Defined at:
 12927 ;;		line 283 in file "main.c"
 12928 ;; Parameters:    Size  Location     Type
 12929 ;;		None
 12930 ;; Auto vars:     Size  Location     Type
 12931 ;;		None
 12932 ;; Return value:  Size  Location     Type
 12933 ;;                  1    wreg      void 
 12934 ;; Registers used:
 12935 ;;		wreg
 12936 ;; Tracked objects:
 12937 ;;		On entry : 0/0
 12938 ;;		On exit  : 0/0
 12939 ;;		Unchanged: 0/0
 12940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;Total ram usage:        0 bytes
 12946 ;; Hardware stack levels used:    1
 12947 ;; Hardware stack levels required when called:    5
 12948 ;; This function calls:
 12949 ;;		Nothing
 12950 ;; This function is called by:
 12951 ;;		_Display_Name
 12952 ;;		_PWM
 12953 ;; This function uses a non-reentrant model
 12954 ;;
 12955                           
 12956                           
 12957                           ;psect for function _PWM_Output_Enable
 12958  08D1                     _PWM_Output_Enable:	
 12959                           
 12960                           ;main.c: 284:     RC6PPS = 0x0C;
 12961                           
 12962                           ;incstack = 0
 12963                           ; Regs used in _PWM_Output_Enable: [wreg]
 12964  08D1  300C               	movlw	12
 12965  08D2  003D               	movlb	29	; select bank29
 12966  08D3  00A6               	movwf	38	;volatile
 12967  08D4  0008               	return
 12968  08D5                     __end_of_PWM_Output_Enable:	
 12969                           
 12970                           	psect	text61
 12971  0892                     __ptext61:	
 12972 ;; *************** function _PWM_Output_Disable *****************
 12973 ;; Defined at:
 12974 ;;		line 287 in file "main.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;		None
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;		None
 12979 ;; Return value:  Size  Location     Type
 12980 ;;                  1    wreg      void 
 12981 ;; Registers used:
 12982 ;;		status,2
 12983 ;; Tracked objects:
 12984 ;;		On entry : 0/0
 12985 ;;		On exit  : 0/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;Total ram usage:        0 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    5
 12995 ;; This function calls:
 12996 ;;		Nothing
 12997 ;; This function is called by:
 12998 ;;		_Display_Name
 12999 ;;		_PWM
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           
 13004                           ;psect for function _PWM_Output_Disable
 13005  0892                     _PWM_Output_Disable:	
 13006                           
 13007                           ;main.c: 288:     RC6PPS = 0x00;
 13008                           
 13009                           ;incstack = 0
 13010                           ; Regs used in _PWM_Output_Disable: [status,2]
 13011  0892  003D               	movlb	29	; select bank29
 13012  0893  01A6               	clrf	38	;volatile
 13013  0894  0008               	return
 13014  0895                     __end_of_PWM_Output_Disable:	
 13015                           
 13016                           	psect	text62
 13017  0AC1                     __ptext62:	
 13018 ;; *************** function _ADC_GetConversion *****************
 13019 ;; Defined at:
 13020 ;;		line 113 in file "mcc_generated_files/adc.c"
 13021 ;; Parameters:    Size  Location     Type
 13022 ;;  channel         1    wreg     enum E6648
 13023 ;; Auto vars:     Size  Location     Type
 13024 ;;  channel         1    3[BANK0 ] enum E6648
 13025 ;; Return value:  Size  Location     Type
 13026 ;;                  2    0[BANK0 ] unsigned short 
 13027 ;; Registers used:
 13028 ;;		wreg, status,2, status,0
 13029 ;; Tracked objects:
 13030 ;;		On entry : 0/0
 13031 ;;		On exit  : 0/0
 13032 ;;		Unchanged: 0/0
 13033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13034 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13035 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13038 ;;Total ram usage:        4 bytes
 13039 ;; Hardware stack levels used:    1
 13040 ;; Hardware stack levels required when called:    5
 13041 ;; This function calls:
 13042 ;;		Nothing
 13043 ;; This function is called by:
 13044 ;;		_Get_ADC
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           
 13049                           ;psect for function _ADC_GetConversion
 13050  0AC1                     _ADC_GetConversion:	
 13051                           
 13052                           ;incstack = 0
 13053                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 13054                           ;ADC_GetConversion@channel stored from wreg
 13055  0AC1  0020               	movlb	0	; select bank0
 13056  0AC2  00A3               	movwf	ADC_GetConversion@channel
 13057                           
 13058                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 13059  0AC3  0823               	movf	ADC_GetConversion@channel,w
 13060  0AC4  00A2               	movwf	??_ADC_GetConversion
 13061  0AC5  0DA2               	rlf	??_ADC_GetConversion,f
 13062  0AC6  0DA2               	rlf	??_ADC_GetConversion,f
 13063  0AC7  0021               	movlb	1	; select bank1
 13064  0AC8  081D               	movf	29,w	;volatile
 13065  0AC9  0020               	movlb	0	; select bank0
 13066  0ACA  0622               	xorwf	??_ADC_GetConversion,w
 13067  0ACB  3903               	andlw	-253
 13068  0ACC  0622               	xorwf	??_ADC_GetConversion,w
 13069  0ACD  0021               	movlb	1	; select bank1
 13070  0ACE  009D               	movwf	29	;volatile
 13071                           
 13072                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 13073  0ACF  141D               	bsf	29,0	;volatile
 13074                           
 13075                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 13076                           
 13077                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 13078  0AD0  0021               	movlb	1	; select bank1
 13079  0AD1  149D               	bsf	29,1	;volatile
 13080  0AD2                     l623:	
 13081                           ;mcc_generated_files/adc.c: 131:     }
 13082                           
 13083                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13084                           
 13085                           
 13086                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13087  0AD2  0021               	movlb	1	; select bank1
 13088  0AD3  1C9D               	btfss	29,1	;volatile
 13089  0AD4  2AD7               	goto	l6368
 13090  0AD5  0064               	clrwdt	;# 
 13091  0AD6  2AD2               	goto	l623
 13092  0AD7                     l6368:	
 13093                           
 13094                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 13095  0AD7  081C               	movf	28,w	;volatile
 13096  0AD8  0020               	movlb	0	; select bank0
 13097  0AD9  00A1               	movwf	?_ADC_GetConversion+1
 13098  0ADA  0021               	movlb	1	; select bank1
 13099  0ADB  081B               	movf	27,w	;volatile
 13100  0ADC  0020               	movlb	0	; select bank0
 13101  0ADD  00A0               	movwf	?_ADC_GetConversion
 13102  0ADE  0008               	return
 13103  0ADF                     __end_of_ADC_GetConversion:	
 13104                           
 13105                           	psect	text63
 13106  09A1                     __ptext63:	
 13107 ;; *************** function _Display_Clear *****************
 13108 ;; Defined at:
 13109 ;;		line 250 in file "main.c"
 13110 ;; Parameters:    Size  Location     Type
 13111 ;;		None
 13112 ;; Auto vars:     Size  Location     Type
 13113 ;;		None
 13114 ;; Return value:  Size  Location     Type
 13115 ;;                  1    wreg      void 
 13116 ;; Registers used:
 13117 ;;		wreg, status,2, status,0, pclath, cstack
 13118 ;; Tracked objects:
 13119 ;;		On entry : 0/0
 13120 ;;		On exit  : 0/0
 13121 ;;		Unchanged: 0/0
 13122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13127 ;;Total ram usage:        1 bytes
 13128 ;; Hardware stack levels used:    1
 13129 ;; Hardware stack levels required when called:    7
 13130 ;; This function calls:
 13131 ;;		_SPI_Write
 13132 ;; This function is called by:
 13133 ;;		_main
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           
 13138                           ;psect for function _Display_Clear
 13139  09A1                     _Display_Clear:	
 13140                           
 13141                           ;main.c: 251:     SPI_Write(0xFE);
 13142                           
 13143                           ;incstack = 0
 13144                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 13145  09A1  30FE               	movlw	254
 13146  09A2  318A  2211  3189   	fcall	_SPI_Write
 13147                           
 13148                           ;main.c: 252:     _delay((unsigned long)((100)*(500000/4000.0)));
 13149  09A5  3011               	movlw	17
 13150  09A6  0020               	movlb	0	; select bank0
 13151  09A7  00A3               	movwf	??_Display_Clear
 13152  09A8  303A               	movlw	58
 13153  09A9                     u6507:	
 13154  09A9  0B89               	decfsz	9,f
 13155  09AA  29A9               	goto	u6507
 13156  09AB  0BA3               	decfsz	??_Display_Clear,f
 13157  09AC  29A9               	goto	u6507
 13158  09AD  0000               	nop
 13159                           
 13160                           ;main.c: 253:     SPI_Write(0x51);
 13161  09AE  3051               	movlw	81
 13162  09AF  318A  2211         	fcall	_SPI_Write
 13163  09B1  0008               	return
 13164  09B2                     __end_of_Display_Clear:	
 13165                           
 13166                           	psect	text64
 13167  0A11                     __ptext64:	
 13168 ;; *************** function _SPI_Write *****************
 13169 ;; Defined at:
 13170 ;;		line 207 in file "main.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  incoming        1    wreg     unsigned char 
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;  incoming        1    2[BANK0 ] unsigned char 
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, status,2, status,0, pclath, cstack
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;Total ram usage:        2 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; Hardware stack levels required when called:    6
 13191 ;; This function calls:
 13192 ;;		_SPI2_Exchange8bit
 13193 ;; This function is called by:
 13194 ;;		_Display_Name
 13195 ;;		_Display_Clear
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199                           
 13200                           ;psect for function _SPI_Write
 13201  0A11                     _SPI_Write:	
 13202                           
 13203                           ;incstack = 0
 13204                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 13205                           ;SPI_Write@incoming stored from wreg
 13206  0A11  0020               	movlb	0	; select bank0
 13207  0A12  00A2               	movwf	SPI_Write@incoming
 13208                           
 13209                           ;main.c: 208:     do { LATCbits.LATC0 = 0; } while(0);
 13210  0A13  0022               	movlb	2	; select bank2
 13211  0A14  100E               	bcf	14,0	;volatile
 13212                           
 13213                           ;main.c: 209:     SPI2_Exchange8bit(incoming);
 13214  0A15  0020               	movlb	0	; select bank0
 13215  0A16  0822               	movf	SPI_Write@incoming,w
 13216  0A17  3189  2192  318A   	fcall	_SPI2_Exchange8bit
 13217  0A1A  0022               	movlb	2	; select bank2
 13218  0A1B  140E               	bsf	14,0	;volatile
 13219                           
 13220                           ;main.c: 211:     _delay((unsigned long)((100)*(500000/4000.0)));
 13221  0A1C  3011               	movlw	17
 13222  0A1D  0020               	movlb	0	; select bank0
 13223  0A1E  00A1               	movwf	??_SPI_Write
 13224  0A1F  303A               	movlw	58
 13225  0A20                     u6517:	
 13226  0A20  0B89               	decfsz	9,f
 13227  0A21  2A20               	goto	u6517
 13228  0A22  0BA1               	decfsz	??_SPI_Write,f
 13229  0A23  2A20               	goto	u6517
 13230  0A24  0000               	nop
 13231  0A25  0008               	return
 13232  0A26                     __end_of_SPI_Write:	
 13233                           
 13234                           	psect	text65
 13235  0992                     __ptext65:	
 13236 ;; *************** function _SPI2_Exchange8bit *****************
 13237 ;; Defined at:
 13238 ;;		line 79 in file "mcc_generated_files/spi2.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  data            1    wreg     unsigned char 
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;  data            1    0[BANK0 ] unsigned char 
 13243 ;; Return value:  Size  Location     Type
 13244 ;;                  1    wreg      unsigned char 
 13245 ;; Registers used:
 13246 ;;		wreg
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;Total ram usage:        1 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    5
 13259 ;; This function calls:
 13260 ;;		Nothing
 13261 ;; This function is called by:
 13262 ;;		_SPI_Write
 13263 ;;		_SPI2_Exchange8bitBuffer
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _SPI2_Exchange8bit
 13269  0992                     _SPI2_Exchange8bit:	
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 13273                           ;SPI2_Exchange8bit@data stored from wreg
 13274  0992  0020               	movlb	0	; select bank0
 13275  0993  00A0               	movwf	SPI2_Exchange8bit@data
 13276                           
 13277                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 13278  0994  0024               	movlb	4	; select bank4
 13279  0995  139D               	bcf	29,7	;volatile
 13280                           
 13281                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 13282  0996  0020               	movlb	0	; select bank0
 13283  0997  0820               	movf	SPI2_Exchange8bit@data,w
 13284  0998  0024               	movlb	4	; select bank4
 13285  0999  0099               	movwf	25	;volatile
 13286  099A                     l532:	
 13287                           ;mcc_generated_files/spi2.c: 89:     }
 13288                           
 13289                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13290                           
 13291                           
 13292                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13293  099A  0024               	movlb	4	; select bank4
 13294  099B  181C               	btfsc	28,0	;volatile
 13295  099C  299F               	goto	l5802
 13296  099D  0064               	clrwdt	;# 
 13297  099E  299A               	goto	l532
 13298  099F                     l5802:	
 13299                           
 13300                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 13301  099F  0819               	movf	25,w	;volatile
 13302  09A0  0008               	return
 13303  09A1                     __end_of_SPI2_Exchange8bit:	
 13304                           
 13305                           	psect	intentry
 13306  0004                     __pintentry:	
 13307 ;; *************** function _INTERRUPT_InterruptManager *****************
 13308 ;; Defined at:
 13309 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13310 ;; Parameters:    Size  Location     Type
 13311 ;;		None
 13312 ;; Auto vars:     Size  Location     Type
 13313 ;;		None
 13314 ;; Return value:  Size  Location     Type
 13315 ;;                  1    wreg      void 
 13316 ;; Registers used:
 13317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;Total ram usage:        0 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    4
 13330 ;; This function calls:
 13331 ;;		Absolute function
 13332 ;;		_PIN_MANAGER_IOC
 13333 ;;		_i2c_ISR
 13334 ;;		_i2c_busCollisionISR
 13335 ;; This function is called by:
 13336 ;;		Interrupt level 1
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340  0004                     _INTERRUPT_InterruptManager:	
 13341                           
 13342                           ;incstack = 0
 13343  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13344                           
 13345                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13346  0005  3180               	pagesel	$
 13347                           
 13348                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 13349  0006  0021               	movlb	1	; select bank1
 13350  0007  1E10               	btfss	16,4	;volatile
 13351  0008  2810               	goto	i1l245
 13352  0009  0020               	movlb	0	; select bank0
 13353  000A  1E10               	btfss	16,4	;volatile
 13354  000B  2810               	goto	i1l245
 13355                           
 13356                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 13357  000C  3188  2074  3180   	fcall	_PIN_MANAGER_IOC
 13358                           
 13359                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13360  000F  282A               	goto	i1l253
 13361  0010                     i1l245:	
 13362                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13363                           
 13364  0010  1F0B               	btfss	11,6	;volatile
 13365  0011  282A               	goto	i1l253
 13366                           
 13367                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 13368  0012  0021               	movlb	1	; select bank1
 13369  0013  1D11               	btfss	17,2	;volatile
 13370  0014  281E               	goto	i1l248
 13371  0015  0020               	movlb	0	; select bank0
 13372  0016  1D11               	btfss	17,2	;volatile
 13373  0017  281E               	goto	i1l248
 13374                           
 13375                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 13376  0018  086B               	movf	_i2c1_driver_busCollisionISR+1,w
 13377  0019  008A               	movwf	10
 13378  001A  086A               	movf	_i2c1_driver_busCollisionISR,w
 13379  001B  000A               	callw
 13380  001C  3180               	pagesel	$
 13381                           
 13382                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13383  001D  282A               	goto	i1l253
 13384  001E                     i1l248:	
 13385                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 13386                           
 13387  001E  0021               	movlb	1	; select bank1
 13388  001F  1D91               	btfss	17,3	;volatile
 13389  0020  282A               	goto	i1l253
 13390  0021  0020               	movlb	0	; select bank0
 13391  0022  1D91               	btfss	17,3	;volatile
 13392  0023  282A               	goto	i1l253
 13393                           
 13394                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 13395  0024  0021               	movlb	1	; select bank1
 13396  0025  0865               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 13397  0026  008A               	movwf	10
 13398  0027  0864               	movf	_i2c1_driver_i2cISR^(0+128),w
 13399  0028  000A               	callw
 13400  0029  3180               	pagesel	$
 13401  002A                     i1l253:	
 13402                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13403                           
 13404                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13405                           
 13406  002A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13407  002B  0009               	retfie
 13408  002C                     __end_of_INTERRUPT_InterruptManager:	
 13409                           
 13410                           	psect	text67
 13411  088F                     __ptext67:	
 13412 ;; *************** function _i2c_busCollisionISR *****************
 13413 ;; Defined at:
 13414 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;		None
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;		None
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      void 
 13421 ;; Registers used:
 13422 ;;		status,2, status,0, pclath, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;Total ram usage:        0 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    1
 13435 ;; This function calls:
 13436 ;;		_i2c1_driver_clearBusCollision
 13437 ;; This function is called by:
 13438 ;;		_i2c_open
 13439 ;;		_INTERRUPT_InterruptManager
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           
 13444                           ;psect for function _i2c_busCollisionISR
 13445  088F                     _i2c_busCollisionISR:	
 13446                           
 13447                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 13448                           
 13449                           ;incstack = 0
 13450                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 13451  088F  3188  208C         	fcall	_i2c1_driver_clearBusCollision
 13452  0891  0008               	return
 13453  0892                     __end_of_i2c_busCollisionISR:	
 13454                           
 13455                           	psect	text68
 13456  088C                     __ptext68:	
 13457 ;; *************** function _i2c1_driver_clearBusCollision *****************
 13458 ;; Defined at:
 13459 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 13460 ;; Parameters:    Size  Location     Type
 13461 ;;		None
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;		None
 13464 ;; Return value:  Size  Location     Type
 13465 ;;                  1    wreg      void 
 13466 ;; Registers used:
 13467 ;;		None
 13468 ;; Tracked objects:
 13469 ;;		On entry : 0/0
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;Total ram usage:        0 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; This function calls:
 13480 ;;		Nothing
 13481 ;; This function is called by:
 13482 ;;		_i2c_busCollisionISR
 13483 ;; This function uses a non-reentrant model
 13484 ;;
 13485                           
 13486                           
 13487                           ;psect for function _i2c1_driver_clearBusCollision
 13488  088C                     _i2c1_driver_clearBusCollision:	
 13489                           
 13490                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 13491                           
 13492                           ;incstack = 0
 13493                           ; Regs used in _i2c1_driver_clearBusCollision: []
 13494  088C  0020               	movlb	0	; select bank0
 13495  088D  1111               	bcf	17,2	;volatile
 13496  088E  0008               	return
 13497  088F                     __end_of_i2c1_driver_clearBusCollision:	
 13498                           
 13499                           	psect	text69
 13500  0B21                     __ptext69:	
 13501 ;; *************** function _i2c_ISR *****************
 13502 ;; Defined at:
 13503 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 13504 ;; Parameters:    Size  Location     Type
 13505 ;;		None
 13506 ;; Auto vars:     Size  Location     Type
 13507 ;;		None
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  1    wreg      void 
 13510 ;; Registers used:
 13511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;Total ram usage:        3 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    3
 13524 ;; This function calls:
 13525 ;;		_do_I2C_DO_ACK
 13526 ;;		_do_I2C_DO_ADDRESS_NACK
 13527 ;;		_do_I2C_DO_NACK_RESTART
 13528 ;;		_do_I2C_DO_NACK_STOP
 13529 ;;		_do_I2C_IDLE
 13530 ;;		_do_I2C_RCEN
 13531 ;;		_do_I2C_RESET
 13532 ;;		_do_I2C_RX
 13533 ;;		_do_I2C_SEND_ADR_READ
 13534 ;;		_do_I2C_SEND_ADR_WRITE
 13535 ;;		_do_I2C_SEND_RESTART
 13536 ;;		_do_I2C_SEND_RESTART_READ
 13537 ;;		_do_I2C_SEND_RESTART_WRITE
 13538 ;;		_do_I2C_SEND_STOP
 13539 ;;		_do_I2C_TX
 13540 ;;		_do_I2C_TX_EMPTY
 13541 ;;		_i2c1_driver_isNACK
 13542 ;;		_mssp1_clearIRQ
 13543 ;; This function is called by:
 13544 ;;		_i2c_open
 13545 ;;		_i2c_poller
 13546 ;;		_INTERRUPT_InterruptManager
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           
 13551                           ;psect for function _i2c_ISR
 13552  0B21                     _i2c_ISR:	
 13553                           
 13554                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13558  0B21  3188  2089  318B   	fcall	_mssp1_clearIRQ
 13559                           
 13560                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 13561  0B24  0023               	movlb	3	; select bank3
 13562  0B25  1DA0               	btfss	_i2c_status^(0+384),3
 13563  0B26  2B31               	goto	i1l5052
 13564  0B27  3189  2122  318B   	fcall	_i2c1_driver_isNACK
 13565  0B2A  1C03               	btfss	3,0
 13566  0B2B  2B31               	goto	i1l5052
 13567                           
 13568                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 13569  0B2C  300F               	movlw	15
 13570  0B2D  00F3               	movwf	??_i2c_ISR
 13571  0B2E  0873               	movf	??_i2c_ISR,w
 13572  0B2F  0023               	movlb	3	; select bank3
 13573  0B30  00A9               	movwf	(_i2c_status^(0+384)+9)
 13574  0B31                     i1l5052:	
 13575                           
 13576                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 13577  0B31  0023               	movlb	3	; select bank3
 13578  0B32  0829               	movf	(_i2c_status^(0+384)+9),w
 13579  0B33  00F3               	movwf	??_i2c_ISR
 13580  0B34  01F4               	clrf	??_i2c_ISR+1
 13581  0B35  35F3               	lslf	??_i2c_ISR,f
 13582  0B36  0DF4               	rlf	??_i2c_ISR+1,f
 13583  0B37  3000               	movlw	low (_fsmStateTable| (0+32768))
 13584  0B38  0773               	addwf	??_i2c_ISR,w
 13585  0B39  0084               	movwf	4
 13586  0B3A  3090               	movlw	high (_fsmStateTable| (0+32768))
 13587  0B3B  3D74               	addwfc	??_i2c_ISR+1,w
 13588  0B3C  0085               	movwf	5
 13589  0B3D  3F01               	moviw [1]fsr0
 13590  0B3E  008A               	movwf	10
 13591  0B3F  3F00               	moviw [0]fsr0
 13592  0B40  000A               	callw
 13593  0B41  318B               	pagesel	$
 13594  0B42  00F5               	movwf	??_i2c_ISR+2
 13595  0B43  0875               	movf	??_i2c_ISR+2,w
 13596  0B44  0023               	movlb	3	; select bank3
 13597  0B45  00A9               	movwf	(_i2c_status^(0+384)+9)
 13598  0B46  0008               	return
 13599  0B47                     __end_of_i2c_ISR:	
 13600                           
 13601                           	psect	text70
 13602  0889                     __ptext70:	
 13603 ;; *************** function _mssp1_clearIRQ *****************
 13604 ;; Defined at:
 13605 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 13606 ;; Parameters:    Size  Location     Type
 13607 ;;		None
 13608 ;; Auto vars:     Size  Location     Type
 13609 ;;		None
 13610 ;; Return value:  Size  Location     Type
 13611 ;;                  1    wreg      void 
 13612 ;; Registers used:
 13613 ;;		None
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;Total ram usage:        0 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; This function calls:
 13626 ;;		Nothing
 13627 ;; This function is called by:
 13628 ;;		_i2c_ISR
 13629 ;;		_i2c_open
 13630 ;;		_i2c_close
 13631 ;; This function uses a non-reentrant model
 13632 ;;
 13633                           
 13634                           
 13635                           ;psect for function _mssp1_clearIRQ
 13636  0889                     _mssp1_clearIRQ:	
 13637                           
 13638                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 13639                           
 13640                           ;incstack = 0
 13641                           ; Regs used in _mssp1_clearIRQ: []
 13642  0889  0020               	movlb	0	; select bank0
 13643  088A  1191               	bcf	17,3	;volatile
 13644  088B  0008               	return
 13645  088C                     __end_of_mssp1_clearIRQ:	
 13646                           
 13647                           	psect	text71
 13648  0DBC                     __ptext71:	
 13649 ;; *************** function _do_I2C_RX *****************
 13650 ;; Defined at:
 13651 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13652 ;; Parameters:    Size  Location     Type
 13653 ;;		None
 13654 ;; Auto vars:     Size  Location     Type
 13655 ;;		None
 13656 ;; Return value:  Size  Location     Type
 13657 ;;                  1    wreg      enum E7120
 13658 ;; Registers used:
 13659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13660 ;; Tracked objects:
 13661 ;;		On entry : 0/0
 13662 ;;		On exit  : 0/0
 13663 ;;		Unchanged: 0/0
 13664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;Total ram usage:        3 bytes
 13670 ;; Hardware stack levels used:    1
 13671 ;; Hardware stack levels required when called:    2
 13672 ;; This function calls:
 13673 ;;		_do_I2C_DO_NACK_RESTART
 13674 ;;		_do_I2C_DO_NACK_STOP
 13675 ;;		_i2c1_driver_sendACK
 13676 ;;		_returnReset
 13677 ;;		_returnStop
 13678 ;;		i1_i2c1_driver_getRXData
 13679 ;; This function is called by:
 13680 ;;		_i2c_ISR
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _do_I2C_RX
 13686  0DBC                     _do_I2C_RX:	
 13687                           
 13688                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13692  0DBC  3188  2083  318D   	fcall	i1_i2c1_driver_getRXData
 13693  0DBF  00F0               	movwf	??_do_I2C_RX
 13694  0DC0  0023               	movlb	3	; select bank3
 13695  0DC1  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 13696  0DC2  0086               	movwf	6
 13697  0DC3  0187               	clrf	7
 13698  0DC4  0870               	movf	??_do_I2C_RX,w
 13699  0DC5  0081               	movwf	1
 13700  0DC6  3001               	movlw	1
 13701  0DC7  00F0               	movwf	??_do_I2C_RX
 13702  0DC8  0870               	movf	??_do_I2C_RX,w
 13703  0DC9  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 13704                           
 13705                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13706  0DCA  3001               	movlw	1
 13707  0DCB  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13708  0DCC  3000               	movlw	0
 13709  0DCD  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13710  0DCE  0823               	movf	(_i2c_status^(0+384)+3),w
 13711  0DCF  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13712  0DD0  1903               	btfsc	3,2
 13713  0DD1  2DD6               	goto	i1l173
 13714                           
 13715                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 13716  0DD2  3188  20AD         	fcall	_i2c1_driver_sendACK
 13717                           
 13718                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13719  0DD4  3005               	movlw	5
 13720  0DD5  0008               	return
 13721  0DD6                     i1l173:	
 13722                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13723                           
 13724                           
 13725                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13726  0DD6  1520               	bsf	_i2c_status^(0+384),2
 13727                           
 13728                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13729  0DD7  2DDE               	goto	i1l4574
 13730  0DD8                     i1l4564:	
 13731                           
 13732                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13733  0DD8  3188  20CD         	fcall	_do_I2C_DO_NACK_RESTART
 13734  0DDA  0008               	return
 13735  0DDB                     i1l4568:	
 13736                           
 13737                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13738  0DDB  3188  20C9         	fcall	_do_I2C_DO_NACK_STOP
 13739  0DDD  0008               	return
 13740  0DDE                     i1l4574:	
 13741  0DDE  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 13742  0DDF  00F0               	movwf	??_do_I2C_RX
 13743  0DE0  0870               	movf	??_do_I2C_RX,w
 13744  0DE1  00F0               	movwf	returnReset@p
 13745  0DE2  300B               	movlw	11
 13746  0DE3  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13747  0DE4  0086               	movwf	6
 13748  0DE5  3001               	movlw	1	; select bank3/4
 13749  0DE6  0087               	movwf	7
 13750  0DE7  3F41               	moviw [1]fsr1
 13751  0DE8  008A               	movwf	10
 13752  0DE9  3F40               	moviw [0]fsr1
 13753  0DEA  000A               	callw
 13754  0DEB  318D               	pagesel	$
 13755  0DEC  00F1               	movwf	??_do_I2C_RX+1
 13756  0DED  01F2               	clrf	??_do_I2C_RX+2
 13757                           
 13758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13759                           ; Switch size 1, requested type "simple"
 13760                           ; Number of cases is 1, Range of values is 0 to 0
 13761                           ; switch strategies available:
 13762                           ; Name         Instructions Cycles
 13763                           ; simple_byte            4     3 (average)
 13764                           ; direct_byte            8     6 (fixed)
 13765                           ; jumptable            260     6 (fixed)
 13766                           ;	Chosen strategy is simple_byte
 13767  0DEE  0872               	movf	??_do_I2C_RX+2,w
 13768  0DEF  3A00               	xorlw	0	; case 0
 13769  0DF0  1903               	skipnz
 13770  0DF1  2DF3               	goto	i1l7292
 13771  0DF2  2DDB               	goto	i1l4568
 13772  0DF3                     i1l7292:	
 13773                           
 13774                           ; Switch size 1, requested type "simple"
 13775                           ; Number of cases is 4, Range of values is 1 to 4
 13776                           ; switch strategies available:
 13777                           ; Name         Instructions Cycles
 13778                           ; simple_byte           13     7 (average)
 13779                           ; direct_byte           17     9 (fixed)
 13780                           ; jumptable            263     9 (fixed)
 13781                           ;	Chosen strategy is simple_byte
 13782  0DF3  0871               	movf	??_do_I2C_RX+1,w
 13783  0DF4  3A01               	xorlw	1	; case 1
 13784  0DF5  1903               	skipnz
 13785  0DF6  2DDB               	goto	i1l4568
 13786  0DF7  3A03               	xorlw	3	; case 2
 13787  0DF8  1903               	skipnz
 13788  0DF9  2DD8               	goto	i1l4564
 13789  0DFA  3A01               	xorlw	1	; case 3
 13790  0DFB  1903               	skipnz
 13791  0DFC  2DD8               	goto	i1l4564
 13792  0DFD  3A07               	xorlw	7	; case 4
 13793  0DFE  1903               	skipnz
 13794  0DFF  2DDB               	goto	i1l4568
 13795  0E00  2DDB               	goto	i1l4568
 13796  0E01  0008               	return
 13797  0E02                     __end_of_do_I2C_RX:	
 13798                           
 13799                           	psect	text72
 13800  0E02                     __ptext72:	
 13801 ;; *************** function _do_I2C_TX *****************
 13802 ;; Defined at:
 13803 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;		None
 13806 ;; Auto vars:     Size  Location     Type
 13807 ;;		None
 13808 ;; Return value:  Size  Location     Type
 13809 ;;                  1    wreg      enum E7120
 13810 ;; Registers used:
 13811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13812 ;; Tracked objects:
 13813 ;;		On entry : 0/0
 13814 ;;		On exit  : 0/0
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;Total ram usage:        3 bytes
 13822 ;; Hardware stack levels used:    1
 13823 ;; Hardware stack levels required when called:    2
 13824 ;; This function calls:
 13825 ;;		_do_I2C_SEND_RESTART_READ
 13826 ;;		_do_I2C_SEND_RESTART_WRITE
 13827 ;;		_do_I2C_SEND_STOP
 13828 ;;		_i2c1_driver_isNACK
 13829 ;;		_returnReset
 13830 ;;		_returnStop
 13831 ;;		i1_i2c1_driver_TXData
 13832 ;; This function is called by:
 13833 ;;		_i2c_ISR
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function _do_I2C_TX
 13839  0E02                     _do_I2C_TX:	
 13840                           
 13841                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13845  0E02  3189  2122  318E   	fcall	_i2c1_driver_isNACK
 13846  0E05  1803               	btfsc	3,0
 13847  0E06  2E11               	goto	i1l4534
 13848  0E07  2E35               	goto	i1l157
 13849  0E08                     i1l4520:	
 13850                           
 13851                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 13852  0E08  3188  20B5         	fcall	_do_I2C_SEND_RESTART_READ
 13853  0E0A  0008               	return
 13854  0E0B                     i1l4524:	
 13855                           
 13856                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 13857  0E0B  3188  20B9         	fcall	_do_I2C_SEND_RESTART_WRITE
 13858  0E0D  0008               	return
 13859  0E0E                     i1l4528:	
 13860                           
 13861                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 13862  0E0E  3188  20C1         	fcall	_do_I2C_SEND_STOP
 13863  0E10  0008               	return
 13864  0E11                     i1l4534:	
 13865  0E11  0023               	movlb	3	; select bank3
 13866  0E12  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 13867  0E13  00F0               	movwf	??_do_I2C_TX
 13868  0E14  0870               	movf	??_do_I2C_TX,w
 13869  0E15  00F0               	movwf	returnReset@p
 13870  0E16  3011               	movlw	17
 13871  0E17  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13872  0E18  0086               	movwf	6
 13873  0E19  3001               	movlw	1	; select bank3/4
 13874  0E1A  0087               	movwf	7
 13875  0E1B  3F41               	moviw [1]fsr1
 13876  0E1C  008A               	movwf	10
 13877  0E1D  3F40               	moviw [0]fsr1
 13878  0E1E  000A               	callw
 13879  0E1F  318E               	pagesel	$
 13880  0E20  00F1               	movwf	??_do_I2C_TX+1
 13881  0E21  01F2               	clrf	??_do_I2C_TX+2
 13882                           
 13883                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13884                           ; Switch size 1, requested type "simple"
 13885                           ; Number of cases is 1, Range of values is 0 to 0
 13886                           ; switch strategies available:
 13887                           ; Name         Instructions Cycles
 13888                           ; simple_byte            4     3 (average)
 13889                           ; direct_byte            8     6 (fixed)
 13890                           ; jumptable            260     6 (fixed)
 13891                           ;	Chosen strategy is simple_byte
 13892  0E22  0872               	movf	??_do_I2C_TX+2,w
 13893  0E23  3A00               	xorlw	0	; case 0
 13894  0E24  1903               	skipnz
 13895  0E25  2E27               	goto	i1l7294
 13896  0E26  2E0E               	goto	i1l4528
 13897  0E27                     i1l7294:	
 13898                           
 13899                           ; Switch size 1, requested type "simple"
 13900                           ; Number of cases is 4, Range of values is 1 to 4
 13901                           ; switch strategies available:
 13902                           ; Name         Instructions Cycles
 13903                           ; simple_byte           13     7 (average)
 13904                           ; direct_byte           17     9 (fixed)
 13905                           ; jumptable            263     9 (fixed)
 13906                           ;	Chosen strategy is simple_byte
 13907  0E27  0871               	movf	??_do_I2C_TX+1,w
 13908  0E28  3A01               	xorlw	1	; case 1
 13909  0E29  1903               	skipnz
 13910  0E2A  2E0E               	goto	i1l4528
 13911  0E2B  3A03               	xorlw	3	; case 2
 13912  0E2C  1903               	skipnz
 13913  0E2D  2E08               	goto	i1l4520
 13914  0E2E  3A01               	xorlw	1	; case 3
 13915  0E2F  1903               	skipnz
 13916  0E30  2E0B               	goto	i1l4524
 13917  0E31  3A07               	xorlw	7	; case 4
 13918  0E32  1903               	skipnz
 13919  0E33  2E0E               	goto	i1l4528
 13920  0E34  2E0E               	goto	i1l4528
 13921  0E35                     i1l157:	
 13922                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 13923                           
 13924                           
 13925                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 13926  0E35  0023               	movlb	3	; select bank3
 13927  0E36  11A0               	bcf	_i2c_status^(0+384),3
 13928                           
 13929                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 13930  0E37  3002               	movlw	2
 13931  0E38  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13932  0E39  0086               	movwf	6
 13933  0E3A  3001               	movlw	1	; select bank3/4
 13934  0E3B  0087               	movwf	7
 13935  0E3C  3F40               	moviw [0]fsr1
 13936  0E3D  0084               	movwf	4
 13937  0E3E  0185               	clrf	5
 13938  0E3F  0A81               	incf	1,f
 13939  0E40  0800               	movf	0,w
 13940  0E41  3188  20DD  318E   	fcall	i1_i2c1_driver_TXData
 13941                           
 13942                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 13943  0E44  3001               	movlw	1
 13944  0E45  0023               	movlb	3	; select bank3
 13945  0E46  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13946  0E47  3000               	movlw	0
 13947  0E48  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13948  0E49  0823               	movf	(_i2c_status^(0+384)+3),w
 13949  0E4A  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13950  0E4B  1D03               	btfss	3,2
 13951  0E4C  2E4F               	goto	i1l4542
 13952  0E4D  3006               	movlw	6
 13953  0E4E  0008               	return
 13954  0E4F                     i1l4542:	
 13955  0E4F  3003               	movlw	3
 13956  0E50  0008               	return
 13957  0E51                     __end_of_do_I2C_TX:	
 13958                           
 13959                           	psect	text73
 13960  0C35                     __ptext73:	
 13961 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 13962 ;; Defined at:
 13963 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;		None
 13966 ;; Auto vars:     Size  Location     Type
 13967 ;;		None
 13968 ;; Return value:  Size  Location     Type
 13969 ;;                  1    wreg      enum E7120
 13970 ;; Registers used:
 13971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13972 ;; Tracked objects:
 13973 ;;		On entry : 0/0
 13974 ;;		On exit  : 0/0
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;Total ram usage:        3 bytes
 13982 ;; Hardware stack levels used:    1
 13983 ;; Hardware stack levels required when called:    2
 13984 ;; This function calls:
 13985 ;;		_do_I2C_SEND_RESTART
 13986 ;;		_do_I2C_SEND_STOP
 13987 ;;		_returnReset
 13988 ;;		_returnStop
 13989 ;; This function is called by:
 13990 ;;		_i2c_ISR
 13991 ;; This function uses a non-reentrant model
 13992 ;;
 13993                           
 13994                           
 13995                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 13996  0C35                     _do_I2C_DO_ADDRESS_NACK:	
 13997                           
 13998                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 13999                           
 14000                           ;incstack = 0
 14001                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14002  0C35  0023               	movlb	3	; select bank3
 14003  0C36  11A0               	bcf	_i2c_status^(0+384),3
 14004                           
 14005                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14006  0C37  3002               	movlw	2
 14007  0C38  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14008  0C39  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14009  0C3A  00AA               	movwf	(_i2c_status^(0+384)+10)
 14010                           
 14011                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14012  0C3B  2C42               	goto	i1l4508
 14013  0C3C                     i1l4498:	
 14014                           
 14015                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14016  0C3C  3188  20BD         	fcall	_do_I2C_SEND_RESTART
 14017  0C3E  0008               	return
 14018  0C3F                     i1l4502:	
 14019                           
 14020                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14021  0C3F  3188  20C1         	fcall	_do_I2C_SEND_STOP
 14022  0C41  0008               	return
 14023  0C42                     i1l4508:	
 14024  0C42  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 14025  0C43  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14026  0C44  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14027  0C45  00F0               	movwf	returnReset@p
 14028  0C46  300F               	movlw	15
 14029  0C47  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14030  0C48  0086               	movwf	6
 14031  0C49  3001               	movlw	1	; select bank3/4
 14032  0C4A  0087               	movwf	7
 14033  0C4B  3F41               	moviw [1]fsr1
 14034  0C4C  008A               	movwf	10
 14035  0C4D  3F40               	moviw [0]fsr1
 14036  0C4E  000A               	callw
 14037  0C4F  318C               	pagesel	$
 14038  0C50  00F1               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 14039  0C51  01F2               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 14040                           
 14041                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14042                           ; Switch size 1, requested type "simple"
 14043                           ; Number of cases is 1, Range of values is 0 to 0
 14044                           ; switch strategies available:
 14045                           ; Name         Instructions Cycles
 14046                           ; simple_byte            4     3 (average)
 14047                           ; direct_byte            8     6 (fixed)
 14048                           ; jumptable            260     6 (fixed)
 14049                           ;	Chosen strategy is simple_byte
 14050  0C52  0872               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 14051  0C53  3A00               	xorlw	0	; case 0
 14052  0C54  1903               	skipnz
 14053  0C55  2C57               	goto	i1l7296
 14054  0C56  2C3F               	goto	i1l4502
 14055  0C57                     i1l7296:	
 14056                           
 14057                           ; Switch size 1, requested type "simple"
 14058                           ; Number of cases is 2, Range of values is 2 to 3
 14059                           ; switch strategies available:
 14060                           ; Name         Instructions Cycles
 14061                           ; simple_byte            7     4 (average)
 14062                           ; direct_byte           13     9 (fixed)
 14063                           ; jumptable            263     9 (fixed)
 14064                           ;	Chosen strategy is simple_byte
 14065  0C57  0871               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 14066  0C58  3A02               	xorlw	2	; case 2
 14067  0C59  1903               	skipnz
 14068  0C5A  2C3C               	goto	i1l4498
 14069  0C5B  3A01               	xorlw	1	; case 3
 14070  0C5C  1903               	skipnz
 14071  0C5D  2C3C               	goto	i1l4498
 14072  0C5E  2C3F               	goto	i1l4502
 14073  0C5F  0008               	return
 14074  0C60                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 14075                           
 14076                           	psect	text74
 14077  08CD                     __ptext74:	
 14078 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 14079 ;; Defined at:
 14080 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14081 ;; Parameters:    Size  Location     Type
 14082 ;;		None
 14083 ;; Auto vars:     Size  Location     Type
 14084 ;;		None
 14085 ;; Return value:  Size  Location     Type
 14086 ;;                  1    wreg      enum E7120
 14087 ;; Registers used:
 14088 ;;		wreg, status,2, status,0, pclath, cstack
 14089 ;; Tracked objects:
 14090 ;;		On entry : 0/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14098 ;;Total ram usage:        0 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    1
 14101 ;; This function calls:
 14102 ;;		i1_i2c1_driver_sendNACK
 14103 ;; This function is called by:
 14104 ;;		_do_I2C_RX
 14105 ;;		_i2c_ISR
 14106 ;; This function uses a non-reentrant model
 14107 ;;
 14108                           
 14109                           
 14110                           ;psect for function _do_I2C_DO_NACK_RESTART
 14111  08CD                     _do_I2C_DO_NACK_RESTART:	
 14112                           
 14113                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 14114                           
 14115                           ;incstack = 0
 14116                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14117  08CD  3188  20B1         	fcall	i1_i2c1_driver_sendNACK
 14118                           
 14119                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14120  08CF  3009               	movlw	9
 14121  08D0  0008               	return
 14122  08D1                     __end_of_do_I2C_DO_NACK_RESTART:	
 14123                           
 14124                           	psect	text75
 14125  08C9                     __ptext75:	
 14126 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 14127 ;; Defined at:
 14128 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14129 ;; Parameters:    Size  Location     Type
 14130 ;;		None
 14131 ;; Auto vars:     Size  Location     Type
 14132 ;;		None
 14133 ;; Return value:  Size  Location     Type
 14134 ;;                  1    wreg      enum E7120
 14135 ;; Registers used:
 14136 ;;		wreg, status,2, status,0, pclath, cstack
 14137 ;; Tracked objects:
 14138 ;;		On entry : 0/0
 14139 ;;		On exit  : 0/0
 14140 ;;		Unchanged: 0/0
 14141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;Total ram usage:        0 bytes
 14147 ;; Hardware stack levels used:    1
 14148 ;; Hardware stack levels required when called:    1
 14149 ;; This function calls:
 14150 ;;		i1_i2c1_driver_sendNACK
 14151 ;; This function is called by:
 14152 ;;		_do_I2C_RX
 14153 ;;		_i2c_ISR
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           
 14158                           ;psect for function _do_I2C_DO_NACK_STOP
 14159  08C9                     _do_I2C_DO_NACK_STOP:	
 14160                           
 14161                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 14162                           
 14163                           ;incstack = 0
 14164                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14165  08C9  3188  20B1         	fcall	i1_i2c1_driver_sendNACK
 14166                           
 14167                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14168  08CB  300A               	movlw	10
 14169  08CC  0008               	return
 14170  08CD                     __end_of_do_I2C_DO_NACK_STOP:	
 14171                           
 14172                           	psect	text76
 14173  08C5                     __ptext76:	
 14174 ;; *************** function _do_I2C_DO_ACK *****************
 14175 ;; Defined at:
 14176 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14177 ;; Parameters:    Size  Location     Type
 14178 ;;		None
 14179 ;; Auto vars:     Size  Location     Type
 14180 ;;		None
 14181 ;; Return value:  Size  Location     Type
 14182 ;;                  1    wreg      enum E7120
 14183 ;; Registers used:
 14184 ;;		wreg, status,2, status,0, pclath, cstack
 14185 ;; Tracked objects:
 14186 ;;		On entry : 0/0
 14187 ;;		On exit  : 0/0
 14188 ;;		Unchanged: 0/0
 14189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;Total ram usage:        0 bytes
 14195 ;; Hardware stack levels used:    1
 14196 ;; Hardware stack levels required when called:    1
 14197 ;; This function calls:
 14198 ;;		_i2c1_driver_sendACK
 14199 ;; This function is called by:
 14200 ;;		_i2c_ISR
 14201 ;; This function uses a non-reentrant model
 14202 ;;
 14203                           
 14204                           
 14205                           ;psect for function _do_I2C_DO_ACK
 14206  08C5                     _do_I2C_DO_ACK:	
 14207                           
 14208                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 14209                           
 14210                           ;incstack = 0
 14211                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 14212  08C5  3188  20AD         	fcall	_i2c1_driver_sendACK
 14213                           
 14214                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 14215  08C7  3005               	movlw	5
 14216  08C8  0008               	return
 14217  08C9                     __end_of_do_I2C_DO_ACK:	
 14218                           
 14219                           	psect	text77
 14220  08E7                     __ptext77:	
 14221 ;; *************** function _do_I2C_RCEN *****************
 14222 ;; Defined at:
 14223 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 14224 ;; Parameters:    Size  Location     Type
 14225 ;;		None
 14226 ;; Auto vars:     Size  Location     Type
 14227 ;;		None
 14228 ;; Return value:  Size  Location     Type
 14229 ;;                  1    wreg      enum E7120
 14230 ;; Registers used:
 14231 ;;		wreg, status,2, status,0, pclath, cstack
 14232 ;; Tracked objects:
 14233 ;;		On entry : 0/0
 14234 ;;		On exit  : 0/0
 14235 ;;		Unchanged: 0/0
 14236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;Total ram usage:        0 bytes
 14242 ;; Hardware stack levels used:    1
 14243 ;; Hardware stack levels required when called:    1
 14244 ;; This function calls:
 14245 ;;		i1_i2c1_driver_startRX
 14246 ;; This function is called by:
 14247 ;;		_i2c_ISR
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           
 14252                           ;psect for function _do_I2C_RCEN
 14253  08E7                     _do_I2C_RCEN:	
 14254                           
 14255                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 14256                           
 14257                           ;incstack = 0
 14258                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 14259  08E7  0023               	movlb	3	; select bank3
 14260  08E8  11A0               	bcf	_i2c_status^(0+384),3
 14261                           
 14262                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 14263  08E9  3188  2080         	fcall	i1_i2c1_driver_startRX
 14264                           
 14265                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 14266  08EB  3004               	movlw	4
 14267  08EC  0008               	return
 14268  08ED                     __end_of_do_I2C_RCEN:	
 14269                           
 14270                           	psect	text78
 14271  0906                     __ptext78:	
 14272 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 14273 ;; Defined at:
 14274 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 14275 ;; Parameters:    Size  Location     Type
 14276 ;;		None
 14277 ;; Auto vars:     Size  Location     Type
 14278 ;;		None
 14279 ;; Return value:  Size  Location     Type
 14280 ;;                  1    wreg      enum E7120
 14281 ;; Registers used:
 14282 ;;		wreg, status,2, status,0, pclath, cstack
 14283 ;; Tracked objects:
 14284 ;;		On entry : 0/0
 14285 ;;		On exit  : 0/0
 14286 ;;		Unchanged: 0/0
 14287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14292 ;;Total ram usage:        0 bytes
 14293 ;; Hardware stack levels used:    1
 14294 ;; Hardware stack levels required when called:    1
 14295 ;; This function calls:
 14296 ;;		i1_i2c1_driver_TXData
 14297 ;; This function is called by:
 14298 ;;		_i2c_ISR
 14299 ;; This function uses a non-reentrant model
 14300 ;;
 14301                           
 14302                           
 14303                           ;psect for function _do_I2C_SEND_ADR_WRITE
 14304  0906                     _do_I2C_SEND_ADR_WRITE:	
 14305                           
 14306                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 14307                           
 14308                           ;incstack = 0
 14309                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14310  0906  0023               	movlb	3	; select bank3
 14311  0907  15A0               	bsf	_i2c_status^(0+384),3
 14312                           
 14313                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 14314  0908  3521               	lslf	(_i2c_status^(0+384)+1),w
 14315  0909  3188  20DD         	fcall	i1_i2c1_driver_TXData
 14316                           
 14317                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 14318  090B  3003               	movlw	3
 14319  090C  0008               	return
 14320  090D                     __end_of_do_I2C_SEND_ADR_WRITE:	
 14321                           
 14322                           	psect	text79
 14323  092A                     __ptext79:	
 14324 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 14325 ;; Defined at:
 14326 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 14327 ;; Parameters:    Size  Location     Type
 14328 ;;		None
 14329 ;; Auto vars:     Size  Location     Type
 14330 ;;		None
 14331 ;; Return value:  Size  Location     Type
 14332 ;;                  1    wreg      enum E7120
 14333 ;; Registers used:
 14334 ;;		wreg, status,2, status,0, pclath, cstack
 14335 ;; Tracked objects:
 14336 ;;		On entry : 0/0
 14337 ;;		On exit  : 0/0
 14338 ;;		Unchanged: 0/0
 14339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;Total ram usage:        0 bytes
 14345 ;; Hardware stack levels used:    1
 14346 ;; Hardware stack levels required when called:    1
 14347 ;; This function calls:
 14348 ;;		i1_i2c1_driver_TXData
 14349 ;; This function is called by:
 14350 ;;		_i2c_ISR
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           
 14355                           ;psect for function _do_I2C_SEND_ADR_READ
 14356  092A                     _do_I2C_SEND_ADR_READ:	
 14357                           
 14358                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 14359                           
 14360                           ;incstack = 0
 14361                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 14362  092A  0023               	movlb	3	; select bank3
 14363  092B  15A0               	bsf	_i2c_status^(0+384),3
 14364                           
 14365                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 14366  092C  1403               	setc
 14367  092D  0D21               	rlf	(_i2c_status^(0+384)+1),w
 14368  092E  3188  20DD         	fcall	i1_i2c1_driver_TXData
 14369                           
 14370                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 14371  0930  3005               	movlw	5
 14372  0931  0008               	return
 14373  0932                     __end_of_do_I2C_SEND_ADR_READ:	
 14374                           
 14375                           	psect	text80
 14376  08C1                     __ptext80:	
 14377 ;; *************** function _do_I2C_SEND_STOP *****************
 14378 ;; Defined at:
 14379 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;		None
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;		None
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      enum E7120
 14386 ;; Registers used:
 14387 ;;		wreg, status,2, status,0, pclath, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;Total ram usage:        0 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    1
 14400 ;; This function calls:
 14401 ;;		i1_i2c1_driver_stop
 14402 ;; This function is called by:
 14403 ;;		_do_I2C_DO_ADDRESS_NACK
 14404 ;;		_do_I2C_TX
 14405 ;;		_do_I2C_TX_EMPTY
 14406 ;;		_i2c_ISR
 14407 ;; This function uses a non-reentrant model
 14408 ;;
 14409                           
 14410                           
 14411                           ;psect for function _do_I2C_SEND_STOP
 14412  08C1                     _do_I2C_SEND_STOP:	
 14413                           
 14414                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 14415                           
 14416                           ;incstack = 0
 14417                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 14418  08C1  3188  207D         	fcall	i1_i2c1_driver_stop
 14419                           
 14420                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 14421  08C3  3000               	movlw	0
 14422  08C4  0008               	return
 14423  08C5                     __end_of_do_I2C_SEND_STOP:	
 14424                           
 14425                           	psect	text81
 14426  08BD                     __ptext81:	
 14427 ;; *************** function _do_I2C_SEND_RESTART *****************
 14428 ;; Defined at:
 14429 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;		None
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;		None
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      enum E7120
 14436 ;; Registers used:
 14437 ;;		wreg, status,2, status,0, pclath, cstack
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        0 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    1
 14450 ;; This function calls:
 14451 ;;		i1_i2c1_driver_restart
 14452 ;; This function is called by:
 14453 ;;		_do_I2C_DO_ADDRESS_NACK
 14454 ;;		_do_I2C_TX_EMPTY
 14455 ;;		_i2c_ISR
 14456 ;; This function uses a non-reentrant model
 14457 ;;
 14458                           
 14459                           
 14460                           ;psect for function _do_I2C_SEND_RESTART
 14461  08BD                     _do_I2C_SEND_RESTART:	
 14462                           
 14463                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 14464                           
 14465                           ;incstack = 0
 14466                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14467  08BD  3188  207A         	fcall	i1_i2c1_driver_restart
 14468                           
 14469                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 14470  08BF  3001               	movlw	1
 14471  08C0  0008               	return
 14472  08C1                     __end_of_do_I2C_SEND_RESTART:	
 14473                           
 14474                           	psect	text82
 14475  08B9                     __ptext82:	
 14476 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 14477 ;; Defined at:
 14478 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;		None
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;		None
 14483 ;; Return value:  Size  Location     Type
 14484 ;;                  1    wreg      enum E7120
 14485 ;; Registers used:
 14486 ;;		wreg, status,2, status,0, pclath, cstack
 14487 ;; Tracked objects:
 14488 ;;		On entry : 0/0
 14489 ;;		On exit  : 0/0
 14490 ;;		Unchanged: 0/0
 14491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;Total ram usage:        0 bytes
 14497 ;; Hardware stack levels used:    1
 14498 ;; Hardware stack levels required when called:    1
 14499 ;; This function calls:
 14500 ;;		i1_i2c1_driver_restart
 14501 ;; This function is called by:
 14502 ;;		_do_I2C_TX
 14503 ;;		_i2c_ISR
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           
 14508                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 14509  08B9                     _do_I2C_SEND_RESTART_WRITE:	
 14510                           
 14511                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 14512                           
 14513                           ;incstack = 0
 14514                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14515  08B9  3188  207A         	fcall	i1_i2c1_driver_restart
 14516                           
 14517                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 14518  08BB  3002               	movlw	2
 14519  08BC  0008               	return
 14520  08BD                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 14521                           
 14522                           	psect	text83
 14523  08B5                     __ptext83:	
 14524 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 14525 ;; Defined at:
 14526 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 14527 ;; Parameters:    Size  Location     Type
 14528 ;;		None
 14529 ;; Auto vars:     Size  Location     Type
 14530 ;;		None
 14531 ;; Return value:  Size  Location     Type
 14532 ;;                  1    wreg      enum E7120
 14533 ;; Registers used:
 14534 ;;		wreg, status,2, status,0, pclath, cstack
 14535 ;; Tracked objects:
 14536 ;;		On entry : 0/0
 14537 ;;		On exit  : 0/0
 14538 ;;		Unchanged: 0/0
 14539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14544 ;;Total ram usage:        0 bytes
 14545 ;; Hardware stack levels used:    1
 14546 ;; Hardware stack levels required when called:    1
 14547 ;; This function calls:
 14548 ;;		i1_i2c1_driver_restart
 14549 ;; This function is called by:
 14550 ;;		_do_I2C_TX
 14551 ;;		_i2c_ISR
 14552 ;; This function uses a non-reentrant model
 14553 ;;
 14554                           
 14555                           
 14556                           ;psect for function _do_I2C_SEND_RESTART_READ
 14557  08B5                     _do_I2C_SEND_RESTART_READ:	
 14558                           
 14559                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 14560                           
 14561                           ;incstack = 0
 14562                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 14563  08B5  3188  207A         	fcall	i1_i2c1_driver_restart
 14564                           
 14565                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 14566  08B7  3001               	movlw	1
 14567  08B8  0008               	return
 14568  08B9                     __end_of_do_I2C_SEND_RESTART_READ:	
 14569                           
 14570                           	psect	text84
 14571  08E2                     __ptext84:	
 14572 ;; *************** function _do_I2C_IDLE *****************
 14573 ;; Defined at:
 14574 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 14575 ;; Parameters:    Size  Location     Type
 14576 ;;		None
 14577 ;; Auto vars:     Size  Location     Type
 14578 ;;		None
 14579 ;; Return value:  Size  Location     Type
 14580 ;;                  1    wreg      enum E7120
 14581 ;; Registers used:
 14582 ;;		wreg, status,2
 14583 ;; Tracked objects:
 14584 ;;		On entry : 0/0
 14585 ;;		On exit  : 0/0
 14586 ;;		Unchanged: 0/0
 14587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;Total ram usage:        0 bytes
 14593 ;; Hardware stack levels used:    1
 14594 ;; This function calls:
 14595 ;;		Nothing
 14596 ;; This function is called by:
 14597 ;;		_i2c_ISR
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           
 14602                           ;psect for function _do_I2C_IDLE
 14603  08E2                     _do_I2C_IDLE:	
 14604                           
 14605                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14606                           
 14607                           ;incstack = 0
 14608                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 14609  08E2  0023               	movlb	3	; select bank3
 14610  08E3  1020               	bcf	_i2c_status^(0+384),0
 14611                           
 14612                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14613  08E4  01AA               	clrf	(_i2c_status^(0+384)+10)
 14614                           
 14615                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14616  08E5  300E               	movlw	14
 14617  08E6  0008               	return
 14618  08E7                     __end_of_do_I2C_IDLE:	
 14619                           
 14620                           	psect	text85
 14621  08FF                     __ptext85:	
 14622 ;; *************** function _do_I2C_RESET *****************
 14623 ;; Defined at:
 14624 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;		None
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;		None
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  1    wreg      enum E7120
 14631 ;; Registers used:
 14632 ;;		wreg, status,2, status,0, pclath, cstack
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;Total ram usage:        0 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    1
 14645 ;; This function calls:
 14646 ;;		_i2c1_driver_resetBus
 14647 ;; This function is called by:
 14648 ;;		_i2c_ISR
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           
 14653                           ;psect for function _do_I2C_RESET
 14654  08FF                     _do_I2C_RESET:	
 14655                           
 14656                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 14657                           
 14658                           ;incstack = 0
 14659                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14660  08FF  3188  2075         	fcall	_i2c1_driver_resetBus
 14661                           
 14662                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14663  0901  0023               	movlb	3	; select bank3
 14664  0902  1020               	bcf	_i2c_status^(0+384),0
 14665                           
 14666                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14667  0903  01AA               	clrf	(_i2c_status^(0+384)+10)
 14668                           
 14669                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14670  0904  300E               	movlw	14
 14671  0905  0008               	return
 14672  0906                     __end_of_do_I2C_RESET:	
 14673                           
 14674                           	psect	text86
 14675  0C8B                     __ptext86:	
 14676 ;; *************** function _do_I2C_TX_EMPTY *****************
 14677 ;; Defined at:
 14678 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14679 ;; Parameters:    Size  Location     Type
 14680 ;;		None
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;		None
 14683 ;; Return value:  Size  Location     Type
 14684 ;;                  1    wreg      enum E7120
 14685 ;; Registers used:
 14686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14687 ;; Tracked objects:
 14688 ;;		On entry : 0/0
 14689 ;;		On exit  : 0/0
 14690 ;;		Unchanged: 0/0
 14691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14694 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14695 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14696 ;;Total ram usage:        3 bytes
 14697 ;; Hardware stack levels used:    1
 14698 ;; Hardware stack levels required when called:    2
 14699 ;; This function calls:
 14700 ;;		_do_I2C_SEND_RESTART
 14701 ;;		_do_I2C_SEND_STOP
 14702 ;;		_mssp1_setIRQ
 14703 ;;		_returnReset
 14704 ;;		_returnStop
 14705 ;; This function is called by:
 14706 ;;		_i2c_ISR
 14707 ;; This function uses a non-reentrant model
 14708 ;;
 14709                           
 14710                           
 14711                           ;psect for function _do_I2C_TX_EMPTY
 14712  0C8B                     _do_I2C_TX_EMPTY:	
 14713                           
 14714                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 14715                           
 14716                           ;incstack = 0
 14717                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14718  0C8B  0023               	movlb	3	; select bank3
 14719  0C8C  1520               	bsf	_i2c_status^(0+384),2
 14720                           
 14721                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14722  0C8D  2C98               	goto	i1l4600
 14723  0C8E                     i1l4584:	
 14724                           
 14725                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 14726  0C8E  3188  20BD         	fcall	_do_I2C_SEND_RESTART
 14727  0C90  0008               	return
 14728  0C91                     i1l4588:	
 14729                           
 14730                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 14731  0C91  3188  2086         	fcall	_mssp1_setIRQ
 14732                           
 14733                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 14734  0C93  3003               	movlw	3
 14735  0C94  0008               	return
 14736  0C95                     i1l4594:	
 14737                           
 14738                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 14739  0C95  3188  20C1         	fcall	_do_I2C_SEND_STOP
 14740  0C97  0008               	return
 14741  0C98                     i1l4600:	
 14742  0C98  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14743  0C99  00F0               	movwf	??_do_I2C_TX_EMPTY
 14744  0C9A  0870               	movf	??_do_I2C_TX_EMPTY,w
 14745  0C9B  00F0               	movwf	returnReset@p
 14746  0C9C  300B               	movlw	11
 14747  0C9D  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14748  0C9E  0086               	movwf	6
 14749  0C9F  3001               	movlw	1	; select bank3/4
 14750  0CA0  0087               	movwf	7
 14751  0CA1  3F41               	moviw [1]fsr1
 14752  0CA2  008A               	movwf	10
 14753  0CA3  3F40               	moviw [0]fsr1
 14754  0CA4  000A               	callw
 14755  0CA5  318C               	pagesel	$
 14756  0CA6  00F1               	movwf	??_do_I2C_TX_EMPTY+1
 14757  0CA7  01F2               	clrf	??_do_I2C_TX_EMPTY+2
 14758                           
 14759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14760                           ; Switch size 1, requested type "simple"
 14761                           ; Number of cases is 1, Range of values is 0 to 0
 14762                           ; switch strategies available:
 14763                           ; Name         Instructions Cycles
 14764                           ; simple_byte            4     3 (average)
 14765                           ; direct_byte            8     6 (fixed)
 14766                           ; jumptable            260     6 (fixed)
 14767                           ;	Chosen strategy is simple_byte
 14768  0CA8  0872               	movf	??_do_I2C_TX_EMPTY+2,w
 14769  0CA9  3A00               	xorlw	0	; case 0
 14770  0CAA  1903               	skipnz
 14771  0CAB  2CAD               	goto	i1l7298
 14772  0CAC  2C95               	goto	i1l4594
 14773  0CAD                     i1l7298:	
 14774                           
 14775                           ; Switch size 1, requested type "simple"
 14776                           ; Number of cases is 4, Range of values is 1 to 4
 14777                           ; switch strategies available:
 14778                           ; Name         Instructions Cycles
 14779                           ; simple_byte           13     7 (average)
 14780                           ; direct_byte           17     9 (fixed)
 14781                           ; jumptable            263     9 (fixed)
 14782                           ;	Chosen strategy is simple_byte
 14783  0CAD  0871               	movf	??_do_I2C_TX_EMPTY+1,w
 14784  0CAE  3A01               	xorlw	1	; case 1
 14785  0CAF  1903               	skipnz
 14786  0CB0  2C95               	goto	i1l4594
 14787  0CB1  3A03               	xorlw	3	; case 2
 14788  0CB2  1903               	skipnz
 14789  0CB3  2C8E               	goto	i1l4584
 14790  0CB4  3A01               	xorlw	1	; case 3
 14791  0CB5  1903               	skipnz
 14792  0CB6  2C8E               	goto	i1l4584
 14793  0CB7  3A07               	xorlw	7	; case 4
 14794  0CB8  1903               	skipnz
 14795  0CB9  2C91               	goto	i1l4588
 14796  0CBA  2C95               	goto	i1l4594
 14797  0CBB  0008               	return
 14798  0CBC                     __end_of_do_I2C_TX_EMPTY:	
 14799                           
 14800                           	psect	text87
 14801  0886                     __ptext87:	
 14802 ;; *************** function _mssp1_setIRQ *****************
 14803 ;; Defined at:
 14804 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 14805 ;; Parameters:    Size  Location     Type
 14806 ;;		None
 14807 ;; Auto vars:     Size  Location     Type
 14808 ;;		None
 14809 ;; Return value:  Size  Location     Type
 14810 ;;                  1    wreg      void 
 14811 ;; Registers used:
 14812 ;;		None
 14813 ;; Tracked objects:
 14814 ;;		On entry : 0/0
 14815 ;;		On exit  : 0/0
 14816 ;;		Unchanged: 0/0
 14817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;Total ram usage:        0 bytes
 14823 ;; Hardware stack levels used:    1
 14824 ;; This function calls:
 14825 ;;		Nothing
 14826 ;; This function is called by:
 14827 ;;		_do_I2C_TX_EMPTY
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           
 14832                           ;psect for function _mssp1_setIRQ
 14833  0886                     _mssp1_setIRQ:	
 14834                           
 14835                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 14836                           
 14837                           ;incstack = 0
 14838                           ; Regs used in _mssp1_setIRQ: []
 14839  0886  0020               	movlb	0	; select bank0
 14840  0887  1591               	bsf	17,3	;volatile
 14841  0888  0008               	return
 14842  0889                     __end_of_mssp1_setIRQ:	
 14843                           
 14844                           	psect	text88
 14845  0922                     __ptext88:	
 14846 ;; *************** function _i2c1_driver_isNACK *****************
 14847 ;; Defined at:
 14848 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 14849 ;; Parameters:    Size  Location     Type
 14850 ;;		None
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;		None
 14853 ;; Return value:  Size  Location     Type
 14854 ;;		None               void
 14855 ;; Registers used:
 14856 ;;		wreg, status,2, status,0
 14857 ;; Tracked objects:
 14858 ;;		On entry : 0/0
 14859 ;;		On exit  : 0/0
 14860 ;;		Unchanged: 0/0
 14861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;Total ram usage:        1 bytes
 14867 ;; Hardware stack levels used:    1
 14868 ;; This function calls:
 14869 ;;		Nothing
 14870 ;; This function is called by:
 14871 ;;		_do_I2C_TX
 14872 ;;		_i2c_ISR
 14873 ;; This function uses a non-reentrant model
 14874 ;;
 14875                           
 14876                           
 14877                           ;psect for function _i2c1_driver_isNACK
 14878  0922                     _i2c1_driver_isNACK:	
 14879                           
 14880                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 14881                           
 14882                           ;incstack = 0
 14883                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 14884  0922  0024               	movlb	4	; select bank4
 14885  0923  0E16               	swapf	22,w	;volatile
 14886  0924  0C89               	rrf	9,f
 14887  0925  0C89               	rrf	9,f
 14888  0926  3901               	andlw	1
 14889  0927  00F0               	movwf	??_i2c1_driver_isNACK
 14890  0928  0C70               	rrf	??_i2c1_driver_isNACK,w
 14891  0929  0008               	return
 14892  092A                     __end_of_i2c1_driver_isNACK:	
 14893                           
 14894                           	psect	text89
 14895  08DD                     __ptext89:	
 14896 ;; *************** function i1_i2c1_driver_TXData *****************
 14897 ;; Defined at:
 14898 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;  d               1    wreg     unsigned char 
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;  d               1    0[COMMON] unsigned char 
 14903 ;; Return value:  Size  Location     Type
 14904 ;;                  1    wreg      void 
 14905 ;; Registers used:
 14906 ;;		wreg
 14907 ;; Tracked objects:
 14908 ;;		On entry : 0/0
 14909 ;;		On exit  : 0/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;Total ram usage:        1 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; This function calls:
 14919 ;;		Nothing
 14920 ;; This function is called by:
 14921 ;;		_do_I2C_SEND_ADR_READ
 14922 ;;		_do_I2C_SEND_ADR_WRITE
 14923 ;;		_do_I2C_TX
 14924 ;; This function uses a non-reentrant model
 14925 ;;
 14926                           
 14927                           
 14928                           ;psect for function i1_i2c1_driver_TXData
 14929  08DD                     i1_i2c1_driver_TXData:	
 14930                           
 14931                           ;incstack = 0
 14932                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 14933                           ;i1i2c1_driver_TXData@d stored from wreg
 14934  08DD  00F0               	movwf	i1i2c1_driver_TXData@d
 14935                           
 14936                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 14937  08DE  0870               	movf	i1i2c1_driver_TXData@d,w
 14938  08DF  0024               	movlb	4	; select bank4
 14939  08E0  0091               	movwf	17	;volatile
 14940  08E1  0008               	return
 14941  08E2                     __end_ofi1_i2c1_driver_TXData:	
 14942                           
 14943                           	psect	text90
 14944  0883                     __ptext90:	
 14945 ;; *************** function i1_i2c1_driver_getRXData *****************
 14946 ;; Defined at:
 14947 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 14948 ;; Parameters:    Size  Location     Type
 14949 ;;		None
 14950 ;; Auto vars:     Size  Location     Type
 14951 ;;		None
 14952 ;; Return value:  Size  Location     Type
 14953 ;;                  1    wreg      unsigned char 
 14954 ;; Registers used:
 14955 ;;		wreg
 14956 ;; Tracked objects:
 14957 ;;		On entry : 0/0
 14958 ;;		On exit  : 0/0
 14959 ;;		Unchanged: 0/0
 14960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;Total ram usage:        0 bytes
 14966 ;; Hardware stack levels used:    1
 14967 ;; This function calls:
 14968 ;;		Nothing
 14969 ;; This function is called by:
 14970 ;;		_do_I2C_RX
 14971 ;; This function uses a non-reentrant model
 14972 ;;
 14973                           
 14974                           
 14975                           ;psect for function i1_i2c1_driver_getRXData
 14976  0883                     i1_i2c1_driver_getRXData:	
 14977                           
 14978                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 14979                           
 14980                           ;incstack = 0
 14981                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 14982  0883  0024               	movlb	4	; select bank4
 14983  0884  0811               	movf	17,w	;volatile
 14984  0885  0008               	return
 14985  0886                     __end_ofi1_i2c1_driver_getRXData:	
 14986                           
 14987                           	psect	text91
 14988  08B1                     __ptext91:	
 14989 ;; *************** function i1_i2c1_driver_sendNACK *****************
 14990 ;; Defined at:
 14991 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 14992 ;; Parameters:    Size  Location     Type
 14993 ;;		None
 14994 ;; Auto vars:     Size  Location     Type
 14995 ;;		None
 14996 ;; Return value:  Size  Location     Type
 14997 ;;                  1    wreg      void 
 14998 ;; Registers used:
 14999 ;;		None
 15000 ;; Tracked objects:
 15001 ;;		On entry : 0/0
 15002 ;;		On exit  : 0/0
 15003 ;;		Unchanged: 0/0
 15004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;Total ram usage:        0 bytes
 15010 ;; Hardware stack levels used:    1
 15011 ;; This function calls:
 15012 ;;		Nothing
 15013 ;; This function is called by:
 15014 ;;		_do_I2C_DO_NACK_STOP
 15015 ;;		_do_I2C_DO_NACK_RESTART
 15016 ;; This function uses a non-reentrant model
 15017 ;;
 15018                           
 15019                           
 15020                           ;psect for function i1_i2c1_driver_sendNACK
 15021  08B1                     i1_i2c1_driver_sendNACK:	
 15022                           
 15023                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 15024                           
 15025                           ;incstack = 0
 15026                           ; Regs used in i1_i2c1_driver_sendNACK: []
 15027  08B1  0024               	movlb	4	; select bank4
 15028  08B2  1696               	bsf	22,5	;volatile
 15029                           
 15030                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 15031  08B3  1616               	bsf	22,4	;volatile
 15032  08B4  0008               	return
 15033  08B5                     __end_ofi1_i2c1_driver_sendNACK:	
 15034                           
 15035                           	psect	text92
 15036  0875                     __ptext92:	
 15037 ;; *************** function _i2c1_driver_resetBus *****************
 15038 ;; Defined at:
 15039 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;		None
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;		None
 15044 ;; Return value:  Size  Location     Type
 15045 ;;                  1    wreg      void 
 15046 ;; Registers used:
 15047 ;;		None
 15048 ;; Tracked objects:
 15049 ;;		On entry : 0/0
 15050 ;;		On exit  : 0/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;Total ram usage:        0 bytes
 15058 ;; Hardware stack levels used:    1
 15059 ;; This function calls:
 15060 ;;		Nothing
 15061 ;; This function is called by:
 15062 ;;		_do_I2C_RESET
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066                           
 15067                           ;psect for function _i2c1_driver_resetBus
 15068  0875                     _i2c1_driver_resetBus:	
 15069                           
 15070                           ;incstack = 0
 15071                           ; Regs used in _i2c1_driver_resetBus: []
 15072  0875  0008               	return
 15073  0876                     __end_of_i2c1_driver_resetBus:	
 15074                           
 15075                           	psect	text93
 15076  0880                     __ptext93:	
 15077 ;; *************** function i1_i2c1_driver_startRX *****************
 15078 ;; Defined at:
 15079 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;		None
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;		None
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		None
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;Total ram usage:        0 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; This function calls:
 15100 ;;		Nothing
 15101 ;; This function is called by:
 15102 ;;		_do_I2C_RCEN
 15103 ;; This function uses a non-reentrant model
 15104 ;;
 15105                           
 15106                           
 15107                           ;psect for function i1_i2c1_driver_startRX
 15108  0880                     i1_i2c1_driver_startRX:	
 15109                           
 15110                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 15111                           
 15112                           ;incstack = 0
 15113                           ; Regs used in i1_i2c1_driver_startRX: []
 15114  0880  0024               	movlb	4	; select bank4
 15115  0881  1596               	bsf	22,3	;volatile
 15116  0882  0008               	return
 15117  0883                     __end_ofi1_i2c1_driver_startRX:	
 15118                           
 15119                           	psect	text94
 15120  0002                     __ptext94:	
 15121 ;; *************** function _returnReset *****************
 15122 ;; Defined at:
 15123 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 15124 ;; Parameters:    Size  Location     Type
 15125 ;;  p               1    0[COMMON] PTR void 
 15126 ;;		 -> NULL(0), 
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;		None
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  1    wreg      enum E6966
 15131 ;; Registers used:
 15132 ;;		wreg
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15138 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;Total ram usage:        1 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; This function calls:
 15145 ;;		Nothing
 15146 ;; This function is called by:
 15147 ;;		_i2c_open
 15148 ;;		_do_I2C_DO_ADDRESS_NACK
 15149 ;;		_do_I2C_TX
 15150 ;;		_do_I2C_RX
 15151 ;;		_do_I2C_TX_EMPTY
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           
 15156                           ;psect for function _returnReset
 15157  0002                     _returnReset:	
 15158                           
 15159                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 15160                           
 15161                           ;incstack = 0
 15162                           ; Regs used in _returnReset: [wreg]
 15163  0002  3005               	movlw	5
 15164  0003  0008               	return
 15165  0004                     __end_of_returnReset:	
 15166                           
 15167                           	psect	text95
 15168  0878                     __ptext95:	
 15169 ;; *************** function _returnStop *****************
 15170 ;; Defined at:
 15171 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 15172 ;; Parameters:    Size  Location     Type
 15173 ;;  p               1    0[COMMON] PTR void 
 15174 ;;		 -> NULL(0), 
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;		None
 15177 ;; Return value:  Size  Location     Type
 15178 ;;                  1    wreg      enum E6966
 15179 ;; Registers used:
 15180 ;;		wreg
 15181 ;; Tracked objects:
 15182 ;;		On entry : 0/0
 15183 ;;		On exit  : 0/0
 15184 ;;		Unchanged: 0/0
 15185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15186 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;Total ram usage:        1 bytes
 15191 ;; Hardware stack levels used:    1
 15192 ;; This function calls:
 15193 ;;		Nothing
 15194 ;; This function is called by:
 15195 ;;		_i2c_open
 15196 ;;		_setCallBack
 15197 ;;		_do_I2C_DO_ADDRESS_NACK
 15198 ;;		_do_I2C_TX
 15199 ;;		_do_I2C_RX
 15200 ;;		_do_I2C_TX_EMPTY
 15201 ;; This function uses a non-reentrant model
 15202 ;;
 15203                           
 15204                           
 15205                           ;psect for function _returnStop
 15206  0878                     _returnStop:	
 15207                           
 15208                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 15209                           
 15210                           ;incstack = 0
 15211                           ; Regs used in _returnStop: [wreg]
 15212  0878  3001               	movlw	1
 15213  0879  0008               	return
 15214  087A                     __end_of_returnStop:	
 15215                           
 15216                           	psect	text96
 15217  087D                     __ptext96:	
 15218 ;; *************** function i1_i2c1_driver_stop *****************
 15219 ;; Defined at:
 15220 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 15221 ;; Parameters:    Size  Location     Type
 15222 ;;		None
 15223 ;; Auto vars:     Size  Location     Type
 15224 ;;		None
 15225 ;; Return value:  Size  Location     Type
 15226 ;;                  1    wreg      void 
 15227 ;; Registers used:
 15228 ;;		None
 15229 ;; Tracked objects:
 15230 ;;		On entry : 0/0
 15231 ;;		On exit  : 0/0
 15232 ;;		Unchanged: 0/0
 15233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;Total ram usage:        0 bytes
 15239 ;; Hardware stack levels used:    1
 15240 ;; This function calls:
 15241 ;;		Nothing
 15242 ;; This function is called by:
 15243 ;;		_do_I2C_SEND_STOP
 15244 ;; This function uses a non-reentrant model
 15245 ;;
 15246                           
 15247                           
 15248                           ;psect for function i1_i2c1_driver_stop
 15249  087D                     i1_i2c1_driver_stop:	
 15250                           
 15251                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 15252                           
 15253                           ;incstack = 0
 15254                           ; Regs used in i1_i2c1_driver_stop: []
 15255  087D  0024               	movlb	4	; select bank4
 15256  087E  1516               	bsf	22,2	;volatile
 15257  087F  0008               	return
 15258  0880                     __end_ofi1_i2c1_driver_stop:	
 15259                           
 15260                           	psect	text97
 15261  087A                     __ptext97:	
 15262 ;; *************** function i1_i2c1_driver_restart *****************
 15263 ;; Defined at:
 15264 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;		None
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;		None
 15269 ;; Return value:  Size  Location     Type
 15270 ;;                  1    wreg      void 
 15271 ;; Registers used:
 15272 ;;		None
 15273 ;; Tracked objects:
 15274 ;;		On entry : 0/0
 15275 ;;		On exit  : 0/0
 15276 ;;		Unchanged: 0/0
 15277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;Total ram usage:        0 bytes
 15283 ;; Hardware stack levels used:    1
 15284 ;; This function calls:
 15285 ;;		Nothing
 15286 ;; This function is called by:
 15287 ;;		_do_I2C_SEND_RESTART_READ
 15288 ;;		_do_I2C_SEND_RESTART_WRITE
 15289 ;;		_do_I2C_SEND_RESTART
 15290 ;; This function uses a non-reentrant model
 15291 ;;
 15292                           
 15293                           
 15294                           ;psect for function i1_i2c1_driver_restart
 15295  087A                     i1_i2c1_driver_restart:	
 15296                           
 15297                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 15298                           
 15299                           ;incstack = 0
 15300                           ; Regs used in i1_i2c1_driver_restart: []
 15301  087A  0024               	movlb	4	; select bank4
 15302  087B  1496               	bsf	22,1	;volatile
 15303  087C  0008               	return
 15304  087D                     __end_ofi1_i2c1_driver_restart:	
 15305                           
 15306                           	psect	text98
 15307  08AD                     __ptext98:	
 15308 ;; *************** function _i2c1_driver_sendACK *****************
 15309 ;; Defined at:
 15310 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		None
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;Total ram usage:        0 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; This function calls:
 15331 ;;		Nothing
 15332 ;; This function is called by:
 15333 ;;		_do_I2C_DO_ACK
 15334 ;;		_do_I2C_RX
 15335 ;;		_I2C_Send_ACK
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           
 15340                           ;psect for function _i2c1_driver_sendACK
 15341  08AD                     _i2c1_driver_sendACK:	
 15342                           
 15343                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 15344                           
 15345                           ;incstack = 0
 15346                           ; Regs used in _i2c1_driver_sendACK: []
 15347  08AD  0024               	movlb	4	; select bank4
 15348  08AE  1296               	bcf	22,5	;volatile
 15349                           
 15350                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 15351  08AF  1616               	bsf	22,4	;volatile
 15352  08B0  0008               	return
 15353  08B1                     __end_of_i2c1_driver_sendACK:	
 15354                           
 15355                           	psect	text99
 15356  0874                     __ptext99:	
 15357 ;; *************** function _PIN_MANAGER_IOC *****************
 15358 ;; Defined at:
 15359 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 15360 ;; Parameters:    Size  Location     Type
 15361 ;;		None
 15362 ;; Auto vars:     Size  Location     Type
 15363 ;;		None
 15364 ;; Return value:  Size  Location     Type
 15365 ;;                  1    wreg      void 
 15366 ;; Registers used:
 15367 ;;		None
 15368 ;; Tracked objects:
 15369 ;;		On entry : 0/0
 15370 ;;		On exit  : 0/0
 15371 ;;		Unchanged: 0/0
 15372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15377 ;;Total ram usage:        0 bytes
 15378 ;; Hardware stack levels used:    1
 15379 ;; This function calls:
 15380 ;;		Nothing
 15381 ;; This function is called by:
 15382 ;;		_INTERRUPT_InterruptManager
 15383 ;; This function uses a non-reentrant model
 15384 ;;
 15385                           
 15386                           
 15387                           ;psect for function _PIN_MANAGER_IOC
 15388  0874                     _PIN_MANAGER_IOC:	
 15389                           
 15390                           ;incstack = 0
 15391                           ; Regs used in _PIN_MANAGER_IOC: []
 15392  0874  0008               	return
 15393  0875                     __end_of_PIN_MANAGER_IOC:	
 15394  007E                     btemp	set	126	;btemp
 15395  007E                     int$flags	set	126
 15396  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        10
    BSS         127
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     60      79
    BANK1            80     67      73
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2415	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _Get_ADC->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   89023
                                             64 BANK1      3     3      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                         _PIR_Sensor
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8932
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1302
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     896
                                              5 BANK0      7     5      2
                 _PWM_Output_Disable
                  _PWM_Output_Enable
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Disable                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _PWM_Output_Disable
     _PWM_Output_Enable
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     43      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 13:17:39 2019

                          returnReset@p 0070                   ?_setGestureExitThresh 0070  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 08BD                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                      _PWM_Output_Disable 0892  
                           __CFG_LVP$ON 0000                                     l532 099A  
                                   l623 0AD2        processGestureData@ud_ratio_first 0031  
                                   l783 0EEC                                     _PR2 001E  
                          __CFG_CPD$OFF 0000                   __end_of_decodeGesture 04CA  
                  __size_of_I2C_ReStart 0003                                     _val 007A  
               __size_of_PMD_Initialize 0008                      I2C_Write_Byte@Byte 0023  
                       _TMR2_Initialize 094A                   __size_of_do_I2C_RESET 0007  
                                   wreg 0009                     ?_PWM_Output_Disable 0070  
                    i1_i2c1_driver_stop 087D                                    l1110 0325  
                                  l1105 02E4                                    l1131 03A9  
                                  l1109 030D                                    l1143 03FA  
                                  l1135 03C6                                    l1063 008A  
                                  l1234 0A92                                    l1090 026E  
                                  l1171 04B9                                    l1155 044D  
                                  l1147 0417                                    l1092 0294  
                                  l1086 0245                                    l1167 049C  
                                  l1159 046A                                    l1098 02C5  
                                  l1398 0AAE                                    l6010 0086  
                                  l6100 028F                                    l6012 00E0  
                                  l6110 02B9                                    l7000 07A4  
                                  l6040 00F7                                    l7002 07B0  
                                  l6210 0412                                    l6122 02DF  
                                  l6026 00FB                                    l6044 0145  
                                  l6206 03F5                                    l6150 0346  
                                  l6118 02C7                                    l6062 01F8  
                                  l7030 0F99                                    l7014 0F56  
                                  l7006 0F43                                    l6224 0448  
                                  l6216 0424                                    l6160 035C  
                                  l6128 0308                                    l6072 021D  
                                  l6064 01FB                                    l6400 06A4  
                                  l7024 0F6F                                    l7016 0F64  
                                  l6242 0497                                    l6234 0477  
                                  l6162 035E                                    l6082 0240  
                                  l6074 0220                                    l6058 01E6  
                                  l7130 0D79                                    l6252 04C6  
                                  l6228 0465                                    l6180 0382  
                                  l6172 0370                                    l6156 0352  
                                  l6068 020B                                    l7028 0F7C  
                                  l7124 0D67                                    l6246 04B4  
                                  l6174 0372                                    l6166 0366  
                                  l6422 0629                                    l6414 0606  
                                  l6406 05F3                                    l6192 03C1  
                                  l6168 0368                                    l6256 04C8  
                                  l6096 0287                                    l6088 0269  
                                  l6440 06A1                                    l6600 0D50  
                                  l6504 09FC                                    l5802 099F  
                                  l6178 037C                                    l6434 0637  
                                  l6514 0BD2                                    l6188 03A4  
                                  l6436 0698                                    l6198 03D3  
                                  l6534 0BAB                                    l6518 0BD4  
                                  l6368 0AD7                                    l5914 0A2B  
                                  l7290 0F85                                    l6554 09D6  
                                  l6618 0B93                                    l6538 0BAD  
                                  l5916 0A37                                    l6388 0ECF  
                                  l5924 0E5D                                    l6636 0C89  
                                  l6900 0FB0                                    l5828 0AA8  
                                  l6396 05EF                                    l6564 09E9  
                                  l5774 0970                                    l6654 0CEC  
                                  l5854 0F06                                    l6582 0D1E  
                                  l6494 0A0F                                    l6750 04DD  
                                  l6736 0912                                    l5768 0A95  
                                  l5944 0E90                                    l5936 0E77  
                                  l5928 0E5F                                    l6672 0B6C  
                                  l5880 0F3D                                    l5872 0F2C  
                                  l5864 0F0E                                    l5848 0EFB  
                                  l5946 0E91                                    l5938 0E84  
                                  l6682 0990                                    l5866 0F1A  
                                  l6754 04DF                                    l5876 0F35  
                                  l5980 07F2                                    l5990 0079  
                                  l5896 09C3                                    l6962 071B  
                                  l6882 0FB2                                    l5994 007B  
                                  l5978 07C3                                    l6980 0757  
                                  l6956 0703                                    l6982 0760  
                                  l6886 0FB4                                    l6968 0733  
                                  l6988 0778                                    STR_1 103D  
                                  STR_2 1030                                    STR_3 1020  
                                  STR_4 1049                 __end_of_PWM1_Initialize 0984  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u5005 0277  
                                  u5115 02D0                                    u5125 02ED  
                                  u5135 02F9                                    u5055 029E  
                                  u5305 0395                                    u4505 0AAF  
                                  u5145 0316                                    u5065 02AC  
                                  u5315 03B2                                    u4515 0AB4  
                                  _PMD0 0911                                    u6205 070D  
                                  u5405 0439                                    u5325 03D0  
                                  u4605 0F2D                                    _PMD1 0912  
                                  _PMD2 0913                                    u6215 0719  
                                  u5415 0456                                    u5175 032E  
                                  _PMD3 0914                                    _PMD4 0915  
                                  u5505 0ED9                                    u6305 078E  
                                  u6225 0725                                    u5425 0474  
                                  _PMD5 0916                                    u6315 079F  
                                  u6235 0731                                    u5355 03E6  
                                  u6245 073D                                    u5365 0403  
                                  u4565 0F11                                    u6325 0F51  
                                  u5605 0BF4                                    u6255 0749  
                                  u6175 06DD                                    u5455 0488  
                                  u5375 0421                                    u4815 0095  
                                  u4735 07CC                                    u5615 0C1D  
                                  u6185 06F5                                    u5465 04A5  
                                  u4585 0F1B                                    u5705 0CFF  
                                  u6507 09A9                                    u6275 076A  
                                  u6195 0701                                    u5475 04C3  
                                  u4595 0F25                                    u4915 01DF  
                                  u4684 0E70                                    u6517 0A20  
                                  u6285 0776                                    u4685 0E6F  
                                  u4925 01F0                                    u5725 0D31  
                                  u4694 0E7C                                    u6295 0782  
                                  u4695 0E7B                                    u4935 0204  
                                  u5575 0632                                    u4945 0215  
                                  u5585 0641                                    u6467 06A8  
                                  u5765 0CCD                                    u6477 06BB  
                  ?_do_I2C_SEND_RESTART 0070                                    u6487 0EA7  
                                  u4975 0231                                    u6497 0EB7  
                                  u4985 024E                                    u4995 025A  
                                  _TMR2 001D                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
     __size_of_do_I2C_SEND_RESTART_READ 0004                     ?i1_i2c1_driver_stop 0070  
             ?_do_I2C_SEND_RESTART_READ 0070                                    _main 0D52  
                                  _name 005C               __size_of_do_I2C_SEND_STOP 0004  
                __size_of_do_I2C_DO_ACK 0004                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                 ??_setGestureIntEnable 002A                        __end_of_I2C_Stop 0800  
                         __CFG_BOREN$ON 0000                 i1_i2c1_driver_getRXData 0883  
                 ?_do_I2C_SEND_ADR_READ 0070                           __CFG_BORV$LOW 0000  
       ??_i2c1_driver_clearBusCollision 0070                                    start 002C  
                       __end_of_Get_ADC 07B3                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                  ??_PWM_Output_Disable 0020                         __end_of_i2c_ISR 0B47  
              ??_do_I2C_DO_NACK_RESTART 0070                            ?_readGesture 004F  
                          _do_I2C_RESET 08FF          __size_of_OSCILLATOR_Initialize 0008  
         __end_of_OSCILLATOR_Initialize 0942                    ??i1_i2c1_driver_stop 0070  
                                 _ADACT 009F                __end_of_i2c1_driver_open 096D  
                                 ?_main 0070                         __end_of___awdiv 0F42  
              __end_of_i2c1_driver_stop 08AD                         ___awdiv@divisor 0026  
                                 _T2CON 001F              __end_of_i2c1_driver_TXData 08F3  
                        __CFG_DEBUG$OFF 0000                                   i1l157 0E35  
                                 i1l173 0DD6                                   i1l253 002A  
                                 i1l245 0010                                   i1l248 001E  
                          ?_setLEDBoost 0070                         ___awdiv@counter 002B  
                          ?_setLEDDrive 0070                          _setGestureGain 0CEE  
                                 _OSCEN 091D                      wireReadDataBlock@j 0030  
                        _setGestureMode 0B47                                   _TRISA 008C  
                                 _TRISB 008D                                   _TRISC 008E  
           __end_of_setProxIntLowThresh 0A11                         __end_of_getMode 0963  
                           ?_PIR_Sensor 0070                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 0875              __end_of_i2c1_driver_isNACK 092A  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 08D5  
                                 _names 0160                        _b_i2c_error_flag 0076  
          __end_of_setProxIntHighThresh 09FE              ?_do_I2C_SEND_RESTART_WRITE 0070  
                                 _state 0078                                   _start 006E  
                 ??_do_I2C_SEND_RESTART 0070                         __end_of_setMode 0EA0  
                     __end_of_I2C_Start 08AA                                   pclath 000A  
               __size_of_mssp1_clearIRQ 0003                    i1_i2c1_driver_TXData 08DD  
          __size_of_setAmbientLightGain 001E                  ?_do_I2C_SEND_ADR_WRITE 0070  
                __size_of_I2C_Send_NACK 0003                                   status 0003  
                                 wtemp0 007E                      __size_of_SPI_Write 0015  
              ?_setLightIntLowThreshold 002A              __end_of_setGestureLEDDrive 0D52  
                 setGestureWaitTime@val 002C                           _fsmStateTable 1000  
                         _gesture_data_ 0220                         __initialization 002E  
                ??_setGestureExitThresh 002A                       _SPI2_Exchange8bit 0992  
            processGestureData@lr_delta 004B                              _i2c_status 01A0  
                          __end_of_main 0D86                       _handleGestureFlag 0077  
            processGestureData@ud_delta 0049                      ?_SPI2_Exchange8bit 0070  
               __end_of_TMR2_Initialize 0952             ?_INTERRUPT_InterruptManager 0070  
                __end_of_setGestureGain 0D20               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0B6E                           _do_I2C_DO_ACK 08C5  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 08D9                 ?_do_I2C_DO_ADDRESS_NACK 0070  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0EF0                    __size_of_enablePower 000E  
                                _ADCON0 009D                                  _ADCON1 009E  
                                _ADRESH 009C                                  _ADRESL 009B  
                                _CCPR1H 0292                                  _CCPR1L 0291  
                      ___awdiv@dividend 0028                      _processGestureData 006B  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
          setProxIntLowThresh@threshold 002B                   ?i1_i2c1_driver_TXData 0070  
                                _RC2PPS 0EA2                                  _RB5PPS 0E9D  
                                _RB6PPS 0E9E                        ?_PWM1_Initialize 0070  
                                _RB7PPS 0E9F                                  _ODCONA 028C  
                                _ODCONB 028D                                  _RC6PPS 0EA6  
                                _ODCONC 028E                                  i1l5052 0B31  
                                i1l4502 0C3F                                  i1l4600 0C98  
                                i1l4520 0E08                                  i1l4508 0C42  
                                i1l4524 0E0B                                  i1l4542 0E4F  
                                i1l4534 0E11                                  i1l4528 0E0E  
                                i1l4564 0DD8                                  i1l4574 0DDE  
                                i1l4584 0C8E                                  i1l4568 0DDB  
                                i1l4594 0C95                                  i1l4498 0C3C  
                                i1l4588 0C91               ??i1_i2c1_driver_getRXData 0070  
                                i1l7292 0DF3                                  i1l7294 0E27  
                                i1l7296 0C57                                  i1l7298 0CAD  
                             ??_Get_ADC 002C                        _wireReadDataByte 0AFD  
                                _OSCFRQ 091F                 ?_resetGestureParameters 0070  
                ??_do_I2C_SEND_ADR_READ 0070                                  _WDTCON 0097  
                             ??_i2c_ISR 0073                     ?_processGestureData 0070  
                     _gesture_lr_delta_ 0066                          __CFG_PWRTE$OFF 0000  
         setProxIntHighThresh@threshold 002B               __end_of_SPI2_Exchange8bit 09A1  
                     _gesture_lr_count_ 0062                     wireReadDataByte@reg 0027  
                 _i2c1_driver_getRXData 089B                     wireReadDataByte@val 0028  
                     _gesture_ud_delta_ 0068             __end_of_do_I2C_DO_NACK_STOP 08CD  
                         _I2C_Read_Byte 096D              __end_of_isGestureAvailable 09C5  
                     _gesture_ud_count_ 0064                     __size_of_PIR_Sensor 0007  
                                ___wmul 0AA5                               ??___awdiv 002A  
 __end_of_i2c1_driver_clearBusCollision 088F  __size_of_i2c1_driver_clearBusCollision 0003  
         _i2c1_driver_clearBusCollision 088C              __end_of_setGestureWaitTime 0B95  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0004  
                                _button 0079                        ___awdiv@quotient 002D  
                        ?_do_I2C_DO_ACK 0070                         ?_setGestureGain 0070  
                         _I2C_Send_NACK 08A1                               ??_getMode 0029  
                       ?_setGestureMode 0070                                  _strlen 0A26  
               ??_setGestureEnterThresh 002A                    ??_processGestureData 002F  
                     __end_of_SPI_Write 0A26             __end_of_i2c1_driver_sendACK 08B1  
                        _PMD_Initialize 0942          __end_of_do_I2C_DO_ADDRESS_NACK 0C60  
                          __pdataCOMMON 007A                               ?_I2C_Stop 0070  
                    Display_Name@length 0028                               ??_setMode 002C  
                       ?_WDT_Initialize 0070             __end_of_i2c1_driver_restart 0898  
                          ?_returnReset 0070                ADC_GetConversion@channel 0023  
                     readGesture@motion 0053             __end_of_i2c1_driver_startRX 08A1  
                      ?_PIN_MANAGER_IOC 0070          __end_of_resetGestureParameters 0A6E  
                     _SYSTEM_Initialize 0A3E                 __end_of__initialization 0067  
                      _do_I2C_SEND_STOP 08C1                      __size_of_do_I2C_RX 0046  
                    __size_of_do_I2C_TX 004F                      ?_SYSTEM_Initialize 0070  
                setGestureWaitTime@time 002B                __size_of_do_I2C_TX_EMPTY 0031  
                            _adcResult2 00E0                          ?_I2C_Read_Byte 0070  
                        __pcstackCOMMON 0070                            __pidataBANK0 0876  
                          __pidataBANK2 0952                     ??_SYSTEM_Initialize 0020  
                 i1i2c1_driver_TXData@d 0070                    _setProxIntHighThresh 09EB  
                        _gesture_state_ 005E                          ?_I2C_Send_NACK 0070  
                      ?_TMR2_Initialize 0070                   i1_i2c1_driver_restart 087A  
                __end_of_PMD_Initialize 094A                   i1_i2c1_driver_startRX 0880  
                  __size_of_readGesture 00F3                   __end_of_handleGesture 0F9C  
     __size_of_i2c1_driver_isBufferFull 0007                              ??_I2C_Stop 0020  
             ?_i2c1_driver_isBufferFull 0070                      _gesture_far_count_ 00E2  
                  __size_of_setLEDBoost 0032                    __size_of_setLEDDrive 0029  
                _do_I2C_DO_NACK_RESTART 08CD                  ??i1_i2c1_driver_TXData 0070  
             __end_of_SYSTEM_Initialize 0A56                       ??_SPI2_Initialize 0020  
                        _mssp1_clearIRQ 0889                              __pbssBANK0 005C  
                            __pbssBANK1 00E0                              __pbssBANK2 0168  
                            __pbssBANK3 01A0                              __pbssBANK4 0220  
                  wireWriteDataByte@reg 0029                    wireWriteDataByte@val 0026  
                   getMode@enable_value 002A                ??i1_i2c1_driver_sendNACK 0070  
                ?_i2c1_driver_getRXData 0070              __size_of_SPI2_Exchange8bit 000F  
          __size_of_i2c_busCollisionISR 0003                              __pmaintext 0D52  
                 __end_of_Display_Clear 09B2                           ??_do_I2C_IDLE 0070  
                         ??_do_I2C_RCEN 0070                 setGestureLEDDrive@drive 002D  
                               ?___wmul 0020                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0070            __size_of_enableGestureSensor 0064  
                            __pintentry 0004                   ?_setProxIntHighThresh 0070  
                               _CCP1CON 0293                 __size_of_I2C_Write_Byte 001C  
                         ??_I2C_ReStart 0020                        _setProximityGain 0C0C  
                           setMode@mode 002F                         ?_PMD_Initialize 0070  
                   _setAmbientLightGain 0ADF                 __size_of_ADC_Initialize 0008  
                 __size_of_Display_Name 0050          ?_i2c1_driver_clearBusCollision 0070  
                               ?_strlen 0020                       ?_i2c1_driver_open 0070  
                     __end_of_do_I2C_RX 0E02                       __end_of_do_I2C_TX 0E51  
                     ?_i2c1_driver_stop 0070                       _wireReadDataBlock 07B3  
                    ??_i2c1_driver_open 0020                      ??_i2c1_driver_stop 0020  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                         ?_mssp1_setIRQ 0070                            ??_PIR_Sensor 0020  
                               _OSCTUNE 091E                    wireReadDataBlock@len 0028  
                  wireReadDataBlock@reg 002F                    wireReadDataBlock@val 0026  
                               _SSP1ADD 0212                                 _SSP2ADD 021A  
                               _SLRCONA 030C                                 _SLRCONB 030D  
                               _SLRCONC 030E                                 _SSP1BUF 0211  
                __end_of_mssp1_clearIRQ 088C                                 _SSP2BUF 0219  
                    ?_wireReadDataBlock 0026                                 _SSP1MSK 0213  
                     SPI_Write@incoming 0022             __end_of_setGestureIntEnable 0C8B  
               ??_do_I2C_SEND_ADR_WRITE 0070         processGestureData@lr_ratio_last 0037  
           ??_do_I2C_SEND_RESTART_WRITE 0070                            readGesture@i 0059  
                               _Get_ADC 06D3                      _i2c1_driver_TXData 08ED  
                  ?_setAmbientLightGain 0070                      _i2c1_driver_i2cISR 00E4  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0B21  
                             _I2C_Start 08A7                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0922  
                __size_of_decodeGesture 0190                     ?_i2c1_driver_TXData 0070  
           __size_of_PWM_Output_Disable 0003                            _Display_Name 0EA0  
                       ??_I2C_Send_NACK 0020                                 ___awdiv 0EF0  
                       __size_of___wmul 001C                      __end_of_PIR_Sensor 0914  
                ?i1_i2c1_driver_restart 0070                       ??_do_I2C_TX_EMPTY 0070  
                   ?_i2c1_driver_isNACK 0070                  ?i1_i2c1_driver_startRX 0070  
              __end_of_wireReadDataByte 0B21                              _initialize 04CA  
                               _getMode 095A        __size_of_setLightIntLowThreshold 0027  
                    _setGestureLEDDrive 0D20                                 __ptext1 04CA  
                               __ptext2 0C0C                                 __ptext3 09FE  
                               __ptext4 09EB                                 __ptext5 0BBC  
                               __ptext6 0B95                                 __ptext7 0BE3  
                               __ptext8 0B6E                                 __ptext9 0D20  
           __size_ofi1_i2c1_driver_stop 0003                     __end_of_do_I2C_IDLE 08E7  
             __end_of_wireReadDataBlock 07FD                     __end_of_do_I2C_RCEN 08ED  
                       __size_of_strlen 0018                   _OSCILLATOR_Initialize 093A  
                             _T2CONbits 001F             __end_of_do_I2C_SEND_RESTART 08C1  
                        ??_mssp1_setIRQ 0070                    ??_i2c1_driver_TXData 0020  
                               _setMode 0E51                ??_PIN_MANAGER_Initialize 0020  
                   __end_of_I2C_ReStart 089B                     ?_setGestureLEDDrive 0070  
                               _printed 006D                         ?_mssp1_clearIRQ 0070  
              _do_I2C_SEND_RESTART_READ 08B5              __size_of_SYSTEM_Initialize 0018  
                               clrloop0 08F4                    __size_of_returnReset 0002  
                  end_of_initialization 0067                    ??_i2c1_driver_isNACK 0070  
                 ??_setAmbientLightGain 002A            __size_of_setProxIntLowThresh 0013  
                               init_ram 08F9            __end_of_i2c1_driver_sendNACK 08DD  
                               initloop 08FA         __size_ofi1_i2c1_driver_sendNACK 0004  
                            ?_I2C_Start 0070           enableGestureSensor@interrupts 0031  
          __end_of_i2c1_driver_resetBus 0876           setGestureExitThresh@threshold 002B  
                  ??_setGestureLEDDrive 002A                      readGesture@gstatus 0055  
                          initialize@id 0031                        ??_setGestureGain 002A  
                ??_setProxIntHighThresh 002A                        ??_setGestureMode 002A  
             _do_I2C_SEND_RESTART_WRITE 08B9                     Display_Name@string1 0025  
         __size_of_setGestureExitThresh 0013                                 strlen@a 0023  
                               strlen@s 0020                        ??_WDT_Initialize 0020  
                     _wireWriteDataByte 0A6E                              _returnStop 0878  
                             _PORTCbits 000E                __end_of_do_I2C_SEND_STOP 08C5  
                         ??_enablePower 0030                      ?_wireWriteDataByte 0026  
       setLightIntHighThreshold@val_low 002D          __size_of_setGestureEnterThresh 0013  
         __end_of_setGestureEnterThresh 09D8                           _decodeGesture 033A  
                    _isGestureAvailable 09B2                      _setGestureWaitTime 0B6E  
                             _SPI_Write 0A11                       __size_of_I2C_Stop 0003  
                           returnStop@p 0070                     ??_wireWriteDataByte 0029  
                      __CFG_FEXTOSC$OFF 0000                       _PWM_Output_Enable 08D1  
       processGestureData@ud_ratio_last 0035                     ?_isGestureAvailable 0070  
                   ?_setGestureWaitTime 0070                      ?_PWM_Output_Enable 0070  
                           _CCP1CONbits 0293                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
              __size_of_PWM1_Initialize 000C                     ??_PWM_Output_Enable 0020  
      __end_of_i2c1_driver_isBufferFull 0922                             _do_I2C_IDLE 08E2  
                           _do_I2C_RCEN 08E7               __end_of_wireWriteDataByte 0A89  
                        _I2C_Write_Byte 0A89                    ??_isGestureAvailable 0029  
                        __end_of___wmul 0AC1                    ??_setGestureWaitTime 002A  
                         __pidataCOMMON 0877                             ?_initialize 0070  
                           _I2C_ReStart 0898                          _ADC_Initialize 0932  
                i1_i2c1_driver_sendNACK 08B1                  ?_OSCILLATOR_Initialize 0070  
              _setLightIntHighThreshold 0B95              __size_of_wireReadDataBlock 004A  
                       _gesture_motion_ 0168                         _SPI2_Initialize 0914  
          __size_of_do_I2C_DO_NACK_STOP 0004             __size_of_processGestureData 02CF  
                        ?_decodeGesture 0070                          __end_of_strlen 0A3E  
               ?_do_I2C_DO_NACK_RESTART 0070                     start_initialization 002E  
                    setGestureGain@gain 002D                     _i2c_busCollisionISR 088F  
       __size_of_PIN_MANAGER_Initialize 0036               __end_of_PWM_Output_Enable 08D5  
              ?i1_i2c1_driver_getRXData 0070                              ?_SPI_Write 0070  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 0F9C  
                   __end_of_enablePower 0992            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 0C35  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1535 0039                 _processGestureData$1536 003B  
               _processGestureData$1537 003D                 _processGestureData$1538 003F  
                  ?_i2c_busCollisionISR 0070                        __CFG_LPBOREN$OFF 0000  
                  __end_of_mssp1_setIRQ 0889                  __end_of_I2C_Write_Byte 0AA5  
                      ??_PMD_Initialize 0020         setLightIntLowThreshold@val_high 002E  
                              ??___wmul 0024                    ?_enableGestureSensor 0070  
                           _CCPTMRSbits 029F                           ??_readGesture 0051  
                __end_of_ADC_Initialize 093A                           ?_do_I2C_RESET 0070  
                           __pdataBANK0 006E                             __pdataBANK2 0160  
                    setGestureMode@mode 002B                 _setLightIntLowThreshold 0BBC  
             setGestureIntEnable@enable 002C                setAmbientLightGain@drive 002B  
                           ?_returnStop 0070                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 08D1                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 08D9  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0076  
                             ___latbits 0002                               _adcResult 006C  
                  _i2c1_driver_resetBus 0875                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
              __size_of_TMR2_Initialize 0008                               _do_I2C_RX 0DBC  
                             _do_I2C_TX 0E02          __size_of_do_I2C_SEND_ADR_WRITE 0007  
         __size_ofi1_i2c1_driver_TXData 0005           __end_of_do_I2C_SEND_ADR_WRITE 090D  
                              ?_Get_ADC 0070                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0070  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0C8B  
                __size_of_handleGesture 005A                   ??_i2c_busCollisionISR 0070  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0D86  
               ??i1_i2c1_driver_restart 0070                 ??i1_i2c1_driver_startRX 0070  
                       ?_I2C_Write_Byte 0070                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 091B                          ??_do_I2C_RESET 0070  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0070                         ?_ADC_Initialize 0070  
           _i2c1_driver_busCollisionISR 006A                     _setProxIntLowThresh 09FE  
                 __end_of_do_I2C_DO_ACK 08C9                       ??_PWM1_Initialize 0020  
          ??_INTERRUPT_InterruptManager 0076                _i2c1_driver_isBufferFull 091B  
                              ?_getMode 0070                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0070              ??_do_I2C_SEND_RESTART_READ 0070  
                 ?_i2c1_driver_sendNACK 0070         __end_ofi1_i2c1_driver_getRXData 0886  
                      ??_mssp1_clearIRQ 0070                             _enablePower 0984  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 06D3  
                 ?_i2c1_driver_resetBus 0070      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 07FD                ??_resetGestureParameters 0020  
                              ?_setMode 002B              __size_of_PWM_Output_Enable 0004  
                            ?_do_I2C_RX 0070                              ?_do_I2C_TX 0070  
                      __CFG_WDTE$SWDTEN 0000                             ??_SPI_Write 0021  
                     _i2c1_driver_start 08A4                  __size_of_Display_Clear 0011  
                   __end_of_setLEDBoost 0CEE                     __end_of_setLEDDrive 0C0C  
                  ?_setProxIntLowThresh 0070                   readGesture@bytes_read 0056  
                    ?_i2c1_driver_start 0070                          ___wmul@product 0024  
                              _LATCbits 010E                     __size_of_returnStop 0002  
                             clear_ram0 08F3                                _PIE0bits 0090  
                              _PIE1bits 0091            __size_of_setGestureIntEnable 002B  
            __end_of_PWM_Output_Disable 0895                     _gesture_near_count_ 0060  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0028  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 0978               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 0880                       ??_PIN_MANAGER_IOC 0070  
                 __end_of_I2C_Send_NACK 08A4                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                              _ADCON0bits 009D  
                     ___wmul@multiplier 0020                       ?_do_I2C_SEND_STOP 0070  
             processGestureData@d_first 0046                           _handleGesture 0F42  
             __end_of_i2c1_driver_start 08A7                           ??_returnReset 0071  
                    ??_do_I2C_SEND_STOP 0070             __size_of_i2c1_driver_TXData 0006  
           __end_of_setAmbientLightGain 0AFD               processGestureData@l_first 0047  
     __end_of_do_I2C_SEND_RESTART_WRITE 08BD                 __end_of_do_I2C_TX_EMPTY 0CBC  
          __end_of_setGestureExitThresh 09EB               processGestureData@r_first 0048  
             processGestureData@u_first 0045                   ??_setProxIntLowThresh 002A  
          __size_of_do_I2C_SEND_RESTART 0004             __size_of_i2c1_driver_isNACK 0008  
                     setGestureGain@val 002C                   __size_of_mssp1_setIRQ 0003  
                     ??_TMR2_Initialize 0020                        __size_of_Get_ADC 00E0  
                   _do_I2C_DO_NACK_STOP 08C9                        __size_of_i2c_ISR 0026  
            ??_setLightIntHighThreshold 002C                       _ADC_GetConversion 0AC1  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0070  
                         _Display_Clear 09A1                            ?_do_I2C_RCEN 0070  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0070  
               ?i1_i2c1_driver_sendNACK 0070                 ??_OSCILLATOR_Initialize 0020  
                    ?_ADC_GetConversion 0020                     _i2c1_driver_sendACK 08AD  
                      __size_of___awdiv 0052           __size_of_setProxIntHighThresh 0013  
                           _readGesture 05E0         __size_of_do_I2C_DO_ADDRESS_NACK 002B  
                   i2c1_driver_TXData@d 0020                  ??_i2c1_driver_sendNACK 0020  
                          ??_initialize 0030                            ?_I2C_ReStart 0070  
                   _i2c1_driver_restart 0895        setLightIntLowThreshold@threshold 002A  
                  ?_do_I2C_DO_NACK_STOP 0070                     _i2c1_driver_startRX 089E  
                        ?_handleGesture 0070            __end_of_do_I2C_SEND_ADR_READ 0932  
                      __size_of_getMode 0009                  ??_i2c1_driver_resetBus 0070  
                  readGesture@fifo_data 0120                             _setLEDBoost 0CBC  
                   ??_ADC_GetConversion 0022                             _setLEDDrive 0BE3  
       __size_of_resetGestureParameters 0018                            _mssp1_setIRQ 0886  
       __end_of_setLightIntLowThreshold 0BE3                             ??_do_I2C_RX 0070  
                           ??_do_I2C_TX 0070                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0CEE  
                              __ptext11 09D8                                __ptext20 0EF0  
                              __ptext12 09C5                                __ptext21 09B2  
                              __ptext13 0ADF                                __ptext30 0A6E  
                              __ptext22 033A                                __ptext14 0963  
                              __ptext31 095A                                __ptext23 0F9C  
                              __ptext15 0F42                                __ptext40 08D9  
                              __ptext32 0AFD                                __ptext24 0CBC  
                              __ptext16 05E0                                __ptext41 096D  
                              __ptext33 0A89                                __ptext25 0B47  
                              __ptext17 07B3                                __ptext50 0914  
                              __ptext42 089E                                __ptext34 08ED  
                              __ptext26 0C60                                __ptext18 006B  
                              __ptext51 0978                                __ptext43 091B  
                              __ptext35 07FD                                __ptext27 0A56  
                              __ptext19 0AA5                                __ptext60 08D1  
                              __ptext52 0942                                __ptext44 089B  
                              __ptext36 08AA                                __ptext28 0984  
                              __ptext61 0892                                __ptext53 0D86  
                              __ptext45 0898                                __ptext37 08A7  
                              __ptext29 0E51                                __ptext70 0889  
                              __ptext62 0AC1                                __ptext54 093A  
                              __ptext46 0895                                __ptext38 08A4  
                              __ptext71 0DBC                                __ptext63 09A1  
                              __ptext55 0932                                __ptext47 0A3E  
                              __ptext39 08A1                                __ptext80 08C1  
                              __ptext72 0E02                                __ptext64 0A11  
                              __ptext56 090D                                __ptext48 08D5  
                              __ptext81 08BD                                __ptext73 0C35  
                              __ptext65 0992                                __ptext57 06D3  
                              __ptext49 094A                                __ptext90 0883  
                              __ptext82 08B9                                __ptext74 08CD  
                              __ptext58 0EA0                                __ptext91 08B1  
                              __ptext83 08B5                                __ptext75 08C9  
                              __ptext67 088F                                __ptext59 0A26  
                              __ptext92 0875                                __ptext84 08E2  
                              __ptext76 08C5                                __ptext68 088C  
                              __ptext93 0880                                __ptext85 08FF  
                              __ptext77 08E7                                __ptext69 0B21  
                              __ptext94 0002                                __ptext86 0C8B  
                              __ptext78 0906                                __ptext95 0878  
                              __ptext87 0886                                __ptext79 092A  
                              __ptext96 087D                                __ptext88 0922  
                              __ptext97 087A                                __ptext89 08DD  
                              __ptext98 08AD                                __ptext99 0874  
                 _setGestureEnterThresh 09C5                            _SSP1CON1bits 0215  
                          _SSP1CON2bits 0216          setGestureEnterThresh@threshold 002B  
                          _SSP2CON1bits 021D                    ?_i2c1_driver_sendACK 0070  
                  __end_of_do_I2C_RESET 0906                    ?_i2c1_driver_restart 0070  
                   __end_of_returnReset 0004                        _i2c1_driver_open 0963  
                      _i2c1_driver_stop 08AA                           __size_of_main 0034  
                  ?_i2c1_driver_startRX 0070                       ?_setProximityGain 0070  
        __size_of_i2c1_driver_getRXData 0003           __end_of_i2c1_driver_getRXData 089E  
                    __end_of_initialize 05E0               __end_of_ADC_GetConversion 0ADF  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1540 0022                      _decodeGesture$1541 0024  
                    _decodeGesture$1542 0026                      _decodeGesture$1543 0028  
                    _decodeGesture$1544 002A                      _decodeGesture$1545 002C  
                    _decodeGesture$1546 002E                      _decodeGesture$1547 0030  
                        ?_Display_Clear 0070          __end_ofi1_i2c1_driver_sendNACK 08B5  
                              int$flags 007E      __end_of_INTERRUPT_InterruptManager 002C  
            _INTERRUPT_InterruptManager 0004                            _SSP1STATbits 0214  
           __size_of_isGestureAvailable 0013                           Display_Name@i 002A  
                   setProximityGain@val 002C        __end_of_do_I2C_SEND_RESTART_READ 08B9  
           __size_of_setGestureWaitTime 0027              __end_of_processGestureData 033A  
                          ??_returnStop 0071                            _SSP2STATbits 021C  
                 ??_do_I2C_DO_NACK_STOP 0070                              Get_ADC@val 002F  
               __size_of_setGestureGain 0032                              _INTCONbits 000B  
               __size_of_setGestureMode 0027              __size_of_i2c1_driver_start 0003  
                setAmbientLightGain@val 002C                   ??_i2c1_driver_sendACK 0070  
                      ?_do_I2C_TX_EMPTY 0070                 __size_of_WDT_Initialize 0004  
                _do_I2C_DO_ADDRESS_NACK 0C35                                intlevel1 0000  
                 ??_i2c1_driver_restart 0020                   ??_i2c1_driver_startRX 0020  
               ?_PIN_MANAGER_Initialize 0070                        ??_I2C_Write_Byte 0021  
                     __CFG_CLKOUTEN$OFF 0000                      __end_of_returnStop 087A  
                       _PWM1_Initialize 0978                        ??_ADC_Initialize 0020  
                _resetGestureParameters 0A56              ??_i2c1_driver_isBufferFull 0020  
                         ?_Display_Name 0025          __size_ofi1_i2c1_driver_restart 0003  
         __end_ofi1_i2c1_driver_restart 087D          __size_ofi1_i2c1_driver_startRX 0003  
          __end_ofi1_i2c1_driver_TXData 08E2           __end_ofi1_i2c1_driver_startRX 0883  
                  _setGestureExitThresh 09D8                         ??_handleGesture 005B  
                         __pstringtext1 1000                           __pstringtext2 1030  
                         __pstringtext3 103D                           __pstringtext4 1049  
                         __pstringtext5 0000                              _SSP1DATPPS 0E21  
                          ?_enablePower 0070                              _SSP2DATPPS 0E1E  
                            _SSP1CLKPPS 0E20                     _setGestureIntEnable 0C60  
                            _SSP2CLKPPS 0E1D                        setLEDBoost@boost 002D  
                ?_setGestureEnterThresh 0070                             _returnReset 0002  
                            _PIR_Sensor 090D          __end_of_PIN_MANAGER_Initialize 0DBC  
           __end_of_i2c_busCollisionISR 0892               __size_of_wireReadDataByte 0024  
                      setLEDDrive@drive 002D                     processGestureData@i 004D  
                       _PIN_MANAGER_IOC 0874             __end_of_enableGestureSensor 1000  
                 _do_I2C_SEND_ADR_WRITE 0906                    ?_setGestureIntEnable 0070  
            __size_of_ADC_GetConversion 001E                    _do_I2C_SEND_ADR_READ 092A  
                       ??_Display_Clear 0023        __end_of_setLightIntHighThreshold 0BBC  
                        ??_Display_Name 0027  
